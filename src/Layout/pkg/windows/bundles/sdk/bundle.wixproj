<!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->
<Project Sdk="Microsoft.WixToolset.Sdk">

  <PropertyGroup>
    <!-- OutputType determines the extension, .msi, .wixlib, .exe, etc. -->
    <OutputType>Bundle</OutputType>

    <!-- Globbing will automatically find any .wxl relative to the project file. Since we're simshipping localized content for
         the bundle UI, we either need to exclude the .wxl files or place them in a directory outside of the project. For simshipping
         we only need to ensure the files are pulled in as additional payloads into the UX container. -->
    <DefaultItemExcludes>$(DefaultItemExcludes);LCID\**\*</DefaultItemExcludes>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="$(PkgMicrosoft_DotNet_Build_Tasks_Installers)\build\wix5\bundle\upgradePolicies.wxs" />

    <!-- This file is generated by the redist.csproj project. The fragment defines a package group
         to chain external MSIs from runtime, ASP.NET, and Windows Desktop into the bundle. There is no conditional
         check. If the file doesn't exist, there is likely a problem with the build. -->
    <Compile Include="$(DotNetPackageGroupWxsPath)" />

    <!-- Workload manifests will be included only if the source fragment was generated. -->
    <Compile Include="$(WorkloadManifestsWxsPath)" Condition="'$(WorkloadManifestsWxsPath)' != '' AND Exists('$(WorkloadManifestsWxsPath)')" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.WixToolset.Bal.wixext" />
    <PackageReference Include="Microsoft.WixToolset.Util.wixext" />
    <PackageReference Include="Microsoft.WixToolset.UI.wixext" />
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Installers" GeneratePathProperty="true"/>
  </ItemGroup>

  <Target Name="SetInstallerInfo" BeforeTargets="CoreCompile">
    <PropertyGroup>
      <!-- Product and version related preprocessor definitions. -->
      <DefineConstants>$(DefineConstants);ProductName=$(SdkBrandName) ($(TargetArchitecture))</DefineConstants>
      <DefineConstants>$(DefineConstants);WinFormsAndWpfVersion=$(WinFormsAndWpfVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRuntimeVersion=$(DotNetRuntimeVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);AspNetCoreVersion=$(AspNetCoreVersion)</DefineConstants>
      <DefineConstants>$(DefineConstants);MinimumVSVersion=$(MinimumVSVersion)</DefineConstants>

      <!-- PlatformToken is used to generate a generate a WiX variable name using a preprocessor variable so casing matters. -->
      <DefineConstants>$(DefineConstants);PlatformToken=$(InstallerPlatform.ToUpper())</DefineConstants>

      <!-- Source paths for packages to chain. -->
      <DefineConstants>$(DefineConstants);FinalizerExeSourceFile=$(FinalizerExeSourceFile)</DefineConstants>
      <DefineConstants>$(DefineConstants);TemplatesMsiSourceFile=$(TemplatesMsiSourceFile)</DefineConstants>
      <DefineConstants>$(DefineConstants);SdkMsiSourceFile=$(SdkMsiSourceFile)</DefineConstants>

      <DefineConstants Condition="'$(WorkloadManifestsWxsPath)' != '' AND Exists('$(WorkloadManifestsWxsPath)')">$(DefineConstants);IncludeWorkloadManifests=true</DefineConstants>
    </PropertyGroup>
  </Target>
</Project>
