<!--
***********************************************************************************************
Microsoft.TestPlatform.CrossTargeting.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved.
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <VSTestTaskAssemblyFile Condition="$(VSTestTaskAssemblyFile) == ''">$(MSBuildExtensionsPath)\Microsoft.TestPlatform.Build.dll</VSTestTaskAssemblyFile>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>
  <UsingTask TaskName="Microsoft.TestPlatform.Build.Tasks.VSTestLogsTask" AssemblyFile="$(VSTestTaskAssemblyFile)" />

  <!--
  ===================================================================================
               DispatchToInnerBuildsWithVSTestTarget

     Builds this project with /t:$(InnerVSTestTargets) /p:TargetFramework=X for each
     value X in $(TargetFrameworks)

     [IN]
     $(TargetFrameworks) - Semicolon delimited list of target frameworks.
     $(InnerVSTestTargets) - The targets to build for each target framework

     [OUT]
     @(InnerOutput) - The combined output items of inner targets across
                      all target frameworks..

  ===================================================================================
  -->
  <Target Name="DispatchToInnerBuildsWithVSTestTarget" Returns="@(InnerOutput)">
    <PropertyGroup>
      <!-- 
        Emulating technique found in Microsoft.Build.Traversal for deciding whether to run tests in parallel.
        Setting either property will revert to previous behavior of running tests in parallel, but without their
        different TFMs running in parallel.
      -->
      <_TestTfmsInParallel>$([MSBuild]::ValueOrDefault('$(TestTfmsInParallel)', '$(BuildInParallel)'))</_TestTfmsInParallel>
    </PropertyGroup>
    <ItemGroup>
      <_TargetFramework Include="$(TargetFrameworks)" />
      <_ProjectToTestWithTFM Include="$(MSBuildProjectFile)" Properties="TargetFramework=%(_TargetFramework.Identity);VSTestNoBuild=true" />
    </ItemGroup>
    <MSBuild Projects="@(_ProjectToTestWithTFM)"
             Condition="'$(TargetFrameworks)' != '' "
             Targets="$(InnerVSTestTargets)"
             ContinueOnError="ErrorAndContinue"
             BuildInParallel="$(_TestTfmsInParallel)">
      <Output ItemName="InnerOutput" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <!--
  ===================================================================================
               DispatchToInnerBuildsWithMTPTarget

     Calls _MTPBuild with /p:TargetFramework=X for each value X in $(TargetFrameworks)
     This ensures property collection happens for each TFM even when build is skipped

  ===================================================================================
  -->
  <Target Name="DispatchToInnerBuildsWithMTPTarget" Returns="@(InnerOutput)">
    <PropertyGroup>
      <_TestTfmsInParallel>$([MSBuild]::ValueOrDefault('$(TestTfmsInParallel)', '$(BuildInParallel)'))</_TestTfmsInParallel>
    </PropertyGroup>
    <ItemGroup>
      <_TargetFramework Include="$(TargetFrameworks)" />
      <_ProjectToCollectPropsWithTFM Include="$(MSBuildProjectFile)" Properties="TargetFramework=%(_TargetFramework.Identity)" />
    </ItemGroup>
    <MSBuild Projects="@(_ProjectToCollectPropsWithTFM)"
             Condition="'$(TargetFrameworks)' != '' "
             Targets="_MTPBuild"
             ContinueOnError="ErrorAndContinue"
             BuildInParallel="$(_TestTfmsInParallel)">
      <Output ItemName="InnerOutput" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <!--
  ==================================================================================
                                   VSTest

   Cross-targeting version of VSTest.

   [IN]
   $(TargetFrameworks) - Semicolon delimited list of target frameworks.
   $(InnerVSTestTargets) - The targets to build for each target framework. Defaults
                         to 'VSTest' if unset, but allows override to support
                         `msbuild /p:InnerTargets=X;Y;Z` which will build X, Y,
                         and Z targets for each target framework.

   [OUT]
   @(InnerOutput) - The combined output items of the inner targets across
                    all builds.
  =================================================================================
  -->
  <Target Name="VSTest" DependsOnTargets="_ComputeTargetFrameworkItems">
    <CallTarget Condition="'$(VSTestNoBuild)' != 'true'" Targets="BuildProject" />
    <CallTarget Targets="SetVSTestInnerTarget" />
    <CallTarget Targets="DispatchToInnerBuildsWithVSTestTarget" />
  </Target>

  <Target Name="BuildProject">
    <Microsoft.TestPlatform.Build.Tasks.VSTestLogsTask LogType="BuildStarted" />
    <CallTarget Targets="Build" />
    <Microsoft.TestPlatform.Build.Tasks.VSTestLogsTask LogType="BuildCompleted" />
  </Target>

  <Target Name="SetVSTestInnerTarget" Returns="@(InnerOutput)">
    <PropertyGroup Condition="'$(InnerVSTestTargets)' == ''">
      <InnerVSTestTargets>VSTest</InnerVSTestTargets>
    </PropertyGroup>
  </Target>

  <!--
  ==================================================================================
                                   _MTPBuild

   Cross-targeting version of MTP. This dispatches to inner builds to ensure
   property collection happens for each target framework.

  =================================================================================
  -->
  <Target Name="_MTPBuild" DependsOnTargets="_ComputeTargetFrameworkItems">
    <!-- Collect outer build properties before any build operations -->
    <CallTarget Targets="CollectOuterBuildProperties" />
    <CallTarget Targets="Build" Condition="'$(ShouldRunBuild)' == 'true'"  />
    <CallTarget Targets="DispatchToInnerBuildsWithMTPTarget" Condition="'$(ShouldRunBuild)' == 'false'" />
  </Target>

  <!--
  ==================================================================================
                            CollectOuterBuildProperties

   Collects outer build context properties that are not available in inner builds.
   This includes properties like TestTfmsInParallel, BuildInParallel, and TargetFrameworks
   that control how multi-TFM projects are built and tested.

  =================================================================================
  -->
  <Target Name="CollectOuterBuildProperties"
          Condition="'$(TargetFrameworks)' != '' AND ('$(IsTestProject)' == 'true' OR '$(IsTestingPlatformApplication)' == 'true')">

    <PropertyGroup>
      <!-- Create the outer build properties message with empty TargetFramework to indicate outer context -->
      <_OuterTestPropsMessage>DOTNET_TEST_PROPS: MSBuildProjectFullPath=$(MSBuildProjectFullPath)|TargetFramework=|TargetFrameworks=$(TargetFrameworks)|IsTestProject=$(IsTestProject)|IsTestingPlatformApplication=$(IsTestingPlatformApplication)|TargetPath=|RunCommand=|RunArguments=|RunWorkingDirectory=|AppDesignerFolder=$(AppDesignerFolder)|TestTfmsInParallel=$(TestTfmsInParallel)|BuildInParallel=$(BuildInParallel)</_OuterTestPropsMessage>
    </PropertyGroup>

    <!-- Log the outer build properties message -->
    <Message Text="$(_OuterTestPropsMessage)" Importance="high" />

  </Target>

</Project>
