<Project TreatAsLocalProperty="PublicBaseURL">

  <PropertyGroup>
    <!-- Only the runtime OSX .pkgs have a `-internal` suffix -->
    <InstallerStartSuffix Condition="$([MSBuild]::IsOSPlatform('OSX'))">-internal</InstallerStartSuffix>
    <!-- Use the "x64" Rid when downloading Linux shared framework 'DEB' installer files. -->
    <InstallerTargetArchitecture>$(Architecture)</InstallerTargetArchitecture>
    <InstallerTargetArchitecture Condition="'$(IsRPMBasedDistro)' == 'true' and '$(Architecture)' == 'Arm64'">aarch64</InstallerTargetArchitecture>

    <SharedFrameworkInstallerFileRid>$(NetRuntimeRid)</SharedFrameworkInstallerFileRid>
    <SharedFrameworkInstallerFileRid Condition="'$(IsDebianBaseDistro)' == 'true' OR '$(IsRPMBasedDistro)' == 'true'">$(InstallerTargetArchitecture)</SharedFrameworkInstallerFileRid>

    <!-- Blob storage directories are not stabilized, so these must refer to a package that does not stabilize -->
    <!-- In unified build, the layout does match, so use the runtime package versions rather than the VS redist versions -->
    <AspNetCoreBlobVersion>$(MicrosoftAspNetCoreAppRefInternalPackageVersion)</AspNetCoreBlobVersion>
    <NetRuntimeBlobVersion>$(MicrosoftNETCorePlatformsPackageVersion)</NetRuntimeBlobVersion>
    <WindowsDesktopBlobVersion>$(VSRedistCommonWindowsDesktopSharedFrameworkx64100PackageVersion)</WindowsDesktopBlobVersion>
    <WindowsDesktopBlobVersion Condition="'$(DotNetBuildOrchestrator)' == 'true'">$(MicrosoftWindowsDesktopAppRuntimePackageVersion)</WindowsDesktopBlobVersion>
    <NETStandardTargetingPackBlobVersion>3.0.0</NETStandardTargetingPackBlobVersion>

    <AlternateArchitecture Condition="'$(Architecture)' == 'x86'">x64</AlternateArchitecture>
    <AlternateArchitecture Condition="'$(Architecture)' == 'x64'">x86</AlternateArchitecture>
    <DownloadedSharedHostInstallerFileName Condition="'$(InstallerExtension)' != ''">dotnet-host$(InstallerStartSuffix)-$(SharedHostVersion)-$(SharedFrameworkInstallerFileRid)$(InstallerExtension)</DownloadedSharedHostInstallerFileName>
    <DownloadedHostFxrInstallerFileName Condition="'$(InstallerExtension)' != ''">dotnet-hostfxr$(InstallerStartSuffix)-$(HostFxrVersion)-$(SharedFrameworkInstallerFileRid)$(InstallerExtension)</DownloadedHostFxrInstallerFileName>
    <DownloadedSharedFrameworkInstallerFileName Condition="'$(InstallerExtension)' != '' and '$(PgoInstrument)' != 'true'">dotnet-runtime$(InstallerStartSuffix)-$(MicrosoftNETCoreAppRuntimePackageVersion)-$(SharedFrameworkInstallerFileRid)$(InstallerExtension)</DownloadedSharedFrameworkInstallerFileName>
    <DownloadedSharedFrameworkInstallerFileName Condition="'$(InstallerExtension)' != '' and '$(PgoInstrument)' == 'true'">dotnet-runtime$(InstallerStartSuffix)$(PgoTerm)-$(VSRedistCommonNetCoreSharedFrameworkx64100PackageVersion)-$(SharedFrameworkInstallerFileRid)$(InstallerExtension)</DownloadedSharedFrameworkInstallerFileName>
    <DownloadedWinFormsAndWpfSharedFrameworkInstallerFileName Condition=" '$(InstallerExtension)' != ''">windowsdesktop-runtime-$(MicrosoftWindowsDesktopAppRuntimePackageVersion)-$(SharedFrameworkInstallerFileRid)$(InstallerExtension)</DownloadedWinFormsAndWpfSharedFrameworkInstallerFileName>
    <DownloadedNetCoreAppTargetingPackInstallerFileName Condition="'$(InstallerExtension)' != ''">dotnet-targeting-pack-$(MicrosoftNETCoreAppRefPackageVersion)-$(SharedFrameworkInstallerFileRid)$(InstallerExtension)</DownloadedNetCoreAppTargetingPackInstallerFileName>
    <DownloadedNetCoreAppHostPackInstallerFileName Condition="'$(InstallerExtension)' != ''">dotnet-apphost-pack-$(MicrosoftNETCoreAppHostPackageVersion)-$(SharedFrameworkInstallerFileRid)$(InstallerExtension)</DownloadedNetCoreAppHostPackInstallerFileName>
    <DownloadedAlternateNetCoreAppHostPackInstallerFileName Condition="'$(InstallerExtension)' != ''">dotnet-apphost-pack-$(MicrosoftNETCoreAppHostPackageVersion)-$(SharedFrameworkInstallerFileRid)_$(AlternateArchitecture)$(InstallerExtension)</DownloadedAlternateNetCoreAppHostPackInstallerFileName>
    <DownloadedArm64NetCoreAppHostPackInstallerFileName Condition="'$(InstallerExtension)' != ''">dotnet-apphost-pack-$(MicrosoftNETCoreAppHostPackageVersion)-$(SharedFrameworkInstallerFileRid)_arm64$(InstallerExtension)</DownloadedArm64NetCoreAppHostPackInstallerFileName>
    <DownloadedWindowsDesktopTargetingPackInstallerFileName Condition="'$(InstallerExtension)' != ''">windowsdesktop-targeting-pack-$(MicrosoftWindowsDesktopAppRefPackageVersion)-$(SharedFrameworkInstallerFileRid)$(InstallerExtension)</DownloadedWindowsDesktopTargetingPackInstallerFileName>
    <DownloadedNetStandardTargetingPackInstallerFileName Condition="'$(InstallerExtension)' != ''">netstandard-targeting-pack-$(NETStandardLibraryRefPackageVersion)-$(SharedFrameworkInstallerFileRid)$(InstallerExtension)</DownloadedNetStandardTargetingPackInstallerFileName>
    <!-- osx-arm64 netstandard targeting pack pkg is unavailable. Use osx-x64.
          This should be OK, because the package is just a compressed file containing reference assemblies and
          runtime independent manifest text files. -->
    <DownloadedNetStandardTargetingPackInstallerFileName Condition="'$(SharedFrameworkInstallerFileRid)' == 'osx-arm64'">netstandard-targeting-pack-$(NETStandardLibraryRefPackageVersion)-osx-x64$(InstallerExtension)</DownloadedNetStandardTargetingPackInstallerFileName>

    <SdkMSIInstallerFileName>$(ArtifactNameWithVersionSdk)$(InstallerExtension)</SdkMSIInstallerFileName>
    <SdkTemplatesMSIInstallerFileName>dotnet-$(VersionMajor)$(VersionMinor)templates-$(FullNugetVersion)-$(ProductMonikerRid)$(InstallerExtension)</SdkTemplatesMSIInstallerFileName>

    <CombinedFrameworkHostArchiveFileName Condition="'$(PgoInstrument)' != 'true'">dotnet-runtime-$(MicrosoftNETCoreAppRuntimePackageVersion)-$(SharedFrameworkRid)$(ArchiveExtension)</CombinedFrameworkHostArchiveFileName>
    <CombinedFrameworkHostArchiveFileName Condition="'$(PgoInstrument)' == 'true'">dotnet-runtime$(PgoTerm)-$(VSRedistCommonNetCoreSharedFrameworkx64100PackageVersion)-$(SharedFrameworkRid)$(ArchiveExtension)</CombinedFrameworkHostArchiveFileName>
    <WinFormsAndWpfSharedFxArchiveFileName>windowsdesktop-runtime-$(MicrosoftWindowsDesktopAppRuntimePackageVersion)-$(SharedFrameworkRid)$(ArchiveExtension)</WinFormsAndWpfSharedFxArchiveFileName>

    <AspNetCoreInstallerRid Condition="'$(AspNetCoreInstallerRid)' == ''">$(SharedFrameworkRid)</AspNetCoreInstallerRid>
    <AspNetCoreArchiveRid>$(AspNetCoreInstallerRid)</AspNetCoreArchiveRid>
    <AspNetCoreInstallerRid Condition="('$(InstallerExtension)' == '.deb' OR '$(InstallerExtension)' == '.rpm') AND '$(Architecture)' != 'arm64'">x64</AspNetCoreInstallerRid>
    <AspNetCoreInstallerRid Condition="'$(InstallerExtension)' == '.rpm' AND '$(Architecture)' == 'arm64'">aarch64</AspNetCoreInstallerRid>

    <DownloadedAspNetCoreSharedFxInstallerFileName Condition="'$(InstallerExtension)' != '' AND !$([MSBuild]::IsOSPlatform('OSX'))">aspnetcore-runtime-$(MicrosoftAspNetCoreAppRuntimePackageVersion)-$(AspNetCoreInstallerRid)$(InstallerExtension)</DownloadedAspNetCoreSharedFxInstallerFileName>
    <DownloadedAspNetCoreSharedFxInstallerFileName Condition="'$(InstallerExtension)' == '.msi'">aspnetcore-runtime-$(VSRedistCommonAspNetCoreSharedFrameworkx64100PackageVersion)-$(AspNetCoreInstallerRid)$(InstallerExtension)</DownloadedAspNetCoreSharedFxInstallerFileName>
    <DownloadedAspNetTargetingPackInstallerFileName Condition="'$(InstallerExtension)' != ''">aspnetcore-targeting-pack-$(MicrosoftAspNetCoreAppRefPackageVersion)-$(AspNetCoreInstallerRid)$(InstallerExtension)</DownloadedAspNetTargetingPackInstallerFileName>
    <DownloadedAspNetTargetingPackInstallerFileName Condition="'$(InstallerExtension)' == '.msi'">aspnetcore-targeting-pack-$(MicrosoftAspNetCoreAppRefInternalPackageVersion)-$(AspNetCoreInstallerRid)$(InstallerExtension)</DownloadedAspNetTargetingPackInstallerFileName>
    <AspNetTargetingPackArchiveFileName>aspnetcore-targeting-pack-$(MicrosoftAspNetCoreAppRefPackageVersion)-$(AspNetCoreArchiveRid)$(ArchiveExtension)</AspNetTargetingPackArchiveFileName>
    <AspNetCoreSharedFxArchiveFileName>aspnetcore-runtime-$(MicrosoftAspNetCoreAppRuntimePackageVersion)-$(AspNetCoreArchiveRid)$(ArchiveExtension)</AspNetCoreSharedFxArchiveFileName>

    <!-- URLs -->
    <InternalBuild Condition="$(SYSTEM_TEAMPROJECT) == 'internal'">true</InternalBuild>
    <InternalBaseURL Condition="$(SYSTEM_TEAMPROJECT) == 'internal'">https://dotnetbuilds.blob.core.windows.net/internal/</InternalBaseURL>
    <!-- Base url for official releases. Used to obtain some assets from older releases when necessary. -->
    <OfficialBaseURL>https://dotnetcli.blob.core.windows.net/dotnet/</OfficialBaseURL>
    <PublicBaseURL Condition="'$(PublicBaseURL)' == ''">$(OfficialBaseURL)</PublicBaseURL>
    <!-- MSBuild removes the '//' slashes when passing PublicBaseURL from the outer to the inner build. -->
    <PublicBaseURL Condition="$(PublicBaseURL.StartsWith('file:')) and '$(OS)' != 'Windows_NT'">$([System.Text.RegularExpressions.Regex]::Replace('$(PublicBaseURL)', '%28file:\/{1,}%29%28.+%29', 'file:///%242'))</PublicBaseURL>

    <!-- Generate the version specific URLs to the targeting packs, runtime packs, etc. -->
    <NetRuntimeRootUrl>$(PublicBaseURL)Runtime/$(NetRuntimeBlobVersion)</NetRuntimeRootUrl>
    <NetStandardTargetingPackRootUrl>$(OfficialBaseURL)Runtime/$(NETStandardTargetingPackBlobVersion)</NetStandardTargetingPackRootUrl>
    <AspNetCoreSharedFxRootUrl>$(PublicBaseURL)aspnetcore/Runtime/$(AspNetCoreBlobVersion)</AspNetCoreSharedFxRootUrl>
    <WinFormsAndWpfSharedFxRootUrl>$(PublicBaseURL)WindowsDesktop/$(WindowsDesktopBlobVersion)</WinFormsAndWpfSharedFxRootUrl>
    <SdkRootUrl>$(PublicBaseURL)Sdk/$(FullNugetVersion)</SdkRootUrl>

    <IncludeWpfAndWinForms Condition="'$(IncludeWpfAndWinForms)' == '' AND '$(OS)' == 'Windows_NT'">true</IncludeWpfAndWinForms>
    <IncludeWpfAndWinForms Condition="'$(IncludeWpfAndWinForms)' == ''">false</IncludeWpfAndWinForms>
  </PropertyGroup>

  <!-- BEGIN: Bundled layout packages -->
  <ItemGroup>
    <BundledLayoutPackage Include="Microsoft.NETCore.App.Ref"
      PackageName="Microsoft.NETCore.App.Ref"
      PackageVersion="$(MicrosoftNETCoreAppRefPackageVersion)"
      RelativeLayoutPath="packs/%(PackageName)/%(PackageVersion)" />

    <BundledLayoutPackage Include="NETStandard.Library.Ref"
      PackageName="NETStandard.Library.Ref"
      PackageVersion="$(NETStandardLibraryRefPackageVersion)"
      RelativeLayoutPath="packs/%(PackageName)/%(PackageVersion)" />

    <BundledLayoutPackage Include="Microsoft.AspNetCore.App.Ref"
      PackageName="Microsoft.AspNetCore.App.Ref"
      PackageVersion="$(MicrosoftAspNetCoreAppRefPackageVersion)"
      RelativeLayoutPath="packs/%(PackageName)/%(PackageVersion)" />

    <BundledLayoutPackage Include="Microsoft.NETCore.App.Host.$(SharedFrameworkRid)"
      PackageName="Microsoft.NETCore.App.Host.$(SharedFrameworkRid)"
      PackageVersion="$(MicrosoftNETCoreAppHostPackageVersion)"
      RelativeLayoutPath="packs/%(PackageName)/%(PackageVersion)" />

    <BundledLayoutPackage Include="Microsoft.NETCore.App.Runtime.$(SharedFrameworkRid)"
      PackageName="Microsoft.NETCore.App.Runtime.$(SharedFrameworkRid)"
      Condition="'$(BundleRuntimePacks)' == 'true'"
      PackageVersion="$(MicrosoftNETCoreAppRuntimePackageVersion)"
      RelativeLayoutPath="packs/%(PackageName)/%(PackageVersion)" />

    <BundledLayoutPackage Include="Microsoft.AspNetCore.App.Runtime.$(SharedFrameworkRid)"
      PackageName="Microsoft.AspNetCore.App.Runtime.$(SharedFrameworkRid)"
      Condition="'$(BundleRuntimePacks)' == 'true'"
      PackageVersion="$(MicrosoftAspNetCoreAppRuntimePackageVersion)"
      RelativeLayoutPath="packs/%(PackageName)/%(PackageVersion)" />

    <BundledLayoutPackage Include="Microsoft.WindowsDesktop.App.Ref"
      PackageName="Microsoft.WindowsDesktop.App.Ref"
      Condition="'$(IncludeWpfAndWinForms)' != 'false'"
      PackageVersion="$(MicrosoftWindowsDesktopAppRefPackageVersion)"
      RelativeLayoutPath="packs/%(PackageName)/%(PackageVersion)" />

    <BundledLayoutPackage Include="runtime.$(SharedFrameworkRid).Microsoft.DotNet.ILCompiler"
      Condition="'$(BundleNativeAotCompiler)' == 'true'"
      PackageName="runtime.$(SharedFrameworkRid).Microsoft.DotNet.ILCompiler"
      PackageVersion="$(MicrosoftNETCoreAppRuntimePackageVersion)"
      RelativeLayoutPath="packs/%(PackageName)/%(PackageVersion)" />

    <BundledLayoutPackage Include="Microsoft.DotNet.ILCompiler"
      Condition="'$(BundleNativeAotCompiler)' == 'true'"
      PackageName="Microsoft.DotNet.ILCompiler"
      PackageVersion="$(MicrosoftNETCoreAppRuntimePackageVersion)"
      RelativeLayoutPath="library-packs"
      SkipExtractPackage="true" />

    <BundledLayoutPackage Include="Microsoft.NET.ILLink.Tasks"
      Condition="'$(BundleNativeAotCompiler)' == 'true'"
      PackageName="Microsoft.NET.ILLink.Tasks"
      PackageVersion="$(MicrosoftNETILLinkTasksPackageVersion)"
      RelativeLayoutPath="library-packs"
      SkipExtractPackage="true" />
  </ItemGroup>
  <!-- END: Bundled layout packages -->

  <!-- Restore bundled packages -->
  <ItemGroup>
    <PackageDownload Include="@(BundledLayoutPackage->Metadata('PackageName'))" Version="[%(PackageVersion)]" />
  </ItemGroup>

  <!-- BEGIN: Bundled layout components -->
  <ItemGroup>
    <BundledLayoutComponent Include="CombinedSharedHostAndFrameworkArchive">
      <BaseUrl>$(NetRuntimeRootUrl)</BaseUrl>
      <DownloadFileName>$(CombinedFrameworkHostArchiveFileName)</DownloadFileName>
      <RelativeLayoutPath></RelativeLayoutPath>
    </BundledLayoutComponent>

    <BundledLayoutComponent Include="DownloadedAspNetCoreSharedFxArchiveFile"
                            Condition="'$(IncludeAspNetCoreRuntime)' != 'false'">
      <BaseUrl>$(AspNetCoreSharedFxRootUrl)</BaseUrl>
      <DownloadFileName>$(AspNetCoreSharedFxArchiveFileName)</DownloadFileName>
      <RelativeLayoutPath></RelativeLayoutPath>
      <DirectoriesToCopy>shared/Microsoft.AspNetCore.App</DirectoriesToCopy>
    </BundledLayoutComponent>
    <!-- The AspNet does not provide native MacOS PKG installers at this time; we use AspNet archives.
          https://github.com/aspnet/AspNetCore/issues/8806 -->
    <BundledLayoutComponent Include="DownloadedAspNetTargetingPackArchiveFile"
                            Condition="'$(IncludeAspNetCoreRuntime)' != 'false' and '$(InstallerExtension)' == '.pkg' And '$(SkipBuildingInstallers)' != 'true' And (!$(Architecture.StartsWith('arm')) or '$(Rid)' == 'osx-arm64')">
      <BaseUrl>$(AspNetCoreSharedFxRootUrl)</BaseUrl>
      <DownloadFileName>$(AspNetTargetingPackArchiveFileName)</DownloadFileName>
      <RelativeLayoutPath></RelativeLayoutPath>
    </BundledLayoutComponent>

    <BundledLayoutComponent Include="WinFormsAndWpfSharedFxArchiveFile"
                            Condition="'$(IncludeWpfAndWinForms)' != 'false'">
      <BaseUrl>$(WinFormsAndWpfSharedFxRootUrl)</BaseUrl>
      <DownloadFileName>$(WinFormsAndWpfSharedFxArchiveFileName)</DownloadFileName>
      <DirectoriesToCopy>shared/Microsoft.WindowsDesktop.App</DirectoriesToCopy>
    </BundledLayoutComponent>
  </ItemGroup>
  <!-- END: Bundled layout components -->

  <!-- BEGIN: Bundled installer components -->
  <ItemGroup Condition="'$(SkipBuildingInstallers)' != 'true'">
    <BundledInstallerComponent Include="DownloadedSharedFrameworkInstallerFile"
                                Condition="'$(InstallerExtension)' != '' And (!$(Architecture.StartsWith('arm')) or '$(Rid)' == 'win-arm64' or '$(Rid)' == 'osx-arm64')">
      <BaseUrl>$(NetRuntimeRootUrl)</BaseUrl>
      <DownloadFileName>$(DownloadedSharedFrameworkInstallerFileName)</DownloadFileName>
    </BundledInstallerComponent>

    <BundledInstallerComponent Include="DownloadedSharedHostInstallerFile"
                                Condition="'$(InstallerExtension)' != '' And (!$(Architecture.StartsWith('arm')) or '$(Rid)' == 'win-arm64' or '$(Rid)' == 'osx-arm64')">
      <BaseUrl>$(NetRuntimeRootUrl)</BaseUrl>
      <DownloadFileName>$(DownloadedSharedHostInstallerFileName)</DownloadFileName>
    </BundledInstallerComponent>

    <BundledInstallerComponent Include="DownloadedHostFxrInstallerFile"
                                Condition="'$(InstallerExtension)' != '' And (!$(Architecture.StartsWith('arm')) or '$(Rid)' == 'win-arm64' or '$(Rid)' == 'osx-arm64')">
      <BaseUrl>$(NetRuntimeRootUrl)</BaseUrl>
      <DownloadFileName>$(DownloadedHostFxrInstallerFileName)</DownloadFileName>
    </BundledInstallerComponent>

    <BundledInstallerComponent Include="DownloadedNetCoreAppTargetingPackInstallerFile"
                                Condition="'$(InstallerExtension)' != '' And (!$(Architecture.StartsWith('arm')) or '$(Rid)' == 'win-arm64' or '$(Rid)' == 'osx-arm64')">
      <BaseUrl>$(NetRuntimeRootUrl)</BaseUrl>
      <DownloadFileName>$(DownloadedNetCoreAppTargetingPackInstallerFileName)</DownloadFileName>
    </BundledInstallerComponent>

    <!-- TODO: Should we somehow obtain a .NET Standard ARM64 package? -->
    <BundledInstallerComponent Include="DownloadedNetStandardTargetingPackInstallerFile"
                          Condition="'$(InstallerExtension)' != '' And (!$(Architecture.StartsWith('arm')) or '$(Rid)' == 'osx-arm64')">
      <BaseUrl>$(NetStandardTargetingPackRootUrl)</BaseUrl>
      <DownloadFileName>$(DownloadedNetStandardTargetingPackInstallerFileName)</DownloadFileName>
    </BundledInstallerComponent>

    <BundledInstallerComponent Include="DownloadedNetCoreAppHostPackInstallerFile"
                    Condition="'$(InstallerExtension)' != '' And (!$(Architecture.StartsWith('arm')) or '$(Rid)' == 'win-arm64' or '$(Rid)' == 'osx-arm64')">
      <BaseUrl>$(NetRuntimeRootUrl)</BaseUrl>
      <DownloadFileName>$(DownloadedNetCoreAppHostPackInstallerFileName)</DownloadFileName>
    </BundledInstallerComponent>

    <!-- These are apphosts from a different vertical which require a join in the VMR. -->
    <BundledInstallerComponent Include="DownloadedAlternateNetCoreAppHostPackInstallerFile"
                                Condition="'$(InstallerExtension)' == '.msi' and !$(Architecture.StartsWith('arm')) and ('$(DotNetBuild)' != 'true' or '$(GenerateSdkBundleOnly)' == 'true')">
      <BaseUrl>$(NetRuntimeRootUrl)</BaseUrl>
      <DownloadFileName>$(DownloadedAlternateNetCoreAppHostPackInstallerFileName)</DownloadFileName>
    </BundledInstallerComponent>

    <!-- These are apphosts from a different vertical which require a join in the VMR. -->
    <BundledInstallerComponent Include="DownloadedArm64NetCoreAppHostPackInstallerFile"
                                Condition="'$(InstallerExtension)' == '.msi' And !$(Architecture.StartsWith('arm'))  and ('$(DotNetBuild)' != 'true' or '$(GenerateSdkBundleOnly)' == 'true')">
      <BaseUrl>$(NetRuntimeRootUrl)</BaseUrl>
      <DownloadFileName>$(DownloadedArm64NetCoreAppHostPackInstallerFileName)</DownloadFileName>
    </BundledInstallerComponent>

    <BundledInstallerComponent Include="DownloadedWindowsDesktopTargetingPackInstallerFile"
                                Condition="'$(InstallerExtension)' == '.msi'">
      <BaseUrl>$(WinFormsAndWpfSharedFxRootUrl)</BaseUrl>
      <DownloadFileName>$(DownloadedWindowsDesktopTargetingPackInstallerFileName)</DownloadFileName>
    </BundledInstallerComponent>
  </ItemGroup>

  <ItemGroup Condition="'$(SkipBuildingInstallers)' != 'true' and '$(IncludeAspNetCoreRuntime)' != 'false'">
    <BundledInstallerComponent Include="DownloadedAspNetTargetingPackInstallerFile"
                                Condition="'$(InstallerExtension)' != '.pkg' And '$(InstallerExtension)' != '' And (!$(Architecture.StartsWith('arm')) or '$(Rid)' == 'win-arm64')">
      <BaseUrl>$(AspNetCoreSharedFxRootUrl)</BaseUrl>
      <DownloadFileName>$(DownloadedAspNetTargetingPackInstallerFileName)</DownloadFileName>
    </BundledInstallerComponent>

    <BundledInstallerComponent Include="DownloadedAspNetCoreSharedFxInstallerFile"
                                Condition="'$(InstallerExtension)' != '.pkg' And '$(InstallerExtension)' != '' And (!$(Architecture.StartsWith('arm')) or '$(Rid)' == 'win-arm64')">
      <BaseUrl>$(AspNetCoreSharedFxRootUrl)</BaseUrl>
      <DownloadFileName>$(DownloadedAspNetCoreSharedFxInstallerFileName)</DownloadFileName>
    </BundledInstallerComponent>
  </ItemGroup>

  <ItemGroup Condition="'$(SkipBuildingInstallers)' != 'true' and '$(IncludeWpfAndWinForms)' != 'false'">
    <BundledInstallerComponent Include="DownloadedWinFormsAndWpfSharedFrameworkInstallerFile"
                                Condition="'$(InstallerExtension)' != '' And (!$(Architecture.StartsWith('arm')) or '$(Rid)' == 'win-arm64' or '$(Rid)' == 'osx-arm64')">
      <BaseUrl>$(WinFormsAndWpfSharedFxRootUrl)</BaseUrl>
      <DownloadFileName>$(DownloadedWinFormsAndWpfSharedFrameworkInstallerFileName)</DownloadFileName>
    </BundledInstallerComponent>
  </ItemGroup>

  <!-- When building the sdk bundle only, acquire sdk and template msis. -->
  <ItemGroup Condition="'$(GenerateSdkBundleOnly)' == 'true'">
    <BundledInstallerComponent Include="DownloadedSdkMSIInstallerFile">
      <BaseUrl>$(SdkRootUrl)</BaseUrl>
      <DownloadFileName>$(SdkMSIInstallerFileName)</DownloadFileName>
    </BundledInstallerComponent>
    <BundledInstallerComponent Include="DownloadedSdkTemplatesMSIInstallerFile">
      <BaseUrl>$(SdkRootUrl)</BaseUrl>
      <DownloadFileName>$(SdkTemplatesMSIInstallerFileName)</DownloadFileName>
    </BundledInstallerComponent>
  </ItemGroup>
  <!-- END: Bundled installer components -->

  <Target Name="DownloadBundledComponents">
    <ItemGroup>
      <BundledLayoutComponent>
        <DownloadDestination>$(DownloadsFolder)%(DownloadFileName)</DownloadDestination>
      </BundledLayoutComponent>
      <BundledInstallerComponent>
        <DownloadDestination>$(DownloadsFolder)%(DownloadFileName)</DownloadDestination>
      </BundledInstallerComponent>
      <ComponentToDownload Include="@(BundledLayoutComponent);@(BundledInstallerComponent)">
        <ShouldDownload Condition="!Exists('%(DownloadDestination)')">true</ShouldDownload>

        <!--
          Replaces the public base url with the private one.
        -->
        <PrivateBaseUrl>%(BaseUrl)</PrivateBaseUrl>
        <PrivateBaseUrl Condition="'$(InternalBuild)' == 'true'">$([System.String]::new('%(ComponentToDownload.PrivateBaseUrl)').Replace('$(PublicBaseURL)', '$(InternalBaseURL)'))</PrivateBaseUrl>
      </ComponentToDownload>

      <!-- Now transform the group of components into a list of Uris,
           with shared metadata DownloadDestination and potentially the encoded key token for the private url.
           Then use task batching to send batched itemgroups to the DownloadFile task that have the same
           DownloadDestination. -->

      <UrisToDownload Include="%(ComponentToDownload.BaseUrl)/%(ComponentToDownload.DownloadFileName)" Condition="'%(ComponentToDownload.ShouldDownload)' == 'true'">
        <ShouldDownload>%(ComponentToDownload.ShouldDownload)</ShouldDownload>
        <DownloadDestination>%(ComponentToDownload.DownloadDestination)</DownloadDestination>
      </UrisToDownload>
    </ItemGroup>

    <!-- If building in product source build mode, there is no need to attempt the external URIs. These are not desired,
            and won't work anyway because the source build file URI doesn't use the same structure as the storage accounts.
            For example, the dotnetbuilds uri for 'file:///vmr/dotnet2/artifacts/obj/x64/Release/blob-feed/assets//aspnetcore_base_runtime.version'
            would end up 'https://dotnetbuilds.blob.core.windows.net/public//dotnet-runtime-8.0.0-rc.1.23381.3-centos.8-x64.tar.gz'. This is
            missing the runtime version number directory. -->
    <ItemGroup Condition="'$(DotNetBuildOrchestrator)' != 'true'">
      <UrisToDownload Include="$([System.String]::Copy('%(ComponentToDownload.BaseUrl)').Replace($(PublicBaseURL), 'https://dotnetbuilds.blob.core.windows.net/public/'))/%(ComponentToDownload.DownloadFileName)"
                      Condition="'%(ComponentToDownload.ShouldDownload)' == 'true'">
        <ShouldDownload>%(ComponentToDownload.ShouldDownload)</ShouldDownload>
        <DownloadDestination>%(ComponentToDownload.DownloadDestination)</DownloadDestination>
      </UrisToDownload>
      <UrisToDownload Include="%(ComponentToDownload.PrivateBaseUrl)/%(ComponentToDownload.DownloadFileName)"
                      Condition="'%(ComponentToDownload.ShouldDownload)' == 'true' and '$(DotNetRuntimeSourceFeedKey)' != ''">
        <ShouldDownload>%(ComponentToDownload.ShouldDownload)</ShouldDownload>
        <DownloadDestination>%(ComponentToDownload.DownloadDestination)</DownloadDestination>
        <token>$(DotNetRuntimeSourceFeedKey)</token>
      </UrisToDownload>
    </ItemGroup>

    <DownloadFile Condition="'@(UrisToDownload)' != '' and %(ShouldDownload)"
                  Uris="@(UrisToDownload)"
                  DestinationPath="%(DownloadDestination)" />
  </Target>

</Project>
