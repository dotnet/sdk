<!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->
<Project>
  <PropertyGroup>
    <GenerateMsisDependsOn Condition="'$(GenerateSdkBundleOnly)' != 'true'">
      GenerateSdkMsi;
      GenerateTemplatesMsis;
      GenerateSdkPlaceholderMsi
    </GenerateMsisDependsOn>
    <GenerateMsisDependsOn>$(GenerateMsisDependsOn);GenerateSdkBundle</GenerateMsisDependsOn>

    <GenerateSdkBundleDependsOn>
      DownloadBundledComponents;
      AcquireWix;
      MsiTargetsSetupInputOutputs;
      GenerateWorkloadManifestsWxs
    </GenerateSdkBundleDependsOn>
    <!-- When building the sdk bundle only, the sdk and template msis are acquired via DownloadBundledComponents. -->
    <GenerateSdkBundleDependsOn Condition="'$(GenerateSdkBundleOnly)' != 'true'">$(GenerateSdkBundleDependsOn);GenerateSdkMsi;GenerateTemplatesMsis</GenerateSdkBundleDependsOn>
  </PropertyGroup>

  <!-- AcquireWix Properties -->
  <PropertyGroup>
    <WixDownloadUrl>https://netcorenativeassets.blob.core.windows.net/resource-packages/external/windows/wix/Microsoft.Signed.Wix-$(MicrosoftSignedWixVersion).zip</WixDownloadUrl>
    <WixRoot>$(ArtifactsDir)Tools/WixTools/$(MicrosoftSignedWixVersion)</WixRoot>
    <WixDestinationPath>$(WixRoot)/WixTools.$(MicrosoftSignedWixVersion).zip</WixDestinationPath>
    <WixDownloadSentinel>$(WixRoot)/WixDownload.$(MicrosoftSignedWixVersion).sentinel</WixDownloadSentinel>
  </PropertyGroup>

  <!-- Generate MSI/Bundle Properties -->
  <PropertyGroup>
    <SdkPkgSourcesWindowsDirectory>$(SdkPkgSourcesRootDirectory)windows</SdkPkgSourcesWindowsDirectory>
    <SdkGenerateMsiPowershellScript>$(SdkPkgSourcesWindowsDirectory)\generatemsi.ps1</SdkGenerateMsiPowershellScript>
    <SdkGenerateBundlePowershellScript>$(SdkPkgSourcesWindowsDirectory)\generatebundle.ps1</SdkGenerateBundlePowershellScript>

    <FinalizerExe>$(ArtifactsBinDir)finalizer\win-$(TargetArchitecture)\$(Configuration)\bin\finalizer.exe</FinalizerExe>

    <!-- Temp directory for light command layouts -->
    <LightCommandObjDir>$(ArtifactsObjDir)LightCommandPackages</LightCommandObjDir>
    <!-- Directory for the zipped up light command package -->
    <LightCommandPackagesDir>$(ArtifactsNonShippingPackagesDir)</LightCommandPackagesDir>

    <!-- For local non .NET SDK product builds, allow skipping the workload manifest msi generation to save build time. The sdk bundle won't contain the manifest msis in that case. -->
    <AllowEmptyBuiltinWorkloadManifestMsi Condition="'$(DotNetBuild)' != 'true' and '$(BuildWorkloads)' != 'true' and '$(OfficialBuild)' != 'true'">true</AllowEmptyBuiltinWorkloadManifestMsi>
  </PropertyGroup>

  <PropertyGroup>
    <SdkBundleFile>$(ArtifactsShippingPackagesDir)$(ArtifactNameWithVersionCombinedHostHostFxrFrameworkSdk)$(BundleExtension)</SdkBundleFile>

    <!-- Warning: Changing the value "SdkBundleInstallerOutputGuidString" can only occur on a product-band boundary [CliProductBandVersion],
                  Changing "SdkBundleInstallerOutputGuidString" mid-product-band will break the upgradability of the SDK bundle installer. -->
    <SdkBundleInstallerOutputGuidString>Dotnet SDK Bundle Installer $(CliProductBandVersion) $(ProductMonikerRid)</SdkBundleInstallerOutputGuidString>
  </PropertyGroup>

  <!-- This target relies on tasks from the Microsoft.DotNet.Build.Tasks.Installers package. -->
  <Target Name="MsiTargetsSetupInputOutputs" DependsOnTargets="GetAssemblyVersion">
    <PropertyGroup>
      <!-- This number comes from arcade and combines the date based build number id and the revision (incremental number per day)
           Fallback to 0 when patch number is not set. This happens only during CI. -->
      <CombinedBuildNumberAndRevision>$([MSBuild]::ValueOrDefault('$(_PatchNumber)', '000000'))</CombinedBuildNumberAndRevision>

      <!-- This number comes from arcade and combines the date based build number id and the revision (incremental number per day). This number is
           a 4-part version. -->
      <BundleVersion>$(FileVersion)</BundleVersion>
    </PropertyGroup>

    <!-- MSI versions are 32-bit integers. See https://docs.microsoft.com/en-us/windows/win32/msi/productversion for more detail. -->
    <GenerateMsiVersion BuildNumber="$(CombinedBuildNumberAndRevision)"
                        Major="$(VersionMajor)"
                        Minor="$(VersionMinor)"
                        Patch="$(VersionFeature)">
      <Output TaskParameter="MsiVersion" PropertyName="ProductVersion" />
    </GenerateMsiVersion>
  </Target>

  <Target Name="AcquireWix"
          DependsOnTargets="MsiTargetsSetupInputOutputs"
          Inputs="$(WixDownloadSentinel)"
          Outputs="$(WixDestinationPath)">
    <!-- Setup sentinel to take advantage of incrementality -->
    <MakeDir Directories="$(WixRoot)" />
    <WriteLinesToFile
        File="$(WixDownloadSentinel)"
        Lines="$(MicrosoftSignedWixVersion)"
        Overwrite="true"
        Encoding="Unicode" />

    <DownloadFile
        Uri="$(WixDownloadUrl)"
        DestinationPath="$(WixDestinationPath)"
        Overwrite="false" />

    <ExtractArchiveToDirectory
        SourceArchive="$(WixDestinationPath)"
        DestinationDirectory="$(WixRoot)" />
  </Target>

  <Target Name="GenerateSdkMsi"
          DependsOnTargets="GenerateInstallerLayout;MsiTargetsSetupInputOutputs;PrepareIntermediateSdkInstallerOutput"
          Inputs="$(IntermediateSdkInstallerOutputPath)**/*"
          Returns="@(ChainMsi)"
          Outputs="$(SdkMSIInstallerFile)">

    <MSBuild Projects="$(RepoRoot)src\Layout\pkg\windows\msis\toolset\toolset.wixproj"
             Properties="InstallerPath=$(SdkMSIInstallerFile);ProductVersion=$(ProductVersion);BundleVersion=$(BundleVersion);
                         OutputPath=$([System.IO.Path]::GetDirectoryName($(SdkMSIInstallerFile)));
                         OutputName=$([System.IO.Path]::GetFileNameWithoutExtension($(SdkMSIInstallerFile)));
                         Version=$(Version);
                         SdkLayoutDirectoryToHarvest=$(IntermediateSdkInstallerOutputPath.TrimEnd('\'));
                         DotnetSrc=$(IntermediateSdkInstallerOutputPath.TrimEnd('\'))"/>

    <ItemGroup>
      <ChainMsi Include="$(SdkMSIInstallerFile)" />
    </ItemGroup>
  </Target>

  <Target Name="GenerateSdkPlaceholderMsi"
          DependsOnTargets="MsiTargetsSetupInputOutputs"
          Inputs="$(RepoRoot)src\Layout\pkg\windows\msis\placeholder\placeholder.wixproj"
          Outputs="$(SdkPlaceholderMSIInstallerFile)">

    <MSBuild Projects="$(RepoRoot)src\Layout\pkg\windows\msis\placeholder\placeholder.wixproj"
             Properties="InstallerPath=$(SdkPlaceholderMSIInstallerFile);
                         OutputPath=$([System.IO.Path]::GetDirectoryName($(SdkPlaceholderMSIInstallerFile)));
                         OutputName=$([System.IO.Path]::GetFileNameWithoutExtension($(SdkPlaceholderMSIInstallerFile)));
                         ProductVersion=$(ProductVersion);BundleVersion=$(BundleVersion)"/>
  </Target>

  <Target Name="GenerateTemplatesMsis"
          DependsOnTargets="GenerateInstallerLayout;MsiTargetsSetupInputOutputs;CalculateTemplatesVersions"
          Inputs="@(TemplatesComponents);$(RepoRoot)src\Layout\pkg\windows\msis\**\*"
          Returns="@(ChainMsi)"
          Outputs="%(TemplatesComponents.MSIInstallerFile)">

    <ItemGroup>
      <TemplatesMsi Include="@(TemplatesComponents)">
        <LayoutPath>$(IntermediateOutputPath)templates-%(TemplatesComponents.TemplatesMajorMinorVersion)</LayoutPath>
        <BrandName>%(TemplatesComponents.BrandNameWithoutVersion) $(Version)</BrandName>
        <DependencyKeyName>NetCore_Templates_%(TemplatesComponents.TemplatesMajorMinorVersion)</DependencyKeyName>
        <UpgradeCode>%(TemplatesComponents.InstallerUpgradeCode)</UpgradeCode>
        <Project>$(RepoRoot)src\Layout\pkg\windows\msis\templates\templates.wixproj</Project>
      </TemplatesMsi>
    </ItemGroup>

    <MSBuild Projects="%(TemplatesMsi.Project)"
             Properties="InstallerPath=%(MSIInstallerFile);ProductVersion=$(ProductVersion);BundleVersion=$(BundleVersion);
                         OutputPath=$([System.IO.Path]::GetDirectoryName(%(MSIInstallerFile)));
                         OutputName=$([System.IO.Path]::GetFileNameWithoutExtension(%(MSIInstallerFile)));
                         DependencyKeyName=%(DependencyKeyName);TemplateLayoutDirectoryToHarvest=%(LayoutPath);
                         BrandName=%(BrandName);UpgradeCode=%(UpgradeCode); 
                         DotnetSrc=%(LayoutPath)"/>
    <ItemGroup>
      <ChainMsi Include="%(TemplatesMsi.MSIInstallerFile)" />
    </ItemGroup>
  </Target>

  <Target Name="UnzipBuiltinWorkloadManifestMsiNuPkg">
    <PropertyGroup>
      <BuiltinManifestMsiPackageSourceDirectory>$(ArtifactsShippingPackagesDir)</BuiltinManifestMsiPackageSourceDirectory>
      <BuiltinManifestMsiPackageSourceDirectory Condition="'$(DotNetBuild)' != 'true' and '$(BuildWorkloads)' != 'true' and '$(OfficialBuild)' == 'true'">$(ArtifactsDir)downloaded-manifest-msi-packages\PackageArtifacts</BuiltinManifestMsiPackageSourceDirectory>
      <BuiltinManifestMsiPackageSourceDirectory Condition="'$(DotNetBuild)' == 'true' and '$(DotNetBuildPass)' == '3'">$(SourceBuiltShippingPackagesDir)</BuiltinManifestMsiPackageSourceDirectory>
    </PropertyGroup>

    <ItemGroup>
      <_builtinManifestMsiPackages Include="$(BuiltinManifestMsiPackageSourceDirectory)/%(BuiltinManifests.Identity).Manifest-*.Msi.$(MsiArchitectureForWorkloadManifests)*.nupkg" />
      <BuiltinManifestMsiPackages Include="@(_builtinManifestMsiPackages)" UnzipDestinationFolder="$(IntermediateOutputPath)\extracted-manifests\%(Filename)" />
    </ItemGroup>

    <Message Text="Builtin workload manifest msi packages were skipped, the SDK installer .exe bundle won't contain the builtin manifests and workload installs will be broken. Pass /p:BuildWorkloads=true to enable building them."
             Importance="High"
             Condition="'@(BuiltinManifestMsiPackages)' == '' and '$(AllowEmptyBuiltinWorkloadManifestMsi)' == 'true'" />

    <Error Text="Could not find expected builtin manifest msi packages in $(BuiltinManifestMsiPackageSourceDirectory)"
           Condition="'@(BuiltinManifestMsiPackages)' == '' and '$(AllowEmptyBuiltinWorkloadManifestMsi)' != 'true'" />

    <Unzip SourceFiles="@(BuiltinManifestMsiPackages)"
           DestinationFolder="%(BuiltinManifestMsiPackages.UnzipDestinationFolder)"
           Condition="'@(BuiltinManifestMsiPackages)' != ''" />
  </Target>

  <Target Name="GenerateWorkloadManifestsWxs" DependsOnTargets="UnzipBuiltinWorkloadManifestMsiNuPkg">
    <ItemGroup>
      <_Manifests Include="@(BundledManifests)">
        <MsiPath>$([MSBuild]::NormalizePath($([System.IO.Directory]::GetFiles('%(RestoredMsiNupkgContentPath)/data/', '*$(MsiArchitectureForWorkloadManifests).msi'))))</MsiPath>
      </_Manifests>
      <_Manifests Include="@(BuiltinManifestMsiPackages)" Condition="'@(BuiltinManifestMsiPackages)' != ''">
        <MsiPath>$([MSBuild]::NormalizePath($([System.IO.Directory]::GetFiles('%(BuiltinManifestMsiPackages.UnzipDestinationFolder)\data\', '*$(MsiArchitectureForWorkloadManifests).msi'))))</MsiPath>
      </_Manifests>
    </ItemGroup>

    <PropertyGroup>
      <WorkloadManifestsWxsPath>$(IntermediateOutputPath)WorkloadManifests.wxs</WorkloadManifestsWxsPath>
      <WorkloadManifestsWxsContent>
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
    <Fragment>
        <PackageGroup Id="PG_WorkloadManifests">
            @(_Manifests->'<MsiPackage SourceFile="%(MsiPath)">
                <MsiProperty Name="DOTNETHOME" Value="[DOTNETHOME]" />
            </MsiPackage>', '
            ')
        </PackageGroup>
    </Fragment>
</Wix>
]]>
      </WorkloadManifestsWxsContent>
    </PropertyGroup>

    <WriteLinesToFile File="$(WorkloadManifestsWxsPath)"
                      Lines="$(WorkloadManifestsWxsContent)"
                      WriteOnlyWhenDifferent="true"
                      Overwrite="true" />
  </Target>

  <Target Name="GenerateSdkBundle"
          DependsOnTargets="$(GenerateSdkBundleDependsOn)"
          Condition="'$(DotNetBuild)' != 'true' or '$(GenerateSdkBundleOnly)' == 'true'"
          Inputs="$(SdkMSIInstallerFile);
                  $(DownloadedSharedFrameworkInstallerFile);
                  $(DownloadedHostFxrInstallerFile);
                  $(DownloadedSharedHostInstallerFile)"
          Outputs="$(SdkBundleFile)">
    <!-- Choose "latest" template MSI to go in bundle. -->
    <ItemGroup>
      <LatestTemplateInstallerComponent Include="@(TemplatesMsi)" Condition="'%(TemplatesMajorMinorVersion)' == '$(MajorMinorVersion)'"/>
    </ItemGroup>

    <PropertyGroup>
      <LatestTemplateMsiInstallerFile>@(LatestTemplateInstallerComponent->'%(MSIInstallerFile)')</LatestTemplateMsiInstallerFile>
      <!-- When building the sdk bundle only, the template msi is acquired via DownloadBundledComponents. -->
      <LatestTemplateMsiInstallerFile Condition="'$(GenerateSdkBundleOnly)' == 'true'">$(DownloadsFolder)$(SdkTemplatesMSIInstallerFileName)</LatestTemplateMsiInstallerFile>

      <UpgradePoliciesSrcPath>$(PkgMicrosoft_DotNet_Build_Tasks_Installers)\build\wix\bundle\upgradePolicies.wxs</UpgradePoliciesSrcPath>
    </PropertyGroup>

    <!-- Warning: Upgrade codes for the SDK bundle need to be stable across patch levels for a feature band and platform within a major.minor version.
         For example, 10.0.100-preview.2 and 10.0.107 must yield the same value, but 10.0.103 and 10.0.204 must be different to support SxS installs. -->
    <GenerateGuidFromName Name="Dotnet SDK Bundle Installer $(CliProductBandVersion) $(ProductMonikerRid)">
      <Output TaskParameter="GeneratedGuid" PropertyName="UpgradeCode" />
    </GenerateGuidFromName>

    <!-- Heat does not support harvesting MSIs, so we'll generate the necessary MsiPackage source.
         IMPORTANT: Only include MSIs that follow the standard pattern. MSIs that require additional properties or custom conditions
                    should be explicitly authored into the bundle. Packages will be installed in the order they appear in the item group
                    and removed in the reverse order. -->
    <ItemGroup>
      <!-- .NET Runtime -->
      <_DotNetMsiPackages Include="$(DownloadsFolder)$(DownloadedHostFxrInstallerFileName);
                                   $(DownloadsFolder)$(DownloadedSharedHostInstallerFileName);
                                   $(DownloadsFolder)$(DownloadedSharedFrameworkInstallerFileName);
                                   $(DownloadsFolder)$(DownloadedNetCoreAppHostPackInstallerFileName)"/>

      <!-- ASP.NET Core Runtime -->
      <_DotNetMsiPackages Include="$(DownloadsFolder)$(DownloadedAspNetCoreSharedFxInstallerFileName);
                                   $(DownloadsFolder)$(DownloadedAspNetTargetingPackInstallerFileName)"/>

      <!-- .NET Windows Desktop Runtime -->
      <_DotNetMsiPackages Include="$(DownloadsFolder)$(DownloadedWinFormsAndWpfSharedFrameworkInstallerFileName);
                                   $(DownloadsFolder)$(DownloadedWindowsDesktopTargetingPackInstallerFileName)"/>

      <!-- Additional apphost and targeting packs -->
      <_DotNetMsiPackages Condition="'$(TargetArchitecture)' == 'x86' OR '$(TargetArchitecture)' == 'x64'"
                          Include="$(DownloadsFolder)$(DownloadedArm64NetCoreAppHostPackInstallerFileName);
                                   $(DownloadsFolder)$(DownloadedAlternateNetCoreAppHostPackInstallerFileName);
                                   $(DownloadsFolder)$(DownloadedNetStandardTargetingPackInstallerFileName)" />
    </ItemGroup>

    <PropertyGroup>
      <DotNetPackageGroupWxsPath>$(IntermediateOutputPath)dotnetPackageGroup.wxs</DotNetPackageGroupWxsPath>
      <DotNetPackageGroupWxsContent>
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
    <Fragment>
        <PackageGroup Id="PG_DotNet">
            @(_DotNetMsiPackages->'<MsiPackage SourceFile="%(FullPath)">
                <MsiProperty Name="DOTNETHOME" Value="[DOTNETHOME]" />
            </MsiPackage>', '
            ')
        </PackageGroup>
    </Fragment>
</Wix>
]]>
      </DotNetPackageGroupWxsContent>
    </PropertyGroup>

    <WriteLinesToFile File="$(DotNetPackageGroupWxsPath)"
                      Lines="$(DotNetPackageGroupWxsContent)"
                      WriteOnlyWhenDifferent="true"
                      Overwrite="true" />

    <!-- The InstallerPlatform for bundles should always be x86. Changing this risks breaking existing code
         used to detect .NET installations and will impacting authoring for Microsoft Update. -->
    <MSBuild Projects="$(RepoRoot)src\Layout\pkg\windows\bundles\sdk\bundle.wixproj"
             Properties="UpgradeCode=$(UpgradeCode);BundleVersion=$(BundleVersion);
                         TargetArchitecture=$(TargetArchitecture);
                         InstallerPlatform=x86;
                         InstallerPath=$(SdkBundleFile);
                         OutputPath=$([System.IO.Path]::GetDirectoryName($(SdkBundleFile)));
                         OutputName=$([System.IO.Path]::GetFileNameWithoutExtension($(SdkBundleFile)));
                         DotNetRuntimeVersion=$(MicrosoftNETCoreAppRuntimePackageVersion);
                         AspNetCoreVersion=$(MicrosoftAspNetCoreAppRuntimePackageVersion);
                         WinFormsAndWpfVersion=$(MicrosoftWindowsDesktopAppRuntimePackageVersion);
                         MinimumVSVersion=$(MinimumVSVersion);
                         DotNetPackageGroupWxsPath=$(DotNetPackageGroupWxsPath);
                         WorkloadManifestsWxsPath=$(WorkloadManifestsWxsPath);
                         FinalizerExeSourceFile=$(FinalizerExe);
                         TemplatesMsiSourceFile=$(LatestTemplateMsiInstallerFile);
                         SdkMsiSourceFile=$(SdkMSIInstallerFile)" />
  </Target>

  <Target Name="GenerateMsis"
          AfterTargets="AfterBuild"
          DependsOnTargets="$(GenerateMsisDependsOn)">
  </Target>

</Project>
