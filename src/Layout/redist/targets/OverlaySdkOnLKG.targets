<Project ToolsVersion="14.0" DefaultTargets="Test">
  <Target Name="OverlaySdkOnLKG" AfterTargets="Build" DependsOnTargets="GenerateLayout">
    <PropertyGroup>
      <RedistLayoutPath>$(BaseOutputPath)$(Configuration)\dotnet\</RedistLayoutPath>
    </PropertyGroup>

    <!-- Get stage 0 SDK version without having to duplicate the LKG SDK property between the global.json
    and a property. -->
    <Exec Command="$(DotnetTool) --version" ConsoleToMsbuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="Stage0SdkVersion"/>
    </Exec>

    <PropertyGroup>
      <Stage0IncludedWorkloadManifestsFile>$(_DotNetHiveRoot)/sdk/$(Stage0SdkVersion)/IncludedWorkloadManifests.txt</Stage0IncludedWorkloadManifestsFile>
      <Stage0KnownWorkloadManifestsFile>$(_DotNetHiveRoot)/sdk/$(Stage0SdkVersion)/KnownWorkloadManifests.txt</Stage0KnownWorkloadManifestsFile>
    </PropertyGroup>

    <!-- Prepare the templates -->
    <!-- 1. Pack the template packages in the repo -->
    <!-- the templates packages are located in <sdk root>\templates\<runtime version> folder. Get the runtime version of SDK Stage 0. -->
    <ItemGroup>
      <TemplatesFolderPath Include="$([System.IO.Directory]::GetDirectories(`$(_DotNetHiveRoot)templates`,`*.*`))" />
      <TemplatesFolderPath>
        <FolderName>$([System.IO.Path]::GetFileName(`%(Identity)`))</FolderName>
      </TemplatesFolderPath>
    </ItemGroup>
    <Error Text="SDK Stage 0 has more than one folder with templates: @(TemplatesFolderPath->'%(Identity)'). Please delete all but one and rebuild" Condition="@(TemplatesFolderPath->Count()) > 1"></Error>

    <!--Prepare Microsoft.DotNet.Common.*.nupkg and pack them directly to target <redist root>\templates\<runtime version> folder. -->
    <Exec Command="$(DotnetTool) pack $(RepoRoot)template_feed\Microsoft.DotNet.Common.ProjectTemplates.8.0 --configuration $(Configuration) --output $(RedistLayoutPath)\templates\@(TemplatesFolderPath->'%(FolderName)')\" />
    <Exec Command="$(DotnetTool) pack $(RepoRoot)template_feed\Microsoft.DotNet.Common.ItemTemplates --configuration $(Configuration) --output $(RedistLayoutPath)\templates\@(TemplatesFolderPath->'%(FolderName)')\"  />

    <!-- 2. Other template packages will be included from SDK Stage 0. -->
    <ItemGroup>
      <OverlaySDK Include="$(_DotNetHiveRoot)/**/*" Exclude="$(_DotNetHiveRoot)sdk/**/*;$(_DotNetHiveRoot)templates/**/microsoft.dotnet.common.*.nupkg"/>
      <OverlaySdkFilesFromStage0 Include="$(_DotNetHiveRoot)/sdk/$(Stage0SdkVersion)/Microsoft.NETCoreSdk.BundledCliTools.props" />
      <OverlaySdkFilesFromStage0 Include="$(_DotNetHiveRoot)/sdk/$(Stage0SdkVersion)/RuntimeIdentifierGraph.json" />
      <OverlaySdkFilesFromStage0 Include="$(_DotNetHiveRoot)/sdk/$(Stage0SdkVersion)/NETCoreSdkRuntimeIdentifierChain.txt" />
      <OverlaySdkFilesFromStage0 Include="$(Stage0IncludedWorkloadManifestsFile)" Condition="Exists('$(Stage0IncludedWorkloadManifestsFile)')"/>
      <OverlaySdkFilesFromStage0 Include="$(Stage0KnownWorkloadManifestsFile)" Condition="Exists('$(Stage0KnownWorkloadManifestsFile)')"/>
      <!-- Ignore dotnet-watch files from the SDK since we're building a newer version of it in this repo. -->
      <OverlaySdkFilesFromStage0 Include="$(_DotNetHiveRoot)/sdk/$(Stage0SdkVersion)/DotnetTools/**/*" RelativeDestination="DotnetTools"
        Exclude="$(_DotNetHiveRoot)/sdk/$(Stage0SdkVersion)/DotnetTools/dotnet-watch/**;$(_DotNetHiveRoot)/sdk/$(Stage0SdkVersion)/DotnetTools/dotnet-format/**" />
      <OverlaySdkFilesFromStage0 Include="$(_DotNetHiveRoot)/sdk/$(Stage0SdkVersion)/AppHostTemplate/**/*" RelativeDestination="AppHostTemplate"/>
      <ToolsetToOverlay Include="$(OutputPath)/**/*"
        Exclude="$(OutputPath)/DotnetTools/dotnet-watch/**" />
    </ItemGroup>

    <Copy SourceFiles="@(OverlaySDK)"
          DestinationFiles="@(OverlaySDK->'$(RedistLayoutPath)\%(RecursiveDir)%(Filename)%(Extension)')" />

    <PropertyGroup>
      <SdkOutputDirectory>$(RedistLayoutPath)sdk\$(Version)</SdkOutputDirectory>
    </PropertyGroup>

    <Copy SourceFiles="@(OverlaySdkFilesFromStage0)"
          DestinationFiles="@(OverlaySdkFilesFromStage0->'$(SdkOutputDirectory)\%(RelativeDestination)\%(RecursiveDir)%(Filename)%(Extension)')"/>
    
    <!-- If the stage 0 SDK doesn't have KnownWorkloadManifests.txt, then write a default version -->
    <WriteLinesToFile File="$(SdkOutputDirectory)\KnownWorkloadManifests.txt"
                      Condition="!Exists('$(Stage0KnownWorkloadManifestsFile)')"
                      Lines="microsoft.net.sdk.android;microsoft.net.sdk.ios;microsoft.net.sdk.maccatalyst;microsoft.net.sdk.macos;microsoft.net.sdk.maui;microsoft.net.sdk.tvos;microsoft.net.workload.mono.toolchain.current;microsoft.net.workload.emscripten.current;microsoft.net.workload.emscripten.net6;microsoft.net.workload.emscripten.net7;microsoft.net.workload.mono.toolchain.net6;microsoft.net.workload.mono.toolchain.net7"/>

    <ItemGroup>
      <WasmWorkloads Include="microsoft.net.workload.mono.toolchain.current" Version="$(MonoWorkloadManifestVersion)/$(MonoWorkloadFeatureBand)"/>
      <WasmWorkloads Include="microsoft.net.workload.mono.toolchain.net6" Version="$(MonoWorkloadManifestVersion)/$(MonoWorkloadFeatureBand)"/>
      <WasmWorkloads Include="microsoft.net.workload.mono.toolchain.net7" Version="$(MonoWorkloadManifestVersion)/$(MonoWorkloadFeatureBand)"/>
      <WasmWorkloads Include="microsoft.net.workload.emscripten.current" Version="$(EmscriptenWorkloadManifestVersion)/$(EmscriptenWorkloadFeatureBand)"/>
	    <WasmWorkloads Include="microsoft.net.workload.emscripten.net6" Version="$(EmscriptenWorkloadManifestVersion)/$(EmscriptenWorkloadFeatureBand)"/>
	    <WasmWorkloads Include="microsoft.net.workload.emscripten.net7" Version="$(EmscriptenWorkloadManifestVersion)/$(EmscriptenWorkloadFeatureBand)"/>
    </ItemGroup>

    <!-- Create a rollback file for installing workloads during the build  -->
    <WriteLinesToFile File="$(RedistLayoutPath)TestRollback.json"
                      Condition="!Exists('$(RedistLayoutPath)TestRollback.json')"
                      Lines="{;@(WasmWorkloads->'&quot;%(Identity)&quot;: &quot;%(Version)&quot;', ', ');}"/>

    <OverrideAndCreateBundledNETCoreAppPackageVersion
      Stage0MicrosoftNETCoreAppRefPackageVersionPath="$(_DotNetHiveRoot)/sdk/$(Stage0SdkVersion)/Microsoft.NETCoreSdk.BundledVersions.props"
      MicrosoftNETCoreAppRefPackageVersion="$(MicrosoftNETCoreAppRefPackageVersion)"
      NewSDKVersion="$(Version)"
      OutputPath="$(SdkOutputDirectory)/Microsoft.NETCoreSdk.BundledVersions.props"/>

    <Copy SourceFiles="@(ToolsetToOverlay)"
          DestinationFiles="@(ToolsetToOverlay->'$(SdkOutputDirectory)\%(RecursiveDir)%(Filename)%(Extension)')" />

    <!-- Run "dotnet new" (which will just display usage and available templates) in order to print first time
         use message so that it doesn't interfere with tests which check the output of commands. -->
    <Exec Command="$(RedistLayoutPath)dotnet new"
          EnvironmentVariables="DOTNET_CLI_HOME=$(ArtifactsTmpDir)" />

    <!-- Install a coherent set of workload manifests -->
    <Exec Condition="Exists('$(RedistLayoutPath)TestRollback.json')"
          Command="$(RedistLayoutPath)dotnet workload update --from-rollback-file $(RedistLayoutPath)TestRollback.json"
          EnvironmentVariables="DOTNET_CLI_HOME=$(ArtifactsTmpDir)"/>
  </Target>


  <Target Name="PublishTestWorkloads"
          AfterTargets="OverlaySdkOnLKG">
    <PropertyGroup>
      <!-- Calculate the version band (ie the band should still be 5.0.100 if the VersionPrefix is 5.0.101 -->
      <_VersionPrefixMajor>$(VersionPrefix.Split('.')[0])</_VersionPrefixMajor>
      <_VersionPrefixMinor>$(VersionPrefix.Split('.')[1])</_VersionPrefixMinor>
      <_VersionPrefixPatch>$(VersionPrefix.Split('.')[2])</_VersionPrefixPatch>
      <_VersionPrefixPatchBand>$([System.Convert]::ToUInt16($([MSBuild]::Divide($(_VersionPrefixPatch), 100))))</_VersionPrefixPatchBand>
      <_VersionPrefixPatchBand>$([MSBuild]::Multiply($(_VersionPrefixPatchBand), 100))</_VersionPrefixPatchBand>
      <VersionBand>$(_VersionPrefixMajor).$(_VersionPrefixMinor).$(_VersionPrefixPatchBand)</VersionBand>
    </PropertyGroup>

    <ItemGroup>
      <WorkloadManifestContent Include="$(RepoRoot)\src\Assets\TestWorkloads\manifests\**\*.*" />
      <WorkloadPackContent Include="$(RepoRoot)\src\Assets\TestWorkloads\packs\**\*.*" />
    </ItemGroup>

    <Copy SourceFiles="@(WorkloadManifestContent)"
          DestinationFiles="@(WorkloadManifestContent->'$(RedistLayoutPath)\sdk-manifests\$(VersionBand)\%(RecursiveDir)%(Filename)%(Extension)')" />

    <Copy SourceFiles="@(WorkloadPackContent)"
      DestinationFiles="@(WorkloadPackContent->'$(RedistLayoutPath)\packs\%(RecursiveDir)%(Filename)%(Extension)')" />

  </Target>
</Project>
