<!--
***********************************************************************************************
Microsoft.NET.PackTool.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved.
***********************************************************************************************
-->

<!--

NOTE: This file is imported from the following contexts, so be aware when writing Conditions and thinking about evaluation order:
* cross-targeting (multi-TFM) builds.
  * these may not have a RID or RIDs set, but still need to be able to pack tools
  * IsCrossTargetingBuild is set to true in this case
* 'outer' builds for a single TFM
  * these builds are RID-agnostic, but still need to be able to pack 'inner', RID-specific tools.
  * IsCrossTargetingBuild is unset in this case, RuntimeIdentifier is unset, and RuntimeIdentifiers or ToolPackageRuntimeIdentifiers is set to a list of RIDs
  * if these builds are RID-specific but not AOT, then we pack the outer tool without implementation dlls and the N inner-RID-specific tools
  * if these builds are RID-specific and AOT, then we pack the outer tool only without implementation dlls
  * if these builds are RID-agnostic, then we pack the outer tool only with implementation dlls
* 'inner' builds for a single TFM
  * these builds are RID-specific, and have RuntimeIdentifier set to a single RID, and RuntimeIdentifiers or ToolPackageRuntimeIdentifiers set to a list of RIDs
  * these builds pack only the inner, RID-specific tool implementation dlls and have a unique PackageType of DotnetToolRidPackage
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="Microsoft.NET.Build.Tasks.GenerateToolsSettingsFile"
            AssemblyFile="$(MicrosoftNETBuildTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Build.Tasks.GenerateShims"
            AssemblyFile="$(MicrosoftNETBuildTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Build.Tasks.GetEmbeddedApphostPaths"
      AssemblyFile="$(MicrosoftNETBuildTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Build.Tasks.GetNuGetShortFolderName"
             AssemblyFile="$(MicrosoftNETBuildTasksAssembly)" />

  <PropertyGroup>
    <!-- tools are specially-formatted packages, so we tell nuget Pack to not even try to include build output -->
    <IncludeBuildOutput>false</IncludeBuildOutput>

    <!-- the publish* properties _can_ be set, but only for the 'inner' RID-specific builds. We need to make sure that for the outer, agnostic build they are unset  -->
    <PublishSelfContained Condition="'$(RuntimeIdentifier)' == ''">false</PublishSelfContained>
    <!-- Have to set SelfContained similarly because PackTool targets are imported _after_ RuntimeIdentifierInference targets, where the Publish* properties are
         forwarded to the 'base' properties. -->
    <SelfContained Condition="'$(RuntimeIdentifier)' == ''">false</SelfContained>
    <PublishTrimmed Condition="'$(RuntimeIdentifier)' == ''">false</PublishTrimmed>
    <PublishReadyToRun Condition="'$(RuntimeIdentifier)' == ''">false</PublishReadyToRun>
    <PublishSingleFile Condition="'$(RuntimeIdentifier)' == ''">false</PublishSingleFile>

    <!-- We need to know if the inner builds are _intended_ to be AOT even if we then explicitly disable AOT for the outer builds.
         Knowing this lets us correctly decide to create the RID-specific inner tools or not when packaging the outer tool. -->
    <_InnerToolsPublishAot>false</_InnerToolsPublishAot>
    <_InnerToolsPublishAot Condition="'$(RuntimeIdentifier)' == '' and '$(PublishAot)' == 'true'">true</_InnerToolsPublishAot>
    <PublishAot Condition="'$(RuntimeIdentifier)' == ''">false</PublishAot>

    <!-- we want to ensure that we don't publish any AppHosts for the 'outer', RID-agnostic builds -->
    <UseAppHost Condition="'$(RuntimeIdentifier)' == ''">false</UseAppHost>
    <!-- we want to ensure that we _do_ publish any AppHosts for the 'inner', RID-specific builds -->
    <UseAppHost Condition="'$(RuntimeIdentifier)' != ''">true</UseAppHost>

    <!-- If shims are included, we need to make sure we restore for those RIDs so the apphost shims are available during restore/publish.
         This means that we need to set RuntimeIdentifiers. However we need to track certain information about the _users_ decisions around RIDs
         so that we can correctly decide if we need to package RID-specific tools or not. -->
    <_ToolRidsAreOnlyShims>false</_ToolRidsAreOnlyShims>
    <_ToolRidsAreOnlyShims Condition="'$(RuntimeIdentifiers)' == '' and $(PackAsToolShimRuntimeIdentifiers) != '' ">true</_ToolRidsAreOnlyShims>
    <_UserSpecifiedToolPackageRids Condition="'$(ToolPackageRuntimeIdentifiers)' != ''">$(ToolPackageRuntimeIdentifiers)</_UserSpecifiedToolPackageRids>
    <_UserSpecifiedToolPackageRids Condition="'$(_UserSpecifiedToolPackageRids)' == ''">$(RuntimeIdentifiers)</_UserSpecifiedToolPackageRids>
    <_HasRIDSpecificTools Condition=" '$(_UserSpecifiedToolPackageRids)' != '' ">true</_HasRIDSpecificTools>
    <_HasRIDSpecificTools Condition="'$(_HasRIDSpecificTools)' == ''">false</_HasRIDSpecificTools>
    <RuntimeIdentifiers Condition="'$(PackAsToolShimRuntimeIdentifiers)' != ''">$(_UserSpecifiedToolPackageRids);$(PackAsToolShimRuntimeIdentifiers)</RuntimeIdentifiers>

    <!-- Tool implementation files are not included in the primary package when the tool has RID-specific packages.  So only pack the tool implementation
       (and only depend on publish) if there are no RID-specific packages, or if the RuntimeIdentifier is set. -->
    <_ToolPackageShouldIncludeImplementation Condition=" '$(PackAsTool)' == 'true' And
                                                  ('$(_UserSpecifiedToolPackageRids)' == '' Or '$(RuntimeIdentifier)' != '')">true</_ToolPackageShouldIncludeImplementation>
    <_ToolPackageShouldIncludeImplementation Condition="'$(_ToolPackageShouldIncludeImplementation)' == ''">false</_ToolPackageShouldIncludeImplementation>

    <!-- inner builds and non-RID-specific outer builds need publish content-->
    <_PackToolPublishDependency Condition=" '$(_ToolPackageShouldIncludeImplementation)' != '' and '$(GeneratePackageOnBuild)' != 'true' and $(IsPublishable) == 'true' ">Publish</_PackToolPublishDependency>
    <!-- BUT builds that GeneratePackageOnBuild can't directly rely on Publish since Publish would trigger Build, causing an infinite loop. -->
    <!-- To get around this, we try a bit of a workaround: since we can't set NoBuild=true and call Publish that way, we instead trigger all of the
         dependencies of the no-build Publish Target, _PublishNoBuildAlternative -->
    <_PackToolPublishDependency Condition=" '$(_ToolPackageShouldIncludeImplementation)' != '' and '$(GeneratePackageOnBuild)' == 'true' and $(IsPublishable) == 'true' ">$(_PublishNoBuildAlternativeDependsOn)</_PackToolPublishDependency>

    <!-- GenerateNuspec is called in two places: crossTargeting NuGet targets, and single-targeting NuGet targets.
         Tools need to ensure that
           a) they can set the correct PackageType(s) and
           b) we can create the necessary inner-RID packages
         regardless of which way we are invoked. This means that these key entry points need to be callable from both GenerateNuspec methods.
         This also means that we need to set correct Conditions on the Targets themselves so they don't run if they aren't actually necessary. -->
    <GenerateNuspecDependsOn>$(GenerateNuspecDependsOn);SetDotnetToolPackageType;_CreateRIDSpecificToolPackages</GenerateNuspecDependsOn>

    <!-- Finally set up the entrypoint for all tool-content regardless of tool type. This doesn't get set as a GenerateNuspecDependsOn
         Because this target is inherently TFM-specific, and NuGet handles invoking this target once per TFM as part of the packaging process. -->
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);PackTool</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>
  <!--

  TODO:
  - We now generate an error when trying to install package as a tool if it's not of type DotnetTool: https://github.com/dotnet/sdk/issues/37010
    - Does this need to be documented as a breaking change?
  - Consider a way of declaring what RID a RID-specific package is for, besides just the convention in the package ID
  -->

  <!--
    Mark all dependency as private assets. But keep them as Publish. So dependency DLLs will be included in NuGet package, while
    there is no dependency in nuspec. And add Microsoft.NETCore.Platforms, which is used to select correct RID assets.
    -->
  <PropertyGroup>
    <_ToolsSettingsFilePath>$(IntermediateOutputPath)DotnetToolSettings.xml</_ToolsSettingsFilePath>
    <SuppressDependenciesWhenPacking Condition=" '$(PackAsTool)' == 'true' ">true</SuppressDependenciesWhenPacking>
  </PropertyGroup>

 <!--
    PackageId must be set before:
     - _GenerateRestoreProjectSpec -> _GetRestoreSettings
     - _GenerateToolsSettingsFileInputCache
     - _GenerateShimInputCache
     - _GetOutputItemsFromPack
  -->
  <Target Name="SetPackToolProperties"
          BeforeTargets="_GenerateRestoreProjectSpec;_GenerateToolsSettingsFileInputCache;_GenerateShimInputCache;_GetOutputItemsFromPack">

    <!-- Needs to be in a target so we don't need to worry about evaluation order with NativeBinary property -->
    <PropertyGroup Condition="'$(ToolEntryPoint)' == ''">
      <ToolEntryPoint>$(TargetFileName)</ToolEntryPoint>
      <ToolEntryPoint Condition="'$(RuntimeIdentifier)' != '' and '$(UseAppHost)' == 'true' ">$(AssemblyName)$(_NativeExecutableExtension)</ToolEntryPoint>
    </PropertyGroup>

    <!-- inner-build tool packages get a RID suffix -->
    <PropertyGroup Condition="'$(_HasRIDSpecificTools)' != '' And '$(RuntimeIdentifier)' != ''">
      <PackageId>$(PackageId).$(RuntimeIdentifier)</PackageId>
    </PropertyGroup>

  </Target>

  <Target Name="PackToolImplementation">

    <ItemGroup>
      <_GeneratedFiles Include="$(PublishDepsFilePath)" Condition="'$(GenerateDependencyFile)' != 'true' or '$(_UseBuildDependencyFile)' == 'true'" />
      <_GeneratedFiles Include="$(PublishRuntimeConfigFilePath)"/>
    </ItemGroup>

  </Target>

  <!-- This indirection target essentially allows one target dependency (SetPackToolProperties) of PackTool modify the dependencies of PackTool. -->
  <Target Name="PackToPublishDependencyIndirection"
          DependsOnTargets="$(_PackToolPublishDependency)"/>

  <Target Name="PackTool" DependsOnTargets="SetPackToolProperties;GenerateToolsSettingsFileFromBuildProperty;PackToPublishDependencyIndirection;_PackToolValidation;PackToolImplementation" Condition=" '$(PackAsTool)' == 'true' ">
    <ItemGroup>
      <_GeneratedFiles Include="$(_ToolsSettingsFilePath)"/>
      <!-- Note here that we're _not_ computing relative directories inside the package anymore. In our packages, we essentially want to
          recreate the publish layout, but under a TFM- or RID-specific root path. Because we're globbing from the PublishDir,
          the MSBuild Items will have the RecursiveDir metadata - this is used by the PackLogic to combine with the PackagePath
          we set below to ensure we have the correct layout in the end. If the PackLogic didn't try to use RecursiveDir, then
          we could just explicitly set everything ourselves.   -->
      <_PublishFiles Condition="'$(_ToolPackageShouldIncludeImplementation)' == 'true'" Include="$(PublishDir)/**/*" />
    </ItemGroup>

    <PropertyGroup>
      <_ToolRidPath Condition="'$(RuntimeIdentifier)' == ''">any</_ToolRidPath>
      <_ToolRidPath Condition="'$(RuntimeIdentifier)' != ''">$(RuntimeIdentifier)</_ToolRidPath>
    </PropertyGroup>
    <ItemGroup>
      <TfmSpecificPackageFile Include="@(_GeneratedFiles)">
        <PackagePath>tools/$(_ToolPackShortTargetFrameworkName)/$(_ToolRidPath)/%(_GeneratedFiles.RecursiveDir)</PackagePath>
      </TfmSpecificPackageFile>

      <!-- This PackagePath is a little different - instead of mapping _exactly_ where we want the files to be dropped,
            NuGet is looking at RecursiveDir/NuGetRecursiveDir metadata (which is set in the Pack targets as part of the
            'walk target per TFM' logic) _in addition_ to our package path. I don't see an easy way to remove RecursiveDir -->
      <TfmSpecificPackageFile Include="@(_PublishFiles)">
        <PackagePath>tools/$(_ToolPackShortTargetFrameworkName)/$(_ToolRidPath)/</PackagePath>
      </TfmSpecificPackageFile>
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <ToolCommandName Condition=" '$(ToolCommandName)' == '' ">$(TargetName)</ToolCommandName>
    <ToolRuntimeIdentifier Condition=" '$(ToolRuntimeIdentifier)' == ''">$(RuntimeIdentifier)</ToolRuntimeIdentifier>
    <_GenerateToolsSettingsFileCacheFile Condition="'$(_GenerateToolsSettingsFileCacheFile)' == ''">$(IntermediateOutputPath)$(MSBuildProjectName).toolssettingsinput.cache</_GenerateToolsSettingsFileCacheFile>
    <_GenerateToolsSettingsFileCacheFile>$([MSBuild]::NormalizePath($(MSBuildProjectDirectory), $(_GenerateToolsSettingsFileCacheFile)))</_GenerateToolsSettingsFileCacheFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(ToolCommandRunner)' == ''">
    <ToolCommandRunner>dotnet</ToolCommandRunner>
    <ToolCommandRunner Condition="'$(SelfContained)' == 'true'">executable</ToolCommandRunner>
  </PropertyGroup>

  <Target Name="_GenerateToolsSettingsFileInputCache">
    <ItemGroup>
      <_ToolPackageRuntimeIdentifier Include="$(_UserSpecifiedToolPackageRids)" />
      <_GenerateToolsSettingsFileInputCacheToHash Include="$(ToolEntryPoint)" />
      <_GenerateToolsSettingsFileInputCacheToHash Include="$(ToolCommandName)" />
      <_GenerateToolsSettingsFileInputCacheToHash Include="$(ToolCommandRunner)" />
      <_GenerateToolsSettingsFileInputCacheToHash Include="$(ToolRuntimeIdentifier)" />
      <_GenerateToolsSettingsFileInputCacheToHash Include="$(PackageId)" />
      <_GenerateToolsSettingsFileInputCacheToHash Include="$(Version)" />
      <_GenerateToolsSettingsFileInputCacheToHash Include="@(_ToolPackageRuntimeIdentifier->'%(Identity)')" />
    </ItemGroup>

    <Hash ItemsToHash="@(_GenerateToolsSettingsFileInputCacheToHash)">
      <Output TaskParameter="HashResult" PropertyName="_GenerateToolsSettingsFileInputCacheHash" />
    </Hash>

    <WriteLinesToFile
      Lines="$(_GenerateToolsSettingsFileInputCacheHash)"
      File="$(_GenerateToolsSettingsFileCacheFile)"
      Overwrite="true"
      WriteOnlyWhenDifferent="true" />

    <!-- Don't include the cache file in FileWrites, because there is no support for cleaning
         intermediate outputs during PackAsTool. Adding it to FileWrites doesn't work because
         IncrementalClean during PackAsTool would add it to the clean file, but then IncrementalBuild
         during the Build target on a subsequent run would consider it to be orphaned (because this target
         which would add it to FileWrites hasn't run yet), and delete it. -->
  </Target>

  <Target Name="GenerateToolsSettingsFileFromBuildProperty"
          DependsOnTargets="_GenerateToolsSettingsFileInputCache"
          Inputs="$(_GenerateToolsSettingsFileCacheFile)"
          Outputs="$(_ToolsSettingsFilePath)">
    <GenerateToolsSettingsFile
       EntryPointRelativePath="$(ToolEntryPoint)"
       CommandName="$(ToolCommandName)"
       CommandRunner="$(ToolCommandRunner)"
       RuntimeIdentifier="$(ToolRuntimeIdentifier)"
       ToolPackageId="$(PackageId)"
       ToolPackageVersion="$(Version)"
       ToolPackageRuntimeIdentifiers="@(_ToolPackageRuntimeIdentifier)"
       ToolsSettingsFilePath="$(_ToolsSettingsFilePath)" />
  </Target>

  <Target Name="_PackToolValidation" Condition=" '$(PackAsTool)' == 'true' ">

    <GetNuGetShortFolderName
      TargetFrameworkMoniker="$(TargetFrameworkMoniker)"
      TargetPlatformMoniker="$(TargetPlatformMoniker)">

      <Output TaskParameter="NuGetShortFolderName" PropertyName="_ToolPackShortTargetFrameworkName" />

    </GetNuGetShortFolderName>

    <PropertyGroup>
      <_ToolPackShortTargetFrameworkName Condition="'$(SelfContained)' == 'true'">any</_ToolPackShortTargetFrameworkName>
    </PropertyGroup>

    <NETSdkError Condition=" '$(TargetFrameworkIdentifier)' != '.NETCoreApp' "
                 ResourceName="DotnetToolOnlySupportNetcoreapp" />

    <NETSdkError Condition=" '$(_TargetFrameworkVersionWithoutV)' &lt; '2.1' "
                 ResourceName="DotnetToolDoesNotSupportTFMLowerThanNetcoreapp21" />

    <NETSdkError Condition=" '$(TargetPlatformIdentifier)' != '' and '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), 5.0))"
             ResourceName="PackAsToolCannotSupportTargetPlatformIdentifier" />
  </Target>

  <!--
    ============================================================
                                        GenerateShimsAssets

    Generate packaged shims for signing when PackAsToolShimRuntimeIdentifiers is set
    ============================================================
    -->

  <PropertyGroup>
    <_ShimInputCacheFile Condition="'$(_ShimInputCacheFile)' == ''">$(IntermediateOutputPath)$(MSBuildProjectName).shiminput.cache</_ShimInputCacheFile>
    <_ShimInputCacheFile>$([MSBuild]::NormalizePath($(MSBuildProjectDirectory), $(_ShimInputCacheFile)))</_ShimInputCacheFile>
    <_ShimCreatedSentinelFile Condition="'$(_ShimCreatedSentinelFile)' == ''">$(IntermediateOutputPath)$(MSBuildProjectName).shimcreated.sentinel</_ShimCreatedSentinelFile>
    <_ShimCreatedSentinelFile>$([MSBuild]::NormalizePath($(MSBuildProjectDirectory), $(_ShimCreatedSentinelFile)))</_ShimCreatedSentinelFile>
    <PackagedShimOutputRootDirectory Condition=" '$(PackagedShimOutputRootDirectory)' == '' ">$(OutDir)</PackagedShimOutputRootDirectory>
  </PropertyGroup>

  <Target Name="GenerateShimsAssets"
          BeforeTargets="CopyFilesToOutputDirectory"
          DependsOnTargets="ResolvePackageAssets;_PackToolValidation;_GenerateShimInputCache;_ComputeExpectedEmbeddedApphostPaths"
          Condition="'$(PackAsTool)' == 'true' and $(PackAsToolShimRuntimeIdentifiers) != '' "
          Inputs="@(_GenerateShimsAssetsInput)"
          Outputs="$(_ShimCreatedSentinelFile)">

    <GenerateShims
      ApphostsForShimRuntimeIdentifiers="@(_ApphostsForShimRuntimeIdentifiers)"
      IntermediateAssembly="@(IntermediateAssembly->'%(FullPath)')"
      OutputType="$(OutputType)"
      PackagedShimOutputDirectory="$([System.IO.Path]::Combine($(PackagedShimOutputRootDirectory), 'shims', $(_ToolPackShortTargetFrameworkName)))"
      PackageId="$(PackageId)"
      PackageVersion="$(PackageVersion)"
      ShimRuntimeIdentifiers="@(_PackAsToolShimRuntimeIdentifiers)"
      TargetFrameworkMoniker="$(NuGetTargetMoniker)"
      ToolCommandName="$(ToolCommandName)"
      ToolEntryPoint="$(ToolEntryPoint)">

      <Output TaskParameter="EmbeddedApphostPaths" ItemName="_EmbeddedApphostPaths" />
    </GenerateShims>

    <!-- Workaround for https://github.com/dotnet/corefx/issues/31379
         LastWriteTime in shims are not accurate. And _ShimInputCacheFile will have later timestamp than generated shims.
         Use a created file to "record" LastWriteTime. And only use it in "Outputs" field for timestamp comparison.

         Touch Task uses the same API File.SetLastWriteTime underneath. So it also cannot be used.
    -->
    <WriteLinesToFile Lines="This file's LastWriteTime is used in incremental build" File="$(_ShimCreatedSentinelFile)" Overwrite="True" />

    <ItemGroup>
      <!-- Do this in an ItemGroup instead of as an output parameter so that it still gets added to the item set
           during incremental builds when the task is skipped -->
      <FileWrites Include="@(_EmbeddedApphostPaths)" />
      <FileWrites Include="$(_ShimCreatedSentinelFile)" />
    </ItemGroup>
  </Target>

  <Target Name="_ComputeExpectedEmbeddedApphostPaths">
    <GetEmbeddedApphostPaths
      PackagedShimOutputDirectory="$([System.IO.Path]::Combine($(PackagedShimOutputRootDirectory), 'shims', $(_ToolPackShortTargetFrameworkName)))"
      ShimRuntimeIdentifiers="@(_PackAsToolShimRuntimeIdentifiers)"
      ToolCommandName="$(ToolCommandName)">

      <Output TaskParameter="EmbeddedApphostPaths" ItemName="_EmbeddedApphostPaths" />
    </GetEmbeddedApphostPaths>
  </Target>

  <!-- To achieve incremental build with property change. When any property changes, WriteOnlyWhenDifferent will be triggered to write cache file.
  And the cache file's timestamp will be later, and it then triggers the incremental build.-->
  <Target Name="_GenerateShimInputCache" DependsOnTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <_GenerateShimsAssetsInput Include="$(_ShimInputCacheFile)" />
      <_GenerateShimsAssetsInput Include="@(_ApphostsForShimRuntimeIdentifiers)"/>
      <_GenerateShimsAssetsInput Include="$(_ShimCreatedSentinelFile)"/>
      <_GenerateShimsAssetsInput Include="$(ProjectAssetsFile)"/>

      <_GenerateShimsAssetsInputCacheToHash Include="$(PackageId)"/>
      <_GenerateShimsAssetsInputCacheToHash Include="$(Version)"/>
      <_GenerateShimsAssetsInputCacheToHash Include="$(NuGetTargetMoniker)"/>
      <_GenerateShimsAssetsInputCacheToHash Include="$(ToolCommandName)"/>
      <_GenerateShimsAssetsInputCacheToHash Include="$(ToolEntryPoint)"/>
      <_GenerateShimsAssetsInputCacheToHash Include="$(PackAsToolShimRuntimeIdentifiers)"/>
    </ItemGroup>

    <Hash ItemsToHash="@(_GenerateShimsAssetsInputCacheToHash)">
      <Output TaskParameter="HashResult" PropertyName="_GenerateShimsAssetsInputCacheHash" />
    </Hash>

    <WriteLinesToFile Lines="$(_GenerateShimsAssetsInputCacheHash)" File="$(_ShimInputCacheFile)" Overwrite="True" WriteOnlyWhenDifferent="True" />

    <ItemGroup>
      <FileWrites Include="$(_ShimInputCacheFile)" />
    </ItemGroup>
  </Target>

  <UsingTask TaskName="AddPackageType" AssemblyFile="$(MicrosoftNETBuildTasksAssembly)" />

  <Target Name="SetDotnetToolPackageType">

    <PropertyGroup>
      <_ToolPackageType Condition="'$(RuntimeIdentifier)' != '' And '$(_HasRIDSpecificTools)' != ''">DotnetToolRidPackage</_ToolPackageType>
      <_ToolPackageType Condition="'$(_ToolPackageType)' == ''">DotnetTool</_ToolPackageType>
    </PropertyGroup>

    <!--
    PackageType is semicolon-delimited, case-insensitive, with an optional version.

    DotnetTool should be added to the set of package types if the PackAsTool property is set to true.

    Examples:
       PackageType = ''                     -> 'DotnetTool'
       PackageType = 'MyCustomType'         -> 'DotnetTool;MyCustomType'
       PackageType = 'MyCustomType, 1.0'    -> 'DotnetTool;MyCustomType, 1.0'
       PackageType = 'dotnettool'           -> 'dotnettool'
       PackageType = 'DotnetTool, 1.0.0.0'  -> 'DotnetTool, 1.0.0.0'
       PackageType = 'DotnetTool , 1.0.0.0' -> 'DotnetTool , 1.0.0.0'
       PackageType = 'MyDotnetTool'         -> 'DotnetTool;MyDotnetTool'

    _PaddedPackageType is used to ensure that the PackageType is semicolon delimited and can be easily checked for an existing DotnetTool package type.
    -->

    <AddPackageType CurrentPackageType="$(PackageType)" PackageTypeToAdd="$(_ToolPackageType)">
      <Output TaskParameter="UpdatedPackageType" PropertyName="PackageType" />
    </AddPackageType>

  </Target>

  <!-- Orchestrator for making the N RID-specific tool packages if this Tool supports that mode.
       We can't call this for AOT'd tools because we can't AOT cross-architecture and cross-platform in .NET today. -->
  <Target Name="_CreateRIDSpecificToolPackages" Condition="'$(RuntimeIdentifier)' == '' and $(_HasRIDSpecificTools) and !$(_InnerToolsPublishAot) and !$(_ToolPackageShouldIncludeImplementation)">
    <PropertyGroup>
        <_PackageRids>$(ToolPackageRuntimeIdentifiers)</_PackageRids>
        <_PackageRids Condition="'$(_PackageRids)' == ''">$(RuntimeIdentifiers)</_PackageRids>
    </PropertyGroup>

    <ItemGroup>
        <!-- Build the RID-specific packages.-->
        <_rids Include="$(_PackageRids)" />
        <_RidSpecificToolPackageProject Include="$(MSBuildProjectFullPath)" AdditionalProperties="RuntimeIdentifier=%(_rids.Identity);" />
    </ItemGroup>

    <MSBuild BuildInParallel="true" Projects="@(_RidSpecificToolPackageProject)" Targets="Pack">
        <Output TaskParameter="TargetOutputs" ItemName="_ToolPackageOutputs" />
    </MSBuild>
  </Target>

</Project>
