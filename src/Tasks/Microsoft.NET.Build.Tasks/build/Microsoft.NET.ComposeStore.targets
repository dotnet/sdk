<!--
***********************************************************************************************
Microsoft.NET.ComposeStore.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved. 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    ============================================================
                                        ComposeStore
 
    The main store entry point.
    ============================================================
    -->
  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <Target Name="ComposeStore"
          DependsOnTargets="PrepareForComposeStore;
                            PrepOptimizer;
                            StoreWorkerMain;
                            _CopyResolvedUnOptimizedFiles;
                            StoreFinalizer;"/>

  <!--
    ============================================================
                                        StoreWorkerMain

   Processes the store project files
    ============================================================
    -->
  
  <Target Name="StoreWorkerMain">
    
    <ItemGroup>
      <_AllProjects Include="$(AdditionalProjects.Split('%3B'))"/>
      <_AllProjects Include ="$(MSBuildProjectFullPath)"/>
    </ItemGroup>

    <MSBuild Projects="%(_AllProjects.Identity)"
                 Targets="StoreWorkerMapper"
                 BuildinParallel="$(BuildinParallel)"
                 Properties="ComposeWorkingDir=$(ComposeWorkingDir);
                             PublishDir=$(PublishDir);
                             StoreStagingDir=$(StoreStagingDir);
                             TargetFramework=$(_TFM);
                             JitPath=$(JitPath);
                             Crossgen=$(Crossgen);
                             RestoreProj=$(RestoreProj);
                             DisableImplicitFrameworkReferences=true;
                             SkipUnchangedFiles=$(SkipUnchangedFiles);
                             PreserveStoreLayout=$(PreserveStoreLayout);
                             CreateProfilingSymbols=$(CreateProfilingSymbols);
                             StoreSymbolsStagingDir=$(StoreSymbolsStagingDir)"
                 ContinueOnError="WarnAndContinue">
      <Output ItemName="AllResolvedPackagesPublished" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>
  <!--
    ============================================================
                                        StoreWorkerMapper

   Processes each package specified in a store project file
    ============================================================
    -->

  <Target Name="StoreWorkerMapper"
          Returns ="@(ResolvedPackagesFromMapper)">

    <ItemGroup>
      <PackageReferencesToStore Include="$(RestoreProj)">
        <Properties>
          StorePackageName=%(PackageReference.Identity);
          StorePackageVersion=%(PackageReference.Version);
          ComposeWorkingDir=$(ComposeWorkingDir);
          PublishDir=$(PublishDir);
          StoreStagingDir=$(StoreStagingDir);
          TargetFramework=$(TargetFramework);
          RuntimeIdentifier=$(RuntimeIdentifier);
          JitPath=$(JitPath);
          Crossgen=$(Crossgen);
          SkipUnchangedFiles=$(SkipUnchangedFiles);
          PreserveStoreLayout=$(PreserveStoreLayout);
          CreateProfilingSymbols=$(CreateProfilingSymbols);
          StoreSymbolsStagingDir=$(StoreSymbolsStagingDir)
        </Properties>
      </PackageReferencesToStore>
    </ItemGroup>

    <MSBuild Projects="@(PackageReferencesToStore)"
                 Targets="StoreWorker"
                 BuildInParallel="$(BuildInParallel)"
                 ContinueOnError="WarnAndContinue">
      <Output ItemName="ResolvedPackagesFromMapper" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <Target Name="StoreWorker"
          Returns="@(ResolvedPackagesPublished)"
          DependsOnTargets="PrepforRestoreForComposeStore;
                            StoreWorkerPerformWork"/>
  
  <Target Name="StoreWorkerPerformWork"
          DependsOnTargets="RestoreForComposeStore;
                            ComputeAndCopyFilesToStoreDirectory;"
          Condition="!Exists($(StoreWorkerWorkingDir))" />

<!--
    ============================================================
                                        StoreFinalizer

   Cleans up and produces artifacts after completion of store
    ============================================================
    -->
  <UsingTask TaskName="RemoveDuplicatePackageReferences" AssemblyFile="$(MicrosoftNETBuildTasksAssembly)" />
  <Target Name="StoreFinalizer"
          DependsOnTargets="StoreWorkerMain;
                            _CopyResolvedOptimizedFiles">

    <RemoveDuplicatePackageReferences
         InputPackageReferences="@(AllResolvedPackagesPublished)">
      <Output TaskParameter="UniquePackageReferences"  ItemName="AllResolvedPackagesPublishedAfterFilter"/>
    </RemoveDuplicatePackageReferences>
    
    <ItemGroup>
      <ListOfPackageReference Include="@(AllResolvedPackagesPublishedAfterFilter -> '%20%20%20&lt;Package Id=&quot;%(Identity)&quot;  Version =&quot;%(Version)&quot;/&gt;')"/>
    </ItemGroup>
    <PropertyGroup>
      <_StoreArtifactContent>
      <![CDATA[
<StoreArtifacts>
@(ListOfPackageReference)
</StoreArtifacts>
]]>
       </_StoreArtifactContent>
      </PropertyGroup>
    <WriteLinesToFile
             File="$(StoreArtifactXml)"
             Lines="$(_StoreArtifactContent)"
             Overwrite="true" />

    <Message Text="Files were composed in $(PublishDir)"
                 Importance="high"/>
    <Message Text="The list of packages stored is in $(StoreArtifactXml) "
                 Importance="high"/>
    <RemoveDir
        Condition="'$(PreserveComposeWorkingDir)' != 'true'"
        Directories="$(ComposeWorkingDir)"
        ContinueOnError="WarnAndContinue"/>
  </Target>

  <!--
    ============================================================
                                        _CopyResolvedUnOptimizedFiles

    Copy OptimizedResolvedFileToPublish items to the publish directory.
    ============================================================
    -->

  <Target Name="_CopyResolvedOptimizedFiles"
          DependsOnTargets="StoreWorkerMain;">
    <ItemGroup>
      <_OptimizedResolvedFileToPublish Include="$(StoreStagingDir)\**\*.*" />
      <_OptimizedSymbolFileToPublish Include="$(StoreSymbolsStagingDir)\**\*.*" />
    </ItemGroup>

    <Copy SourceFiles = "@(_OptimizedResolvedFileToPublish)"
          DestinationFolder="$(PublishDir)%(RecursiveDir)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          Condition ="'@(_OptimizedResolvedFileToPublish)' != ''"
          SkipUnchangedFiles="$(SkipUnchangedFiles)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

    <Copy SourceFiles="@(_OptimizedSymbolFileToPublish)"
          DestinationFolder="$(ProfilingSymbolsDir)%(RecursiveDir)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          Condition="'@(_OptimizedSymbolFileToPublish)' != ''"
          SkipUnchangedFiles="$(SkipUnchangedFiles)">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
  </Target>
  
  <!--
    ============================================================
                                        PrepareForComposeStore

    Prepare the prerequisites for ComposeStore.
    ============================================================
    -->
  
  <Target Name="PrepareForComposeStore">

    <PropertyGroup>
      <PreserveStoreLayout Condition="'$(PreserveStoreLayout)' == ''">true</PreserveStoreLayout>
      <SkipOptimization Condition="'$(RuntimeIdentifier)' == ''">true</SkipOptimization>
      <_TFM Condition="'$(_TFM)' == ''">$(TargetFramework)</_TFM>
      <SkipUnchangedFiles Condition="'$(SkipUnchangedFiles)' == ''">true</SkipUnchangedFiles>
    </PropertyGroup>

    <NETSdkError Condition="'$(RuntimeIdentifier)' =='' and '$(_PureManagedAssets)' == ''"
                 ResourceName="RuntimeIdentifierWasNotSpecified"/>

    <NETSdkError Condition="'$(_TFM)' ==''"
                 ResourceName="AtLeastOneTargetFrameworkMustBeSpecified"/>
      
    <PropertyGroup>
      <DefaultComposeDir>$(HOME)</DefaultComposeDir>
      <DefaultComposeDir Condition="'$(OS)' == 'Windows_NT'">$(USERPROFILE)</DefaultComposeDir>
      <DefaultComposeDir>$([System.IO.Path]::Combine($(DefaultComposeDir), '.dotnet', $(PlatformTarget), 'store'))</DefaultComposeDir>

      <_ProfilingSymbolsDirectoryName>symbols</_ProfilingSymbolsDirectoryName>
      <DefaultProfilingSymbolsDir>$([System.IO.Path]::Combine($(DefaultComposeDir), $(_ProfilingSymbolsDirectoryName)))</DefaultProfilingSymbolsDir>
      <ProfilingSymbolsDir Condition="'$(ProfilingSymbolsDir)' == '' and '$(ComposeDir)' != ''">$([System.IO.Path]::Combine($(ComposeDir), $(_ProfilingSymbolsDirectoryName)))</ProfilingSymbolsDir>
      <ProfilingSymbolsDir Condition="'$(ProfilingSymbolsDir)' != '' and '$(DoNotDecorateComposeDir)' != 'true'">$([System.IO.Path]::Combine($(ProfilingSymbolsDir), $(PlatformTarget)))</ProfilingSymbolsDir>
      <ProfilingSymbolsDir Condition="'$(ProfilingSymbolsDir)' == ''">$(DefaultProfilingSymbolsDir)</ProfilingSymbolsDir>
      <ProfilingSymbolsDir Condition="'$(DoNotDecorateComposeDir)' != 'true'">$([System.IO.Path]::Combine($(ProfilingSymbolsDir), $(_TFM)))</ProfilingSymbolsDir>
      <ProfilingSymbolsDir Condition="!HasTrailingSlash('$(ProfilingSymbolsDir)')">$(ProfilingSymbolsDir)\</ProfilingSymbolsDir>

      <ComposeDir Condition="'$(ComposeDir)' != '' and '$(DoNotDecorateComposeDir)' != 'true'">$([System.IO.Path]::Combine($(ComposeDir), $(PlatformTarget)))</ComposeDir>
      <ComposeDir Condition="'$(ComposeDir)' == ''">$(DefaultComposeDir)</ComposeDir>
      <ComposeDir Condition="'$(DoNotDecorateComposeDir)' != 'true'">$([System.IO.Path]::Combine($(ComposeDir), $(_TFM)))</ComposeDir>
      <StoreArtifactXml>$([System.IO.Path]::Combine($(ComposeDir),"artifact.xml"))</StoreArtifactXml>
      <PublishDir>$([System.IO.Path]::GetFullPath($(ComposeDir)))</PublishDir>
      <_RandomFileName>$([System.IO.Path]::GetRandomFileName())</_RandomFileName>
      <TEMP Condition="'$(TEMP)' == ''">$([System.IO.Path]::GetTempPath())</TEMP>
      <ComposeWorkingDir Condition="'$(ComposeWorkingDir)' == ''">$([System.IO.Path]::Combine($(TEMP), $(_RandomFileName)))</ComposeWorkingDir>
      <ComposeWorkingDir>$([System.IO.Path]::GetFullPath($(ComposeWorkingDir)))</ComposeWorkingDir>
      <StoreStagingDir>$([System.IO.Path]::Combine($(ComposeWorkingDir),"StagingDir"))</StoreStagingDir>      <!-- Will contain optimized managed assemblies in nuget cache layout -->
      <StoreSymbolsStagingDir>$([System.IO.Path]::Combine($(ComposeWorkingDir),"SymbolsStagingDir"))</StoreSymbolsStagingDir>
      <RestoreProj>$([System.IO.Path]::Combine($(ComposeWorkingDir),"Restore.csproj"))</RestoreProj>          <!-- To minimize parsing huge input files during restore stage for packages -->
      <!-- Ensure any PublishDir has a trailing slash, so it can be concatenated -->
      <PublishDir Condition="!HasTrailingSlash('$(PublishDir)')">$(PublishDir)\</PublishDir>
      <CreateProfilingSymbols Condition="'$(CreateProfilingSymbols)' == ''">false</CreateProfilingSymbols>
    </PropertyGroup>


    <NETSdkError Condition="Exists($(ComposeWorkingDir))"
                 ResourceName="FolderAlreadyExists"
                 FormatArguments="$(ComposeWorkingDir)" />

    <MakeDir Directories="$(PublishDir)" />
    <MakeDir  Directories="$(StoreStagingDir)"/>

    <!-- Create a Project to be used for restores-->
    <PropertyGroup>
      <RestoreProjContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk">
</Project>
]]>
      </RestoreProjContent>
    </PropertyGroup>

    <WriteLinesToFile
        File="$(RestoreProj)"
        Lines="$(RestoreProjContent)"
        Overwrite="true" />
  </Target>

  <Target Name="PrepforRestoreForComposeStore">

    <PropertyGroup>
      <StorePackageVersionForFolderName>$(StorePackageVersion.Replace('*','-'))</StorePackageVersionForFolderName>
      <StoreWorkerWorkingDir>$([System.IO.Path]::Combine($(ComposeWorkingDir),"$(StorePackageName)_$(StorePackageVersionForFolderName)"))</StoreWorkerWorkingDir>
      <_PackageProjFile>$([System.IO.Path]::Combine($(StoreWorkerWorkingDir), "Package.csproj"))</_PackageProjFile>
      <ProjectAssetsFile>$(StoreWorkerWorkingDir)\project.assets.json</ProjectAssetsFile>
      <_PackageProjContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk">
  <ItemGroup>
    <PackageReference Include="$(StorePackageName)" Version="$(StorePackageVersion)"/>
  </ItemGroup>
</Project>    
]]>
      </_PackageProjContent>
    </PropertyGroup>
    
  </Target>
  
  <!--
    ============================================================
                                        RestoreForComposeStore

    Restores the package
    ============================================================
    -->
  
  <Target Name="RestoreForComposeStore"
          DependsOnTargets="PrepforRestoreForComposeStore;">
    
    <MakeDir Directories="$(StoreWorkerWorkingDir)" />
    
    <!-- Create a Project to Restore Package -->
    <WriteLinesToFile
            File="$(_PackageProjFile)"
            Lines="$(_PackageProjContent)"
            Overwrite="true" />
    
    <MSBuild Projects="$(_PackageProjFile)"
                 Targets="Restore"
                 Properties="RestoreGraphProjectInput=$(_PackageProjFile);
                             DisableImplicitFrameworkReferences=true;
                             RestoreOutputPath=$(StoreWorkerWorkingDir);
                             RuntimeIdentifier=$(RuntimeIdentifier);
                             TargetFramework=$(TargetFramework);"/>
  </Target>

  <!--
    ============================================================
                                        ComputeAndCopyFilesToStoreDirectory

    Computes the list of all files to copy to the publish directory and then publishes them.
    ============================================================
    -->
  
  <Target Name="ComputeAndCopyFilesToStoreDirectory"
          DependsOnTargets="ComputeFilesToStore;
                            CopyFilesToStoreDirectory" />

  <!--
    ============================================================
                                        CopyFilesToStoreDirectory

    Copy all build outputs, satellites and other necessary files to the publish directory.
    ============================================================
    -->
  
  <Target Name="CopyFilesToStoreDirectory"
          DependsOnTargets="_CopyResolvedUnOptimizedFiles"/>
  
  
  <!--
    ============================================================
                                        _CopyResolvedUnOptimizedFiles

    Copy _UnOptimizedResolvedFileToPublish items to the publish directory.
    ============================================================
    -->
  
  <Target Name="_CopyResolvedUnOptimizedFiles"
          DependsOnTargets="_ComputeResolvedFilesToStoreTypes;
                            _RunOptimizer">

    <Copy SourceFiles = "@(_UnOptimizedResolvedFileToPublish)"
          DestinationFiles="$(PublishDir)%(_UnOptimizedResolvedFileToPublish.DestinationSubPath)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          SkipUnchangedFiles="$(SkipUnchangedFiles)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>
  </Target>

  <!--
    ============================================================
                                        _ComputeResolvedFilesToStoreTypes
    ============================================================
    -->
  
  <Target Name="_ComputeResolvedFilesToStoreTypes"
           DependsOnTargets="_GetResolvedFilesToStore;_SplitResolvedFiles;" />

  <!--
    ============================================================
                                        _SplitResolvedFiles

    Splits ResolvedFileToPublish items into 'managed' and 'unmanaged' buckets.
    ============================================================
    -->
  
  <Target Name="_SplitResolvedFiles"
           Condition="$(SkipOptimization) !='true' "
           DependsOnTargets="_GetResolvedFilesToStore">
    <ItemGroup>
      <_ManagedResolvedFileToPublishCandidates Include="@(ResolvedFileToPublish)"
                                             Condition="'%(ResolvedFileToPublish.AssetType)'=='runtime'" />

      <_UnOptimizedResolvedFileToPublish Include="@(ResolvedFileToPublish)"
                                     Condition="'%(ResolvedFileToPublish.AssetType)'!='runtime'" />
    </ItemGroup>

    <PropertyGroup>
      <SkipOptimization Condition="'@(_ManagedResolvedFileToPublishCandidates)'==''">true</SkipOptimization>
    </PropertyGroup>
  </Target>

  <!--
    ============================================================
                                        _GetResolvedFilesToStore
    ============================================================
    -->
  
  <Target Name="_GetResolvedFilesToStore"
           Condition="$(SkipOptimization) == 'true' ">
    <ItemGroup>
            <_UnOptimizedResolvedFileToPublish Include="@(ResolvedFileToPublish)" />
    </ItemGroup>
  </Target>

  <!--
    ============================================================
                                        ComputeFilesToStore

    Gathers all the files that need to be copied to the publish directory.
    ============================================================
    -->
  
  <Target Name="ComputeFilesToStore"
          DependsOnTargets="_ComputeNetPublishAssets;
                            _ComputeCopyToPublishDirectoryItems">

    <PropertyGroup>
      <CopyBuildOutputToPublishDirectory Condition="'$(CopyBuildOutputToPublishDirectory)'==''">true</CopyBuildOutputToPublishDirectory>
      <CopyOutputSymbolsToPublishDirectory Condition="'$(CopyOutputSymbolsToPublishDirectory)'==''">true</CopyOutputSymbolsToPublishDirectory>
    </PropertyGroup>

    <ItemGroup>

      <!-- Copy all the assemblies -->
      <ResolvedFileToPublish Include="@(ResolvedAssembliesToPublish)">
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

</Project>
