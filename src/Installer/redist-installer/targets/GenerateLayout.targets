<Project>

  <Target Name="LayoutBundledComponents">
    <!-- Remove everything from the publish directory so we don't have left over items from previous builds -->
    <RemoveDir Directories="$(RedistLayoutPath)" />
    <MakeDir Directories="$(RedistLayoutPath)" />

    <ExtractArchiveToDirectory SourceArchive="%(BundledLayoutComponent.DownloadDestination)"
                               DestinationDirectory="$(RedistLayoutPath)/%(BundledLayoutComponent.RelativeLayoutPath)"
                               DirectoriesToCopy="%(BundledLayoutComponent.DirectoriesToCopy)" />

    <ItemGroup>
      <!-- Use lowercase package name in package path -->
      <BundledLayoutPackage>
        <LoweredPackageName>$([MSBuild]::ValueOrDefault('%(BundledLayoutPackage.PackageName)', '').ToLowerInvariant())</LoweredPackageName>
      </BundledLayoutPackage>

      <!-- Remove files from the root of the package, as these are either files NuGet writes, or not necessary -->
      <BundledLayoutPackageDownloadFiles Include="$(NuGetPackageRoot)\%(BundledLayoutPackage.LoweredPackageName)\%(BundledLayoutPackage.PackageVersion)\**\*.*"
                                         Exclude="$(NuGetPackageRoot)\%(BundledLayoutPackage.LoweredPackageName)\%(BundledLayoutPackage.PackageVersion)\*.*"
                                         Condition="%(BundledLayoutPackage.SkipExtractPackage) != 'true'">
        <RelativeLayoutPath>%(BundledLayoutPackage.RelativeLayoutPath)</RelativeLayoutPath>
        <LayoutPackageDescription>%(BundledLayoutPackage.Identity)</LayoutPackageDescription>
      </BundledLayoutPackageDownloadFiles>

      <!-- Set destination path in layout -->
      <BundledLayoutPackageDownloadFiles>
        <DestinationPath>%(BundledLayoutPackageDownloadFiles.RecursiveDir)%(BundledLayoutPackageDownloadFiles.Filename)%(BundledLayoutPackageDownloadFiles.Extension)</DestinationPath>
      </BundledLayoutPackageDownloadFiles>
      <BundledLayoutPackageDownloadFiles>
        <DestinationPath>$(RedistLayoutPath)%(BundledLayoutPackageDownloadFiles.RelativeLayoutPath)/%(BundledLayoutPackageDownloadFiles.DestinationPath)</DestinationPath>
      </BundledLayoutPackageDownloadFiles>
      <BundledLayoutPackageDownloadFiles>
        <DestinationPath>$([MSBuild]::NormalizePath(%(BundledLayoutPackageDownloadFiles.DestinationPath)))</DestinationPath>
      </BundledLayoutPackageDownloadFiles>

      <BundledLayoutPackageDownloadFilesWithDestination Include="@(BundledLayoutPackageDownloadFiles)" />
    </ItemGroup>

    <!-- BundledLayoutPackage with SkipExtractPackage=true metadata -->
    <ItemGroup Condition="'@(BundledLayoutPackage->AnyHaveMetadataValue('SkipExtractPackage', 'true'))' == 'true'">
      <BundledUncompressedLayoutPackage Include="@(BundledLayoutPackage->WithMetadataValue('SkipExtractPackage', 'true'))" />
      <BundledUncompressedLayoutPackageFile Include="$(NuGetPackageRoot)\%(BundledUncompressedLayoutPackage.LoweredPackageName)\%(BundledUncompressedLayoutPackage.PackageVersion)\%(BundledUncompressedLayoutPackage.LoweredPackageName).%(BundledUncompressedLayoutPackage.PackageVersion).nupkg"
                                            DestinationPath="$(RedistLayoutPath)%(BundledUncompressedLayoutPackage.RelativeLayoutPath)\%(BundledUncompressedLayoutPackage.PackageName).%(BundledUncompressedLayoutPackage.PackageVersion).nupkg" />
      
      <BundledLayoutPackageDownloadFilesWithDestination Include="@(BundledUncompressedLayoutPackageFile)" />
    </ItemGroup>

    <Copy SourceFiles="@(BundledLayoutPackageDownloadFilesWithDestination)"
          DestinationFiles="@(BundledLayoutPackageDownloadFilesWithDestination->'%(DestinationPath)')"
          SkipUnchangedFiles="true" />

    <!-- https://github.com/dotnet/msbuild/issues/5881#issuecomment-802492423 -->
    <ItemGroup>
      <DotnetToolsetInternalSource Include="$(SdkLayoutOutputDirectory)**\*" />
      <DotnetToolsetInternalDestination Include="@(DotnetToolsetInternalSource->'$(RedistLayoutPath)sdk\$(Version)\%(RecursiveDir)%(Filename)%(Extension)')" />
    </ItemGroup>

    <Copy SourceFiles="@(DotnetToolsetInternalSource)" DestinationFiles="@(DotnetToolsetInternalDestination)" SkipUnchangedFiles="true" />
  </Target>

  <Target Name="RetargetTools">
    <ItemGroup>
      <ToolRuntimeConfigPath Include="$(RedistLayoutPath)sdk/$(Version)/**/*.runtimeconfig.json" />
    </ItemGroup>

    <!-- Update runtimeconfig files for tools in the SDK to pin the shared frameworks to the one carried by this installer. -->
    <UpdateRuntimeConfig
      RuntimeConfigPaths="@(ToolRuntimeConfigPath)"
      MicrosoftNetCoreAppVersion="$(MicrosoftNETCoreAppRuntimePackageVersion)"
      MicrosoftAspNetCoreAppVersion="$(MicrosoftAspNetCoreAppRuntimePackageVersion)" />
  </Target>

  <Target Name="GenerateVersionFile">
    <WriteLinesToFile File="$(SdkOutputDirectory).version"
                      Lines="$(SourceRevisionId);$(Version);$(Rid);$(FullNugetVersion);$(SdkFeatureBand)"
                      Overwrite="true" />
  </Target>

  <Target Name="CopyKnownWorkloadManifestFile">
    <ItemGroup>
      <WorkloadManifestFilesContent Include="$([MSBuild]::ValueOrDefault('%(BundledManifests.Identity)', '').ToLowerInvariant())" />
    </ItemGroup>

    <Error Text="No workload manifest content found." Condition="'@(WorkloadManifestFilesContent->Count())' == '0'" />

    <ItemGroup>
      <WorkloadManifestFilesContent Include="samsung.net.sdk.tizen" />
    </ItemGroup>

    <WriteLinesToFile File="$(SdkOutputDirectory)KnownWorkloadManifests.txt"
                      Lines="@(WorkloadManifestFilesContent)"
                      Overwrite="true" />
  </Target>

  <Target Name="LayoutWorkloadUserLocalMarker"
          Condition="'$(DotNetBuildSourceOnly)' == 'true'">
    <WriteLinesToFile File="$(RedistLayoutPath)metadata/workloads/$(CliProductBandVersion)00/userlocal"
                      Overwrite="true" />
  </Target>

  <Target Name="LayoutAppHostTemplate" DependsOnTargets="RunResolvePackageDependencies">
    <PropertyGroup>
    <NETCoreAppHostPackageName>Microsoft.NETCore.App.Host.$(SharedFrameworkRid)</NETCoreAppHostPackageName>
      <AppHostRestorePath>$(NuGetPackageRoot)$(NETCoreAppHostPackageName.ToLowerInvariant())\$(MicrosoftNETCoreAppHostPackageVersion)\</AppHostRestorePath>
      <AppHostTemplatePath>$(SdkOutputDirectory)AppHostTemplate</AppHostTemplatePath>
      <AppHostExecutableName>AppHost$(ExeExtension)</AppHostExecutableName>
    </PropertyGroup>

    <ItemGroup>
      <AllFileOfRestoredAppHostPackage Include="$(AppHostRestorePath)\**\*.*" />
      <NativeRestoredAppHostNETCore Include="@(AllFileOfRestoredAppHostPackage)"
          Condition="'%(FileName)%(Extension)' == '$(AppHostExecutableName)'" />
    </ItemGroup>

    <Error Condition="@(NativeRestoredAppHostNETCore->Distinct()->Count()) != 1"
           Text="Failed to determine the $(NETCoreAppHostPackageName) executable in @(AllFileOfRestoredAppHostPackage)" />

    <Copy SourceFiles="@(NativeRestoredAppHostNETCore)" DestinationFolder="$(AppHostTemplatePath)" />

    <Message Text="Copy from @(NativeRestoredAppHostNETCore) to $(AppHostTemplatePath)." Importance="High" />
  </Target>

  <!-- This target no longer runs by default. The ResolveAssemblyReference task is substantially faster if it has a cache, so the idea was to precompute a cache for commonly resolved (SDK) assemblies,
       but the expected performance win did not materialize. This target can take multiple minutes to run with every build, so disabling it until/unless we find good value for it. -->
  <Target Name="GeneratePrecomputedRarCache" DependsOnTargets="LayoutTemplates;LayoutManifests;LayoutBundledTools">
    <ItemGroup>
      <AssembliesToResolve Include="$(RedistLayoutPath)\**\*.dll" Exclude="$(RedistLayoutPath)\**\native\**\*.dll" />
    </ItemGroup>
    <ResolveAssemblyReference AssemblyFiles="@(AssembliesToResolve)" Silent="$(ResolveAssemblyReferencesSilent)" AssemblyInformationCacheOutputPath="$(RedistLayoutPath)sdk\$(Version)\SDKPrecomputedAssemblyReferences.cache" SearchPaths="{RawFileName}" WarnOrErrorOnTargetArchitectureMismatch="$(ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch)" />
  </Target>

  <!-- Replace files from the runtime packs with symbolic links to the corresponding shared framework files (and hostfxr) to reduce the size of the runtime pack directories. -->
  <Target Name="ReplaceBundledRuntimePackFilesWithSymbolicLinks" DependsOnTargets="LayoutBundledComponents"
                                                                 Condition="'$(BundleRuntimePacks)' == 'true' and  !$([MSBuild]::IsOSPlatform('WINDOWS'))">
    <ReplaceFilesWithSymbolicLinks Directory="$(RedistLayoutPath)/packs/Microsoft.NETCore.App.Runtime.$(SharedFrameworkRid)/$(MicrosoftNETCoreAppRuntimePackageVersion)" LinkToFilesFrom="$(RedistLayoutPath)/shared/Microsoft.NETCore.App/$(MicrosoftNETCoreAppRuntimePackageVersion)" />
    <ReplaceFilesWithSymbolicLinks Directory="$(RedistLayoutPath)/packs/Microsoft.NETCore.App.Runtime.$(SharedFrameworkRid)/$(MicrosoftNETCoreAppRuntimePackageVersion)" LinkToFilesFrom="$(RedistLayoutPath)/host/fxr/$(MicrosoftNETCoreAppRuntimePackageVersion)" />
    <ReplaceFilesWithSymbolicLinks Directory="$(RedistLayoutPath)/packs/Microsoft.AspNetCore.App.Runtime.$(SharedFrameworkRid)/$(MicrosoftAspNetCoreAppRuntimePackageVersion)" LinkToFilesFrom="$(RedistLayoutPath)/shared/Microsoft.AspNetCore.App/$(MicrosoftAspNetCoreAppRuntimePackageVersion)" />
  </Target>

  <Target Name="GenerateLayout"
          DependsOnTargets="DownloadBundledComponents;
                            LayoutBundledComponents;
                            GenerateVersionFile;
                            CopyKnownWorkloadManifestFile;
                            GenerateBundledVersions;
                            LayoutRuntimeGraph;
                            LayoutTemplates;
                            LayoutManifests;
                            LayoutBaselineWorkloadSet;
                            LayoutWorkloadUserLocalMarker;
                            LayoutBundledTools;
                            RetargetTools;
                            CrossgenLayout;
                            LayoutAppHostTemplate;
                            ReplaceBundledRuntimePackFilesWithSymbolicLinks"
          BeforeTargets="AfterBuild" />

  <Target Name="GenerateInternalLayout"
          DependsOnTargets="GenerateLayout"
          BeforeTargets="AfterBuild" >
    <RemoveDir Directories="$(SdkInternalLayoutPath)" />
    <MakeDir Directories="$(SdkInternalLayoutPath)" />

    <!-- Create "SDK Internal" layout to create the MSI to bundle -->
    <ItemGroup>
      <SdkInternalFiles Include="$(RedistLayoutPath)sdk/$(Version)/**/*.*" />
    </ItemGroup>

    <Copy SourceFiles="@(SdkInternalFiles)"
          DestinationFiles="@(SdkInternalFiles -> '$(SdkInternalLayoutPath)sdk\$(Version)\%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>

</Project>
