<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="ja" original="../MicrosoftNetFrameworkAnalyzersResources.resx">
    <body>
      <trans-unit id="AvoidDuplicateAcceleratorsTitle">
        <source>Avoid duplicate accelerators</source>
        <target state="translated">重複するアクセラレータを使用しません</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidDuplicateAcceleratorsDescription">
        <source>An access key, also known as an accelerator, enables keyboard access to a control by using the ALT key. When multiple controls have duplicate access keys, the behavior of the access key is not well defined.</source>
        <target state="translated">アクセラレータとも呼ばれるアクセス キーを使用すると、キーボードから Alt キーを使用してコントロールにアクセスできます。複数のコントロールでアクセス キーが重複している場合、アクセス キーの動作は適切に定義されていません。</target>
        <note />
      </trans-unit>
      <trans-unit id="AvoidDuplicateAcceleratorsMessage">
        <source>Avoid duplicate accelerators</source>
        <target state="translated">重複するアクセラレータを使用しません</target>
        <note />
      </trans-unit>
      <trans-unit id="SetLocaleForDataTypesTitle">
        <source>Set locale for data types</source>
        <target state="translated">データ型のロケールを設定します</target>
        <note />
      </trans-unit>
      <trans-unit id="SetLocaleForDataTypesDescription">
        <source>The locale determines culture-specific presentation elements for data, such as formatting that is used for numeric values, currency symbols, and sort order. When you create a DataTable or DataSet, you should explicitly set the locale.</source>
        <target state="translated">ロケールにより、データのカルチャ固有の表示要素が決まります。たとえば、数値、通貨記号、並べ替え順序に使用される形式です。DataTable または DataSet を作成する際は、ロケールを明示的に設定する必要があります。</target>
        <note />
      </trans-unit>
      <trans-unit id="SetLocaleForDataTypesMessage">
        <source>Set locale for data types</source>
        <target state="translated">データ型のロケールを設定します</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotMarkServicedComponentsWithWebMethodTitle">
        <source>Do not mark serviced components with WebMethod</source>
        <target state="translated">サービス コンポーネントを WebMethod に設定しません</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotMarkServicedComponentsWithWebMethodDescription">
        <source>A method in a type that inherits from System.EnterpriseServices.ServicedComponent is marked by using System.Web.Services.WebMethodAttribute. Because WebMethodAttribute and a ServicedComponent method have conflicting behavior and requirements for context and transaction flow, the behavior of the method will be incorrect in some scenarios.</source>
        <target state="translated">System.EnterpriseServices.ServicedComponent から継承された型のメソッドは、System.Web.Services.WebMethodAttribute を使用してマークされています。WebMethodAttribute と ServicedComponent メソッドは、コンテキストとトランザクション フローの動作および要件が競合するため、状況によってはメソッドの動作が正しくありません。</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotMarkServicedComponentsWithWebMethodMessage">
        <source>Do not mark serviced components with WebMethod</source>
        <target state="translated">サービス コンポーネントを WebMethod に設定しません</target>
        <note />
      </trans-unit>
      <trans-unit id="CallBaseClassMethodsOnISerializableTypesTitle">
        <source>Call base class methods on ISerializable types</source>
        <target state="translated">ISerializable 型で基底クラス メソッドを呼び出します</target>
        <note />
      </trans-unit>
      <trans-unit id="CallBaseClassMethodsOnISerializableTypesDescription">
        <source>To fix a violation of this rule, call the base type GetObjectData method or serialization constructor from the corresponding derived type method or constructor.</source>
        <target state="translated">この規則の違反を修正するには、対応する派生型のメソッドまたはコンストラクターから基本型の GetObjectData メソッドまたはシリアル化コンストラクターを呼び出します。</target>
        <note />
      </trans-unit>
      <trans-unit id="CallBaseClassMethodsOnISerializableTypesMessage">
        <source>Call base class methods on ISerializable types</source>
        <target state="translated">ISerializable 型で基底クラス メソッドを呼び出します</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotCatchCorruptedStateExceptions">
        <source>Do Not Catch Corrupted State Exceptions</source>
        <target state="translated">破損状態例外をキャッチしません</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotCatchCorruptedStateExceptionsDescription">
        <source>Catching corrupted state exceptions could mask errors (such as access violations), resulting in inconsistent state of execution or making it easier for attackers to compromise system. Instead, catch and handle a more specific set of exception type(s) or re-throw the exception.</source>
        <target state="translated">破損状態例外をキャッチすると、エラー (アクセス違反など) がマスクされ、実行の状態に一貫性がなくなったり、攻撃者がシステムを侵害しやすくなったりする可能性があります。代わりに、より具体的な一連の例外の種類をキャッチして処理するか、例外を再スローします。</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotCatchCorruptedStateExceptionsMessage">
        <source>{0} is catching corrupted state exception</source>
        <target state="translated">{0} が破損状態例外をキャッチしています</target>
        <note />
      </trans-unit>
      <trans-unit id="TypesShouldNotExtendCertainBaseTypesTitle">
        <source>Types should not extend certain base types</source>
        <target state="translated">型は、一定の基本型を拡張することはできません</target>
        <note />
      </trans-unit>
      <trans-unit id="TypesShouldNotExtendCertainBaseTypesDescription">
        <source>An externally visible type extends certain base types. Use one of the alternatives.</source>
        <target state="translated">外部から参照可能な型が、特定の基本型を拡張します。いずれかの代替策を使用してください。</target>
        <note />
      </trans-unit>
      <trans-unit id="TypesShouldNotExtendCertainBaseTypesMessageSystemXmlXmlDocument">
        <source>Change the base type of {0} so that it no longer extends {1}. The preferred design is to decouple the underlying XmlDocument representation from the type's interface by using containment instead of inheritance.</source>
        <target state="translated">{0} が {1} をこれ以上拡張しないように、その基本型を変更します。推奨されるデザインは、継承ではなくコンテインメイトを使用して、基になる XmlDocument 表現を型のインターフェイスから切り離すことです。</target>
        <note />
      </trans-unit>
      <trans-unit id="TypesShouldNotExtendCertainBaseTypesMessageSystemApplicationException">
        <source>Change the base type of {0} so that it no longer extends {1}. This base exception type does not provide any additional value for framework classes. Extend 'System.Exception' or an existing unsealed exception type instead. Do not create a new exception base type unless there is specific value in enabling the creation of a catch handler for an entire class of exceptions.</source>
        <target state="translated">{0} が {1} をこれ以上拡張しないように、その基本型を変更します。この基本例外型は、追加の値を Framework クラスに対して指定しません。代わりに、'System.Exception' または既存のアンシールド例外型を拡張してください。キャッチ ハンドラーの作成を例外のクラス全体に対して有効にする特定の値がない場合は、新しい例外基本型を作成しないでください。</target>
        <note />
      </trans-unit>
      <trans-unit id="TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsCollectionBase">
        <source>Change the base type of {0} from {1} to its generic equivalent 'System.Collections.ObjectModel.Collection'.</source>
        <target state="translated">{0} の基本型を {1} から同等のジェネリック型 'System.Collections.ObjectModel.Collection' に変更します。</target>
        <note />
      </trans-unit>
      <trans-unit id="TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsDictionaryBase">
        <source>Change the base type of {0} from {1} to its generic equivalent 'System.Collections.ObjectModel.KeyedCollection'.</source>
        <target state="translated">{0} の基本型を {1} から同等のジェネリック型 'System.Collections.ObjectModel.KeyedCollection' に変更します。</target>
        <note />
      </trans-unit>
      <trans-unit id="TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsQueue">
        <source>Change the base type of {0} from {1} to its generic equivalent 'System.Collections.Generic.Queue'.</source>
        <target state="translated">{0} の基本型を {1} から同等のジェネリック型 'System.Collections.Generic.Queue' に変更します。</target>
        <note />
      </trans-unit>
      <trans-unit id="TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsReadOnlyCollectionBase">
        <source>Change the base type of {0} from {1} to its generic equivalent 'System.Collections.ObjectModel.ReadOnlyCollection'.</source>
        <target state="translated">{0} の基本型を {1} から同等のジェネリック型 'System.Collections.ObjectModel.ReadOnlyCollection' に変更します。</target>
        <note />
      </trans-unit>
      <trans-unit id="TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsSortedList">
        <source>Change the base type of {0} from {1} to its generic equivalent 'System.Collections.Generic.SortedList'.</source>
        <target state="translated">{0} の基本型を {1} から同等のジェネリック型 'System.Collections.Generic.SortedList' に変更します。</target>
        <note />
      </trans-unit>
      <trans-unit id="TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsStack">
        <source>Change the base type of {0} from {1} to its generic equivalent 'System.Collections.Generic.Stack'.</source>
        <target state="translated">{0} の基本型を {1} から同等のジェネリック型 'System.Collections.Generic.Stack' に変更します。</target>
        <note />
      </trans-unit>
      <trans-unit id="DoNotUseInsecureDtdProcessingDescription">
        <source>Using XmlTextReader.Load(), creating an insecure XmlReaderSettings instance when invoking XmlReader.Create(), setting the InnerXml property of the XmlDocument and enabling DTD processing using XmlUrlResolver insecurely can lead to information disclosure. Replace it with a call to the Load() method overload that takes an XmlReader instance, use XmlReader.Create() to accept XmlReaderSettings arguments or consider explicitly setting secure values. The DataViewSettingCollectionString property of DataViewManager should always be assigned from a trusted source, the DtdProcessing property should be set to false, and the XmlResolver property should be changed to XmlSecureResolver or null.</source>
        <target state="translated">XmlTextReader.Load() を使用して、XmlReader.Create() を呼び出すときに安全でない XmlReaderSettings インスタンスを作成し、XmlDocument の InnerXml プロパティを設定し、XmlUrlResolver を使用して安全性の低い DTD 処理を有効にすると、情報漏えいにつながる可能性があります。これを、XmlReader.Create() を使用して XmlReaderSettings 引数を受け入れるか、セキュリティで保護された値を明示的に設定する XmlReader インスタンスを受け取る Load() メソッド オーバーロードの呼び出しに置き換えます。DataViewManager の DataViewSettingCollectionString プロパティは、常に信頼できるソースから割り当て、DtdProcessing プロパティを false に設定し、XmlResolver プロパティを XmlSecureResolver または null に変更する必要があります。</target>
        <note>CA3075</note>
      </trans-unit>
      <trans-unit id="DoNotUseDtdProcessingOverloadsMessage">
        <source>Unsafe overload of '{0}' method</source>
        <target state="translated">'{0}' メソッドの安全でないオーバーロード</target>
        <note>CA3075</note>
      </trans-unit>
      <trans-unit id="DoNotUseSetInnerXmlMessage">
        <source>Uses the unsafe setter of InnerXml property of System.Xml.XmlDocument.</source>
        <target state="translated">System.Xml.XmlDocument の InnerXml プロパティの安全でないセッターを使用します。</target>
        <note>CA3075</note>
      </trans-unit>
      <trans-unit id="InsecureXmlDtdProcessing">
        <source>Insecure DTD processing in XML</source>
        <target state="translated">XML での DTD 処理が安全ではありません</target>
        <note>CA3075</note>
      </trans-unit>
      <trans-unit id="ReviewDtdProcessingPropertiesMessage">
        <source>Property in {0} might be set from an untrusted source.</source>
        <target state="translated">{0} のプロパティが、信頼できない発行元から設定されている可能性があります。</target>
        <note>CA3075</note>
      </trans-unit>
      <trans-unit id="XmlDocumentWithNoSecureResolverMessage">
        <source>An XmlDocument instance is created without setting its XmlResolver property to a secure value</source>
        <target state="translated">XmlResolver プロパティが安全な値に設定されていない 1 つの XmlDocument インスタンスが作成されました。</target>
        <note>CA3075</note>
      </trans-unit>
      <trans-unit id="XmlReaderCreateInsecureConstructedMessage">
        <source>An insecure XmlReaderSettings instance is provided to XmlReader.Create method.</source>
        <target state="translated">XmlReader.Create メソッドに安全でない XmlReaderSettings インスタンスが指定されます。</target>
        <note>CA3075</note>
      </trans-unit>
      <trans-unit id="XmlReaderCreateInsecureInputMessage">
        <source>A potentially insecure XmlReaderSettings instance is provided to XmlReader.Create method.</source>
        <target state="translated">XmlReader.Create メソッドに安全でない可能性がある XmlReaderSettings インスタンスが指定されます。</target>
        <note>CA3075</note>
      </trans-unit>
      <trans-unit id="XmlReaderCreateWrongOverloadMessage">
        <source>An insecure overload of XmlReader.Create which does not accept an XmlReaderSettings argument.</source>
        <target state="translated">XmlReaderSettings 引数を受け付けない XmlReader.Create のオーバーロードは安全ではありません。</target>
        <note>CA3075</note>
      </trans-unit>
      <trans-unit id="XmlTextReaderConstructedWithNoSecureResolutionMessage">
        <source>XmlTextReader instance created with insecure default settings.</source>
        <target state="translated">XmlTextReader インスタンスが安全でない既定の設定で作成されました。</target>
        <note>CA3075</note>
      </trans-unit>
      <trans-unit id="XmlTextReaderSetInsecureResolutionMessage">
        <source>XmlTextReader instance is set with insecure values.</source>
        <target state="translated">XmlTextReader インスタンスに安全でない値が設定されています。</target>
        <note>CA3075</note>
      </trans-unit>
      <trans-unit id="DoNotUseInsecureDtdProcessingGenericMessage">
        <source>{0}</source>
        <target state="translated">{0}</target>
        <note>CA3075</note>
      </trans-unit>
      <trans-unit id="InsecureDtdProcessingInApiDesign">
        <source>Insecure Processing in API Design, XmlDocument and XmlTextReader</source>
        <target state="translated">API の設計 XmlDocument および XmlTextReader で処理が安全ではありません</target>
        <note>CA3077</note>
      </trans-unit>
      <trans-unit id="DoNotUseInsecureDtdProcessingInApiDesignDescription">
        <source>Enabling DTD processing on all instances derived from XmlTextReader or  XmlDocument and using XmlUrlResolver for resolving external XML entities may lead to information disclosure. Ensure to set the XmlResolver property to null, create an instance of XmlSecureResolver when processing untrusted input, or use XmlReader.Create method with a secure XmlReaderSettings argument. Unless you need to enable it, ensure the DtdProcessing property is set to false.</source>
        <target state="translated">XmlTextReader または  XmlDocument から派生したすべてのインスタンスで DTD 処理を有効にし、XmlUrlResolver を使用して外部 XML エンティティの名前解決をすると、情報漏えいが発生する可能性があります。XmlResolver プロパティを null に設定するか、信頼されていない入力を処理するときに XmlSecureResolver のインスタンスを作成するか、またはセキュリティで保護された XmlReaderSettings 引数を指定して XmlReader.Create メソッドを使用してください。有効にする必要がない限り、DtdProcessing プロパティが false に設定されていることを確認してください。</target>
        <note>CA3077</note>
      </trans-unit>
      <trans-unit id="XmlDocumentDerivedClassConstructorNoSecureXmlResolverMessage">
        <source>Constructor of XmlDocument derived class {0} implicitly uses insecure default value for DTD processing.</source>
        <target state="translated">XmlDocument の派生クラス {0} のコンストラクターが、DTD 処理に安全でない既定値を暗黙的に使用しています。</target>
        <note>CA3077</note>
      </trans-unit>
      <trans-unit id="XmlDocumentDerivedClassNoConstructorMessage">
        <source>XmlDocument derived class {0} doesn't explicitly define a constructor.</source>
        <target state="translated">XmlDocument の派生クラス {0} が、コンストラクターを明示的に定義していません。</target>
        <note>CA3077</note>
      </trans-unit>
      <trans-unit id="XmlDocumentDerivedClassSetInsecureXmlResolverInMethodMessage">
        <source>Method {0} of XmlDocument derived class sets XmlResolver property to an insecure value.</source>
        <target state="translated">XmlDocument の派生クラスのメソッド {0} が、XmlResolver プロパティを安全でない値に設定しています。</target>
        <note>CA3077</note>
      </trans-unit>
      <trans-unit id="XmlTextReaderDerivedClassConstructorNoSecureSettingsMessage">
        <source>Constructor of XmlTextReader derived class {0} uses insecure default values for DTD processing.</source>
        <target state="translated">XmlTextReader の派生クラス {0} のコンストラクターが、DTD 処理に安全でない既定値を使用しています。</target>
        <note>CA3077</note>
      </trans-unit>
      <trans-unit id="XmlTextReaderDerivedClassNoConstructorMessage">
        <source>XmlTextReader derived class {0} doesn't explicitly define a constructor.</source>
        <target state="translated">XmlTextReader の派生クラス {0} が、コンストラクターを明示的に定義していません。</target>
        <note>CA3077</note>
      </trans-unit>
      <trans-unit id="XmlTextReaderDerivedClassSetInsecureSettingsInMethodMessage">
        <source>{0} method of XmlTextReader derived class sets XmlResolver and/or DtdProcessing property to insecure value.</source>
        <target state="translated">XmlTextReader の派生クラスの {0} メソッドが、XmlResolver プロパティおよび DtdProcessing プロパティまたはそのいずれかを安全でない値に設定します。</target>
        <note>CA3077</note>
      </trans-unit>
      <trans-unit id="InsecureXsltScriptProcessingMessage">
        <source>Insecure XSLT script processing</source>
        <target state="translated">安全ではない XSLT スクリプト処理</target>
        <note>CA3076</note>
      </trans-unit>
      <trans-unit id="DoNotUseInsecureXSLTScriptExecutionDescription">
        <source>Providing an insecure XsltSettings instance and an insecure XmlResolver instance to XslCompiledTransform.Load method is potentially unsafe as it allows processing script within XSL, which on an untrusted XSL input may lead to malicious code execution. Either replace the insecure XsltSettings argument with XsltSettings.Default or an instance that has disabled document function and script execution, or replace the XmlResolver argument with null or an XmlSecureResolver instance. This message may be suppressed if the input is known to be from a trusted source and external resource resolution from locations that are not known in advance must be supported.</source>
        <target state="translated">セキュリティで保護されていない XsltSettings インスタンスとセキュリティで保護されていない XmlResolver インスタンスを XslCompiledTransform.Load メソッドに指定すると、XSL 内でのスクリプトの処理が許可されるため、安全でない可能性があります。信頼できない XSL 入力では、悪意のあるコードが実行される場合があります。セキュリティで保護されていない XsltSettings 引数を XsltSettings.Default、または document 関数とスクリプトの実行が無効になっているインスタンスに置き換えるか、XmlResolver 引数を null または XmlSecureResolver インスタンスに置き換えます。このメッセージは、信頼できるソースからの入力であることがわかっていて、事前にはわからない場所からの外部リソース解決が必ずサポートされている場合には表示されないことがあります。</target>
        <note>CA3076</note>
      </trans-unit>
      <trans-unit id="XslCompiledTransformLoadInsecureConstructedMessage">
        <source>In {0} an insecure combination of XsltSettings and XmlResolver instances are provided to XslCompiledTransfor.Load as arguments.</source>
        <target state="translated">{0} で、XsltSettings と XmlResolver インスタンスの安全でない組み合わせが XslCompiledTransfor.Load に引数として渡されています。</target>
        <note>CA3076</note>
      </trans-unit>
      <trans-unit id="XslCompiledTransformLoadInsecureInputMessage">
        <source>In {0} an insecure combination of XsltSettings and XmlResolver instances are provided to XslCompiledTransfor.Load as arguments.</source>
        <target state="translated">{0} で、XsltSettings と XmlResolver インスタンスの安全でない組み合わせが XslCompiledTransfor.Load に引数として渡されています。</target>
        <note>CA3076</note>
      </trans-unit>
      <trans-unit id="MarkVerbHandlersWithValidateAntiforgeryTokenGetAndOtherAndTokenMessage">
        <source>The ValidateAntiForgeryAttribute is defined with HttpVerbs.Get and at least one of HttpVerbs.Post, HttpVerbs.Put, HttpVerbs.Delete, or HttpVerbs.Patch on controller action {0}. The attribute will not be used when GET verb is used.</source>
        <target state="translated">コントローラー アクション {0} で ValidateAntiForgeryAttribute が HttpVerbs.Get と、HttpVerbs.Post、HttpVerbs.Put、HttpVerbs.Delete、HttpVerbs.Patch の少なくとも 1 つと共に定義されています。この属性は、GET 動詞が使用されている場合は使用されません。</target>
        <note />
      </trans-unit>
      <trans-unit id="MarkVerbHandlersWithValidateAntiforgeryTokenGetAndTokenMessage">
        <source>Using HttpVerbs.GET and ValidateAntiForgeryTokenAttribute is not supported by MVC on controller action {0}</source>
        <target state="translated">コントローラー アクション {0} では MVC による HttpVerbs.GET と ValidateAntiForgeryTokenAttribute の使用はサポートされていません</target>
        <note />
      </trans-unit>
      <trans-unit id="MarkVerbHandlersWithValidateAntiforgeryTokenNoVerbsMessage">
        <source>HTTP verb attributes attributes are missing on controller action {0}. The ValidateAntiForgeryTokenAttribute will not be used when GET verb is used.</source>
        <target state="translated">HTTP 動詞属性がコントローラー アクション {0} で欠落しています。GET 動詞を使用する場合、ValidateAntiForgeryTokenAttribute は使用されません。</target>
        <note />
      </trans-unit>
      <trans-unit id="MarkVerbHandlersWithValidateAntiforgeryTokenNoVerbsNoTokenMessage">
        <source>Missing ValidateAntiForgeryTokenAttribute on MVC controller action {0} which by default accepts POST requests</source>
        <target state="translated">既定で POST 要求を受け入れる ValidateAntiForgeryTokenAttribute が MVC コントローラー アクション {0} にありません</target>
        <note />
      </trans-unit>
      <trans-unit id="MarkVerbHandlersWithValidateAntiforgeryTokenTitle">
        <source>Mark Verb Handlers With Validate Antiforgery Token</source>
        <target state="translated">偽造防止トークンの検証での動詞ハンドラーのマーク</target>
        <note />
      </trans-unit>
      <trans-unit id="MarkVerbHandlersWithValidateAntiforgeryTokenVerbsAndNoTokenMessage">
        <source>Missing ValidateAntiForgeryTokenAttribute on controller action {0}</source>
        <target state="translated">コントローラー アクション {0} に ValidateAntiForgeryTokenAttribute がありません</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>