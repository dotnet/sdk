Id,Name,Proposed Analyzer,Existing Analyzer,Title,Description,VS Built-In,Triggered,Suppressed,% Suppressed,Rank,Category,Revised Priority,Original Priority,Port?,Default state,Notes,Dependency
CA2229,ImplementSerializationConstructors,Desktop,Microsoft.AnalyzerPowerPack,Implement serialization constructors,"To fix a violation of this rule, implement the serialization constructor. For a sealed class, make the constructor private; otherwise, make it protected.",Yes,58070,100,0.00172206,2766.426825,Usage,,Low,Ported,,,None
CA2235,MarkAllNonSerializableFields,Desktop,Microsoft.AnalyzerPowerPack,Mark all non-serializable fields,An instance field of a type that is not serializable is declared in a type that is serializable.,Yes,136128,564,0.004143159,1239.138299,Usage,,Low,Ported,,,None
CA2237,MarkISerializableTypesWithSerializable,Desktop,Microsoft.AnalyzerPowerPack,Mark ISerializable types with serializable,"To be recognized by the common language runtime as serializable, types must be marked by using the SerializableAttribute attribute even when the type uses a custom serialization routine through implementation of the ISerializable interface.",Yes,517360,1135,0.00219383,2604.482703,Usage,,Low,Ported,,,None
Async001,#N/A,Microsoft.ApiDesignGuidelines,AsyncPackage,Avoid Async Void,#N/A,,,,,,Usage,,,Ported,,,
Async002,#N/A,Microsoft.ApiDesignGuidelines,AsyncPackage,Async Method Names Should End in Async,#N/A,,,,,,Naming,,,Ported,,,
Async003,#N/A,Microsoft.ApiDesignGuidelines,AsyncPackage,Don't Pass Async Lambdas as Void Returning Delegate Types,#N/A,,,,,,Usage,,,Ported,,,
CA1000,DoNotDeclareStaticMembersOnGenericTypes,Microsoft.ApiDesignGuidelines,#N/A,Do not declare static members on generic types,"When a static member of a generic type is called, the type argument must be specified for the type. When a generic instance member that does not support inference is called, the type argument must be specified for the member. In these two cases, the syntax for specifying the type argument is different and easily confused.",Yes,177899,853,0.004794856,1094.959691,Design,,High,Yes,On,,None
Async004,#N/A,Microsoft.ApiDesignGuidelines,AsyncPackage,Don't Store Async Lambdas as Void Returning Delegate Types,#N/A,,,,,,Usage,,,Ported,,,
CA1002,DoNotExposeGenericLists,Microsoft.ApiDesignGuidelines,#N/A,Do not expose generic lists,"System.Collections.Generic.List&lt;(Of &lt;(T&gt;)&gt;) is a generic collection that is designed for performance, not inheritance. Therefore, List does not contain any virtual members. The generic collections that are designed for inheritance should be exposed instead.",Yes,1720656,18601,0.010810412,576.8229873,Design,,Low,Yes,On,,None
Async005,#N/A,Microsoft.ApiDesignGuidelines,AsyncPackage,Propagate CancellationTokens When Possible,#N/A,,,,,,Library,,,Ported,,,
CA1004,GenericMethodsShouldProvideTypeParameter,Microsoft.ApiDesignGuidelines,#N/A,Generic methods should provide type parameter,"Inference is how the type argument of a generic method is determined by the type of argument that is passed to the method, instead of by the explicit specification of the type argument. To enable inference, the parameter signature of a generic method must include a parameter that is of the same type as the type parameter for the method. In this case, the type argument does not have to be specified. When using inference for all type parameters, the syntax for calling generic and non-generic instance methods is identical; this simplifies the usability of generic methods.",Yes,360357,4493,0.012468191,445.6727399,Design,,Low,Yes,On,,None
CA1005,AvoidExcessiveParametersOnGenericTypes,Microsoft.ApiDesignGuidelines,#N/A,Avoid excessive parameters on generic types,"The more type parameters a generic type contains, the more difficult it is to know and remember what each type parameter represents. It is usually obvious with one type parameter, as in List&lt;T&gt;, and in certain cases that have two type parameters, as in Dictionary&lt;TKey, TValue&gt;. However, if more than two type parameters exist, the difficulty becomes too great for most users.",Yes,67481,367,0.005438568,887.9509468,Design,,Low,Yes,On,,
CA1006,DoNotNestGenericTypesInMemberSignatures,Microsoft.ApiDesignGuidelines,#N/A,Do not nest generic types in member signatures,"A nested type argument is a type argument that is also a generic type. To call a member whose signature contains a nested type argument, the user must instantiate one generic type and pass this type to the constructor of a second generic type. The required procedure and syntax are complex and should be avoided.",Yes,668354,10022,0.014995048,388.4620264,Design,,Low,Yes,On,,None
CA1007,UseGenericsWhereAppropriate,Microsoft.ApiDesignGuidelines,#N/A,Use generics where appropriate,"An externally visible method contains a reference parameter of type System.Object. Use of a generic method enables all types, subject to constraints, to be passed to the method without first casting the type to the reference parameter type.",Yes,78406,297,0.003787975,1292.075256,Design,,Low,Yes,On,,
Async006,#N/A,Microsoft.ApiDesignGuidelines,AsyncPackage,Don't Mix Blocking and Async,#N/A,,,,,,Usage,,,Ported,,,
CA1009,DeclareEventHandlersCorrectly,Microsoft.ApiDesignGuidelines,#N/A,Declare event handlers correctly,"Event handler methods take two parameters. The first is of type System.Object and is named """"sender"""". This is the object that raised the event. The second parameter is of type System.EventArgs and is named """"e"""". This is the data that is associated with the event. Event handler methods should not return a value; in the C# programming language, this is indicated by the return type void.",Yes,358275,1202,0.003354965,1655.521563,Design,,High,No,,CA1003 already does this.,None
CA1010,CollectionsShouldImplementGenericInterface,Microsoft.ApiDesignGuidelines,#N/A,Collections should implement generic interface,"To broaden the usability of a collection, implement one of the generic collection interfaces. Then the collection can be used to populate generic collection types.",Yes,218335,1570,0.007190785,742.4952222,Design,,High,Yes,On,,None
CA1011,ConsiderPassingBaseTypesAsParameters,Microsoft.ApiDesignGuidelines,#N/A,Consider passing base types as parameters,"When a base type is specified as a parameter in a method declaration, any type that is derived from the base type can be passed as the corresponding argument to the method. If the additional functionality that is provided by the derived parameter type is not required, use of the base type enables wider use of the method.",Yes,770430,4590,0.005957712,988.0862414,Design,,High,yes,On,,None
CA1001,TypesThatOwnDisposableFieldsShouldBeDisposable,Microsoft.ApiDesignGuidelines,System.Runtime.Analyzers,Types that own disposable fields should be disposable,"A class declares and implements an instance field that is a System.IDisposable type, and the class does not implement IDisposable. A class that declares an IDisposable field indirectly owns an unmanaged resource and should implement the IDisposable interface.",Yes,1133673,2747,0.002423097,2498.65648,Design,,High,Ported,,,Dataflow
CA1013,OverloadOperatorEqualsOnOverloadingAddAndSubtract,Microsoft.ApiDesignGuidelines,#N/A,Overload operator equals on overloading add and subtract,A public or protected type implements the addition or subtraction operators without implementing the equality operator.,Yes,14271,53,0.003713825,1118.645638,Design,,Low,yes,On,,
CA1003,UseGenericEventHandlerInstances,Microsoft.ApiDesignGuidelines,System.Runtime.Analyzers,Use generic event handler instances,"A type contains a delegate that returns void, whose signature contains two parameters (the first an object and the second a type that is assignable to EventArgs), and the containing assembly targets Microsoft .NET Framework?2.0.",Yes,198562,724,0.003646216,1452.984604,Design,,High,Ported,,,
CA1008,EnumsShouldHaveZeroValue,Microsoft.ApiDesignGuidelines,Microsoft.AnalyzerPowerPack,Enums should have zero value,"The default value of an uninitialized enumeration, just as other value types, is zero. A nonflags-attributed enumeration should define a member by using the value of zero so that the default value is a valid value of the enumeration. If an enumeration that has the FlagsAttribute attribute applied defines a zero-valued member, its name should be """"None"""" to indicate that no values have been set in the enumeration.",Yes,569246,1776,0.003119917,1844.696789,Design,,High,Ported,,,
CA1012,AbstractTypesShouldNotHaveConstructors,Microsoft.ApiDesignGuidelines,Microsoft.AnalyzerPowerPack,Abstract types should not have constructors,"Constructors on abstract types can be called only by derived types. Because public constructors create instances of a type, and you cannot create instances of an abstract type, an abstract type that has a public constructor is incorrectly designed.",Yes,379125,425,0.001121002,4976.602085,Design,,High,Ported,,,
CA1014,MarkAssembliesWithClsCompliant,Microsoft.ApiDesignGuidelines,System.Runtime.Analyzers,Mark assemblies with CLSCompliant,"The Common Language Specification (CLS) defines naming restrictions, data types, and rules to which assemblies must conform if they will be used across programming languages. Good design dictates that all assemblies explicitly indicate CLS compliance by using CLSCompliantAttribute . If this attribute is not present on an assembly, the assembly is not compliant.",Yes,2586566,4600,0.00177842,3605.854943,Design,,High,Ported,,,
CA1016,MarkAssembliesWithAssemblyVersion,Microsoft.ApiDesignGuidelines,System.Runtime.Analyzers,Mark assemblies with assembly version,"The .NET Framework uses the version number to uniquely identify an assembly, and to bind to types in strongly named assemblies. The version number is used together with version and publisher policy. By default, applications run only with the assembly version with which they were built.",Yes,320791,821,0.002559299,2151.457391,Design,,High,Ported,,,
CA1020,AvoidNamespacesWithFewTypes,Microsoft.ApiDesignGuidelines,#N/A,Avoid namespaces with few types,"Make sure that each of your namespaces has a logical organization, and that a valid reason exists for putting types in a sparsely populated namespace.",Yes,1946199,15579,0.008004834,785.6736586,Design,,High,No,,assembly factoring makes this noisy,None
CA1021,AvoidOutParameters,Microsoft.ApiDesignGuidelines,#N/A,Avoid out parameters,"Passing types by reference (using out or ref) requires experience with pointers, understanding how value types and reference types differ, and handling methods with multiple return values. Also, the difference between out and ref parameters is not widely understood.",Yes,673184,9276,0.013779294,422.9631753,Design,,Low,Yes,On,,None
CA1023,IndexersShouldNotBeMultidimensional,Microsoft.ApiDesignGuidelines,#N/A,Indexers should not be multidimensional,"Indexers (that is, indexed properties) should use a single index. Multidimensional indexers can significantly reduce the usability of the library.",Yes,33232,70,0.002106403,2146.576642,Design,,Low,Yes,On,,
CA1017,MarkAssembliesWithComVisible,Microsoft.ApiDesignGuidelines,System.Runtime.Analyzers,Mark assemblies with ComVisible,"ComVisibleAttribute determines how COM clients access managed code. Good design dictates that assemblies explicitly indicate COM visibility. COM visibility can be set for the whole assembly and then overridden for individual types and type members. If this attribute is not present, the contents of the assembly are visible to COM clients.",Yes,342998,836,0.002437332,2271.045388,Design,,High,Ported,,,
CA1025,ReplaceRepetitiveArgumentsWithParamsArray,Microsoft.ApiDesignGuidelines,#N/A,Replace repetitive arguments with params array,Use a parameter array instead of repeated arguments when the exact number of arguments is unknown and when the variable arguments are the same type or can be passed as the same type.,Yes,11210,87,0.007760928,521.7940105,Design,,Low,No,,Only catches case when somebody doesn't know about params,
CA1026,DefaultParametersShouldNotBeUsed,Microsoft.ApiDesignGuidelines,#N/A,Default parameters should not be used,"Methods that use default parameters are allowed under the CLS; however, the CLS lets compilers ignore the values that are assigned to these parameters. To maintain the behavior that you want across programming languages, methods that use default parameters should be replaced by method overloads that provide the default parameters.",Yes,451901,2791,0.006176131,915.6287078,Design,,High,No,,"Replace with a ""breaking change"" analyzer",
CA1018,MarkAttributesWithAttributeUsage,Microsoft.ApiDesignGuidelines,System.Runtime.Analyzers,Mark attributes with AttributeUsageAttribute,"When you define a custom attribute, mark it by using AttributeUsageAttribute to indicate where in the source code the custom attribute can be applied. The meaning and intended usage of an attribute will determine its valid locations in code.",Yes,114431,178,0.001555523,3251.989963,Design,,High,Ported,,,
CA1028,EnumStorageShouldBeInt32,Microsoft.ApiDesignGuidelines,#N/A,Enum Storage should be Int32,"An enumeration is a value type that defines a set of related named constants. By default, the System.Int32 data type is used to store the constant value. Although you can change this underlying type, it is not required or recommended for most scenarios.",Yes,140302,1177,0.008389046,613.5457553,Design,,High,Yes,,,None
CA1030,UseEventsWhereAppropriate,Microsoft.ApiDesignGuidelines,#N/A,Use events where appropriate,"This rule detects methods that have names that ordinarily would be used for events. If a method is called in response to a clearly defined state change, the method should be invoked by an event handler. Objects that call the method should raise events instead of calling the method directly.",Yes,191586,926,0.004833339,1092.901669,Design,,High,Yes,,We should check if it has a delegate arg?. FxCop doesn't do that.,WordParser
CA1031,DoNotCatchGeneralExceptionTypes,Microsoft.ApiDesignGuidelines,#N/A,Do not catch general exception types,"General exceptions should not be caught. Catch a more specific exception, or rethrow the general exception as the last statement in the catch block.",Yes,2802219,35947,0.012828048,502.6097536,Design,,Low,Yes,On,Don't fire if it rethrows (FxCop does this). Don't fire if there's an exception filter. Look for overlap with CA2153.,None (similar CA2153 already ported)
CA1032,ImplementStandardExceptionConstructors,Microsoft.ApiDesignGuidelines,#N/A,Implement standard exception constructors,Failure to provide the full set of constructors can make it difficult to correctly handle exceptions.,Yes,469099,2028,0.004323181,1311.826681,Design,,High,Yes,,Only implement checks for the three public ctors. Existing desktop-only rule catches the Iserializable case.,None
CA1019,DefineAccessorsForAttributeArguments,Microsoft.ApiDesignGuidelines,System.Runtime.Analyzers,Define accessors for attribute arguments,"Attributes can define mandatory arguments that must be specified when you apply the attribute to a target. These are also known as positional arguments because they are supplied to attribute constructors as positional parameters. For every mandatory argument, the attribute should also provide a corresponding read-only property so that the value of the argument can be retrieved at execution time. Attributes can also define optional arguments, which are also known as named arguments. These arguments are supplied to attribute constructors by name and should have a corresponding read/write property.",Yes,134071,354,0.002640392,1941.883928,Design,,High,Ported,,,
CA1034,NestedTypesShouldNotBeVisible,Microsoft.ApiDesignGuidelines,#N/A,Nested types should not be visible,"A nested type is a type that is declared in the scope of another type. Nested types are useful to encapsulate private implementation details of the containing type. Used for this purpose, nested types should not be externally visible.",Yes,1211946,9506,0.007843584,775.5999595,Design,,High,Yes,,,None
CA1035,ICollectionImplementationsHaveStronglyTypedMembers,Microsoft.ApiDesignGuidelines,#N/A,ICollection implementations have strongly typed members,This rule requires ICollection implementations to provide strongly typed members so that users are not required to cast arguments to the Object type when they use the functionality that is provided by the interface. This rule assumes that the type that implements ICollection does so to manage a collection of instances of a type that is stronger than Object.,Yes,84344,611,0.007244143,680.005098,Design,,Low,No,,"CA1010 takes care of it because it requires you to implement Icollection<T>, which has CopyTo<T[]>",
CA1024,UsePropertiesWhereAppropriate,Microsoft.ApiDesignGuidelines,Microsoft.AnalyzerPowerPack,Use properties where appropriate,"A public or protected method has a name that starts with """"Get"""", takes no parameters, and returns a value that is not an array. The method might be a good candidate to become a property.",Yes,1626915,11430,0.007025567,884.1087197,Design,,High,Ported,,,
CA1038,EnumeratorsShouldBeStronglyTyped,Microsoft.ApiDesignGuidelines,#N/A,Enumerators should be strongly typed,This rule requires IEnumerator implementations to also provide a strongly typed version of the Current property so that users are not required to cast the return value to the strong type when they use the functionality that is provided by the interface.,Yes,18244,91,0.004987941,854.2843345,Design,,Low,No,,"CA1010 takes care of it because it requires you to implement a generic collection, whose GetEnumerator method will return Ienumerator<T>.",
CA1039,ListsAreStronglyTyped,Microsoft.ApiDesignGuidelines,#N/A,Lists are strongly typed,This rule requires IList implementations to provide strongly typed members so that users are not required to cast arguments to the System.Object type when they use the functionality that is provided by the interface.,Yes,48572,197,0.004055835,1155.467716,Design,,Low,No,,CA1010 covers this as well.,
CA1040,AvoidEmptyInterfaces,Microsoft.ApiDesignGuidelines,#N/A,Avoid empty interfaces,"Interfaces define members that provide a behavior or usage contract. The functionality that is described by the interface can be adopted by any type, regardless of where the type appears in the inheritance hierarchy. A type implements an interface by providing implementations for the members of the interface. An empty interface does not define any members; therefore, it does not define a contract that can be implemented.",Yes,189655,1043,0.00549946,959.724179,Design,,High,Yes,,,None
CA1041,ProvideObsoleteAttributeMessage,Microsoft.ApiDesignGuidelines,#N/A,Provide ObsoleteAttribute message,"A type or member is marked by using a System.ObsoleteAttribute attribute that does not have its ObsoleteAttribute.Message property specified. When a type or member that is marked by using ObsoleteAttribute is compiled, the Message property of the attribute is displayed. This gives the user information about the obsolete type or member.",Yes,51888,74,0.001426149,3306.153959,Design,,High,Yes,,,
CA1043,UseIntegralOrStringArgumentForIndexers,Microsoft.ApiDesignGuidelines,#N/A,Use integral or string argument for indexers,"Indexers (that is, indexed properties) should use integral or string types for the index. These types are typically used for indexing data structures and they increase the usability of the library. Use of the Object type should be restricted to those cases where the specific integral or string type cannot be specified at design time.",Yes,39552,251,0.006346076,724.4111813,Design,,Low,Yes,,,
CA1044,PropertiesShouldNotBeWriteOnly,Microsoft.ApiDesignGuidelines,#N/A,Properties should not be write only,"Although it is acceptable and often necessary to have a read-only property, the design guidelines prohibit the use of write-only properties. This is because letting a user set a value, and then preventing the user from viewing that value, does not provide any security. Also, without read access, the state of shared objects cannot be viewed, which limits their usefulness.",Yes,282895,935,0.003305113,1649.451905,Design,,High,Yes,,,None
CA1045,DoNotPassTypesByReference,Microsoft.ApiDesignGuidelines,#N/A,Do not pass types by reference,"Passing types by reference (using out or ref) requires experience with pointers, understanding how value types and reference types differ, and handling methods that have multiple return values. Library architects who design for a general audience should not expect users to master working with out or ref parameters.",Yes,523037,4636,0.008863618,645.1691193,Design,,Low,Yes,,,
CA1046,DoNotOverloadOperatorEqualsOnReferenceTypes,Microsoft.ApiDesignGuidelines,#N/A,Do not overload operator equals on reference types,"For reference types, the default implementation of the equality operator is almost always correct. By default, two references are equal only if they point to the same object.",Yes,4107,9,0.002191381,1648.971773,Design,,Low,Yes,,,
CA1047,DoNotDeclareProtectedMembersInSealedTypes,Microsoft.ApiDesignGuidelines,#N/A,Do not declare protected members in sealed types,"Types declare protected members so that inheriting types can access or override the member. By definition, sealed types cannot be inherited, which means that protected methods on sealed types cannot be called.",Yes,19563,96,0.004907223,874.5140813,Design,,Low,Yes,,"1. If VB compiler doesn't warn, implement VB analyzer. 2. In any case, implement fixer.",
CA1048,DoNotDeclareVirtualMembersInSealedTypes,Microsoft.ApiDesignGuidelines,#N/A,Do not declare virtual members in sealed types,"Types declare methods as virtual so that inheriting types can override the implementation of the virtual method. By definition, a sealed type cannot be inherited. This makes a virtual method on a sealed type meaningless.",Yes,5014,6,0.001196649,3092.120705,Design,,Low,Yes,,Error in both C# and VB. Implement fixer.,
CA1049,TypesThatOwnNativeResourcesShouldBeDisposable,Microsoft.ApiDesignGuidelines,#N/A,Types that own native resources should be disposable,Types that allocate unmanaged resources should implement IDisposable to enable callers to release those resources on demand and to shorten the lifetimes of the objects that hold the resources.,Yes,32518,146,0.004489821,1004.967415,Design,,Low,Yes,,,
CA1050,DeclareTypesInNamespaces,Microsoft.ApiDesignGuidelines,#N/A,Declare types in namespaces,Types are declared in namespaces to prevent name collisions and as a way to organize related types in an object hierarchy.,Yes,112547,682,0.006059691,833.5960103,Design,,High,Yes,,Fixes wraps type in namespace and puts you in rename session for the namespace name.,None
CA1051,DoNotDeclareVisibleInstanceFields,Microsoft.ApiDesignGuidelines,#N/A,Do not declare visible instance fields,The primary use of a field should be as an implementation detail. Fields should be private or internal and should be exposed by using properties.,Yes,1291311,22729,0.017601492,347.1882335,Design,High,Low,Yes,,,None
CA1027,MarkEnumsWithFlags,Microsoft.ApiDesignGuidelines,System.Runtime.Analyzers,Mark enums with FlagsAttribute,An enumeration is a value type that defines a set of related named constants. Apply FlagsAttribute to an enumeration when its named constants can be meaningfully combined.,Yes,160610,392,0.002440695,2132.905955,Design,,High,Ported,,,
CA1033,InterfaceMethodsShouldBeCallableByChildTypes,Microsoft.ApiDesignGuidelines,Microsoft.AnalyzerPowerPack,Interface methods should be callable by child types,An unsealed externally visible type provides an explicit method implementation of a public interface and does not provide an alternative externally visible method that has the same name.,Yes,485847,3981,0.008193938,693.9886297,Design,,High,Ported,,,
CA1054,UriParametersShouldNotBeStrings,Microsoft.ApiDesignGuidelines,#N/A,Uri parameters should not be strings,"If a method takes a string representation of a URI, a corresponding overload should be provided that takes an instance of the URI class, which provides these services in a safe and secure manner.",Yes,558646,3283,0.005876709,977.9515459,Design,,High,Yes,,,WordParser
CA1055,UriReturnValuesShouldNotBeStrings,Microsoft.ApiDesignGuidelines,#N/A,Uri return values should not be strings,"This rule assumes that the method returns a URI. A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The System.Uri class provides these services in a safe and secure manner.",Yes,270886,1742,0.006430749,844.8139037,Design,,High,Yes,,,WordParser
CA1056,UriPropertiesShouldNotBeStrings,Microsoft.ApiDesignGuidelines,#N/A,Uri properties should not be strings,"This rule assumes that the property represents a Uniform Resource Identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The System.Uri class provides these services in a safe and secure manner.",Yes,676100,4114,0.006084899,958.1114229,Design,,High,Yes,,,WordParser
CA1057,StringUriOverloadsCallSystemUriOverloads,Microsoft.ApiDesignGuidelines,#N/A,String uri overloads call system uri overloads,"Because the overloads differ only by the string/Uri parameter, the string is assumed to represent a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The Uri class provides these services in a safe and secure manner. To reap the benefits of the Uri class, the string overload should call the Uri overload using the string argument.",Yes,24713,131,0.005300854,828.7203597,Design,,Low,Yes,,,
CA1036,OverrideMethodsOnComparableTypes,Microsoft.ApiDesignGuidelines,System.Runtime.Analyzers,Override methods on comparable types,"A public or protected type implements the System.IComparable interface. It does not override Object.Equals nor does it overload the language-specific operator for equality, inequality, less than, or greater than.",Yes,131526,411,0.003124857,1638.158446,Design,,High,Ported,,,
CA1059,MembersShouldNotExposeCertainConcreteTypes,Microsoft.ApiDesignGuidelines,#N/A,Members should not expose certain concrete types,"A concrete type is a type that has a complete implementation and therefore can be instantiated. To enable widespread use of the member, replace the concrete type by using the suggested interface.",Yes,264897,2427,0.009162052,591.9064024,Design,,High,No,,,None
CA1052,StaticHolderTypesShouldBeSealed,Microsoft.ApiDesignGuidelines,Microsoft.AnalyzerPowerPack,Static holder types should be sealed,A public or protected type contains only static members and is not declared by using the sealed (C# Reference) (NotInheritable) modifier. A type that is not meant to be inherited should be marked by using the sealed modifier to prevent its use as a base type.,Yes,161447,235,0.001455586,3577.96092,Design,,High,Ported,,Needs VB fixer.,
CA1061,DoNotHideBaseClassMethods,Microsoft.ApiDesignGuidelines,#N/A,Do not hide base class methods,"A method in a base type is hidden by an identically named method in a derived type, when the parameter signature of the derived method differs only by types that are more weakly derived than the corresponding types in the parameter signature of the base method.",Yes,47204,99,0.00209728,2228.590862,Design,,Low,Yes,,,
CA1062,ValidateArgumentsOfPublicMethods,Microsoft.ApiDesignGuidelines,#N/A,Validate arguments of public methods,All reference arguments that are passed to externally visible methods should be checked against null.,Yes,2267308,29134,0.0128496,494.6076696,Design,,Low,Yes,,,"Dataflow, use IOperation"
CA1063,ImplementIDisposableCorrectly,Microsoft.ApiDesignGuidelines,#N/A,Implement IDisposable Correctly,All IDisposable types should implement the Dispose pattern correctly.,Yes,638117,2035,0.00318907,1820.248439,Design,,High,Yes,,,None
CA1064,ExceptionsShouldBePublic,Microsoft.ApiDesignGuidelines,#N/A,Exceptions should be public,"An internal exception is visible only inside its own internal scope. After the exception falls outside the internal scope, only the base exception can be used to catch the exception. If the internal exception is inherited from T:System.Exception, T:System.SystemException, or T:System.ApplicationException, the external code will not have sufficient information to know what to do with the exception.",Yes,74650,172,0.002304086,2114.951602,Design,High,Low,Yes,,,
CA1065,DoNotRaiseExceptionsInUnexpectedLocations,Microsoft.ApiDesignGuidelines,#N/A,Do not raise exceptions in unexpected locations,A method that is not expected to throw exceptions throws an exception.,Yes,437640,2017,0.004608811,1223.985349,Design,,High,Yes,,,None
CA1300,SpecifyMessageBoxOptions,Desktop,#N/A,Specify MessageBoxOptions,"To correctly display a message box for cultures that use a right-to-left reading order, the RightAlign and RtlReading members of the MessageBoxOptions enumeration must be passed to the Show method.",Yes,283590,2427,0.00855813,637.1358121,Globalization,,Low,Yes,,,None
CA1301,AvoidDuplicateAccelerators,Desktop,#N/A,Avoid duplicate accelerators,"An access key, also known as an accelerator, enables keyboard access to a control by using the ALT key. When multiple controls have duplicate access keys, the behavior of the access key is not well defined.",Yes,2707,16,0.005910602,580.7341068,Globalization,,Low,Yes,,,
CA1302,DoNotHardcodeLocaleSpecificStrings,Desktop,#N/A,Do not hardcode locale specific strings,"The System.Environment.SpecialFolder enumeration contains members that refer to special system folders. The locations of these folders can have different values on different operating systems; the user can change some of the locations; and the locations are localized. The Environment.GetFolderPath method returns the locations that are associated with the Environment.SpecialFolder enumeration, localized and appropriate for the currently running computer.",Yes,13519,71,0.005251868,786.5667551,Globalization,,Low,No,,,
CA1303,DoNotPassLiteralsAsLocalizedParameters,Microsoft.QualityGuidelines,#N/A,Do not pass literals as localized parameters,"An externally visible method passes a string literal as a parameter to a constructor or method in the .NET Framework class library, and that string should be localizable.",Yes,1370581,20484,0.014945487,410.6192633,Globalization,,Low,Yes,,,Dataflow
CA1304,SpecifyCultureInfo,System.Runtime,#N/A,Specify CultureInfo,"A method or constructor calls a member that has an overload that accepts a System.Globalization.CultureInfo parameter, and the method or constructor does not call the overload that takes the CultureInfo parameter. When a CultureInfo or System.IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales.",Yes,1301330,3995,0.003069936,1991.698576,Globalization,,High,Yes,,,None
CA1305,SpecifyIFormatProvider,System.Runtime,#N/A,Specify IFormatProvider,"A method or constructor calls one or more members that have overloads that accept a System.IFormatProvider parameter, and the method or constructor does not call the overload that takes the IFormatProvider parameter. When a System.Globalization.CultureInfo or IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales.",Yes,3114669,26486,0.008503632,763.6044986,Globalization,,High,Yes,,,None
CA1306,SetLocaleForDataTypes,Desktop,#N/A,Set locale for data types,"The locale determines culture-specific presentation elements for data, such as formatting that is used for numeric values, currency symbols, and sort order. When you create a DataTable or DataSet, you should explicitly set the locale.",Yes,486816,1204,0.002473214,2299.584887,Globalization,,Low,Yes,,,Dataflow
CA1307,SpecifyStringComparison,System.Runtime,#N/A,Specify StringComparison,A string comparison operation uses a method overload that does not set a StringComparison parameter.,Yes,1556401,3723,0.002392057,2588.617807,Globalization,,High,Yes,,,None
CA1308,NormalizeStringsToUppercase,System.Runtime,#N/A,Normalize strings to uppercase,Strings should be normalized to uppercase. A small group of characters cannot make a round trip when they are converted to lowercase.,Yes,465112,3117,0.006701612,845.7006816,Naming,,High,Yes,,"High noise, because it's perfectly valid to call ToLower; it's not always used for comparison.",None
CA1053,StaticHolderTypesShouldNotHaveConstructors,Microsoft.ApiDesignGuidelines,#N/A,Static holder types should not have constructors,A public or nested public type declares only static members and has a public or protected default constructor. The constructor is unnecessary because calling static members does not require an instance of the type. The string overload should call the uniform resource identifier (URI) overload by using the string argument for safety and security.,Yes,1300683,3250,0.002498687,2446.953502,Design,,High,Ported,,,
CA1400,PInvokeEntryPointsShouldExist,System.Runtime.InteropServices,#N/A,PInvoke entry points should exist,"No compile-time check is available to make sure that methods that are marked with DllImportAttribute are located in the referenced unmanaged DLL. If no function that has the specified name is in the library, or the arguments to the method do not match the function arguments, the common language runtime throws an exception.",Yes,19083,257,0.013467484,317.8505059,Interoperability,,Low,No,,Belongs in BinSkim? Easier to do in binary analysis.,
CA1058,TypesShouldNotExtendCertainBaseTypes,Desktop,#N/A,Types should not extend certain base types,An externally visible type extends certain base types. Use one of the alternatives.,Yes,134607,292,0.002169278,2364.412358,Design,Low,High,Yes,,,None
CA1402,AvoidOverloadsInComVisibleInterfaces,System.Runtime.InteropServices,#N/A,Avoid overloads in ComVisible interfaces,"When overloaded methods are exposed to COM clients, only the first method overload retains its name. Subsequent overloads are uniquely renamed by appending to the name an underscore character '_' and an integer that corresponds to the order of declaration of the overload.",Yes,36284,88,0.002425311,1880.053464,Interoperability,,Low,Yes,,,
CA1403,AutoLayoutTypesShouldNotBeComVisible,System.Runtime.InteropServices,#N/A,Auto layout types should not be ComVisible,"Auto layout types are managed by the common language runtime. The layout of these types can change between versions of the .NET Framework, which will break COM clients that expect a specific layout. Note that if the StructLayoutAttribute attribute is not specified, the C#, Visual Basic, and C++ compilers specify the Sequential layout for value types.",Yes,46,0,0,,Interoperability,,Low,Yes,,,
CA1404,CallGetLastErrorImmediatelyAfterPInvoke,System.Runtime.InteropServices,#N/A,Call GetLastError immediately after PInvoke,"A platform invoke method accesses unmanaged code and is defined by using the Declare keyword in Visual Basic or the System.Runtime.InteropServices.DllImportAttribute attribute. Generally, upon failure, unmanaged functions call the Win32 SetLastError function to set an error code that is associated with the failure. The caller of the failed function calls the Win32 GetLastError function to retrieve the error code and determine the cause of the failure. The error code is maintained on a per-thread basis and is overwritten by the next call to SetLastError. After a call to a failed platform invoke method, managed code can retrieve the error code by calling the GetLastWin32Error method. Because the error code can be overwritten by internal calls from other managed class library methods, the GetLastError or GetLastWin32Error method should be called immediately after the platform invoke method call.",Yes,32639,62,0.001899568,2376.19124,Interoperability,,Low,Yes,,,Control flow
CA1405,ComVisibleTypeBaseTypesShouldBeComVisible,System.Runtime.InteropServices,#N/A,COM visible type base types should be ComVisible,"When a COM visible type adds members in a new version, it must abide by strict guidelines to avoid breaking COM clients that bind to the current version. A type that is invisible to COM presumes it does not need to adhere to these COM versioning rules when it adds new members. However, if a COM visible type derives from the COM invisible type and exposes a class interface of ClassInterfaceType.AutoDual or AutoDispatch (the default), all public members of the base type (unless they are specifically marked as COM invisible, which would be redundant) are exposed to COM. If the base type adds new members in a subsequent version, any COM clients that bind to the class interface of the derived type might break. COM visible types should derive only from COM visible types to reduce the possibility of breaking COM clients.",Yes,246688,4954,0.020082047,268.5058966,Interoperability,,Low,Yes,,,None
CA1406,AvoidInt64ArgumentsForVB6Clients,System.Runtime.InteropServices,#N/A,Avoid Int64 arguments for VB6 clients,Visual Basic 6 COM clients cannot access 64-bit integers.,Yes,2271,15,0.00660502,508.1312741,Interoperability,,Low,No,,,
CA1407,AvoidStaticMembersInComVisibleTypes,System.Runtime.InteropServices,#N/A,Avoid static members in ComVisible types,COM does not support static methods.,Yes,2603,38,0.01459854,233.9599805,Interoperability,,Low,Yes,,,
CA1408,DoNotUseAutoDualClassInterfaceType,System.Runtime.InteropServices,#N/A,Do not use AutoDual ClassInterfaceType,"Types that use a dual interface enable clients to bind to a specific interface layout. Any changes in a future version to the layout of the type or any base types will break COM clients that bind to the interface. By default, if the ClassInterfaceAttribute attribute is not specified, a dispatch-only interface is used.",Yes,4648,12,0.002581756,1420.45441,Interoperability,,Low,Yes,,,
CA1409,ComVisibleTypesShouldBeCreatable,System.Runtime.InteropServices,#N/A,COM visible types should be creatable,A reference type that is specifically marked as visible to COM contains a public parameterized constructor but does not contain a public default (parameterless) constructor. A type without a public default constructor is not creatable by COM clients.,Yes,9738,198,0.020332717,196.1601951,Interoperability,,Low,Yes,,,
CA1410,ComRegistrationMethodsShouldBeMatched,System.Runtime.InteropServices,#N/A,COM registration methods should be matched,"A type declares a method that is marked by using the System.Runtime.InteropServices.ComRegisterFunctionAttribute attribute but does not declare a method marked by using the System.Runtime.InteropServices.ComUnregisterFunctionAttribute attribute, or vice versa.",Yes,129,0,0,,Interoperability,,Low,Yes,,,
CA1411,ComRegistrationMethodsShouldNotBeVisible,System.Runtime.InteropServices,#N/A,COM registration methods should not be visible,A method marked by using the System.Runtime.InteropServices.ComRegisterFunctionAttribute attribute or the System.Runtime.InteropServices.ComUnregisterFunctionAttribute attribute is externally visible.,Yes,1758,16,0.009101251,356.5464484,Interoperability,,Low,Yes,,,
CA1412,MarkComSourceInterfacesAsIDispatch,System.Runtime.InteropServices,#N/A,Mark ComSource interfaces as IDispatch,"A type is marked by using the System.Runtime.InteropServices.ComSourceInterfacesAttribute attribute, and at least one of the specified interfaces is not marked by using the System.Runtime.InteropServices.InterfaceTypeAttribute attribute set to ComInterfaceType.InterfaceIsIDispatch.",Yes,558,1,0.001792115,1532.621883,Interoperability,,Low,Yes,,,
CA1413,AvoidNonpublicFieldsInComVisibleValueTypes,System.Runtime.InteropServices,#N/A,Avoid non-public fields in ComVisible value types,"Non-public instance fields of COM visible value types are visible to COM clients. Review the content of the field for information that should not be exposed, or will have unintended design or security impact. By default, all public value types are visible to COM. However, to reduce false positives, this rule requires the COM visibility of the type to be explicitly stated; the containing assembly must be marked with the System.Runtime.InteropServices.ComVisibleAttribute set to false and the type must be marked with the ComVisibleAttribute set to true.",Yes,563,10,0.017761989,154.8536226,Interoperability,,Low,Yes,,,
CA1414,MarkBooleanPInvokeArgumentsWithMarshalAs,System.Runtime.InteropServices,#N/A,Mark boolean PInvoke arguments with MarshalAs,The Boolean data type has multiple representations in unmanaged code.,Yes,171199,883,0.00515774,1014.688761,Interoperability,Low,High,Yes,,,None
CA1415,DeclarePInvokesCorrectly,System.Runtime.InteropServices,#N/A,Declare PInvokes correctly,"A platform invoke method accesses unmanaged code and is defined by using the Declare keyword in Visual Basic or the System.Runtime.InteropServices.DllImportAttribute. Currently, this rule looks for platform invoke method declarations that target Win32 functions that have a pointer to an OVERLAPPED structure parameter and the corresponding managed parameter is not a pointer to a System.Threading.NativeOverlapped structure.",Yes,7117,17,0.002388647,1612.752794,Interoperability,,Low,Yes,,,
CA1500,VariableNamesShouldNotMatchFieldNames,Microsoft.Maintainability,#N/A,Variable names should not match field names,"An instance method declares a parameter or a local variable whose name matches an instance field of the declaring type, leading to errors.",Yes,926277,4086,0.004411207,1352.63212,Maintainability,Low,High,Yes,,,None
CA1501,AvoidExcessiveInheritance,Microsoft.Maintainability,#N/A,Avoid excessive inheritance,"A type is more than four levels deep in its inheritance hierarchy. Deeply nested type hierarchies can be difficult to follow, understand, and maintain.",Yes,20270,926,0.045683276,94.27637741,Maintainability,,Low,Yes,,,
CA1502,AvoidExcessiveComplexity,Microsoft.Maintainability,#N/A,Avoid excessive complexity,"This rule measures the number of linearly independent paths through the method, which is determined by the number and complexity of conditional branches.",Yes,1681578,7375,0.004385761,1419.529325,Maintainability,,High,No,,"VS is the better place to experience this. You don't want to add one more ""if"" to a method, ""fall off the cliff"", and have your RI blocked.",MetricsPackage
CA1504,ReviewMisleadingFieldNames,Microsoft.Maintainability,#N/A,Review misleading field names,"The name of an instance field starts with """"s_"""", or the name of a static (Shared in Visual?Basic) field starts with """"m_"""".",Yes,175139,817,0.004664866,1124.015706,Maintainability,Low,High,No,,"This is a StyleCop rule, not an FxFop rule",None
CA1505,AvoidUnmaintainableCode,Microsoft.Maintainability,#N/A,Avoid unmaintainable code,A type or method has a low maintainability index value. A low maintainability index indicates that a type or method is probably difficult to maintain and would be a good candidate for redesign.,Yes,433586,1040,0.002398601,2350.150875,Maintainability,,High,No,,"VS is the better place to experience this. You don't want to add one more operand to an expression, ""fall off the cliff"", and have your RI blocked.",MetricsPackage
CA1506,AvoidExcessiveClassCoupling,Microsoft.Maintainability,#N/A,Avoid excessive class coupling,This rule measures class coupling by counting the number of unique type references that a type or method contains.,Yes,880097,3730,0.004238169,1402.617559,Maintainability,,High,No,,"VS is the better place to experience this. You don't want to add one more class-valued field to a class, ""fall off the cliff"", and have your RI blocked.",MetricsPackage
CA1600,DoNotUseIdleProcessPriority,System.Diagnostics,#N/A,Do not use idle process priority,"Do not set process priority to Idle. Processes that have System.Diagnostics.ProcessPriorityClass.Idle will occupy the CPU when it would otherwise be idle, and will therefore block standby.",Yes,310,1,0.003225806,772.3221251,Mobility,,Low,Yes,,,
CA1601,DoNotUseTimersThatPreventPowerStateChanges,System.Runtime,#N/A,Do not use timers that prevent power state changes,Higher-frequency periodic activity will keep the CPU busy and interfere with power-saving idle timers that turn off the display and hard disks.,Yes,61232,189,0.003086621,1550.879704,Mobility,,Low,Yes,,,
CA1700,DoNotNameEnumValuesReserved,Microsoft.ApiDesignGuidelines,#N/A,Do not name enum values 'Reserved',"This rule assumes that an enumeration member that has a name that contains """"reserved"""" is not currently used but is a placeholder to be renamed or removed in a future version. Renaming or removing a member is a breaking change.",Yes,17591,143,0.008129157,522.2301097,Naming,,Low,Yes,,,
CA1701,ResourceStringCompoundWordsShouldBeCasedCorrectly,Microsoft.ApiDesignGuidelines,#N/A,Resource string compound words should be cased correctly,"Each word in the resource string is split into tokens based on the casing. Each contiguous two-token combination is checked by the Microsoft spelling checker library. If recognized, the word produces a violation of the rule.",Yes,2530287,18776,0.007420502,862.9024959,Naming,,High,No,,Belongs in BinSkim. The resx is not part of the compilation.,NamingService
CA1702,CompoundWordsShouldBeCasedCorrectly,Microsoft.ApiDesignGuidelines,#N/A,Compound words should be cased correctly,Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.,Yes,,,,,,,#N/A,No,,Deprecated rule (replaced by 1709),
CA1703,ResourceStringsShouldBeSpelledCorrectly,Text,#N/A,Resource strings should be spelled correctly,A resource string contains one or more words that are not recognized by the Microsoft spelling checker library.,Yes,247983,8213,0.033119206,162.8789636,Naming,,Low,No,,Belongs in BinSkim. The resx is not part of the compilation.,WordParser
CA1704,IdentifiersShouldBeSpelledCorrectly,Text,#N/A,Identifiers should be spelled correctly,The name of an externally visible identifier contains one or more words that are not recognized by the Microsoft spelling checker library.,Yes,4050045,134475,0.033203335,198.9998864,Naming,High,Low,Yes,,See if StyleCop has implemented it,NamingService
CA1705,LongAcronymnsShouldBePascalBased,Microsoft.ApiDesignGuidelines,#N/A,Long acronyms should be pascal-cased,"This rule assumes it has found an acronym when the name contains four uppercase letters in a row, or at the end of the name, three uppercase letters in a row. By convention, two-letter acronyms use all uppercase letters, and acronyms of three or more characters use Pascal casing. The following examples conform to this naming convention: 'DB', 'CR', 'Cpa', and 'Ecma'. The following examples violate the convention: 'Io', 'XML', and 'DoD', and for non-parameter names, 'xp' and 'cpl'. Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve required for new software libraries, and increases customer confidence that the library was developed by someone with expertise in developing managed code.",,2574,90,0.034965035,97.54340432,Naming,,Low,No,,Deprecated rule (replaced by 1709),
CA1706,ShortAcronymsShouldBeUpperCase,Microsoft.ApiDesignGuidelines,#N/A,Short acronyms should be uppercase,"This rule splits the name into words based on the casing and checks any two-letter words against a list of common two-letter words, such as ""In"" or ""My"". If a match is not found, the word is assumed to be an acronym. For parameters, the first word is ignored due to the camel casing convention used for parameter names. By convention, two-letter acronyms use all uppercase letters, and acronyms of three or more characters use Pascal casing. The following examples conform to this naming convention: 'DB', 'CR', 'Cpa', and 'Ecma'. The following examples violate the convention: 'Io', 'XML', and 'DoD', and for non-parameter names, 'xp' and 'cpl'. 'ID' is special-cased to cause a violation of this rule. 'Id' is not an acronym but is an abbreviation for 'identification'. Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve required for new software libraries, and increases customer confidence that the library was developed by someone with expertise in developing managed code.",,470,2,0.004255319,627.9429966,Naming,,Low,No,,Deprecated rule (replaced by 1709),
CA1707,IdentifiersShouldNotContainUnderscores,Microsoft.ApiDesignGuidelines,#N/A,Identifiers should not contain underscores,"By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces, types, members, and parameters.",Yes,1216136,42995,0.035353776,172.1168937,Naming,High,Low,Yes,,See if StyleCop has implemented it,None
CA1060,MovePInvokesToNativeMethodsClass,Microsoft.ApiDesignGuidelines,System.Runtime.InteropServices.Analyzers,Move pinvokes to native methods class,"Platform Invocation methods, such as those that are marked by using the System.Runtime.InteropServices.DllImportAttribute attribute, or methods that are defined by using the Declare keyword in Visual Basic, access unmanaged code. These methods should be of the NativeMethods, SafeNativeMethods, or UnsafeNativeMethods class.",Yes,377447,2739,0.007256648,768.5168157,Design,,High,Ported,,,
CA1709,IdentifiersShouldBeCasedCorrectly,Microsoft.ApiDesignGuidelines,#N/A,Identifiers should be cased correctly,"By convention, parameter names use camel casing and namespace, type, and member names use Pascal casing.",Yes,3261791,137633,0.04219553,154.3636525,Naming,,Low,Yes,,See if StyleCop has implemented it,NamingService
CA1710,IdentifiersShouldHaveCorrectSuffix,Microsoft.ApiDesignGuidelines,#N/A,Identifiers should have correct suffix,"By convention, the names of types that extend certain base types or that implement certain interfaces, or types that are derived from these types, have a suffix that is associated with the base type or interface.",Yes,597568,3205,0.005363406,1076.999758,Naming,,High,Yes,,See if StyleCop has implemented it,None
CA1711,IdentifiersShouldNotHaveIncorrectSuffix,Microsoft.ApiDesignGuidelines,#N/A,Identifiers should not have incorrect suffix,"By convention, only the names of types that extend certain base types or that implement certain interfaces, or types that are derived from these types, should end with specific reserved suffixes. Other type names should not use these reserved suffixes.",Yes,684645,2065,0.003016162,1934.732318,Naming,,High,Yes,,See if StyleCop has implemented it,None
CA1712,DoNotPrefixEnumValuesWithTypeName,Microsoft.ApiDesignGuidelines,#N/A,Do not prefix enum values with type name,Names of enumeration members are not prefixed by using the type name because development tools are expected to provide type information.,Yes,15010,57,0.003797468,1099.780249,Naming,,Low,Yes,,See if StyleCop has implemented it,
CA1713,EventsShouldNotHaveBeforeOrAfterPrefix,Microsoft.ApiDesignGuidelines,#N/A,Events should not have before or after prefix,"The name of an event starts with """"Before"""" or """"After"""". To name related events that are raised in a specific sequence, use the present or past tense to indicate the relative position in the sequence of actions.",Yes,42823,58,0.001354412,3419.694965,Naming,,Low,Yes,,See if StyleCop has implemented it,
CA1714,FlagsEnumsShouldHavePluralNames,Microsoft.ApiDesignGuidelines,#N/A,Flags enums should have plural names,"A public enumeration has the System.FlagsAttribute attribute, and its name does not end in """"s"""". Types that are marked by using FlagsAttribute have names that are plural because the attribute indicates that more than one value can be specified.",Yes,149797,409,0.002730362,1895.537507,Naming,,High,Yes,,See if StyleCop has implemented it,None
CA1708,IdentifiersShouldDifferByMoreThanCase,Microsoft.ApiDesignGuidelines,Microsoft.AnalyzerPowerPack,Identifiers should differ by more than case,"Identifiers for namespaces, types, members, and parameters cannot differ only by case because languages that target the common language runtime are not required to be case-sensitive.",Yes,240275,455,0.001893664,2841.428034,Naming,,High,Ported,,,
CA1716,IdentifiersShouldNotMatchKeywords,Microsoft.ApiDesignGuidelines,#N/A,Identifiers should not match keywords,A namespace name or a type name matches a reserved keyword in a programming language. Identifiers for namespaces and types should not match keywords that are defined by languages that target the common language runtime.,Yes,563948,2635,0.004672417,1230.891752,Naming,,High,Yes,,See if StyleCop has implemented it,Valid rule?
CA1717,OnlyFlagsEnumsShouldHavePluralNames,Microsoft.ApiDesignGuidelines,#N/A,Only FlagsAttribute enums should have plural names,Naming conventions dictate that a plural name for an enumeration indicates that more than one value of the enumeration can be specified at the same time.,Yes,389307,875,0.002247584,2487.245589,Naming,,High,Yes,,See if StyleCop has implemented it,None
CA1718,#N/A,Microsoft.ApiDesignGuidelines,#N/A,Avoid language specific type names in parameters,"Each concatenated word in the parameter name is checked against language-specific type names, in a case-insensitive manner",,4,0,0,,Naming,,Low,Yes,,See if StyleCop has implemented it,
CA1719,ParameterNamesShouldNotMatchMemberNames,Microsoft.ApiDesignGuidelines,#N/A,Parameter names should not match member names,A parameter name should communicate the meaning of a parameter and a member name should communicate the meaning of a member. It would be a rare design where these were the same. Naming a parameter the same as its member name is unintuitive and makes the library difficult to use.,Yes,96386,394,0.004087731,1219.261851,Naming,,Low,Yes,,See if StyleCop has implemented it,None
CA1715,IdentifiersShouldHaveCorrectPrefix,Microsoft.ApiDesignGuidelines,Microsoft.AnalyzerPowerPack,Identifiers should have correct prefix,"The name of an externally visible interface does not start with an uppercase """"I"""". The name of a generic type parameter on an externally visible type or method does not start with an uppercase """"T"""".",Yes,163866,1290,0.007872286,662.3856049,Naming,,High,Ported,,,
CA1721,PropertyNamesShouldNotMatchGetMethods,Microsoft.ApiDesignGuidelines,#N/A,Property names should not match get methods,"The name of a public or protected member starts with """"Get"""" and otherwise matches the name of a public or protected property. """"Get"""" methods and properties should have names that clearly distinguish their function.",Yes,622332,1854,0.002979117,1944.878847,Naming,,High,Yes,,See if StyleCop has implemented it,None
CA1722,IdentifiersShouldNotHaveIncorrectPrefix,Microsoft.ApiDesignGuidelines,#N/A,Identifiers should not have incorrect prefix,"By convention, only certain programming elements have names that begin with a specific prefix.",Yes,28805,234,0.00812359,548.952873,Naming,,Low,Yes,,See if StyleCop has implemented it,
CA1724,TypeNamesShouldNotMatchNamespaces,Microsoft.ApiDesignGuidelines,#N/A,Type names should not match namespaces,Type names should not match the names of namespaces that are defined in the .NET Framework class library. Violating this rule can reduce the usability of the library.,Yes,633745,1999,0.003154266,1839.38686,Naming,,High,Yes,,See if StyleCop has implemented it,Hardcoded table
CA1725,ParameterNamesShouldMatchBaseDeclaration,Microsoft.ApiDesignGuidelines,#N/A,Parameter names should match base declaration,Consistent naming of parameters in an override hierarchy increases the usability of the method overrides. A parameter name in a derived method that differs from the name in the base declaration can cause confusion about whether the method is an override of the base method or a new overload of the method.,Yes,829781,4723,0.005691863,1039.899098,Naming,,High,Yes,,See if StyleCop has implemented it,None
CA1726,UsePreferredTerms,Microsoft.ApiDesignGuidelines,#N/A,Use preferred terms,"The name of an externally visible identifier includes a term for which an alternative, preferred term exists. Alternatively, the name includes the term """"Flag"""" or """"Flags"""".",Yes,1027505,7215,0.007021864,856.1521914,Naming,,High,Yes,,See if StyleCop has implemented it,NamingService
CA1800,DoNotCastUnnecessarily,System.Runtime,#N/A,Do not cast unnecessarily,"Duplicate casts decrease performance, especially when the casts are performed in compact iteration statements.",Yes,1161244,5060,0.004357396,1391.868776,Performance,,High,No,,,RemoveUnnecessaryCast IDE CodeFix
CA1801,ReviewUnusedParameters,Microsoft.Maintainability,#N/A,Review unused parameters,A method signature includes a parameter that is not used in the method body.,Yes,2443403,26581,0.01087868,587.20313,Performance,High,Low,Yes,,Don't fire if the parameter comes from an interface you're implementing or a virtual method you're overriding.,"None, can be based on: https://github.com/dotnet/roslyn/blob/main/src/Samples/CSharp/Analyzers/CSharpAnalyzers/CSharpAnalyzers/StatefulAnalyzers/CodeBlockStartedAnalyzer.cs"
CA1802,UseLiteralsWhereAppropriate,Microsoft.QualityGuidelines,#N/A,Use literals where appropriate,"A field is declared static and read-only (Shared and ReadOnly in Visual Basic), and is initialized by using a value that is computable at compile time. Because the value that is assigned to the targeted field is computable at compile time, change the declaration to a const (Const in Visual Basic) field so that the value is computed at compile time instead of at run?time.",Yes,156024,573,0.003672512,1414.070674,Performance,,High,Yes,,Does it fire on publics? That has versioning implications. Consider only firing on symbols not visible outside assembly.,None
CA1804,RemoveUnusedLocals,Microsoft.Maintainability,#N/A,Remove unused locals,Unused local variables and unnecessary assignments increase the size of an assembly and decrease performance.,Yes,2660659,16292,0.006123295,1049.269911,Performance,,High,Yes,,"See if the compiler warns of this. At the least, it should have a fixer.",None
CA1805,DoNotInitializeUnnecessarily,Microsoft.QualityGuidelines,#N/A,Do not initialize unnecessarily,"The common language runtime initializes all fields to their default values before running the constructor. In most cases, initializing a field to its default value in a constructor is redundant, which degrades performance and adds to maintenance costs. One case where it is not redundant occurs when the constructor calls another constructor of the same class or a base class constructor and that constructor initializes the field to a non-default value. In this case, changing the value of the field back to its default value can be appropriate.",,900111,3408,0.0037862,1572.631276,Performance,,High,No,,"The JITter now takes care of removing the redundant initializations for reference types, primitive value types, and some but not all user-defined value types, so we feel this rule is of low value.",
CA1806,DoNotIgnoreMethodResults,Microsoft.Maintainability,#N/A,Do not ignore method results,A new object is created but never used; or a method that creates and returns a new string is called and the new string is never used; or a COM or P/Invoke method returns an HRESULT or error code that is never used.,Yes,845078,3707,0.004386577,1351.143806,Performance,,High,Yes,,"Consider having a whitelist, like immutable types (including string), and also look for the Pure attribute",None
CA1809,AvoidExcessiveLocals,Microsoft.Maintainability,#N/A,Avoid excessive locals,"A common performance optimization is to store a value in a processor register instead of memory, which is referred to as """"enregistering the value"""". To increase the chance that all local variables are enregistered, limit the number of local variables to?64.",Yes,136521,362,0.002651607,1936.636922,Performance,,High,No,,"This was created at a time when after a certain number of locals, the JITTer would stop trying to allocate them to registers. This is hard to do in source analysis because it's hard to know how many locals the compiler allocates.",None
CA1720,IdentifiersShouldNotContainTypeNames,Microsoft.ApiDesignGuidelines,#N/A,Avoid type names in parameters,"The name of a parameter in an externally visible member contains a data type name, or the name of an externally visible member contains a language-specific data type name.",Yes,904982,5153,0.005694036,1046.11914,Naming,,High,Ported,,,None
CA1811,AvoidUncalledPrivateCode,Microsoft.Maintainability,#N/A,Avoid uncalled private code,A private or internal (assembly-level) member does not have callers in the assembly; it is not invoked by the common language runtime; and it is not invoked by a delegate.,Yes,2515500,32368,0.012867422,497.4286481,Performance,,Low,Yes,,Implementation: Create a dictionary at compilation start; add to it each time you see a function call.,IOperation
CA1812,AvoidUninstantiatedInternalClasses,Microsoft.Maintainability,#N/A,Avoid uninstantiated internal classes,An instance of an assembly-level type is not created by code in the assembly.,Yes,830636,3549,0.00427263,1385.42566,Performance,,High,Yes,,"Do we need additional APIs to make this efficient, for example, a RegisterSymbolReferenceAction API?",FxCopSDKUtilities
CA2217,DoNotMarkEnumsWithFlags,Microsoft.ApiDesignGuidelines,System.Runtime.Analyzers,Do not mark enums with FlagsAttribute,"An externally visible enumeration is marked by using FlagsAttribute, and it has one or more values that are not powers of two or a combination of the other defined values on the enumeration.",Yes,33479,117,0.003494728,1294.742374,Usage,,High,Ported,,,None
CA1814,PreferJaggedArraysOverMultidimensional,Microsoft.QualityGuidelines,#N/A,Prefer jagged arrays over multidimensional,"A jagged array is an array whose elements are arrays. The arrays that make up the elements can be of different sizes, leading to less wasted space for some sets of data.",Yes,163220,1424,0.008724421,597.492184,Performance,,High,Yes,,,None
CA1815,OverrideEqualsAndOperatorEqualsOnValueTypes,Microsoft.ApiDesignGuidelines,#N/A,Override equals and operator equals on value types,"For value types, the inherited implementation of Equals uses the Reflection library and compares the contents of all fields. Reflection is computationally expensive, and comparing every field for equality might be unnecessary. If you expect users to compare or sort instances, or to use instances as hash table keys, your value type should implement Equals.",Yes,399294,1633,0.004089718,1369.603552,Performance,,High,Yes,,,None
CA1816,CallGCSuppressFinalizeCorrectly,System.Runtime,#N/A,Dispose methods should call SuppressFinalize,A method that is an implementation of Dispose does not call GC.SuppressFinalize; or a method that is not an implementation of Dispose calls GC.SuppressFinalize; or a method calls GC.SuppressFinalize and passes something other than this (Me in Visual?Basic).,Yes,443318,1136,0.002562495,2203.600847,Performance,,High,Yes,,,None
CA1819,PropertiesShouldNotReturnArrays,Microsoft.ApiDesignGuidelines,#N/A,Properties should not return arrays,"Arrays that are returned by properties are not write-protected, even when the property is read-only. To keep the array tamper-proof, the property must return a copy of the array. Typically, users will not understand the adverse performance implications of calling such a property.",Yes,866343,7145,0.008247311,719.9546614,Performance,,High,Yes,,,None
CA2227,CollectionPropertiesShouldBeReadOnly,Microsoft.ApiDesignGuidelines,#N/A,Collection properties should be read only,A writable collection property allows a user to replace the collection with a different collection. A read-only property stops the collection from being replaced but still allows the individual members to be set.,Yes,1479039,18904,0.012781272,482.7359551,Usage,,High,Ported,,,None
CA1821,RemoveEmptyFinalizers,Microsoft.QualityGuidelines,Microsoft.AnalyzerPowerPack,Remove empty finalizers,"Whenever you can, avoid finalizers because of the additional performance overhead that is involved in tracking object lifetime. An empty finalizer incurs added overhead and delivers no benefit.",Yes,39675,3102,0.078185255,58.81565423,Performance,,Low,Yes,,Sri thinks we've already implemented this.,
CA1822,MarkMembersAsStatic,Microsoft.QualityGuidelines,#N/A,Mark members as static,"Members that do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After you mark the methods as static, the compiler will emit nonvirtual call sites to these members. This can give you a measurable performance gain for performance-sensitive code.",Yes,3382541,37372,0.011048499,590.9620138,Performance,High,Low,Yes,,"Doesn't depend on IOperation, but would be language-agnostic if it did use IOperation.",IOperation
CA1823,AvoidUnusedPrivateFields,Microsoft.Maintainability,#N/A,Avoid unused private fields,Private fields were detected that do not appear to be accessed in the assembly.,Yes,2037563,18054,0.008860585,712.0422748,Performance,,High,Yes,,,None
CA1824,MarkAssembliesWithNeutralResourcesLanguage,System.Resources,#N/A,Mark assemblies with NeutralResourcesLanguageAttribute,The NeutralResourcesLanguage attribute informs the ResourceManager of the language that was used to display the resources of a neutral culture for an assembly. This improves lookup performance for the first resource that you load and can reduce your working set.,Yes,807994,798,0.000987631,5981.39139,Performance,,High,Yes,,,None
CA1900,ValueTypeFieldsShouldBePortable,Microsoft.QualityGuidelines,#N/A,Value type fields should be portable,This rule checks that structures that are declared by using explicit layout will align correctly when marshaled to unmanaged code on 64-bit operating systems.,Yes,21717,139,0.006400516,677.5703737,Portability,,Low,Yes,,,
RS0008,#N/A,Microsoft.ApiDesignGuidelines,Roslyn.Diagnostics.Analyzers,Implement IEquatable when overriding Object.Equals,#N/A,,,,,,Performance,,,Ported,,,
CA1903,UseOnlyApiFromTargetedFramework,System.Runtime,#N/A,Use only api from targeted framework,A member or type is using a member or type that was introduced in a service pack that was not included together with the targeted framework of the project.,Yes,114762,732,0.006378418,793.2685116,Portability,,High,No,,This was invented before we learned to ship new reference assemblies with each service pack.,FrameworkCompatibilityService
CA2000,DisposeObjectsBeforeLosingScope,Microsoft.QualityGuidelines,#N/A,Dispose Objects Before Losing Scope,"Because an exceptional event might occur that will prevent the finalizer of an object from running, the object should be explicitly disposed before all references to it are out of scope.",Yes,2950496,21737,0.007367236,878.1984362,Reliability,,High,Yes,,,Dataflow
CA2001,AvoidCallingProblematicMethods,ApiReview,#N/A,Avoid calling problematic methods,A member calls a potentially dangerous or problematic method.,Yes,279199,1198,0.004290846,1269.193408,Reliability,,Low,Yes,,,None
RS0011,#N/A,Microsoft.ApiDesignGuidelines,Roslyn.Diagnostics.Analyzers,CancellationToken parameters must come last,#N/A,,,,,,ApiDesign,,,Ported,,,
CA2003,DoNotTreatFibersAsThreads,System.Runtime.InteropServices,#N/A,Do not treat fibers as threads,A managed thread is being treated as a Win32 thread.,Yes,34,0,0,,Reliability,,Low,No,,,
CA2004,RemoveCallsToGCKeepAlive,System.Runtime.InteropServices,#N/A,Remove calls to GC.KeepAlive,"If you convert to SafeHandle usage, remove all calls to GC.KeepAlive (object). In this case, classes should not have to call GC.KeepAlive. This assumes they do not have a finalizer but rely on SafeHandle to finalize the OS handle for them.",Yes,16938,72,0.004250797,994.8398157,Reliability,,Low,Yes,,,
CA2006,UseSafeHandleToEncapsulateNativeResources,System.Runtime.InteropServices,#N/A,Use SafeHandle to encapsulate native resources,"Use of IntPtr in managed code might indicate a potential security and reliability problem. All uses of IntPtr must be reviewed to determine whether use of a SafeHandle, or similar technology, is required in its place.",Yes,63814,334,0.005233961,918.0266694,Reliability,,Low,Yes,,,
CA2100,ReviewSqlQueriesForSecurityVulnerabilities,Desktop,#N/A,Review SQL queries for security vulnerabilities,A method sets the System.Data.IDbCommand.CommandText property by using a string that is built from a string argument to the method. This rule assumes that the string argument contains user input. A SQL command string that is built from user input is vulnerable to SQL injection attacks.,Yes,418391,3364,0.008040326,699.1734406,Security,,Low,No,,,Dataflow
RS0022,#N/A,Microsoft.ApiDesignGuidelines,Roslyn.Diagnostics.Analyzers,Constructor make noninheritable base class inheritable,"When a base class is noninheritable because its constructor is internal, a derived class should not make it inheritable by having a public or protected constructor.",,,,,,ApiDesign,,,Ported,,,
CA2102,CatchNonClsCompliantExceptionsInGeneralHandlers,System.Runtime,#N/A,Catch non-CLSCompliant exceptions in general handlers,A member in an assembly that is not marked by using the RuntimeCompatibilityAttribute or is marked RuntimeCompatibility(WrapNonExceptionThrows = false) contains a catch block that handles System.Exception and does not contain an immediately following general catch block.,Yes,2400,11,0.004583333,737.5006346,Security,,Low,No,,Not relevant any more because the CLR wraps non-Exception-derived throws,
CA2103,ReviewImperativeSecurity,Desktop,#N/A,Review imperative security,A method uses imperative security and might be constructing the permission by using state information or return values that can change as long as the demand is active. Use declarative security whenever possible.,Yes,11291,80,0.007085289,571.9925201,Security,,Low,No,,CAS is deprecated,
CA2104,DoNotDeclareReadOnlyMutableReferenceTypes,System.Runtime,#N/A,Do not declare read only mutable reference types,An externally visible type contains an externally visible read-only field that is a mutable reference type. A mutable type is a type whose instance data can be modified.,Yes,292444,8727,0.029841611,183.1684881,Security,,Low,No,,,Hardcoded list of immutable types
CA2105,ArrayFieldsShouldNotBeReadOnly,System.Runtime,#N/A,Array fields should not be read only,"When you apply the read-only (ReadOnly in Visual Basic) modifier to a field that contains an array, the field cannot be changed to reference a different array. However, the elements of the array that are stored in a read-only field can be changed.",Yes,58839,177,0.003008209,1585.549919,Security,,Low,No,,Some other rule about not having visible fields would have to be suppressed before this would be the only indication of a problem.,
CA2106,SecureAsserts,Desktop,#N/A,Secure asserts,A method asserts a permission and no security checks are performed on the caller. Asserting a security permission without performing any security checks can leave an exploitable security weakness in your code.,Yes,13428,138,0.010277033,401.6734505,Security,,Low,No,,CAS is deprecated,
CA2107,ReviewDenyAndPermitOnlyUsage,Desktop,#N/A,Review deny and permit only usage,The PermitOnly method and CodeAccessPermission.Deny security actions should be used only by those who have an advanced knowledge of .NET Framework security. Code that uses these security actions should undergo a security review.,Yes,938,16,0.017057569,174.2453914,Security,,Low,No,,CAS is deprecated,
CA2108,ReviewDeclarativeSecurityOnValueTypes,Desktop,#N/A,Review declarative security on value types,A public or protected value type is secured by Data Access or Link Demands.,Yes,136,0,0,,Security,,Low,No,,CAS is deprecated,
CA2109,ReviewVisibleEventHandlers,Microsoft.QualityGuidelines,#N/A,Review visible event handlers,A public or protected event-handling method was detected. Event-handling methods should not be exposed unless absolutely necessary.,Yes,249217,1465,0.005878411,918.0333759,Security,Low,High,Yes,,@michaelcfanning: Validate this decision,None
CA2111,PointersShouldNotBeVisible,Microsoft.QualityGuidelines,#N/A,Pointers should not be visible,"A pointer is not private, internal, or read-only. Malicious code can change the value of the pointer, which potentially gives access to arbitrary locations in memory or causes application or system failures.",Yes,49556,248,0.005004439,938.1862479,Security,Low,Low,No,,@nguerrera has validated this decision,
CA2112,SecuredTypesShouldNotExposeFields,Desktop,#N/A,Secured types should not expose fields,"A public or protected type contains public fields and is secured by Link Demands. If code has access to an instance of a type that is secured by a link demand, the code does not have to satisfy the link demand to access the fields of the type.",Yes,9409,0,0,,Security,,Low,No,,,
CA2114,MethodSecurityShouldBeASupersetOfType,Desktop,#N/A,Method security should be a superset of type,A method should not have both method-level and type-level declarative security for the same action.,Yes,7,0,0,,Security,,Low,No,,CAS is deprecated,
CA2115,CallGCKeepAliveWhenUsingNativeResources,System.Runtime.InteropServices,#N/A,Call GC.KeepAlive when using native resources,This rule detects errors that might occur because an unmanaged resource is being finalized while it is still being used in unmanaged code.,Yes,21,153,7.285714286,0.18148108,Security,,Low,No,,SafeHandle is available on all platforms; this is only relevant when SafeHandle is not available,
CA2116,AptcaMethodsShouldOnlyCallAptcaMethods,System.Runtime,#N/A,Aptca methods should only call aptca methods,"When the APTCA (AllowPartiallyTrustedCallersAttribute) is present on a fully trusted assembly, and the assembly executes code in another assembly that does not allow for partially trusted callers, a security exploit is possible.",Yes,20253,864,0.042660347,100.9482975,Security,,Low,No,,CAS/Transparency are de-emphasized,
CA2117,AptcaTypesShouldOnlyExtendAptcaBaseTypes,System.Runtime,#N/A,Aptca types should only extend aptca base types,"When the APTCA is present on a fully trusted assembly, and a type in the assembly inherits from a type that does not allow for partially trusted callers, a security exploit is possible.",Yes,6740,43,0.006379822,600.1201791,Security,,Low,No,,CAS/Transparency are de-emphasized,
CA2118,ReviewSuppressUnmanagedCodeSecurityUsage,System.Runtime.InteropServices,#N/A,Review suppress unmanaged code security usage,"This attribute is primarily used to increase performance; however, the performance gains come with significant security risks. If you place the attribute on public members that call native methods, the callers in the call stack (other than the immediate caller) do not need unmanaged code permission to execute unmanaged code. Depending on the public member's actions and input handling, it might allow untrustworthy callers to access functionality normally restricted to trustworthy code.",Yes,13584,539,0.039679034,104.1614989,Security,,Low,No,,CAS is deprecated,
CA2119,SealMethodsThatSatisfyPrivateInterfaces,Microsoft.QualityGuidelines,#N/A,Seal methods that satisfy private interfaces,"An inheritable public type provides an overridable method implementation of an internal (Friend in Visual Basic) interface. To fix a violation of this rule, prevent the method from being overridden outside the assembly.",Yes,16649,76,0.004564839,924.7617285,Security,High,Low,Yes,,,
CA2120,SecureSerializationConstructors,Desktop,#N/A,Secure serialization constructors,"This type has a constructor that takes a System.Runtime.Serialization.SerializationInfo object and a System.Runtime.Serialization.StreamingContext object (the signature of the serialization constructor). This constructor is not secured by a security check, but one or more of the regular constructors in the type are secured.",Yes,33,26,0.787878788,1.927344616,Security,,Low,No,,,
CA2121,StaticConstructorsShouldBePrivate,System.Runtime,#N/A,Static constructors should be private,"The system calls the static constructor before the first instance of the type is created or any static members are referenced. If a static constructor is not private, it can be called by code other than the system. Depending on the operations that are performed in the constructor, this can cause unexpected behavior.",Yes,44,0,0,,Security,,Low,No,,This was a VB compiler bug that was fixed years ago,
CA2122,DoNotIndirectlyExposeMethodsWithLinkDemands,Desktop,#N/A,Do not indirectly expose methods with link demands,A public or protected member has Link Demands and is called by a member that does not perform any security checks. A link demand checks the permissions of the immediate caller only.,Yes,733224,7044,0.009606887,610.5241757,Security,,High,No,,CAS is deprecated,FxCopSDKUtilities
CA2123,OverrideLinkDemandsShouldBeIdenticalToBase,System.Runtime,#N/A,Override link demands should be identical to base,"This rule matches a method to its base method, which is either an interface or a virtual method in another type, and then compares the link demands on each. If this rule is violated, a malicious caller can bypass the link demand just by calling the unsecured method.",No,138994,437,0.003144021,1635.802273,Security,,High,No,,CAS is deprecated,FxCopSDKUtilties
CA2124,WrapVulnerableFinallyClausesInOuterTry,Desktop,#N/A,Wrap vulnerable finally clauses in outer try,A public or protected method contains a try/finally block. The finally block appears to reset the security state and is not itself enclosed in a finally block.,Yes,2527,5,0.001978631,1719.676689,Security,,Low,No,,@michaelcfanning to review,
CA2126,TypeLinkDemandsRequireInheritanceDemands,Desktop,#N/A,Type link demands require inheritance demands,A public unsealed type is protected by using a link demand and has an overridable method. Neither the type nor the method is protected by using an inheritance demand.,Yes,3318,7,0.002109705,1668.895405,Security,,Low,No,,CAS is deprecated,
CA2130,ConstantsShouldBeTransparent,System.Runtime,#N/A,Security critical constants should be transparent,Transparency enforcement is not enforced for constant values because compilers inline constant values so that no lookup is required at run time. Constant fields should be security transparent so that code reviewers do not assume that transparent code cannot access the constant.,No,7,0,0,,Security,,Low,No,,Transparency is de-emphasized,
CA2131,CriticalTypesMustNotParticipateInTypeEquivalence,System.Runtime,#N/A,Security critical types may not participate in type equivalence,"A type participates in type equivalence and either the type itself, or a member or field of the type, is marked by using the SecurityCriticalAttribute attribute. This rule occurs on any critical types or types that contain critical methods or fields that are participating in type equivalence. When the CLR detects such a type, it does not load it with a TypeLoadException at run time. Typically, this rule is raised only when users implement type equivalence manually instead of in by relying on tlbimp and the compilers to do the type equivalence.",No,7,0,0,,Security,,Low,No,,Transparency is de-emphasized,
CA2132,DefaultConstructorsMustHaveConsistentTransparency,System.Runtime,#N/A,Default constructors must be at least as critical as base type default constructors,"Types and members that have the SecurityCriticalAttribute cannot be used by Silverlight application code. Security-critical types and members can be used only by trusted code in the .NET Framework for Silverlight class library. Because a public or protected construction in a derived class must have the same or greater transparency than its base class, a class in an application cannot be derived from a class marked as SecurityCritical.",No,467,0,0,,Security,,Low,No,,Transparency is de-emphasized,
CA2133,DelegatesMustBindWithConsistentTransparency,System.Runtime,#N/A,Delegates must bind to methods with consistent transparency,This warning is raised on a method that binds a delegate that is marked by using the SecurityCriticalAttribute to a method that is transparent or that is marked by using the SecuritySafeCriticalAttribute. The warning also is raised on a method that binds a delegate that is transparent or safe-critical to a critical method.,No,69,0,0,,Security,,Low,No,,Transparency is de-emphasized,
CA2134,MethodsMustOverrideWithConsistentTransparency,System.Runtime,#N/A,Methods must keep consistent transparency when overriding base methods,This rule is raised when a method marked by using the SecurityCriticalAttribute overrides a method that is transparent or marked by using the SecuritySafeCriticalAttribute. The rule also is raised when a method that is transparent or marked by using the SecuritySafeCriticalAttribute overrides a method that is marked by using a SecurityCriticalAttribute. The rule is applied when overriding a virtual method or implementing an interface.,No,3916,5,0.001276813,2813.914389,Security,,Low,No,,Transparency is de-emphasized,
CA2135,SecurityRuleSetLevel2MethodsShouldNotBeProtectedWithLinkDemands,System.Runtime,#N/A,Level2 methods should not be protected with link demands,"LinkDemands are deprecated in the level 2 security rule set. Instead of using LinkDemands to enforce security at just-in-time (JIT) compilation time, mark the methods, types, and fields with the SecurityCriticalAttribute attribute.",No,72950,390,0.005346127,909.6351163,Security,,Low,No,,CAS/Transparency are de-emphasized,
CA2136,TransparencyAnnotationsShouldNotConflict,System.Runtime,#N/A,Members should not have conflicting transparency annotations,"Critical code cannot occur in a 100 percent?transparent assembly. This rule analyzes 100 percent?transparent assemblies for any SecurityCritical annotations at the type, field, and method levels.",No,6481,114,0.017589878,216.6951925,Security,,Low,No,,Transparency is de-emphasized,
CA2137,TransparentMethodsMustBeVerifiable,System.Runtime,#N/A,Transparent methods must contain only verifiable IL,"A method contains unverifiable code or returns a type by reference. This rule is raised on attempts by security transparent code to execute unverifiable microsoft intermediate language (MISL). However, the rule does not contain a full IL verifier, and instead uses heuristics to catch most violations of MSIL verification.",No,124,0,0,,Security,,Low,No,,Transparency is de-emphasized,
CA2138,TransparentMethodsMustNotCallSuppressUnmanagedCodeSecurityMethods,System.Runtime,#N/A,Transparent methods must not call methods with the SuppressUnmanagedCodeSecurity attribute,A security transparent method calls a method that is marked by using the SuppressUnmanagedCodeSecurityAttribute attribute.,No,230,0,0,,Security,,Low,No,,Transparency is de-emphasized,
CA2139,TransparentMethodsMustNotHandleProcessCorruptingExceptions,System.Runtime,#N/A,Transparent methods may not use the HandleProcessCorruptingExceptions attribute,"This rule is raised by any method that is transparent and attempts to handle a process corrupting exception by using the HandleProcessCorruptedStateExceptionsAttribute attribute. A process corrupting exception is a CLR version 4.0 exception classification of exceptions such as AccessViolationException. The HandleProcessCorruptedStateExceptionsAttribute attribute may be used only by security critical methods, and will be ignored if it is applied to a transparent method.",No,35,0,0,,Security,,Low,No,,Transparency is de-emphasized,
CA2140,TransparentMethodsMustNotReferenceCriticalCode,System.Runtime,#N/A,Transparent code must not reference security critical items,"Methods that are marked by SecurityTransparentAttribute call nonpublic members that are marked as SecurityCritical. This rule analyzes all methods and types in an assembly that is mixed transparent/critical, and flags any calls from transparent code to nonpublic critical code that are not marked as SecurityTreatAsSafe.",No,13305,64,0.004810222,857.3440307,Security,,Low,No,,Transparency is de-emphasized,
CA2141,TransparentMethodsMustNotSatisfyLinkDemands,System.Runtime,#N/A,Transparent methods must not satisfy LinkDemands,"A security transparent method calls a method in an assembly that is not marked by using the APTCA, or a security transparent method satisfies a LinkDemand for a type or a method.",No,16361,245,0.014974635,281.3965015,Security,,Low,No,,Transparency is de-emphasized,
CA2142,TransparentMethodsShouldNotBeProtectedWithLinkDemands,System.Runtime,#N/A,Transparent code should not be protected with LinkDemands,"This rule is raised on transparent methods that require LinkDemands to access them. Security transparent code should not be responsible for verifying the security of an operation, and therefore should not demand permissions.",No,3330,18,0.005405405,651.6521832,Security,,Low,No,,Transparency is de-emphasized,
CA2143,TransparentMethodsShouldNotDemand,System.Runtime,#N/A,Transparent methods should not use security demands,"Security transparent code should not be responsible for verifying the security of an operation, and therefore should not demand permissions. Security transparent code should use full demands to make security decisions and safe-critical code should not rely on transparent code to have made the full demand.",No,13049,22,0.001685953,2441.098513,Security,,Low,No,,Transparency is de-emphasized,
CA2144,TransparentMethodsShouldNotLoadAssembliesFromByteArrays,System.Runtime,#N/A,Transparent code should not load assemblies from byte arrays,"The security review for transparent code is not as complete as the security review for critical code because transparent code cannot perform security sensitive actions. Assemblies that are loaded from a byte array might not be noticed in transparent code, and that byte array might contain critical, or more important safe-critical code, that does have to be audited.",No,72,0,0,,Security,,Low,No,,Transparency is de-emphasized,
CA2145,TransparentMethodsShouldNotUseSuppressUnmanagedCodeSecurity,System.Runtime,#N/A,Transparent methods should not be decorated with the SuppressUnmanagedCodeSecurityAttribute,Methods that are decorated by the SuppressUnmanagedCodeSecurityAttribute attribute have an implicit LinkDemand put upon any method that calls it. This LinkDemand requires that the calling code be security critical. Marking the method that uses SuppressUnmanagedCodeSecurity by using the SecurityCriticalAttribute attribute makes this requirement more obvious for callers of the method.,No,155,0,0,,Security,,Low,No,,Transparency is de-emphasized,
CA2146,TypesMustBeAtLeastAsCriticalAsBaseTypes,System.Runtime,#N/A,Types must be at least as critical as their base types and interfaces,"This rule is raised when a derived type has a security transparency attribute that is not as critical as its base type or implemented interface. Only critical types can derive from critical base types or implement critical interfaces, and only critical or safe-critical types can derive from safe-critical base types or implement safe-critical interfaces.",No,2865,2,0.00069808,4952.331027,Security,,Low,No,,Transparency is de-emphasized,
CA2147,TransparentMethodsMustNotUseSecurityAsserts,System.Runtime,#N/A,Transparent methods may not use security asserts,"This rule analyzes all methods and types in an assembly that is either 100 percent?transparent or mixed transparent/critical, and flags any declarative or imperative use of Assert.",No,91,0,0,,Security,,Low,No,,Transparency is de-emphasized,
CA2149,TransparentMethodsMustNotCallNativeCode,System.Runtime,#N/A,Transparent methods must not call into native code,"This rule is raised on any transparent method that calls directly into native code (for example, through a P/Invoke). Violations of this rule lead to a MethodAccessException in the level 2 transparency model and a full demand for UnmanagedCode in the level 1 transparency model.",No,4351,61,0.014019766,259.5328049,Security,,Low,No,,Transparency is de-emphasized,
CA2150,TransparentCodeMustNotUseCriticalAttributes,System.Runtime,#N/A,#N/A,#N/A,No,,,,,,,Low,No,,Transparency is de-emphasized,
CA2151,FieldsWithCriticalTypesShouldBeCritical,System.Runtime,#N/A,#N/A,#N/A,No,,,,,,,Low,No,,Transparency is de-emphasized,
RS0006,#N/A,Microsoft.Composition,Roslyn.Diagnostics.Analyzers,Do not mix attributes from different versions of MEF,#N/A,,,,,,Reliability,,,Ported,,,
RS0023,#N/A,Microsoft.Composition,Roslyn.Diagnostics.Analyzers,Parts exported with MEFv2 must be marked as Shared,#N/A,,,,,,Reliability,,,Ported,,,
RS0001,#N/A,Roslyn.Diagnostics,Roslyn.Diagnostics.Analyzers,Use SpecializedCollections.EmptyEnumerable(),#N/A,,,,,,Performance,,,Ported,,,
CA2202,DoNotDisposeObjectsMultipleTimes,System.Runtime,#N/A,Do not dispose objects multiple times,A method implementation contains code paths that could cause multiple calls to System.IDisposable.Dispose or a Dispose equivalent (such as a Close() method on some types) on the same object.,Yes,1034185,2477,0.002395123,2511.18582,Usage,,High,No,,,Dataflow
CA2204,LiteralsShouldBeSpelledCorrectly,Text,#N/A,Literals should be spelled correctly,A literal string in a method body contains one or more words that are not recognized by the Microsoft spelling checker library.,Yes,1364858,19401,0.014214666,431.6026604,Naming,,Low,Yes,,,Dataflow
CA2205,UseManagedEquivalentsOfWin32Api,System.Runtime.InteropServices,#N/A,Use managed equivalents of win32 api,An operating system invoke method is defined and a method that has the equivalent functionality is located in the .NET Framework class library.,Yes,28980,117,0.004037267,1105.227445,Usage,,Low,Yes,,,None
RS0002,#N/A,Roslyn.Diagnostics,Roslyn.Diagnostics.Analyzers,Use SpecializedCollections.SingletonEnumerable(),#N/A,,,,,,Performance,,,Ported,,,
CA2208,InstantiateArgumentExceptionsCorrectly,System.Runtime,#N/A,Instantiate argument exceptions correctly,"A call is made to the default (parameterless) constructor of an exception type that is or derives from ArgumentException, or an incorrect string argument is passed to a parameterized constructor of an exception type that is or derives from ArgumentException.",Yes,774590,2637,0.003404382,1729.850661,Usage,,High,Yes,,The fixer should introduce nameof,IOperation
CA2209,AssembliesShouldDeclareMinimumSecurity,Desktop,#N/A,Assemblies should declare minimum security,"Assemblies specify security permission requests to communicate to administrators the minimum permissions that are required to execute the assembly, and to limit security vulnerabilities caused by mistakenly omitting demands at the type and member level. ",,7023,203,0.028905026,133.0745256,Security,,Low,No,,Deprecated rule,
CA2210,AssembliesShouldHaveValidStrongNames,Microsoft.ApiDesignGuidelines,#N/A,Assemblies should have valid strong names,"The strong name protects clients from unknowingly loading an assembly that has been tampered with. Assemblies without strong names should not be deployed outside very limited scenarios. If you share or distribute assemblies that are not correctly signed, the assembly can be tampered with, the common language runtime might not load the assembly, or the user might have to disable verification on his or her computer.",Yes,2955771,8737,0.002955912,2189.060439,Design,,High,Yes,,Implement the check to just see if it has a public key.,None
CA2211,NonConstantFieldsShouldNotBeVisible,Microsoft.ApiDesignGuidelines,#N/A,Non-constant fields should not be visible,Static fields that are neither constants nor read-only are not thread-safe. Access to such a field must be carefully controlled and requires advanced programming techniques to synchronize access to the class object.,Yes,752431,8608,0.011440252,513.6658574,Usage,,High,Yes,,,None
CA2212,DoNotMarkServicedComponentsWithWebMethod,Desktop,#N/A,Do not mark serviced components with WebMethod,"A method in a type that inherits from System.EnterpriseServices.ServicedComponent is marked by using System.Web.Services.WebMethodAttribute. Because WebMethodAttribute and a ServicedComponent method have conflicting behavior and requirements for context and transaction flow, the behavior of the method will be incorrect in some scenarios.",Yes,26,0,0,,Usage,,Low,Yes,,,None
RS0004,#N/A,Roslyn.Diagnostics,Roslyn.Diagnostics.Analyzers,Invoke the correct property to ensure correct use site diagnostics.,#N/A,,,,,,Usage,,,Ported,,,
RS0005,#N/A,Roslyn.Diagnostics,Roslyn.Diagnostics.Analyzers,Do not use generic CodeAction.Create to create CodeAction,#N/A,,,,,,Performance,,,Ported,,,
CA2215,DisposeMethodsShouldCallBaseClassDispose,System.Runtime,#N/A,Dispose Methods Should Call Base Class Dispose,"If a type inherits from a disposable type, it must call the Dispose method of the base type from its own Dispose method.",Yes,37586,119,0.003166072,1445.01623,Usage,,Low,Yes,,,Dataflow
CA2216,DisposableTypesShouldDeclareFinalizer,System.Runtime,#N/A,Disposable types should declare finalizer,"A type that implements System.IDisposable and has fields that suggest the use of unmanaged resources does not implement a finalizer, as described by Object.Finalize.",Yes,8011,13,0.001622769,2405.571878,Usage,,High,Yes,,,InternalUtilities
RS0009,#N/A,Roslyn.Diagnostics,Roslyn.Diagnostics.Analyzers,Override Object.Equals(object) when implementing Iequatable,#N/A,,,,,,Reliability,,,Ported,,,
CA2218,OverrideGetHashCodeOnOverridingEquals,Microsoft.ApiDesignGuidelines,#N/A,Override GetHashCode on overriding Equals,"GetHashCode returns a value, based on the current instance, that is suited for hashing algorithms and data structures such as a hash table. Two objects that are the same type and are equal must return the same hash code.",Yes,34660,25,0.000721293,6294.018313,Usage,,High,Yes,,Fixer should create method that throws NotImplementedException. Implementer should check if the compiler gives this warning.,None
CA2219,DoNotRaiseExceptionsInExceptionClauses,System.Runtime,#N/A,Do not raise exceptions in exception clauses,"When an exception is raised in a finally or fault clause, the new exception hides the active exception. When an exception is raised in a filter clause, the run time silently catches the exception. This makes the original error difficult to detect and debug.",Yes,14661,36,0.002455494,1696.670124,Usage,,High,Yes,,,None
CA2220,FinalizersShouldCallBaseClassFinalizer,System.Runtime,#N/A,Finalizers should call base class finalizer,"Finalization must be propagated through the inheritance hierarchy. To guarantee this, types must call their base class Finalize method in their own Finalize method.",Yes,47,0,0,,Usage,,Low,No,,The compiler automatically chains to the base class. @nguerrera: Does the VB compiler do that?>,None
CA2221,FinalizersShouldBeProtected,System.Runtime,#N/A,Finalizers should be protected,Finalizers must use the family access modifier.,Yes,10,0,0,,Usage,,Low,No,,,N/A
CA2222,DoNotDecreaseInheritedMemberVisibility,Microsoft.ApiDesignGuidelines,#N/A,Do not decrease inherited member visibility,You should not change the access modifier for inherited members. Changing an inherited member to private does not prevent callers from accessing the base class implementation of the method.,Yes,64588,185,0.002864309,1679.34101,Usage,,High,Yes,,,None
CA2223,MembersShouldDifferByMoreThanReturnType,Microsoft.ApiDesignGuidelines,#N/A,Members should differ by more than return type,"Although the common language runtime allows the use of return types to differentiate between otherwise identical members, this feature is not in the Common Language Specification, nor is it a common feature of .NET programming languages.",Yes,12,1,0.083333333,12.95017495,Usage,,High,No,,"Hardly ever fires, can't violate it in C# and VB, and Roslyn can't examine anything else.",None
CA2224,OverrideEqualsOnOverloadingOperatorEquals,Microsoft.ApiDesignGuidelines,#N/A,Override Equals on overloading operator equals,A public type implements the equality operator but does not override Object.Equals.,Yes,7619,11,0.001443759,2688.743696,Usage,,High,Yes,,Fixer should create method that throws NotImplementedException. Implementer should check if the compiler gives this warning.,None
CA2225,OperatorOverloadsHaveNamedAlternates,Microsoft.ApiDesignGuidelines,#N/A,Operator overloads have named alternates,"An operator overload was detected, and the expected named alternative method was not found. The named alternative member provides access to the same functionality as the operator and is provided for developers who program in languages that do not support overloaded operators.",Yes,71083,1385,0.019484265,249.009433,Usage,,High,Yes,,,HardCoded list of alternates
CA2226,OperatorsShouldHaveSymmetricalOverloads,Microsoft.ApiDesignGuidelines,#N/A,Operators should have symmetrical overloads,A type implements the equality or inequality operator and does not implement the opposite operator.,Yes,47,0,0,,Usage,,High,Yes,,,None
RS0013,#N/A,Roslyn.Diagnostics,Roslyn.Diagnostics.Analyzers,Do not invoke Diagnostic.Descriptor,"Accessing the Descriptor property of Diagnostic in compiler layer leads to unnecessary string allocations for fields of the descriptor that are not utilized in command line compilation. Hence, you should avoid accessing the Descriptor of the compiler diagnostics here. Instead you should directly access these properties off the Diagnostic type.",,,,,,Performance,,,Ported,,,
CA2228,DoNotShipUnreleasedResourceFormats,System.Runtime,#N/A,Do not ship unreleased resource formats,Resource files that were built by using prerelease versions of the .NET Framework might not be usable by supported versions of the .NET Framework.,Yes,2033,45,0.022134776,149.4542954,Usage,,High,No,,,N/A
RS0016,#N/A,Roslyn.Diagnostics,Roslyn.Diagnostics.Analyzers,Add public types and members to the declared API,"All public types and members should be declared in PublicAPI.txt. This draws attention to API changes in the code reviews and source control history, and helps prevent breaking changes.",,,,,,ApiDesign,,,Ported,,,
CA2230,UseParamsForVariableArguments,Microsoft.ApiDesignGuidelines,#N/A,Use params for variable arguments,A public or protected type contains a public or protected method that uses the VarArgs calling convention instead of the params keyword.,Yes,126,8,0.063492063,33.08083609,Usage,,High,No,,"This is about __arglist, rarely used.",None
CA2231,OverloadOperatorEqualsOnOverridingValueTypeEquals,Microsoft.ApiDesignGuidelines,System.Runtime.Analyzers,Overload operator equals on overriding value type Equals,"In most programming languages there is no default implementation of the equality operator (==) for value types. If your programming language supports operator overloads, you should consider implementing the equality operator. Its behavior should be identical to that of Equals",Yes,15312,25,0.001632706,2563.248351,Usage,,High,Yes,,,None
CA2232,MarkWindowsFormsEntryPointsWithStaThread,Desktop,#N/A,Mark Windows Forms entry points with STAThread,"STAThreadAttribute indicates that the COM threading model for the application is a single-threaded apartment. This attribute must be present on the entry point of any application that uses Windows Forms; if it is omitted, the Windows components might not work correctly.",Yes,17032,43,0.002524659,1675.974803,Usage,,Low,Yes,,,None
CA2233,OperationsShouldNotOverflow,System.Runtime,#N/A,Operations should not overflow,You should not perform arithmetic operations without first validating the operands. This makes sure that the result of the operation is not outside the range of possible values for the data types that are involved.,Yes,177875,717,0.004030921,1302.460516,Usage,,High,No,,Very noisy,IOperation
CA2234,PassSystemUriObjectsInsteadOfStrings,Microsoft.ApiDesignGuidelines,#N/A,Pass system uri objects instead of strings,"A call is made to a method that has a string parameter whose name contains ""uri"", ""URI"", ""urn"", ""URN"", ""url"", or ""URL"". The declaring type of the method contains a corresponding method overload that has a System.Uri parameter.",Yes,197362,824,0.004175069,1268.305585,Usage,,High,Yes,,,WordParser
RS0017,#N/A,Roslyn.Diagnostics,Roslyn.Diagnostics.Analyzers,Remove deleted types and members from the declared API,"When removing a public type or member the corresponding entry in PublicAPI.txt should also be removed. This draws attention to API changes in the code reviews and source control history, and helps prevent breaking changes.",,,,,,ApiDesign,,,Ported,,,
CA2236,CallBaseClassMethodsOnISerializableTypes,Desktop,#N/A,Call base class methods on ISerializable types,"To fix a violation of this rule, call the base type GetObjectData method or serialization constructor from the corresponding derived type method or constructor.",Yes,23555,57,0.002419868,1806.744169,Usage,,Low,Yes,,,IOperation
RS0019,#N/A,Roslyn.Diagnostics,Roslyn.Diagnostics.Analyzers,SymbolDeclaredEvent must be generated for source symbols,"Compilation event queue is required to generate symbol declared events for all declared source symbols. Hence, every source symbol type or one of it's base types must generate a symbol declared event.",,,,,,Reliability,,,Ported,,,
CA2238,ImplementSerializationMethodsCorrectly,Desktop,#N/A,Implement serialization methods correctly,"A method that handles a serialization event does not have the correct signature, return type, or visibility.",Yes,38890,1402,0.036050399,127.3172594,Usage,,Low,Yes,,,None
CA2239,ProvideDeserializationMethodsForOptionalFields,Desktop,#N/A,Provide deserialization methods for optional fields,"A type has a field that is marked by using the System.Runtime.Serialization.OptionalFieldAttribute attribute, and the type does not provide deserialization event handling methods.",Yes,13047,393,0.030121867,136.6286708,Usage,,Low,Yes,,,None
CA2240,ImplementISerializableCorrectly,Desktop,#N/A,Implement ISerializable correctly,"To fix a violation of this rule, make the GetObjectData method visible and overridable, and make sure that all instance fields are included in the serialization process or explicitly marked by using the NonSerializedAttribute attribute.",Yes,254727,2301,0.0090332,598.4673019,Usage,,Low,Yes,,,None
CA2241,ProvideCorrectArgumentsToFormattingMethods,System.Runtime,#N/A,Provide correct arguments to formatting methods,"The format argument that is passed to System.String.Format does not contain a format item that corresponds to each object argument, or vice versa.",Yes,275305,236,0.000857231,6345.796697,Usage,,High,Yes,,,Dataflow
CA2242,TestForNaNCorrectly,System.Runtime,#N/A,Test for NaN correctly,This expression tests a value against Single.Nan or Double.Nan. Use Single.IsNan(Single) or Double.IsNan(Double) to test the value.,Yes,15800,4,0.000253165,16584.69549,Usage,,High,Yes,,,IOperation
CA2243,AttributeStringLiteralsShouldParseCorrectly,System.Runtime,#N/A,Attribute string literals should parse correctly,"The string literal parameter of an attribute does not parse correctly for a URL, a GUID, or a version.",Yes,63488,553,0.008710307,551.3802662,Usage,,High,Yes,,,WordParser
CA3050,DoNotUseXslTransform,System.Xml,#N/A,Do not use XslTransform,"Do not use obsolete and unsafe System.Xml.Xsl.XslTransform API. This API allows processing script within XSL, which, on untrusted XSL input, may lead to malicious code execution.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA3053,UseXmlSecureResolver,System.Xml,#N/A,Use XmlSecureResolver,"Review code to ensure that external resource resolution is explicitly disabled or a XmlSecureResolver is used when processing untrusted input (the resolver used internally on some overloaded methods is not safe to use on untrusted input). Using default resolver for resolving external XML entities may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA3054,DoNotAllowDtdOnXmlTextReader,System.Xml,#N/A,Do not allow Dtd on XmlTextReader,"Prohibit DTD processing when using XmlTextReader on untrusted sources. Enabling DTD processing on the XML reader and using UrlResolver for resolving external XML entities may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA3055,DoNotAllowDtdOnXmlReader,System.Xml,#N/A,Do not allow Dtd on XmlReader,"Prohibit DTD processing when using XmlReader on untrusted sources. Enabling DTD processing on the XML reader and using UrlResolver for resolving external XML entities may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA3056,UseXmlReaderForLoad,System.Xml,#N/A,Use XmlReader for Load,"Do not use unsafe overloads of System.Xml.XmlDocument/XmlDataDocument Load. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA3057,DoNotUseLoadXml,System.Xml,#N/A,Do not use LoadXml,"Do not use unsafe overloads of System.Xml.XmlDocument/XmlDataDocument LoadXml API. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA3058,DoNotUseSetInnerXml,System.Xml,#N/A,Do not use SetInnerXml,"Do not use the unsafe setter of InnerXml property of System.Xml.XmlDocument/XmlDataDocument. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA3059,UseXmlReaderForXPathDocument,System.Xml,#N/A,Use XmlReader for XPathDocument,"Do not use unsafe overloads of the constructor for System.Xml.XPath.Xpath.XPathDocument. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA3060,UseXmlReaderForSchemaRead,System.Xml,#N/A,Use XmlReader for Schema Read,"Do not use unsafe overloads of System.Xml.Schema.XmlSchema.Read. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA3061,DoNotAddStringsToXmlSchema,System.Xml,#N/A,Do not add strings to Xml schema,"Do not use unsafe overloads of System.Xml.Schema.XmlSchemaCollection.Add. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA3062,UseXmlReaderForValidatingReader,System.Xml,#N/A,Use XmlReader for ValidatingReader,"Configure System.Xml.XmlValidatingReader to validate the parsed XML. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA3063,UseXmlReaderForDataSetReadXml,Desktop,#N/A,Use XmlReader for DataSet ReadXml,"Do not use unsafe overloads of System.Data.DataSet.ReadXml. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,High,Yes,,,
CA3064,UseXmlReaderForDataSetReadXmlSchema,Desktop,#N/A,Use XmlReader for DataSet ReadXmlSchema,"Do not use unsafe overloads of System.Data.DataSet.ReadXmlSchema. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,High,Yes,,,
CA3065,ReviewDataViewCollectionString,Desktop,#N/A,Review DataView CollectionString,"Review code to insure that usage of System.Data.DataViewManager.DataViewSettingCollectionString input is sanitized to not contain DTD. Enabling DTD processing on the XML reader and using UrlResolver for resolving external XML entities may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,High,Yes,,,
CA3066,ReviewWebControlForSet_Data,System.Web,#N/A,Review WebControl for set_Data,"Review code to insure that System.Web.UI.WebControls.XmlDataSource::Data is set from a trusted source. This pattern internally enables DTD processing in XML and uses UrlResolver for resolving external XML entities, which, on untrusted input, may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,,No,,@michaelcfanning to review,
CA3067,ReviewWebControlForSet_DocumentContent,System.Web,#N/A,Review WebControl for set_DocumentContent,"Review code to insure that System.Web.UI.WebControls.Xml::DocumentContent is set from a trusted source. This pattern internally enables DTD processing in XML and uses UrlResolver for resolving external XML entities, which, on untrusted input, may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,,No,,@michaelcfanning to review,
CA3068,TextReaderImplNeedsSettingsAndResolver,System.Xml,#N/A,TextReaderImpl needs settings and resolver,"Do not use unsafe overloads of the constructor for the System.Xml.XmlTextReaderImpl. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA3069,ReviewDtdProcessingAssignment,System.Xml,#N/A,Review DtdProcessing assignment,"Review all code that enables DtdProcessing to insure that it is necessary and properly documented. Enabling DTD processing on the XML reader and using UrlResolver for resolving external XML entities may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA3070,UseXmlReaderForDeserialize,System.Xml,#N/A,Use XmlReader for Deserialize,"Do not use unsafe overloads of System.Xml.Serialization.XmlSerializer.Deserialize. This API internally enables DTD processing on the XML reader instance used but doesn't allow external entity resolution, enabling the attacker to DoS the machine processing the XML with a single especially crafted XML input.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA3071,UseXmlReaderForDataTableReadXml,Desktop,#N/A,Use XmlReader for DataTable ReadXml,"Do not use unsafe overloads of System.Data.DataTable.ReadXml. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,High,Yes,,,
CA3072,UseXmlReaderForDataTableReadXmlSchema,Desktop,#N/A,Use XmlReader for DataTable ReadXmlSchema,"Checks for usage of an unsafe overload of  System.Data.DataTable.ReadXmlSchema. This API internally enables DTD processing on the XML reader instance used, and uses UrlResolver for resolving external XML entities. The outcome is information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,High,Yes,,,
CA3073,ReviewTrustedXsltUse,System.Xml,#N/A,Review Trusted Xslt use,"Review code to insure that System.Xml.Xsl.XsltSettings::TrustedXslt is set from a trusted source. This pattern allows processing script within XSL, which, on untrusted XSL input, may lead to malicious code execution.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA3074,ReviewClassesDerivedFromXmlTextReader,System.Xml,#N/A,Review classes derived from XmlTextReader,"Review code to insure that  DTD prosessing is disabled on all instances of classes derived from System.Xml.XmlTextReader. Enabling DTD processing on the XML reader and using UrlResolver for resolving external XML entities may lead to information disclosure. Content from file system or network shares for the machine processing the XML can be exposed to attacker. In addition, an attacker can use this as a DoS vector.",No,,,,,,,,No,,These will be consolidated into two or three new rules,
CA5122,PInvokesShouldNotBeSafeCriticalFxCopRule,System.Runtime,#N/A,#N/A,#N/A,No,,,,,,,Low,No,,,
CA5350,DoNotUseWeakCryptographicAlgorithms,System.Security.Cryptography.Algorithms,#N/A,Do Not Use Weak Cryptographic Algorithms,"Cryptographic algorithms degrade over time as attacks become for advances to attacker get access to more computation. Depending on the type and application of this cryptographic algorithm, further degradation of the cryptographic strength of it may allow attackers to read enciphered messages, tamper with enciphered? messages, forge digital signatures, tamper with hashed content, or otherwise compromise any cryptosystem based on this algorithm. Replace encryption uses with the AES algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits. Replace hashing uses with a hashing function in the SHA-2 family, such as SHA-2 512, SHA-2 384, or SHA-2 256.",No,,,,,,,,Ported,,,
CA5351,DoNotUseBrokenCryptographicAlgorithms,System.Security.Cryptography.Algorithms,#N/A,Do Not Use Broken Cryptographic Algorithms,"An attack making it computationally feasible to break this algorithm exists. This allows attackers to break the cryptographic guarantees it is designed to provide. Depending on the type and application of this cryptographic algorithm, this may allow attackers to read enciphered messages, tamper with enciphered? messages, forge digital signatures, tamper with hashed content, or otherwise compromise any cryptosystem based on this algorithm. Replace encryption uses with the AES algorithm (AES-256, AES-192 and AES-128 are acceptable) with a key length greater than or equal to 128 bits. Replace hashing uses with a hashing function in the SHA-2 family, such as SHA512, SHA384, or SHA256. Replace digital signature uses with RSA with a key length greater than or equal to 2048-bits, or ECDSA with a key length greater than or equal to 256 bits.",No,,,,,,,,Ported,,,
CA5352,RC2CannotBeUsed,System.Security.Cryptography.Algorithms,#N/A,Do not use RC2,RC2 is banned by SDL,No,,,,,,,,No,,merged into CA5351,
CA5353,TripleDESCannotBeUsed,System.Security.Cryptography.Algorithms,#N/A,Do not use TripleDES,TripleDES is not recommended by SDL,No,,,,,,,,No,,merged into CA5350,
CA5354,SHA1CannotBeUsed,System.Security.Cryptography.Algorithms,#N/A,Do not use SHA1,SHA-1 is banned by SDL,No,,,,,,,,No,,merged into CA5350,
CA5355,RIPEMD160IsNotRecommended,System.Security.Cryptography.Algorithms,#N/A,Do not use RIPEMD160,RIPEMD-160 is banned by SDL,No,,,,,,,,No,,merged into CA5350,
CA5356,DSACannotBeUsed,System.Security.Cryptography.Algorithms,#N/A,Do not use DSA,DSA is banned by SDL,No,,,,,,,,No,,merged into CA5351,
CA5357,RijndaelCannotBeUsed,System.Security.Cryptography.Algorithms,#N/A,Do not use Rijndael,Rijndael is not recommended by SDL,No,,,,,,,,No,,deleted form SDL,
CA900,AptcaAssembliesShouldBeReviewed,System.Runtime,#N/A,Aptca assemblies should be reviewed,Microsoft only allows certain assemblies to have the AllowPartiallyTrustedCallers attribute. This rule can be ignored if the assembly is not for distribution outside of Microsoft.,No,,,,,,,,No,,,
CA901,AptcaTypesShouldBeReviewed,System.Runtime,#N/A,Aptca types should be reviewed,"Types not on the list must either have both a LinkDemand and an InheritanceDemand, or have a LinkDemand and be sealed. This is a requirement of RTM security signoff.",No,,,,,,,,No,,,
CA908,AvoidTypesThatRequireJitCompilationInPrecompiledAssemblies,System.Runtime,#N/A,Avoid types that require JIT compilation in precompiled assemblies,"Assemblies that are precompiled (using ngen.exe) should only instantiate generic types that will not cause JIT compilation at runtime. Generic types with value type type parameters (outside of a special set of supported runtime generic types) will always cause JIT compilation, even if the encapsulating assembly has been precompiled. If this is not an precompiled assembly this message should be suppressed or this rule should be disabled.",No,,,,,,,,No,,,
CA909,UseFrameworksThatSatisfySecurityRequirements,System.Runtime,#N/A,#N/A,#N/A,No,,,,,,,,No,,Deprecated rule checking for insecure/beta framework use,
RS0024,#N/A,Roslyn.Diagnostics,Roslyn.Diagnostics.Analyzers,The contents of the public API files are invalid,#N/A,,,,,,ApiDesign,,,Ported,,,
RS0012,#N/A,System.Collections.Immutable,Roslyn.Diagnostics.Analyzers,Do not call ToImmutableArray on an ImmutableArray value,#N/A,,,,,,Reliability,,,Ported,,,
CA1309,UseOrdinalStringComparison,System.Runtime,System.Runtime.Analyzers,Use ordinal stringcomparison,"A string comparison operation that is nonlinguistic does not set the StringComparison parameter to either Ordinal or OrdinalIgnoreCase. By explicitly setting the parameter to either StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase, your code often gains speed, becomes more correct, and becomes more reliable.",Yes,450803,879,0.001949854,2899.697623,Globalization,,High,Ported,,,
CA1810,InitializeReferenceTypeStaticFieldsInline,Microsoft.QualityGuidelines,#N/A,Initialize reference type static fields inline,"When a type declares an explicit static constructor, the just-in-time (JIT) compiler adds a check to each static method and instance constructor of the type to make sure that the static constructor was previously called. Static constructor checks can decrease performance.",Yes,755408,2731,0.003615265,1625.933867,Performance,,High,Ported,,,None
CA1813,AvoidUnsealedAttributes,System.Runtime,System.Runtime.Analyzers,Avoid unsealed attributes,"The .NET Framework class library provides methods for retrieving custom attributes. By default, these methods search the attribute inheritance hierarchy. Sealing the attribute eliminates the search through the inheritance hierarchy and can improve performance.",Yes,219135,401,0.001829922,2918.545808,Performance,,High,Ported,,,
CA1820,TestForEmptyStringsUsingStringLength,System.Runtime,System.Runtime.Analyzers,Test for empty strings using string length,Comparing strings by using the String.Length property or the String.IsNullOrEmpty method is significantly faster than using Equals.,Yes,1121246,2134,0.00190324,3178.633057,Performance,,High,Ported,,,
CA2002,DoNotLockOnObjectsWithWeakIdentity,System.Runtime,System.Runtime.Analyzers,Do not lock on objects with weak identity,An object is said to have a weak identity when it can be directly accessed across application domain boundaries. A thread that tries to acquire a lock on an object that has a weak identity can be blocked by a second thread in a different application domain that has a lock on the same object.,Yes,123953,440,0.003549733,1434.828387,Reliability,,High,Ported,,,
CA2153,DoNotCatchCorruptedStateExceptionsInGeneralHandlers,System.Runtime,Desktop.Analyzers,Do not catch corrupted state exceptions in general handlers.,Do not author general catch handlers in code that receives corrupted state exceptions.,No,,,,,Security,,,Ported,,,
CA2200,RethrowToPreserveStackDetails,Microsoft.QualityGuidelines,Microsoft.AnalyzerPowerPack,Rethrow to preserve stack details,"An exception is rethrown and the exception is explicitly specified in the throw statement. If an exception is rethrown by specifying the exception in the throw statement, the list of method calls between the original method that threw the exception and the current method is lost.",Yes,713166,2048,0.002871702,2038.230737,Usage,,High,Ported,,,None
CA2201,DoNotRaiseReservedExceptionTypes,System.Runtime,#N/A,Do not raise reserved exception types,This makes the original error difficult to detect and debug.,Yes,1439723,9215,0.006400537,962.150389,Usage,,High,Ported,,,None
CA2207,InitializeValueTypeStaticFieldsInline,Microsoft.QualityGuidelines,#N/A,Initialize value type static fields inline,"A value type declares an explicit static constructor. To fix a violation of this rule, initialize all static data when it is declared and remove the static constructor.",Yes,13270,20,0.001507159,2735.524857,Usage,,High,Ported,,,None
CA2213,DisposableFieldsShouldBeDisposed,System.Runtime,System.Runtime.Analyzers,Disposable fields should be disposed,A type that implements System.IDisposable declares fields that are of types that also implement IDisposable. The Dispose method of the field is not called by the Dispose method of the declaring type.,Yes,347843,920,0.002644871,2095.142804,Usage,,High,Ported,,,Dataflow
CA2214,DoNotCallOverridableMethodsInConstructors,Microsoft.QualityGuidelines,Microsoft.AnalyzerPowerPack,Do not call overridable methods in constructors,"When a constructor calls a virtual method, the constructor for the instance that invokes the method may not have executed.",Yes,681532,2824,0.004143606,1407.828453,Usage,,High,Ported,,,None
RS0007,#N/A,System.Runtime,Roslyn.Diagnostics.Analyzers,Avoid zero-length array allocations.,#N/A,,,,,,Performance,,,Ported,,,
RS0014,#N/A,System.Runtime,Roslyn.Diagnostics.Analyzers,Do not use Enumerable methods on indexable collections. Instead use the collection directly,This collection is directly indexable. Going through LINQ here causes unnecessary allocations and CPU work.,,,,,,Performance,,,Ported,,,
CA1401,PInvokesShouldNotBeVisible,System.Runtime.InteropServices,System.Runtime.InteropServices.Analyzers,PInvokes should not be visible,A public or protected method in a public type has the System.Runtime.InteropServices.DllImportAttribute attribute (also implemented by the Declare keyword in Visual Basic). Such methods should not be exposed.,Yes,128953,940,0.007289478,701.0696455,Interoperability,,High,Ported,,,
CA1901,PInvokeDeclarationsShouldBePortable,System.Runtime.InteropServices,#N/A,PInvoke declarations should be portable,"This rule evaluates the size of each parameter and the return value of a P/Invoke, and verifies that the size of the parameter is correct when marshaled to unmanaged code on 32-bit and 64-bit operating systems.",Yes,114993,367,0.003191499,1585.672444,Portability,,High,Yes,,,See CA2101
CA2101,SpecifyMarshalingForPInvokeStringArguments,System.Runtime.InteropServices,System.Runtime.InteropServices.Analyzers,Specify marshaling for PInvoke string arguments,"A platform invoke member allows partially trusted callers, has a string parameter, and does not explicitly marshal the string. This can cause a potential security vulnerability.",Yes,230439,998,0.004330864,1238.218475,Globalization,,High,Ported,,,
RS0015,#N/A,System.Runtime.InteropServices,Roslyn.Diagnostics.Analyzers,Always consume the value returned by methods marked with PreserveSigAttribute,"PreserveSigAttribute indicates that a method will return an HRESULT, rather than throwing an exception. Therefore, it is important to consume the HRESULT returned by the method, so that errors can be detected. Generally, this is done by calling Marshal.ThrowExceptionForHR.",,,,,,Reliability,,,Ported,,,
RS0020,#N/A,Roslyn.Diagnostics,Roslyn.Diagnostics.Analyzers,unused code,#N/A,,,,,,Maintainability,,,,,,
RS0021,#N/A,Roslyn.Diagnostics,Roslyn.Diagnostics.Analyzers,Hidden (used by CodeFix),#N/A,,,,,,#N/A,,,,,,
RS0003,#N/A,System.Threading.Tasks,Roslyn.Diagnostics.Analyzers,Do not directly await a Task,#N/A,,,,,,Reliability,,,Ported,,,
RS0018,#N/A,System.Threading.Tasks,Roslyn.Diagnostics.Analyzers,Do not create tasks without passing a TaskScheduler,"Do not create tasks unless you are using one of the overloads that takes a TaskScheduler. The default is to schedule on TaskScheduler.Current, which would lead to deadlocks. Either use TaskScheduler.Default to schedule on the thread pool, or explicitly pass TaskScheduler.Current to make your intentions clear.",,,,,,Reliability,,,Ported,,,
RS0010,#N/A,XmlDocumentationComments,Roslyn.Diagnostics.Analyzers,Avoid using cref tags with a prefix,"Use of cref tags with prefixes should be avoided, since it prevents the compiler from verifying references and the IDE from updating references during refactorings. It is permissible to suppress this error at a single documentation site if the cref must use a prefix because the type being mentioned is not findable by the compiler. For example, if a cref is mentioning a special attribute in the full framework but you're in a file that compiles against the portable framework, or if you want to reference a type at higher layer of Roslyn, you should suppress the error. You should not suppress the error just because you want to take a shortcut and avoid using the full syntax.",,,,,,Documentation,,,Ported,,,
RS1001,#N/A,Microsoft.CodeAnalysis,Microsoft.CodeAnalysis.Analyzers,Missing diagnostic analyzer attribute,"Non-abstract sub-types of DiagnosticAnalyzer should be marked with DiagnosticAnalyzerAttribute(s). The argument to this attribute(s), if any, determine the supported languages for the analyzer. Analyzer types without this attribute will be ignored by the analysis engine.",,,,,,AnalyzerCorrectness,,,Ported,,,
RS1002,#N/A,Microsoft.CodeAnalysis,Microsoft.CodeAnalysis.Analyzers,Missing kind argument while registering an analyzer action,"You must specify at least one syntax/symbol kinds of interest while registering a syntax/symbol analyzer action. Otherwise, the registered action will be dead code and will never be invoked during analysis.",,,,,,AnalyzerCorrectness,,,Ported,,,
RS1003,#N/A,Microsoft.CodeAnalysis,Microsoft.CodeAnalysis.Analyzers,Unsupported SymbolKind argument while registering a symbol analyzer action,#N/A,,,,,,AnalyzerCorrectness,,,Ported,,,
RS1004,#N/A,Microsoft.CodeAnalysis,Microsoft.CodeAnalysis.Analyzers,Recommend adding language support to diagnostic analyzer,"Diagnostic analyzer is marked as supporting only one language, but the analyzer assembly doesn't seem to refer to any language specific CodeAnalysis assemblies, and so is likely to work for more than one language. Consider adding an additional language argument to DiagnosticAnalyzerAttribute.",,,,,,AnalyzerCorrectness,,,Ported,,,
RS1005,#N/A,Microsoft.CodeAnalysis,Microsoft.CodeAnalysis.Analyzers,ReportDiagnostic invoked with an unsupported DiagnosticDescriptor,"ReportDiagnostic should only be invoked with supported DiagnosticDescriptors that are returned from DiagnosticAnalyzer.SupportedDiagnostics property. Otherwise, the reported diagnostic will be filtered out by the analysis engine.",,,,,,AnalyzerCorrectness,,,Ported,,,
RS1006,#N/A,Microsoft.CodeAnalysis,Microsoft.CodeAnalysis.Analyzers,Invalid type argument for DiagnosticAnalyzer's Register method,"DiagnosticAnalyzer's language-specific Register methods, such as RegisterSyntaxNodeAction, RegisterCodeBlockStartAction and RegisterCodeBlockEndAction, expect a language-specific 'SyntaxKind' type argument for it's 'TLanguageKindEnumName' type parameter. Otherwise, the registered analyzer action can never be invoked during analysis.",,,,,,AnalyzerCorrectness,,,Ported,,,
RS1007,#N/A,Microsoft.CodeAnalysis,Microsoft.CodeAnalysis.Analyzers,Provide localizable arguments to diagnostic descriptor constructor,"If your diagnostic analyzer and it's reported diagnostics need to be localizable, then the supported DiagnosticDescriptors used for constructing the diagnostics must also be localizable. If so, then localizable argument(s) must be provided for parameter 'title' (and optionally 'description') to the diagnostic descriptor constructor to ensure that the descriptor is localizable.",,,,,,AnalyzerLocalization,,,Ported,,,
RS1008,#N/A,Microsoft.CodeAnalysis,Microsoft.CodeAnalysis.Analyzers,Avoid storing per-compilation data into the fields of a diagnostic analyzer,"Instance of a diagnostic analyzer might outlive the lifetime of compilation. Hence, storing per-compilation data, such as symbols, into the fields of a diagnostic analyzer might cause stale compilations to stay alive and cause memory leaks. Instead, you should store this data on a separate type instantiated in a compilation start action, registered using 'AnalysisContext.RegisterCompilationStartAction' API. An instance of this type will be created per-compilation and it won't outlive compilation's lifetime, hence avoiding memory leaks.",,,,,,AnalyzerPerformance,,,Ported,,,
RS1009,#N/A,Microsoft.CodeAnalysis,Microsoft.CodeAnalysis.Analyzers,Only internal implementations of this interface are allowed,The author of this interface did not intend to have third party implementations of this interface and reserves the right to change it. Implementing this interface could therefore result in a source or binary compatibility issue with a future version of this interface.,,,,,,Compatibility,,,Ported,,,
RS1010,#N/A,Microsoft.CodeAnalysis,Microsoft.CodeAnalysis.Analyzers,Create code actions should have a unique EquivalenceKey for FixAll occurrences support,"A CodeFixProvider that intends to support fix all occurrences must classify the registered code actions into equivalence classes by assigning it an explicit, non-null equivalence key which is unique across all registered code actions by this fixer. This enables the FixAllProvider to fix all diagnostics in the required scope by applying code actions from this fixer that are in the equivalence class of the trigger code action.",,,,,,Correctness,,,Ported,,,
RS1011,#N/A,Microsoft.CodeAnalysis,Microsoft.CodeAnalysis.Analyzers,Use code actions that have a unique EquivalenceKey for FixAll occurrences support,"A CodeFixProvider that intends to support fix all occurrences must classify the registered code actions into equivalence classes by assigning it an explicit, non-null equivalence key which is unique across all registered code actions by this fixer. This enables the FixAllProvider to fix all diagnostics in the required scope by applying code actions from this fixer that are in the equivalence class of the trigger code action.",,,,,,Correctness,,,Ported,,,
RS1012,#N/A,Microsoft.CodeAnalysis,Microsoft.CodeAnalysis.Analyzers,Start action has no registered actions,"An analyzer start action enables performing stateful analysis over a given code unit, such as a code block, compilation, etc. Careful design is necessary to achieve efficient analyzer execution without memory leaks. Use the following guidelines for writing such analyzers: 1. Define a new scope for the registered start action, possibly with a private nested type for analyzing each code unit. 2. If required, define and initialize state in the start action. 3. Register at least one non-end action that refers to this state in the start action. If no such action is necessary, consider replacing the start action with a non-start action. For example, a CodeBlockStartAction with no registered actions or only a registered CodeBlockEndAction should be replaced with a CodeBlockAction. 4. If required, register an end action to report diagnostics based on the final state.",,,,,,AnalyzerPerformance,,,Ported,,,
RS1013,#N/A,Microsoft.CodeAnalysis,Microsoft.CodeAnalysis.Analyzers,Start action has no registered non-end actions,"An analyzer start action enables performing stateful analysis over a given code unit, such as a code block, compilation, etc. Careful design is necessary to achieve efficient analyzer execution without memory leaks. Use the following guidelines for writing such analyzers: 1. Define a new scope for the registered start action, possibly with a private nested type for analyzing each code unit. 2. If required, define and initialize state in the start action. 3. Register at least one non-end action that refers to this state in the start action. If no such action is necessary, consider replacing the start action with a non-start action. For example, a CodeBlockStartAction with no registered actions or only a registered CodeBlockEndAction should be replaced with a CodeBlockAction. 4. If required, register an end action to report diagnostics based on the final state.",,,,,,AnalyzerPerformance,,,Ported,,,
