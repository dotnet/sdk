<!--
***********************************************************************************************
Microsoft.NET.Sdk.BlazorWebAssembly.ServiceWorker.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved.
***********************************************************************************************
-->

<Project>

  <UsingTask
    TaskName="Microsoft.AspNetCore.StaticWebAssets.Tasks.GenerateServiceWorkerAssetsManifest"
    AssemblyFile="$(StaticWebAssetsSdkBuildTasksAssembly)"
    Condition="'$(StaticWebAssetsSdkBuildTasksAssembly)' != ''" />

  <UsingTask
    TaskName="Microsoft.AspNetCore.StaticWebAssets.Tasks.UpdateServiceWorkerFileWithVersion"
    AssemblyFile="$(StaticWebAssetsSdkBuildTasksAssembly)"
    Condition="'$(StaticWebAssetsSdkBuildTasksAssembly)' != ''" />

  <PropertyGroup>

    <!--
      ResolveBuildRelatedStaticWebAssets
        ResolveBuildServiceWorkerStaticWebAssets
          GenerateBuildServiceWorkerStaticWebAssets
            ResolveBuildServiceWorkerStaticWebAssetsConfiguration
     -->
    <ResolveBuildRelatedStaticWebAssetsDependsOn>
      ResolveBuildServiceWorkerStaticWebAssets;
      $(ResolveBuildRelatedStaticWebAssetsDependsOn)
    </ResolveBuildRelatedStaticWebAssetsDependsOn>
    <ResolveBuildServiceWorkerStaticWebAssetsDependsOn>
      GenerateBuildServiceWorkerStaticWebAssets;
      $(ResolveBuildServiceWorkerStaticWebAssetsDependsOn)
    </ResolveBuildServiceWorkerStaticWebAssetsDependsOn>
    <GenerateBuildServiceWorkerStaticWebAssetsDependsOn>
      ResolveBuildServiceWorkerStaticWebAssetsConfiguration;
      $(GenerateBuildServiceWorkerStaticWebAssetsDependsOn)
    </GenerateBuildServiceWorkerStaticWebAssetsDependsOn>

    <!--
      ResolvePublishRelatedStaticWebAssets
        ResolvePublishServiceWorkerStaticWebAssets
          GeneratePublishServiceWorkerStaticWebAssets
            ResolvePublishServiceWorkerStaticWebAssetsConfiguration
     -->
    <ResolvePublishRelatedStaticWebAssetsDependsOn>
      ResolvePublishServiceWorkerStaticWebAssets;
      $(ResolvePublishRelatedStaticWebAssetsDependsOn)
    </ResolvePublishRelatedStaticWebAssetsDependsOn>
    <ResolvePublishServiceWorkerStaticWebAssetsDependsOn>
      GeneratePublishServiceWorkerStaticWebAssets;
      $(ResolvePublishServiceWorkerStaticWebAssetsDependsOn)
    </ResolvePublishServiceWorkerStaticWebAssetsDependsOn>
    <GeneratePublishServiceWorkerStaticWebAssetsDependsOn>
      ResolvePublishServiceWorkerStaticWebAssetsConfiguration;
      $(GeneratePublishServiceWorkerStaticWebAssetsDependsOn)
    </GeneratePublishServiceWorkerStaticWebAssetsDependsOn>

  </PropertyGroup>

  <!-- Build -->
  <Target Name="ResolveBuildServiceWorkerStaticWebAssets" DependsOnTargets="$(ResolveBuildServiceWorkerStaticWebAssetsDependsOn)">

    <DefineStaticWebAssets Condition="Exists('$(_BuildServiceWorkerFile)')"
      CandidateAssets="@(_BuildServiceWorker);@(_BuildServiceWorkerManifest)"
      RelativePathPattern="wwwroot/**"
      SourceType="Computed"
      SourceId="$(PackageId)"
      ContentRoot="$(IntermediateOutputPath)service-worker\"
      BasePath="$(StaticWebAssetBasePath)"
      AssetMergeSource="$(StaticWebAssetMergeTarget)"
      >
      <Output TaskParameter="Assets" ItemName="_ServiceWorkersBuildStaticWebAsset" />
    </DefineStaticWebAssets>

    <DefineStaticWebAssetEndpoints
      CandidateAssets="@(_ServiceWorkersBuildStaticWebAsset)"
      ExistingEndpoints="@(StaticWebAssetEndpoint)"
      ContentTypeMappings="@(StaticWebAssetContentTypeMapping)"
    >
      <Output TaskParameter="Endpoints" ItemName="_ServiceWorkersBuildStaticWebAssetEndpoint" />
    </DefineStaticWebAssetEndpoints>

    <ItemGroup>
      <StaticWebAsset Include="@(_ServiceWorkersBuildStaticWebAsset)" />
      <StaticWebAssetEndpoint Include="@(_ServiceWorkersBuildStaticWebAssetEndpoint)" />
    </ItemGroup>

  </Target>

  <Target Name="GenerateBuildServiceWorkerStaticWebAssets" DependsOnTargets="$(GenerateBuildServiceWorkerStaticWebAssetsDependsOn)">

    <ComputeStaticWebAssetsForCurrentProject
      Assets="@(_BuildAssetsForManifestCandidate)"
      ProjectMode="$(StaticWebAssetProjectMode)"
      AssetKind="Build"
      Source="$(PackageId)"
    >
      <Output TaskParameter="StaticWebAssets" ItemName="_BuildAssetsForManifest" />
    </ComputeStaticWebAssetsForCurrentProject>

    <ComputeStaticWebAssetsTargetPaths Assets="@(_BuildAssetsForManifest)" PathPrefix="$(StaticWebAssetBasePath)" UseAlternatePathDirectorySeparator="true">
      <Output TaskParameter="AssetsWithTargetPath" ItemName="_BuildAssetsForManifestWithTargetPath" />
    </ComputeStaticWebAssetsTargetPaths>

    <ItemGroup>
      <_BuildServiceWorkItem Include="@(_BuildAssetsForManifestWithTargetPath)">
        <AssetUrl>%(_BuildAssetsForManifestWithTargetPath.TargetPath)</AssetUrl>
      </_BuildServiceWorkItem>
    </ItemGroup>

    <GenerateServiceWorkerAssetsManifest
      Version="$(ServiceWorkerAssetsManifestVersion)"
      Assets="@(_BuildServiceWorkItem)"
      OutputPath="$(_BuildServiceWorkerManifestIntermediatePath)">
      <Output TaskParameter="CalculatedVersion" PropertyName="_BuildServiceWorkerAssetsManifestVersion" />
    </GenerateServiceWorkerAssetsManifest>

    <UpdateServiceWorkerFileWithVersion
      Condition="Exists('$(_BuildServiceWorkerSourcePath)') and '$(_BuildServiceWorkerAssetsManifestVersion)' != ''"
      ServiceWorkerSource="$(_BuildServiceWorkerSourcePath)"
      ServiceWorkerDestination="$(_BuildServiceWorkerFile)"
      ManifestVersion="$(_BuildServiceWorkerAssetsManifestVersion)" />

    <ItemGroup>
      <FileWrites Include="$(_BuildServiceWorkerManifestIntermediatePath)" />
      <FileWrites Include="$(_BuildServiceWorkerFile)" />
    </ItemGroup>

  </Target>

  <Target Name="ResolveBuildServiceWorkerStaticWebAssetsConfiguration" DependsOnTargets="ResolveStaticWebAssetsInputs">

    <PropertyGroup>
      <_BuildServiceWorkerManifestIntermediatePath>$(IntermediateOutputPath)service-worker\$(ServiceWorkerAssetsManifest).build</_BuildServiceWorkerManifestIntermediatePath>
    </PropertyGroup>

    <PropertyGroup Condition="'@(ServiceWorker)' != ''">
      <_BuildServiceWorkerSourcePath>%(ServiceWorker.Identity)</_BuildServiceWorkerSourcePath>
      <_BuildServiceWorkerFile>$(IntermediateOutputPath)service-worker\@(ServiceWorker->'%(FileName)%(Extension)').build</_BuildServiceWorkerFile>
    </PropertyGroup>

    <ItemGroup Condition="'@(ServiceWorker)' != ''">

      <!-- Service workers are defined as follows: <ServiceWorker Include="wwwroot\serviceworkers\my-service-worker.js" PublishedContent="wwwroot\serviceworkers\my-prod-service-worker.js" />
           The item in the Include attribute indicates the "development version" of the service worker file.
           The item on the PublishedContent attribute indicates the "publish version" of the service worker file.
           For PWAs we need to do the following:
           * At publish time, generate a file (typically service-worker-assets.js) that contains a list of resources (this is, all publish static web assets minus the assets we are about to define).
           * At publish time, after generating the manifest, we'll have a "version" hash. We need to update the "publish manifest" with that version.
      -->

      <!-- This is the dev service worker, which is defined as a Build static web asset -->
      <_BuildServiceWorker
        Condition="Exists('$(_BuildServiceWorkerSourcePath)')"
        Include="$(_BuildServiceWorkerFile)"
      >
        <OriginalItemSpec>$(_BuildServiceWorkerSourcePath)</OriginalItemSpec>
        <SourceType>Computed</SourceType>
        <AssetKind>Build</AssetKind>
        <TargetPath>$(_BuildServiceWorkerSourcePath)</TargetPath>
        <ContentRoot>$(IntermediateOutputPath)service-worker</ContentRoot>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        <CopyToPublishDirectory>Never</CopyToPublishDirectory>
        <AssetTraitName>BlazorServiceWorker</AssetTraitName>
        <AssetTraitValue>ServiceWorkerJs</AssetTraitValue>
      </_BuildServiceWorker>

      <!-- This is the build service worker manifest file -->
      <_BuildServiceWorkerManifest
        Include="$(_BuildServiceWorkerManifestIntermediatePath)"
      >
        <OriginalItemSpec>$(_BuildServiceWorkerManifestIntermediatePath)</OriginalItemSpec>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        <CopyToPublishDirectory>Never</CopyToPublishDirectory>
        <AssetKind>Build</AssetKind>
        <ContentRoot>$(IntermediateOutputPath)service-worker</ContentRoot>
        <TargetPath>wwwroot\$(ServiceWorkerAssetsManifest)</TargetPath>
        <AssetTraitName>BlazorServiceWorker</AssetTraitName>
        <AssetTraitValue>ServiceWorkerManifest</AssetTraitValue>
      </_BuildServiceWorkerManifest>
    </ItemGroup>

    <ItemGroup>
      <_BuildAssetsForManifestCandidate Include="@(StaticWebAsset)" Condition="'%(AssetRole)' != 'Alternative' and Exists('%(Identity)')" />
      <_BuildAssetsForManifestCandidate Include="@(StaticWebAsset->'%(OriginalItemSpec)')" Condition="'%(AssetRole)' != 'Alternative' and !Exists('%(Identity)')" />
    </ItemGroup>

    <MakeDir Directories="$(IntermediateOutputPath)service-worker" />
  </Target>

  <!-- Publish -->
  <Target Name="ResolvePublishServiceWorkerStaticWebAssets" DependsOnTargets="$(ResolvePublishServiceWorkerStaticWebAssetsDependsOn)">
    <DefineStaticWebAssets Condition="Exists('$(_PublishServiceWorkerFile)')"
      CandidateAssets="@(_PublishServiceWorker);@(_PublishServiceWorkerManifest)"
      RelativePathPattern="wwwroot/**"
      SourceType="Computed"
      SourceId="$(PackageId)"
      ContentRoot="$(IntermediateOutputPath)service-worker\"
      BasePath="$(StaticWebAssetBasePath)"
      AssetMergeSource="$(StaticWebAssetMergeTarget)"
    >
      <Output TaskParameter="Assets" ItemName="_ServiceWorkersPublishStaticWebAsset" />
    </DefineStaticWebAssets>

    <DefineStaticWebAssetEndpoints
      CandidateAssets="@(_ServiceWorkersPublishStaticWebAsset)"
      ExistingEndpoints="@(StaticWebAssetEndpoint)"
      ContentTypeMappings="@(StaticWebAssetContentTypeMapping)"
    >
      <Output TaskParameter="Endpoints" ItemName="_ServiceWorkersPublishStaticWebAssetEndpoint" />
    </DefineStaticWebAssetEndpoints>

    <ItemGroup>
      <StaticWebAsset Include="@(_ServiceWorkersPublishStaticWebAsset)" />
      <StaticWebAssetEndpoint Include="@(_ServiceWorkersPublishStaticWebAssetEndpoint)" />
    </ItemGroup>

  </Target>

  <Target Name="GeneratePublishServiceWorkerStaticWebAssets" DependsOnTargets="$(GeneratePublishServiceWorkerStaticWebAssetsDependsOn)">

    <ComputeStaticWebAssetsForCurrentProject
      Assets="@(_PublishAssetsForManifestCandidate)"
      ProjectMode="$(StaticWebAssetProjectMode)"
      AssetKind="Publish"
      Source="$(PackageId)"
    >
      <Output TaskParameter="StaticWebAssets" ItemName="_PublishAssetsForManifest" />
    </ComputeStaticWebAssetsForCurrentProject>

    <ComputeStaticWebAssetsTargetPaths Assets="@(_PublishAssetsForManifest)" PathPrefix="$(StaticWebAssetBasePath)" UseAlternatePathDirectorySeparator="true">
      <Output TaskParameter="AssetsWithTargetPath" ItemName="_PublishAssetsForManifestWithTargetPath" />
    </ComputeStaticWebAssetsTargetPaths>

    <ItemGroup>
      <_PublishServiceWorkItem Include="@(_PublishAssetsForManifestWithTargetPath)">
        <AssetUrl>%(_PublishAssetsForManifestWithTargetPath.TargetPath)</AssetUrl>
      </_PublishServiceWorkItem>
    </ItemGroup>

    <GenerateServiceWorkerAssetsManifest
      Version="$(ServiceWorkerAssetsManifestVersion)"
      Assets="@(_PublishServiceWorkItem)"
      OutputPath="$(_PublishServiceWorkerManifestIntermediatePath)"
    >
      <Output TaskParameter="CalculatedVersion" PropertyName="_PublishServiceWorkerAssetsManifestVersion" />
    </GenerateServiceWorkerAssetsManifest>

    <UpdateServiceWorkerFileWithVersion
      Condition="Exists('$(_PublishServiceWorkerSourcePath)') and '$(_PublishServiceWorkerAssetsManifestVersion)' != ''"
      ServiceWorkerSource="$(_PublishServiceWorkerSourcePath)"
      ServiceWorkerDestination="$(_PublishServiceWorkerFile)"
      ManifestVersion="$(_PublishServiceWorkerAssetsManifestVersion)" />

    <ItemGroup>
      <FileWrites Include="$(_PublishServiceWorkerManifestIntermediatePath)" />
      <FileWrites Include="$(_PublishServiceWorkerFile)" />
    </ItemGroup>

  </Target>

  <Target Name="ResolvePublishServiceWorkerStaticWebAssetsConfiguration" DependsOnTargets="ResolvePublishStaticWebAssets">
    <PropertyGroup>
      <_PublishServiceWorkerManifestIntermediatePath>$(IntermediateOutputPath)service-worker\$(ServiceWorkerAssetsManifest).publish</_PublishServiceWorkerManifestIntermediatePath>
    </PropertyGroup>

    <PropertyGroup Condition="'@(ServiceWorker)' != ''">
      <_PublishServiceWorkerSourcePath>@(ServiceWorker->'%(PublishedContent)')</_PublishServiceWorkerSourcePath>
      <_PublishServiceWorkerFile>$(IntermediateOutputPath)service-worker\$([System.IO.Path]::GetFileName('$(_PublishServiceWorkerSourcePath)')).publish</_PublishServiceWorkerFile>
    </PropertyGroup>

    <ItemGroup Condition="'@(ServiceWorker)' != ''">

      <!-- This is the publish service worker, which will be generated during publish and that is defined here as a Publish
           static web asset.
      -->
      <_PublishServiceWorker
        Include="$(_PublishServiceWorkerFile)"
      >
        <TargetPath>@(ServiceWorker->'%(Identity)')</TargetPath>
        <ContentRoot>$(IntermediateOutputPath)service-worker</ContentRoot>
        <AssetTraitName>BlazorServiceWorker</AssetTraitName>
        <AssetTraitValue>ServiceWorkerJs</AssetTraitValue>
        <AssetKind>Publish</AssetKind>
        <CopyToOutputDirectory>Never</CopyToOutputDirectory>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <OriginalItemSpec>$(_PublishServiceWorkerSourcePath)</OriginalItemSpec>
      </_PublishServiceWorker>

      <!-- This is the publish service worker manifest file -->
      <_PublishServiceWorkerManifest
        Include="$(_PublishServiceWorkerManifestIntermediatePath)"
      >
        <OriginalItemSpec>$(_PublishServiceWorkerManifestIntermediatePath)</OriginalItemSpec>
        <ContentRoot>$(IntermediateOutputPath)service-worker</ContentRoot>
        <CopyToOutputDirectory>Never</CopyToOutputDirectory>
        <AssetKind>Publish</AssetKind>
        <TargetPath>wwwroot\$(ServiceWorkerAssetsManifest)</TargetPath>
        <AssetTraitName>BlazorServiceWorker</AssetTraitName>
        <AssetTraitValue>ServiceWorkerManifest</AssetTraitValue>
      </_PublishServiceWorkerManifest>

    </ItemGroup>

    <ItemGroup>
      <_PublishAssetsForManifestCandidate Include="@(StaticWebAsset)" Condition="'%(StaticWebAsset.AssetTraitName)' != 'BlazorServiceWorker' and '%(AssetRole)' != 'Alternative'" />
    </ItemGroup>

    <MakeDir Directories="$(IntermediateOutputPath)service-worker" />

  </Target>

  <Target Name="_OmitServiceWorkerContent"
    BeforeTargets="ResolveProjectStaticWebAssets">

    <ItemGroup>
      <!-- Don't emit the service worker source files to the output -->
      <Content Remove="@(ServiceWorker)" />
      <Content Remove="@(ServiceWorker->'%(PublishedContent)')" />
    </ItemGroup>
  </Target>

</Project>
