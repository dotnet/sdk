From 4c00486cbca37b9640d9243c2e83e598ced2976b Mon Sep 17 00:00:00 2001
From: Matt Thalman <mthalman@microsoft.com>
Date: Wed, 8 Jan 2025 07:20:08 -0600
Subject: [PATCH] Fix code analysis issues

Backport: TODO
---
 .../Drawing/Printing/PrinterSettings.StringCollection.cs    | 2 +-
 .../src/System/Collections/Generic/CollectionExtensions.cs  | 2 +-
 src/System.Private.Windows.GdiPlus/System/Drawing/IIcon.cs  | 2 +-
 .../Windows/Forms/ActiveX/AxHost.AxPropertyDescriptor.cs    | 2 +-
 .../ComponentModel/COM2Interop/COM2PropertyDescriptor.cs    | 2 +-
 .../COM2Interop/ICom2ExtendedBrowsingHandler.cs             | 4 ++--
 .../src/System/Windows/Forms/Controls/ComboBox/ComboBox.cs  | 2 +-
 .../System/Windows/Forms/Controls/ToolStrips/ToolStrip.cs   | 2 +-
 .../Windows/Forms/Controls/ToolStrips/ToolStripDropDown.cs  | 2 +-
 .../Windows/Forms/Dialogs/TaskDialog/TaskDialogPage.cs      | 6 +++---
 10 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/src/System.Drawing.Common/src/System/Drawing/Printing/PrinterSettings.StringCollection.cs b/src/System.Drawing.Common/src/System/Drawing/Printing/PrinterSettings.StringCollection.cs
index 15dc585aa..d063cdd21 100644
--- a/src/System.Drawing.Common/src/System/Drawing/Printing/PrinterSettings.StringCollection.cs
+++ b/src/System.Drawing.Common/src/System/Drawing/Printing/PrinterSettings.StringCollection.cs
@@ -15,7 +15,7 @@ public partial class PrinterSettings
         /// <summary>
         ///  Initializes a new instance of the <see cref='StringCollection'/> class.
         /// </summary>
-        public StringCollection(string[] array) => _list = new(array);
+        public StringCollection(string[] array) => _list = [..array];
 
         /// <summary>
         ///  Gets a value indicating the number of strings.
diff --git a/src/System.Private.Windows.Core/src/System/Collections/Generic/CollectionExtensions.cs b/src/System.Private.Windows.Core/src/System/Collections/Generic/CollectionExtensions.cs
index 15dd20bbf..eb0852ff0 100644
--- a/src/System.Private.Windows.Core/src/System/Collections/Generic/CollectionExtensions.cs
+++ b/src/System.Private.Windows.Core/src/System/Collections/Generic/CollectionExtensions.cs
@@ -25,7 +25,7 @@ internal static class CollectionExtensions
         }
 
         // Fall back to just setting the count (by removing).
-        List<T> list = new(readOnlyList);
+        List<T> list = [..readOnlyList];
         list.RemoveRange(count, list.Count - count);
         return list;
     }
diff --git a/src/System.Private.Windows.GdiPlus/System/Drawing/IIcon.cs b/src/System.Private.Windows.GdiPlus/System/Drawing/IIcon.cs
index 7b53bdaf0..5eed2338f 100644
--- a/src/System.Private.Windows.GdiPlus/System/Drawing/IIcon.cs
+++ b/src/System.Private.Windows.GdiPlus/System/Drawing/IIcon.cs
@@ -5,5 +5,5 @@ namespace System.Drawing;
 
 internal interface IIcon : IHandle<HICON>
 {
-    public Size Size { get; }
+    Size Size { get; }
 }
diff --git a/src/System.Windows.Forms/src/System/Windows/Forms/ActiveX/AxHost.AxPropertyDescriptor.cs b/src/System.Windows.Forms/src/System/Windows/Forms/ActiveX/AxHost.AxPropertyDescriptor.cs
index 0d60dda12..d66e015cd 100644
--- a/src/System.Windows.Forms/src/System/Windows/Forms/ActiveX/AxHost.AxPropertyDescriptor.cs
+++ b/src/System.Windows.Forms/src/System/Windows/Forms/ActiveX/AxHost.AxPropertyDescriptor.cs
@@ -254,7 +254,7 @@ public abstract partial class AxHost
                 return;
             }
 
-            List<Attribute> attributes = new(AttributeArray!);
+            List<Attribute> attributes = [..AttributeArray!];
             attributes.AddRange(_updateAttributes);
             AttributeArray = [.. attributes];
             _updateAttributes.Clear();
diff --git a/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/COM2PropertyDescriptor.cs b/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/COM2PropertyDescriptor.cs
index 33dd3d9e8..53a8148a3 100644
--- a/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/COM2PropertyDescriptor.cs
+++ b/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/COM2PropertyDescriptor.cs
@@ -238,7 +238,7 @@ internal unsafe partial class Com2PropertyDescriptor : PropertyDescriptor, IClon
 
                 if (attributeList.Count > 0)
                 {
-                    newAttributes ??= new(AttributeArray);
+                    newAttributes ??= [..AttributeArray];
 
                     // Push any new attributes into the base type.
                     for (int i = 0; i < attributeList.Count; i++)
diff --git a/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/ICom2ExtendedBrowsingHandler.cs b/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/ICom2ExtendedBrowsingHandler.cs
index 291b42c5d..8fb6a7b67 100644
--- a/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/ICom2ExtendedBrowsingHandler.cs
+++ b/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/ICom2ExtendedBrowsingHandler.cs
@@ -21,11 +21,11 @@ internal unsafe interface ICom2ExtendedBrowsingHandler
     /// <summary>
     ///  Returns <see langword="true"/> if the given object is supported by this type.
     /// </summary>
-    public bool ObjectSupportsInterface(object @object);
+    bool ObjectSupportsInterface(object @object);
 
     /// <summary>
     ///  Called to setup the property handlers on a given property. In this method, the handler will add listeners
     ///  to the events that the <see cref="Com2PropertyDescriptor"/> surfaces that it cares about.
     /// </summary>
-    public void RegisterEvents(Com2PropertyDescriptor[]? properties);
+    void RegisterEvents(Com2PropertyDescriptor[]? properties);
 }
diff --git a/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ComboBox/ComboBox.cs b/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ComboBox/ComboBox.cs
index d078054db..95f65362b 100644
--- a/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ComboBox/ComboBox.cs
+++ b/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ComboBox/ComboBox.cs
@@ -2052,7 +2052,7 @@ public partial class ComboBox : ListControl
                 else
                 {
                     // Remove one character from matching text and rematch
-                    MatchingText = MatchingText.Remove(MatchingText.Length - 1);
+                    MatchingText = MatchingText[..^1];
                     SelectedIndex = FindString(MatchingText);
                 }
 
diff --git a/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStrip.cs b/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStrip.cs
index 040b4ff8e..4775f3e96 100644
--- a/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStrip.cs
+++ b/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStrip.cs
@@ -3933,7 +3933,7 @@ public partial class ToolStrip : ScrollableControl, IArrangedElement, ISupportTo
     /// <param name="items">contains ToolStrip or ToolStripDropDown items to disconnect</param>
     internal virtual void ReleaseToolStripItemsProviders(ToolStripItemCollection items)
     {
-        ToolStripItem[] itemsArray = items.Cast<ToolStripItem>().ToArray();
+        ToolStripItem[] itemsArray = [..items.Cast<ToolStripItem>()];
         foreach (ToolStripItem toolStripItem in itemsArray)
         {
             if (toolStripItem is ToolStripDropDownItem dropDownItem && dropDownItem.DropDownItems.Count > 0)
diff --git a/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStripDropDown.cs b/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStripDropDown.cs
index 83777ba57..573607e61 100644
--- a/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStripDropDown.cs
+++ b/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStripDropDown.cs
@@ -1948,7 +1948,7 @@ public partial class ToolStripDropDown : ToolStrip
         }
         else
         {
-            List<ToolStripDropDown> dropDowns = new(ActiveDropDowns);
+            List<ToolStripDropDown> dropDowns = [..ActiveDropDowns];
 
             // We can't iterate through the active dropdown collection
             // here as changing visibility changes the collection.
diff --git a/src/System.Windows.Forms/src/System/Windows/Forms/Dialogs/TaskDialog/TaskDialogPage.cs b/src/System.Windows.Forms/src/System/Windows/Forms/Dialogs/TaskDialog/TaskDialogPage.cs
index 40be8a27f..d0ce8db76 100644
--- a/src/System.Windows.Forms/src/System/Windows/Forms/Dialogs/TaskDialog/TaskDialogPage.cs
+++ b/src/System.Windows.Forms/src/System/Windows/Forms/Dialogs/TaskDialog/TaskDialogPage.cs
@@ -868,10 +868,10 @@ public class TaskDialogPage
         radioButtons.BoundPage = this;
 
         // Sort the buttons.
-        _boundCustomButtons = buttons.Where(e => !e.IsStandardButton).ToArray();
-        _boundStandardButtonsByID = new Dictionary<int, TaskDialogButton>(
+        _boundCustomButtons = [..buttons.Where(e => !e.IsStandardButton)];
+        _boundStandardButtonsByID = [..
             buttons.Where(e => e.IsStandardButton)
-            .Select(e => new KeyValuePair<int, TaskDialogButton>(e.ButtonID, e)));
+            .Select(e => new KeyValuePair<int, TaskDialogButton>(e.ButtonID, e))];
 
         // Assign IDs to the buttons based on their index.
         defaultButtonID = 0;
