From 03549bcc6e902a551be08339490e9f13db217ad6 Mon Sep 17 00:00:00 2001
From: Matt Thalman <mthalman@microsoft.com>
Date: Wed, 8 Jan 2025 07:20:08 -0600
Subject: [PATCH] Fix code analysis issues

Backport: https://github.com/dotnet/winforms/pull/12735
---
 .../Drawing/Printing/PrinterSettings.StringCollection.cs  | 2 +-
 .../System/Collections/Generic/CollectionExtensions.cs    | 2 +-
 .../System/Drawing/IIcon.cs                               | 2 +-
 .../CollectionEditor.CollectionEditorCollectionForm.cs    | 2 +-
 .../src/System/ComponentModel/Design/DesignerHost.cs      | 2 +-
 ...omSerializationStore.ComponentListCodeDomSerializer.cs | 2 +-
 .../Windows/Forms/Design/Behavior/SelectionManager.cs     | 4 ++--
 .../Forms/Design/Behavior/TableLayoutPanelBehavior.cs     | 2 +-
 .../Design/Behavior/ToolStripPanelSelectionBehavior.cs    | 2 +-
 .../src/System/Windows/Forms/Design/CommandSet.cs         | 2 +-
 .../Windows/Forms/Design/FlowLayoutPanelDesigner .cs      | 2 +-
 .../src/System/Windows/Forms/Design/OleDragDropHandler.cs | 2 +-
 .../Windows/Forms/Design/TableLayoutPanelDesigner.cs      | 2 +-
 .../Windows/Forms/ActiveX/AxHost.AxPropertyDescriptor.cs  | 2 +-
 .../ComponentModel/COM2Interop/COM2PropertyDescriptor.cs  | 2 +-
 .../COM2Interop/ICom2ExtendedBrowsingHandler.cs           | 4 ++--
 .../System/Windows/Forms/Controls/ComboBox/ComboBox.cs    | 2 +-
 .../System/Windows/Forms/Controls/ToolStrips/ToolStrip.cs | 2 +-
 .../Forms/Controls/ToolStrips/ToolStripDropDown.cs        | 2 +-
 .../Windows/Forms/Dialogs/TaskDialog/TaskDialogPage.cs    | 8 ++++----
 20 files changed, 25 insertions(+), 25 deletions(-)

diff --git a/src/System.Drawing.Common/src/System/Drawing/Printing/PrinterSettings.StringCollection.cs b/src/System.Drawing.Common/src/System/Drawing/Printing/PrinterSettings.StringCollection.cs
index 15dc585aa..d063cdd21 100644
--- a/src/System.Drawing.Common/src/System/Drawing/Printing/PrinterSettings.StringCollection.cs
+++ b/src/System.Drawing.Common/src/System/Drawing/Printing/PrinterSettings.StringCollection.cs
@@ -15,7 +15,7 @@ public partial class PrinterSettings
         /// <summary>
         ///  Initializes a new instance of the <see cref='StringCollection'/> class.
         /// </summary>
-        public StringCollection(string[] array) => _list = new(array);
+        public StringCollection(string[] array) => _list = [..array];
 
         /// <summary>
         ///  Gets a value indicating the number of strings.
diff --git a/src/System.Private.Windows.Core/src/System/Collections/Generic/CollectionExtensions.cs b/src/System.Private.Windows.Core/src/System/Collections/Generic/CollectionExtensions.cs
index 15dd20bbf..eb0852ff0 100644
--- a/src/System.Private.Windows.Core/src/System/Collections/Generic/CollectionExtensions.cs
+++ b/src/System.Private.Windows.Core/src/System/Collections/Generic/CollectionExtensions.cs
@@ -25,7 +25,7 @@ internal static class CollectionExtensions
         }
 
         // Fall back to just setting the count (by removing).
-        List<T> list = new(readOnlyList);
+        List<T> list = [..readOnlyList];
         list.RemoveRange(count, list.Count - count);
         return list;
     }
diff --git a/src/System.Private.Windows.GdiPlus/System/Drawing/IIcon.cs b/src/System.Private.Windows.GdiPlus/System/Drawing/IIcon.cs
index 7b53bdaf0..5eed2338f 100644
--- a/src/System.Private.Windows.GdiPlus/System/Drawing/IIcon.cs
+++ b/src/System.Private.Windows.GdiPlus/System/Drawing/IIcon.cs
@@ -5,5 +5,5 @@ namespace System.Drawing;
 
 internal interface IIcon : IHandle<HICON>
 {
-    public Size Size { get; }
+    Size Size { get; }
 }
diff --git a/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/CollectionEditor.CollectionEditorCollectionForm.cs b/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/CollectionEditor.CollectionEditorCollectionForm.cs
index e5428772c..d30b80ffb 100644
--- a/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/CollectionEditor.CollectionEditorCollectionForm.cs
+++ b/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/CollectionEditor.CollectionEditorCollectionForm.cs
@@ -807,7 +807,7 @@ public partial class CollectionEditor
                 {
                     if (_listBox.SelectedItems.Count > 1)
                     {
-                        List<ListItem> toBeDeleted = _listBox.SelectedItems.Cast<ListItem>().ToList();
+                        List<ListItem> toBeDeleted = [.._listBox.SelectedItems.Cast<ListItem>()];
                         foreach (ListItem item in toBeDeleted)
                         {
                             RemoveInternal(item);
diff --git a/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/DesignerHost.cs b/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/DesignerHost.cs
index 0e5f01025..1260870a2 100644
--- a/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/DesignerHost.cs
+++ b/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/DesignerHost.cs
@@ -1119,7 +1119,7 @@ internal sealed partial class DesignerHost : Container, IDesignerLoaderHost2, ID
             _state[s_stateLoading] = true;
             Unload();
 
-            List<object> errorList = errorCollection is null ? [] : errorCollection.Cast<object>().ToList();
+            List<object> errorList = errorCollection is null ? [] : [..errorCollection.Cast<object>()];
             errorList.Insert(0, ex);
 
             errorCollection = errorList;
diff --git a/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/Serialization/CodeDomComponentSerializationService.CodeDomSerializationStore.ComponentListCodeDomSerializer.cs b/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/Serialization/CodeDomComponentSerializationService.CodeDomSerializationStore.ComponentListCodeDomSerializer.cs
index 9eb2a6a71..cb2e80289 100644
--- a/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/Serialization/CodeDomComponentSerializationService.CodeDomSerializationStore.ComponentListCodeDomSerializer.cs
+++ b/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/Serialization/CodeDomComponentSerializationService.CodeDomSerializationStore.ComponentListCodeDomSerializer.cs
@@ -91,7 +91,7 @@ public sealed partial class CodeDomComponentSerializationService
 
                 // We need to also ensure that for every entry in the statement table we have a
                 // corresponding entry in objectNames. Otherwise, we won't deserialize completely.
-                HashSet<string> completeNames = new(objectNames);
+                HashSet<string> completeNames = [..objectNames];
                 completeNames.UnionWith(_statementsTable.Keys);
 
                 _objectState = new(objectState);
diff --git a/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/Behavior/SelectionManager.cs b/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/Behavior/SelectionManager.cs
index 73648af22..23bbac7ba 100644
--- a/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/Behavior/SelectionManager.cs
+++ b/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/Behavior/SelectionManager.cs
@@ -257,7 +257,7 @@ internal sealed class SelectionManager : IDisposable
     /// </summary>
     private void OnBeginDrag(object? source, BehaviorDragDropEventArgs e)
     {
-        List<IComponent> dragComps = e.DragComponents.Cast<IComponent>().ToList();
+        List<IComponent> dragComps = [..e.DragComponents.Cast<IComponent>()];
         List<Glyph> glyphsToRemove = [];
         foreach (ControlBodyGlyph g in BodyGlyphAdorner.Glyphs)
         {
@@ -412,7 +412,7 @@ internal sealed class SelectionManager : IDisposable
             SelectionGlyphAdorner.Glyphs.Clear();
             BodyGlyphAdorner.Glyphs.Clear();
 
-            List<IComponent> selComps = _selectionService.GetSelectedComponents().Cast<IComponent>().ToList();
+            List<IComponent> selComps = [.._selectionService.GetSelectedComponents().Cast<IComponent>()];
             object? primarySelection = _selectionService.PrimarySelection;
 
             // add all control glyphs to all controls on rootComp
diff --git a/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/Behavior/TableLayoutPanelBehavior.cs b/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/Behavior/TableLayoutPanelBehavior.cs
index eb6b29b06..a0514c3ac 100644
--- a/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/Behavior/TableLayoutPanelBehavior.cs
+++ b/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/Behavior/TableLayoutPanelBehavior.cs
@@ -166,7 +166,7 @@ internal class TableLayoutPanelBehavior : Behavior
     {
         if ((_styles is null || isColumn != _currentColumnStyles) && _table is not null)
         {
-            _styles = ((TableLayoutStyleCollection)_changedProp.GetValue(_table)).Cast<TableLayoutStyle>().ToList();
+            _styles = [..((TableLayoutStyleCollection)_changedProp.GetValue(_table)).Cast<TableLayoutStyle>()];
             _currentColumnStyles = isColumn;
         }
     }
diff --git a/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/Behavior/ToolStripPanelSelectionBehavior.cs b/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/Behavior/ToolStripPanelSelectionBehavior.cs
index e717ea8d0..1f5aa98e0 100644
--- a/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/Behavior/ToolStripPanelSelectionBehavior.cs
+++ b/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/Behavior/ToolStripPanelSelectionBehavior.cs
@@ -223,7 +223,7 @@ internal sealed class ToolStripPanelSelectionBehavior : Behavior
 
         if (e.Data is DropSourceBehavior.BehaviorDataObject data)
         {
-            components = new List<IComponent>(data.DragComponents);
+            components = [..data.DragComponents];
 
             foreach (IComponent dragComponent in components)
             {
diff --git a/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/CommandSet.cs b/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/CommandSet.cs
index d39ed9f70..2b4645fd5 100644
--- a/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/CommandSet.cs
+++ b/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/CommandSet.cs
@@ -804,7 +804,7 @@ internal partial class CommandSet : IDisposable
                     // Don't snap if we are moving a component in the ComponentTray
                     if (invertSnap && useSnapLines && primaryControl is not null && comp.Site is not null)
                     {
-                        List<IComponent> selComps = SelectionService.GetSelectedComponents().Cast<IComponent>().ToList();
+                        List<IComponent> selComps = [..SelectionService.GetSelectedComponents().Cast<IComponent>()];
 
                         // create our snapline engine
                         dragManager = new DragAssistanceManager(comp.Site, selComps);
diff --git a/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/FlowLayoutPanelDesigner .cs b/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/FlowLayoutPanelDesigner .cs
index 3db868f5c..0e92902a0 100644
--- a/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/FlowLayoutPanelDesigner .cs	
+++ b/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/FlowLayoutPanelDesigner .cs	
@@ -757,7 +757,7 @@ internal partial class FlowLayoutPanelDesigner : FlowPanelDesigner
         // Get the sorted drag controls. We use these for an internal drag.
         if (de.Data is DropSourceBehavior.BehaviorDataObject data)
         {
-            _dragControls = data.GetSortedDragControls(out int primaryIndex).OfType<Control>().ToList();
+            _dragControls = [..data.GetSortedDragControls(out int primaryIndex).OfType<Control>()];
             _primaryDragControl = _dragControls[primaryIndex];
         }
 
diff --git a/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/OleDragDropHandler.cs b/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/OleDragDropHandler.cs
index bcf00c49a..8adc80b1c 100644
--- a/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/OleDragDropHandler.cs
+++ b/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/OleDragDropHandler.cs
@@ -257,7 +257,7 @@ internal partial class OleDragDropHandler
         {
             host?.Activate();
 
-            List<IComponent> selectComps = new(comps);
+            List<IComponent> selectComps = [..comps];
 
             for (int i = 0; i < comps.Length; i++)
             {
diff --git a/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/TableLayoutPanelDesigner.cs b/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/TableLayoutPanelDesigner.cs
index 1ea69253c..7f8d0da94 100644
--- a/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/TableLayoutPanelDesigner.cs
+++ b/src/System.Windows.Forms.Design/src/System/Windows/Forms/Design/TableLayoutPanelDesigner.cs
@@ -952,7 +952,7 @@ internal partial class TableLayoutPanelDesigner : FlowPanelDesigner
     {
         if (de.Data is DropSourceBehavior.BehaviorDataObject data)
         {
-            _dragComponents = new List<IComponent>(data.DragComponents);
+            _dragComponents = [..data.DragComponents];
             return _dragComponents[0] as Control;
         }
 
diff --git a/src/System.Windows.Forms/src/System/Windows/Forms/ActiveX/AxHost.AxPropertyDescriptor.cs b/src/System.Windows.Forms/src/System/Windows/Forms/ActiveX/AxHost.AxPropertyDescriptor.cs
index 0d60dda12..d66e015cd 100644
--- a/src/System.Windows.Forms/src/System/Windows/Forms/ActiveX/AxHost.AxPropertyDescriptor.cs
+++ b/src/System.Windows.Forms/src/System/Windows/Forms/ActiveX/AxHost.AxPropertyDescriptor.cs
@@ -254,7 +254,7 @@ public abstract partial class AxHost
                 return;
             }
 
-            List<Attribute> attributes = new(AttributeArray!);
+            List<Attribute> attributes = [..AttributeArray!];
             attributes.AddRange(_updateAttributes);
             AttributeArray = [.. attributes];
             _updateAttributes.Clear();
diff --git a/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/COM2PropertyDescriptor.cs b/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/COM2PropertyDescriptor.cs
index 33dd3d9e8..53a8148a3 100644
--- a/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/COM2PropertyDescriptor.cs
+++ b/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/COM2PropertyDescriptor.cs
@@ -238,7 +238,7 @@ internal unsafe partial class Com2PropertyDescriptor : PropertyDescriptor, IClon
 
                 if (attributeList.Count > 0)
                 {
-                    newAttributes ??= new(AttributeArray);
+                    newAttributes ??= [..AttributeArray];
 
                     // Push any new attributes into the base type.
                     for (int i = 0; i < attributeList.Count; i++)
diff --git a/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/ICom2ExtendedBrowsingHandler.cs b/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/ICom2ExtendedBrowsingHandler.cs
index 291b42c5d..8fb6a7b67 100644
--- a/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/ICom2ExtendedBrowsingHandler.cs
+++ b/src/System.Windows.Forms/src/System/Windows/Forms/ComponentModel/COM2Interop/ICom2ExtendedBrowsingHandler.cs
@@ -21,11 +21,11 @@ internal unsafe interface ICom2ExtendedBrowsingHandler
     /// <summary>
     ///  Returns <see langword="true"/> if the given object is supported by this type.
     /// </summary>
-    public bool ObjectSupportsInterface(object @object);
+    bool ObjectSupportsInterface(object @object);
 
     /// <summary>
     ///  Called to setup the property handlers on a given property. In this method, the handler will add listeners
     ///  to the events that the <see cref="Com2PropertyDescriptor"/> surfaces that it cares about.
     /// </summary>
-    public void RegisterEvents(Com2PropertyDescriptor[]? properties);
+    void RegisterEvents(Com2PropertyDescriptor[]? properties);
 }
diff --git a/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ComboBox/ComboBox.cs b/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ComboBox/ComboBox.cs
index d078054db..95f65362b 100644
--- a/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ComboBox/ComboBox.cs
+++ b/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ComboBox/ComboBox.cs
@@ -2052,7 +2052,7 @@ public partial class ComboBox : ListControl
                 else
                 {
                     // Remove one character from matching text and rematch
-                    MatchingText = MatchingText.Remove(MatchingText.Length - 1);
+                    MatchingText = MatchingText[..^1];
                     SelectedIndex = FindString(MatchingText);
                 }
 
diff --git a/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStrip.cs b/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStrip.cs
index 040b4ff8e..4775f3e96 100644
--- a/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStrip.cs
+++ b/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStrip.cs
@@ -3933,7 +3933,7 @@ public partial class ToolStrip : ScrollableControl, IArrangedElement, ISupportTo
     /// <param name="items">contains ToolStrip or ToolStripDropDown items to disconnect</param>
     internal virtual void ReleaseToolStripItemsProviders(ToolStripItemCollection items)
     {
-        ToolStripItem[] itemsArray = items.Cast<ToolStripItem>().ToArray();
+        ToolStripItem[] itemsArray = [..items.Cast<ToolStripItem>()];
         foreach (ToolStripItem toolStripItem in itemsArray)
         {
             if (toolStripItem is ToolStripDropDownItem dropDownItem && dropDownItem.DropDownItems.Count > 0)
diff --git a/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStripDropDown.cs b/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStripDropDown.cs
index 83777ba57..573607e61 100644
--- a/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStripDropDown.cs
+++ b/src/System.Windows.Forms/src/System/Windows/Forms/Controls/ToolStrips/ToolStripDropDown.cs
@@ -1948,7 +1948,7 @@ public partial class ToolStripDropDown : ToolStrip
         }
         else
         {
-            List<ToolStripDropDown> dropDowns = new(ActiveDropDowns);
+            List<ToolStripDropDown> dropDowns = [..ActiveDropDowns];
 
             // We can't iterate through the active dropdown collection
             // here as changing visibility changes the collection.
diff --git a/src/System.Windows.Forms/src/System/Windows/Forms/Dialogs/TaskDialog/TaskDialogPage.cs b/src/System.Windows.Forms/src/System/Windows/Forms/Dialogs/TaskDialog/TaskDialogPage.cs
index 40be8a27f..f8b6f7f43 100644
--- a/src/System.Windows.Forms/src/System/Windows/Forms/Dialogs/TaskDialog/TaskDialogPage.cs
+++ b/src/System.Windows.Forms/src/System/Windows/Forms/Dialogs/TaskDialog/TaskDialogPage.cs
@@ -868,10 +868,10 @@ public class TaskDialogPage
         radioButtons.BoundPage = this;
 
         // Sort the buttons.
-        _boundCustomButtons = buttons.Where(e => !e.IsStandardButton).ToArray();
-        _boundStandardButtonsByID = new Dictionary<int, TaskDialogButton>(
-            buttons.Where(e => e.IsStandardButton)
-            .Select(e => new KeyValuePair<int, TaskDialogButton>(e.ButtonID, e)));
+        _boundCustomButtons = [..buttons.Where(e => !e.IsStandardButton)];
+        _boundStandardButtonsByID = buttons
+            .Where(e => e.IsStandardButton)
+            .ToDictionary(e => e.ButtonID);
 
         // Assign IDs to the buttons based on their index.
         defaultButtonID = 0;
