From bb3e6919a6c21de94f4d942ca9fb2e9151f29d73 Mon Sep 17 00:00:00 2001
From: Viktor Hofer <viktor.hofer@microsoft.com>
Date: Fri, 28 Feb 2025 13:52:59 +0100
Subject: [PATCH 2/4] Remove more netstandard1.x packages and infra support for
 it

---
 Directory.Build.props                         |    3 -
 src/referencePackages/Directory.Build.targets |   57 -
 .../4.7.0/Microsoft.CSharp.4.7.0.csproj       |    6 +-
 .../4.7.0/microsoft.csharp.nuspec             |    9 -
 .../ref/netstandard1.0/Microsoft.CSharp.cs    |  103 -
 .../Microsoft.VisualBasic.10.3.0.csproj       |    2 +-
 .../10.3.0/microsoft.visualbasic.nuspec       |    8 -
 .../netstandard1.1/Microsoft.VisualBasic.cs   |  332 -
 .../Microsoft.Win32.Primitives.4.3.0.csproj   |   14 -
 .../4.3.0/microsoft.win32.primitives.nuspec   |   30 -
 .../Microsoft.Win32.Primitives.cs             |   41 -
 .../Microsoft.Win32.Registry.5.0.0.csproj     |    2 +-
 .../5.0.0/microsoft.win32.registry.nuspec     |    3 -
 .../Microsoft.Win32.Registry.cs               |  185 -
 .../4.3.0/System.AppContext.4.3.0.csproj      |   16 -
 .../4.3.0/ref/netstandard/_._                 |    0
 .../ref/netstandard1.3/System.AppContext.cs   |   34 -
 .../ref/netstandard1.6/System.AppContext.cs   |   39 -
 .../4.3.0/system.appcontext.nuspec            |   31 -
 .../4.3.0/System.Buffers.4.3.0.csproj         |   17 -
 .../lib/netstandard1.1/System.Buffers.cs      |   38 -
 .../4.3.0/system.buffers.nuspec               |   32 -
 .../4.5.1/System.Buffers.4.5.1.csproj         |   10 +-
 .../ref/netstandard1.1/System.Buffers.cs      |   39 -
 .../4.5.1/system.buffers.nuspec               |    7 -
 ...System.Collections.Concurrent.4.3.0.csproj |   26 -
 .../System.Collections.Concurrent.cs          |  379 --
 .../System.Collections.Concurrent.cs          |  386 --
 .../system.collections.concurrent.nuspec      |   45 -
 .../System.Collections.Immutable.5.0.0.csproj |    6 +-
 .../System.Collections.Immutable.cs           | 1971 ------
 .../System.Collections.Immutable.cs           | 1995 ------
 .../5.0.0/system.collections.immutable.nuspec |    7 -
 .../4.3.0/System.Collections.4.3.0.csproj     |   20 -
 .../ref/netstandard1.0/System.Collections.cs  |  972 ---
 .../ref/netstandard1.3/System.Collections.cs  | 1078 ----
 .../4.3.0/system.collections.nuspec           |   43 -
 ...em.ComponentModel.Annotations.5.0.0.csproj |   10 +-
 .../System.ComponentModel.Annotations.cs      |  390 --
 .../System.ComponentModel.Annotations.cs      |  570 --
 .../System.ComponentModel.Annotations.cs      |  573 --
 .../system.componentmodel.annotations.nuspec  |   11 -
 .../4.3.0/System.ComponentModel.4.3.0.csproj  |   12 -
 .../netstandard1.0/System.ComponentModel.cs   |   62 -
 .../4.3.0/system.componentmodel.nuspec        |   35 -
 .../4.3.0/System.Console.4.3.0.csproj         |   16 -
 .../ref/netstandard1.3/System.Console.cs      |  380 --
 .../4.3.0/system.console.nuspec               |   33 -
 .../System.Diagnostics.Debug.4.3.0.csproj     |   20 -
 .../System.Diagnostics.Debug.cs               |  107 -
 .../System.Diagnostics.Debug.cs               |  144 -
 .../4.3.0/system.diagnostics.debug.nuspec     |   43 -
 ....Diagnostics.DiagnosticSource.4.3.0.csproj |   25 -
 .../System.Diagnostics.DiagnosticSource.cs    |   52 -
 .../System.Diagnostics.DiagnosticSource.cs    |   52 -
 ...system.diagnostics.diagnosticsource.nuspec |   38 -
 .../System.Diagnostics.Tools.4.3.0.csproj     |   14 -
 .../System.Diagnostics.Tools.cs               |   57 -
 .../4.3.0/system.diagnostics.tools.nuspec     |   31 -
 .../System.Diagnostics.Tracing.4.3.0.csproj   |   32 -
 .../System.Diagnostics.Tracing.cs             |  247 -
 .../System.Diagnostics.Tracing.cs             |  266 -
 .../System.Diagnostics.Tracing.cs             |  411 --
 .../System.Diagnostics.Tracing.cs             |  421 --
 .../4.3.0/system.diagnostics.tracing.nuspec   |   52 -
 .../4.3.0/Customizations.cs                   |   14 -
 .../4.3.0/System.Dynamic.Runtime.4.3.0.csproj |   32 -
 .../netstandard1.0/System.Dynamic.Runtime.cs  |  498 --
 .../netstandard1.3/System.Dynamic.Runtime.cs  |  491 --
 .../4.3.0/system.dynamic.runtime.nuspec       |   56 -
 ...ystem.Globalization.Calendars.4.3.0.csproj |   15 -
 .../System.Globalization.Calendars.cs         |  599 --
 .../system.globalization.calendars.nuspec     |   40 -
 .../4.3.0/System.Globalization.4.3.0.csproj   |   20 -
 .../netstandard1.0/System.Globalization.cs    |  543 --
 .../netstandard1.3/System.Globalization.cs    |  550 --
 .../4.3.0/system.globalization.nuspec         |   43 -
 ...System.IO.Compression.ZipFile.4.3.0.csproj |   21 -
 .../System.IO.Compression.ZipFile.cs          |   58 -
 .../system.io.compression.zipfile.nuspec      |   36 -
 .../4.3.0/System.IO.Compression.4.3.0.csproj  |   31 -
 .../netstandard1.1/System.IO.Compression.cs   |  161 -
 .../netstandard1.3/System.IO.Compression.cs   |  172 -
 .../4.3.0/system.io.compression.nuspec        |   51 -
 ...m.IO.FileSystem.AccessControl.5.0.0.csproj |   12 +-
 .../System.IO.FileSystem.AccessControl.cs     |  194 -
 .../system.io.filesystem.accesscontrol.nuspec |    9 -
 ...stem.IO.FileSystem.Primitives.4.3.0.csproj |   12 -
 .../System.IO.FileSystem.Primitives.cs        |   76 -
 .../system.io.filesystem.primitives.nuspec    |   34 -
 .../4.3.0/System.IO.FileSystem.4.3.0.csproj   |   19 -
 .../netstandard1.3/System.IO.FileSystem.cs    |  432 --
 .../4.3.0/system.io.filesystem.nuspec         |   42 -
 .../system.io/4.3.0/System.IO.4.3.0.csproj    |   32 -
 .../4.3.0/ref/netstandard1.0/System.IO.cs     |  597 --
 .../4.3.0/ref/netstandard1.3/System.IO.cs     |  589 --
 .../4.3.0/ref/netstandard1.5/System.IO.cs     |  629 --
 .../src/system.io/4.3.0/system.io.nuspec      |   53 -
 .../System.Linq.Expressions.4.3.0.csproj      |   38 -
 .../netstandard1.0/System.Linq.Expressions.cs | 1415 -----
 .../netstandard1.3/System.Linq.Expressions.cs | 1452 -----
 .../netstandard1.6/System.Linq.Expressions.cs | 1457 -----
 .../4.3.0/system.linq.expressions.nuspec      |   56 -
 .../4.3.0/System.Linq.4.3.0.csproj            |   21 -
 .../4.3.0/ref/netstandard1.0/System.Linq.cs   |  412 --
 .../4.3.0/ref/netstandard1.6/System.Linq.cs   |  419 --
 .../src/system.linq/4.3.0/system.linq.nuspec  |   40 -
 .../4.5.4/System.Memory.4.5.4.csproj          |   14 +-
 .../4.5.4/lib/netstandard1.1/System.Memory.cs |  940 ---
 .../system.memory/4.5.4/system.memory.nuspec  |   11 -
 .../4.5.5/System.Memory.4.5.5.csproj          |   14 +-
 .../4.5.5/lib/netstandard1.1/System.Memory.cs |  940 ---
 .../system.memory/4.5.5/system.memory.nuspec  |   11 -
 .../4.3.0/System.Net.Http.4.3.0.csproj        |   38 -
 .../ref/netstandard1.1/System.Net.Http.cs     | 1065 ----
 .../ref/netstandard1.3/System.Net.Http.cs     | 1084 ----
 .../4.3.0/system.net.http.nuspec              |   87 -
 .../4.3.0/System.Net.Primitives.4.3.0.csproj  |   27 -
 .../netstandard1.0/System.Net.Primitives.cs   |  186 -
 .../netstandard1.1/System.Net.Primitives.cs   |  249 -
 .../netstandard1.3/System.Net.Primitives.cs   |  592 --
 .../4.3.0/system.net.primitives.nuspec        |   50 -
 .../4.3.0/System.Net.Sockets.4.3.0.csproj     |   17 -
 .../ref/netstandard1.3/System.Net.Sockets.cs  |  733 ---
 .../4.3.0/system.net.sockets.nuspec           |   42 -
 .../System.Numerics.Vectors.4.4.0.csproj      |    2 +-
 .../netstandard1.0/System.Numerics.Vectors.cs |  996 ---
 .../4.4.0/system.numerics.vectors.nuspec      |    3 -
 .../System.Numerics.Vectors.4.5.0.csproj      |    2 +-
 .../netstandard1.0/System.Numerics.Vectors.cs |  996 ---
 .../4.5.0/system.numerics.vectors.nuspec      |    3 -
 .../4.3.0/Customizations.cs                   |   21 -
 .../4.3.0/System.ObjectModel.4.3.0.csproj     |   20 -
 .../ref/netstandard1.0/System.ObjectModel.cs  |  326 -
 .../ref/netstandard1.3/System.ObjectModel.cs  |  342 --
 .../4.3.0/system.objectmodel.nuspec           |   44 -
 ....Reflection.Emit.ILGeneration.4.3.0.csproj |   14 -
 .../System.Reflection.Emit.ILGeneration.cs    |  205 -
 ...system.reflection.emit.ilgeneration.nuspec |   35 -
 ....Reflection.Emit.ILGeneration.4.7.0.csproj |    9 +-
 .../System.Reflection.Emit.ILGeneration.cs    |  205 -
 ...system.reflection.emit.ilgeneration.nuspec |    6 -
 ...m.Reflection.Emit.Lightweight.4.3.0.csproj |   15 -
 .../System.Reflection.Emit.Lightweight.cs     |   73 -
 .../system.reflection.emit.lightweight.nuspec |   31 -
 .../4.3.0/System.Reflection.Emit.4.3.0.csproj |   16 -
 .../netstandard1.1/System.Reflection.Emit.cs  |  593 --
 .../4.3.0/system.reflection.emit.nuspec       |   41 -
 .../4.7.0/System.Reflection.Emit.4.7.0.csproj |   12 +-
 .../netstandard1.1/System.Reflection.Emit.cs  |  593 --
 .../4.7.0/system.reflection.emit.nuspec       |    9 -
 .../System.Reflection.Extensions.4.3.0.csproj |   15 -
 .../System.Reflection.Extensions.cs           |  146 -
 .../4.3.0/system.reflection.extensions.nuspec |   33 -
 .../System.Reflection.Metadata.5.0.0.csproj   |    6 +-
 .../System.Reflection.Metadata.cs             | 5379 -----------------
 .../5.0.0/system.reflection.metadata.nuspec   |    5 -
 .../System.Reflection.Primitives.4.3.0.csproj |   14 -
 .../System.Reflection.Primitives.cs           |  540 --
 .../4.3.0/system.reflection.primitives.nuspec |   39 -
 ...tem.Reflection.TypeExtensions.4.3.0.csproj |   18 -
 .../System.Reflection.TypeExtensions.cs       |  150 -
 .../System.Reflection.TypeExtensions.cs       |  154 -
 .../system.reflection.typeextensions.nuspec   |   34 -
 .../4.3.0/System.Reflection.4.3.0.csproj      |   32 -
 .../ref/netstandard1.0/System.Reflection.cs   |  598 --
 .../ref/netstandard1.3/System.Reflection.cs   |  607 --
 .../ref/netstandard1.5/System.Reflection.cs   |  946 ---
 .../4.3.0/system.reflection.nuspec            |   54 -
 ...tem.Resources.ResourceManager.4.3.0.csproj |   16 -
 .../System.Resources.ResourceManager.cs       |   62 -
 .../system.resources.resourcemanager.nuspec   |   35 -
 ...ntime.CompilerServices.Unsafe.4.5.2.csproj |    6 +-
 .../System.Runtime.CompilerServices.Unsafe.cs |   98 -
 ...tem.runtime.compilerservices.unsafe.nuspec |    3 -
 ...ntime.CompilerServices.Unsafe.4.5.3.csproj |    6 +-
 .../System.Runtime.CompilerServices.Unsafe.cs |   98 -
 ...tem.runtime.compilerservices.unsafe.nuspec |    3 -
 ...ntime.CompilerServices.Unsafe.5.0.0.csproj |    6 +-
 .../System.Runtime.CompilerServices.Unsafe.cs |  108 -
 ...tem.runtime.compilerservices.unsafe.nuspec |    3 -
 .../System.Runtime.Extensions.4.3.0.csproj    |   26 -
 .../System.Runtime.Extensions.cs              | 1073 ----
 .../System.Runtime.Extensions.cs              | 1135 ----
 .../System.Runtime.Extensions.cs              | 1142 ----
 .../4.3.0/system.runtime.extensions.nuspec    |   48 -
 .../4.3.0/System.Runtime.Handles.4.3.0.csproj |   14 -
 .../netstandard1.3/System.Runtime.Handles.cs  |  107 -
 .../4.3.0/system.runtime.handles.nuspec       |   34 -
 ...opServices.RuntimeInformation.4.3.0.csproj |   17 -
 ...time.InteropServices.RuntimeInformation.cs |   70 -
 ....interopservices.runtimeinformation.nuspec |   34 -
 .../4.3.0/Customizations.cs                   |   24 -
 ...ystem.Runtime.InteropServices.4.3.0.csproj |   51 -
 .../System.Runtime.InteropServices.cs         | 1594 -----
 .../System.Runtime.InteropServices.cs         | 1565 -----
 .../System.Runtime.InteropServices.cs         | 1647 -----
 .../System.Runtime.InteropServices.cs         | 1598 -----
 .../System.Runtime.InteropServices.cs         | 1599 -----
 .../system.runtime.interopservices.nuspec     |   67 -
 .../System.Runtime.Numerics.4.3.0.csproj      |   12 -
 .../netstandard1.1/System.Runtime.Numerics.cs |  416 --
 .../4.3.0/system.runtime.numerics.nuspec      |   35 -
 .../4.3.0/System.Runtime.4.3.0.csproj         |   28 -
 .../ref/netstandard1.0/System.Runtime.cs      | 4306 -------------
 .../ref/netstandard1.2/System.Runtime.cs      | 4318 -------------
 .../ref/netstandard1.3/System.Runtime.cs      | 5168 ----------------
 .../ref/netstandard1.5/System.Runtime.cs      | 5174 ----------------
 .../4.3.0/system.runtime.nuspec               |   60 -
 .../src/system.runtime/Directory.Build.props  |   15 -
 ...System.Security.AccessControl.5.0.0.csproj |    7 +-
 .../System.Security.AccessControl.cs          |  837 ---
 .../system.security.accesscontrol.nuspec      |    5 -
 .../4.3.0/System.Security.Claims.4.3.0.csproj |   18 -
 .../netstandard1.3/System.Security.Claims.cs  |  322 -
 .../4.3.0/system.security.claims.nuspec       |   38 -
 ...urity.Cryptography.Algorithms.4.3.0.csproj |   35 -
 ...System.Security.Cryptography.Algorithms.cs |  337 --
 ...System.Security.Cryptography.Algorithms.cs |  357 --
 ...System.Security.Cryptography.Algorithms.cs |  463 --
 ...em.security.cryptography.algorithms.nuspec |   60 -
 ...urity.Cryptography.Algorithms.4.3.1.csproj |   35 -
 ...System.Security.Cryptography.Algorithms.cs |  337 --
 ...System.Security.Cryptography.Algorithms.cs |  357 --
 ...System.Security.Cryptography.Algorithms.cs |  463 --
 ...em.security.cryptography.algorithms.nuspec |   60 -
 ...tem.Security.Cryptography.Cng.5.0.0.csproj |   38 +-
 .../System.Security.Cryptography.Cng.cs       |  406 --
 .../System.Security.Cryptography.Cng.cs       |  429 --
 .../System.Security.Cryptography.Cng.cs       |  509 --
 .../system.security.cryptography.cng.nuspec   |   33 -
 ...ecurity.Cryptography.Encoding.4.3.0.csproj |   22 -
 .../System.Security.Cryptography.Encoding.cs  |  155 -
 ...stem.security.cryptography.encoding.nuspec |   40 -
 ...urity.Cryptography.Primitives.4.3.0.csproj |   18 -
 ...System.Security.Cryptography.Primitives.cs |  244 -
 ...em.security.cryptography.primitives.nuspec |   45 -
 ...ty.Cryptography.ProtectedData.4.4.0.csproj |    2 +-
 ...tem.Security.Cryptography.ProtectedData.cs |   39 -
 ...security.cryptography.protecteddata.nuspec |    3 -
 ...Cryptography.X509Certificates.4.3.0.csproj |   22 -
 ....Security.Cryptography.X509Certificates.cs |  733 ---
 ....Security.Cryptography.X509Certificates.cs |  743 ---
 ...urity.cryptography.x509certificates.nuspec |   70 -
 ...em.Security.Principal.Windows.5.0.0.csproj |   18 +-
 .../System.Security.Principal.Windows.cs      |  331 -
 .../system.security.principal.windows.nuspec  |   15 -
 .../System.Security.Principal.4.3.0.csproj    |   12 -
 .../System.Security.Principal.cs              |   51 -
 .../4.3.0/system.security.principal.nuspec    |   30 -
 ...ystem.Text.Encoding.CodePages.4.5.1.csproj |    2 +-
 .../System.Text.Encoding.CodePages.cs         |   37 -
 .../system.text.encoding.codepages.nuspec     |    3 -
 ...stem.Text.Encoding.Extensions.4.3.0.csproj |   22 -
 .../System.Text.Encoding.Extensions.cs        |   97 -
 .../System.Text.Encoding.Extensions.cs        |  245 -
 .../system.text.encoding.extensions.nuspec    |   41 -
 .../4.3.0/System.Text.Encoding.4.3.0.csproj   |   20 -
 .../netstandard1.0/System.Text.Encoding.cs    |  129 -
 .../netstandard1.3/System.Text.Encoding.cs    |  303 -
 .../4.3.0/system.text.encoding.nuspec         |   44 -
 ...ystem.Text.RegularExpressions.4.3.0.csproj |   29 -
 .../System.Text.RegularExpressions.cs         |  332 -
 .../System.Text.RegularExpressions.cs         |  243 -
 .../System.Text.RegularExpressions.cs         |  248 -
 .../System.Text.RegularExpressions.cs         |  330 -
 .../system.text.regularexpressions.nuspec     |   47 -
 ...em.Threading.Tasks.Extensions.4.3.0.csproj |   15 -
 .../System.Threading.Tasks.Extensions.cs      |  135 -
 .../system.threading.tasks.extensions.nuspec  |   28 -
 ...em.Threading.Tasks.Extensions.4.5.4.csproj |    9 +-
 .../System.Threading.Tasks.Extensions.cs      |  266 -
 .../system.threading.tasks.extensions.nuspec  |    6 -
 .../4.3.0/System.Threading.Tasks.4.3.0.csproj |   20 -
 .../netstandard1.0/System.Threading.Tasks.cs  |  946 ---
 .../netstandard1.3/System.Threading.Tasks.cs  |  963 ---
 .../4.3.0/system.threading.tasks.nuspec       |   40 -
 .../System.Threading.Thread.4.3.0.csproj      |   12 -
 .../netstandard1.3/System.Threading.Thread.cs |   88 -
 .../4.3.0/system.threading.thread.nuspec      |   30 -
 .../4.3.0/System.Threading.Timer.4.3.0.csproj |   14 -
 .../netstandard1.2/System.Threading.Timer.cs  |   41 -
 .../4.3.0/system.threading.timer.nuspec       |   31 -
 .../4.3.0/System.Threading.4.3.0.csproj       |   18 -
 .../ref/netstandard1.0/System.Threading.cs    |  627 --
 .../ref/netstandard1.3/System.Threading.cs    |  658 --
 .../4.3.0/system.threading.nuspec             |   40 -
 .../System.Xml.ReaderWriter.4.3.0.csproj      |   33 -
 .../netstandard1.0/System.Xml.ReaderWriter.cs |  810 ---
 .../netstandard1.3/System.Xml.ReaderWriter.cs |  852 ---
 .../4.3.0/system.xml.readerwriter.nuspec      |   56 -
 .../4.3.0/System.Xml.XDocument.4.3.0.csproj   |   29 -
 .../netstandard1.0/System.Xml.XDocument.cs    |  785 ---
 .../netstandard1.3/System.Xml.XDocument.cs    |  794 ---
 .../4.3.0/system.xml.xdocument.nuspec         |   53 -
 .../1.1.0/LICENSE.TXT                         |   23 -
 .../1.1.0/Microsoft.NETCore.Targets.nuspec    |   23 -
 .../1.1.0/ThirdPartyNotices.txt               |   31 -
 .../1.1.0/lib/netstandard1.0/_._              |    0
 .../microsoft.netcore.targets.1.1.0.csproj    |    1 -
 .../1.1.0/runtime.json                        |  438 --
 301 files changed, 23 insertions(+), 92667 deletions(-)
 delete mode 100644 src/referencePackages/src/microsoft.csharp/4.7.0/ref/netstandard1.0/Microsoft.CSharp.cs
 delete mode 100644 src/referencePackages/src/microsoft.visualbasic/10.3.0/ref/netstandard1.1/Microsoft.VisualBasic.cs
 delete mode 100644 src/referencePackages/src/microsoft.win32.primitives/4.3.0/Microsoft.Win32.Primitives.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/microsoft.win32.primitives/4.3.0/microsoft.win32.primitives.nuspec
 delete mode 100644 src/referencePackages/src/microsoft.win32.primitives/4.3.0/ref/netstandard1.3/Microsoft.Win32.Primitives.cs
 delete mode 100644 src/referencePackages/src/microsoft.win32.registry/5.0.0/ref/netstandard1.3/Microsoft.Win32.Registry.cs
 delete mode 100644 src/referencePackages/src/system.appcontext/4.3.0/System.AppContext.4.3.0.csproj
 delete mode 100755 src/referencePackages/src/system.appcontext/4.3.0/ref/netstandard/_._
 delete mode 100644 src/referencePackages/src/system.appcontext/4.3.0/ref/netstandard1.3/System.AppContext.cs
 delete mode 100644 src/referencePackages/src/system.appcontext/4.3.0/ref/netstandard1.6/System.AppContext.cs
 delete mode 100644 src/referencePackages/src/system.appcontext/4.3.0/system.appcontext.nuspec
 delete mode 100644 src/referencePackages/src/system.buffers/4.3.0/System.Buffers.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.buffers/4.3.0/lib/netstandard1.1/System.Buffers.cs
 delete mode 100644 src/referencePackages/src/system.buffers/4.3.0/system.buffers.nuspec
 delete mode 100644 src/referencePackages/src/system.buffers/4.5.1/ref/netstandard1.1/System.Buffers.cs
 delete mode 100644 src/referencePackages/src/system.collections.concurrent/4.3.0/System.Collections.Concurrent.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.collections.concurrent/4.3.0/ref/netstandard1.1/System.Collections.Concurrent.cs
 delete mode 100644 src/referencePackages/src/system.collections.concurrent/4.3.0/ref/netstandard1.3/System.Collections.Concurrent.cs
 delete mode 100644 src/referencePackages/src/system.collections.concurrent/4.3.0/system.collections.concurrent.nuspec
 delete mode 100644 src/referencePackages/src/system.collections.immutable/5.0.0/lib/netstandard1.0/System.Collections.Immutable.cs
 delete mode 100644 src/referencePackages/src/system.collections.immutable/5.0.0/lib/netstandard1.3/System.Collections.Immutable.cs
 delete mode 100644 src/referencePackages/src/system.collections/4.3.0/System.Collections.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.collections/4.3.0/ref/netstandard1.0/System.Collections.cs
 delete mode 100644 src/referencePackages/src/system.collections/4.3.0/ref/netstandard1.3/System.Collections.cs
 delete mode 100644 src/referencePackages/src/system.collections/4.3.0/system.collections.nuspec
 delete mode 100644 src/referencePackages/src/system.componentmodel.annotations/5.0.0/ref/netstandard1.1/System.ComponentModel.Annotations.cs
 delete mode 100644 src/referencePackages/src/system.componentmodel.annotations/5.0.0/ref/netstandard1.3/System.ComponentModel.Annotations.cs
 delete mode 100644 src/referencePackages/src/system.componentmodel.annotations/5.0.0/ref/netstandard1.4/System.ComponentModel.Annotations.cs
 delete mode 100644 src/referencePackages/src/system.componentmodel/4.3.0/System.ComponentModel.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.componentmodel/4.3.0/ref/netstandard1.0/System.ComponentModel.cs
 delete mode 100644 src/referencePackages/src/system.componentmodel/4.3.0/system.componentmodel.nuspec
 delete mode 100644 src/referencePackages/src/system.console/4.3.0/System.Console.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.console/4.3.0/ref/netstandard1.3/System.Console.cs
 delete mode 100644 src/referencePackages/src/system.console/4.3.0/system.console.nuspec
 delete mode 100644 src/referencePackages/src/system.diagnostics.debug/4.3.0/System.Diagnostics.Debug.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.diagnostics.debug/4.3.0/ref/netstandard1.0/System.Diagnostics.Debug.cs
 delete mode 100644 src/referencePackages/src/system.diagnostics.debug/4.3.0/ref/netstandard1.3/System.Diagnostics.Debug.cs
 delete mode 100644 src/referencePackages/src/system.diagnostics.debug/4.3.0/system.diagnostics.debug.nuspec
 delete mode 100644 src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/System.Diagnostics.DiagnosticSource.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/lib/netstandard1.1/System.Diagnostics.DiagnosticSource.cs
 delete mode 100644 src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/lib/netstandard1.3/System.Diagnostics.DiagnosticSource.cs
 delete mode 100644 src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/system.diagnostics.diagnosticsource.nuspec
 delete mode 100644 src/referencePackages/src/system.diagnostics.tools/4.3.0/System.Diagnostics.Tools.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.diagnostics.tools/4.3.0/ref/netstandard1.0/System.Diagnostics.Tools.cs
 delete mode 100644 src/referencePackages/src/system.diagnostics.tools/4.3.0/system.diagnostics.tools.nuspec
 delete mode 100644 src/referencePackages/src/system.diagnostics.tracing/4.3.0/System.Diagnostics.Tracing.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.1/System.Diagnostics.Tracing.cs
 delete mode 100644 src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.2/System.Diagnostics.Tracing.cs
 delete mode 100644 src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.3/System.Diagnostics.Tracing.cs
 delete mode 100644 src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.5/System.Diagnostics.Tracing.cs
 delete mode 100644 src/referencePackages/src/system.diagnostics.tracing/4.3.0/system.diagnostics.tracing.nuspec
 delete mode 100644 src/referencePackages/src/system.dynamic.runtime/4.3.0/Customizations.cs
 delete mode 100644 src/referencePackages/src/system.dynamic.runtime/4.3.0/System.Dynamic.Runtime.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.dynamic.runtime/4.3.0/ref/netstandard1.0/System.Dynamic.Runtime.cs
 delete mode 100644 src/referencePackages/src/system.dynamic.runtime/4.3.0/ref/netstandard1.3/System.Dynamic.Runtime.cs
 delete mode 100644 src/referencePackages/src/system.dynamic.runtime/4.3.0/system.dynamic.runtime.nuspec
 delete mode 100644 src/referencePackages/src/system.globalization.calendars/4.3.0/System.Globalization.Calendars.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.globalization.calendars/4.3.0/ref/netstandard1.3/System.Globalization.Calendars.cs
 delete mode 100644 src/referencePackages/src/system.globalization.calendars/4.3.0/system.globalization.calendars.nuspec
 delete mode 100644 src/referencePackages/src/system.globalization/4.3.0/System.Globalization.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.globalization/4.3.0/ref/netstandard1.0/System.Globalization.cs
 delete mode 100644 src/referencePackages/src/system.globalization/4.3.0/ref/netstandard1.3/System.Globalization.cs
 delete mode 100644 src/referencePackages/src/system.globalization/4.3.0/system.globalization.nuspec
 delete mode 100644 src/referencePackages/src/system.io.compression.zipfile/4.3.0/System.IO.Compression.ZipFile.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.io.compression.zipfile/4.3.0/ref/netstandard1.3/System.IO.Compression.ZipFile.cs
 delete mode 100644 src/referencePackages/src/system.io.compression.zipfile/4.3.0/system.io.compression.zipfile.nuspec
 delete mode 100644 src/referencePackages/src/system.io.compression/4.3.0/System.IO.Compression.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.io.compression/4.3.0/ref/netstandard1.1/System.IO.Compression.cs
 delete mode 100644 src/referencePackages/src/system.io.compression/4.3.0/ref/netstandard1.3/System.IO.Compression.cs
 delete mode 100644 src/referencePackages/src/system.io.compression/4.3.0/system.io.compression.nuspec
 delete mode 100644 src/referencePackages/src/system.io.filesystem.accesscontrol/5.0.0/ref/netstandard1.3/System.IO.FileSystem.AccessControl.cs
 delete mode 100644 src/referencePackages/src/system.io.filesystem.primitives/4.3.0/System.IO.FileSystem.Primitives.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.io.filesystem.primitives/4.3.0/ref/netstandard1.3/System.IO.FileSystem.Primitives.cs
 delete mode 100644 src/referencePackages/src/system.io.filesystem.primitives/4.3.0/system.io.filesystem.primitives.nuspec
 delete mode 100644 src/referencePackages/src/system.io.filesystem/4.3.0/System.IO.FileSystem.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.io.filesystem/4.3.0/ref/netstandard1.3/System.IO.FileSystem.cs
 delete mode 100644 src/referencePackages/src/system.io.filesystem/4.3.0/system.io.filesystem.nuspec
 delete mode 100644 src/referencePackages/src/system.io/4.3.0/System.IO.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.io/4.3.0/ref/netstandard1.0/System.IO.cs
 delete mode 100644 src/referencePackages/src/system.io/4.3.0/ref/netstandard1.3/System.IO.cs
 delete mode 100644 src/referencePackages/src/system.io/4.3.0/ref/netstandard1.5/System.IO.cs
 delete mode 100644 src/referencePackages/src/system.io/4.3.0/system.io.nuspec
 delete mode 100644 src/referencePackages/src/system.linq.expressions/4.3.0/System.Linq.Expressions.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.linq.expressions/4.3.0/ref/netstandard1.0/System.Linq.Expressions.cs
 delete mode 100644 src/referencePackages/src/system.linq.expressions/4.3.0/ref/netstandard1.3/System.Linq.Expressions.cs
 delete mode 100644 src/referencePackages/src/system.linq.expressions/4.3.0/ref/netstandard1.6/System.Linq.Expressions.cs
 delete mode 100644 src/referencePackages/src/system.linq.expressions/4.3.0/system.linq.expressions.nuspec
 delete mode 100644 src/referencePackages/src/system.linq/4.3.0/System.Linq.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.linq/4.3.0/ref/netstandard1.0/System.Linq.cs
 delete mode 100644 src/referencePackages/src/system.linq/4.3.0/ref/netstandard1.6/System.Linq.cs
 delete mode 100644 src/referencePackages/src/system.linq/4.3.0/system.linq.nuspec
 delete mode 100644 src/referencePackages/src/system.memory/4.5.4/lib/netstandard1.1/System.Memory.cs
 delete mode 100644 src/referencePackages/src/system.memory/4.5.5/lib/netstandard1.1/System.Memory.cs
 delete mode 100644 src/referencePackages/src/system.net.http/4.3.0/System.Net.Http.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.net.http/4.3.0/ref/netstandard1.1/System.Net.Http.cs
 delete mode 100644 src/referencePackages/src/system.net.http/4.3.0/ref/netstandard1.3/System.Net.Http.cs
 delete mode 100644 src/referencePackages/src/system.net.http/4.3.0/system.net.http.nuspec
 delete mode 100644 src/referencePackages/src/system.net.primitives/4.3.0/System.Net.Primitives.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.net.primitives/4.3.0/ref/netstandard1.0/System.Net.Primitives.cs
 delete mode 100644 src/referencePackages/src/system.net.primitives/4.3.0/ref/netstandard1.1/System.Net.Primitives.cs
 delete mode 100644 src/referencePackages/src/system.net.primitives/4.3.0/ref/netstandard1.3/System.Net.Primitives.cs
 delete mode 100644 src/referencePackages/src/system.net.primitives/4.3.0/system.net.primitives.nuspec
 delete mode 100644 src/referencePackages/src/system.net.sockets/4.3.0/System.Net.Sockets.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.net.sockets/4.3.0/ref/netstandard1.3/System.Net.Sockets.cs
 delete mode 100644 src/referencePackages/src/system.net.sockets/4.3.0/system.net.sockets.nuspec
 delete mode 100644 src/referencePackages/src/system.numerics.vectors/4.4.0/ref/netstandard1.0/System.Numerics.Vectors.cs
 delete mode 100644 src/referencePackages/src/system.numerics.vectors/4.5.0/ref/netstandard1.0/System.Numerics.Vectors.cs
 delete mode 100644 src/referencePackages/src/system.objectmodel/4.3.0/Customizations.cs
 delete mode 100644 src/referencePackages/src/system.objectmodel/4.3.0/System.ObjectModel.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.objectmodel/4.3.0/ref/netstandard1.0/System.ObjectModel.cs
 delete mode 100644 src/referencePackages/src/system.objectmodel/4.3.0/ref/netstandard1.3/System.ObjectModel.cs
 delete mode 100644 src/referencePackages/src/system.objectmodel/4.3.0/system.objectmodel.nuspec
 delete mode 100644 src/referencePackages/src/system.reflection.emit.ilgeneration/4.3.0/System.Reflection.Emit.ILGeneration.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.reflection.emit.ilgeneration/4.3.0/ref/netstandard1.0/System.Reflection.Emit.ILGeneration.cs
 delete mode 100644 src/referencePackages/src/system.reflection.emit.ilgeneration/4.3.0/system.reflection.emit.ilgeneration.nuspec
 delete mode 100644 src/referencePackages/src/system.reflection.emit.ilgeneration/4.7.0/ref/netstandard1.0/System.Reflection.Emit.ILGeneration.cs
 delete mode 100644 src/referencePackages/src/system.reflection.emit.lightweight/4.3.0/System.Reflection.Emit.Lightweight.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.reflection.emit.lightweight/4.3.0/ref/netstandard1.0/System.Reflection.Emit.Lightweight.cs
 delete mode 100644 src/referencePackages/src/system.reflection.emit.lightweight/4.3.0/system.reflection.emit.lightweight.nuspec
 delete mode 100644 src/referencePackages/src/system.reflection.emit/4.3.0/System.Reflection.Emit.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.reflection.emit/4.3.0/ref/netstandard1.1/System.Reflection.Emit.cs
 delete mode 100644 src/referencePackages/src/system.reflection.emit/4.3.0/system.reflection.emit.nuspec
 delete mode 100644 src/referencePackages/src/system.reflection.emit/4.7.0/ref/netstandard1.1/System.Reflection.Emit.cs
 delete mode 100644 src/referencePackages/src/system.reflection.extensions/4.3.0/System.Reflection.Extensions.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.reflection.extensions/4.3.0/ref/netstandard1.0/System.Reflection.Extensions.cs
 delete mode 100644 src/referencePackages/src/system.reflection.extensions/4.3.0/system.reflection.extensions.nuspec
 delete mode 100644 src/referencePackages/src/system.reflection.metadata/5.0.0/lib/netstandard1.1/System.Reflection.Metadata.cs
 delete mode 100644 src/referencePackages/src/system.reflection.primitives/4.3.0/System.Reflection.Primitives.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.reflection.primitives/4.3.0/ref/netstandard1.0/System.Reflection.Primitives.cs
 delete mode 100644 src/referencePackages/src/system.reflection.primitives/4.3.0/system.reflection.primitives.nuspec
 delete mode 100644 src/referencePackages/src/system.reflection.typeextensions/4.3.0/System.Reflection.TypeExtensions.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.reflection.typeextensions/4.3.0/ref/netstandard1.3/System.Reflection.TypeExtensions.cs
 delete mode 100644 src/referencePackages/src/system.reflection.typeextensions/4.3.0/ref/netstandard1.5/System.Reflection.TypeExtensions.cs
 delete mode 100644 src/referencePackages/src/system.reflection.typeextensions/4.3.0/system.reflection.typeextensions.nuspec
 delete mode 100644 src/referencePackages/src/system.reflection/4.3.0/System.Reflection.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.reflection/4.3.0/ref/netstandard1.0/System.Reflection.cs
 delete mode 100644 src/referencePackages/src/system.reflection/4.3.0/ref/netstandard1.3/System.Reflection.cs
 delete mode 100644 src/referencePackages/src/system.reflection/4.3.0/ref/netstandard1.5/System.Reflection.cs
 delete mode 100644 src/referencePackages/src/system.reflection/4.3.0/system.reflection.nuspec
 delete mode 100644 src/referencePackages/src/system.resources.resourcemanager/4.3.0/System.Resources.ResourceManager.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.resources.resourcemanager/4.3.0/ref/netstandard1.0/System.Resources.ResourceManager.cs
 delete mode 100644 src/referencePackages/src/system.resources.resourcemanager/4.3.0/system.resources.resourcemanager.nuspec
 delete mode 100644 src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.2/ref/netstandard1.0/System.Runtime.CompilerServices.Unsafe.cs
 delete mode 100644 src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.3/ref/netstandard1.0/System.Runtime.CompilerServices.Unsafe.cs
 delete mode 100644 src/referencePackages/src/system.runtime.compilerservices.unsafe/5.0.0/ref/netstandard1.0/System.Runtime.CompilerServices.Unsafe.cs
 delete mode 100644 src/referencePackages/src/system.runtime.extensions/4.3.0/System.Runtime.Extensions.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.runtime.extensions/4.3.0/ref/netstandard1.0/System.Runtime.Extensions.cs
 delete mode 100644 src/referencePackages/src/system.runtime.extensions/4.3.0/ref/netstandard1.3/System.Runtime.Extensions.cs
 delete mode 100644 src/referencePackages/src/system.runtime.extensions/4.3.0/ref/netstandard1.5/System.Runtime.Extensions.cs
 delete mode 100644 src/referencePackages/src/system.runtime.extensions/4.3.0/system.runtime.extensions.nuspec
 delete mode 100644 src/referencePackages/src/system.runtime.handles/4.3.0/System.Runtime.Handles.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.runtime.handles/4.3.0/ref/netstandard1.3/System.Runtime.Handles.cs
 delete mode 100644 src/referencePackages/src/system.runtime.handles/4.3.0/system.runtime.handles.nuspec
 delete mode 100644 src/referencePackages/src/system.runtime.interopservices.runtimeinformation/4.3.0/System.Runtime.InteropServices.RuntimeInformation.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.runtime.interopservices.runtimeinformation/4.3.0/ref/netstandard1.1/System.Runtime.InteropServices.RuntimeInformation.cs
 delete mode 100644 src/referencePackages/src/system.runtime.interopservices.runtimeinformation/4.3.0/system.runtime.interopservices.runtimeinformation.nuspec
 delete mode 100644 src/referencePackages/src/system.runtime.interopservices/4.3.0/Customizations.cs
 delete mode 100644 src/referencePackages/src/system.runtime.interopservices/4.3.0/System.Runtime.InteropServices.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netcoreapp1.1/System.Runtime.InteropServices.cs
 delete mode 100644 src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.1/System.Runtime.InteropServices.cs
 delete mode 100644 src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.2/System.Runtime.InteropServices.cs
 delete mode 100644 src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.3/System.Runtime.InteropServices.cs
 delete mode 100644 src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.5/System.Runtime.InteropServices.cs
 delete mode 100644 src/referencePackages/src/system.runtime.interopservices/4.3.0/system.runtime.interopservices.nuspec
 delete mode 100644 src/referencePackages/src/system.runtime.numerics/4.3.0/System.Runtime.Numerics.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.runtime.numerics/4.3.0/ref/netstandard1.1/System.Runtime.Numerics.cs
 delete mode 100644 src/referencePackages/src/system.runtime.numerics/4.3.0/system.runtime.numerics.nuspec
 delete mode 100644 src/referencePackages/src/system.runtime/4.3.0/System.Runtime.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.0/System.Runtime.cs
 delete mode 100644 src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.2/System.Runtime.cs
 delete mode 100644 src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.3/System.Runtime.cs
 delete mode 100644 src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.5/System.Runtime.cs
 delete mode 100644 src/referencePackages/src/system.runtime/4.3.0/system.runtime.nuspec
 delete mode 100644 src/referencePackages/src/system.runtime/Directory.Build.props
 delete mode 100644 src/referencePackages/src/system.security.accesscontrol/5.0.0/ref/netstandard1.3/System.Security.AccessControl.cs
 delete mode 100644 src/referencePackages/src/system.security.claims/4.3.0/System.Security.Claims.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.security.claims/4.3.0/ref/netstandard1.3/System.Security.Claims.cs
 delete mode 100644 src/referencePackages/src/system.security.claims/4.3.0/system.security.claims.nuspec
 delete mode 100644 src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/System.Security.Cryptography.Algorithms.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/ref/netstandard1.3/System.Security.Cryptography.Algorithms.cs
 delete mode 100644 src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/ref/netstandard1.4/System.Security.Cryptography.Algorithms.cs
 delete mode 100644 src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/ref/netstandard1.6/System.Security.Cryptography.Algorithms.cs
 delete mode 100644 src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/system.security.cryptography.algorithms.nuspec
 delete mode 100644 src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/System.Security.Cryptography.Algorithms.4.3.1.csproj
 delete mode 100644 src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/ref/netstandard1.3/System.Security.Cryptography.Algorithms.cs
 delete mode 100644 src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/ref/netstandard1.4/System.Security.Cryptography.Algorithms.cs
 delete mode 100644 src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/ref/netstandard1.6/System.Security.Cryptography.Algorithms.cs
 delete mode 100644 src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/system.security.cryptography.algorithms.nuspec
 delete mode 100644 src/referencePackages/src/system.security.cryptography.cng/5.0.0/ref/netstandard1.3/System.Security.Cryptography.Cng.cs
 delete mode 100644 src/referencePackages/src/system.security.cryptography.cng/5.0.0/ref/netstandard1.4/System.Security.Cryptography.Cng.cs
 delete mode 100644 src/referencePackages/src/system.security.cryptography.cng/5.0.0/ref/netstandard1.6/System.Security.Cryptography.Cng.cs
 delete mode 100644 src/referencePackages/src/system.security.cryptography.encoding/4.3.0/System.Security.Cryptography.Encoding.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.security.cryptography.encoding/4.3.0/ref/netstandard1.3/System.Security.Cryptography.Encoding.cs
 delete mode 100644 src/referencePackages/src/system.security.cryptography.encoding/4.3.0/system.security.cryptography.encoding.nuspec
 delete mode 100644 src/referencePackages/src/system.security.cryptography.primitives/4.3.0/System.Security.Cryptography.Primitives.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.security.cryptography.primitives/4.3.0/ref/netstandard1.3/System.Security.Cryptography.Primitives.cs
 delete mode 100644 src/referencePackages/src/system.security.cryptography.primitives/4.3.0/system.security.cryptography.primitives.nuspec
 delete mode 100644 src/referencePackages/src/system.security.cryptography.protecteddata/4.4.0/ref/netstandard1.3/System.Security.Cryptography.ProtectedData.cs
 delete mode 100644 src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/System.Security.Cryptography.X509Certificates.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/ref/netstandard1.3/System.Security.Cryptography.X509Certificates.cs
 delete mode 100644 src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/ref/netstandard1.4/System.Security.Cryptography.X509Certificates.cs
 delete mode 100644 src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/system.security.cryptography.x509certificates.nuspec
 delete mode 100644 src/referencePackages/src/system.security.principal.windows/5.0.0/ref/netstandard1.3/System.Security.Principal.Windows.cs
 delete mode 100644 src/referencePackages/src/system.security.principal/4.3.0/System.Security.Principal.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.security.principal/4.3.0/ref/netstandard1.0/System.Security.Principal.cs
 delete mode 100644 src/referencePackages/src/system.security.principal/4.3.0/system.security.principal.nuspec
 delete mode 100644 src/referencePackages/src/system.text.encoding.codepages/4.5.1/lib/netstandard1.3/System.Text.Encoding.CodePages.cs
 delete mode 100644 src/referencePackages/src/system.text.encoding.extensions/4.3.0/System.Text.Encoding.Extensions.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.text.encoding.extensions/4.3.0/ref/netstandard1.0/System.Text.Encoding.Extensions.cs
 delete mode 100644 src/referencePackages/src/system.text.encoding.extensions/4.3.0/ref/netstandard1.3/System.Text.Encoding.Extensions.cs
 delete mode 100644 src/referencePackages/src/system.text.encoding.extensions/4.3.0/system.text.encoding.extensions.nuspec
 delete mode 100644 src/referencePackages/src/system.text.encoding/4.3.0/System.Text.Encoding.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.text.encoding/4.3.0/ref/netstandard1.0/System.Text.Encoding.cs
 delete mode 100644 src/referencePackages/src/system.text.encoding/4.3.0/ref/netstandard1.3/System.Text.Encoding.cs
 delete mode 100644 src/referencePackages/src/system.text.encoding/4.3.0/system.text.encoding.nuspec
 delete mode 100644 src/referencePackages/src/system.text.regularexpressions/4.3.0/System.Text.RegularExpressions.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netcoreapp1.1/System.Text.RegularExpressions.cs
 delete mode 100644 src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netstandard1.0/System.Text.RegularExpressions.cs
 delete mode 100644 src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netstandard1.3/System.Text.RegularExpressions.cs
 delete mode 100644 src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netstandard1.6/System.Text.RegularExpressions.cs
 delete mode 100644 src/referencePackages/src/system.text.regularexpressions/4.3.0/system.text.regularexpressions.nuspec
 delete mode 100644 src/referencePackages/src/system.threading.tasks.extensions/4.3.0/System.Threading.Tasks.Extensions.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.threading.tasks.extensions/4.3.0/lib/netstandard1.0/System.Threading.Tasks.Extensions.cs
 delete mode 100644 src/referencePackages/src/system.threading.tasks.extensions/4.3.0/system.threading.tasks.extensions.nuspec
 delete mode 100644 src/referencePackages/src/system.threading.tasks.extensions/4.5.4/lib/netstandard1.0/System.Threading.Tasks.Extensions.cs
 delete mode 100644 src/referencePackages/src/system.threading.tasks/4.3.0/System.Threading.Tasks.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.threading.tasks/4.3.0/ref/netstandard1.0/System.Threading.Tasks.cs
 delete mode 100644 src/referencePackages/src/system.threading.tasks/4.3.0/ref/netstandard1.3/System.Threading.Tasks.cs
 delete mode 100644 src/referencePackages/src/system.threading.tasks/4.3.0/system.threading.tasks.nuspec
 delete mode 100644 src/referencePackages/src/system.threading.thread/4.3.0/System.Threading.Thread.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.threading.thread/4.3.0/ref/netstandard1.3/System.Threading.Thread.cs
 delete mode 100644 src/referencePackages/src/system.threading.thread/4.3.0/system.threading.thread.nuspec
 delete mode 100644 src/referencePackages/src/system.threading.timer/4.3.0/System.Threading.Timer.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.threading.timer/4.3.0/ref/netstandard1.2/System.Threading.Timer.cs
 delete mode 100644 src/referencePackages/src/system.threading.timer/4.3.0/system.threading.timer.nuspec
 delete mode 100644 src/referencePackages/src/system.threading/4.3.0/System.Threading.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.threading/4.3.0/ref/netstandard1.0/System.Threading.cs
 delete mode 100644 src/referencePackages/src/system.threading/4.3.0/ref/netstandard1.3/System.Threading.cs
 delete mode 100644 src/referencePackages/src/system.threading/4.3.0/system.threading.nuspec
 delete mode 100644 src/referencePackages/src/system.xml.readerwriter/4.3.0/System.Xml.ReaderWriter.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.xml.readerwriter/4.3.0/ref/netstandard1.0/System.Xml.ReaderWriter.cs
 delete mode 100644 src/referencePackages/src/system.xml.readerwriter/4.3.0/ref/netstandard1.3/System.Xml.ReaderWriter.cs
 delete mode 100644 src/referencePackages/src/system.xml.readerwriter/4.3.0/system.xml.readerwriter.nuspec
 delete mode 100644 src/referencePackages/src/system.xml.xdocument/4.3.0/System.Xml.XDocument.4.3.0.csproj
 delete mode 100644 src/referencePackages/src/system.xml.xdocument/4.3.0/ref/netstandard1.0/System.Xml.XDocument.cs
 delete mode 100644 src/referencePackages/src/system.xml.xdocument/4.3.0/ref/netstandard1.3/System.Xml.XDocument.cs
 delete mode 100644 src/referencePackages/src/system.xml.xdocument/4.3.0/system.xml.xdocument.nuspec
 delete mode 100644 src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/LICENSE.TXT
 delete mode 100644 src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/Microsoft.NETCore.Targets.nuspec
 delete mode 100644 src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/ThirdPartyNotices.txt
 delete mode 100644 src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/lib/netstandard1.0/_._
 delete mode 100644 src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/microsoft.netcore.targets.1.1.0.csproj
 delete mode 100644 src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/runtime.json

diff --git a/Directory.Build.props b/Directory.Build.props
index 2b70dcdb..bca70c36 100644
--- a/Directory.Build.props
+++ b/Directory.Build.props
@@ -17,9 +17,6 @@
       equality with real packages.
     -->
     <Serviceable />
-    <!-- TODO: Remove netstandard1.x TFMs. https://github.com/dotnet/source-build/issues/4482 -->
-    <CheckNotRecommendedTargetFramework>false</CheckNotRecommendedTargetFramework>
-
     <CustomizationsPrefix>Customizations</CustomizationsPrefix>
     <CustomizationsPropsFile>$(CustomizationsPrefix).props</CustomizationsPropsFile>
     <CustomizationsSourceFile>$(CustomizationsPrefix).cs</CustomizationsSourceFile>
diff --git a/src/referencePackages/Directory.Build.targets b/src/referencePackages/Directory.Build.targets
index 38cec661..51f9f108 100644
--- a/src/referencePackages/Directory.Build.targets
+++ b/src/referencePackages/Directory.Build.targets
@@ -2,63 +2,6 @@
 
   <Import Project="..\..\Directory.Build.targets" />
 
-  <PropertyGroup>
-    <NetStandard1xPackage>
-      Microsoft.NETCore.Platforms;
-      Microsoft.Win32.Primitives;
-      System.AppContext;
-      System.Collections;
-      System.Collections.Concurrent;
-      System.Console;
-      System.Diagnostics.Debug;
-      System.Diagnostics.DiagnosticSource;
-      System.Diagnostics.Tools;
-      System.Diagnostics.Tracing;
-      System.Globalization;
-      System.Globalization.Calendars;
-      System.IO;
-      System.IO.Compression;
-      System.IO.Compression.ZipFile;
-      System.IO.FileSystem;
-      System.IO.FileSystem.Primitives;
-      System.Linq;
-      System.Linq.Expressions;
-      System.Net.Http;
-      System.Net.Primitives;
-      System.Net.Sockets;
-      System.ObjectModel;
-      System.Reflection;
-      System.Reflection.Extensions;
-      System.Reflection.Primitives;
-      System.Resources.ResourceManager;
-      System.Runtime;
-      System.Runtime.Extensions;
-      System.Runtime.Handles;
-      System.Runtime.InteropServices;
-      System.Runtime.InteropServices.RuntimeInformation;
-      System.Runtime.Numerics;
-      System.Security.Cryptography.Algorithms;
-      System.Security.Cryptography.Cng;
-      System.Security.Cryptography.Encoding;
-      System.Security.Cryptography.Primitives;
-      System.Security.Cryptography.OpenSsl;
-      System.Security.Cryptography.X509Certificates;
-      System.Text.Encoding;
-      System.Text.Encoding.Extensions;
-      System.Text.RegularExpressions;
-      System.Threading;
-      System.Threading.Tasks;
-      System.Threading.Timer;
-      System.Xml.ReaderWriter;
-      System.Xml.XDocument;
-    </NetStandard1xPackage>
-  </PropertyGroup>
-
-  <PropertyGroup>
-    <!-- When the library targets netstandard1.x and is part of the .NET Standard 1.x dependency graph, disable the implicit framework references to avoid cyclic dependencies. -->
-    <DisableImplicitFrameworkReferences Condition="'$(DisableImplicitFrameworkReferences)' == '' and ($(TargetFramework.StartsWith('netstandard1')) or '$(TargetFramework)' == 'netcoreapp1.1') and $(NetStandard1xPackage.Contains('$(AssemblyName);'))">true</DisableImplicitFrameworkReferences>
-  </PropertyGroup>
-
   <ItemGroup>
     <Compile Include="ref/$(TargetFramework)/*$(DefaultLanguageSourceExtension)" />
     <Compile Include="lib/$(TargetFramework)/*$(DefaultLanguageSourceExtension)" />
diff --git a/src/referencePackages/src/microsoft.csharp/4.7.0/Microsoft.CSharp.4.7.0.csproj b/src/referencePackages/src/microsoft.csharp/4.7.0/Microsoft.CSharp.4.7.0.csproj
index 85d96899..59abea2a 100644
--- a/src/referencePackages/src/microsoft.csharp/4.7.0/Microsoft.CSharp.4.7.0.csproj
+++ b/src/referencePackages/src/microsoft.csharp/4.7.0/Microsoft.CSharp.4.7.0.csproj
@@ -1,12 +1,8 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>Microsoft.CSharp</AssemblyName>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Dynamic.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
 </Project>
diff --git a/src/referencePackages/src/microsoft.csharp/4.7.0/microsoft.csharp.nuspec b/src/referencePackages/src/microsoft.csharp/4.7.0/microsoft.csharp.nuspec
index 6556e346..f4261111 100644
--- a/src/referencePackages/src/microsoft.csharp/4.7.0/microsoft.csharp.nuspec
+++ b/src/referencePackages/src/microsoft.csharp/4.7.0/microsoft.csharp.nuspec
@@ -25,15 +25,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <copyright>© Microsoft Corporation. All rights reserved.</copyright>
     <serviceable>true</serviceable>
     <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-        <dependency id="System.Dynamic.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-        <dependency id="System.Dynamic.Runtime" version="4.3.0" />
-        <dependency id="System.Reflection.TypeExtensions" version="4.7.0" exclude="Compile" />
-      </group>
       <group targetFramework=".NETStandard2.0" />
     </dependencies>
   </metadata>
diff --git a/src/referencePackages/src/microsoft.csharp/4.7.0/ref/netstandard1.0/Microsoft.CSharp.cs b/src/referencePackages/src/microsoft.csharp/4.7.0/ref/netstandard1.0/Microsoft.CSharp.cs
deleted file mode 100644
index a981ff16..00000000
--- a/src/referencePackages/src/microsoft.csharp/4.7.0/ref/netstandard1.0/Microsoft.CSharp.cs
+++ /dev/null
@@ -1,103 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("Microsoft.CSharp")]
-[assembly: System.Reflection.AssemblyDescription("Microsoft.CSharp")]
-[assembly: System.Reflection.AssemblyDefaultAlias("Microsoft.CSharp")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace Microsoft.CSharp.RuntimeBinder
-{
-    public static partial class Binder
-    {
-        public static System.Runtime.CompilerServices.CallSiteBinder BinaryOperation(CSharpBinderFlags flags, System.Linq.Expressions.ExpressionType operation, System.Type context, System.Collections.Generic.IEnumerable<CSharpArgumentInfo> argumentInfo) { throw null; }
-
-        public static System.Runtime.CompilerServices.CallSiteBinder Convert(CSharpBinderFlags flags, System.Type type, System.Type context) { throw null; }
-
-        public static System.Runtime.CompilerServices.CallSiteBinder GetIndex(CSharpBinderFlags flags, System.Type context, System.Collections.Generic.IEnumerable<CSharpArgumentInfo> argumentInfo) { throw null; }
-
-        public static System.Runtime.CompilerServices.CallSiteBinder GetMember(CSharpBinderFlags flags, string name, System.Type context, System.Collections.Generic.IEnumerable<CSharpArgumentInfo> argumentInfo) { throw null; }
-
-        public static System.Runtime.CompilerServices.CallSiteBinder Invoke(CSharpBinderFlags flags, System.Type context, System.Collections.Generic.IEnumerable<CSharpArgumentInfo> argumentInfo) { throw null; }
-
-        public static System.Runtime.CompilerServices.CallSiteBinder InvokeConstructor(CSharpBinderFlags flags, System.Type context, System.Collections.Generic.IEnumerable<CSharpArgumentInfo> argumentInfo) { throw null; }
-
-        public static System.Runtime.CompilerServices.CallSiteBinder InvokeMember(CSharpBinderFlags flags, string name, System.Collections.Generic.IEnumerable<System.Type> typeArguments, System.Type context, System.Collections.Generic.IEnumerable<CSharpArgumentInfo> argumentInfo) { throw null; }
-
-        public static System.Runtime.CompilerServices.CallSiteBinder IsEvent(CSharpBinderFlags flags, string name, System.Type context) { throw null; }
-
-        public static System.Runtime.CompilerServices.CallSiteBinder SetIndex(CSharpBinderFlags flags, System.Type context, System.Collections.Generic.IEnumerable<CSharpArgumentInfo> argumentInfo) { throw null; }
-
-        public static System.Runtime.CompilerServices.CallSiteBinder SetMember(CSharpBinderFlags flags, string name, System.Type context, System.Collections.Generic.IEnumerable<CSharpArgumentInfo> argumentInfo) { throw null; }
-
-        public static System.Runtime.CompilerServices.CallSiteBinder UnaryOperation(CSharpBinderFlags flags, System.Linq.Expressions.ExpressionType operation, System.Type context, System.Collections.Generic.IEnumerable<CSharpArgumentInfo> argumentInfo) { throw null; }
-    }
-
-    public sealed partial class CSharpArgumentInfo
-    {
-        internal CSharpArgumentInfo() { }
-
-        public static CSharpArgumentInfo Create(CSharpArgumentInfoFlags flags, string name) { throw null; }
-    }
-
-    [System.Flags]
-    public enum CSharpArgumentInfoFlags
-    {
-        None = 0,
-        UseCompileTimeType = 1,
-        Constant = 2,
-        NamedArgument = 4,
-        IsRef = 8,
-        IsOut = 16,
-        IsStaticType = 32
-    }
-
-    [System.Flags]
-    public enum CSharpBinderFlags
-    {
-        None = 0,
-        CheckedContext = 1,
-        InvokeSimpleName = 2,
-        InvokeSpecialName = 4,
-        BinaryOperationLogical = 8,
-        ConvertExplicit = 16,
-        ConvertArrayIndex = 32,
-        ResultIndexed = 64,
-        ValueFromCompoundAssignment = 128,
-        ResultDiscarded = 256
-    }
-
-    public partial class RuntimeBinderException : System.Exception
-    {
-        public RuntimeBinderException() { }
-
-        public RuntimeBinderException(string message, System.Exception innerException) { }
-
-        public RuntimeBinderException(string message) { }
-    }
-
-    public partial class RuntimeBinderInternalCompilerException : System.Exception
-    {
-        public RuntimeBinderInternalCompilerException() { }
-
-        public RuntimeBinderInternalCompilerException(string message, System.Exception innerException) { }
-
-        public RuntimeBinderInternalCompilerException(string message) { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/microsoft.visualbasic/10.3.0/Microsoft.VisualBasic.10.3.0.csproj b/src/referencePackages/src/microsoft.visualbasic/10.3.0/Microsoft.VisualBasic.10.3.0.csproj
index 065e15d3..ee68d07d 100644
--- a/src/referencePackages/src/microsoft.visualbasic/10.3.0/Microsoft.VisualBasic.10.3.0.csproj
+++ b/src/referencePackages/src/microsoft.visualbasic/10.3.0/Microsoft.VisualBasic.10.3.0.csproj
@@ -1,7 +1,7 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.1;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>Microsoft.VisualBasic</AssemblyName>
   </PropertyGroup>
 
diff --git a/src/referencePackages/src/microsoft.visualbasic/10.3.0/microsoft.visualbasic.nuspec b/src/referencePackages/src/microsoft.visualbasic/10.3.0/microsoft.visualbasic.nuspec
index dff0c1c6..5f711ed7 100644
--- a/src/referencePackages/src/microsoft.visualbasic/10.3.0/microsoft.visualbasic.nuspec
+++ b/src/referencePackages/src/microsoft.visualbasic/10.3.0/microsoft.visualbasic.nuspec
@@ -22,14 +22,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
     <serviceable>true</serviceable>
     <dependencies>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-        <dependency id="System.Dynamic.Runtime" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Reflection.TypeExtensions" version="4.4.0" exclude="Compile" />
-      </group>
       <group targetFramework=".NETStandard2.0" />
     </dependencies>
   </metadata>
diff --git a/src/referencePackages/src/microsoft.visualbasic/10.3.0/ref/netstandard1.1/Microsoft.VisualBasic.cs b/src/referencePackages/src/microsoft.visualbasic/10.3.0/ref/netstandard1.1/Microsoft.VisualBasic.cs
deleted file mode 100644
index 12a5a5c8..00000000
--- a/src/referencePackages/src/microsoft.visualbasic/10.3.0/ref/netstandard1.1/Microsoft.VisualBasic.cs
+++ /dev/null
@@ -1,332 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("Microsoft.VisualBasic")]
-[assembly: System.Reflection.AssemblyDescription("Microsoft.VisualBasic")]
-[assembly: System.Reflection.AssemblyDefaultAlias("Microsoft.VisualBasic")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("10.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace Microsoft.VisualBasic
-{
-    public enum CallType
-    {
-        Method = 1,
-        Get = 2,
-        Let = 4,
-        Set = 8
-    }
-
-    [CompilerServices.StandardModule]
-    public sealed partial class Constants
-    {
-        internal Constants() { }
-
-        public const string vbBack = "\b";
-        public const string vbCr = "\r";
-        public const string vbCrLf = "\r\n";
-        public const string vbFormFeed = "\f";
-        public const string vbLf = "\n";
-        [System.Obsolete("For a carriage return and line feed, use vbCrLf.  For the current platform's newline, use System.Environment.NewLine.")]
-        public const string vbNewLine = "\r\n";
-        public const string vbNullChar = "\0";
-        public const string vbNullString = null;
-        public const string vbTab = "\t";
-        public const string vbVerticalTab = "\v";
-    }
-
-    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
-    public sealed partial class HideModuleNameAttribute : System.Attribute
-    {
-    }
-
-    [CompilerServices.StandardModule]
-    public sealed partial class Strings
-    {
-        internal Strings() { }
-
-        public static int AscW(char String) { throw null; }
-
-        public static int AscW(string String) { throw null; }
-
-        public static char ChrW(int CharCode) { throw null; }
-    }
-}
-
-namespace Microsoft.VisualBasic.CompilerServices
-{
-    public sealed partial class Conversions
-    {
-        internal Conversions() { }
-
-        public static object ChangeType(object Expression, System.Type TargetType) { throw null; }
-
-        public static bool ToBoolean(object Value) { throw null; }
-
-        public static bool ToBoolean(string Value) { throw null; }
-
-        public static byte ToByte(object Value) { throw null; }
-
-        public static byte ToByte(string Value) { throw null; }
-
-        public static char ToChar(object Value) { throw null; }
-
-        public static char ToChar(string Value) { throw null; }
-
-        public static char[] ToCharArrayRankOne(object Value) { throw null; }
-
-        public static char[] ToCharArrayRankOne(string Value) { throw null; }
-
-        public static System.DateTime ToDate(object Value) { throw null; }
-
-        public static System.DateTime ToDate(string Value) { throw null; }
-
-        public static decimal ToDecimal(bool Value) { throw null; }
-
-        public static decimal ToDecimal(object Value) { throw null; }
-
-        public static decimal ToDecimal(string Value) { throw null; }
-
-        public static double ToDouble(object Value) { throw null; }
-
-        public static double ToDouble(string Value) { throw null; }
-
-        public static T ToGenericParameter<T>(object Value) { throw null; }
-
-        public static int ToInteger(object Value) { throw null; }
-
-        public static int ToInteger(string Value) { throw null; }
-
-        public static long ToLong(object Value) { throw null; }
-
-        public static long ToLong(string Value) { throw null; }
-
-        [System.CLSCompliant(false)]
-        public static sbyte ToSByte(object Value) { throw null; }
-
-        [System.CLSCompliant(false)]
-        public static sbyte ToSByte(string Value) { throw null; }
-
-        public static short ToShort(object Value) { throw null; }
-
-        public static short ToShort(string Value) { throw null; }
-
-        public static float ToSingle(object Value) { throw null; }
-
-        public static float ToSingle(string Value) { throw null; }
-
-        public static string ToString(bool Value) { throw null; }
-
-        public static string ToString(byte Value) { throw null; }
-
-        public static string ToString(char Value) { throw null; }
-
-        public static string ToString(System.DateTime Value) { throw null; }
-
-        public static string ToString(decimal Value) { throw null; }
-
-        public static string ToString(double Value) { throw null; }
-
-        public static string ToString(short Value) { throw null; }
-
-        public static string ToString(int Value) { throw null; }
-
-        public static string ToString(long Value) { throw null; }
-
-        public static string ToString(object Value) { throw null; }
-
-        public static string ToString(float Value) { throw null; }
-
-        [System.CLSCompliant(false)]
-        public static string ToString(uint Value) { throw null; }
-
-        [System.CLSCompliant(false)]
-        public static string ToString(ulong Value) { throw null; }
-
-        [System.CLSCompliant(false)]
-        public static uint ToUInteger(object Value) { throw null; }
-
-        [System.CLSCompliant(false)]
-        public static uint ToUInteger(string Value) { throw null; }
-
-        [System.CLSCompliant(false)]
-        public static ulong ToULong(object Value) { throw null; }
-
-        [System.CLSCompliant(false)]
-        public static ulong ToULong(string Value) { throw null; }
-
-        [System.CLSCompliant(false)]
-        public static ushort ToUShort(object Value) { throw null; }
-
-        [System.CLSCompliant(false)]
-        public static ushort ToUShort(string Value) { throw null; }
-    }
-
-    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
-    public sealed partial class DesignerGeneratedAttribute : System.Attribute
-    {
-    }
-
-    public sealed partial class IncompleteInitialization : System.Exception
-    {
-    }
-
-    public sealed partial class NewLateBinding
-    {
-        internal NewLateBinding() { }
-
-        public static object LateCall(object Instance, System.Type Type, string MemberName, object[] Arguments, string[] ArgumentNames, System.Type[] TypeArguments, bool[] CopyBack, bool IgnoreReturn) { throw null; }
-
-        public static object LateGet(object Instance, System.Type Type, string MemberName, object[] Arguments, string[] ArgumentNames, System.Type[] TypeArguments, bool[] CopyBack) { throw null; }
-
-        public static object LateIndexGet(object Instance, object[] Arguments, string[] ArgumentNames) { throw null; }
-
-        public static void LateIndexSet(object Instance, object[] Arguments, string[] ArgumentNames) { }
-
-        public static void LateIndexSetComplex(object Instance, object[] Arguments, string[] ArgumentNames, bool OptimisticSet, bool RValueBase) { }
-
-        public static void LateSet(object Instance, System.Type Type, string MemberName, object[] Arguments, string[] ArgumentNames, System.Type[] TypeArguments, bool OptimisticSet, bool RValueBase, CallType CallType) { }
-
-        public static void LateSet(object Instance, System.Type Type, string MemberName, object[] Arguments, string[] ArgumentNames, System.Type[] TypeArguments) { }
-
-        public static void LateSetComplex(object Instance, System.Type Type, string MemberName, object[] Arguments, string[] ArgumentNames, System.Type[] TypeArguments, bool OptimisticSet, bool RValueBase) { }
-    }
-
-    public sealed partial class ObjectFlowControl
-    {
-        internal ObjectFlowControl() { }
-
-        public static void CheckForSyncLockOnValueType(object Expression) { }
-
-        public sealed partial class ForLoopControl
-        {
-            internal ForLoopControl() { }
-
-            public static bool ForLoopInitObj(object Counter, object Start, object Limit, object StepValue, ref object LoopForResult, ref object CounterResult) { throw null; }
-
-            public static bool ForNextCheckDec(decimal count, decimal limit, decimal StepValue) { throw null; }
-
-            public static bool ForNextCheckObj(object Counter, object LoopObj, ref object CounterResult) { throw null; }
-
-            public static bool ForNextCheckR4(float count, float limit, float StepValue) { throw null; }
-
-            public static bool ForNextCheckR8(double count, double limit, double StepValue) { throw null; }
-        }
-    }
-
-    public sealed partial class Operators
-    {
-        internal Operators() { }
-
-        public static object AddObject(object Left, object Right) { throw null; }
-
-        public static object AndObject(object Left, object Right) { throw null; }
-
-        public static object CompareObjectEqual(object Left, object Right, bool TextCompare) { throw null; }
-
-        public static object CompareObjectGreater(object Left, object Right, bool TextCompare) { throw null; }
-
-        public static object CompareObjectGreaterEqual(object Left, object Right, bool TextCompare) { throw null; }
-
-        public static object CompareObjectLess(object Left, object Right, bool TextCompare) { throw null; }
-
-        public static object CompareObjectLessEqual(object Left, object Right, bool TextCompare) { throw null; }
-
-        public static object CompareObjectNotEqual(object Left, object Right, bool TextCompare) { throw null; }
-
-        public static int CompareString(string Left, string Right, bool TextCompare) { throw null; }
-
-        public static object ConcatenateObject(object Left, object Right) { throw null; }
-
-        public static bool ConditionalCompareObjectEqual(object Left, object Right, bool TextCompare) { throw null; }
-
-        public static bool ConditionalCompareObjectGreater(object Left, object Right, bool TextCompare) { throw null; }
-
-        public static bool ConditionalCompareObjectGreaterEqual(object Left, object Right, bool TextCompare) { throw null; }
-
-        public static bool ConditionalCompareObjectLess(object Left, object Right, bool TextCompare) { throw null; }
-
-        public static bool ConditionalCompareObjectLessEqual(object Left, object Right, bool TextCompare) { throw null; }
-
-        public static bool ConditionalCompareObjectNotEqual(object Left, object Right, bool TextCompare) { throw null; }
-
-        public static object DivideObject(object Left, object Right) { throw null; }
-
-        public static object ExponentObject(object Left, object Right) { throw null; }
-
-        public static object IntDivideObject(object Left, object Right) { throw null; }
-
-        public static object LeftShiftObject(object Operand, object Amount) { throw null; }
-
-        public static object ModObject(object Left, object Right) { throw null; }
-
-        public static object MultiplyObject(object Left, object Right) { throw null; }
-
-        public static object NegateObject(object Operand) { throw null; }
-
-        public static object NotObject(object Operand) { throw null; }
-
-        public static object OrObject(object Left, object Right) { throw null; }
-
-        public static object PlusObject(object Operand) { throw null; }
-
-        public static object RightShiftObject(object Operand, object Amount) { throw null; }
-
-        public static object SubtractObject(object Left, object Right) { throw null; }
-
-        public static object XorObject(object Left, object Right) { throw null; }
-    }
-
-    [System.AttributeUsage(System.AttributeTargets.Parameter, Inherited = false, AllowMultiple = false)]
-    public sealed partial class OptionCompareAttribute : System.Attribute
-    {
-    }
-
-    [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
-    public sealed partial class OptionTextAttribute : System.Attribute
-    {
-    }
-
-    public sealed partial class ProjectData
-    {
-        internal ProjectData() { }
-
-        public static void ClearProjectError() { }
-
-        public static void SetProjectError(System.Exception ex, int lErl) { }
-
-        public static void SetProjectError(System.Exception ex) { }
-    }
-
-    [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
-    public sealed partial class StandardModuleAttribute : System.Attribute
-    {
-    }
-
-    public sealed partial class StaticLocalInitFlag
-    {
-        public short State;
-    }
-
-    public sealed partial class Utils
-    {
-        internal Utils() { }
-
-        public static System.Array CopyArray(System.Array arySrc, System.Array aryDest) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/microsoft.win32.primitives/4.3.0/Microsoft.Win32.Primitives.4.3.0.csproj b/src/referencePackages/src/microsoft.win32.primitives/4.3.0/Microsoft.Win32.Primitives.4.3.0.csproj
deleted file mode 100644
index 77e2f231..00000000
--- a/src/referencePackages/src/microsoft.win32.primitives/4.3.0/Microsoft.Win32.Primitives.4.3.0.csproj
+++ /dev/null
@@ -1,14 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3</TargetFrameworks>
-    <AssemblyName>Microsoft.Win32.Primitives</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/microsoft.win32.primitives/4.3.0/microsoft.win32.primitives.nuspec b/src/referencePackages/src/microsoft.win32.primitives/4.3.0/microsoft.win32.primitives.nuspec
deleted file mode 100644
index 13978fda..00000000
--- a/src/referencePackages/src/microsoft.win32.primitives/4.3.0/microsoft.win32.primitives.nuspec
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>Microsoft.Win32.Primitives</id>
-    <version>4.3.0</version>
-    <title>Microsoft.Win32.Primitives</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides common types for Win32-based libraries.
-
-Commonly Used Types:
-System.ComponentModel.Win32Exception
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/microsoft.win32.primitives/4.3.0/ref/netstandard1.3/Microsoft.Win32.Primitives.cs b/src/referencePackages/src/microsoft.win32.primitives/4.3.0/ref/netstandard1.3/Microsoft.Win32.Primitives.cs
deleted file mode 100644
index bd7997fb..00000000
--- a/src/referencePackages/src/microsoft.win32.primitives/4.3.0/ref/netstandard1.3/Microsoft.Win32.Primitives.cs
+++ /dev/null
@@ -1,41 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("Microsoft.Win32.Primitives")]
-[assembly: System.Reflection.AssemblyDescription("Microsoft.Win32.Primitives")]
-[assembly: System.Reflection.AssemblyDefaultAlias("Microsoft.Win32.Primitives")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.1.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.ComponentModel
-{
-    public partial class Win32Exception : Exception
-    {
-        public Win32Exception() { }
-
-        public Win32Exception(int error, string message) { }
-
-        public Win32Exception(int error) { }
-
-        public Win32Exception(string message, Exception innerException) { }
-
-        public Win32Exception(string message) { }
-
-        public int NativeErrorCode { get { throw null; } }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/microsoft.win32.registry/5.0.0/Microsoft.Win32.Registry.5.0.0.csproj b/src/referencePackages/src/microsoft.win32.registry/5.0.0/Microsoft.Win32.Registry.5.0.0.csproj
index 4d2676a4..11832dcc 100644
--- a/src/referencePackages/src/microsoft.win32.registry/5.0.0/Microsoft.Win32.Registry.5.0.0.csproj
+++ b/src/referencePackages/src/microsoft.win32.registry/5.0.0/Microsoft.Win32.Registry.5.0.0.csproj
@@ -1,7 +1,7 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.3;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
   </PropertyGroup>
 
diff --git a/src/referencePackages/src/microsoft.win32.registry/5.0.0/microsoft.win32.registry.nuspec b/src/referencePackages/src/microsoft.win32.registry/5.0.0/microsoft.win32.registry.nuspec
index dc6e6069..502c1409 100644
--- a/src/referencePackages/src/microsoft.win32.registry/5.0.0/microsoft.win32.registry.nuspec
+++ b/src/referencePackages/src/microsoft.win32.registry/5.0.0/microsoft.win32.registry.nuspec
@@ -26,9 +26,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <serviceable>true</serviceable>
     <repository type="git" url="git://github.com/dotnet/runtime" commit="cf258a14b70ad9069470a108f13765e0e5988f51" />
     <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-      </group>
       <group targetFramework=".NETStandard2.0">
         <dependency id="System.Buffers" version="4.5.1" exclude="Compile" />
         <dependency id="System.Memory" version="4.5.4" exclude="Compile" />
diff --git a/src/referencePackages/src/microsoft.win32.registry/5.0.0/ref/netstandard1.3/Microsoft.Win32.Registry.cs b/src/referencePackages/src/microsoft.win32.registry/5.0.0/ref/netstandard1.3/Microsoft.Win32.Registry.cs
deleted file mode 100644
index 3b7cbf49..00000000
--- a/src/referencePackages/src/microsoft.win32.registry/5.0.0/ref/netstandard1.3/Microsoft.Win32.Registry.cs
+++ /dev/null
@@ -1,185 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("Microsoft.Win32.Registry")]
-[assembly: System.Reflection.AssemblyDescription("Microsoft.Win32.Registry")]
-[assembly: System.Reflection.AssemblyDefaultAlias("Microsoft.Win32.Registry")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace Microsoft.Win32
-{
-    public static partial class Registry
-    {
-        public static readonly RegistryKey ClassesRoot;
-        public static readonly RegistryKey CurrentConfig;
-        public static readonly RegistryKey CurrentUser;
-        public static readonly RegistryKey LocalMachine;
-        public static readonly RegistryKey PerformanceData;
-        public static readonly RegistryKey Users;
-        public static object GetValue(string keyName, string valueName, object defaultValue) { throw null; }
-
-        public static void SetValue(string keyName, string valueName, object value, RegistryValueKind valueKind) { }
-
-        public static void SetValue(string keyName, string valueName, object value) { }
-    }
-
-    public enum RegistryHive
-    {
-        ClassesRoot = int.MinValue,
-        CurrentUser = -2147483647,
-        LocalMachine = -2147483646,
-        Users = -2147483645,
-        PerformanceData = -2147483644,
-        CurrentConfig = -2147483643
-    }
-
-    public sealed partial class RegistryKey : System.IDisposable
-    {
-        internal RegistryKey() { }
-
-        public SafeHandles.SafeRegistryHandle Handle { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public int SubKeyCount { get { throw null; } }
-
-        public int ValueCount { get { throw null; } }
-
-        public RegistryView View { get { throw null; } }
-
-        public RegistryKey CreateSubKey(string subkey, bool writable, RegistryOptions options) { throw null; }
-
-        public RegistryKey CreateSubKey(string subkey, bool writable) { throw null; }
-
-        public RegistryKey CreateSubKey(string subkey) { throw null; }
-
-        public void DeleteSubKey(string subkey, bool throwOnMissingSubKey) { }
-
-        public void DeleteSubKey(string subkey) { }
-
-        public void DeleteSubKeyTree(string subkey, bool throwOnMissingSubKey) { }
-
-        public void DeleteSubKeyTree(string subkey) { }
-
-        public void DeleteValue(string name, bool throwOnMissingValue) { }
-
-        public void DeleteValue(string name) { }
-
-        public void Dispose() { }
-
-        public void Flush() { }
-
-        public static RegistryKey FromHandle(SafeHandles.SafeRegistryHandle handle, RegistryView view) { throw null; }
-
-        public static RegistryKey FromHandle(SafeHandles.SafeRegistryHandle handle) { throw null; }
-
-        public string[] GetSubKeyNames() { throw null; }
-
-        public object GetValue(string name, object defaultValue, RegistryValueOptions options) { throw null; }
-
-        public object GetValue(string name, object defaultValue) { throw null; }
-
-        public object GetValue(string name) { throw null; }
-
-        public RegistryValueKind GetValueKind(string name) { throw null; }
-
-        public string[] GetValueNames() { throw null; }
-
-        public static RegistryKey OpenBaseKey(RegistryHive hKey, RegistryView view) { throw null; }
-
-        public RegistryKey OpenSubKey(string name, bool writable) { throw null; }
-
-        public RegistryKey OpenSubKey(string name, System.Security.AccessControl.RegistryRights rights) { throw null; }
-
-        public RegistryKey OpenSubKey(string name) { throw null; }
-
-        public void SetValue(string name, object value, RegistryValueKind valueKind) { }
-
-        public void SetValue(string name, object value) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    [System.Flags]
-    public enum RegistryOptions
-    {
-        None = 0,
-        Volatile = 1
-    }
-
-    public enum RegistryValueKind
-    {
-        None = -1,
-        Unknown = 0,
-        String = 1,
-        ExpandString = 2,
-        Binary = 3,
-        DWord = 4,
-        MultiString = 7,
-        QWord = 11
-    }
-
-    [System.Flags]
-    public enum RegistryValueOptions
-    {
-        None = 0,
-        DoNotExpandEnvironmentNames = 1
-    }
-
-    public enum RegistryView
-    {
-        Default = 0,
-        Registry64 = 256,
-        Registry32 = 512
-    }
-}
-
-namespace Microsoft.Win32.SafeHandles
-{
-    public sealed partial class SafeRegistryHandle : System.Runtime.InteropServices.SafeHandle
-    {
-        public SafeRegistryHandle(System.IntPtr preexistingHandle, bool ownsHandle) : base(default, default) { }
-
-        public override bool IsInvalid { get { throw null; } }
-
-        protected override bool ReleaseHandle() { throw null; }
-    }
-}
-
-namespace System.Security.AccessControl
-{
-    [Flags]
-    public enum RegistryRights
-    {
-        QueryValues = 1,
-        SetValue = 2,
-        CreateSubKey = 4,
-        EnumerateSubKeys = 8,
-        Notify = 16,
-        CreateLink = 32,
-        Delete = 65536,
-        ReadPermissions = 131072,
-        WriteKey = 131078,
-        ExecuteKey = 131097,
-        ReadKey = 131097,
-        ChangePermissions = 262144,
-        TakeOwnership = 524288,
-        FullControl = 983103
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.appcontext/4.3.0/System.AppContext.4.3.0.csproj b/src/referencePackages/src/system.appcontext/4.3.0/System.AppContext.4.3.0.csproj
deleted file mode 100644
index b97950af..00000000
--- a/src/referencePackages/src/system.appcontext/4.3.0/System.AppContext.4.3.0.csproj
+++ /dev/null
@@ -1,16 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3;netstandard1.6</TargetFrameworks>
-    <AssemblyName>System.AppContext</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.6'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.appcontext/4.3.0/ref/netstandard/_._ b/src/referencePackages/src/system.appcontext/4.3.0/ref/netstandard/_._
deleted file mode 100755
index e69de29b..00000000
diff --git a/src/referencePackages/src/system.appcontext/4.3.0/ref/netstandard1.3/System.AppContext.cs b/src/referencePackages/src/system.appcontext/4.3.0/ref/netstandard1.3/System.AppContext.cs
deleted file mode 100644
index 462d73e2..00000000
--- a/src/referencePackages/src/system.appcontext/4.3.0/ref/netstandard1.3/System.AppContext.cs
+++ /dev/null
@@ -1,34 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.AppContext")]
-[assembly: System.Reflection.AssemblyDescription("System.AppContext")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.AppContext")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.23123.00")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.23123.00 built by: PROJECTKREL")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata("", "")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public static partial class AppContext
-    {
-        public static string BaseDirectory { get { throw null; } }
-
-        public static void SetSwitch(string switchName, bool isEnabled) { }
-
-        public static bool TryGetSwitch(string switchName, out bool isEnabled) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.appcontext/4.3.0/ref/netstandard1.6/System.AppContext.cs b/src/referencePackages/src/system.appcontext/4.3.0/ref/netstandard1.6/System.AppContext.cs
deleted file mode 100644
index 4d556eca..00000000
--- a/src/referencePackages/src/system.appcontext/4.3.0/ref/netstandard1.6/System.AppContext.cs
+++ /dev/null
@@ -1,39 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.AppContext")]
-[assembly: System.Reflection.AssemblyDescription("System.AppContext")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.AppContext")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public static partial class AppContext
-    {
-        public static string BaseDirectory { get { throw null; } }
-
-        public static string TargetFrameworkName { get { throw null; } }
-
-        public static object GetData(string name) { throw null; }
-
-        public static void SetSwitch(string switchName, bool isEnabled) { }
-
-        public static bool TryGetSwitch(string switchName, out bool isEnabled) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.appcontext/4.3.0/system.appcontext.nuspec b/src/referencePackages/src/system.appcontext/4.3.0/system.appcontext.nuspec
deleted file mode 100644
index e3fa9078..00000000
--- a/src/referencePackages/src/system.appcontext/4.3.0/system.appcontext.nuspec
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.AppContext</id>
-    <version>4.3.0</version>
-    <title>System.AppContext</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides the System.AppContext class, which allows access to the BaseDirectory property and other application specific data.
-
-Commonly Used Types:
-System.AppContext
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.6">
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.buffers/4.3.0/System.Buffers.4.3.0.csproj b/src/referencePackages/src/system.buffers/4.3.0/System.Buffers.4.3.0.csproj
deleted file mode 100644
index b9352f7a..00000000
--- a/src/referencePackages/src/system.buffers/4.3.0/System.Buffers.4.3.0.csproj
+++ /dev/null
@@ -1,17 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.1</TargetFrameworks>
-    <AssemblyName>System.Buffers</AssemblyName>
-    <StrongNameKeyId>Open</StrongNameKeyId>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Tracing" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Threading" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.buffers/4.3.0/lib/netstandard1.1/System.Buffers.cs b/src/referencePackages/src/system.buffers/4.3.0/lib/netstandard1.1/System.Buffers.cs
deleted file mode 100644
index 7b29f6c6..00000000
--- a/src/referencePackages/src/system.buffers/4.3.0/lib/netstandard1.1/System.Buffers.cs
+++ /dev/null
@@ -1,38 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
-[assembly: System.Reflection.AssemblyTitle("System.Buffers")]
-[assembly: System.Reflection.AssemblyDescription("System.Buffers")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Buffers")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.24705.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.24705.01. Commit Hash: 4d1af962ca0fede10beb01d197367c2f90e92c97")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.1.0")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Buffers
-{
-    public abstract partial class ArrayPool<T>
-    {
-        public static ArrayPool<T> Shared { get { throw null; } }
-
-        public static ArrayPool<T> Create() { throw null; }
-
-        public static ArrayPool<T> Create(int maxArrayLength, int maxArraysPerBucket) { throw null; }
-
-        public abstract T[] Rent(int minimumLength);
-        public abstract void Return(T[] array, bool clearArray = false);
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.buffers/4.3.0/system.buffers.nuspec b/src/referencePackages/src/system.buffers/4.3.0/system.buffers.nuspec
deleted file mode 100644
index 97fe5c2c..00000000
--- a/src/referencePackages/src/system.buffers/4.3.0/system.buffers.nuspec
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Buffers</id>
-    <version>4.3.0</version>
-    <title>System.Buffers</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides resource pooling of any type for performance-critical applications that allocate and deallocate objects frequently.
-
-Commonly Used Types:
-System.Buffers.ArrayPool&lt;T&gt;
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" />
-        <dependency id="System.Diagnostics.Tracing" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Threading" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.buffers/4.5.1/System.Buffers.4.5.1.csproj b/src/referencePackages/src/system.buffers/4.5.1/System.Buffers.4.5.1.csproj
index 98a04371..1c0a1f57 100644
--- a/src/referencePackages/src/system.buffers/4.5.1/System.Buffers.4.5.1.csproj
+++ b/src/referencePackages/src/system.buffers/4.5.1/System.Buffers.4.5.1.csproj
@@ -1,17 +1,9 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.1;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Buffers</AssemblyName>
     <StrongNameKeyId>Open</StrongNameKeyId>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Tracing" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Threading" Version="4.3.0" />
-  </ItemGroup>
-
 </Project>
diff --git a/src/referencePackages/src/system.buffers/4.5.1/ref/netstandard1.1/System.Buffers.cs b/src/referencePackages/src/system.buffers/4.5.1/ref/netstandard1.1/System.Buffers.cs
deleted file mode 100644
index 0484f8df..00000000
--- a/src/referencePackages/src/system.buffers/4.5.1/ref/netstandard1.1/System.Buffers.cs
+++ /dev/null
@@ -1,39 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Buffers")]
-[assembly: System.Reflection.AssemblyDescription("System.Buffers")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Buffers")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.28619.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.28619.01 @BuiltBy: dlab14-DDVSOWINAGE069 @Branch: release/2.1 @SrcCode: https://github.com/dotnet/corefx/tree/7601f4f6225089ffb291dc7d58293c7bbf5c5d4f")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyMetadata("PreferInbox", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.2.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Buffers
-{
-    public abstract partial class ArrayPool<T>
-    {
-        public static ArrayPool<T> Shared { get { throw null; } }
-
-        public static ArrayPool<T> Create() { throw null; }
-
-        public static ArrayPool<T> Create(int maxArrayLength, int maxArraysPerBucket) { throw null; }
-
-        public abstract T[] Rent(int minimumLength);
-        public abstract void Return(T[] array, bool clearArray = false);
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.buffers/4.5.1/system.buffers.nuspec b/src/referencePackages/src/system.buffers/4.5.1/system.buffers.nuspec
index a02d79fc..45fb550d 100644
--- a/src/referencePackages/src/system.buffers/4.5.1/system.buffers.nuspec
+++ b/src/referencePackages/src/system.buffers/4.5.1/system.buffers.nuspec
@@ -21,13 +21,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <copyright>© Microsoft Corporation. All rights reserved.</copyright>
     <serviceable>true</serviceable>
     <dependencies>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Tracing" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Threading" version="4.3.0" exclude="Compile" />
-      </group>
       <group targetFramework=".NETStandard2.0" />
     </dependencies>
   </metadata>
diff --git a/src/referencePackages/src/system.collections.concurrent/4.3.0/System.Collections.Concurrent.4.3.0.csproj b/src/referencePackages/src/system.collections.concurrent/4.3.0/System.Collections.Concurrent.4.3.0.csproj
deleted file mode 100644
index aa821d9a..00000000
--- a/src/referencePackages/src/system.collections.concurrent/4.3.0/System.Collections.Concurrent.4.3.0.csproj
+++ /dev/null
@@ -1,26 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.1;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Collections.Concurrent</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Tracing" Version="4.3.0" />
-    <PackageReference Include="System.Globalization" Version="4.3.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Threading" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.collections.concurrent/4.3.0/ref/netstandard1.1/System.Collections.Concurrent.cs b/src/referencePackages/src/system.collections.concurrent/4.3.0/ref/netstandard1.1/System.Collections.Concurrent.cs
deleted file mode 100644
index a199b6dd..00000000
--- a/src/referencePackages/src/system.collections.concurrent/4.3.0/ref/netstandard1.1/System.Collections.Concurrent.cs
+++ /dev/null
@@ -1,379 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyTitle("System.Collections.Concurrent.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.Collections.Concurrent.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Collections.Concurrent.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Collections.Concurrent
-{
-    public partial class BlockingCollection<T> : Generic.IEnumerable<T>, ICollection, IEnumerable, IDisposable
-    {
-        public BlockingCollection() { }
-
-        public BlockingCollection(IProducerConsumerCollection<T> collection, int boundedCapacity) { }
-
-        public BlockingCollection(IProducerConsumerCollection<T> collection) { }
-
-        public BlockingCollection(int boundedCapacity) { }
-
-        public int BoundedCapacity { get { throw null; } }
-
-        public int Count { get { throw null; } }
-
-        public bool IsAddingCompleted { get { throw null; } }
-
-        public bool IsCompleted { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public void Add(T item, Threading.CancellationToken cancellationToken) { }
-
-        public void Add(T item) { }
-
-        public static int AddToAny(BlockingCollection<T>[] collections, T item, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public static int AddToAny(BlockingCollection<T>[] collections, T item) { throw null; }
-
-        public void CompleteAdding() { }
-
-        public void CopyTo(T[] array, int index) { }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public Generic.IEnumerable<T> GetConsumingEnumerable() { throw null; }
-
-        public Generic.IEnumerable<T> GetConsumingEnumerable(Threading.CancellationToken cancellationToken) { throw null; }
-
-        Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public T Take() { throw null; }
-
-        public T Take(Threading.CancellationToken cancellationToken) { throw null; }
-
-        public static int TakeFromAny(BlockingCollection<T>[] collections, out T item, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public static int TakeFromAny(BlockingCollection<T>[] collections, out T item) { throw null; }
-
-        public T[] ToArray() { throw null; }
-
-        public bool TryAdd(T item, int millisecondsTimeout, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public bool TryAdd(T item, int millisecondsTimeout) { throw null; }
-
-        public bool TryAdd(T item, TimeSpan timeout) { throw null; }
-
-        public bool TryAdd(T item) { throw null; }
-
-        public static int TryAddToAny(BlockingCollection<T>[] collections, T item, int millisecondsTimeout, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public static int TryAddToAny(BlockingCollection<T>[] collections, T item, int millisecondsTimeout) { throw null; }
-
-        public static int TryAddToAny(BlockingCollection<T>[] collections, T item, TimeSpan timeout) { throw null; }
-
-        public static int TryAddToAny(BlockingCollection<T>[] collections, T item) { throw null; }
-
-        public bool TryTake(out T item, int millisecondsTimeout, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public bool TryTake(out T item, int millisecondsTimeout) { throw null; }
-
-        public bool TryTake(out T item, TimeSpan timeout) { throw null; }
-
-        public bool TryTake(out T item) { throw null; }
-
-        public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, int millisecondsTimeout, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, int millisecondsTimeout) { throw null; }
-
-        public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, TimeSpan timeout) { throw null; }
-
-        public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item) { throw null; }
-    }
-
-    public partial class ConcurrentBag<T> : IProducerConsumerCollection<T>, Generic.IEnumerable<T>, ICollection, IEnumerable
-    {
-        public ConcurrentBag() { }
-
-        public ConcurrentBag(Generic.IEnumerable<T> collection) { }
-
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public void Add(T item) { }
-
-        public void CopyTo(T[] array, int index) { }
-
-        public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        bool IProducerConsumerCollection<T>.TryAdd(T item) { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public T[] ToArray() { throw null; }
-
-        public bool TryPeek(out T result) { throw null; }
-
-        public bool TryTake(out T result) { throw null; }
-    }
-
-    public partial class ConcurrentDictionary<TKey, TValue> : Generic.IDictionary<TKey, TValue>, Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable
-    {
-        public ConcurrentDictionary() { }
-
-        public ConcurrentDictionary(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> collection, Generic.IEqualityComparer<TKey> comparer) { }
-
-        public ConcurrentDictionary(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> collection) { }
-
-        public ConcurrentDictionary(Generic.IEqualityComparer<TKey> comparer) { }
-
-        public ConcurrentDictionary(int concurrencyLevel, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> collection, Generic.IEqualityComparer<TKey> comparer) { }
-
-        public ConcurrentDictionary(int concurrencyLevel, int capacity, Generic.IEqualityComparer<TKey> comparer) { }
-
-        public ConcurrentDictionary(int concurrencyLevel, int capacity) { }
-
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public TValue this[TKey key] { get { throw null; } set { } }
-
-        public Generic.ICollection<TKey> Keys { get { throw null; } }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IDictionary.IsFixedSize { get { throw null; } }
-
-        bool IDictionary.IsReadOnly { get { throw null; } }
-
-        object IDictionary.this[object key] { get { throw null; } set { } }
-
-        ICollection IDictionary.Keys { get { throw null; } }
-
-        ICollection IDictionary.Values { get { throw null; } }
-
-        public Generic.ICollection<TValue> Values { get { throw null; } }
-
-        public TValue AddOrUpdate(TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory) { throw null; }
-
-        public TValue AddOrUpdate(TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory) { throw null; }
-
-        public void Clear() { }
-
-        public bool ContainsKey(TKey key) { throw null; }
-
-        public Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>> GetEnumerator() { throw null; }
-
-        public TValue GetOrAdd(TKey key, TValue value) { throw null; }
-
-        public TValue GetOrAdd(TKey key, Func<TKey, TValue> valueFactory) { throw null; }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Add(Generic.KeyValuePair<TKey, TValue> keyValuePair) { }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Contains(Generic.KeyValuePair<TKey, TValue> keyValuePair) { throw null; }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.CopyTo(Generic.KeyValuePair<TKey, TValue>[] array, int index) { }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Remove(Generic.KeyValuePair<TKey, TValue> keyValuePair) { throw null; }
-
-        void Generic.IDictionary<TKey, TValue>.Add(TKey key, TValue value) { }
-
-        bool Generic.IDictionary<TKey, TValue>.Remove(TKey key) { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        void IDictionary.Add(object key, object value) { }
-
-        bool IDictionary.Contains(object key) { throw null; }
-
-        IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-        void IDictionary.Remove(object key) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public Generic.KeyValuePair<TKey, TValue>[] ToArray() { throw null; }
-
-        public bool TryAdd(TKey key, TValue value) { throw null; }
-
-        public bool TryGetValue(TKey key, out TValue value) { throw null; }
-
-        public bool TryRemove(TKey key, out TValue value) { throw null; }
-
-        public bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue) { throw null; }
-    }
-
-    public partial class ConcurrentQueue<T> : IProducerConsumerCollection<T>, Generic.IEnumerable<T>, ICollection, IEnumerable
-    {
-        public ConcurrentQueue() { }
-
-        public ConcurrentQueue(Generic.IEnumerable<T> collection) { }
-
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public void CopyTo(T[] array, int index) { }
-
-        public void Enqueue(T item) { }
-
-        public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        bool IProducerConsumerCollection<T>.TryAdd(T item) { throw null; }
-
-        bool IProducerConsumerCollection<T>.TryTake(out T item) { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public T[] ToArray() { throw null; }
-
-        public bool TryDequeue(out T result) { throw null; }
-
-        public bool TryPeek(out T result) { throw null; }
-    }
-
-    public partial class ConcurrentStack<T> : IProducerConsumerCollection<T>, Generic.IEnumerable<T>, ICollection, IEnumerable
-    {
-        public ConcurrentStack() { }
-
-        public ConcurrentStack(Generic.IEnumerable<T> collection) { }
-
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public void Clear() { }
-
-        public void CopyTo(T[] array, int index) { }
-
-        public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        public void Push(T item) { }
-
-        public void PushRange(T[] items, int startIndex, int count) { }
-
-        public void PushRange(T[] items) { }
-
-        bool IProducerConsumerCollection<T>.TryAdd(T item) { throw null; }
-
-        bool IProducerConsumerCollection<T>.TryTake(out T item) { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public T[] ToArray() { throw null; }
-
-        public bool TryPeek(out T result) { throw null; }
-
-        public bool TryPop(out T result) { throw null; }
-
-        public int TryPopRange(T[] items, int startIndex, int count) { throw null; }
-
-        public int TryPopRange(T[] items) { throw null; }
-    }
-
-    [Flags]
-    public enum EnumerablePartitionerOptions
-    {
-        None = 0,
-        NoBuffering = 1
-    }
-
-    public partial interface IProducerConsumerCollection<T> : Generic.IEnumerable<T>, ICollection, IEnumerable
-    {
-        void CopyTo(T[] array, int index);
-        T[] ToArray();
-        bool TryAdd(T item);
-        bool TryTake(out T item);
-    }
-
-    public abstract partial class OrderablePartitioner<TSource> : Partitioner<TSource>
-    {
-        protected OrderablePartitioner(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized) { }
-
-        public bool KeysNormalized { get { throw null; } }
-
-        public bool KeysOrderedAcrossPartitions { get { throw null; } }
-
-        public bool KeysOrderedInEachPartition { get { throw null; } }
-
-        public override Generic.IEnumerable<TSource> GetDynamicPartitions() { throw null; }
-
-        public virtual Generic.IEnumerable<Generic.KeyValuePair<long, TSource>> GetOrderableDynamicPartitions() { throw null; }
-
-        public abstract Generic.IList<Generic.IEnumerator<Generic.KeyValuePair<long, TSource>>> GetOrderablePartitions(int partitionCount);
-        public override Generic.IList<Generic.IEnumerator<TSource>> GetPartitions(int partitionCount) { throw null; }
-    }
-
-    public static partial class Partitioner
-    {
-        public static OrderablePartitioner<Tuple<int, int>> Create(int fromInclusive, int toExclusive, int rangeSize) { throw null; }
-
-        public static OrderablePartitioner<Tuple<int, int>> Create(int fromInclusive, int toExclusive) { throw null; }
-
-        public static OrderablePartitioner<Tuple<long, long>> Create(long fromInclusive, long toExclusive, long rangeSize) { throw null; }
-
-        public static OrderablePartitioner<Tuple<long, long>> Create(long fromInclusive, long toExclusive) { throw null; }
-
-        public static OrderablePartitioner<TSource> Create<TSource>(TSource[] array, bool loadBalance) { throw null; }
-
-        public static OrderablePartitioner<TSource> Create<TSource>(Generic.IEnumerable<TSource> source, EnumerablePartitionerOptions partitionerOptions) { throw null; }
-
-        public static OrderablePartitioner<TSource> Create<TSource>(Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static OrderablePartitioner<TSource> Create<TSource>(Generic.IList<TSource> list, bool loadBalance) { throw null; }
-    }
-
-    public abstract partial class Partitioner<TSource>
-    {
-        public virtual bool SupportsDynamicPartitions { get { throw null; } }
-
-        public virtual Generic.IEnumerable<TSource> GetDynamicPartitions() { throw null; }
-
-        public abstract Generic.IList<Generic.IEnumerator<TSource>> GetPartitions(int partitionCount);
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.collections.concurrent/4.3.0/ref/netstandard1.3/System.Collections.Concurrent.cs b/src/referencePackages/src/system.collections.concurrent/4.3.0/ref/netstandard1.3/System.Collections.Concurrent.cs
deleted file mode 100644
index d5469bec..00000000
--- a/src/referencePackages/src/system.collections.concurrent/4.3.0/ref/netstandard1.3/System.Collections.Concurrent.cs
+++ /dev/null
@@ -1,386 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Collections.Concurrent")]
-[assembly: System.Reflection.AssemblyDescription("System.Collections.Concurrent")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Collections.Concurrent")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Collections.Concurrent
-{
-    public partial class BlockingCollection<T> : Generic.IEnumerable<T>, IEnumerable, Generic.IReadOnlyCollection<T>, ICollection, IDisposable
-    {
-        public BlockingCollection() { }
-
-        public BlockingCollection(IProducerConsumerCollection<T> collection, int boundedCapacity) { }
-
-        public BlockingCollection(IProducerConsumerCollection<T> collection) { }
-
-        public BlockingCollection(int boundedCapacity) { }
-
-        public int BoundedCapacity { get { throw null; } }
-
-        public int Count { get { throw null; } }
-
-        public bool IsAddingCompleted { get { throw null; } }
-
-        public bool IsCompleted { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public void Add(T item, Threading.CancellationToken cancellationToken) { }
-
-        public void Add(T item) { }
-
-        public static int AddToAny(BlockingCollection<T>[] collections, T item, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public static int AddToAny(BlockingCollection<T>[] collections, T item) { throw null; }
-
-        public void CompleteAdding() { }
-
-        public void CopyTo(T[] array, int index) { }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public Generic.IEnumerable<T> GetConsumingEnumerable() { throw null; }
-
-        public Generic.IEnumerable<T> GetConsumingEnumerable(Threading.CancellationToken cancellationToken) { throw null; }
-
-        Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public T Take() { throw null; }
-
-        public T Take(Threading.CancellationToken cancellationToken) { throw null; }
-
-        public static int TakeFromAny(BlockingCollection<T>[] collections, out T item, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public static int TakeFromAny(BlockingCollection<T>[] collections, out T item) { throw null; }
-
-        public T[] ToArray() { throw null; }
-
-        public bool TryAdd(T item, int millisecondsTimeout, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public bool TryAdd(T item, int millisecondsTimeout) { throw null; }
-
-        public bool TryAdd(T item, TimeSpan timeout) { throw null; }
-
-        public bool TryAdd(T item) { throw null; }
-
-        public static int TryAddToAny(BlockingCollection<T>[] collections, T item, int millisecondsTimeout, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public static int TryAddToAny(BlockingCollection<T>[] collections, T item, int millisecondsTimeout) { throw null; }
-
-        public static int TryAddToAny(BlockingCollection<T>[] collections, T item, TimeSpan timeout) { throw null; }
-
-        public static int TryAddToAny(BlockingCollection<T>[] collections, T item) { throw null; }
-
-        public bool TryTake(out T item, int millisecondsTimeout, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public bool TryTake(out T item, int millisecondsTimeout) { throw null; }
-
-        public bool TryTake(out T item, TimeSpan timeout) { throw null; }
-
-        public bool TryTake(out T item) { throw null; }
-
-        public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, int millisecondsTimeout, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, int millisecondsTimeout) { throw null; }
-
-        public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, TimeSpan timeout) { throw null; }
-
-        public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item) { throw null; }
-    }
-
-    public partial class ConcurrentBag<T> : IProducerConsumerCollection<T>, Generic.IEnumerable<T>, IEnumerable, ICollection, Generic.IReadOnlyCollection<T>
-    {
-        public ConcurrentBag() { }
-
-        public ConcurrentBag(Generic.IEnumerable<T> collection) { }
-
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public void Add(T item) { }
-
-        public void CopyTo(T[] array, int index) { }
-
-        public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        bool IProducerConsumerCollection<T>.TryAdd(T item) { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public T[] ToArray() { throw null; }
-
-        public bool TryPeek(out T result) { throw null; }
-
-        public bool TryTake(out T result) { throw null; }
-    }
-
-    public partial class ConcurrentDictionary<TKey, TValue> : Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, IEnumerable, Generic.IDictionary<TKey, TValue>, Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IReadOnlyDictionary<TKey, TValue>, ICollection, IDictionary
-    {
-        public ConcurrentDictionary() { }
-
-        public ConcurrentDictionary(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> collection, Generic.IEqualityComparer<TKey> comparer) { }
-
-        public ConcurrentDictionary(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> collection) { }
-
-        public ConcurrentDictionary(Generic.IEqualityComparer<TKey> comparer) { }
-
-        public ConcurrentDictionary(int concurrencyLevel, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> collection, Generic.IEqualityComparer<TKey> comparer) { }
-
-        public ConcurrentDictionary(int concurrencyLevel, int capacity, Generic.IEqualityComparer<TKey> comparer) { }
-
-        public ConcurrentDictionary(int concurrencyLevel, int capacity) { }
-
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public TValue this[TKey key] { get { throw null; } set { } }
-
-        public Generic.ICollection<TKey> Keys { get { throw null; } }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-        Generic.IEnumerable<TKey> Generic.IReadOnlyDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        Generic.IEnumerable<TValue> Generic.IReadOnlyDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IDictionary.IsFixedSize { get { throw null; } }
-
-        bool IDictionary.IsReadOnly { get { throw null; } }
-
-        object IDictionary.this[object key] { get { throw null; } set { } }
-
-        ICollection IDictionary.Keys { get { throw null; } }
-
-        ICollection IDictionary.Values { get { throw null; } }
-
-        public Generic.ICollection<TValue> Values { get { throw null; } }
-
-        public TValue AddOrUpdate(TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory) { throw null; }
-
-        public TValue AddOrUpdate(TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory) { throw null; }
-
-        public void Clear() { }
-
-        public bool ContainsKey(TKey key) { throw null; }
-
-        public Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>> GetEnumerator() { throw null; }
-
-        public TValue GetOrAdd(TKey key, TValue value) { throw null; }
-
-        public TValue GetOrAdd(TKey key, Func<TKey, TValue> valueFactory) { throw null; }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Add(Generic.KeyValuePair<TKey, TValue> keyValuePair) { }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Contains(Generic.KeyValuePair<TKey, TValue> keyValuePair) { throw null; }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.CopyTo(Generic.KeyValuePair<TKey, TValue>[] array, int index) { }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Remove(Generic.KeyValuePair<TKey, TValue> keyValuePair) { throw null; }
-
-        void Generic.IDictionary<TKey, TValue>.Add(TKey key, TValue value) { }
-
-        bool Generic.IDictionary<TKey, TValue>.Remove(TKey key) { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        void IDictionary.Add(object key, object value) { }
-
-        bool IDictionary.Contains(object key) { throw null; }
-
-        IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-        void IDictionary.Remove(object key) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public Generic.KeyValuePair<TKey, TValue>[] ToArray() { throw null; }
-
-        public bool TryAdd(TKey key, TValue value) { throw null; }
-
-        public bool TryGetValue(TKey key, out TValue value) { throw null; }
-
-        public bool TryRemove(TKey key, out TValue value) { throw null; }
-
-        public bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue) { throw null; }
-    }
-
-    public partial class ConcurrentQueue<T> : IProducerConsumerCollection<T>, Generic.IEnumerable<T>, IEnumerable, ICollection, Generic.IReadOnlyCollection<T>
-    {
-        public ConcurrentQueue() { }
-
-        public ConcurrentQueue(Generic.IEnumerable<T> collection) { }
-
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public void CopyTo(T[] array, int index) { }
-
-        public void Enqueue(T item) { }
-
-        public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        bool IProducerConsumerCollection<T>.TryAdd(T item) { throw null; }
-
-        bool IProducerConsumerCollection<T>.TryTake(out T item) { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public T[] ToArray() { throw null; }
-
-        public bool TryDequeue(out T result) { throw null; }
-
-        public bool TryPeek(out T result) { throw null; }
-    }
-
-    public partial class ConcurrentStack<T> : IProducerConsumerCollection<T>, Generic.IEnumerable<T>, IEnumerable, ICollection, Generic.IReadOnlyCollection<T>
-    {
-        public ConcurrentStack() { }
-
-        public ConcurrentStack(Generic.IEnumerable<T> collection) { }
-
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public void Clear() { }
-
-        public void CopyTo(T[] array, int index) { }
-
-        public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        public void Push(T item) { }
-
-        public void PushRange(T[] items, int startIndex, int count) { }
-
-        public void PushRange(T[] items) { }
-
-        bool IProducerConsumerCollection<T>.TryAdd(T item) { throw null; }
-
-        bool IProducerConsumerCollection<T>.TryTake(out T item) { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public T[] ToArray() { throw null; }
-
-        public bool TryPeek(out T result) { throw null; }
-
-        public bool TryPop(out T result) { throw null; }
-
-        public int TryPopRange(T[] items, int startIndex, int count) { throw null; }
-
-        public int TryPopRange(T[] items) { throw null; }
-    }
-
-    [Flags]
-    public enum EnumerablePartitionerOptions
-    {
-        None = 0,
-        NoBuffering = 1
-    }
-
-    public partial interface IProducerConsumerCollection<T> : Generic.IEnumerable<T>, IEnumerable, ICollection
-    {
-        void CopyTo(T[] array, int index);
-        T[] ToArray();
-        bool TryAdd(T item);
-        bool TryTake(out T item);
-    }
-
-    public abstract partial class OrderablePartitioner<TSource> : Partitioner<TSource>
-    {
-        protected OrderablePartitioner(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized) { }
-
-        public bool KeysNormalized { get { throw null; } }
-
-        public bool KeysOrderedAcrossPartitions { get { throw null; } }
-
-        public bool KeysOrderedInEachPartition { get { throw null; } }
-
-        public override Generic.IEnumerable<TSource> GetDynamicPartitions() { throw null; }
-
-        public virtual Generic.IEnumerable<Generic.KeyValuePair<long, TSource>> GetOrderableDynamicPartitions() { throw null; }
-
-        public abstract Generic.IList<Generic.IEnumerator<Generic.KeyValuePair<long, TSource>>> GetOrderablePartitions(int partitionCount);
-        public override Generic.IList<Generic.IEnumerator<TSource>> GetPartitions(int partitionCount) { throw null; }
-    }
-
-    public static partial class Partitioner
-    {
-        public static OrderablePartitioner<Tuple<int, int>> Create(int fromInclusive, int toExclusive, int rangeSize) { throw null; }
-
-        public static OrderablePartitioner<Tuple<int, int>> Create(int fromInclusive, int toExclusive) { throw null; }
-
-        public static OrderablePartitioner<Tuple<long, long>> Create(long fromInclusive, long toExclusive, long rangeSize) { throw null; }
-
-        public static OrderablePartitioner<Tuple<long, long>> Create(long fromInclusive, long toExclusive) { throw null; }
-
-        public static OrderablePartitioner<TSource> Create<TSource>(TSource[] array, bool loadBalance) { throw null; }
-
-        public static OrderablePartitioner<TSource> Create<TSource>(Generic.IEnumerable<TSource> source, EnumerablePartitionerOptions partitionerOptions) { throw null; }
-
-        public static OrderablePartitioner<TSource> Create<TSource>(Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static OrderablePartitioner<TSource> Create<TSource>(Generic.IList<TSource> list, bool loadBalance) { throw null; }
-    }
-
-    public abstract partial class Partitioner<TSource>
-    {
-        public virtual bool SupportsDynamicPartitions { get { throw null; } }
-
-        public virtual Generic.IEnumerable<TSource> GetDynamicPartitions() { throw null; }
-
-        public abstract Generic.IList<Generic.IEnumerator<TSource>> GetPartitions(int partitionCount);
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.collections.concurrent/4.3.0/system.collections.concurrent.nuspec b/src/referencePackages/src/system.collections.concurrent/4.3.0/system.collections.concurrent.nuspec
deleted file mode 100644
index 50169a02..00000000
--- a/src/referencePackages/src/system.collections.concurrent/4.3.0/system.collections.concurrent.nuspec
+++ /dev/null
@@ -1,45 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Collections.Concurrent</id>
-    <version>4.3.0</version>
-    <title>System.Collections.Concurrent</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides several thread-safe collection classes that should be used in place of the corresponding types in the System.Collections.NonGeneric and System.Collections packages whenever multiple threads are accessing the collection concurrently.
-
-Commonly Used Types:
-System.Collections.Concurrent.ConcurrentDictionary&lt;TKey, TValue&gt;
-System.Collections.Concurrent.ConcurrentQueue&lt;T&gt;
-System.Collections.Concurrent.ConcurrentBag&lt;T&gt;
-System.Collections.Concurrent.BlockingCollection&lt;T&gt;
-System.Collections.Concurrent.ConcurrentStack&lt;T&gt;
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Tracing" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Globalization" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Reflection" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Threading" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.collections.immutable/5.0.0/System.Collections.Immutable.5.0.0.csproj b/src/referencePackages/src/system.collections.immutable/5.0.0/System.Collections.Immutable.5.0.0.csproj
index cebfe183..cefc10f3 100644
--- a/src/referencePackages/src/system.collections.immutable/5.0.0/System.Collections.Immutable.5.0.0.csproj
+++ b/src/referencePackages/src/system.collections.immutable/5.0.0/System.Collections.Immutable.5.0.0.csproj
@@ -1,14 +1,10 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Collections.Immutable</AssemblyName>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Memory" Version="4.5.4" />
-  </ItemGroup>
-
   <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
     <PackageReference Include="System.Memory" Version="4.5.4" />
   </ItemGroup>
diff --git a/src/referencePackages/src/system.collections.immutable/5.0.0/lib/netstandard1.0/System.Collections.Immutable.cs b/src/referencePackages/src/system.collections.immutable/5.0.0/lib/netstandard1.0/System.Collections.Immutable.cs
deleted file mode 100644
index 13be0063..00000000
--- a/src/referencePackages/src/system.collections.immutable/5.0.0/lib/netstandard1.0/System.Collections.Immutable.cs
+++ /dev/null
@@ -1,1971 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Collections.Immutable.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb")]
-[assembly: System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.0", FrameworkDisplayName = "")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Collections.Immutable")]
-[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyMetadata("PreferInbox", "True")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")]
-[assembly: System.Reflection.AssemblyDescription("System.Collections.Immutable")]
-[assembly: System.Reflection.AssemblyFileVersion("5.0.20.51904")]
-[assembly: System.Reflection.AssemblyInformationalVersion("5.0.0+cf258a14b70ad9069470a108f13765e0e5988f51")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET")]
-[assembly: System.Reflection.AssemblyTitle("System.Collections.Immutable")]
-[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "git://github.com/dotnet/runtime")]
-[assembly: System.Reflection.AssemblyVersionAttribute("5.0.0.0")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Collections.Immutable
-{
-    public partial interface IImmutableDictionary<TKey, TValue> : Generic.IReadOnlyDictionary<TKey, TValue>, Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, IEnumerable
-    {
-        IImmutableDictionary<TKey, TValue> Add(TKey key, TValue value);
-        IImmutableDictionary<TKey, TValue> AddRange(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> pairs);
-        IImmutableDictionary<TKey, TValue> Clear();
-        bool Contains(Generic.KeyValuePair<TKey, TValue> pair);
-        IImmutableDictionary<TKey, TValue> Remove(TKey key);
-        IImmutableDictionary<TKey, TValue> RemoveRange(Generic.IEnumerable<TKey> keys);
-        IImmutableDictionary<TKey, TValue> SetItem(TKey key, TValue value);
-        IImmutableDictionary<TKey, TValue> SetItems(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items);
-        bool TryGetKey(TKey equalKey, out TKey actualKey);
-    }
-
-    public partial interface IImmutableList<T> : Generic.IReadOnlyList<T>, Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IEnumerable
-    {
-        IImmutableList<T> Add(T value);
-        IImmutableList<T> AddRange(Generic.IEnumerable<T> items);
-        IImmutableList<T> Clear();
-        int IndexOf(T item, int index, int count, Generic.IEqualityComparer<T>? equalityComparer);
-        IImmutableList<T> Insert(int index, T element);
-        IImmutableList<T> InsertRange(int index, Generic.IEnumerable<T> items);
-        int LastIndexOf(T item, int index, int count, Generic.IEqualityComparer<T>? equalityComparer);
-        IImmutableList<T> Remove(T value, Generic.IEqualityComparer<T>? equalityComparer);
-        IImmutableList<T> RemoveAll(Predicate<T> match);
-        IImmutableList<T> RemoveAt(int index);
-        IImmutableList<T> RemoveRange(Generic.IEnumerable<T> items, Generic.IEqualityComparer<T>? equalityComparer);
-        IImmutableList<T> RemoveRange(int index, int count);
-        IImmutableList<T> Replace(T oldValue, T newValue, Generic.IEqualityComparer<T>? equalityComparer);
-        IImmutableList<T> SetItem(int index, T value);
-    }
-
-    public partial interface IImmutableQueue<T> : Generic.IEnumerable<T>, IEnumerable
-    {
-        bool IsEmpty { get; }
-
-        IImmutableQueue<T> Clear();
-        IImmutableQueue<T> Dequeue();
-        IImmutableQueue<T> Enqueue(T value);
-        T Peek();
-    }
-
-    public partial interface IImmutableSet<T> : Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IEnumerable
-    {
-        IImmutableSet<T> Add(T value);
-        IImmutableSet<T> Clear();
-        bool Contains(T value);
-        IImmutableSet<T> Except(Generic.IEnumerable<T> other);
-        IImmutableSet<T> Intersect(Generic.IEnumerable<T> other);
-        bool IsProperSubsetOf(Generic.IEnumerable<T> other);
-        bool IsProperSupersetOf(Generic.IEnumerable<T> other);
-        bool IsSubsetOf(Generic.IEnumerable<T> other);
-        bool IsSupersetOf(Generic.IEnumerable<T> other);
-        bool Overlaps(Generic.IEnumerable<T> other);
-        IImmutableSet<T> Remove(T value);
-        bool SetEquals(Generic.IEnumerable<T> other);
-        IImmutableSet<T> SymmetricExcept(Generic.IEnumerable<T> other);
-        bool TryGetValue(T equalValue, out T actualValue);
-        IImmutableSet<T> Union(Generic.IEnumerable<T> other);
-    }
-
-    public partial interface IImmutableStack<T> : Generic.IEnumerable<T>, IEnumerable
-    {
-        bool IsEmpty { get; }
-
-        IImmutableStack<T> Clear();
-        T Peek();
-        IImmutableStack<T> Pop();
-        IImmutableStack<T> Push(T value);
-    }
-
-    public static partial class ImmutableArray
-    {
-        public static int BinarySearch<T>(this ImmutableArray<T> array, T value, Generic.IComparer<T>? comparer) { throw null; }
-
-        public static int BinarySearch<T>(this ImmutableArray<T> array, T value) { throw null; }
-
-        public static int BinarySearch<T>(this ImmutableArray<T> array, int index, int length, T value, Generic.IComparer<T>? comparer) { throw null; }
-
-        public static int BinarySearch<T>(this ImmutableArray<T> array, int index, int length, T value) { throw null; }
-
-        public static ImmutableArray<T> Create<T>() { throw null; }
-
-        public static ImmutableArray<T> Create<T>(T item1, T item2, T item3, T item4) { throw null; }
-
-        public static ImmutableArray<T> Create<T>(T item1, T item2, T item3) { throw null; }
-
-        public static ImmutableArray<T> Create<T>(T item1, T item2) { throw null; }
-
-        public static ImmutableArray<T> Create<T>(T item) { throw null; }
-
-        public static ImmutableArray<T> Create<T>(T[] items, int start, int length) { throw null; }
-
-        public static ImmutableArray<T> Create<T>(params T[]? items) { throw null; }
-
-        public static ImmutableArray<T> Create<T>(ImmutableArray<T> items, int start, int length) { throw null; }
-
-        public static ImmutableArray<T>.Builder CreateBuilder<T>() { throw null; }
-
-        public static ImmutableArray<T>.Builder CreateBuilder<T>(int initialCapacity) { throw null; }
-
-        public static ImmutableArray<T> CreateRange<T>(Generic.IEnumerable<T> items) { throw null; }
-
-        public static ImmutableArray<TResult> CreateRange<TSource, TResult>(ImmutableArray<TSource> items, Func<TSource, TResult> selector) { throw null; }
-
-        public static ImmutableArray<TResult> CreateRange<TSource, TResult>(ImmutableArray<TSource> items, int start, int length, Func<TSource, TResult> selector) { throw null; }
-
-        public static ImmutableArray<TResult> CreateRange<TSource, TArg, TResult>(ImmutableArray<TSource> items, Func<TSource, TArg, TResult> selector, TArg arg) { throw null; }
-
-        public static ImmutableArray<TResult> CreateRange<TSource, TArg, TResult>(ImmutableArray<TSource> items, int start, int length, Func<TSource, TArg, TResult> selector, TArg arg) { throw null; }
-
-        public static ImmutableArray<TSource> ToImmutableArray<TSource>(this Generic.IEnumerable<TSource> items) { throw null; }
-
-        public static ImmutableArray<TSource> ToImmutableArray<TSource>(this ImmutableArray<TSource>.Builder builder) { throw null; }
-    }
-
-    public partial struct ImmutableArray<T> : Generic.IReadOnlyList<T>, Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.IList<T>, Generic.ICollection<T>, IEquatable<ImmutableArray<T>>, IList, ICollection, IStructuralComparable, IStructuralEquatable, IImmutableList<T>
-    {
-        private object _dummy;
-        private int _dummyPrimitive;
-        public static readonly ImmutableArray<T> Empty;
-        public bool IsDefault { get { throw null; } }
-
-        public bool IsDefaultOrEmpty { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public T this[int index] { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        int Generic.ICollection<T>.Count { get { throw null; } }
-
-        bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        T Generic.IList<T>.this[int index] { get { throw null; } set { } }
-
-        int Generic.IReadOnlyCollection<T>.Count { get { throw null; } }
-
-        T Generic.IReadOnlyList<T>.this[int index] { get { throw null; } }
-
-        int ICollection.Count { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IList.IsFixedSize { get { throw null; } }
-
-        bool IList.IsReadOnly { get { throw null; } }
-
-        object? IList.this[int index] { get { throw null; } set { } }
-
-        public ImmutableArray<T> Add(T item) { throw null; }
-
-        public ImmutableArray<T> AddRange(Generic.IEnumerable<T> items) { throw null; }
-
-        public ImmutableArray<T> AddRange(ImmutableArray<T> items) { throw null; }
-
-        public ImmutableArray<TOther> As<TOther>()
-            where TOther : class { throw null; }
-
-        public ImmutableArray<TOther> CastArray<TOther>()
-            where TOther : class { throw null; }
-
-        public static ImmutableArray<T> CastUp<TDerived>(ImmutableArray<TDerived> items)
-            where TDerived : class, T { throw null; }
-
-        public ImmutableArray<T> Clear() { throw null; }
-
-        public bool Contains(T item) { throw null; }
-
-        public void CopyTo(T[] destination, int destinationIndex) { }
-
-        public void CopyTo(T[] destination) { }
-
-        public void CopyTo(int sourceIndex, T[] destination, int destinationIndex, int length) { }
-
-        public bool Equals(ImmutableArray<T> other) { throw null; }
-
-        public override bool Equals(object? obj) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public int IndexOf(T item, int startIndex, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public int IndexOf(T item, int startIndex, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public int IndexOf(T item, int startIndex, int count) { throw null; }
-
-        public int IndexOf(T item, int startIndex) { throw null; }
-
-        public int IndexOf(T item) { throw null; }
-
-        public ImmutableArray<T> Insert(int index, T item) { throw null; }
-
-        public ImmutableArray<T> InsertRange(int index, Generic.IEnumerable<T> items) { throw null; }
-
-        public ImmutableArray<T> InsertRange(int index, ImmutableArray<T> items) { throw null; }
-
-        public int LastIndexOf(T item, int startIndex, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public int LastIndexOf(T item, int startIndex, int count) { throw null; }
-
-        public int LastIndexOf(T item, int startIndex) { throw null; }
-
-        public int LastIndexOf(T item) { throw null; }
-
-        public Generic.IEnumerable<TResult> OfType<TResult>() { throw null; }
-
-        public static bool operator ==(ImmutableArray<T> left, ImmutableArray<T> right) { throw null; }
-
-        public static bool operator ==(ImmutableArray<T>? left, ImmutableArray<T>? right) { throw null; }
-
-        public static bool operator !=(ImmutableArray<T> left, ImmutableArray<T> right) { throw null; }
-
-        public static bool operator !=(ImmutableArray<T>? left, ImmutableArray<T>? right) { throw null; }
-
-        public ImmutableArray<T> Remove(T item, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableArray<T> Remove(T item) { throw null; }
-
-        public ImmutableArray<T> RemoveAll(Predicate<T> match) { throw null; }
-
-        public ImmutableArray<T> RemoveAt(int index) { throw null; }
-
-        public ImmutableArray<T> RemoveRange(Generic.IEnumerable<T> items, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableArray<T> RemoveRange(Generic.IEnumerable<T> items) { throw null; }
-
-        public ImmutableArray<T> RemoveRange(ImmutableArray<T> items, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableArray<T> RemoveRange(ImmutableArray<T> items) { throw null; }
-
-        public ImmutableArray<T> RemoveRange(int index, int length) { throw null; }
-
-        public ImmutableArray<T> Replace(T oldValue, T newValue, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableArray<T> Replace(T oldValue, T newValue) { throw null; }
-
-        public ImmutableArray<T> SetItem(int index, T item) { throw null; }
-
-        public ImmutableArray<T> Sort() { throw null; }
-
-        public ImmutableArray<T> Sort(Generic.IComparer<T>? comparer) { throw null; }
-
-        public ImmutableArray<T> Sort(Comparison<T> comparison) { throw null; }
-
-        public ImmutableArray<T> Sort(int index, int count, Generic.IComparer<T>? comparer) { throw null; }
-
-        void Generic.ICollection<T>.Add(T item) { }
-
-        void Generic.ICollection<T>.Clear() { }
-
-        bool Generic.ICollection<T>.Remove(T item) { throw null; }
-
-        Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void Generic.IList<T>.Insert(int index, T item) { }
-
-        void Generic.IList<T>.RemoveAt(int index) { }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        int IList.Add(object value) { throw null; }
-
-        void IList.Clear() { }
-
-        bool IList.Contains(object value) { throw null; }
-
-        int IList.IndexOf(object value) { throw null; }
-
-        void IList.Insert(int index, object value) { }
-
-        void IList.Remove(object value) { }
-
-        void IList.RemoveAt(int index) { }
-
-        IImmutableList<T> IImmutableList<T>.Add(T value) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.AddRange(Generic.IEnumerable<T> items) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Clear() { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Insert(int index, T element) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.InsertRange(int index, Generic.IEnumerable<T> items) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Remove(T value, Generic.IEqualityComparer<T> equalityComparer) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveAll(Predicate<T> match) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveAt(int index) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveRange(Generic.IEnumerable<T> items, Generic.IEqualityComparer<T> equalityComparer) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveRange(int index, int count) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Replace(T oldValue, T newValue, Generic.IEqualityComparer<T> equalityComparer) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.SetItem(int index, T value) { throw null; }
-
-        int IStructuralComparable.CompareTo(object other, IComparer comparer) { throw null; }
-
-        bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer) { throw null; }
-
-        int IStructuralEquatable.GetHashCode(IEqualityComparer comparer) { throw null; }
-
-        public Builder ToBuilder() { throw null; }
-
-        public sealed partial class Builder : Generic.IList<T>, Generic.ICollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.IReadOnlyList<T>, Generic.IReadOnlyCollection<T>
-        {
-            internal Builder() { }
-
-            public int Capacity { get { throw null; } set { } }
-
-            public int Count { get { throw null; } set { } }
-
-            public T this[int index] { get { throw null; } set { } }
-
-            bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-            public void Add(T item) { }
-
-            public void AddRange(T[] items, int length) { }
-
-            public void AddRange(params T[] items) { }
-
-            public void AddRange(Generic.IEnumerable<T> items) { }
-
-            public void AddRange(ImmutableArray<T> items, int length) { }
-
-            public void AddRange(Builder items) { }
-
-            public void AddRange(ImmutableArray<T> items) { }
-
-            public void AddRange<TDerived>(TDerived[] items)
-                where TDerived : T { }
-
-            public void AddRange<TDerived>(ImmutableArray<TDerived>.Builder items)
-                where TDerived : T { }
-
-            public void AddRange<TDerived>(ImmutableArray<TDerived> items)
-                where TDerived : T { }
-
-            public void Clear() { }
-
-            public bool Contains(T item) { throw null; }
-
-            public void CopyTo(T[] array, int index) { }
-
-            public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-            public int IndexOf(T item, int startIndex, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-            public int IndexOf(T item, int startIndex, int count) { throw null; }
-
-            public int IndexOf(T item, int startIndex) { throw null; }
-
-            public int IndexOf(T item) { throw null; }
-
-            public void Insert(int index, T item) { }
-
-            public int LastIndexOf(T item, int startIndex, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-            public int LastIndexOf(T item, int startIndex, int count) { throw null; }
-
-            public int LastIndexOf(T item, int startIndex) { throw null; }
-
-            public int LastIndexOf(T item) { throw null; }
-
-            public ImmutableArray<T> MoveToImmutable() { throw null; }
-
-            public bool Remove(T element) { throw null; }
-
-            public void RemoveAt(int index) { }
-
-            public void Reverse() { }
-
-            public void Sort() { }
-
-            public void Sort(Generic.IComparer<T>? comparer) { }
-
-            public void Sort(Comparison<T> comparison) { }
-
-            public void Sort(int index, int count, Generic.IComparer<T>? comparer) { }
-
-            Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public T[] ToArray() { throw null; }
-
-            public ImmutableArray<T> ToImmutable() { throw null; }
-        }
-
-        public partial struct Enumerator
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public T Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-        }
-    }
-
-    public static partial class ImmutableDictionary
-    {
-        public static bool Contains<TKey, TValue>(this IImmutableDictionary<TKey, TValue> map, TKey key, TValue value) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> Create<TKey, TValue>() { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> Create<TKey, TValue>(Generic.IEqualityComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> Create<TKey, TValue>(Generic.IEqualityComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>() { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>(Generic.IEqualityComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>(Generic.IEqualityComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> CreateRange<TKey, TValue>(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> CreateRange<TKey, TValue>(Generic.IEqualityComparer<TKey>? keyComparer, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> CreateRange<TKey, TValue>(Generic.IEqualityComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public static TValue GetValueOrDefault<TKey, TValue>(this IImmutableDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue) { throw null; }
-
-        public static TValue? GetValueOrDefault<TKey, TValue>(this IImmutableDictionary<TKey, TValue> dictionary, TKey key) { throw null; }
-
-        public static ImmutableDictionary<TKey, TSource> ToImmutableDictionary<TSource, TKey>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Generic.IEqualityComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TSource> ToImmutableDictionary<TSource, TKey>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TKey, TValue>(this Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> source, Generic.IEqualityComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TKey, TValue>(this Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> source, Generic.IEqualityComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TKey, TValue>(this Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> source) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TKey, TValue>(this ImmutableDictionary<TKey, TValue>.Builder builder) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TSource, TKey, TValue>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector, Generic.IEqualityComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TSource, TKey, TValue>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector, Generic.IEqualityComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TSource, TKey, TValue>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector) { throw null; }
-    }
-
-    public sealed partial class ImmutableDictionary<TKey, TValue> : IImmutableDictionary<TKey, TValue>, Generic.IReadOnlyDictionary<TKey, TValue>, Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, IEnumerable, Generic.IDictionary<TKey, TValue>, Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>, IDictionary, ICollection
-    {
-        internal ImmutableDictionary() { }
-
-        public static readonly ImmutableDictionary<TKey, TValue> Empty;
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public TValue this[TKey key] { get { throw null; } }
-
-        public Generic.IEqualityComparer<TKey> KeyComparer { get { throw null; } }
-
-        public Generic.IEnumerable<TKey> Keys { get { throw null; } }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-        TValue Generic.IDictionary<TKey, TValue>.this[TKey key] { get { throw null; } set { } }
-
-        Generic.ICollection<TKey> Generic.IDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        Generic.ICollection<TValue> Generic.IDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IDictionary.IsFixedSize { get { throw null; } }
-
-        bool IDictionary.IsReadOnly { get { throw null; } }
-
-        object? IDictionary.this[object key] { get { throw null; } set { } }
-
-        ICollection IDictionary.Keys { get { throw null; } }
-
-        ICollection IDictionary.Values { get { throw null; } }
-
-        public Generic.IEqualityComparer<TValue> ValueComparer { get { throw null; } }
-
-        public Generic.IEnumerable<TValue> Values { get { throw null; } }
-
-        public ImmutableDictionary<TKey, TValue> Add(TKey key, TValue value) { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> AddRange(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> pairs) { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> Clear() { throw null; }
-
-        public bool Contains(Generic.KeyValuePair<TKey, TValue> pair) { throw null; }
-
-        public bool ContainsKey(TKey key) { throw null; }
-
-        public bool ContainsValue(TValue value) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> Remove(TKey key) { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> RemoveRange(Generic.IEnumerable<TKey> keys) { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> SetItem(TKey key, TValue value) { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> SetItems(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Add(Generic.KeyValuePair<TKey, TValue> item) { }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Clear() { }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.CopyTo(Generic.KeyValuePair<TKey, TValue>[] array, int arrayIndex) { }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Remove(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-        void Generic.IDictionary<TKey, TValue>.Add(TKey key, TValue value) { }
-
-        bool Generic.IDictionary<TKey, TValue>.Remove(TKey key) { throw null; }
-
-        Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>> Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-        void IDictionary.Add(object key, object value) { }
-
-        void IDictionary.Clear() { }
-
-        bool IDictionary.Contains(object key) { throw null; }
-
-        IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-        void IDictionary.Remove(object key) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.Add(TKey key, TValue value) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.AddRange(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> pairs) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.Clear() { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.Remove(TKey key) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.RemoveRange(Generic.IEnumerable<TKey> keys) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.SetItem(TKey key, TValue value) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.SetItems(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public Builder ToBuilder() { throw null; }
-
-        public bool TryGetKey(TKey equalKey, out TKey actualKey) { throw null; }
-
-        public bool TryGetValue(TKey key, out TValue value) { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> WithComparers(Generic.IEqualityComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> WithComparers(Generic.IEqualityComparer<TKey>? keyComparer) { throw null; }
-
-        public sealed partial class Builder : Generic.IDictionary<TKey, TValue>, Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, IEnumerable, Generic.IReadOnlyDictionary<TKey, TValue>, Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>, IDictionary, ICollection
-        {
-            internal Builder() { }
-
-            public int Count { get { throw null; } }
-
-            public TValue this[TKey key] { get { throw null; } set { } }
-
-            public Generic.IEqualityComparer<TKey> KeyComparer { get { throw null; } set { } }
-
-            public Generic.IEnumerable<TKey> Keys { get { throw null; } }
-
-            bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-            Generic.ICollection<TKey> Generic.IDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-            Generic.ICollection<TValue> Generic.IDictionary<TKey, TValue>.Values { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            bool IDictionary.IsFixedSize { get { throw null; } }
-
-            bool IDictionary.IsReadOnly { get { throw null; } }
-
-            object? IDictionary.this[object key] { get { throw null; } set { } }
-
-            ICollection IDictionary.Keys { get { throw null; } }
-
-            ICollection IDictionary.Values { get { throw null; } }
-
-            public Generic.IEqualityComparer<TValue> ValueComparer { get { throw null; } set { } }
-
-            public Generic.IEnumerable<TValue> Values { get { throw null; } }
-
-            public void Add(TKey key, TValue value) { }
-
-            public void Add(Generic.KeyValuePair<TKey, TValue> item) { }
-
-            public void AddRange(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { }
-
-            public void Clear() { }
-
-            public bool Contains(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-            public bool ContainsKey(TKey key) { throw null; }
-
-            public bool ContainsValue(TValue value) { throw null; }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            public TValue GetValueOrDefault(TKey key, TValue defaultValue) { throw null; }
-
-            public TValue? GetValueOrDefault(TKey key) { throw null; }
-
-            public bool Remove(TKey key) { throw null; }
-
-            public bool Remove(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-            public void RemoveRange(Generic.IEnumerable<TKey> keys) { }
-
-            void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.CopyTo(Generic.KeyValuePair<TKey, TValue>[] array, int arrayIndex) { }
-
-            Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>> Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-            void IDictionary.Add(object key, object value) { }
-
-            bool IDictionary.Contains(object key) { throw null; }
-
-            IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-            void IDictionary.Remove(object key) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public ImmutableDictionary<TKey, TValue> ToImmutable() { throw null; }
-
-            public bool TryGetKey(TKey equalKey, out TKey actualKey) { throw null; }
-
-            public bool TryGetValue(TKey key, out TValue value) { throw null; }
-        }
-
-        public partial struct Enumerator : Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>>, IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public Generic.KeyValuePair<TKey, TValue> Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            public void Reset() { }
-        }
-    }
-
-    public static partial class ImmutableHashSet
-    {
-        public static ImmutableHashSet<T> Create<T>() { throw null; }
-
-        public static ImmutableHashSet<T> Create<T>(T item) { throw null; }
-
-        public static ImmutableHashSet<T> Create<T>(params T[] items) { throw null; }
-
-        public static ImmutableHashSet<T> Create<T>(Generic.IEqualityComparer<T>? equalityComparer, T item) { throw null; }
-
-        public static ImmutableHashSet<T> Create<T>(Generic.IEqualityComparer<T>? equalityComparer, params T[] items) { throw null; }
-
-        public static ImmutableHashSet<T> Create<T>(Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public static ImmutableHashSet<T>.Builder CreateBuilder<T>() { throw null; }
-
-        public static ImmutableHashSet<T>.Builder CreateBuilder<T>(Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public static ImmutableHashSet<T> CreateRange<T>(Generic.IEnumerable<T> items) { throw null; }
-
-        public static ImmutableHashSet<T> CreateRange<T>(Generic.IEqualityComparer<T>? equalityComparer, Generic.IEnumerable<T> items) { throw null; }
-
-        public static ImmutableHashSet<TSource> ToImmutableHashSet<TSource>(this Generic.IEnumerable<TSource> source, Generic.IEqualityComparer<TSource>? equalityComparer) { throw null; }
-
-        public static ImmutableHashSet<TSource> ToImmutableHashSet<TSource>(this Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static ImmutableHashSet<TSource> ToImmutableHashSet<TSource>(this ImmutableHashSet<TSource>.Builder builder) { throw null; }
-    }
-
-    public sealed partial class ImmutableHashSet<T> : IImmutableSet<T>, Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.ICollection<T>, Generic.ISet<T>, ICollection
-    {
-        internal ImmutableHashSet() { }
-
-        public static readonly ImmutableHashSet<T> Empty;
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public Generic.IEqualityComparer<T> KeyComparer { get { throw null; } }
-
-        bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public ImmutableHashSet<T> Add(T item) { throw null; }
-
-        public ImmutableHashSet<T> Clear() { throw null; }
-
-        public bool Contains(T item) { throw null; }
-
-        public ImmutableHashSet<T> Except(Generic.IEnumerable<T> other) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public ImmutableHashSet<T> Intersect(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsProperSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsProperSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool Overlaps(Generic.IEnumerable<T> other) { throw null; }
-
-        public ImmutableHashSet<T> Remove(T item) { throw null; }
-
-        public bool SetEquals(Generic.IEnumerable<T> other) { throw null; }
-
-        public ImmutableHashSet<T> SymmetricExcept(Generic.IEnumerable<T> other) { throw null; }
-
-        void Generic.ICollection<T>.Add(T item) { }
-
-        void Generic.ICollection<T>.Clear() { }
-
-        void Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex) { }
-
-        bool Generic.ICollection<T>.Remove(T item) { throw null; }
-
-        Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        bool Generic.ISet<T>.Add(T item) { throw null; }
-
-        void Generic.ISet<T>.ExceptWith(Generic.IEnumerable<T> other) { }
-
-        void Generic.ISet<T>.IntersectWith(Generic.IEnumerable<T> other) { }
-
-        void Generic.ISet<T>.SymmetricExceptWith(Generic.IEnumerable<T> other) { }
-
-        void Generic.ISet<T>.UnionWith(Generic.IEnumerable<T> other) { }
-
-        void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Add(T item) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Clear() { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Except(Generic.IEnumerable<T> other) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Intersect(Generic.IEnumerable<T> other) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Remove(T item) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.SymmetricExcept(Generic.IEnumerable<T> other) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Union(Generic.IEnumerable<T> other) { throw null; }
-
-        public Builder ToBuilder() { throw null; }
-
-        public bool TryGetValue(T equalValue, out T actualValue) { throw null; }
-
-        public ImmutableHashSet<T> Union(Generic.IEnumerable<T> other) { throw null; }
-
-        public ImmutableHashSet<T> WithComparer(Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public sealed partial class Builder : Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.ISet<T>, Generic.ICollection<T>
-        {
-            internal Builder() { }
-
-            public int Count { get { throw null; } }
-
-            public Generic.IEqualityComparer<T> KeyComparer { get { throw null; } set { } }
-
-            bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-            public bool Add(T item) { throw null; }
-
-            public void Clear() { }
-
-            public bool Contains(T item) { throw null; }
-
-            public void ExceptWith(Generic.IEnumerable<T> other) { }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            public void IntersectWith(Generic.IEnumerable<T> other) { }
-
-            public bool IsProperSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool IsProperSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool IsSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool IsSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool Overlaps(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool Remove(T item) { throw null; }
-
-            public bool SetEquals(Generic.IEnumerable<T> other) { throw null; }
-
-            public void SymmetricExceptWith(Generic.IEnumerable<T> other) { }
-
-            void Generic.ICollection<T>.Add(T item) { }
-
-            void Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex) { }
-
-            Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public ImmutableHashSet<T> ToImmutable() { throw null; }
-
-            public bool TryGetValue(T equalValue, out T actualValue) { throw null; }
-
-            public void UnionWith(Generic.IEnumerable<T> other) { }
-        }
-
-        public partial struct Enumerator : Generic.IEnumerator<T>, IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public T Current { get { throw null; } }
-
-            object? IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            public void Reset() { }
-        }
-    }
-
-    public static partial class ImmutableInterlocked
-    {
-        public static TValue AddOrUpdate<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory) { throw null; }
-
-        public static TValue AddOrUpdate<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory) { throw null; }
-
-        public static void Enqueue<T>(ref ImmutableQueue<T> location, T value) { }
-
-        public static TValue GetOrAdd<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, TValue value) { throw null; }
-
-        public static TValue GetOrAdd<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, Func<TKey, TValue> valueFactory) { throw null; }
-
-        public static TValue GetOrAdd<TKey, TValue, TArg>(ref ImmutableDictionary<TKey, TValue> location, TKey key, Func<TKey, TArg, TValue> valueFactory, TArg factoryArgument) { throw null; }
-
-        public static ImmutableArray<T> InterlockedCompareExchange<T>(ref ImmutableArray<T> location, ImmutableArray<T> value, ImmutableArray<T> comparand) { throw null; }
-
-        public static ImmutableArray<T> InterlockedExchange<T>(ref ImmutableArray<T> location, ImmutableArray<T> value) { throw null; }
-
-        public static bool InterlockedInitialize<T>(ref ImmutableArray<T> location, ImmutableArray<T> value) { throw null; }
-
-        public static void Push<T>(ref ImmutableStack<T> location, T value) { }
-
-        public static bool TryAdd<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, TValue value) { throw null; }
-
-        public static bool TryDequeue<T>(ref ImmutableQueue<T> location, out T value) { throw null; }
-
-        public static bool TryPop<T>(ref ImmutableStack<T> location, out T value) { throw null; }
-
-        public static bool TryRemove<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, out TValue value) { throw null; }
-
-        public static bool TryUpdate<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, TValue newValue, TValue comparisonValue) { throw null; }
-
-        public static bool Update<T>(ref T location, Func<T, T> transformer)
-            where T : class { throw null; }
-
-        public static bool Update<T>(ref ImmutableArray<T> location, Func<ImmutableArray<T>, ImmutableArray<T>> transformer) { throw null; }
-
-        public static bool Update<T, TArg>(ref T location, Func<T, TArg, T> transformer, TArg transformerArgument)
-            where T : class { throw null; }
-
-        public static bool Update<T, TArg>(ref ImmutableArray<T> location, Func<ImmutableArray<T>, TArg, ImmutableArray<T>> transformer, TArg transformerArgument) { throw null; }
-    }
-
-    public static partial class ImmutableList
-    {
-        public static ImmutableList<T> Create<T>() { throw null; }
-
-        public static ImmutableList<T> Create<T>(T item) { throw null; }
-
-        public static ImmutableList<T> Create<T>(params T[] items) { throw null; }
-
-        public static ImmutableList<T>.Builder CreateBuilder<T>() { throw null; }
-
-        public static ImmutableList<T> CreateRange<T>(Generic.IEnumerable<T> items) { throw null; }
-
-        public static int IndexOf<T>(this IImmutableList<T> list, T item, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public static int IndexOf<T>(this IImmutableList<T> list, T item, int startIndex, int count) { throw null; }
-
-        public static int IndexOf<T>(this IImmutableList<T> list, T item, int startIndex) { throw null; }
-
-        public static int IndexOf<T>(this IImmutableList<T> list, T item) { throw null; }
-
-        public static int LastIndexOf<T>(this IImmutableList<T> list, T item, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public static int LastIndexOf<T>(this IImmutableList<T> list, T item, int startIndex, int count) { throw null; }
-
-        public static int LastIndexOf<T>(this IImmutableList<T> list, T item, int startIndex) { throw null; }
-
-        public static int LastIndexOf<T>(this IImmutableList<T> list, T item) { throw null; }
-
-        public static IImmutableList<T> Remove<T>(this IImmutableList<T> list, T value) { throw null; }
-
-        public static IImmutableList<T> RemoveRange<T>(this IImmutableList<T> list, Generic.IEnumerable<T> items) { throw null; }
-
-        public static IImmutableList<T> Replace<T>(this IImmutableList<T> list, T oldValue, T newValue) { throw null; }
-
-        public static ImmutableList<TSource> ToImmutableList<TSource>(this Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static ImmutableList<TSource> ToImmutableList<TSource>(this ImmutableList<TSource>.Builder builder) { throw null; }
-    }
-
-    public sealed partial class ImmutableList<T> : IImmutableList<T>, Generic.IReadOnlyList<T>, Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.IList<T>, Generic.ICollection<T>, IList, ICollection
-    {
-        internal ImmutableList() { }
-
-        public static readonly ImmutableList<T> Empty;
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public T this[int index] { get { throw null; } }
-
-        bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        T Generic.IList<T>.this[int index] { get { throw null; } set { } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IList.IsFixedSize { get { throw null; } }
-
-        bool IList.IsReadOnly { get { throw null; } }
-
-        object? IList.this[int index] { get { throw null; } set { } }
-
-        public ImmutableList<T> Add(T value) { throw null; }
-
-        public ImmutableList<T> AddRange(Generic.IEnumerable<T> items) { throw null; }
-
-        public int BinarySearch(T item, Generic.IComparer<T>? comparer) { throw null; }
-
-        public int BinarySearch(T item) { throw null; }
-
-        public int BinarySearch(int index, int count, T item, Generic.IComparer<T>? comparer) { throw null; }
-
-        public ImmutableList<T> Clear() { throw null; }
-
-        public bool Contains(T value) { throw null; }
-
-        public ImmutableList<TOutput> ConvertAll<TOutput>(Func<T, TOutput> converter) { throw null; }
-
-        public void CopyTo(T[] array, int arrayIndex) { }
-
-        public void CopyTo(T[] array) { }
-
-        public void CopyTo(int index, T[] array, int arrayIndex, int count) { }
-
-        public bool Exists(Predicate<T> match) { throw null; }
-
-        public T? Find(Predicate<T> match) { throw null; }
-
-        public ImmutableList<T> FindAll(Predicate<T> match) { throw null; }
-
-        public int FindIndex(int startIndex, int count, Predicate<T> match) { throw null; }
-
-        public int FindIndex(int startIndex, Predicate<T> match) { throw null; }
-
-        public int FindIndex(Predicate<T> match) { throw null; }
-
-        public T? FindLast(Predicate<T> match) { throw null; }
-
-        public int FindLastIndex(int startIndex, int count, Predicate<T> match) { throw null; }
-
-        public int FindLastIndex(int startIndex, Predicate<T> match) { throw null; }
-
-        public int FindLastIndex(Predicate<T> match) { throw null; }
-
-        public void ForEach(Action<T> action) { }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public ImmutableList<T> GetRange(int index, int count) { throw null; }
-
-        public int IndexOf(T item, int index, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public int IndexOf(T value) { throw null; }
-
-        public ImmutableList<T> Insert(int index, T item) { throw null; }
-
-        public ImmutableList<T> InsertRange(int index, Generic.IEnumerable<T> items) { throw null; }
-
-        public int LastIndexOf(T item, int index, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableList<T> Remove(T value, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableList<T> Remove(T value) { throw null; }
-
-        public ImmutableList<T> RemoveAll(Predicate<T> match) { throw null; }
-
-        public ImmutableList<T> RemoveAt(int index) { throw null; }
-
-        public ImmutableList<T> RemoveRange(Generic.IEnumerable<T> items, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableList<T> RemoveRange(Generic.IEnumerable<T> items) { throw null; }
-
-        public ImmutableList<T> RemoveRange(int index, int count) { throw null; }
-
-        public ImmutableList<T> Replace(T oldValue, T newValue, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableList<T> Replace(T oldValue, T newValue) { throw null; }
-
-        public ImmutableList<T> Reverse() { throw null; }
-
-        public ImmutableList<T> Reverse(int index, int count) { throw null; }
-
-        public ImmutableList<T> SetItem(int index, T value) { throw null; }
-
-        public ImmutableList<T> Sort() { throw null; }
-
-        public ImmutableList<T> Sort(Generic.IComparer<T>? comparer) { throw null; }
-
-        public ImmutableList<T> Sort(Comparison<T> comparison) { throw null; }
-
-        public ImmutableList<T> Sort(int index, int count, Generic.IComparer<T>? comparer) { throw null; }
-
-        void Generic.ICollection<T>.Add(T item) { }
-
-        void Generic.ICollection<T>.Clear() { }
-
-        bool Generic.ICollection<T>.Remove(T item) { throw null; }
-
-        Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void Generic.IList<T>.Insert(int index, T item) { }
-
-        void Generic.IList<T>.RemoveAt(int index) { }
-
-        void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        int IList.Add(object value) { throw null; }
-
-        void IList.Clear() { }
-
-        bool IList.Contains(object value) { throw null; }
-
-        int IList.IndexOf(object value) { throw null; }
-
-        void IList.Insert(int index, object value) { }
-
-        void IList.Remove(object value) { }
-
-        void IList.RemoveAt(int index) { }
-
-        IImmutableList<T> IImmutableList<T>.Add(T value) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.AddRange(Generic.IEnumerable<T> items) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Clear() { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Insert(int index, T item) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.InsertRange(int index, Generic.IEnumerable<T> items) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Remove(T value, Generic.IEqualityComparer<T> equalityComparer) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveAll(Predicate<T> match) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveAt(int index) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveRange(Generic.IEnumerable<T> items, Generic.IEqualityComparer<T> equalityComparer) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveRange(int index, int count) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Replace(T oldValue, T newValue, Generic.IEqualityComparer<T> equalityComparer) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.SetItem(int index, T value) { throw null; }
-
-        public Builder ToBuilder() { throw null; }
-
-        public bool TrueForAll(Predicate<T> match) { throw null; }
-
-        public sealed partial class Builder : Generic.IList<T>, Generic.ICollection<T>, Generic.IEnumerable<T>, IEnumerable, IList, ICollection, Generic.IReadOnlyList<T>, Generic.IReadOnlyCollection<T>
-        {
-            internal Builder() { }
-
-            public int Count { get { throw null; } }
-
-            public T this[int index] { get { throw null; } set { } }
-
-            bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            bool IList.IsFixedSize { get { throw null; } }
-
-            bool IList.IsReadOnly { get { throw null; } }
-
-            object? IList.this[int index] { get { throw null; } set { } }
-
-            public void Add(T item) { }
-
-            public void AddRange(Generic.IEnumerable<T> items) { }
-
-            public int BinarySearch(T item, Generic.IComparer<T>? comparer) { throw null; }
-
-            public int BinarySearch(T item) { throw null; }
-
-            public int BinarySearch(int index, int count, T item, Generic.IComparer<T>? comparer) { throw null; }
-
-            public void Clear() { }
-
-            public bool Contains(T item) { throw null; }
-
-            public ImmutableList<TOutput> ConvertAll<TOutput>(Func<T, TOutput> converter) { throw null; }
-
-            public void CopyTo(T[] array, int arrayIndex) { }
-
-            public void CopyTo(T[] array) { }
-
-            public void CopyTo(int index, T[] array, int arrayIndex, int count) { }
-
-            public bool Exists(Predicate<T> match) { throw null; }
-
-            public T? Find(Predicate<T> match) { throw null; }
-
-            public ImmutableList<T> FindAll(Predicate<T> match) { throw null; }
-
-            public int FindIndex(int startIndex, int count, Predicate<T> match) { throw null; }
-
-            public int FindIndex(int startIndex, Predicate<T> match) { throw null; }
-
-            public int FindIndex(Predicate<T> match) { throw null; }
-
-            public T? FindLast(Predicate<T> match) { throw null; }
-
-            public int FindLastIndex(int startIndex, int count, Predicate<T> match) { throw null; }
-
-            public int FindLastIndex(int startIndex, Predicate<T> match) { throw null; }
-
-            public int FindLastIndex(Predicate<T> match) { throw null; }
-
-            public void ForEach(Action<T> action) { }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            public ImmutableList<T> GetRange(int index, int count) { throw null; }
-
-            public int IndexOf(T item, int index, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-            public int IndexOf(T item, int index, int count) { throw null; }
-
-            public int IndexOf(T item, int index) { throw null; }
-
-            public int IndexOf(T item) { throw null; }
-
-            public void Insert(int index, T item) { }
-
-            public void InsertRange(int index, Generic.IEnumerable<T> items) { }
-
-            public int LastIndexOf(T item, int startIndex, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-            public int LastIndexOf(T item, int startIndex, int count) { throw null; }
-
-            public int LastIndexOf(T item, int startIndex) { throw null; }
-
-            public int LastIndexOf(T item) { throw null; }
-
-            public bool Remove(T item) { throw null; }
-
-            public int RemoveAll(Predicate<T> match) { throw null; }
-
-            public void RemoveAt(int index) { }
-
-            public void Reverse() { }
-
-            public void Reverse(int index, int count) { }
-
-            public void Sort() { }
-
-            public void Sort(Generic.IComparer<T>? comparer) { }
-
-            public void Sort(Comparison<T> comparison) { }
-
-            public void Sort(int index, int count, Generic.IComparer<T>? comparer) { }
-
-            Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            int IList.Add(object value) { throw null; }
-
-            void IList.Clear() { }
-
-            bool IList.Contains(object value) { throw null; }
-
-            int IList.IndexOf(object value) { throw null; }
-
-            void IList.Insert(int index, object value) { }
-
-            void IList.Remove(object value) { }
-
-            public ImmutableList<T> ToImmutable() { throw null; }
-
-            public bool TrueForAll(Predicate<T> match) { throw null; }
-        }
-
-        public partial struct Enumerator : Generic.IEnumerator<T>, IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public T Current { get { throw null; } }
-
-            object? IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            public void Reset() { }
-        }
-    }
-
-    public static partial class ImmutableQueue
-    {
-        public static ImmutableQueue<T> Create<T>() { throw null; }
-
-        public static ImmutableQueue<T> Create<T>(T item) { throw null; }
-
-        public static ImmutableQueue<T> Create<T>(params T[] items) { throw null; }
-
-        public static ImmutableQueue<T> CreateRange<T>(Generic.IEnumerable<T> items) { throw null; }
-
-        public static IImmutableQueue<T> Dequeue<T>(this IImmutableQueue<T> queue, out T value) { throw null; }
-    }
-
-    public sealed partial class ImmutableQueue<T> : IImmutableQueue<T>, Generic.IEnumerable<T>, IEnumerable
-    {
-        internal ImmutableQueue() { }
-
-        public static ImmutableQueue<T> Empty { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public ImmutableQueue<T> Clear() { throw null; }
-
-        public ImmutableQueue<T> Dequeue() { throw null; }
-
-        public ImmutableQueue<T> Dequeue(out T value) { throw null; }
-
-        public ImmutableQueue<T> Enqueue(T value) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public T Peek() { throw null; }
-
-        Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        IImmutableQueue<T> IImmutableQueue<T>.Clear() { throw null; }
-
-        IImmutableQueue<T> IImmutableQueue<T>.Dequeue() { throw null; }
-
-        IImmutableQueue<T> IImmutableQueue<T>.Enqueue(T value) { throw null; }
-
-        public partial struct Enumerator
-        {
-            private ImmutableQueue<T> _originalQueue;
-            private ImmutableStack<T> _remainingForwardsStack;
-            private ImmutableStack<T> _remainingBackwardsStack;
-            private object _dummy;
-            private int _dummyPrimitive;
-            public T Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-        }
-    }
-
-    public static partial class ImmutableSortedDictionary
-    {
-        public static ImmutableSortedDictionary<TKey, TValue> Create<TKey, TValue>() { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> Create<TKey, TValue>(Generic.IComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> Create<TKey, TValue>(Generic.IComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>() { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>(Generic.IComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>(Generic.IComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> CreateRange<TKey, TValue>(Generic.IComparer<TKey>? keyComparer, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> CreateRange<TKey, TValue>(Generic.IComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> CreateRange<TKey, TValue>(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TKey, TValue>(this Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> source, Generic.IComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TKey, TValue>(this Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> source, Generic.IComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TKey, TValue>(this Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> source) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TKey, TValue>(this ImmutableSortedDictionary<TKey, TValue>.Builder builder) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TSource, TKey, TValue>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector, Generic.IComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TSource, TKey, TValue>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector, Generic.IComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TSource, TKey, TValue>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector) { throw null; }
-    }
-
-    public sealed partial class ImmutableSortedDictionary<TKey, TValue> : IImmutableDictionary<TKey, TValue>, Generic.IReadOnlyDictionary<TKey, TValue>, Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, IEnumerable, Generic.IDictionary<TKey, TValue>, Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>, IDictionary, ICollection
-    {
-        internal ImmutableSortedDictionary() { }
-
-        public static readonly ImmutableSortedDictionary<TKey, TValue> Empty;
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public TValue this[TKey key] { get { throw null; } }
-
-        public Generic.IComparer<TKey> KeyComparer { get { throw null; } }
-
-        public Generic.IEnumerable<TKey> Keys { get { throw null; } }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-        TValue Generic.IDictionary<TKey, TValue>.this[TKey key] { get { throw null; } set { } }
-
-        Generic.ICollection<TKey> Generic.IDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        Generic.ICollection<TValue> Generic.IDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IDictionary.IsFixedSize { get { throw null; } }
-
-        bool IDictionary.IsReadOnly { get { throw null; } }
-
-        object? IDictionary.this[object key] { get { throw null; } set { } }
-
-        ICollection IDictionary.Keys { get { throw null; } }
-
-        ICollection IDictionary.Values { get { throw null; } }
-
-        public Generic.IEqualityComparer<TValue> ValueComparer { get { throw null; } }
-
-        public Generic.IEnumerable<TValue> Values { get { throw null; } }
-
-        public ImmutableSortedDictionary<TKey, TValue> Add(TKey key, TValue value) { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> AddRange(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> Clear() { throw null; }
-
-        public bool Contains(Generic.KeyValuePair<TKey, TValue> pair) { throw null; }
-
-        public bool ContainsKey(TKey key) { throw null; }
-
-        public bool ContainsValue(TValue value) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> Remove(TKey value) { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> RemoveRange(Generic.IEnumerable<TKey> keys) { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> SetItem(TKey key, TValue value) { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> SetItems(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Add(Generic.KeyValuePair<TKey, TValue> item) { }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Clear() { }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.CopyTo(Generic.KeyValuePair<TKey, TValue>[] array, int arrayIndex) { }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Remove(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-        void Generic.IDictionary<TKey, TValue>.Add(TKey key, TValue value) { }
-
-        bool Generic.IDictionary<TKey, TValue>.Remove(TKey key) { throw null; }
-
-        Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>> Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        void IDictionary.Add(object key, object value) { }
-
-        void IDictionary.Clear() { }
-
-        bool IDictionary.Contains(object key) { throw null; }
-
-        IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-        void IDictionary.Remove(object key) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.Add(TKey key, TValue value) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.AddRange(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> pairs) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.Clear() { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.Remove(TKey key) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.RemoveRange(Generic.IEnumerable<TKey> keys) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.SetItem(TKey key, TValue value) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.SetItems(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public Builder ToBuilder() { throw null; }
-
-        public bool TryGetKey(TKey equalKey, out TKey actualKey) { throw null; }
-
-        public bool TryGetValue(TKey key, out TValue value) { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> WithComparers(Generic.IComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> WithComparers(Generic.IComparer<TKey>? keyComparer) { throw null; }
-
-        public sealed partial class Builder : Generic.IDictionary<TKey, TValue>, Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, IEnumerable, Generic.IReadOnlyDictionary<TKey, TValue>, Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>, IDictionary, ICollection
-        {
-            internal Builder() { }
-
-            public int Count { get { throw null; } }
-
-            public TValue this[TKey key] { get { throw null; } set { } }
-
-            public Generic.IComparer<TKey> KeyComparer { get { throw null; } set { } }
-
-            public Generic.IEnumerable<TKey> Keys { get { throw null; } }
-
-            bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-            Generic.ICollection<TKey> Generic.IDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-            Generic.ICollection<TValue> Generic.IDictionary<TKey, TValue>.Values { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            bool IDictionary.IsFixedSize { get { throw null; } }
-
-            bool IDictionary.IsReadOnly { get { throw null; } }
-
-            object? IDictionary.this[object key] { get { throw null; } set { } }
-
-            ICollection IDictionary.Keys { get { throw null; } }
-
-            ICollection IDictionary.Values { get { throw null; } }
-
-            public Generic.IEqualityComparer<TValue> ValueComparer { get { throw null; } set { } }
-
-            public Generic.IEnumerable<TValue> Values { get { throw null; } }
-
-            public void Add(TKey key, TValue value) { }
-
-            public void Add(Generic.KeyValuePair<TKey, TValue> item) { }
-
-            public void AddRange(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { }
-
-            public void Clear() { }
-
-            public bool Contains(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-            public bool ContainsKey(TKey key) { throw null; }
-
-            public bool ContainsValue(TValue value) { throw null; }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            public TValue GetValueOrDefault(TKey key, TValue defaultValue) { throw null; }
-
-            public TValue? GetValueOrDefault(TKey key) { throw null; }
-
-            public bool Remove(TKey key) { throw null; }
-
-            public bool Remove(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-            public void RemoveRange(Generic.IEnumerable<TKey> keys) { }
-
-            void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.CopyTo(Generic.KeyValuePair<TKey, TValue>[] array, int arrayIndex) { }
-
-            Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>> Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int index) { }
-
-            void IDictionary.Add(object key, object value) { }
-
-            bool IDictionary.Contains(object key) { throw null; }
-
-            IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-            void IDictionary.Remove(object key) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public ImmutableSortedDictionary<TKey, TValue> ToImmutable() { throw null; }
-
-            public bool TryGetKey(TKey equalKey, out TKey actualKey) { throw null; }
-
-            public bool TryGetValue(TKey key, out TValue value) { throw null; }
-        }
-
-        public partial struct Enumerator : Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>>, IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public Generic.KeyValuePair<TKey, TValue> Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            public void Reset() { }
-        }
-    }
-
-    public static partial class ImmutableSortedSet
-    {
-        public static ImmutableSortedSet<T> Create<T>() { throw null; }
-
-        public static ImmutableSortedSet<T> Create<T>(T item) { throw null; }
-
-        public static ImmutableSortedSet<T> Create<T>(params T[] items) { throw null; }
-
-        public static ImmutableSortedSet<T> Create<T>(Generic.IComparer<T>? comparer, T item) { throw null; }
-
-        public static ImmutableSortedSet<T> Create<T>(Generic.IComparer<T>? comparer, params T[] items) { throw null; }
-
-        public static ImmutableSortedSet<T> Create<T>(Generic.IComparer<T>? comparer) { throw null; }
-
-        public static ImmutableSortedSet<T>.Builder CreateBuilder<T>() { throw null; }
-
-        public static ImmutableSortedSet<T>.Builder CreateBuilder<T>(Generic.IComparer<T>? comparer) { throw null; }
-
-        public static ImmutableSortedSet<T> CreateRange<T>(Generic.IComparer<T>? comparer, Generic.IEnumerable<T> items) { throw null; }
-
-        public static ImmutableSortedSet<T> CreateRange<T>(Generic.IEnumerable<T> items) { throw null; }
-
-        public static ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(this Generic.IEnumerable<TSource> source, Generic.IComparer<TSource>? comparer) { throw null; }
-
-        public static ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(this Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(this ImmutableSortedSet<TSource>.Builder builder) { throw null; }
-    }
-
-    public sealed partial class ImmutableSortedSet<T> : IImmutableSet<T>, Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.IReadOnlyList<T>, Generic.IList<T>, Generic.ICollection<T>, Generic.ISet<T>, IList, ICollection
-    {
-        internal ImmutableSortedSet() { }
-
-        public static readonly ImmutableSortedSet<T> Empty;
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public T this[int index] { get { throw null; } }
-
-        public Generic.IComparer<T> KeyComparer { get { throw null; } }
-
-        public T? Max { get { throw null; } }
-
-        public T? Min { get { throw null; } }
-
-        bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        T Generic.IList<T>.this[int index] { get { throw null; } set { } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IList.IsFixedSize { get { throw null; } }
-
-        bool IList.IsReadOnly { get { throw null; } }
-
-        object? IList.this[int index] { get { throw null; } set { } }
-
-        public ImmutableSortedSet<T> Add(T value) { throw null; }
-
-        public ImmutableSortedSet<T> Clear() { throw null; }
-
-        public bool Contains(T value) { throw null; }
-
-        public ImmutableSortedSet<T> Except(Generic.IEnumerable<T> other) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public int IndexOf(T item) { throw null; }
-
-        public ImmutableSortedSet<T> Intersect(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsProperSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsProperSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool Overlaps(Generic.IEnumerable<T> other) { throw null; }
-
-        public ImmutableSortedSet<T> Remove(T value) { throw null; }
-
-        public Generic.IEnumerable<T> Reverse() { throw null; }
-
-        public bool SetEquals(Generic.IEnumerable<T> other) { throw null; }
-
-        public ImmutableSortedSet<T> SymmetricExcept(Generic.IEnumerable<T> other) { throw null; }
-
-        void Generic.ICollection<T>.Add(T item) { }
-
-        void Generic.ICollection<T>.Clear() { }
-
-        void Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex) { }
-
-        bool Generic.ICollection<T>.Remove(T item) { throw null; }
-
-        Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void Generic.IList<T>.Insert(int index, T item) { }
-
-        void Generic.IList<T>.RemoveAt(int index) { }
-
-        bool Generic.ISet<T>.Add(T item) { throw null; }
-
-        void Generic.ISet<T>.ExceptWith(Generic.IEnumerable<T> other) { }
-
-        void Generic.ISet<T>.IntersectWith(Generic.IEnumerable<T> other) { }
-
-        void Generic.ISet<T>.SymmetricExceptWith(Generic.IEnumerable<T> other) { }
-
-        void Generic.ISet<T>.UnionWith(Generic.IEnumerable<T> other) { }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        int IList.Add(object value) { throw null; }
-
-        void IList.Clear() { }
-
-        bool IList.Contains(object value) { throw null; }
-
-        int IList.IndexOf(object value) { throw null; }
-
-        void IList.Insert(int index, object value) { }
-
-        void IList.Remove(object value) { }
-
-        void IList.RemoveAt(int index) { }
-
-        IImmutableSet<T> IImmutableSet<T>.Add(T value) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Clear() { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Except(Generic.IEnumerable<T> other) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Intersect(Generic.IEnumerable<T> other) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Remove(T value) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.SymmetricExcept(Generic.IEnumerable<T> other) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Union(Generic.IEnumerable<T> other) { throw null; }
-
-        public Builder ToBuilder() { throw null; }
-
-        public bool TryGetValue(T equalValue, out T actualValue) { throw null; }
-
-        public ImmutableSortedSet<T> Union(Generic.IEnumerable<T> other) { throw null; }
-
-        public ImmutableSortedSet<T> WithComparer(Generic.IComparer<T>? comparer) { throw null; }
-
-        public sealed partial class Builder : Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.ISet<T>, Generic.ICollection<T>, ICollection
-        {
-            internal Builder() { }
-
-            public int Count { get { throw null; } }
-
-            public T this[int index] { get { throw null; } }
-
-            public Generic.IComparer<T> KeyComparer { get { throw null; } set { } }
-
-            public T? Max { get { throw null; } }
-
-            public T? Min { get { throw null; } }
-
-            bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            public bool Add(T item) { throw null; }
-
-            public void Clear() { }
-
-            public bool Contains(T item) { throw null; }
-
-            public void ExceptWith(Generic.IEnumerable<T> other) { }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            public void IntersectWith(Generic.IEnumerable<T> other) { }
-
-            public bool IsProperSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool IsProperSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool IsSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool IsSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool Overlaps(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool Remove(T item) { throw null; }
-
-            public Generic.IEnumerable<T> Reverse() { throw null; }
-
-            public bool SetEquals(Generic.IEnumerable<T> other) { throw null; }
-
-            public void SymmetricExceptWith(Generic.IEnumerable<T> other) { }
-
-            void Generic.ICollection<T>.Add(T item) { }
-
-            void Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex) { }
-
-            Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public ImmutableSortedSet<T> ToImmutable() { throw null; }
-
-            public bool TryGetValue(T equalValue, out T actualValue) { throw null; }
-
-            public void UnionWith(Generic.IEnumerable<T> other) { }
-        }
-
-        public partial struct Enumerator : Generic.IEnumerator<T>, IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public T Current { get { throw null; } }
-
-            object? IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            public void Reset() { }
-        }
-    }
-
-    public static partial class ImmutableStack
-    {
-        public static ImmutableStack<T> Create<T>() { throw null; }
-
-        public static ImmutableStack<T> Create<T>(T item) { throw null; }
-
-        public static ImmutableStack<T> Create<T>(params T[] items) { throw null; }
-
-        public static ImmutableStack<T> CreateRange<T>(Generic.IEnumerable<T> items) { throw null; }
-
-        public static IImmutableStack<T> Pop<T>(this IImmutableStack<T> stack, out T value) { throw null; }
-    }
-
-    public sealed partial class ImmutableStack<T> : IImmutableStack<T>, Generic.IEnumerable<T>, IEnumerable
-    {
-        internal ImmutableStack() { }
-
-        public static ImmutableStack<T> Empty { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public ImmutableStack<T> Clear() { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public T Peek() { throw null; }
-
-        public ImmutableStack<T> Pop() { throw null; }
-
-        public ImmutableStack<T> Pop(out T value) { throw null; }
-
-        public ImmutableStack<T> Push(T value) { throw null; }
-
-        Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        IImmutableStack<T> IImmutableStack<T>.Clear() { throw null; }
-
-        IImmutableStack<T> IImmutableStack<T>.Pop() { throw null; }
-
-        IImmutableStack<T> IImmutableStack<T>.Push(T value) { throw null; }
-
-        public partial struct Enumerator
-        {
-            private ImmutableStack<T> _originalStack;
-            private ImmutableStack<T> _remainingStack;
-            private object _dummy;
-            private int _dummyPrimitive;
-            public T Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-        }
-    }
-}
-
-namespace System.Linq
-{
-    public static partial class ImmutableArrayExtensions
-    {
-        public static T? Aggregate<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, T, T> func) { throw null; }
-
-        public static TAccumulate Aggregate<TAccumulate, T>(this Collections.Immutable.ImmutableArray<T> immutableArray, TAccumulate seed, Func<TAccumulate, T, TAccumulate> func) { throw null; }
-
-        public static TResult Aggregate<TAccumulate, TResult, T>(this Collections.Immutable.ImmutableArray<T> immutableArray, TAccumulate seed, Func<TAccumulate, T, TAccumulate> func, Func<TAccumulate, TResult> resultSelector) { throw null; }
-
-        public static bool All<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static bool Any<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static bool Any<T>(this Collections.Immutable.ImmutableArray<T>.Builder builder) { throw null; }
-
-        public static bool Any<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static T ElementAt<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, int index) { throw null; }
-
-        public static T? ElementAtOrDefault<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, int index) { throw null; }
-
-        public static T First<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static T First<T>(this Collections.Immutable.ImmutableArray<T>.Builder builder) { throw null; }
-
-        public static T First<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static T? FirstOrDefault<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static T? FirstOrDefault<T>(this Collections.Immutable.ImmutableArray<T>.Builder builder) { throw null; }
-
-        public static T? FirstOrDefault<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static T Last<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static T Last<T>(this Collections.Immutable.ImmutableArray<T>.Builder builder) { throw null; }
-
-        public static T Last<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static T? LastOrDefault<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static T? LastOrDefault<T>(this Collections.Immutable.ImmutableArray<T>.Builder builder) { throw null; }
-
-        public static T? LastOrDefault<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Select<T, TResult>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, TResult> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this Collections.Immutable.ImmutableArray<TSource> immutableArray, Func<TSource, Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector) { throw null; }
-
-        public static bool SequenceEqual<TDerived, TBase>(this Collections.Immutable.ImmutableArray<TBase> immutableArray, Collections.Generic.IEnumerable<TDerived> items, Collections.Generic.IEqualityComparer<TBase>? comparer = null)
-            where TDerived : TBase { throw null; }
-
-        public static bool SequenceEqual<TDerived, TBase>(this Collections.Immutable.ImmutableArray<TBase> immutableArray, Collections.Immutable.ImmutableArray<TDerived> items, Collections.Generic.IEqualityComparer<TBase>? comparer = null)
-            where TDerived : TBase { throw null; }
-
-        public static bool SequenceEqual<TDerived, TBase>(this Collections.Immutable.ImmutableArray<TBase> immutableArray, Collections.Immutable.ImmutableArray<TDerived> items, Func<TBase, TBase, bool> predicate)
-            where TDerived : TBase { throw null; }
-
-        public static T Single<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static T Single<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static T? SingleOrDefault<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static T? SingleOrDefault<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static T[] ToArray<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, T> ToDictionary<TKey, T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey>? comparer) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, T> ToDictionary<TKey, T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, TKey> keySelector) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TKey, TElement, T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, Func<T, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey>? comparer) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TKey, TElement, T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, Func<T, TElement> elementSelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<T> Where<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.collections.immutable/5.0.0/lib/netstandard1.3/System.Collections.Immutable.cs b/src/referencePackages/src/system.collections.immutable/5.0.0/lib/netstandard1.3/System.Collections.Immutable.cs
deleted file mode 100644
index 761da68f..00000000
--- a/src/referencePackages/src/system.collections.immutable/5.0.0/lib/netstandard1.3/System.Collections.Immutable.cs
+++ /dev/null
@@ -1,1995 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Collections.Immutable.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb")]
-[assembly: System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.3", FrameworkDisplayName = "")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Collections.Immutable")]
-[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyMetadata("PreferInbox", "True")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")]
-[assembly: System.Reflection.AssemblyDescription("System.Collections.Immutable")]
-[assembly: System.Reflection.AssemblyFileVersion("5.0.20.51904")]
-[assembly: System.Reflection.AssemblyInformationalVersion("5.0.0+cf258a14b70ad9069470a108f13765e0e5988f51")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET")]
-[assembly: System.Reflection.AssemblyTitle("System.Collections.Immutable")]
-[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "git://github.com/dotnet/runtime")]
-[assembly: System.Reflection.AssemblyVersionAttribute("5.0.0.0")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Collections.Immutable
-{
-    public partial interface IImmutableDictionary<TKey, TValue> : Generic.IReadOnlyDictionary<TKey, TValue>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, IEnumerable, Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>
-    {
-        IImmutableDictionary<TKey, TValue> Add(TKey key, TValue value);
-        IImmutableDictionary<TKey, TValue> AddRange(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> pairs);
-        IImmutableDictionary<TKey, TValue> Clear();
-        bool Contains(Generic.KeyValuePair<TKey, TValue> pair);
-        IImmutableDictionary<TKey, TValue> Remove(TKey key);
-        IImmutableDictionary<TKey, TValue> RemoveRange(Generic.IEnumerable<TKey> keys);
-        IImmutableDictionary<TKey, TValue> SetItem(TKey key, TValue value);
-        IImmutableDictionary<TKey, TValue> SetItems(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items);
-        bool TryGetKey(TKey equalKey, out TKey actualKey);
-    }
-
-    public partial interface IImmutableList<T> : Generic.IReadOnlyList<T>, Generic.IEnumerable<T>, IEnumerable, Generic.IReadOnlyCollection<T>
-    {
-        IImmutableList<T> Add(T value);
-        IImmutableList<T> AddRange(Generic.IEnumerable<T> items);
-        IImmutableList<T> Clear();
-        int IndexOf(T item, int index, int count, Generic.IEqualityComparer<T>? equalityComparer);
-        IImmutableList<T> Insert(int index, T element);
-        IImmutableList<T> InsertRange(int index, Generic.IEnumerable<T> items);
-        int LastIndexOf(T item, int index, int count, Generic.IEqualityComparer<T>? equalityComparer);
-        IImmutableList<T> Remove(T value, Generic.IEqualityComparer<T>? equalityComparer);
-        IImmutableList<T> RemoveAll(Predicate<T> match);
-        IImmutableList<T> RemoveAt(int index);
-        IImmutableList<T> RemoveRange(Generic.IEnumerable<T> items, Generic.IEqualityComparer<T>? equalityComparer);
-        IImmutableList<T> RemoveRange(int index, int count);
-        IImmutableList<T> Replace(T oldValue, T newValue, Generic.IEqualityComparer<T>? equalityComparer);
-        IImmutableList<T> SetItem(int index, T value);
-    }
-
-    public partial interface IImmutableQueue<T> : Generic.IEnumerable<T>, IEnumerable
-    {
-        bool IsEmpty { get; }
-
-        IImmutableQueue<T> Clear();
-        IImmutableQueue<T> Dequeue();
-        IImmutableQueue<T> Enqueue(T value);
-        T Peek();
-    }
-
-    public partial interface IImmutableSet<T> : Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IEnumerable
-    {
-        IImmutableSet<T> Add(T value);
-        IImmutableSet<T> Clear();
-        bool Contains(T value);
-        IImmutableSet<T> Except(Generic.IEnumerable<T> other);
-        IImmutableSet<T> Intersect(Generic.IEnumerable<T> other);
-        bool IsProperSubsetOf(Generic.IEnumerable<T> other);
-        bool IsProperSupersetOf(Generic.IEnumerable<T> other);
-        bool IsSubsetOf(Generic.IEnumerable<T> other);
-        bool IsSupersetOf(Generic.IEnumerable<T> other);
-        bool Overlaps(Generic.IEnumerable<T> other);
-        IImmutableSet<T> Remove(T value);
-        bool SetEquals(Generic.IEnumerable<T> other);
-        IImmutableSet<T> SymmetricExcept(Generic.IEnumerable<T> other);
-        bool TryGetValue(T equalValue, out T actualValue);
-        IImmutableSet<T> Union(Generic.IEnumerable<T> other);
-    }
-
-    public partial interface IImmutableStack<T> : Generic.IEnumerable<T>, IEnumerable
-    {
-        bool IsEmpty { get; }
-
-        IImmutableStack<T> Clear();
-        T Peek();
-        IImmutableStack<T> Pop();
-        IImmutableStack<T> Push(T value);
-    }
-
-    public static partial class ImmutableArray
-    {
-        public static int BinarySearch<T>(this ImmutableArray<T> array, T value, Generic.IComparer<T>? comparer) { throw null; }
-
-        public static int BinarySearch<T>(this ImmutableArray<T> array, T value) { throw null; }
-
-        public static int BinarySearch<T>(this ImmutableArray<T> array, int index, int length, T value, Generic.IComparer<T>? comparer) { throw null; }
-
-        public static int BinarySearch<T>(this ImmutableArray<T> array, int index, int length, T value) { throw null; }
-
-        public static ImmutableArray<T> Create<T>() { throw null; }
-
-        public static ImmutableArray<T> Create<T>(T item1, T item2, T item3, T item4) { throw null; }
-
-        public static ImmutableArray<T> Create<T>(T item1, T item2, T item3) { throw null; }
-
-        public static ImmutableArray<T> Create<T>(T item1, T item2) { throw null; }
-
-        public static ImmutableArray<T> Create<T>(T item) { throw null; }
-
-        public static ImmutableArray<T> Create<T>(T[] items, int start, int length) { throw null; }
-
-        public static ImmutableArray<T> Create<T>(params T[]? items) { throw null; }
-
-        public static ImmutableArray<T> Create<T>(ImmutableArray<T> items, int start, int length) { throw null; }
-
-        public static ImmutableArray<T>.Builder CreateBuilder<T>() { throw null; }
-
-        public static ImmutableArray<T>.Builder CreateBuilder<T>(int initialCapacity) { throw null; }
-
-        public static ImmutableArray<T> CreateRange<T>(Generic.IEnumerable<T> items) { throw null; }
-
-        public static ImmutableArray<TResult> CreateRange<TSource, TResult>(ImmutableArray<TSource> items, Func<TSource, TResult> selector) { throw null; }
-
-        public static ImmutableArray<TResult> CreateRange<TSource, TResult>(ImmutableArray<TSource> items, int start, int length, Func<TSource, TResult> selector) { throw null; }
-
-        public static ImmutableArray<TResult> CreateRange<TSource, TArg, TResult>(ImmutableArray<TSource> items, Func<TSource, TArg, TResult> selector, TArg arg) { throw null; }
-
-        public static ImmutableArray<TResult> CreateRange<TSource, TArg, TResult>(ImmutableArray<TSource> items, int start, int length, Func<TSource, TArg, TResult> selector, TArg arg) { throw null; }
-
-        public static ImmutableArray<TSource> ToImmutableArray<TSource>(this Generic.IEnumerable<TSource> items) { throw null; }
-
-        public static ImmutableArray<TSource> ToImmutableArray<TSource>(this ImmutableArray<TSource>.Builder builder) { throw null; }
-    }
-
-    public partial struct ImmutableArray<T> : Generic.IReadOnlyList<T>, Generic.IEnumerable<T>, IEnumerable, Generic.IReadOnlyCollection<T>, Generic.IList<T>, Generic.ICollection<T>, IEquatable<ImmutableArray<T>>, IList, ICollection, IStructuralComparable, IStructuralEquatable, IImmutableList<T>
-    {
-        private object _dummy;
-        private int _dummyPrimitive;
-        public static readonly ImmutableArray<T> Empty;
-        public bool IsDefault { get { throw null; } }
-
-        public bool IsDefaultOrEmpty { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public T this[int index] { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        int Generic.ICollection<T>.Count { get { throw null; } }
-
-        bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        T Generic.IList<T>.this[int index] { get { throw null; } set { } }
-
-        int Generic.IReadOnlyCollection<T>.Count { get { throw null; } }
-
-        T Generic.IReadOnlyList<T>.this[int index] { get { throw null; } }
-
-        int ICollection.Count { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IList.IsFixedSize { get { throw null; } }
-
-        bool IList.IsReadOnly { get { throw null; } }
-
-        object? IList.this[int index] { get { throw null; } set { } }
-
-        public ImmutableArray<T> Add(T item) { throw null; }
-
-        public ImmutableArray<T> AddRange(Generic.IEnumerable<T> items) { throw null; }
-
-        public ImmutableArray<T> AddRange(ImmutableArray<T> items) { throw null; }
-
-        public ImmutableArray<TOther> As<TOther>()
-            where TOther : class { throw null; }
-
-        public ReadOnlyMemory<T> AsMemory() { throw null; }
-
-        public ReadOnlySpan<T> AsSpan() { throw null; }
-
-        public ImmutableArray<TOther> CastArray<TOther>()
-            where TOther : class { throw null; }
-
-        public static ImmutableArray<T> CastUp<TDerived>(ImmutableArray<TDerived> items)
-            where TDerived : class, T { throw null; }
-
-        public ImmutableArray<T> Clear() { throw null; }
-
-        public bool Contains(T item) { throw null; }
-
-        public void CopyTo(T[] destination, int destinationIndex) { }
-
-        public void CopyTo(T[] destination) { }
-
-        public void CopyTo(int sourceIndex, T[] destination, int destinationIndex, int length) { }
-
-        public bool Equals(ImmutableArray<T> other) { throw null; }
-
-        public override bool Equals(object? obj) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public int IndexOf(T item, int startIndex, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public int IndexOf(T item, int startIndex, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public int IndexOf(T item, int startIndex, int count) { throw null; }
-
-        public int IndexOf(T item, int startIndex) { throw null; }
-
-        public int IndexOf(T item) { throw null; }
-
-        public ImmutableArray<T> Insert(int index, T item) { throw null; }
-
-        public ImmutableArray<T> InsertRange(int index, Generic.IEnumerable<T> items) { throw null; }
-
-        public ImmutableArray<T> InsertRange(int index, ImmutableArray<T> items) { throw null; }
-
-        public ref readonly T ItemRef(int index) { throw null; }
-
-        public int LastIndexOf(T item, int startIndex, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public int LastIndexOf(T item, int startIndex, int count) { throw null; }
-
-        public int LastIndexOf(T item, int startIndex) { throw null; }
-
-        public int LastIndexOf(T item) { throw null; }
-
-        public Generic.IEnumerable<TResult> OfType<TResult>() { throw null; }
-
-        public static bool operator ==(ImmutableArray<T> left, ImmutableArray<T> right) { throw null; }
-
-        public static bool operator ==(ImmutableArray<T>? left, ImmutableArray<T>? right) { throw null; }
-
-        public static bool operator !=(ImmutableArray<T> left, ImmutableArray<T> right) { throw null; }
-
-        public static bool operator !=(ImmutableArray<T>? left, ImmutableArray<T>? right) { throw null; }
-
-        public ImmutableArray<T> Remove(T item, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableArray<T> Remove(T item) { throw null; }
-
-        public ImmutableArray<T> RemoveAll(Predicate<T> match) { throw null; }
-
-        public ImmutableArray<T> RemoveAt(int index) { throw null; }
-
-        public ImmutableArray<T> RemoveRange(Generic.IEnumerable<T> items, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableArray<T> RemoveRange(Generic.IEnumerable<T> items) { throw null; }
-
-        public ImmutableArray<T> RemoveRange(ImmutableArray<T> items, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableArray<T> RemoveRange(ImmutableArray<T> items) { throw null; }
-
-        public ImmutableArray<T> RemoveRange(int index, int length) { throw null; }
-
-        public ImmutableArray<T> Replace(T oldValue, T newValue, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableArray<T> Replace(T oldValue, T newValue) { throw null; }
-
-        public ImmutableArray<T> SetItem(int index, T item) { throw null; }
-
-        public ImmutableArray<T> Sort() { throw null; }
-
-        public ImmutableArray<T> Sort(Generic.IComparer<T>? comparer) { throw null; }
-
-        public ImmutableArray<T> Sort(Comparison<T> comparison) { throw null; }
-
-        public ImmutableArray<T> Sort(int index, int count, Generic.IComparer<T>? comparer) { throw null; }
-
-        void Generic.ICollection<T>.Add(T item) { }
-
-        void Generic.ICollection<T>.Clear() { }
-
-        bool Generic.ICollection<T>.Remove(T item) { throw null; }
-
-        Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void Generic.IList<T>.Insert(int index, T item) { }
-
-        void Generic.IList<T>.RemoveAt(int index) { }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        int IList.Add(object value) { throw null; }
-
-        void IList.Clear() { }
-
-        bool IList.Contains(object value) { throw null; }
-
-        int IList.IndexOf(object value) { throw null; }
-
-        void IList.Insert(int index, object value) { }
-
-        void IList.Remove(object value) { }
-
-        void IList.RemoveAt(int index) { }
-
-        IImmutableList<T> IImmutableList<T>.Add(T value) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.AddRange(Generic.IEnumerable<T> items) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Clear() { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Insert(int index, T element) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.InsertRange(int index, Generic.IEnumerable<T> items) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Remove(T value, Generic.IEqualityComparer<T> equalityComparer) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveAll(Predicate<T> match) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveAt(int index) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveRange(Generic.IEnumerable<T> items, Generic.IEqualityComparer<T> equalityComparer) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveRange(int index, int count) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Replace(T oldValue, T newValue, Generic.IEqualityComparer<T> equalityComparer) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.SetItem(int index, T value) { throw null; }
-
-        int IStructuralComparable.CompareTo(object other, IComparer comparer) { throw null; }
-
-        bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer) { throw null; }
-
-        int IStructuralEquatable.GetHashCode(IEqualityComparer comparer) { throw null; }
-
-        public Builder ToBuilder() { throw null; }
-
-        public sealed partial class Builder : Generic.IList<T>, Generic.ICollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.IReadOnlyList<T>, Generic.IReadOnlyCollection<T>
-        {
-            internal Builder() { }
-
-            public int Capacity { get { throw null; } set { } }
-
-            public int Count { get { throw null; } set { } }
-
-            public T this[int index] { get { throw null; } set { } }
-
-            bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-            public void Add(T item) { }
-
-            public void AddRange(T[] items, int length) { }
-
-            public void AddRange(params T[] items) { }
-
-            public void AddRange(Generic.IEnumerable<T> items) { }
-
-            public void AddRange(ImmutableArray<T> items, int length) { }
-
-            public void AddRange(Builder items) { }
-
-            public void AddRange(ImmutableArray<T> items) { }
-
-            public void AddRange<TDerived>(TDerived[] items)
-                where TDerived : T { }
-
-            public void AddRange<TDerived>(ImmutableArray<TDerived>.Builder items)
-                where TDerived : T { }
-
-            public void AddRange<TDerived>(ImmutableArray<TDerived> items)
-                where TDerived : T { }
-
-            public void Clear() { }
-
-            public bool Contains(T item) { throw null; }
-
-            public void CopyTo(T[] array, int index) { }
-
-            public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-            public int IndexOf(T item, int startIndex, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-            public int IndexOf(T item, int startIndex, int count) { throw null; }
-
-            public int IndexOf(T item, int startIndex) { throw null; }
-
-            public int IndexOf(T item) { throw null; }
-
-            public void Insert(int index, T item) { }
-
-            public ref readonly T ItemRef(int index) { throw null; }
-
-            public int LastIndexOf(T item, int startIndex, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-            public int LastIndexOf(T item, int startIndex, int count) { throw null; }
-
-            public int LastIndexOf(T item, int startIndex) { throw null; }
-
-            public int LastIndexOf(T item) { throw null; }
-
-            public ImmutableArray<T> MoveToImmutable() { throw null; }
-
-            public bool Remove(T element) { throw null; }
-
-            public void RemoveAt(int index) { }
-
-            public void Reverse() { }
-
-            public void Sort() { }
-
-            public void Sort(Generic.IComparer<T>? comparer) { }
-
-            public void Sort(Comparison<T> comparison) { }
-
-            public void Sort(int index, int count, Generic.IComparer<T>? comparer) { }
-
-            Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public T[] ToArray() { throw null; }
-
-            public ImmutableArray<T> ToImmutable() { throw null; }
-        }
-
-        public partial struct Enumerator
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public T Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-        }
-    }
-
-    public static partial class ImmutableDictionary
-    {
-        public static bool Contains<TKey, TValue>(this IImmutableDictionary<TKey, TValue> map, TKey key, TValue value) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> Create<TKey, TValue>() { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> Create<TKey, TValue>(Generic.IEqualityComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> Create<TKey, TValue>(Generic.IEqualityComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>() { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>(Generic.IEqualityComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>(Generic.IEqualityComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> CreateRange<TKey, TValue>(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> CreateRange<TKey, TValue>(Generic.IEqualityComparer<TKey>? keyComparer, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> CreateRange<TKey, TValue>(Generic.IEqualityComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public static TValue GetValueOrDefault<TKey, TValue>(this IImmutableDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue) { throw null; }
-
-        public static TValue? GetValueOrDefault<TKey, TValue>(this IImmutableDictionary<TKey, TValue> dictionary, TKey key) { throw null; }
-
-        public static ImmutableDictionary<TKey, TSource> ToImmutableDictionary<TSource, TKey>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Generic.IEqualityComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TSource> ToImmutableDictionary<TSource, TKey>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TKey, TValue>(this Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> source, Generic.IEqualityComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TKey, TValue>(this Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> source, Generic.IEqualityComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TKey, TValue>(this Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> source) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TKey, TValue>(this ImmutableDictionary<TKey, TValue>.Builder builder) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TSource, TKey, TValue>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector, Generic.IEqualityComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TSource, TKey, TValue>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector, Generic.IEqualityComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableDictionary<TKey, TValue> ToImmutableDictionary<TSource, TKey, TValue>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector) { throw null; }
-    }
-
-    public sealed partial class ImmutableDictionary<TKey, TValue> : IImmutableDictionary<TKey, TValue>, Generic.IReadOnlyDictionary<TKey, TValue>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, IEnumerable, Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IDictionary<TKey, TValue>, Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>, IDictionary, ICollection
-    {
-        internal ImmutableDictionary() { }
-
-        public static readonly ImmutableDictionary<TKey, TValue> Empty;
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public TValue this[TKey key] { get { throw null; } }
-
-        public Generic.IEqualityComparer<TKey> KeyComparer { get { throw null; } }
-
-        public Generic.IEnumerable<TKey> Keys { get { throw null; } }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-        TValue Generic.IDictionary<TKey, TValue>.this[TKey key] { get { throw null; } set { } }
-
-        Generic.ICollection<TKey> Generic.IDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        Generic.ICollection<TValue> Generic.IDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IDictionary.IsFixedSize { get { throw null; } }
-
-        bool IDictionary.IsReadOnly { get { throw null; } }
-
-        object? IDictionary.this[object key] { get { throw null; } set { } }
-
-        ICollection IDictionary.Keys { get { throw null; } }
-
-        ICollection IDictionary.Values { get { throw null; } }
-
-        public Generic.IEqualityComparer<TValue> ValueComparer { get { throw null; } }
-
-        public Generic.IEnumerable<TValue> Values { get { throw null; } }
-
-        public ImmutableDictionary<TKey, TValue> Add(TKey key, TValue value) { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> AddRange(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> pairs) { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> Clear() { throw null; }
-
-        public bool Contains(Generic.KeyValuePair<TKey, TValue> pair) { throw null; }
-
-        public bool ContainsKey(TKey key) { throw null; }
-
-        public bool ContainsValue(TValue value) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> Remove(TKey key) { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> RemoveRange(Generic.IEnumerable<TKey> keys) { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> SetItem(TKey key, TValue value) { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> SetItems(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Add(Generic.KeyValuePair<TKey, TValue> item) { }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Clear() { }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.CopyTo(Generic.KeyValuePair<TKey, TValue>[] array, int arrayIndex) { }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Remove(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-        void Generic.IDictionary<TKey, TValue>.Add(TKey key, TValue value) { }
-
-        bool Generic.IDictionary<TKey, TValue>.Remove(TKey key) { throw null; }
-
-        Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>> Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-        void IDictionary.Add(object key, object value) { }
-
-        void IDictionary.Clear() { }
-
-        bool IDictionary.Contains(object key) { throw null; }
-
-        IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-        void IDictionary.Remove(object key) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.Add(TKey key, TValue value) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.AddRange(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> pairs) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.Clear() { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.Remove(TKey key) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.RemoveRange(Generic.IEnumerable<TKey> keys) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.SetItem(TKey key, TValue value) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.SetItems(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public Builder ToBuilder() { throw null; }
-
-        public bool TryGetKey(TKey equalKey, out TKey actualKey) { throw null; }
-
-        public bool TryGetValue(TKey key, out TValue value) { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> WithComparers(Generic.IEqualityComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public ImmutableDictionary<TKey, TValue> WithComparers(Generic.IEqualityComparer<TKey>? keyComparer) { throw null; }
-
-        public sealed partial class Builder : Generic.IDictionary<TKey, TValue>, Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, IEnumerable, Generic.IReadOnlyDictionary<TKey, TValue>, Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>, IDictionary, ICollection
-        {
-            internal Builder() { }
-
-            public int Count { get { throw null; } }
-
-            public TValue this[TKey key] { get { throw null; } set { } }
-
-            public Generic.IEqualityComparer<TKey> KeyComparer { get { throw null; } set { } }
-
-            public Generic.IEnumerable<TKey> Keys { get { throw null; } }
-
-            bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-            Generic.ICollection<TKey> Generic.IDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-            Generic.ICollection<TValue> Generic.IDictionary<TKey, TValue>.Values { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            bool IDictionary.IsFixedSize { get { throw null; } }
-
-            bool IDictionary.IsReadOnly { get { throw null; } }
-
-            object? IDictionary.this[object key] { get { throw null; } set { } }
-
-            ICollection IDictionary.Keys { get { throw null; } }
-
-            ICollection IDictionary.Values { get { throw null; } }
-
-            public Generic.IEqualityComparer<TValue> ValueComparer { get { throw null; } set { } }
-
-            public Generic.IEnumerable<TValue> Values { get { throw null; } }
-
-            public void Add(TKey key, TValue value) { }
-
-            public void Add(Generic.KeyValuePair<TKey, TValue> item) { }
-
-            public void AddRange(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { }
-
-            public void Clear() { }
-
-            public bool Contains(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-            public bool ContainsKey(TKey key) { throw null; }
-
-            public bool ContainsValue(TValue value) { throw null; }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            public TValue GetValueOrDefault(TKey key, TValue defaultValue) { throw null; }
-
-            public TValue? GetValueOrDefault(TKey key) { throw null; }
-
-            public bool Remove(TKey key) { throw null; }
-
-            public bool Remove(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-            public void RemoveRange(Generic.IEnumerable<TKey> keys) { }
-
-            void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.CopyTo(Generic.KeyValuePair<TKey, TValue>[] array, int arrayIndex) { }
-
-            Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>> Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-            void IDictionary.Add(object key, object value) { }
-
-            bool IDictionary.Contains(object key) { throw null; }
-
-            IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-            void IDictionary.Remove(object key) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public ImmutableDictionary<TKey, TValue> ToImmutable() { throw null; }
-
-            public bool TryGetKey(TKey equalKey, out TKey actualKey) { throw null; }
-
-            public bool TryGetValue(TKey key, out TValue value) { throw null; }
-        }
-
-        public partial struct Enumerator : Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>>, IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public Generic.KeyValuePair<TKey, TValue> Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            public void Reset() { }
-        }
-    }
-
-    public static partial class ImmutableHashSet
-    {
-        public static ImmutableHashSet<T> Create<T>() { throw null; }
-
-        public static ImmutableHashSet<T> Create<T>(T item) { throw null; }
-
-        public static ImmutableHashSet<T> Create<T>(params T[] items) { throw null; }
-
-        public static ImmutableHashSet<T> Create<T>(Generic.IEqualityComparer<T>? equalityComparer, T item) { throw null; }
-
-        public static ImmutableHashSet<T> Create<T>(Generic.IEqualityComparer<T>? equalityComparer, params T[] items) { throw null; }
-
-        public static ImmutableHashSet<T> Create<T>(Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public static ImmutableHashSet<T>.Builder CreateBuilder<T>() { throw null; }
-
-        public static ImmutableHashSet<T>.Builder CreateBuilder<T>(Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public static ImmutableHashSet<T> CreateRange<T>(Generic.IEnumerable<T> items) { throw null; }
-
-        public static ImmutableHashSet<T> CreateRange<T>(Generic.IEqualityComparer<T>? equalityComparer, Generic.IEnumerable<T> items) { throw null; }
-
-        public static ImmutableHashSet<TSource> ToImmutableHashSet<TSource>(this Generic.IEnumerable<TSource> source, Generic.IEqualityComparer<TSource>? equalityComparer) { throw null; }
-
-        public static ImmutableHashSet<TSource> ToImmutableHashSet<TSource>(this Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static ImmutableHashSet<TSource> ToImmutableHashSet<TSource>(this ImmutableHashSet<TSource>.Builder builder) { throw null; }
-    }
-
-    public sealed partial class ImmutableHashSet<T> : IImmutableSet<T>, Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.ICollection<T>, Generic.ISet<T>, ICollection
-    {
-        internal ImmutableHashSet() { }
-
-        public static readonly ImmutableHashSet<T> Empty;
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public Generic.IEqualityComparer<T> KeyComparer { get { throw null; } }
-
-        bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public ImmutableHashSet<T> Add(T item) { throw null; }
-
-        public ImmutableHashSet<T> Clear() { throw null; }
-
-        public bool Contains(T item) { throw null; }
-
-        public ImmutableHashSet<T> Except(Generic.IEnumerable<T> other) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public ImmutableHashSet<T> Intersect(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsProperSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsProperSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool Overlaps(Generic.IEnumerable<T> other) { throw null; }
-
-        public ImmutableHashSet<T> Remove(T item) { throw null; }
-
-        public bool SetEquals(Generic.IEnumerable<T> other) { throw null; }
-
-        public ImmutableHashSet<T> SymmetricExcept(Generic.IEnumerable<T> other) { throw null; }
-
-        void Generic.ICollection<T>.Add(T item) { }
-
-        void Generic.ICollection<T>.Clear() { }
-
-        void Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex) { }
-
-        bool Generic.ICollection<T>.Remove(T item) { throw null; }
-
-        Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        bool Generic.ISet<T>.Add(T item) { throw null; }
-
-        void Generic.ISet<T>.ExceptWith(Generic.IEnumerable<T> other) { }
-
-        void Generic.ISet<T>.IntersectWith(Generic.IEnumerable<T> other) { }
-
-        void Generic.ISet<T>.SymmetricExceptWith(Generic.IEnumerable<T> other) { }
-
-        void Generic.ISet<T>.UnionWith(Generic.IEnumerable<T> other) { }
-
-        void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Add(T item) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Clear() { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Except(Generic.IEnumerable<T> other) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Intersect(Generic.IEnumerable<T> other) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Remove(T item) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.SymmetricExcept(Generic.IEnumerable<T> other) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Union(Generic.IEnumerable<T> other) { throw null; }
-
-        public Builder ToBuilder() { throw null; }
-
-        public bool TryGetValue(T equalValue, out T actualValue) { throw null; }
-
-        public ImmutableHashSet<T> Union(Generic.IEnumerable<T> other) { throw null; }
-
-        public ImmutableHashSet<T> WithComparer(Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public sealed partial class Builder : Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.ISet<T>, Generic.ICollection<T>
-        {
-            internal Builder() { }
-
-            public int Count { get { throw null; } }
-
-            public Generic.IEqualityComparer<T> KeyComparer { get { throw null; } set { } }
-
-            bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-            public bool Add(T item) { throw null; }
-
-            public void Clear() { }
-
-            public bool Contains(T item) { throw null; }
-
-            public void ExceptWith(Generic.IEnumerable<T> other) { }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            public void IntersectWith(Generic.IEnumerable<T> other) { }
-
-            public bool IsProperSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool IsProperSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool IsSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool IsSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool Overlaps(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool Remove(T item) { throw null; }
-
-            public bool SetEquals(Generic.IEnumerable<T> other) { throw null; }
-
-            public void SymmetricExceptWith(Generic.IEnumerable<T> other) { }
-
-            void Generic.ICollection<T>.Add(T item) { }
-
-            void Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex) { }
-
-            Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public ImmutableHashSet<T> ToImmutable() { throw null; }
-
-            public bool TryGetValue(T equalValue, out T actualValue) { throw null; }
-
-            public void UnionWith(Generic.IEnumerable<T> other) { }
-        }
-
-        public partial struct Enumerator : Generic.IEnumerator<T>, IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public T Current { get { throw null; } }
-
-            object? IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            public void Reset() { }
-        }
-    }
-
-    public static partial class ImmutableInterlocked
-    {
-        public static TValue AddOrUpdate<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory) { throw null; }
-
-        public static TValue AddOrUpdate<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory) { throw null; }
-
-        public static void Enqueue<T>(ref ImmutableQueue<T> location, T value) { }
-
-        public static TValue GetOrAdd<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, TValue value) { throw null; }
-
-        public static TValue GetOrAdd<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, Func<TKey, TValue> valueFactory) { throw null; }
-
-        public static TValue GetOrAdd<TKey, TValue, TArg>(ref ImmutableDictionary<TKey, TValue> location, TKey key, Func<TKey, TArg, TValue> valueFactory, TArg factoryArgument) { throw null; }
-
-        public static ImmutableArray<T> InterlockedCompareExchange<T>(ref ImmutableArray<T> location, ImmutableArray<T> value, ImmutableArray<T> comparand) { throw null; }
-
-        public static ImmutableArray<T> InterlockedExchange<T>(ref ImmutableArray<T> location, ImmutableArray<T> value) { throw null; }
-
-        public static bool InterlockedInitialize<T>(ref ImmutableArray<T> location, ImmutableArray<T> value) { throw null; }
-
-        public static void Push<T>(ref ImmutableStack<T> location, T value) { }
-
-        public static bool TryAdd<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, TValue value) { throw null; }
-
-        public static bool TryDequeue<T>(ref ImmutableQueue<T> location, out T value) { throw null; }
-
-        public static bool TryPop<T>(ref ImmutableStack<T> location, out T value) { throw null; }
-
-        public static bool TryRemove<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, out TValue value) { throw null; }
-
-        public static bool TryUpdate<TKey, TValue>(ref ImmutableDictionary<TKey, TValue> location, TKey key, TValue newValue, TValue comparisonValue) { throw null; }
-
-        public static bool Update<T>(ref T location, Func<T, T> transformer)
-            where T : class { throw null; }
-
-        public static bool Update<T>(ref ImmutableArray<T> location, Func<ImmutableArray<T>, ImmutableArray<T>> transformer) { throw null; }
-
-        public static bool Update<T, TArg>(ref T location, Func<T, TArg, T> transformer, TArg transformerArgument)
-            where T : class { throw null; }
-
-        public static bool Update<T, TArg>(ref ImmutableArray<T> location, Func<ImmutableArray<T>, TArg, ImmutableArray<T>> transformer, TArg transformerArgument) { throw null; }
-    }
-
-    public static partial class ImmutableList
-    {
-        public static ImmutableList<T> Create<T>() { throw null; }
-
-        public static ImmutableList<T> Create<T>(T item) { throw null; }
-
-        public static ImmutableList<T> Create<T>(params T[] items) { throw null; }
-
-        public static ImmutableList<T>.Builder CreateBuilder<T>() { throw null; }
-
-        public static ImmutableList<T> CreateRange<T>(Generic.IEnumerable<T> items) { throw null; }
-
-        public static int IndexOf<T>(this IImmutableList<T> list, T item, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public static int IndexOf<T>(this IImmutableList<T> list, T item, int startIndex, int count) { throw null; }
-
-        public static int IndexOf<T>(this IImmutableList<T> list, T item, int startIndex) { throw null; }
-
-        public static int IndexOf<T>(this IImmutableList<T> list, T item) { throw null; }
-
-        public static int LastIndexOf<T>(this IImmutableList<T> list, T item, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public static int LastIndexOf<T>(this IImmutableList<T> list, T item, int startIndex, int count) { throw null; }
-
-        public static int LastIndexOf<T>(this IImmutableList<T> list, T item, int startIndex) { throw null; }
-
-        public static int LastIndexOf<T>(this IImmutableList<T> list, T item) { throw null; }
-
-        public static IImmutableList<T> Remove<T>(this IImmutableList<T> list, T value) { throw null; }
-
-        public static IImmutableList<T> RemoveRange<T>(this IImmutableList<T> list, Generic.IEnumerable<T> items) { throw null; }
-
-        public static IImmutableList<T> Replace<T>(this IImmutableList<T> list, T oldValue, T newValue) { throw null; }
-
-        public static ImmutableList<TSource> ToImmutableList<TSource>(this Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static ImmutableList<TSource> ToImmutableList<TSource>(this ImmutableList<TSource>.Builder builder) { throw null; }
-    }
-
-    public sealed partial class ImmutableList<T> : IImmutableList<T>, Generic.IReadOnlyList<T>, Generic.IEnumerable<T>, IEnumerable, Generic.IReadOnlyCollection<T>, Generic.IList<T>, Generic.ICollection<T>, IList, ICollection
-    {
-        internal ImmutableList() { }
-
-        public static readonly ImmutableList<T> Empty;
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public T this[int index] { get { throw null; } }
-
-        bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        T Generic.IList<T>.this[int index] { get { throw null; } set { } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IList.IsFixedSize { get { throw null; } }
-
-        bool IList.IsReadOnly { get { throw null; } }
-
-        object? IList.this[int index] { get { throw null; } set { } }
-
-        public ImmutableList<T> Add(T value) { throw null; }
-
-        public ImmutableList<T> AddRange(Generic.IEnumerable<T> items) { throw null; }
-
-        public int BinarySearch(T item, Generic.IComparer<T>? comparer) { throw null; }
-
-        public int BinarySearch(T item) { throw null; }
-
-        public int BinarySearch(int index, int count, T item, Generic.IComparer<T>? comparer) { throw null; }
-
-        public ImmutableList<T> Clear() { throw null; }
-
-        public bool Contains(T value) { throw null; }
-
-        public ImmutableList<TOutput> ConvertAll<TOutput>(Func<T, TOutput> converter) { throw null; }
-
-        public void CopyTo(T[] array, int arrayIndex) { }
-
-        public void CopyTo(T[] array) { }
-
-        public void CopyTo(int index, T[] array, int arrayIndex, int count) { }
-
-        public bool Exists(Predicate<T> match) { throw null; }
-
-        public T? Find(Predicate<T> match) { throw null; }
-
-        public ImmutableList<T> FindAll(Predicate<T> match) { throw null; }
-
-        public int FindIndex(int startIndex, int count, Predicate<T> match) { throw null; }
-
-        public int FindIndex(int startIndex, Predicate<T> match) { throw null; }
-
-        public int FindIndex(Predicate<T> match) { throw null; }
-
-        public T? FindLast(Predicate<T> match) { throw null; }
-
-        public int FindLastIndex(int startIndex, int count, Predicate<T> match) { throw null; }
-
-        public int FindLastIndex(int startIndex, Predicate<T> match) { throw null; }
-
-        public int FindLastIndex(Predicate<T> match) { throw null; }
-
-        public void ForEach(Action<T> action) { }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public ImmutableList<T> GetRange(int index, int count) { throw null; }
-
-        public int IndexOf(T item, int index, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public int IndexOf(T value) { throw null; }
-
-        public ImmutableList<T> Insert(int index, T item) { throw null; }
-
-        public ImmutableList<T> InsertRange(int index, Generic.IEnumerable<T> items) { throw null; }
-
-        public ref readonly T ItemRef(int index) { throw null; }
-
-        public int LastIndexOf(T item, int index, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableList<T> Remove(T value, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableList<T> Remove(T value) { throw null; }
-
-        public ImmutableList<T> RemoveAll(Predicate<T> match) { throw null; }
-
-        public ImmutableList<T> RemoveAt(int index) { throw null; }
-
-        public ImmutableList<T> RemoveRange(Generic.IEnumerable<T> items, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableList<T> RemoveRange(Generic.IEnumerable<T> items) { throw null; }
-
-        public ImmutableList<T> RemoveRange(int index, int count) { throw null; }
-
-        public ImmutableList<T> Replace(T oldValue, T newValue, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-        public ImmutableList<T> Replace(T oldValue, T newValue) { throw null; }
-
-        public ImmutableList<T> Reverse() { throw null; }
-
-        public ImmutableList<T> Reverse(int index, int count) { throw null; }
-
-        public ImmutableList<T> SetItem(int index, T value) { throw null; }
-
-        public ImmutableList<T> Sort() { throw null; }
-
-        public ImmutableList<T> Sort(Generic.IComparer<T>? comparer) { throw null; }
-
-        public ImmutableList<T> Sort(Comparison<T> comparison) { throw null; }
-
-        public ImmutableList<T> Sort(int index, int count, Generic.IComparer<T>? comparer) { throw null; }
-
-        void Generic.ICollection<T>.Add(T item) { }
-
-        void Generic.ICollection<T>.Clear() { }
-
-        bool Generic.ICollection<T>.Remove(T item) { throw null; }
-
-        Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void Generic.IList<T>.Insert(int index, T item) { }
-
-        void Generic.IList<T>.RemoveAt(int index) { }
-
-        void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        int IList.Add(object value) { throw null; }
-
-        void IList.Clear() { }
-
-        bool IList.Contains(object value) { throw null; }
-
-        int IList.IndexOf(object value) { throw null; }
-
-        void IList.Insert(int index, object value) { }
-
-        void IList.Remove(object value) { }
-
-        void IList.RemoveAt(int index) { }
-
-        IImmutableList<T> IImmutableList<T>.Add(T value) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.AddRange(Generic.IEnumerable<T> items) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Clear() { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Insert(int index, T item) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.InsertRange(int index, Generic.IEnumerable<T> items) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Remove(T value, Generic.IEqualityComparer<T> equalityComparer) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveAll(Predicate<T> match) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveAt(int index) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveRange(Generic.IEnumerable<T> items, Generic.IEqualityComparer<T> equalityComparer) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.RemoveRange(int index, int count) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.Replace(T oldValue, T newValue, Generic.IEqualityComparer<T> equalityComparer) { throw null; }
-
-        IImmutableList<T> IImmutableList<T>.SetItem(int index, T value) { throw null; }
-
-        public Builder ToBuilder() { throw null; }
-
-        public bool TrueForAll(Predicate<T> match) { throw null; }
-
-        public sealed partial class Builder : Generic.IList<T>, Generic.ICollection<T>, Generic.IEnumerable<T>, IEnumerable, IList, ICollection, Generic.IReadOnlyList<T>, Generic.IReadOnlyCollection<T>
-        {
-            internal Builder() { }
-
-            public int Count { get { throw null; } }
-
-            public T this[int index] { get { throw null; } set { } }
-
-            bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            bool IList.IsFixedSize { get { throw null; } }
-
-            bool IList.IsReadOnly { get { throw null; } }
-
-            object? IList.this[int index] { get { throw null; } set { } }
-
-            public void Add(T item) { }
-
-            public void AddRange(Generic.IEnumerable<T> items) { }
-
-            public int BinarySearch(T item, Generic.IComparer<T>? comparer) { throw null; }
-
-            public int BinarySearch(T item) { throw null; }
-
-            public int BinarySearch(int index, int count, T item, Generic.IComparer<T>? comparer) { throw null; }
-
-            public void Clear() { }
-
-            public bool Contains(T item) { throw null; }
-
-            public ImmutableList<TOutput> ConvertAll<TOutput>(Func<T, TOutput> converter) { throw null; }
-
-            public void CopyTo(T[] array, int arrayIndex) { }
-
-            public void CopyTo(T[] array) { }
-
-            public void CopyTo(int index, T[] array, int arrayIndex, int count) { }
-
-            public bool Exists(Predicate<T> match) { throw null; }
-
-            public T? Find(Predicate<T> match) { throw null; }
-
-            public ImmutableList<T> FindAll(Predicate<T> match) { throw null; }
-
-            public int FindIndex(int startIndex, int count, Predicate<T> match) { throw null; }
-
-            public int FindIndex(int startIndex, Predicate<T> match) { throw null; }
-
-            public int FindIndex(Predicate<T> match) { throw null; }
-
-            public T? FindLast(Predicate<T> match) { throw null; }
-
-            public int FindLastIndex(int startIndex, int count, Predicate<T> match) { throw null; }
-
-            public int FindLastIndex(int startIndex, Predicate<T> match) { throw null; }
-
-            public int FindLastIndex(Predicate<T> match) { throw null; }
-
-            public void ForEach(Action<T> action) { }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            public ImmutableList<T> GetRange(int index, int count) { throw null; }
-
-            public int IndexOf(T item, int index, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-            public int IndexOf(T item, int index, int count) { throw null; }
-
-            public int IndexOf(T item, int index) { throw null; }
-
-            public int IndexOf(T item) { throw null; }
-
-            public void Insert(int index, T item) { }
-
-            public void InsertRange(int index, Generic.IEnumerable<T> items) { }
-
-            public ref readonly T ItemRef(int index) { throw null; }
-
-            public int LastIndexOf(T item, int startIndex, int count, Generic.IEqualityComparer<T>? equalityComparer) { throw null; }
-
-            public int LastIndexOf(T item, int startIndex, int count) { throw null; }
-
-            public int LastIndexOf(T item, int startIndex) { throw null; }
-
-            public int LastIndexOf(T item) { throw null; }
-
-            public bool Remove(T item) { throw null; }
-
-            public int RemoveAll(Predicate<T> match) { throw null; }
-
-            public void RemoveAt(int index) { }
-
-            public void Reverse() { }
-
-            public void Reverse(int index, int count) { }
-
-            public void Sort() { }
-
-            public void Sort(Generic.IComparer<T>? comparer) { }
-
-            public void Sort(Comparison<T> comparison) { }
-
-            public void Sort(int index, int count, Generic.IComparer<T>? comparer) { }
-
-            Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            int IList.Add(object value) { throw null; }
-
-            void IList.Clear() { }
-
-            bool IList.Contains(object value) { throw null; }
-
-            int IList.IndexOf(object value) { throw null; }
-
-            void IList.Insert(int index, object value) { }
-
-            void IList.Remove(object value) { }
-
-            public ImmutableList<T> ToImmutable() { throw null; }
-
-            public bool TrueForAll(Predicate<T> match) { throw null; }
-        }
-
-        public partial struct Enumerator : Generic.IEnumerator<T>, IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public T Current { get { throw null; } }
-
-            object? IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            public void Reset() { }
-        }
-    }
-
-    public static partial class ImmutableQueue
-    {
-        public static ImmutableQueue<T> Create<T>() { throw null; }
-
-        public static ImmutableQueue<T> Create<T>(T item) { throw null; }
-
-        public static ImmutableQueue<T> Create<T>(params T[] items) { throw null; }
-
-        public static ImmutableQueue<T> CreateRange<T>(Generic.IEnumerable<T> items) { throw null; }
-
-        public static IImmutableQueue<T> Dequeue<T>(this IImmutableQueue<T> queue, out T value) { throw null; }
-    }
-
-    public sealed partial class ImmutableQueue<T> : IImmutableQueue<T>, Generic.IEnumerable<T>, IEnumerable
-    {
-        internal ImmutableQueue() { }
-
-        public static ImmutableQueue<T> Empty { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public ImmutableQueue<T> Clear() { throw null; }
-
-        public ImmutableQueue<T> Dequeue() { throw null; }
-
-        public ImmutableQueue<T> Dequeue(out T value) { throw null; }
-
-        public ImmutableQueue<T> Enqueue(T value) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public T Peek() { throw null; }
-
-        public ref readonly T PeekRef() { throw null; }
-
-        Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        IImmutableQueue<T> IImmutableQueue<T>.Clear() { throw null; }
-
-        IImmutableQueue<T> IImmutableQueue<T>.Dequeue() { throw null; }
-
-        IImmutableQueue<T> IImmutableQueue<T>.Enqueue(T value) { throw null; }
-
-        public partial struct Enumerator
-        {
-            private ImmutableQueue<T> _originalQueue;
-            private ImmutableStack<T> _remainingForwardsStack;
-            private ImmutableStack<T> _remainingBackwardsStack;
-            private object _dummy;
-            private int _dummyPrimitive;
-            public T Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-        }
-    }
-
-    public static partial class ImmutableSortedDictionary
-    {
-        public static ImmutableSortedDictionary<TKey, TValue> Create<TKey, TValue>() { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> Create<TKey, TValue>(Generic.IComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> Create<TKey, TValue>(Generic.IComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>() { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>(Generic.IComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue>.Builder CreateBuilder<TKey, TValue>(Generic.IComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> CreateRange<TKey, TValue>(Generic.IComparer<TKey>? keyComparer, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> CreateRange<TKey, TValue>(Generic.IComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> CreateRange<TKey, TValue>(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TKey, TValue>(this Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> source, Generic.IComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TKey, TValue>(this Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> source, Generic.IComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TKey, TValue>(this Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> source) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TKey, TValue>(this ImmutableSortedDictionary<TKey, TValue>.Builder builder) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TSource, TKey, TValue>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector, Generic.IComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TSource, TKey, TValue>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector, Generic.IComparer<TKey>? keyComparer) { throw null; }
-
-        public static ImmutableSortedDictionary<TKey, TValue> ToImmutableSortedDictionary<TSource, TKey, TValue>(this Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> elementSelector) { throw null; }
-    }
-
-    public sealed partial class ImmutableSortedDictionary<TKey, TValue> : IImmutableDictionary<TKey, TValue>, Generic.IReadOnlyDictionary<TKey, TValue>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, IEnumerable, Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IDictionary<TKey, TValue>, Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>, IDictionary, ICollection
-    {
-        internal ImmutableSortedDictionary() { }
-
-        public static readonly ImmutableSortedDictionary<TKey, TValue> Empty;
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public TValue this[TKey key] { get { throw null; } }
-
-        public Generic.IComparer<TKey> KeyComparer { get { throw null; } }
-
-        public Generic.IEnumerable<TKey> Keys { get { throw null; } }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-        TValue Generic.IDictionary<TKey, TValue>.this[TKey key] { get { throw null; } set { } }
-
-        Generic.ICollection<TKey> Generic.IDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        Generic.ICollection<TValue> Generic.IDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IDictionary.IsFixedSize { get { throw null; } }
-
-        bool IDictionary.IsReadOnly { get { throw null; } }
-
-        object? IDictionary.this[object key] { get { throw null; } set { } }
-
-        ICollection IDictionary.Keys { get { throw null; } }
-
-        ICollection IDictionary.Values { get { throw null; } }
-
-        public Generic.IEqualityComparer<TValue> ValueComparer { get { throw null; } }
-
-        public Generic.IEnumerable<TValue> Values { get { throw null; } }
-
-        public ImmutableSortedDictionary<TKey, TValue> Add(TKey key, TValue value) { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> AddRange(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> Clear() { throw null; }
-
-        public bool Contains(Generic.KeyValuePair<TKey, TValue> pair) { throw null; }
-
-        public bool ContainsKey(TKey key) { throw null; }
-
-        public bool ContainsValue(TValue value) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> Remove(TKey value) { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> RemoveRange(Generic.IEnumerable<TKey> keys) { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> SetItem(TKey key, TValue value) { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> SetItems(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Add(Generic.KeyValuePair<TKey, TValue> item) { }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Clear() { }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.CopyTo(Generic.KeyValuePair<TKey, TValue>[] array, int arrayIndex) { }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Remove(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-        void Generic.IDictionary<TKey, TValue>.Add(TKey key, TValue value) { }
-
-        bool Generic.IDictionary<TKey, TValue>.Remove(TKey key) { throw null; }
-
-        Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>> Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        void IDictionary.Add(object key, object value) { }
-
-        void IDictionary.Clear() { }
-
-        bool IDictionary.Contains(object key) { throw null; }
-
-        IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-        void IDictionary.Remove(object key) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.Add(TKey key, TValue value) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.AddRange(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> pairs) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.Clear() { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.Remove(TKey key) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.RemoveRange(Generic.IEnumerable<TKey> keys) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.SetItem(TKey key, TValue value) { throw null; }
-
-        IImmutableDictionary<TKey, TValue> IImmutableDictionary<TKey, TValue>.SetItems(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { throw null; }
-
-        public Builder ToBuilder() { throw null; }
-
-        public bool TryGetKey(TKey equalKey, out TKey actualKey) { throw null; }
-
-        public bool TryGetValue(TKey key, out TValue value) { throw null; }
-
-        public ref readonly TValue ValueRef(TKey key) { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> WithComparers(Generic.IComparer<TKey>? keyComparer, Generic.IEqualityComparer<TValue>? valueComparer) { throw null; }
-
-        public ImmutableSortedDictionary<TKey, TValue> WithComparers(Generic.IComparer<TKey>? keyComparer) { throw null; }
-
-        public sealed partial class Builder : Generic.IDictionary<TKey, TValue>, Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, IEnumerable, Generic.IReadOnlyDictionary<TKey, TValue>, Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>, IDictionary, ICollection
-        {
-            internal Builder() { }
-
-            public int Count { get { throw null; } }
-
-            public TValue this[TKey key] { get { throw null; } set { } }
-
-            public Generic.IComparer<TKey> KeyComparer { get { throw null; } set { } }
-
-            public Generic.IEnumerable<TKey> Keys { get { throw null; } }
-
-            bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-            Generic.ICollection<TKey> Generic.IDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-            Generic.ICollection<TValue> Generic.IDictionary<TKey, TValue>.Values { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            bool IDictionary.IsFixedSize { get { throw null; } }
-
-            bool IDictionary.IsReadOnly { get { throw null; } }
-
-            object? IDictionary.this[object key] { get { throw null; } set { } }
-
-            ICollection IDictionary.Keys { get { throw null; } }
-
-            ICollection IDictionary.Values { get { throw null; } }
-
-            public Generic.IEqualityComparer<TValue> ValueComparer { get { throw null; } set { } }
-
-            public Generic.IEnumerable<TValue> Values { get { throw null; } }
-
-            public void Add(TKey key, TValue value) { }
-
-            public void Add(Generic.KeyValuePair<TKey, TValue> item) { }
-
-            public void AddRange(Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>> items) { }
-
-            public void Clear() { }
-
-            public bool Contains(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-            public bool ContainsKey(TKey key) { throw null; }
-
-            public bool ContainsValue(TValue value) { throw null; }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            public TValue GetValueOrDefault(TKey key, TValue defaultValue) { throw null; }
-
-            public TValue? GetValueOrDefault(TKey key) { throw null; }
-
-            public bool Remove(TKey key) { throw null; }
-
-            public bool Remove(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-            public void RemoveRange(Generic.IEnumerable<TKey> keys) { }
-
-            void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.CopyTo(Generic.KeyValuePair<TKey, TValue>[] array, int arrayIndex) { }
-
-            Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>> Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int index) { }
-
-            void IDictionary.Add(object key, object value) { }
-
-            bool IDictionary.Contains(object key) { throw null; }
-
-            IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-            void IDictionary.Remove(object key) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public ImmutableSortedDictionary<TKey, TValue> ToImmutable() { throw null; }
-
-            public bool TryGetKey(TKey equalKey, out TKey actualKey) { throw null; }
-
-            public bool TryGetValue(TKey key, out TValue value) { throw null; }
-
-            public ref readonly TValue ValueRef(TKey key) { throw null; }
-        }
-
-        public partial struct Enumerator : Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>>, IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public Generic.KeyValuePair<TKey, TValue> Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            public void Reset() { }
-        }
-    }
-
-    public static partial class ImmutableSortedSet
-    {
-        public static ImmutableSortedSet<T> Create<T>() { throw null; }
-
-        public static ImmutableSortedSet<T> Create<T>(T item) { throw null; }
-
-        public static ImmutableSortedSet<T> Create<T>(params T[] items) { throw null; }
-
-        public static ImmutableSortedSet<T> Create<T>(Generic.IComparer<T>? comparer, T item) { throw null; }
-
-        public static ImmutableSortedSet<T> Create<T>(Generic.IComparer<T>? comparer, params T[] items) { throw null; }
-
-        public static ImmutableSortedSet<T> Create<T>(Generic.IComparer<T>? comparer) { throw null; }
-
-        public static ImmutableSortedSet<T>.Builder CreateBuilder<T>() { throw null; }
-
-        public static ImmutableSortedSet<T>.Builder CreateBuilder<T>(Generic.IComparer<T>? comparer) { throw null; }
-
-        public static ImmutableSortedSet<T> CreateRange<T>(Generic.IComparer<T>? comparer, Generic.IEnumerable<T> items) { throw null; }
-
-        public static ImmutableSortedSet<T> CreateRange<T>(Generic.IEnumerable<T> items) { throw null; }
-
-        public static ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(this Generic.IEnumerable<TSource> source, Generic.IComparer<TSource>? comparer) { throw null; }
-
-        public static ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(this Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource>(this ImmutableSortedSet<TSource>.Builder builder) { throw null; }
-    }
-
-    public sealed partial class ImmutableSortedSet<T> : IImmutableSet<T>, Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.IReadOnlyList<T>, Generic.IList<T>, Generic.ICollection<T>, Generic.ISet<T>, IList, ICollection
-    {
-        internal ImmutableSortedSet() { }
-
-        public static readonly ImmutableSortedSet<T> Empty;
-        public int Count { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public T this[int index] { get { throw null; } }
-
-        public Generic.IComparer<T> KeyComparer { get { throw null; } }
-
-        public T? Max { get { throw null; } }
-
-        public T? Min { get { throw null; } }
-
-        bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        T Generic.IList<T>.this[int index] { get { throw null; } set { } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IList.IsFixedSize { get { throw null; } }
-
-        bool IList.IsReadOnly { get { throw null; } }
-
-        object? IList.this[int index] { get { throw null; } set { } }
-
-        public ImmutableSortedSet<T> Add(T value) { throw null; }
-
-        public ImmutableSortedSet<T> Clear() { throw null; }
-
-        public bool Contains(T value) { throw null; }
-
-        public ImmutableSortedSet<T> Except(Generic.IEnumerable<T> other) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public int IndexOf(T item) { throw null; }
-
-        public ImmutableSortedSet<T> Intersect(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsProperSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsProperSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public bool IsSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-        public ref readonly T ItemRef(int index) { throw null; }
-
-        public bool Overlaps(Generic.IEnumerable<T> other) { throw null; }
-
-        public ImmutableSortedSet<T> Remove(T value) { throw null; }
-
-        public Generic.IEnumerable<T> Reverse() { throw null; }
-
-        public bool SetEquals(Generic.IEnumerable<T> other) { throw null; }
-
-        public ImmutableSortedSet<T> SymmetricExcept(Generic.IEnumerable<T> other) { throw null; }
-
-        void Generic.ICollection<T>.Add(T item) { }
-
-        void Generic.ICollection<T>.Clear() { }
-
-        void Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex) { }
-
-        bool Generic.ICollection<T>.Remove(T item) { throw null; }
-
-        Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void Generic.IList<T>.Insert(int index, T item) { }
-
-        void Generic.IList<T>.RemoveAt(int index) { }
-
-        bool Generic.ISet<T>.Add(T item) { throw null; }
-
-        void Generic.ISet<T>.ExceptWith(Generic.IEnumerable<T> other) { }
-
-        void Generic.ISet<T>.IntersectWith(Generic.IEnumerable<T> other) { }
-
-        void Generic.ISet<T>.SymmetricExceptWith(Generic.IEnumerable<T> other) { }
-
-        void Generic.ISet<T>.UnionWith(Generic.IEnumerable<T> other) { }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        int IList.Add(object value) { throw null; }
-
-        void IList.Clear() { }
-
-        bool IList.Contains(object value) { throw null; }
-
-        int IList.IndexOf(object value) { throw null; }
-
-        void IList.Insert(int index, object value) { }
-
-        void IList.Remove(object value) { }
-
-        void IList.RemoveAt(int index) { }
-
-        IImmutableSet<T> IImmutableSet<T>.Add(T value) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Clear() { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Except(Generic.IEnumerable<T> other) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Intersect(Generic.IEnumerable<T> other) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Remove(T value) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.SymmetricExcept(Generic.IEnumerable<T> other) { throw null; }
-
-        IImmutableSet<T> IImmutableSet<T>.Union(Generic.IEnumerable<T> other) { throw null; }
-
-        public Builder ToBuilder() { throw null; }
-
-        public bool TryGetValue(T equalValue, out T actualValue) { throw null; }
-
-        public ImmutableSortedSet<T> Union(Generic.IEnumerable<T> other) { throw null; }
-
-        public ImmutableSortedSet<T> WithComparer(Generic.IComparer<T>? comparer) { throw null; }
-
-        public sealed partial class Builder : Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.ISet<T>, Generic.ICollection<T>, ICollection
-        {
-            internal Builder() { }
-
-            public int Count { get { throw null; } }
-
-            public T this[int index] { get { throw null; } }
-
-            public Generic.IComparer<T> KeyComparer { get { throw null; } set { } }
-
-            public T? Max { get { throw null; } }
-
-            public T? Min { get { throw null; } }
-
-            bool Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            public bool Add(T item) { throw null; }
-
-            public void Clear() { }
-
-            public bool Contains(T item) { throw null; }
-
-            public void ExceptWith(Generic.IEnumerable<T> other) { }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            public void IntersectWith(Generic.IEnumerable<T> other) { }
-
-            public bool IsProperSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool IsProperSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool IsSubsetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool IsSupersetOf(Generic.IEnumerable<T> other) { throw null; }
-
-            public ref readonly T ItemRef(int index) { throw null; }
-
-            public bool Overlaps(Generic.IEnumerable<T> other) { throw null; }
-
-            public bool Remove(T item) { throw null; }
-
-            public Generic.IEnumerable<T> Reverse() { throw null; }
-
-            public bool SetEquals(Generic.IEnumerable<T> other) { throw null; }
-
-            public void SymmetricExceptWith(Generic.IEnumerable<T> other) { }
-
-            void Generic.ICollection<T>.Add(T item) { }
-
-            void Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex) { }
-
-            Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public ImmutableSortedSet<T> ToImmutable() { throw null; }
-
-            public bool TryGetValue(T equalValue, out T actualValue) { throw null; }
-
-            public void UnionWith(Generic.IEnumerable<T> other) { }
-        }
-
-        public partial struct Enumerator : Generic.IEnumerator<T>, IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public T Current { get { throw null; } }
-
-            object? IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            public void Reset() { }
-        }
-    }
-
-    public static partial class ImmutableStack
-    {
-        public static ImmutableStack<T> Create<T>() { throw null; }
-
-        public static ImmutableStack<T> Create<T>(T item) { throw null; }
-
-        public static ImmutableStack<T> Create<T>(params T[] items) { throw null; }
-
-        public static ImmutableStack<T> CreateRange<T>(Generic.IEnumerable<T> items) { throw null; }
-
-        public static IImmutableStack<T> Pop<T>(this IImmutableStack<T> stack, out T value) { throw null; }
-    }
-
-    public sealed partial class ImmutableStack<T> : IImmutableStack<T>, Generic.IEnumerable<T>, IEnumerable
-    {
-        internal ImmutableStack() { }
-
-        public static ImmutableStack<T> Empty { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public ImmutableStack<T> Clear() { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public T Peek() { throw null; }
-
-        public ref readonly T PeekRef() { throw null; }
-
-        public ImmutableStack<T> Pop() { throw null; }
-
-        public ImmutableStack<T> Pop(out T value) { throw null; }
-
-        public ImmutableStack<T> Push(T value) { throw null; }
-
-        Generic.IEnumerator<T> Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        IImmutableStack<T> IImmutableStack<T>.Clear() { throw null; }
-
-        IImmutableStack<T> IImmutableStack<T>.Pop() { throw null; }
-
-        IImmutableStack<T> IImmutableStack<T>.Push(T value) { throw null; }
-
-        public partial struct Enumerator
-        {
-            private ImmutableStack<T> _originalStack;
-            private ImmutableStack<T> _remainingStack;
-            private object _dummy;
-            private int _dummyPrimitive;
-            public T Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-        }
-    }
-}
-
-namespace System.Linq
-{
-    public static partial class ImmutableArrayExtensions
-    {
-        public static T? Aggregate<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, T, T> func) { throw null; }
-
-        public static TAccumulate Aggregate<TAccumulate, T>(this Collections.Immutable.ImmutableArray<T> immutableArray, TAccumulate seed, Func<TAccumulate, T, TAccumulate> func) { throw null; }
-
-        public static TResult Aggregate<TAccumulate, TResult, T>(this Collections.Immutable.ImmutableArray<T> immutableArray, TAccumulate seed, Func<TAccumulate, T, TAccumulate> func, Func<TAccumulate, TResult> resultSelector) { throw null; }
-
-        public static bool All<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static bool Any<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static bool Any<T>(this Collections.Immutable.ImmutableArray<T>.Builder builder) { throw null; }
-
-        public static bool Any<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static T ElementAt<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, int index) { throw null; }
-
-        public static T? ElementAtOrDefault<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, int index) { throw null; }
-
-        public static T First<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static T First<T>(this Collections.Immutable.ImmutableArray<T>.Builder builder) { throw null; }
-
-        public static T First<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static T? FirstOrDefault<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static T? FirstOrDefault<T>(this Collections.Immutable.ImmutableArray<T>.Builder builder) { throw null; }
-
-        public static T? FirstOrDefault<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static T Last<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static T Last<T>(this Collections.Immutable.ImmutableArray<T>.Builder builder) { throw null; }
-
-        public static T Last<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static T? LastOrDefault<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static T? LastOrDefault<T>(this Collections.Immutable.ImmutableArray<T>.Builder builder) { throw null; }
-
-        public static T? LastOrDefault<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Select<T, TResult>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, TResult> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this Collections.Immutable.ImmutableArray<TSource> immutableArray, Func<TSource, Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector) { throw null; }
-
-        public static bool SequenceEqual<TDerived, TBase>(this Collections.Immutable.ImmutableArray<TBase> immutableArray, Collections.Generic.IEnumerable<TDerived> items, Collections.Generic.IEqualityComparer<TBase>? comparer = null)
-            where TDerived : TBase { throw null; }
-
-        public static bool SequenceEqual<TDerived, TBase>(this Collections.Immutable.ImmutableArray<TBase> immutableArray, Collections.Immutable.ImmutableArray<TDerived> items, Collections.Generic.IEqualityComparer<TBase>? comparer = null)
-            where TDerived : TBase { throw null; }
-
-        public static bool SequenceEqual<TDerived, TBase>(this Collections.Immutable.ImmutableArray<TBase> immutableArray, Collections.Immutable.ImmutableArray<TDerived> items, Func<TBase, TBase, bool> predicate)
-            where TDerived : TBase { throw null; }
-
-        public static T Single<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static T Single<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static T? SingleOrDefault<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-
-        public static T? SingleOrDefault<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static T[] ToArray<T>(this Collections.Immutable.ImmutableArray<T> immutableArray) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, T> ToDictionary<TKey, T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey>? comparer) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, T> ToDictionary<TKey, T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, TKey> keySelector) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TKey, TElement, T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, Func<T, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey>? comparer) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TKey, TElement, T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, TKey> keySelector, Func<T, TElement> elementSelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<T> Where<T>(this Collections.Immutable.ImmutableArray<T> immutableArray, Func<T, bool> predicate) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.collections.immutable/5.0.0/system.collections.immutable.nuspec b/src/referencePackages/src/system.collections.immutable/5.0.0/system.collections.immutable.nuspec
index a151016a..bb915bc9 100644
--- a/src/referencePackages/src/system.collections.immutable/5.0.0/system.collections.immutable.nuspec
+++ b/src/referencePackages/src/system.collections.immutable/5.0.0/system.collections.immutable.nuspec
@@ -35,13 +35,6 @@ System.Collections.Immutable.ImmutableStack&lt;T&gt;</description>
     <serviceable>true</serviceable>
     <repository type="git" url="git://github.com/dotnet/runtime" commit="cf258a14b70ad9069470a108f13765e0e5988f51" />
     <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-        <dependency id="System.Memory" version="4.5.4" />
-      </group>
       <group targetFramework=".NETStandard2.0">
         <dependency id="System.Memory" version="4.5.4" />
       </group>
diff --git a/src/referencePackages/src/system.collections/4.3.0/System.Collections.4.3.0.csproj b/src/referencePackages/src/system.collections/4.3.0/System.Collections.4.3.0.csproj
deleted file mode 100644
index c6376327..00000000
--- a/src/referencePackages/src/system.collections/4.3.0/System.Collections.4.3.0.csproj
+++ /dev/null
@@ -1,20 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Collections</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.collections/4.3.0/ref/netstandard1.0/System.Collections.cs b/src/referencePackages/src/system.collections/4.3.0/ref/netstandard1.0/System.Collections.cs
deleted file mode 100644
index 093410fb..00000000
--- a/src/referencePackages/src/system.collections/4.3.0/ref/netstandard1.0/System.Collections.cs
+++ /dev/null
@@ -1,972 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyTitle("System.Collections.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.Collections.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Collections.dll")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Collections
-{
-    public sealed partial class BitArray : ICollection, IEnumerable
-    {
-        public BitArray(bool[] values) { }
-
-        public BitArray(byte[] bytes) { }
-
-        public BitArray(BitArray bits) { }
-
-        public BitArray(int length, bool defaultValue) { }
-
-        public BitArray(int length) { }
-
-        public BitArray(int[] values) { }
-
-        public bool this[int index] { get { throw null; } set { } }
-
-        public int Length { get { throw null; } set { } }
-
-        int ICollection.Count { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public BitArray And(BitArray value) { throw null; }
-
-        public bool Get(int index) { throw null; }
-
-        public IEnumerator GetEnumerator() { throw null; }
-
-        public BitArray Not() { throw null; }
-
-        public BitArray Or(BitArray value) { throw null; }
-
-        public void Set(int index, bool value) { }
-
-        public void SetAll(bool value) { }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        public BitArray Xor(BitArray value) { throw null; }
-    }
-
-    public static partial class StructuralComparisons
-    {
-        public static IComparer StructuralComparer { get { throw null; } }
-
-        public static IEqualityComparer StructuralEqualityComparer { get { throw null; } }
-    }
-}
-
-namespace System.Collections.Generic
-{
-    public abstract partial class Comparer<T> : IComparer<T>, IComparer
-    {
-        public static Comparer<T> Default { get { throw null; } }
-
-        public abstract int Compare(T x, T y);
-        public static Comparer<T> Create(Comparison<T> comparison) { throw null; }
-
-        int IComparer.Compare(object x, object y) { throw null; }
-    }
-
-    public partial class Dictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable
-    {
-        public Dictionary() { }
-
-        public Dictionary(IDictionary<TKey, TValue> dictionary, IEqualityComparer<TKey> comparer) { }
-
-        public Dictionary(IDictionary<TKey, TValue> dictionary) { }
-
-        public Dictionary(IEqualityComparer<TKey> comparer) { }
-
-        public Dictionary(int capacity, IEqualityComparer<TKey> comparer) { }
-
-        public Dictionary(int capacity) { }
-
-        public IEqualityComparer<TKey> Comparer { get { throw null; } }
-
-        public int Count { get { throw null; } }
-
-        public TValue this[TKey key] { get { throw null; } set { } }
-
-        public KeyCollection Keys { get { throw null; } }
-
-        bool ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-        ICollection<TKey> IDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        ICollection<TValue> IDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        IEnumerable<TKey> IReadOnlyDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        IEnumerable<TValue> IReadOnlyDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IDictionary.IsFixedSize { get { throw null; } }
-
-        bool IDictionary.IsReadOnly { get { throw null; } }
-
-        object IDictionary.this[object key] { get { throw null; } set { } }
-
-        ICollection IDictionary.Keys { get { throw null; } }
-
-        ICollection IDictionary.Values { get { throw null; } }
-
-        public ValueCollection Values { get { throw null; } }
-
-        public void Add(TKey key, TValue value) { }
-
-        public void Clear() { }
-
-        public bool ContainsKey(TKey key) { throw null; }
-
-        public bool ContainsValue(TValue value) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public bool Remove(TKey key) { throw null; }
-
-        void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair) { }
-
-        bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair) { throw null; }
-
-        void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index) { }
-
-        bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair) { throw null; }
-
-        IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        void IDictionary.Add(object key, object value) { }
-
-        bool IDictionary.Contains(object key) { throw null; }
-
-        IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-        void IDictionary.Remove(object key) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public bool TryGetValue(TKey key, out TValue value) { throw null; }
-
-        public partial struct Enumerator : IEnumerator<KeyValuePair<TKey, TValue>>, IDictionaryEnumerator, IEnumerator, IDisposable
-        {
-            public KeyValuePair<TKey, TValue> Current { get { throw null; } }
-
-            DictionaryEntry IDictionaryEnumerator.Entry { get { throw null; } }
-
-            object IDictionaryEnumerator.Key { get { throw null; } }
-
-            object IDictionaryEnumerator.Value { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-
-        public sealed partial class KeyCollection : ICollection<TKey>, IEnumerable<TKey>, ICollection, IEnumerable
-        {
-            public KeyCollection(Dictionary<TKey, TValue> dictionary) { }
-
-            public int Count { get { throw null; } }
-
-            bool ICollection<TKey>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            public void CopyTo(TKey[] array, int index) { }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            void ICollection<TKey>.Add(TKey item) { }
-
-            void ICollection<TKey>.Clear() { }
-
-            bool ICollection<TKey>.Contains(TKey item) { throw null; }
-
-            bool ICollection<TKey>.Remove(TKey item) { throw null; }
-
-            IEnumerator<TKey> IEnumerable<TKey>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int index) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public partial struct Enumerator : IEnumerator<TKey>, IEnumerator, IDisposable
-            {
-                public TKey Current { get { throw null; } }
-
-                object IEnumerator.Current { get { throw null; } }
-
-                public void Dispose() { }
-
-                public bool MoveNext() { throw null; }
-
-                void IEnumerator.Reset() { }
-            }
-        }
-
-        public sealed partial class ValueCollection : ICollection<TValue>, IEnumerable<TValue>, ICollection, IEnumerable
-        {
-            public ValueCollection(Dictionary<TKey, TValue> dictionary) { }
-
-            public int Count { get { throw null; } }
-
-            bool ICollection<TValue>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            public void CopyTo(TValue[] array, int index) { }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            void ICollection<TValue>.Add(TValue item) { }
-
-            void ICollection<TValue>.Clear() { }
-
-            bool ICollection<TValue>.Contains(TValue item) { throw null; }
-
-            bool ICollection<TValue>.Remove(TValue item) { throw null; }
-
-            IEnumerator<TValue> IEnumerable<TValue>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int index) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public partial struct Enumerator : IEnumerator<TValue>, IEnumerator, IDisposable
-            {
-                public TValue Current { get { throw null; } }
-
-                object IEnumerator.Current { get { throw null; } }
-
-                public void Dispose() { }
-
-                public bool MoveNext() { throw null; }
-
-                void IEnumerator.Reset() { }
-            }
-        }
-    }
-
-    public abstract partial class EqualityComparer<T> : IEqualityComparer<T>, IEqualityComparer
-    {
-        public static EqualityComparer<T> Default { get { throw null; } }
-
-        public abstract bool Equals(T x, T y);
-        public abstract int GetHashCode(T obj);
-        bool IEqualityComparer.Equals(object x, object y) { throw null; }
-
-        int IEqualityComparer.GetHashCode(object obj) { throw null; }
-    }
-
-    public partial class HashSet<T> : ISet<T>, ICollection<T>, IEnumerable<T>, IEnumerable
-    {
-        public HashSet() { }
-
-        public HashSet(IEnumerable<T> collection, IEqualityComparer<T> comparer) { }
-
-        public HashSet(IEnumerable<T> collection) { }
-
-        public HashSet(IEqualityComparer<T> comparer) { }
-
-        public IEqualityComparer<T> Comparer { get { throw null; } }
-
-        public int Count { get { throw null; } }
-
-        bool ICollection<T>.IsReadOnly { get { throw null; } }
-
-        public bool Add(T item) { throw null; }
-
-        public void Clear() { }
-
-        public bool Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, int arrayIndex, int count) { }
-
-        public void CopyTo(T[] array, int arrayIndex) { }
-
-        public void CopyTo(T[] array) { }
-
-        public void ExceptWith(IEnumerable<T> other) { }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public void IntersectWith(IEnumerable<T> other) { }
-
-        public bool IsProperSubsetOf(IEnumerable<T> other) { throw null; }
-
-        public bool IsProperSupersetOf(IEnumerable<T> other) { throw null; }
-
-        public bool IsSubsetOf(IEnumerable<T> other) { throw null; }
-
-        public bool IsSupersetOf(IEnumerable<T> other) { throw null; }
-
-        public bool Overlaps(IEnumerable<T> other) { throw null; }
-
-        public bool Remove(T item) { throw null; }
-
-        public int RemoveWhere(Predicate<T> match) { throw null; }
-
-        public bool SetEquals(IEnumerable<T> other) { throw null; }
-
-        public void SymmetricExceptWith(IEnumerable<T> other) { }
-
-        void ICollection<T>.Add(T item) { }
-
-        IEnumerator<T> IEnumerable<T>.GetEnumerator() { throw null; }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public void TrimExcess() { }
-
-        public void UnionWith(IEnumerable<T> other) { }
-
-        public partial struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
-        {
-            public T Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-    }
-
-    public sealed partial class LinkedListNode<T>
-    {
-        public LinkedListNode(T value) { }
-
-        public LinkedList<T> List { get { throw null; } }
-
-        public LinkedListNode<T> Next { get { throw null; } }
-
-        public LinkedListNode<T> Previous { get { throw null; } }
-
-        public T Value { get { throw null; } set { } }
-    }
-
-    public partial class LinkedList<T> : ICollection<T>, IEnumerable<T>, ICollection, IEnumerable
-    {
-        public LinkedList() { }
-
-        public LinkedList(IEnumerable<T> collection) { }
-
-        public int Count { get { throw null; } }
-
-        public LinkedListNode<T> First { get { throw null; } }
-
-        public LinkedListNode<T> Last { get { throw null; } }
-
-        bool ICollection<T>.IsReadOnly { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public LinkedListNode<T> AddAfter(LinkedListNode<T> node, T value) { throw null; }
-
-        public void AddAfter(LinkedListNode<T> node, LinkedListNode<T> newNode) { }
-
-        public LinkedListNode<T> AddBefore(LinkedListNode<T> node, T value) { throw null; }
-
-        public void AddBefore(LinkedListNode<T> node, LinkedListNode<T> newNode) { }
-
-        public LinkedListNode<T> AddFirst(T value) { throw null; }
-
-        public void AddFirst(LinkedListNode<T> node) { }
-
-        public LinkedListNode<T> AddLast(T value) { throw null; }
-
-        public void AddLast(LinkedListNode<T> node) { }
-
-        public void Clear() { }
-
-        public bool Contains(T value) { throw null; }
-
-        public void CopyTo(T[] array, int index) { }
-
-        public LinkedListNode<T> Find(T value) { throw null; }
-
-        public LinkedListNode<T> FindLast(T value) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public bool Remove(T value) { throw null; }
-
-        public void Remove(LinkedListNode<T> node) { }
-
-        public void RemoveFirst() { }
-
-        public void RemoveLast() { }
-
-        void ICollection<T>.Add(T value) { }
-
-        IEnumerator<T> IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
-        {
-            public T Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-    }
-
-    public partial class List<T> : IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable
-    {
-        public List() { }
-
-        public List(IEnumerable<T> collection) { }
-
-        public List(int capacity) { }
-
-        public int Capacity { get { throw null; } set { } }
-
-        public int Count { get { throw null; } }
-
-        public T this[int index] { get { throw null; } set { } }
-
-        bool ICollection<T>.IsReadOnly { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IList.IsFixedSize { get { throw null; } }
-
-        bool IList.IsReadOnly { get { throw null; } }
-
-        object IList.this[int index] { get { throw null; } set { } }
-
-        public void Add(T item) { }
-
-        public void AddRange(IEnumerable<T> collection) { }
-
-        public int BinarySearch(T item, IComparer<T> comparer) { throw null; }
-
-        public int BinarySearch(T item) { throw null; }
-
-        public int BinarySearch(int index, int count, T item, IComparer<T> comparer) { throw null; }
-
-        public void Clear() { }
-
-        public bool Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, int arrayIndex) { }
-
-        public void CopyTo(T[] array) { }
-
-        public void CopyTo(int index, T[] array, int arrayIndex, int count) { }
-
-        public bool Exists(Predicate<T> match) { throw null; }
-
-        public T Find(Predicate<T> match) { throw null; }
-
-        public List<T> FindAll(Predicate<T> match) { throw null; }
-
-        public int FindIndex(int startIndex, int count, Predicate<T> match) { throw null; }
-
-        public int FindIndex(int startIndex, Predicate<T> match) { throw null; }
-
-        public int FindIndex(Predicate<T> match) { throw null; }
-
-        public T FindLast(Predicate<T> match) { throw null; }
-
-        public int FindLastIndex(int startIndex, int count, Predicate<T> match) { throw null; }
-
-        public int FindLastIndex(int startIndex, Predicate<T> match) { throw null; }
-
-        public int FindLastIndex(Predicate<T> match) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public List<T> GetRange(int index, int count) { throw null; }
-
-        public int IndexOf(T item, int index, int count) { throw null; }
-
-        public int IndexOf(T item, int index) { throw null; }
-
-        public int IndexOf(T item) { throw null; }
-
-        public void Insert(int index, T item) { }
-
-        public void InsertRange(int index, IEnumerable<T> collection) { }
-
-        public int LastIndexOf(T item, int index, int count) { throw null; }
-
-        public int LastIndexOf(T item, int index) { throw null; }
-
-        public int LastIndexOf(T item) { throw null; }
-
-        public bool Remove(T item) { throw null; }
-
-        public int RemoveAll(Predicate<T> match) { throw null; }
-
-        public void RemoveAt(int index) { }
-
-        public void RemoveRange(int index, int count) { }
-
-        public void Reverse() { }
-
-        public void Reverse(int index, int count) { }
-
-        public void Sort() { }
-
-        public void Sort(IComparer<T> comparer) { }
-
-        public void Sort(Comparison<T> comparison) { }
-
-        public void Sort(int index, int count, IComparer<T> comparer) { }
-
-        IEnumerator<T> IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        int IList.Add(object item) { throw null; }
-
-        bool IList.Contains(object item) { throw null; }
-
-        int IList.IndexOf(object item) { throw null; }
-
-        void IList.Insert(int index, object item) { }
-
-        void IList.Remove(object item) { }
-
-        public T[] ToArray() { throw null; }
-
-        public void TrimExcess() { }
-
-        public bool TrueForAll(Predicate<T> match) { throw null; }
-
-        public partial struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
-        {
-            public T Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-    }
-
-    public partial class Queue<T> : IEnumerable<T>, ICollection, IEnumerable
-    {
-        public Queue() { }
-
-        public Queue(IEnumerable<T> collection) { }
-
-        public Queue(int capacity) { }
-
-        public int Count { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public void Clear() { }
-
-        public bool Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, int arrayIndex) { }
-
-        public T Dequeue() { throw null; }
-
-        public void Enqueue(T item) { }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public T Peek() { throw null; }
-
-        IEnumerator<T> IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public T[] ToArray() { throw null; }
-
-        public void TrimExcess() { }
-
-        public partial struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
-        {
-            public T Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-    }
-
-    public partial class SortedDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable
-    {
-        public SortedDictionary() { }
-
-        public SortedDictionary(IComparer<TKey> comparer) { }
-
-        public SortedDictionary(IDictionary<TKey, TValue> dictionary, IComparer<TKey> comparer) { }
-
-        public SortedDictionary(IDictionary<TKey, TValue> dictionary) { }
-
-        public IComparer<TKey> Comparer { get { throw null; } }
-
-        public int Count { get { throw null; } }
-
-        public TValue this[TKey key] { get { throw null; } set { } }
-
-        public KeyCollection Keys { get { throw null; } }
-
-        bool ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-        ICollection<TKey> IDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        ICollection<TValue> IDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IDictionary.IsFixedSize { get { throw null; } }
-
-        bool IDictionary.IsReadOnly { get { throw null; } }
-
-        object IDictionary.this[object key] { get { throw null; } set { } }
-
-        ICollection IDictionary.Keys { get { throw null; } }
-
-        ICollection IDictionary.Values { get { throw null; } }
-
-        public ValueCollection Values { get { throw null; } }
-
-        public void Add(TKey key, TValue value) { }
-
-        public void Clear() { }
-
-        public bool ContainsKey(TKey key) { throw null; }
-
-        public bool ContainsValue(TValue value) { throw null; }
-
-        public void CopyTo(KeyValuePair<TKey, TValue>[] array, int index) { }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public bool Remove(TKey key) { throw null; }
-
-        void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair) { }
-
-        bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair) { throw null; }
-
-        bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair) { throw null; }
-
-        IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        void IDictionary.Add(object key, object value) { }
-
-        bool IDictionary.Contains(object key) { throw null; }
-
-        IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-        void IDictionary.Remove(object key) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public bool TryGetValue(TKey key, out TValue value) { throw null; }
-
-        public partial struct Enumerator : IEnumerator<KeyValuePair<TKey, TValue>>, IDictionaryEnumerator, IEnumerator, IDisposable
-        {
-            public KeyValuePair<TKey, TValue> Current { get { throw null; } }
-
-            DictionaryEntry IDictionaryEnumerator.Entry { get { throw null; } }
-
-            object IDictionaryEnumerator.Key { get { throw null; } }
-
-            object IDictionaryEnumerator.Value { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-
-        public sealed partial class KeyCollection : ICollection<TKey>, IEnumerable<TKey>, ICollection, IEnumerable
-        {
-            public KeyCollection(SortedDictionary<TKey, TValue> dictionary) { }
-
-            public int Count { get { throw null; } }
-
-            bool ICollection<TKey>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            public void CopyTo(TKey[] array, int index) { }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            void ICollection<TKey>.Add(TKey item) { }
-
-            void ICollection<TKey>.Clear() { }
-
-            bool ICollection<TKey>.Contains(TKey item) { throw null; }
-
-            bool ICollection<TKey>.Remove(TKey item) { throw null; }
-
-            IEnumerator<TKey> IEnumerable<TKey>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int index) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public partial struct Enumerator : IEnumerator<TKey>, IEnumerator, IDisposable
-            {
-                public TKey Current { get { throw null; } }
-
-                object IEnumerator.Current { get { throw null; } }
-
-                public void Dispose() { }
-
-                public bool MoveNext() { throw null; }
-
-                void IEnumerator.Reset() { }
-            }
-        }
-
-        public sealed partial class ValueCollection : ICollection<TValue>, IEnumerable<TValue>, ICollection, IEnumerable
-        {
-            public ValueCollection(SortedDictionary<TKey, TValue> dictionary) { }
-
-            public int Count { get { throw null; } }
-
-            bool ICollection<TValue>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            public void CopyTo(TValue[] array, int index) { }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            void ICollection<TValue>.Add(TValue item) { }
-
-            void ICollection<TValue>.Clear() { }
-
-            bool ICollection<TValue>.Contains(TValue item) { throw null; }
-
-            bool ICollection<TValue>.Remove(TValue item) { throw null; }
-
-            IEnumerator<TValue> IEnumerable<TValue>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int index) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public partial struct Enumerator : IEnumerator<TValue>, IEnumerator, IDisposable
-            {
-                public TValue Current { get { throw null; } }
-
-                object IEnumerator.Current { get { throw null; } }
-
-                public void Dispose() { }
-
-                public bool MoveNext() { throw null; }
-
-                void IEnumerator.Reset() { }
-            }
-        }
-    }
-
-    public partial class SortedSet<T> : ISet<T>, ICollection<T>, IEnumerable<T>, ICollection, IEnumerable
-    {
-        public SortedSet() { }
-
-        public SortedSet(IComparer<T> comparer) { }
-
-        public SortedSet(IEnumerable<T> collection, IComparer<T> comparer) { }
-
-        public SortedSet(IEnumerable<T> collection) { }
-
-        public IComparer<T> Comparer { get { throw null; } }
-
-        public int Count { get { throw null; } }
-
-        public T Max { get { throw null; } }
-
-        public T Min { get { throw null; } }
-
-        bool ICollection<T>.IsReadOnly { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public bool Add(T item) { throw null; }
-
-        public virtual void Clear() { }
-
-        public virtual bool Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, int index, int count) { }
-
-        public void CopyTo(T[] array, int index) { }
-
-        public void CopyTo(T[] array) { }
-
-        public void ExceptWith(IEnumerable<T> other) { }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public virtual SortedSet<T> GetViewBetween(T lowerValue, T upperValue) { throw null; }
-
-        public virtual void IntersectWith(IEnumerable<T> other) { }
-
-        public bool IsProperSubsetOf(IEnumerable<T> other) { throw null; }
-
-        public bool IsProperSupersetOf(IEnumerable<T> other) { throw null; }
-
-        public bool IsSubsetOf(IEnumerable<T> other) { throw null; }
-
-        public bool IsSupersetOf(IEnumerable<T> other) { throw null; }
-
-        public bool Overlaps(IEnumerable<T> other) { throw null; }
-
-        public bool Remove(T item) { throw null; }
-
-        public int RemoveWhere(Predicate<T> match) { throw null; }
-
-        public IEnumerable<T> Reverse() { throw null; }
-
-        public bool SetEquals(IEnumerable<T> other) { throw null; }
-
-        public void SymmetricExceptWith(IEnumerable<T> other) { }
-
-        void ICollection<T>.Add(T item) { }
-
-        IEnumerator<T> IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public void UnionWith(IEnumerable<T> other) { }
-
-        public partial struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
-        {
-            public T Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-    }
-
-    public partial class Stack<T> : IEnumerable<T>, ICollection, IEnumerable
-    {
-        public Stack() { }
-
-        public Stack(IEnumerable<T> collection) { }
-
-        public Stack(int capacity) { }
-
-        public int Count { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public void Clear() { }
-
-        public bool Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, int arrayIndex) { }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public T Peek() { throw null; }
-
-        public T Pop() { throw null; }
-
-        public void Push(T item) { }
-
-        IEnumerator<T> IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public T[] ToArray() { throw null; }
-
-        public void TrimExcess() { }
-
-        public partial struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
-        {
-            public T Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.collections/4.3.0/ref/netstandard1.3/System.Collections.cs b/src/referencePackages/src/system.collections/4.3.0/ref/netstandard1.3/System.Collections.cs
deleted file mode 100644
index 5d008572..00000000
--- a/src/referencePackages/src/system.collections/4.3.0/ref/netstandard1.3/System.Collections.cs
+++ /dev/null
@@ -1,1078 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Collections")]
-[assembly: System.Reflection.AssemblyDescription("System.Collections")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Collections")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Collections
-{
-    public sealed partial class BitArray : ICollection, IEnumerable
-    {
-        public BitArray(bool[] values) { }
-
-        public BitArray(byte[] bytes) { }
-
-        public BitArray(BitArray bits) { }
-
-        public BitArray(int length, bool defaultValue) { }
-
-        public BitArray(int length) { }
-
-        public BitArray(int[] values) { }
-
-        public bool this[int index] { get { throw null; } set { } }
-
-        public int Length { get { throw null; } set { } }
-
-        int ICollection.Count { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public BitArray And(BitArray value) { throw null; }
-
-        public bool Get(int index) { throw null; }
-
-        public IEnumerator GetEnumerator() { throw null; }
-
-        public BitArray Not() { throw null; }
-
-        public BitArray Or(BitArray value) { throw null; }
-
-        public void Set(int index, bool value) { }
-
-        public void SetAll(bool value) { }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        public BitArray Xor(BitArray value) { throw null; }
-    }
-
-    public static partial class StructuralComparisons
-    {
-        public static IComparer StructuralComparer { get { throw null; } }
-
-        public static IEqualityComparer StructuralEqualityComparer { get { throw null; } }
-    }
-}
-
-namespace System.Collections.Generic
-{
-    public abstract partial class Comparer<T> : IComparer<T>, IComparer
-    {
-        public static Comparer<T> Default { get { throw null; } }
-
-        public abstract int Compare(T x, T y);
-        public static Comparer<T> Create(Comparison<T> comparison) { throw null; }
-
-        int IComparer.Compare(object x, object y) { throw null; }
-    }
-
-    public partial class Dictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, ICollection, IDictionary
-    {
-        public Dictionary() { }
-
-        public Dictionary(IDictionary<TKey, TValue> dictionary, IEqualityComparer<TKey> comparer) { }
-
-        public Dictionary(IDictionary<TKey, TValue> dictionary) { }
-
-        public Dictionary(IEqualityComparer<TKey> comparer) { }
-
-        public Dictionary(int capacity, IEqualityComparer<TKey> comparer) { }
-
-        public Dictionary(int capacity) { }
-
-        public IEqualityComparer<TKey> Comparer { get { throw null; } }
-
-        public int Count { get { throw null; } }
-
-        public TValue this[TKey key] { get { throw null; } set { } }
-
-        public KeyCollection Keys { get { throw null; } }
-
-        bool ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-        ICollection<TKey> IDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        ICollection<TValue> IDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        IEnumerable<TKey> IReadOnlyDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        IEnumerable<TValue> IReadOnlyDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IDictionary.IsFixedSize { get { throw null; } }
-
-        bool IDictionary.IsReadOnly { get { throw null; } }
-
-        object IDictionary.this[object key] { get { throw null; } set { } }
-
-        ICollection IDictionary.Keys { get { throw null; } }
-
-        ICollection IDictionary.Values { get { throw null; } }
-
-        public ValueCollection Values { get { throw null; } }
-
-        public void Add(TKey key, TValue value) { }
-
-        public void Clear() { }
-
-        public bool ContainsKey(TKey key) { throw null; }
-
-        public bool ContainsValue(TValue value) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public bool Remove(TKey key) { throw null; }
-
-        void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair) { }
-
-        bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair) { throw null; }
-
-        void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index) { }
-
-        bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair) { throw null; }
-
-        IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        void IDictionary.Add(object key, object value) { }
-
-        bool IDictionary.Contains(object key) { throw null; }
-
-        IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-        void IDictionary.Remove(object key) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public bool TryGetValue(TKey key, out TValue value) { throw null; }
-
-        public partial struct Enumerator : IEnumerator<KeyValuePair<TKey, TValue>>, IEnumerator, IDisposable, IDictionaryEnumerator
-        {
-            public KeyValuePair<TKey, TValue> Current { get { throw null; } }
-
-            DictionaryEntry IDictionaryEnumerator.Entry { get { throw null; } }
-
-            object IDictionaryEnumerator.Key { get { throw null; } }
-
-            object IDictionaryEnumerator.Value { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-
-        public sealed partial class KeyCollection : ICollection<TKey>, IEnumerable<TKey>, IEnumerable, IReadOnlyCollection<TKey>, ICollection
-        {
-            public KeyCollection(Dictionary<TKey, TValue> dictionary) { }
-
-            public int Count { get { throw null; } }
-
-            bool ICollection<TKey>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            public void CopyTo(TKey[] array, int index) { }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            void ICollection<TKey>.Add(TKey item) { }
-
-            void ICollection<TKey>.Clear() { }
-
-            bool ICollection<TKey>.Contains(TKey item) { throw null; }
-
-            bool ICollection<TKey>.Remove(TKey item) { throw null; }
-
-            IEnumerator<TKey> IEnumerable<TKey>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int index) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public partial struct Enumerator : IEnumerator<TKey>, IEnumerator, IDisposable
-            {
-                public TKey Current { get { throw null; } }
-
-                object IEnumerator.Current { get { throw null; } }
-
-                public void Dispose() { }
-
-                public bool MoveNext() { throw null; }
-
-                void IEnumerator.Reset() { }
-            }
-        }
-
-        public sealed partial class ValueCollection : ICollection<TValue>, IEnumerable<TValue>, IEnumerable, IReadOnlyCollection<TValue>, ICollection
-        {
-            public ValueCollection(Dictionary<TKey, TValue> dictionary) { }
-
-            public int Count { get { throw null; } }
-
-            bool ICollection<TValue>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            public void CopyTo(TValue[] array, int index) { }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            void ICollection<TValue>.Add(TValue item) { }
-
-            void ICollection<TValue>.Clear() { }
-
-            bool ICollection<TValue>.Contains(TValue item) { throw null; }
-
-            bool ICollection<TValue>.Remove(TValue item) { throw null; }
-
-            IEnumerator<TValue> IEnumerable<TValue>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int index) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public partial struct Enumerator : IEnumerator<TValue>, IEnumerator, IDisposable
-            {
-                public TValue Current { get { throw null; } }
-
-                object IEnumerator.Current { get { throw null; } }
-
-                public void Dispose() { }
-
-                public bool MoveNext() { throw null; }
-
-                void IEnumerator.Reset() { }
-            }
-        }
-    }
-
-    public abstract partial class EqualityComparer<T> : IEqualityComparer<T>, IEqualityComparer
-    {
-        public static EqualityComparer<T> Default { get { throw null; } }
-
-        public abstract bool Equals(T x, T y);
-        public abstract int GetHashCode(T obj);
-        bool IEqualityComparer.Equals(object x, object y) { throw null; }
-
-        int IEqualityComparer.GetHashCode(object obj) { throw null; }
-    }
-
-    public partial class HashSet<T> : ICollection<T>, IEnumerable<T>, IEnumerable, IReadOnlyCollection<T>, ISet<T>
-    {
-        public HashSet() { }
-
-        public HashSet(IEnumerable<T> collection, IEqualityComparer<T> comparer) { }
-
-        public HashSet(IEnumerable<T> collection) { }
-
-        public HashSet(IEqualityComparer<T> comparer) { }
-
-        public IEqualityComparer<T> Comparer { get { throw null; } }
-
-        public int Count { get { throw null; } }
-
-        bool ICollection<T>.IsReadOnly { get { throw null; } }
-
-        public bool Add(T item) { throw null; }
-
-        public void Clear() { }
-
-        public bool Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, int arrayIndex, int count) { }
-
-        public void CopyTo(T[] array, int arrayIndex) { }
-
-        public void CopyTo(T[] array) { }
-
-        public void ExceptWith(IEnumerable<T> other) { }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public void IntersectWith(IEnumerable<T> other) { }
-
-        public bool IsProperSubsetOf(IEnumerable<T> other) { throw null; }
-
-        public bool IsProperSupersetOf(IEnumerable<T> other) { throw null; }
-
-        public bool IsSubsetOf(IEnumerable<T> other) { throw null; }
-
-        public bool IsSupersetOf(IEnumerable<T> other) { throw null; }
-
-        public bool Overlaps(IEnumerable<T> other) { throw null; }
-
-        public bool Remove(T item) { throw null; }
-
-        public int RemoveWhere(Predicate<T> match) { throw null; }
-
-        public bool SetEquals(IEnumerable<T> other) { throw null; }
-
-        public void SymmetricExceptWith(IEnumerable<T> other) { }
-
-        void ICollection<T>.Add(T item) { }
-
-        IEnumerator<T> IEnumerable<T>.GetEnumerator() { throw null; }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public void TrimExcess() { }
-
-        public void UnionWith(IEnumerable<T> other) { }
-
-        public partial struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
-        {
-            public T Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-    }
-
-    public sealed partial class LinkedListNode<T>
-    {
-        public LinkedListNode(T value) { }
-
-        public LinkedList<T> List { get { throw null; } }
-
-        public LinkedListNode<T> Next { get { throw null; } }
-
-        public LinkedListNode<T> Previous { get { throw null; } }
-
-        public T Value { get { throw null; } set { } }
-    }
-
-    public partial class LinkedList<T> : ICollection<T>, IEnumerable<T>, IEnumerable, IReadOnlyCollection<T>, ICollection
-    {
-        public LinkedList() { }
-
-        public LinkedList(IEnumerable<T> collection) { }
-
-        public int Count { get { throw null; } }
-
-        public LinkedListNode<T> First { get { throw null; } }
-
-        public LinkedListNode<T> Last { get { throw null; } }
-
-        bool ICollection<T>.IsReadOnly { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public LinkedListNode<T> AddAfter(LinkedListNode<T> node, T value) { throw null; }
-
-        public void AddAfter(LinkedListNode<T> node, LinkedListNode<T> newNode) { }
-
-        public LinkedListNode<T> AddBefore(LinkedListNode<T> node, T value) { throw null; }
-
-        public void AddBefore(LinkedListNode<T> node, LinkedListNode<T> newNode) { }
-
-        public LinkedListNode<T> AddFirst(T value) { throw null; }
-
-        public void AddFirst(LinkedListNode<T> node) { }
-
-        public LinkedListNode<T> AddLast(T value) { throw null; }
-
-        public void AddLast(LinkedListNode<T> node) { }
-
-        public void Clear() { }
-
-        public bool Contains(T value) { throw null; }
-
-        public void CopyTo(T[] array, int index) { }
-
-        public LinkedListNode<T> Find(T value) { throw null; }
-
-        public LinkedListNode<T> FindLast(T value) { throw null; }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public bool Remove(T value) { throw null; }
-
-        public void Remove(LinkedListNode<T> node) { }
-
-        public void RemoveFirst() { }
-
-        public void RemoveLast() { }
-
-        void ICollection<T>.Add(T value) { }
-
-        IEnumerator<T> IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
-        {
-            public T Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-    }
-
-    public partial class List<T> : ICollection<T>, IEnumerable<T>, IEnumerable, IList<T>, IReadOnlyCollection<T>, IReadOnlyList<T>, ICollection, IList
-    {
-        public List() { }
-
-        public List(IEnumerable<T> collection) { }
-
-        public List(int capacity) { }
-
-        public int Capacity { get { throw null; } set { } }
-
-        public int Count { get { throw null; } }
-
-        public T this[int index] { get { throw null; } set { } }
-
-        bool ICollection<T>.IsReadOnly { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IList.IsFixedSize { get { throw null; } }
-
-        bool IList.IsReadOnly { get { throw null; } }
-
-        object IList.this[int index] { get { throw null; } set { } }
-
-        public void Add(T item) { }
-
-        public void AddRange(IEnumerable<T> collection) { }
-
-        public ObjectModel.ReadOnlyCollection<T> AsReadOnly() { throw null; }
-
-        public int BinarySearch(T item, IComparer<T> comparer) { throw null; }
-
-        public int BinarySearch(T item) { throw null; }
-
-        public int BinarySearch(int index, int count, T item, IComparer<T> comparer) { throw null; }
-
-        public void Clear() { }
-
-        public bool Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, int arrayIndex) { }
-
-        public void CopyTo(T[] array) { }
-
-        public void CopyTo(int index, T[] array, int arrayIndex, int count) { }
-
-        public bool Exists(Predicate<T> match) { throw null; }
-
-        public T Find(Predicate<T> match) { throw null; }
-
-        public List<T> FindAll(Predicate<T> match) { throw null; }
-
-        public int FindIndex(int startIndex, int count, Predicate<T> match) { throw null; }
-
-        public int FindIndex(int startIndex, Predicate<T> match) { throw null; }
-
-        public int FindIndex(Predicate<T> match) { throw null; }
-
-        public T FindLast(Predicate<T> match) { throw null; }
-
-        public int FindLastIndex(int startIndex, int count, Predicate<T> match) { throw null; }
-
-        public int FindLastIndex(int startIndex, Predicate<T> match) { throw null; }
-
-        public int FindLastIndex(Predicate<T> match) { throw null; }
-
-        public void ForEach(Action<T> action) { }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public List<T> GetRange(int index, int count) { throw null; }
-
-        public int IndexOf(T item, int index, int count) { throw null; }
-
-        public int IndexOf(T item, int index) { throw null; }
-
-        public int IndexOf(T item) { throw null; }
-
-        public void Insert(int index, T item) { }
-
-        public void InsertRange(int index, IEnumerable<T> collection) { }
-
-        public int LastIndexOf(T item, int index, int count) { throw null; }
-
-        public int LastIndexOf(T item, int index) { throw null; }
-
-        public int LastIndexOf(T item) { throw null; }
-
-        public bool Remove(T item) { throw null; }
-
-        public int RemoveAll(Predicate<T> match) { throw null; }
-
-        public void RemoveAt(int index) { }
-
-        public void RemoveRange(int index, int count) { }
-
-        public void Reverse() { }
-
-        public void Reverse(int index, int count) { }
-
-        public void Sort() { }
-
-        public void Sort(IComparer<T> comparer) { }
-
-        public void Sort(Comparison<T> comparison) { }
-
-        public void Sort(int index, int count, IComparer<T> comparer) { }
-
-        IEnumerator<T> IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        int IList.Add(object item) { throw null; }
-
-        bool IList.Contains(object item) { throw null; }
-
-        int IList.IndexOf(object item) { throw null; }
-
-        void IList.Insert(int index, object item) { }
-
-        void IList.Remove(object item) { }
-
-        public T[] ToArray() { throw null; }
-
-        public void TrimExcess() { }
-
-        public bool TrueForAll(Predicate<T> match) { throw null; }
-
-        public partial struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
-        {
-            public T Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-    }
-
-    public partial class Queue<T> : IEnumerable<T>, IEnumerable, IReadOnlyCollection<T>, ICollection
-    {
-        public Queue() { }
-
-        public Queue(IEnumerable<T> collection) { }
-
-        public Queue(int capacity) { }
-
-        public int Count { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public void Clear() { }
-
-        public bool Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, int arrayIndex) { }
-
-        public T Dequeue() { throw null; }
-
-        public void Enqueue(T item) { }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public T Peek() { throw null; }
-
-        IEnumerator<T> IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public T[] ToArray() { throw null; }
-
-        public void TrimExcess() { }
-
-        public partial struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
-        {
-            public T Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-    }
-
-    public partial class SortedDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, ICollection, IDictionary
-    {
-        public SortedDictionary() { }
-
-        public SortedDictionary(IComparer<TKey> comparer) { }
-
-        public SortedDictionary(IDictionary<TKey, TValue> dictionary, IComparer<TKey> comparer) { }
-
-        public SortedDictionary(IDictionary<TKey, TValue> dictionary) { }
-
-        public IComparer<TKey> Comparer { get { throw null; } }
-
-        public int Count { get { throw null; } }
-
-        public TValue this[TKey key] { get { throw null; } set { } }
-
-        public KeyCollection Keys { get { throw null; } }
-
-        bool ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-        ICollection<TKey> IDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        ICollection<TValue> IDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        IEnumerable<TKey> IReadOnlyDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        IEnumerable<TValue> IReadOnlyDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IDictionary.IsFixedSize { get { throw null; } }
-
-        bool IDictionary.IsReadOnly { get { throw null; } }
-
-        object IDictionary.this[object key] { get { throw null; } set { } }
-
-        ICollection IDictionary.Keys { get { throw null; } }
-
-        ICollection IDictionary.Values { get { throw null; } }
-
-        public ValueCollection Values { get { throw null; } }
-
-        public void Add(TKey key, TValue value) { }
-
-        public void Clear() { }
-
-        public bool ContainsKey(TKey key) { throw null; }
-
-        public bool ContainsValue(TValue value) { throw null; }
-
-        public void CopyTo(KeyValuePair<TKey, TValue>[] array, int index) { }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public bool Remove(TKey key) { throw null; }
-
-        void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair) { }
-
-        bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair) { throw null; }
-
-        bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair) { throw null; }
-
-        IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        void IDictionary.Add(object key, object value) { }
-
-        bool IDictionary.Contains(object key) { throw null; }
-
-        IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-        void IDictionary.Remove(object key) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public bool TryGetValue(TKey key, out TValue value) { throw null; }
-
-        public partial struct Enumerator : IEnumerator<KeyValuePair<TKey, TValue>>, IEnumerator, IDisposable, IDictionaryEnumerator
-        {
-            public KeyValuePair<TKey, TValue> Current { get { throw null; } }
-
-            DictionaryEntry IDictionaryEnumerator.Entry { get { throw null; } }
-
-            object IDictionaryEnumerator.Key { get { throw null; } }
-
-            object IDictionaryEnumerator.Value { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-
-        public sealed partial class KeyCollection : ICollection<TKey>, IEnumerable<TKey>, IEnumerable, IReadOnlyCollection<TKey>, ICollection
-        {
-            public KeyCollection(SortedDictionary<TKey, TValue> dictionary) { }
-
-            public int Count { get { throw null; } }
-
-            bool ICollection<TKey>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            public void CopyTo(TKey[] array, int index) { }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            void ICollection<TKey>.Add(TKey item) { }
-
-            void ICollection<TKey>.Clear() { }
-
-            bool ICollection<TKey>.Contains(TKey item) { throw null; }
-
-            bool ICollection<TKey>.Remove(TKey item) { throw null; }
-
-            IEnumerator<TKey> IEnumerable<TKey>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int index) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public partial struct Enumerator : IEnumerator<TKey>, IEnumerator, IDisposable
-            {
-                public TKey Current { get { throw null; } }
-
-                object IEnumerator.Current { get { throw null; } }
-
-                public void Dispose() { }
-
-                public bool MoveNext() { throw null; }
-
-                void IEnumerator.Reset() { }
-            }
-        }
-
-        public sealed partial class ValueCollection : ICollection<TValue>, IEnumerable<TValue>, IEnumerable, IReadOnlyCollection<TValue>, ICollection
-        {
-            public ValueCollection(SortedDictionary<TKey, TValue> dictionary) { }
-
-            public int Count { get { throw null; } }
-
-            bool ICollection<TValue>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            public void CopyTo(TValue[] array, int index) { }
-
-            public Enumerator GetEnumerator() { throw null; }
-
-            void ICollection<TValue>.Add(TValue item) { }
-
-            void ICollection<TValue>.Clear() { }
-
-            bool ICollection<TValue>.Contains(TValue item) { throw null; }
-
-            bool ICollection<TValue>.Remove(TValue item) { throw null; }
-
-            IEnumerator<TValue> IEnumerable<TValue>.GetEnumerator() { throw null; }
-
-            void ICollection.CopyTo(Array array, int index) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-            public partial struct Enumerator : IEnumerator<TValue>, IEnumerator, IDisposable
-            {
-                public TValue Current { get { throw null; } }
-
-                object IEnumerator.Current { get { throw null; } }
-
-                public void Dispose() { }
-
-                public bool MoveNext() { throw null; }
-
-                void IEnumerator.Reset() { }
-            }
-        }
-    }
-
-    public partial class SortedList<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, ICollection, IDictionary
-    {
-        public SortedList() { }
-
-        public SortedList(IComparer<TKey> comparer) { }
-
-        public SortedList(IDictionary<TKey, TValue> dictionary, IComparer<TKey> comparer) { }
-
-        public SortedList(IDictionary<TKey, TValue> dictionary) { }
-
-        public SortedList(int capacity, IComparer<TKey> comparer) { }
-
-        public SortedList(int capacity) { }
-
-        public int Capacity { get { throw null; } set { } }
-
-        public IComparer<TKey> Comparer { get { throw null; } }
-
-        public int Count { get { throw null; } }
-
-        public TValue this[TKey key] { get { throw null; } set { } }
-
-        public IList<TKey> Keys { get { throw null; } }
-
-        bool ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-        ICollection<TKey> IDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        ICollection<TValue> IDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        IEnumerable<TKey> IReadOnlyDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        IEnumerable<TValue> IReadOnlyDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IDictionary.IsFixedSize { get { throw null; } }
-
-        bool IDictionary.IsReadOnly { get { throw null; } }
-
-        object IDictionary.this[object key] { get { throw null; } set { } }
-
-        ICollection IDictionary.Keys { get { throw null; } }
-
-        ICollection IDictionary.Values { get { throw null; } }
-
-        public IList<TValue> Values { get { throw null; } }
-
-        public void Add(TKey key, TValue value) { }
-
-        public void Clear() { }
-
-        public bool ContainsKey(TKey key) { throw null; }
-
-        public bool ContainsValue(TValue value) { throw null; }
-
-        public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() { throw null; }
-
-        public int IndexOfKey(TKey key) { throw null; }
-
-        public int IndexOfValue(TValue value) { throw null; }
-
-        public bool Remove(TKey key) { throw null; }
-
-        public void RemoveAt(int index) { }
-
-        void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair) { }
-
-        bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair) { throw null; }
-
-        void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex) { }
-
-        bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair) { throw null; }
-
-        IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-        void IDictionary.Add(object key, object value) { }
-
-        bool IDictionary.Contains(object key) { throw null; }
-
-        IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-        void IDictionary.Remove(object key) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public void TrimExcess() { }
-
-        public bool TryGetValue(TKey key, out TValue value) { throw null; }
-    }
-
-    public partial class SortedSet<T> : ICollection<T>, IEnumerable<T>, IEnumerable, IReadOnlyCollection<T>, ISet<T>, ICollection
-    {
-        public SortedSet() { }
-
-        public SortedSet(IComparer<T> comparer) { }
-
-        public SortedSet(IEnumerable<T> collection, IComparer<T> comparer) { }
-
-        public SortedSet(IEnumerable<T> collection) { }
-
-        public IComparer<T> Comparer { get { throw null; } }
-
-        public int Count { get { throw null; } }
-
-        public T Max { get { throw null; } }
-
-        public T Min { get { throw null; } }
-
-        bool ICollection<T>.IsReadOnly { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public bool Add(T item) { throw null; }
-
-        public virtual void Clear() { }
-
-        public virtual bool Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, int index, int count) { }
-
-        public void CopyTo(T[] array, int index) { }
-
-        public void CopyTo(T[] array) { }
-
-        public void ExceptWith(IEnumerable<T> other) { }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public virtual SortedSet<T> GetViewBetween(T lowerValue, T upperValue) { throw null; }
-
-        public virtual void IntersectWith(IEnumerable<T> other) { }
-
-        public bool IsProperSubsetOf(IEnumerable<T> other) { throw null; }
-
-        public bool IsProperSupersetOf(IEnumerable<T> other) { throw null; }
-
-        public bool IsSubsetOf(IEnumerable<T> other) { throw null; }
-
-        public bool IsSupersetOf(IEnumerable<T> other) { throw null; }
-
-        public bool Overlaps(IEnumerable<T> other) { throw null; }
-
-        public bool Remove(T item) { throw null; }
-
-        public int RemoveWhere(Predicate<T> match) { throw null; }
-
-        public IEnumerable<T> Reverse() { throw null; }
-
-        public bool SetEquals(IEnumerable<T> other) { throw null; }
-
-        public void SymmetricExceptWith(IEnumerable<T> other) { }
-
-        void ICollection<T>.Add(T item) { }
-
-        IEnumerator<T> IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public void UnionWith(IEnumerable<T> other) { }
-
-        public partial struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
-        {
-            public T Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-    }
-
-    public partial class Stack<T> : IEnumerable<T>, IEnumerable, IReadOnlyCollection<T>, ICollection
-    {
-        public Stack() { }
-
-        public Stack(IEnumerable<T> collection) { }
-
-        public Stack(int capacity) { }
-
-        public int Count { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        public void Clear() { }
-
-        public bool Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, int arrayIndex) { }
-
-        public Enumerator GetEnumerator() { throw null; }
-
-        public T Peek() { throw null; }
-
-        public T Pop() { throw null; }
-
-        public void Push(T item) { }
-
-        IEnumerator<T> IEnumerable<T>.GetEnumerator() { throw null; }
-
-        void ICollection.CopyTo(Array array, int arrayIndex) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public T[] ToArray() { throw null; }
-
-        public void TrimExcess() { }
-
-        public partial struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
-        {
-            public T Current { get { throw null; } }
-
-            object IEnumerator.Current { get { throw null; } }
-
-            public void Dispose() { }
-
-            public bool MoveNext() { throw null; }
-
-            void IEnumerator.Reset() { }
-        }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.collections/4.3.0/system.collections.nuspec b/src/referencePackages/src/system.collections/4.3.0/system.collections.nuspec
deleted file mode 100644
index 0fc0f11b..00000000
--- a/src/referencePackages/src/system.collections/4.3.0/system.collections.nuspec
+++ /dev/null
@@ -1,43 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Collections</id>
-    <version>4.3.0</version>
-    <title>System.Collections</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides classes that define generic collections, which allow developers to create strongly typed collections that provide better type safety and performance than non-generic strongly typed collections.
-
-Commonly Used Types:
-System.Collections.Generic.List&lt;T&gt;
-System.Collections.Generic.Dictionary&lt;TKey, TValue&gt;
-System.Collections.Generic.Queue&lt;T&gt;
-System.Collections.Generic.Stack&lt;T&gt;
-System.Collections.Generic.HashSet&lt;T&gt;
-System.Collections.Generic.LinkedList&lt;T&gt;
-System.Collections.Generic.EqualityComparer&lt;T&gt;
-System.Collections.Generic.Comparer&lt;T&gt;
-System.Collections.Generic.SortedDictionary&lt;TKey, TValue&gt;
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.componentmodel.annotations/5.0.0/System.ComponentModel.Annotations.5.0.0.csproj b/src/referencePackages/src/system.componentmodel.annotations/5.0.0/System.ComponentModel.Annotations.5.0.0.csproj
index c7317687..b38ec624 100644
--- a/src/referencePackages/src/system.componentmodel.annotations/5.0.0/System.ComponentModel.Annotations.5.0.0.csproj
+++ b/src/referencePackages/src/system.componentmodel.annotations/5.0.0/System.ComponentModel.Annotations.5.0.0.csproj
@@ -1,16 +1,8 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.1;netstandard1.3;netstandard1.4;netstandard2.0;netstandard2.1</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0;netstandard2.1</TargetFrameworks>
     <AssemblyName>System.ComponentModel.Annotations</AssemblyName>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.ComponentModel" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.4'">
-    <PackageReference Include="System.ComponentModel" Version="4.3.0" />
-  </ItemGroup>
-
 </Project>
diff --git a/src/referencePackages/src/system.componentmodel.annotations/5.0.0/ref/netstandard1.1/System.ComponentModel.Annotations.cs b/src/referencePackages/src/system.componentmodel.annotations/5.0.0/ref/netstandard1.1/System.ComponentModel.Annotations.cs
deleted file mode 100644
index 09fc2b19..00000000
--- a/src/referencePackages/src/system.componentmodel.annotations/5.0.0/ref/netstandard1.1/System.ComponentModel.Annotations.cs
+++ /dev/null
@@ -1,390 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyTitle("System.ComponentModel.Annotations.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.ComponentModel.Annotations.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.ComponentModel.Annotations.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.ComponentModel.DataAnnotations
-{
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
-    public sealed partial class AssociationAttribute : Attribute
-    {
-        public AssociationAttribute(string name, string thisKey, string otherKey) { }
-
-        public bool IsForeignKey { get { throw null; } set { } }
-
-        public string Name { get { throw null; } }
-
-        public string OtherKey { get { throw null; } }
-
-        public Collections.Generic.IEnumerable<string> OtherKeyMembers { get { throw null; } }
-
-        public string ThisKey { get { throw null; } }
-
-        public Collections.Generic.IEnumerable<string> ThisKeyMembers { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
-    public sealed partial class ConcurrencyCheckAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = true)]
-    public sealed partial class CustomValidationAttribute : ValidationAttribute
-    {
-        public CustomValidationAttribute(Type validatorType, string method) { }
-
-        public string Method { get { throw null; } }
-
-        public Type ValidatorType { get { throw null; } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        protected override ValidationResult IsValid(object value, ValidationContext validationContext) { throw null; }
-    }
-
-    public enum DataType
-    {
-        Custom = 0,
-        DateTime = 1,
-        Date = 2,
-        Time = 3,
-        Duration = 4,
-        PhoneNumber = 5,
-        Currency = 6,
-        Text = 7,
-        Html = 8,
-        MultilineText = 9,
-        EmailAddress = 10,
-        Password = 11,
-        Url = 12,
-        ImageUrl = 13
-    }
-
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class DataTypeAttribute : ValidationAttribute
-    {
-        public DataTypeAttribute(DataType dataType) { }
-
-        public DataTypeAttribute(string customDataType) { }
-
-        public string CustomDataType { get { throw null; } }
-
-        public DataType DataType { get { throw null; } }
-
-        public DisplayFormatAttribute DisplayFormat { get { throw null; } protected set { } }
-
-        public virtual string GetDataTypeName() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class DisplayAttribute : Attribute
-    {
-        public bool AutoGenerateField { get { throw null; } set { } }
-
-        public bool AutoGenerateFilter { get { throw null; } set { } }
-
-        public string Description { get { throw null; } set { } }
-
-        public string GroupName { get { throw null; } set { } }
-
-        public string Name { get { throw null; } set { } }
-
-        public int Order { get { throw null; } set { } }
-
-        public string Prompt { get { throw null; } set { } }
-
-        public Type ResourceType { get { throw null; } set { } }
-
-        public string ShortName { get { throw null; } set { } }
-
-        public bool? GetAutoGenerateField() { throw null; }
-
-        public bool? GetAutoGenerateFilter() { throw null; }
-
-        public string GetDescription() { throw null; }
-
-        public string GetGroupName() { throw null; }
-
-        public string GetName() { throw null; }
-
-        public int? GetOrder() { throw null; }
-
-        public string GetPrompt() { throw null; }
-
-        public string GetShortName() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = false)]
-    public partial class DisplayColumnAttribute : Attribute
-    {
-        public DisplayColumnAttribute(string displayColumn, string sortColumn, bool sortDescending) { }
-
-        public DisplayColumnAttribute(string displayColumn, string sortColumn) { }
-
-        public DisplayColumnAttribute(string displayColumn) { }
-
-        public string DisplayColumn { get { throw null; } }
-
-        public string SortColumn { get { throw null; } }
-
-        public bool SortDescending { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class DisplayFormatAttribute : Attribute
-    {
-        public bool ApplyFormatInEditMode { get { throw null; } set { } }
-
-        public bool ConvertEmptyStringToNull { get { throw null; } set { } }
-
-        public string DataFormatString { get { throw null; } set { } }
-
-        public string NullDisplayText { get { throw null; } set { } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
-    public sealed partial class EditableAttribute : Attribute
-    {
-        public EditableAttribute(bool allowEdit) { }
-
-        public bool AllowEdit { get { throw null; } }
-
-        public bool AllowInitialValue { get { throw null; } set { } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class EnumDataTypeAttribute : DataTypeAttribute
-    {
-        public EnumDataTypeAttribute(Type enumType) : base(default(DataType)) { }
-
-        public Type EnumType { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public sealed partial class FilterUIHintAttribute : Attribute
-    {
-        public FilterUIHintAttribute(string filterUIHint, string presentationLayer, params object[] controlParameters) { }
-
-        public FilterUIHintAttribute(string filterUIHint, string presentationLayer) { }
-
-        public FilterUIHintAttribute(string filterUIHint) { }
-
-        public Collections.Generic.IDictionary<string, object> ControlParameters { get { throw null; } }
-
-        public string FilterUIHint { get { throw null; } }
-
-        public string PresentationLayer { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
-    public sealed partial class KeyAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class RangeAttribute : ValidationAttribute
-    {
-        public RangeAttribute(double minimum, double maximum) { }
-
-        public RangeAttribute(int minimum, int maximum) { }
-
-        public RangeAttribute(Type type, string minimum, string maximum) { }
-
-        public object Maximum { get { throw null; } }
-
-        public object Minimum { get { throw null; } }
-
-        public Type OperandType { get { throw null; } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class RegularExpressionAttribute : ValidationAttribute
-    {
-        public RegularExpressionAttribute(string pattern) { }
-
-        public string Pattern { get { throw null; } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class RequiredAttribute : ValidationAttribute
-    {
-        public bool AllowEmptyStrings { get { throw null; } set { } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class StringLengthAttribute : ValidationAttribute
-    {
-        public StringLengthAttribute(int maximumLength) { }
-
-        public int MaximumLength { get { throw null; } }
-
-        public int MinimumLength { get { throw null; } set { } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
-    public sealed partial class TimestampAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)]
-    public partial class UIHintAttribute : Attribute
-    {
-        public UIHintAttribute(string uiHint, string presentationLayer, params object[] controlParameters) { }
-
-        public UIHintAttribute(string uiHint, string presentationLayer) { }
-
-        public UIHintAttribute(string uiHint) { }
-
-        public Collections.Generic.IDictionary<string, object> ControlParameters { get { throw null; } }
-
-        public string PresentationLayer { get { throw null; } }
-
-        public string UIHint { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-    }
-
-    public abstract partial class ValidationAttribute : Attribute
-    {
-        protected ValidationAttribute() { }
-
-        protected ValidationAttribute(Func<string> errorMessageAccessor) { }
-
-        protected ValidationAttribute(string errorMessage) { }
-
-        public string ErrorMessage { get { throw null; } set { } }
-
-        public string ErrorMessageResourceName { get { throw null; } set { } }
-
-        public Type ErrorMessageResourceType { get { throw null; } set { } }
-
-        protected string ErrorMessageString { get { throw null; } }
-
-        public virtual string FormatErrorMessage(string name) { throw null; }
-
-        public ValidationResult GetValidationResult(object value, ValidationContext validationContext) { throw null; }
-
-        protected virtual ValidationResult IsValid(object value, ValidationContext validationContext) { throw null; }
-
-        public void Validate(object value, ValidationContext validationContext) { }
-    }
-
-    public sealed partial class ValidationContext
-    {
-        public ValidationContext(object instance, Collections.Generic.IDictionary<object, object> items) { }
-
-        public ValidationContext(object instance) { }
-
-        public string DisplayName { get { throw null; } set { } }
-
-        public Collections.Generic.IDictionary<object, object> Items { get { throw null; } }
-
-        public string MemberName { get { throw null; } set { } }
-
-        public object ObjectInstance { get { throw null; } }
-
-        public Type ObjectType { get { throw null; } }
-
-        public object GetService(Type serviceType) { throw null; }
-
-        public void InitializeServiceProvider(Func<Type, object> serviceProvider) { }
-    }
-
-    public partial class ValidationException : Exception
-    {
-        public ValidationException() { }
-
-        public ValidationException(ValidationResult validationResult, ValidationAttribute validatingAttribute, object value) { }
-
-        public ValidationException(string errorMessage, ValidationAttribute validatingAttribute, object value) { }
-
-        public ValidationException(string message, Exception innerException) { }
-
-        public ValidationException(string message) { }
-
-        public ValidationAttribute ValidationAttribute { get { throw null; } }
-
-        public ValidationResult ValidationResult { get { throw null; } }
-
-        public object Value { get { throw null; } }
-    }
-
-    public partial class ValidationResult
-    {
-        public static readonly ValidationResult Success;
-        public ValidationResult(string errorMessage, Collections.Generic.IEnumerable<string> memberNames) { }
-
-        public ValidationResult(string errorMessage) { }
-
-        public string ErrorMessage { get { throw null; } set { } }
-
-        public Collections.Generic.IEnumerable<string> MemberNames { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public static partial class Validator
-    {
-        public static bool TryValidateObject(object instance, ValidationContext validationContext, Collections.Generic.ICollection<ValidationResult> validationResults, bool validateAllProperties) { throw null; }
-
-        public static bool TryValidateObject(object instance, ValidationContext validationContext, Collections.Generic.ICollection<ValidationResult> validationResults) { throw null; }
-
-        public static bool TryValidateProperty(object value, ValidationContext validationContext, Collections.Generic.ICollection<ValidationResult> validationResults) { throw null; }
-
-        public static bool TryValidateValue(object value, ValidationContext validationContext, Collections.Generic.ICollection<ValidationResult> validationResults, Collections.Generic.IEnumerable<ValidationAttribute> validationAttributes) { throw null; }
-
-        public static void ValidateObject(object instance, ValidationContext validationContext, bool validateAllProperties) { }
-
-        public static void ValidateObject(object instance, ValidationContext validationContext) { }
-
-        public static void ValidateProperty(object value, ValidationContext validationContext) { }
-
-        public static void ValidateValue(object value, ValidationContext validationContext, Collections.Generic.IEnumerable<ValidationAttribute> validationAttributes) { }
-    }
-}
-
-namespace System.ComponentModel.DataAnnotations.Schema
-{
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class DatabaseGeneratedAttribute : Attribute
-    {
-        public DatabaseGeneratedAttribute(DatabaseGeneratedOption databaseGeneratedOption) { }
-
-        public DatabaseGeneratedOption DatabaseGeneratedOption { get { throw null; } }
-    }
-
-    public enum DatabaseGeneratedOption
-    {
-        None = 0,
-        Identity = 1,
-        Computed = 2
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.componentmodel.annotations/5.0.0/ref/netstandard1.3/System.ComponentModel.Annotations.cs b/src/referencePackages/src/system.componentmodel.annotations/5.0.0/ref/netstandard1.3/System.ComponentModel.Annotations.cs
deleted file mode 100644
index bc88143f..00000000
--- a/src/referencePackages/src/system.componentmodel.annotations/5.0.0/ref/netstandard1.3/System.ComponentModel.Annotations.cs
+++ /dev/null
@@ -1,570 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.ComponentModel.Annotations")]
-[assembly: System.Reflection.AssemblyDescription("System.ComponentModel.Annotations")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.ComponentModel.Annotations")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.23123.00")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.23123.00 built by: PROJECTKREL")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata("", "")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.ComponentModel.DataAnnotations
-{
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
-    [Obsolete("This attribute is no longer in use and will be ignored if applied.")]
-    public sealed partial class AssociationAttribute : Attribute
-    {
-        public AssociationAttribute(string name, string thisKey, string otherKey) { }
-
-        public bool IsForeignKey { get { throw null; } set { } }
-
-        public string Name { get { throw null; } }
-
-        public string OtherKey { get { throw null; } }
-
-        public Collections.Generic.IEnumerable<string> OtherKeyMembers { get { throw null; } }
-
-        public string ThisKey { get { throw null; } }
-
-        public Collections.Generic.IEnumerable<string> ThisKeyMembers { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)]
-    public partial class CompareAttribute : ValidationAttribute
-    {
-        public CompareAttribute(string otherProperty) { }
-
-        public string OtherProperty { get { throw null; } }
-
-        public string OtherPropertyDisplayName { get { throw null; } }
-
-        public override bool RequiresValidationContext { get { throw null; } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        protected override ValidationResult IsValid(object value, ValidationContext validationContext) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
-    public sealed partial class ConcurrencyCheckAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class CreditCardAttribute : DataTypeAttribute
-    {
-        public CreditCardAttribute() : base(default(DataType)) { }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = true)]
-    public sealed partial class CustomValidationAttribute : ValidationAttribute
-    {
-        public CustomValidationAttribute(Type validatorType, string method) { }
-
-        public string Method { get { throw null; } }
-
-        public Type ValidatorType { get { throw null; } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        protected override ValidationResult IsValid(object value, ValidationContext validationContext) { throw null; }
-    }
-
-    public enum DataType
-    {
-        Custom = 0,
-        DateTime = 1,
-        Date = 2,
-        Time = 3,
-        Duration = 4,
-        PhoneNumber = 5,
-        Currency = 6,
-        Text = 7,
-        Html = 8,
-        MultilineText = 9,
-        EmailAddress = 10,
-        Password = 11,
-        Url = 12,
-        ImageUrl = 13,
-        CreditCard = 14,
-        PostalCode = 15,
-        Upload = 16
-    }
-
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class DataTypeAttribute : ValidationAttribute
-    {
-        public DataTypeAttribute(DataType dataType) { }
-
-        public DataTypeAttribute(string customDataType) { }
-
-        public string CustomDataType { get { throw null; } }
-
-        public DataType DataType { get { throw null; } }
-
-        public DisplayFormatAttribute DisplayFormat { get { throw null; } protected set { } }
-
-        public virtual string GetDataTypeName() { throw null; }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class DisplayAttribute : Attribute
-    {
-        public bool AutoGenerateField { get { throw null; } set { } }
-
-        public bool AutoGenerateFilter { get { throw null; } set { } }
-
-        public string Description { get { throw null; } set { } }
-
-        public string GroupName { get { throw null; } set { } }
-
-        public string Name { get { throw null; } set { } }
-
-        public int Order { get { throw null; } set { } }
-
-        public string Prompt { get { throw null; } set { } }
-
-        public Type ResourceType { get { throw null; } set { } }
-
-        public string ShortName { get { throw null; } set { } }
-
-        public bool? GetAutoGenerateField() { throw null; }
-
-        public bool? GetAutoGenerateFilter() { throw null; }
-
-        public string GetDescription() { throw null; }
-
-        public string GetGroupName() { throw null; }
-
-        public string GetName() { throw null; }
-
-        public int? GetOrder() { throw null; }
-
-        public string GetPrompt() { throw null; }
-
-        public string GetShortName() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = false)]
-    public partial class DisplayColumnAttribute : Attribute
-    {
-        public DisplayColumnAttribute(string displayColumn, string sortColumn, bool sortDescending) { }
-
-        public DisplayColumnAttribute(string displayColumn, string sortColumn) { }
-
-        public DisplayColumnAttribute(string displayColumn) { }
-
-        public string DisplayColumn { get { throw null; } }
-
-        public string SortColumn { get { throw null; } }
-
-        public bool SortDescending { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class DisplayFormatAttribute : Attribute
-    {
-        public bool ApplyFormatInEditMode { get { throw null; } set { } }
-
-        public bool ConvertEmptyStringToNull { get { throw null; } set { } }
-
-        public string DataFormatString { get { throw null; } set { } }
-
-        public bool HtmlEncode { get { throw null; } set { } }
-
-        public string NullDisplayText { get { throw null; } set { } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
-    public sealed partial class EditableAttribute : Attribute
-    {
-        public EditableAttribute(bool allowEdit) { }
-
-        public bool AllowEdit { get { throw null; } }
-
-        public bool AllowInitialValue { get { throw null; } set { } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class EmailAddressAttribute : DataTypeAttribute
-    {
-        public EmailAddressAttribute() : base(default(DataType)) { }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class EnumDataTypeAttribute : DataTypeAttribute
-    {
-        public EnumDataTypeAttribute(Type enumType) : base(default(DataType)) { }
-
-        public Type EnumType { get { throw null; } }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class FileExtensionsAttribute : DataTypeAttribute
-    {
-        public FileExtensionsAttribute() : base(default(DataType)) { }
-
-        public string Extensions { get { throw null; } set { } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    [Obsolete("This attribute is no longer in use and will be ignored if applied.")]
-    public sealed partial class FilterUIHintAttribute : Attribute
-    {
-        public FilterUIHintAttribute(string filterUIHint, string presentationLayer, params object[] controlParameters) { }
-
-        public FilterUIHintAttribute(string filterUIHint, string presentationLayer) { }
-
-        public FilterUIHintAttribute(string filterUIHint) { }
-
-        public Collections.Generic.IDictionary<string, object> ControlParameters { get { throw null; } }
-
-        public string FilterUIHint { get { throw null; } }
-
-        public string PresentationLayer { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-    }
-
-    public partial interface IValidatableObject
-    {
-        Collections.Generic.IEnumerable<ValidationResult> Validate(ValidationContext validationContext);
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
-    public sealed partial class KeyAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class MaxLengthAttribute : ValidationAttribute
-    {
-        public MaxLengthAttribute() { }
-
-        public MaxLengthAttribute(int length) { }
-
-        public int Length { get { throw null; } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class MinLengthAttribute : ValidationAttribute
-    {
-        public MinLengthAttribute(int length) { }
-
-        public int Length { get { throw null; } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class PhoneAttribute : DataTypeAttribute
-    {
-        public PhoneAttribute() : base(default(DataType)) { }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class RangeAttribute : ValidationAttribute
-    {
-        public RangeAttribute(double minimum, double maximum) { }
-
-        public RangeAttribute(int minimum, int maximum) { }
-
-        public RangeAttribute(Type type, string minimum, string maximum) { }
-
-        public object Maximum { get { throw null; } }
-
-        public object Minimum { get { throw null; } }
-
-        public Type OperandType { get { throw null; } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class RegularExpressionAttribute : ValidationAttribute
-    {
-        public RegularExpressionAttribute(string pattern) { }
-
-        public string Pattern { get { throw null; } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class RequiredAttribute : ValidationAttribute
-    {
-        public bool AllowEmptyStrings { get { throw null; } set { } }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class ScaffoldColumnAttribute : Attribute
-    {
-        public ScaffoldColumnAttribute(bool scaffold) { }
-
-        public bool Scaffold { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class StringLengthAttribute : ValidationAttribute
-    {
-        public StringLengthAttribute(int maximumLength) { }
-
-        public int MaximumLength { get { throw null; } }
-
-        public int MinimumLength { get { throw null; } set { } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
-    public sealed partial class TimestampAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)]
-    public partial class UIHintAttribute : Attribute
-    {
-        public UIHintAttribute(string uiHint, string presentationLayer, params object[] controlParameters) { }
-
-        public UIHintAttribute(string uiHint, string presentationLayer) { }
-
-        public UIHintAttribute(string uiHint) { }
-
-        public Collections.Generic.IDictionary<string, object> ControlParameters { get { throw null; } }
-
-        public string PresentationLayer { get { throw null; } }
-
-        public string UIHint { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class UrlAttribute : DataTypeAttribute
-    {
-        public UrlAttribute() : base(default(DataType)) { }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    public abstract partial class ValidationAttribute : Attribute
-    {
-        protected ValidationAttribute() { }
-
-        protected ValidationAttribute(Func<string> errorMessageAccessor) { }
-
-        protected ValidationAttribute(string errorMessage) { }
-
-        public string ErrorMessage { get { throw null; } set { } }
-
-        public string ErrorMessageResourceName { get { throw null; } set { } }
-
-        public Type ErrorMessageResourceType { get { throw null; } set { } }
-
-        protected string ErrorMessageString { get { throw null; } }
-
-        public virtual bool RequiresValidationContext { get { throw null; } }
-
-        public virtual string FormatErrorMessage(string name) { throw null; }
-
-        public ValidationResult GetValidationResult(object value, ValidationContext validationContext) { throw null; }
-
-        protected virtual ValidationResult IsValid(object value, ValidationContext validationContext) { throw null; }
-
-        public virtual bool IsValid(object value) { throw null; }
-
-        public void Validate(object value, ValidationContext validationContext) { }
-
-        public void Validate(object value, string name) { }
-    }
-
-    public sealed partial class ValidationContext : IServiceProvider
-    {
-        public ValidationContext(object instance, Collections.Generic.IDictionary<object, object> items) { }
-
-        public ValidationContext(object instance, IServiceProvider serviceProvider, Collections.Generic.IDictionary<object, object> items) { }
-
-        public ValidationContext(object instance) { }
-
-        public string DisplayName { get { throw null; } set { } }
-
-        public Collections.Generic.IDictionary<object, object> Items { get { throw null; } }
-
-        public string MemberName { get { throw null; } set { } }
-
-        public object ObjectInstance { get { throw null; } }
-
-        public Type ObjectType { get { throw null; } }
-
-        public object GetService(Type serviceType) { throw null; }
-
-        public void InitializeServiceProvider(Func<Type, object> serviceProvider) { }
-    }
-
-    public partial class ValidationException : Exception
-    {
-        public ValidationException() { }
-
-        public ValidationException(ValidationResult validationResult, ValidationAttribute validatingAttribute, object value) { }
-
-        public ValidationException(string errorMessage, ValidationAttribute validatingAttribute, object value) { }
-
-        public ValidationException(string message, Exception innerException) { }
-
-        public ValidationException(string message) { }
-
-        public ValidationAttribute ValidationAttribute { get { throw null; } }
-
-        public ValidationResult ValidationResult { get { throw null; } }
-
-        public object Value { get { throw null; } }
-    }
-
-    public partial class ValidationResult
-    {
-        public static readonly ValidationResult Success;
-        protected ValidationResult(ValidationResult validationResult) { }
-
-        public ValidationResult(string errorMessage, Collections.Generic.IEnumerable<string> memberNames) { }
-
-        public ValidationResult(string errorMessage) { }
-
-        public string ErrorMessage { get { throw null; } set { } }
-
-        public Collections.Generic.IEnumerable<string> MemberNames { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public static partial class Validator
-    {
-        public static bool TryValidateObject(object instance, ValidationContext validationContext, Collections.Generic.ICollection<ValidationResult> validationResults, bool validateAllProperties) { throw null; }
-
-        public static bool TryValidateObject(object instance, ValidationContext validationContext, Collections.Generic.ICollection<ValidationResult> validationResults) { throw null; }
-
-        public static bool TryValidateProperty(object value, ValidationContext validationContext, Collections.Generic.ICollection<ValidationResult> validationResults) { throw null; }
-
-        public static bool TryValidateValue(object value, ValidationContext validationContext, Collections.Generic.ICollection<ValidationResult> validationResults, Collections.Generic.IEnumerable<ValidationAttribute> validationAttributes) { throw null; }
-
-        public static void ValidateObject(object instance, ValidationContext validationContext, bool validateAllProperties) { }
-
-        public static void ValidateObject(object instance, ValidationContext validationContext) { }
-
-        public static void ValidateProperty(object value, ValidationContext validationContext) { }
-
-        public static void ValidateValue(object value, ValidationContext validationContext, Collections.Generic.IEnumerable<ValidationAttribute> validationAttributes) { }
-    }
-}
-
-namespace System.ComponentModel.DataAnnotations.Schema
-{
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class ColumnAttribute : Attribute
-    {
-        public ColumnAttribute() { }
-
-        public ColumnAttribute(string name) { }
-
-        public string Name { get { throw null; } }
-
-        public int Order { get { throw null; } set { } }
-
-        public string TypeName { get { throw null; } set { } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
-    public partial class ComplexTypeAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class DatabaseGeneratedAttribute : Attribute
-    {
-        public DatabaseGeneratedAttribute(DatabaseGeneratedOption databaseGeneratedOption) { }
-
-        public DatabaseGeneratedOption DatabaseGeneratedOption { get { throw null; } }
-    }
-
-    public enum DatabaseGeneratedOption
-    {
-        None = 0,
-        Identity = 1,
-        Computed = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class ForeignKeyAttribute : Attribute
-    {
-        public ForeignKeyAttribute(string name) { }
-
-        public string Name { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class InversePropertyAttribute : Attribute
-    {
-        public InversePropertyAttribute(string property) { }
-
-        public string Property { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class NotMappedAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
-    public partial class TableAttribute : Attribute
-    {
-        public TableAttribute(string name) { }
-
-        public string Name { get { throw null; } }
-
-        public string Schema { get { throw null; } set { } }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.componentmodel.annotations/5.0.0/ref/netstandard1.4/System.ComponentModel.Annotations.cs b/src/referencePackages/src/system.componentmodel.annotations/5.0.0/ref/netstandard1.4/System.ComponentModel.Annotations.cs
deleted file mode 100644
index 35ab96db..00000000
--- a/src/referencePackages/src/system.componentmodel.annotations/5.0.0/ref/netstandard1.4/System.ComponentModel.Annotations.cs
+++ /dev/null
@@ -1,573 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.ComponentModel.Annotations")]
-[assembly: System.Reflection.AssemblyDescription("System.ComponentModel.Annotations")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.ComponentModel.Annotations")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.ComponentModel.DataAnnotations
-{
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
-    [Obsolete("This attribute is no longer in use and will be ignored if applied.")]
-    public sealed partial class AssociationAttribute : Attribute
-    {
-        public AssociationAttribute(string name, string thisKey, string otherKey) { }
-
-        public bool IsForeignKey { get { throw null; } set { } }
-
-        public string Name { get { throw null; } }
-
-        public string OtherKey { get { throw null; } }
-
-        public Collections.Generic.IEnumerable<string> OtherKeyMembers { get { throw null; } }
-
-        public string ThisKey { get { throw null; } }
-
-        public Collections.Generic.IEnumerable<string> ThisKeyMembers { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)]
-    public partial class CompareAttribute : ValidationAttribute
-    {
-        public CompareAttribute(string otherProperty) { }
-
-        public string OtherProperty { get { throw null; } }
-
-        public string OtherPropertyDisplayName { get { throw null; } }
-
-        public override bool RequiresValidationContext { get { throw null; } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        protected override ValidationResult IsValid(object value, ValidationContext validationContext) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
-    public sealed partial class ConcurrencyCheckAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class CreditCardAttribute : DataTypeAttribute
-    {
-        public CreditCardAttribute() : base(default(DataType)) { }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = true)]
-    public sealed partial class CustomValidationAttribute : ValidationAttribute
-    {
-        public CustomValidationAttribute(Type validatorType, string method) { }
-
-        public string Method { get { throw null; } }
-
-        public Type ValidatorType { get { throw null; } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        protected override ValidationResult IsValid(object value, ValidationContext validationContext) { throw null; }
-    }
-
-    public enum DataType
-    {
-        Custom = 0,
-        DateTime = 1,
-        Date = 2,
-        Time = 3,
-        Duration = 4,
-        PhoneNumber = 5,
-        Currency = 6,
-        Text = 7,
-        Html = 8,
-        MultilineText = 9,
-        EmailAddress = 10,
-        Password = 11,
-        Url = 12,
-        ImageUrl = 13,
-        CreditCard = 14,
-        PostalCode = 15,
-        Upload = 16
-    }
-
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class DataTypeAttribute : ValidationAttribute
-    {
-        public DataTypeAttribute(DataType dataType) { }
-
-        public DataTypeAttribute(string customDataType) { }
-
-        public string CustomDataType { get { throw null; } }
-
-        public DataType DataType { get { throw null; } }
-
-        public DisplayFormatAttribute DisplayFormat { get { throw null; } protected set { } }
-
-        public virtual string GetDataTypeName() { throw null; }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class DisplayAttribute : Attribute
-    {
-        public bool AutoGenerateField { get { throw null; } set { } }
-
-        public bool AutoGenerateFilter { get { throw null; } set { } }
-
-        public string Description { get { throw null; } set { } }
-
-        public string GroupName { get { throw null; } set { } }
-
-        public string Name { get { throw null; } set { } }
-
-        public int Order { get { throw null; } set { } }
-
-        public string Prompt { get { throw null; } set { } }
-
-        public Type ResourceType { get { throw null; } set { } }
-
-        public string ShortName { get { throw null; } set { } }
-
-        public bool? GetAutoGenerateField() { throw null; }
-
-        public bool? GetAutoGenerateFilter() { throw null; }
-
-        public string GetDescription() { throw null; }
-
-        public string GetGroupName() { throw null; }
-
-        public string GetName() { throw null; }
-
-        public int? GetOrder() { throw null; }
-
-        public string GetPrompt() { throw null; }
-
-        public string GetShortName() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = false)]
-    public partial class DisplayColumnAttribute : Attribute
-    {
-        public DisplayColumnAttribute(string displayColumn, string sortColumn, bool sortDescending) { }
-
-        public DisplayColumnAttribute(string displayColumn, string sortColumn) { }
-
-        public DisplayColumnAttribute(string displayColumn) { }
-
-        public string DisplayColumn { get { throw null; } }
-
-        public string SortColumn { get { throw null; } }
-
-        public bool SortDescending { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class DisplayFormatAttribute : Attribute
-    {
-        public bool ApplyFormatInEditMode { get { throw null; } set { } }
-
-        public bool ConvertEmptyStringToNull { get { throw null; } set { } }
-
-        public string DataFormatString { get { throw null; } set { } }
-
-        public bool HtmlEncode { get { throw null; } set { } }
-
-        public string NullDisplayText { get { throw null; } set { } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
-    public sealed partial class EditableAttribute : Attribute
-    {
-        public EditableAttribute(bool allowEdit) { }
-
-        public bool AllowEdit { get { throw null; } }
-
-        public bool AllowInitialValue { get { throw null; } set { } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class EmailAddressAttribute : DataTypeAttribute
-    {
-        public EmailAddressAttribute() : base(default(DataType)) { }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class EnumDataTypeAttribute : DataTypeAttribute
-    {
-        public EnumDataTypeAttribute(Type enumType) : base(default(DataType)) { }
-
-        public Type EnumType { get { throw null; } }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class FileExtensionsAttribute : DataTypeAttribute
-    {
-        public FileExtensionsAttribute() : base(default(DataType)) { }
-
-        public string Extensions { get { throw null; } set { } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    [Obsolete("This attribute is no longer in use and will be ignored if applied.")]
-    public sealed partial class FilterUIHintAttribute : Attribute
-    {
-        public FilterUIHintAttribute(string filterUIHint, string presentationLayer, params object[] controlParameters) { }
-
-        public FilterUIHintAttribute(string filterUIHint, string presentationLayer) { }
-
-        public FilterUIHintAttribute(string filterUIHint) { }
-
-        public Collections.Generic.IDictionary<string, object> ControlParameters { get { throw null; } }
-
-        public string FilterUIHint { get { throw null; } }
-
-        public string PresentationLayer { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-    }
-
-    public partial interface IValidatableObject
-    {
-        Collections.Generic.IEnumerable<ValidationResult> Validate(ValidationContext validationContext);
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
-    public sealed partial class KeyAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class MaxLengthAttribute : ValidationAttribute
-    {
-        public MaxLengthAttribute() { }
-
-        public MaxLengthAttribute(int length) { }
-
-        public int Length { get { throw null; } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class MinLengthAttribute : ValidationAttribute
-    {
-        public MinLengthAttribute(int length) { }
-
-        public int Length { get { throw null; } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class PhoneAttribute : DataTypeAttribute
-    {
-        public PhoneAttribute() : base(default(DataType)) { }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class RangeAttribute : ValidationAttribute
-    {
-        public RangeAttribute(double minimum, double maximum) { }
-
-        public RangeAttribute(int minimum, int maximum) { }
-
-        public RangeAttribute(Type type, string minimum, string maximum) { }
-
-        public object Maximum { get { throw null; } }
-
-        public object Minimum { get { throw null; } }
-
-        public Type OperandType { get { throw null; } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class RegularExpressionAttribute : ValidationAttribute
-    {
-        public RegularExpressionAttribute(string pattern) { }
-
-        public int MatchTimeoutInMilliseconds { get { throw null; } set { } }
-
-        public string Pattern { get { throw null; } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class RequiredAttribute : ValidationAttribute
-    {
-        public bool AllowEmptyStrings { get { throw null; } set { } }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class ScaffoldColumnAttribute : Attribute
-    {
-        public ScaffoldColumnAttribute(bool scaffold) { }
-
-        public bool Scaffold { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public partial class StringLengthAttribute : ValidationAttribute
-    {
-        public StringLengthAttribute(int maximumLength) { }
-
-        public int MaximumLength { get { throw null; } }
-
-        public int MinimumLength { get { throw null; } set { } }
-
-        public override string FormatErrorMessage(string name) { throw null; }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
-    public sealed partial class TimestampAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = true)]
-    public partial class UIHintAttribute : Attribute
-    {
-        public UIHintAttribute(string uiHint, string presentationLayer, params object[] controlParameters) { }
-
-        public UIHintAttribute(string uiHint, string presentationLayer) { }
-
-        public UIHintAttribute(string uiHint) { }
-
-        public Collections.Generic.IDictionary<string, object> ControlParameters { get { throw null; } }
-
-        public string PresentationLayer { get { throw null; } }
-
-        public string UIHint { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
-    public sealed partial class UrlAttribute : DataTypeAttribute
-    {
-        public UrlAttribute() : base(default(DataType)) { }
-
-        public override bool IsValid(object value) { throw null; }
-    }
-
-    public abstract partial class ValidationAttribute : Attribute
-    {
-        protected ValidationAttribute() { }
-
-        protected ValidationAttribute(Func<string> errorMessageAccessor) { }
-
-        protected ValidationAttribute(string errorMessage) { }
-
-        public string ErrorMessage { get { throw null; } set { } }
-
-        public string ErrorMessageResourceName { get { throw null; } set { } }
-
-        public Type ErrorMessageResourceType { get { throw null; } set { } }
-
-        protected string ErrorMessageString { get { throw null; } }
-
-        public virtual bool RequiresValidationContext { get { throw null; } }
-
-        public virtual string FormatErrorMessage(string name) { throw null; }
-
-        public ValidationResult GetValidationResult(object value, ValidationContext validationContext) { throw null; }
-
-        protected virtual ValidationResult IsValid(object value, ValidationContext validationContext) { throw null; }
-
-        public virtual bool IsValid(object value) { throw null; }
-
-        public void Validate(object value, ValidationContext validationContext) { }
-
-        public void Validate(object value, string name) { }
-    }
-
-    public sealed partial class ValidationContext : IServiceProvider
-    {
-        public ValidationContext(object instance, Collections.Generic.IDictionary<object, object> items) { }
-
-        public ValidationContext(object instance, IServiceProvider serviceProvider, Collections.Generic.IDictionary<object, object> items) { }
-
-        public ValidationContext(object instance) { }
-
-        public string DisplayName { get { throw null; } set { } }
-
-        public Collections.Generic.IDictionary<object, object> Items { get { throw null; } }
-
-        public string MemberName { get { throw null; } set { } }
-
-        public object ObjectInstance { get { throw null; } }
-
-        public Type ObjectType { get { throw null; } }
-
-        public object GetService(Type serviceType) { throw null; }
-
-        public void InitializeServiceProvider(Func<Type, object> serviceProvider) { }
-    }
-
-    public partial class ValidationException : Exception
-    {
-        public ValidationException() { }
-
-        public ValidationException(ValidationResult validationResult, ValidationAttribute validatingAttribute, object value) { }
-
-        public ValidationException(string errorMessage, ValidationAttribute validatingAttribute, object value) { }
-
-        public ValidationException(string message, Exception innerException) { }
-
-        public ValidationException(string message) { }
-
-        public ValidationAttribute ValidationAttribute { get { throw null; } }
-
-        public ValidationResult ValidationResult { get { throw null; } }
-
-        public object Value { get { throw null; } }
-    }
-
-    public partial class ValidationResult
-    {
-        public static readonly ValidationResult Success;
-        protected ValidationResult(ValidationResult validationResult) { }
-
-        public ValidationResult(string errorMessage, Collections.Generic.IEnumerable<string> memberNames) { }
-
-        public ValidationResult(string errorMessage) { }
-
-        public string ErrorMessage { get { throw null; } set { } }
-
-        public Collections.Generic.IEnumerable<string> MemberNames { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public static partial class Validator
-    {
-        public static bool TryValidateObject(object instance, ValidationContext validationContext, Collections.Generic.ICollection<ValidationResult> validationResults, bool validateAllProperties) { throw null; }
-
-        public static bool TryValidateObject(object instance, ValidationContext validationContext, Collections.Generic.ICollection<ValidationResult> validationResults) { throw null; }
-
-        public static bool TryValidateProperty(object value, ValidationContext validationContext, Collections.Generic.ICollection<ValidationResult> validationResults) { throw null; }
-
-        public static bool TryValidateValue(object value, ValidationContext validationContext, Collections.Generic.ICollection<ValidationResult> validationResults, Collections.Generic.IEnumerable<ValidationAttribute> validationAttributes) { throw null; }
-
-        public static void ValidateObject(object instance, ValidationContext validationContext, bool validateAllProperties) { }
-
-        public static void ValidateObject(object instance, ValidationContext validationContext) { }
-
-        public static void ValidateProperty(object value, ValidationContext validationContext) { }
-
-        public static void ValidateValue(object value, ValidationContext validationContext, Collections.Generic.IEnumerable<ValidationAttribute> validationAttributes) { }
-    }
-}
-
-namespace System.ComponentModel.DataAnnotations.Schema
-{
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class ColumnAttribute : Attribute
-    {
-        public ColumnAttribute() { }
-
-        public ColumnAttribute(string name) { }
-
-        public string Name { get { throw null; } }
-
-        public int Order { get { throw null; } set { } }
-
-        public string TypeName { get { throw null; } set { } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
-    public partial class ComplexTypeAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class DatabaseGeneratedAttribute : Attribute
-    {
-        public DatabaseGeneratedAttribute(DatabaseGeneratedOption databaseGeneratedOption) { }
-
-        public DatabaseGeneratedOption DatabaseGeneratedOption { get { throw null; } }
-    }
-
-    public enum DatabaseGeneratedOption
-    {
-        None = 0,
-        Identity = 1,
-        Computed = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class ForeignKeyAttribute : Attribute
-    {
-        public ForeignKeyAttribute(string name) { }
-
-        public string Name { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class InversePropertyAttribute : Attribute
-    {
-        public InversePropertyAttribute(string property) { }
-
-        public string Property { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public partial class NotMappedAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
-    public partial class TableAttribute : Attribute
-    {
-        public TableAttribute(string name) { }
-
-        public string Name { get { throw null; } }
-
-        public string Schema { get { throw null; } set { } }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.componentmodel.annotations/5.0.0/system.componentmodel.annotations.nuspec b/src/referencePackages/src/system.componentmodel.annotations/5.0.0/system.componentmodel.annotations.nuspec
index 21698f21..fb1846f0 100644
--- a/src/referencePackages/src/system.componentmodel.annotations/5.0.0/system.componentmodel.annotations.nuspec
+++ b/src/referencePackages/src/system.componentmodel.annotations/5.0.0/system.componentmodel.annotations.nuspec
@@ -31,17 +31,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <serviceable>true</serviceable>
     <repository type="git" url="git://github.com/dotnet/runtime" commit="cf258a14b70ad9069470a108f13765e0e5988f51" />
     <dependencies>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-        <dependency id="System.ComponentModel" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.4">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-        <dependency id="System.ComponentModel" version="4.3.0" />
-      </group>
       <group targetFramework=".NETStandard2.0" />
       <group targetFramework=".NETStandard2.1" />
     </dependencies>
diff --git a/src/referencePackages/src/system.componentmodel/4.3.0/System.ComponentModel.4.3.0.csproj b/src/referencePackages/src/system.componentmodel/4.3.0/System.ComponentModel.4.3.0.csproj
deleted file mode 100644
index 41a69fc8..00000000
--- a/src/referencePackages/src/system.componentmodel/4.3.0/System.ComponentModel.4.3.0.csproj
+++ /dev/null
@@ -1,12 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0</TargetFrameworks>
-    <AssemblyName>System.ComponentModel</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.componentmodel/4.3.0/ref/netstandard1.0/System.ComponentModel.cs b/src/referencePackages/src/system.componentmodel/4.3.0/ref/netstandard1.0/System.ComponentModel.cs
deleted file mode 100644
index c832d21f..00000000
--- a/src/referencePackages/src/system.componentmodel/4.3.0/ref/netstandard1.0/System.ComponentModel.cs
+++ /dev/null
@@ -1,62 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.ComponentModel")]
-[assembly: System.Reflection.AssemblyDescription("System.ComponentModel")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.ComponentModel")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public partial interface IServiceProvider
-    {
-        object GetService(Type serviceType);
-    }
-}
-
-namespace System.ComponentModel
-{
-    public partial class CancelEventArgs : EventArgs
-    {
-        public CancelEventArgs() { }
-
-        public CancelEventArgs(bool cancel) { }
-
-        public bool Cancel { get { throw null; } set { } }
-    }
-
-    public partial interface IChangeTracking
-    {
-        bool IsChanged { get; }
-
-        void AcceptChanges();
-    }
-
-    public partial interface IEditableObject
-    {
-        void BeginEdit();
-        void CancelEdit();
-        void EndEdit();
-    }
-
-    public partial interface IRevertibleChangeTracking : IChangeTracking
-    {
-        void RejectChanges();
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.componentmodel/4.3.0/system.componentmodel.nuspec b/src/referencePackages/src/system.componentmodel/4.3.0/system.componentmodel.nuspec
deleted file mode 100644
index 59333582..00000000
--- a/src/referencePackages/src/system.componentmodel/4.3.0/system.componentmodel.nuspec
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.ComponentModel</id>
-    <version>4.3.0</version>
-    <title>System.ComponentModel</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides interfaces for the editing and change tracking of objects used as data sources.
-
-Commonly Used Types:
-System.ComponentModel.CancelEventArgs
-System.IServiceProvider
-System.ComponentModel.IEditableObject
-System.ComponentModel.IChangeTracking
-System.ComponentModel.IRevertibleChangeTracking
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.console/4.3.0/System.Console.4.3.0.csproj b/src/referencePackages/src/system.console/4.3.0/System.Console.4.3.0.csproj
deleted file mode 100644
index 0f9f0637..00000000
--- a/src/referencePackages/src/system.console/4.3.0/System.Console.4.3.0.csproj
+++ /dev/null
@@ -1,16 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Console</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.console/4.3.0/ref/netstandard1.3/System.Console.cs b/src/referencePackages/src/system.console/4.3.0/ref/netstandard1.3/System.Console.cs
deleted file mode 100644
index f7e6f0ae..00000000
--- a/src/referencePackages/src/system.console/4.3.0/ref/netstandard1.3/System.Console.cs
+++ /dev/null
@@ -1,380 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Console")]
-[assembly: System.Reflection.AssemblyDescription("System.Console")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Console")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public static partial class Console
-    {
-        public static ConsoleColor BackgroundColor { get { throw null; } set { } }
-
-        public static int BufferHeight { get { throw null; } set { } }
-
-        public static int BufferWidth { get { throw null; } set { } }
-
-        public static bool CapsLock { get { throw null; } }
-
-        public static int CursorLeft { get { throw null; } set { } }
-
-        public static int CursorSize { get { throw null; } set { } }
-
-        public static int CursorTop { get { throw null; } set { } }
-
-        public static bool CursorVisible { get { throw null; } set { } }
-
-        public static IO.TextWriter Error { get { throw null; } }
-
-        public static ConsoleColor ForegroundColor { get { throw null; } set { } }
-
-        public static IO.TextReader In { get { throw null; } }
-
-        public static Text.Encoding InputEncoding { get { throw null; } set { } }
-
-        public static bool IsErrorRedirected { get { throw null; } }
-
-        public static bool IsInputRedirected { get { throw null; } }
-
-        public static bool IsOutputRedirected { get { throw null; } }
-
-        public static bool KeyAvailable { get { throw null; } }
-
-        public static int LargestWindowHeight { get { throw null; } }
-
-        public static int LargestWindowWidth { get { throw null; } }
-
-        public static bool NumberLock { get { throw null; } }
-
-        public static IO.TextWriter Out { get { throw null; } }
-
-        public static Text.Encoding OutputEncoding { get { throw null; } set { } }
-
-        public static string Title { get { throw null; } set { } }
-
-        public static bool TreatControlCAsInput { get { throw null; } set { } }
-
-        public static int WindowHeight { get { throw null; } set { } }
-
-        public static int WindowLeft { get { throw null; } set { } }
-
-        public static int WindowTop { get { throw null; } set { } }
-
-        public static int WindowWidth { get { throw null; } set { } }
-
-        public static event ConsoleCancelEventHandler CancelKeyPress { add { } remove { } }
-
-        public static void Beep() { }
-
-        public static void Beep(int frequency, int duration) { }
-
-        public static void Clear() { }
-
-        public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor) { }
-
-        public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop) { }
-
-        public static IO.Stream OpenStandardError() { throw null; }
-
-        public static IO.Stream OpenStandardInput() { throw null; }
-
-        public static IO.Stream OpenStandardOutput() { throw null; }
-
-        public static int Read() { throw null; }
-
-        public static ConsoleKeyInfo ReadKey() { throw null; }
-
-        public static ConsoleKeyInfo ReadKey(bool intercept) { throw null; }
-
-        public static string ReadLine() { throw null; }
-
-        public static void ResetColor() { }
-
-        public static void SetBufferSize(int width, int height) { }
-
-        public static void SetCursorPosition(int left, int top) { }
-
-        public static void SetError(IO.TextWriter newError) { }
-
-        public static void SetIn(IO.TextReader newIn) { }
-
-        public static void SetOut(IO.TextWriter newOut) { }
-
-        public static void SetWindowPosition(int left, int top) { }
-
-        public static void SetWindowSize(int width, int height) { }
-
-        public static void Write(bool value) { }
-
-        public static void Write(char value) { }
-
-        public static void Write(char[] buffer, int index, int count) { }
-
-        public static void Write(char[] buffer) { }
-
-        public static void Write(decimal value) { }
-
-        public static void Write(double value) { }
-
-        public static void Write(int value) { }
-
-        public static void Write(long value) { }
-
-        public static void Write(object value) { }
-
-        public static void Write(float value) { }
-
-        public static void Write(string format, object arg0, object arg1, object arg2) { }
-
-        public static void Write(string format, object arg0, object arg1) { }
-
-        public static void Write(string format, object arg0) { }
-
-        public static void Write(string format, params object[] arg) { }
-
-        public static void Write(string value) { }
-
-        [CLSCompliant(false)]
-        public static void Write(uint value) { }
-
-        [CLSCompliant(false)]
-        public static void Write(ulong value) { }
-
-        public static void WriteLine() { }
-
-        public static void WriteLine(bool value) { }
-
-        public static void WriteLine(char value) { }
-
-        public static void WriteLine(char[] buffer, int index, int count) { }
-
-        public static void WriteLine(char[] buffer) { }
-
-        public static void WriteLine(decimal value) { }
-
-        public static void WriteLine(double value) { }
-
-        public static void WriteLine(int value) { }
-
-        public static void WriteLine(long value) { }
-
-        public static void WriteLine(object value) { }
-
-        public static void WriteLine(float value) { }
-
-        public static void WriteLine(string format, object arg0, object arg1, object arg2) { }
-
-        public static void WriteLine(string format, object arg0, object arg1) { }
-
-        public static void WriteLine(string format, object arg0) { }
-
-        public static void WriteLine(string format, params object[] arg) { }
-
-        public static void WriteLine(string value) { }
-
-        [CLSCompliant(false)]
-        public static void WriteLine(uint value) { }
-
-        [CLSCompliant(false)]
-        public static void WriteLine(ulong value) { }
-    }
-
-    public sealed partial class ConsoleCancelEventArgs : EventArgs
-    {
-        internal ConsoleCancelEventArgs() { }
-
-        public bool Cancel { get { throw null; } set { } }
-
-        public ConsoleSpecialKey SpecialKey { get { throw null; } }
-    }
-
-    public delegate void ConsoleCancelEventHandler(object sender, ConsoleCancelEventArgs e);
-    public enum ConsoleColor
-    {
-        Black = 0,
-        DarkBlue = 1,
-        DarkGreen = 2,
-        DarkCyan = 3,
-        DarkRed = 4,
-        DarkMagenta = 5,
-        DarkYellow = 6,
-        Gray = 7,
-        DarkGray = 8,
-        Blue = 9,
-        Green = 10,
-        Cyan = 11,
-        Red = 12,
-        Magenta = 13,
-        Yellow = 14,
-        White = 15
-    }
-
-    public enum ConsoleKey
-    {
-        Backspace = 8,
-        Tab = 9,
-        Clear = 12,
-        Enter = 13,
-        Pause = 19,
-        Escape = 27,
-        Spacebar = 32,
-        PageUp = 33,
-        PageDown = 34,
-        End = 35,
-        Home = 36,
-        LeftArrow = 37,
-        UpArrow = 38,
-        RightArrow = 39,
-        DownArrow = 40,
-        Select = 41,
-        Print = 42,
-        Execute = 43,
-        PrintScreen = 44,
-        Insert = 45,
-        Delete = 46,
-        Help = 47,
-        D0 = 48,
-        D1 = 49,
-        D2 = 50,
-        D3 = 51,
-        D4 = 52,
-        D5 = 53,
-        D6 = 54,
-        D7 = 55,
-        D8 = 56,
-        D9 = 57,
-        A = 65,
-        B = 66,
-        C = 67,
-        D = 68,
-        E = 69,
-        F = 70,
-        G = 71,
-        H = 72,
-        I = 73,
-        J = 74,
-        K = 75,
-        L = 76,
-        M = 77,
-        N = 78,
-        O = 79,
-        P = 80,
-        Q = 81,
-        R = 82,
-        S = 83,
-        T = 84,
-        U = 85,
-        V = 86,
-        W = 87,
-        X = 88,
-        Y = 89,
-        Z = 90,
-        Sleep = 95,
-        NumPad0 = 96,
-        NumPad1 = 97,
-        NumPad2 = 98,
-        NumPad3 = 99,
-        NumPad4 = 100,
-        NumPad5 = 101,
-        NumPad6 = 102,
-        NumPad7 = 103,
-        NumPad8 = 104,
-        NumPad9 = 105,
-        Multiply = 106,
-        Add = 107,
-        Separator = 108,
-        Subtract = 109,
-        Decimal = 110,
-        Divide = 111,
-        F1 = 112,
-        F2 = 113,
-        F3 = 114,
-        F4 = 115,
-        F5 = 116,
-        F6 = 117,
-        F7 = 118,
-        F8 = 119,
-        F9 = 120,
-        F10 = 121,
-        F11 = 122,
-        F12 = 123,
-        F13 = 124,
-        F14 = 125,
-        F15 = 126,
-        F16 = 127,
-        F17 = 128,
-        F18 = 129,
-        F19 = 130,
-        F20 = 131,
-        F21 = 132,
-        F22 = 133,
-        F23 = 134,
-        F24 = 135,
-        Oem1 = 186,
-        OemPlus = 187,
-        OemComma = 188,
-        OemMinus = 189,
-        OemPeriod = 190,
-        Oem2 = 191,
-        Oem3 = 192,
-        Oem4 = 219,
-        Oem5 = 220,
-        Oem6 = 221,
-        Oem7 = 222,
-        Oem8 = 223,
-        OemClear = 254
-    }
-
-    public partial struct ConsoleKeyInfo
-    {
-        public ConsoleKeyInfo(char keyChar, ConsoleKey key, bool shift, bool alt, bool control) { }
-
-        public ConsoleKey Key { get { throw null; } }
-
-        public char KeyChar { get { throw null; } }
-
-        public ConsoleModifiers Modifiers { get { throw null; } }
-
-        public bool Equals(ConsoleKeyInfo obj) { throw null; }
-
-        public override bool Equals(object value) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(ConsoleKeyInfo a, ConsoleKeyInfo b) { throw null; }
-
-        public static bool operator !=(ConsoleKeyInfo a, ConsoleKeyInfo b) { throw null; }
-    }
-
-    [Flags]
-    public enum ConsoleModifiers
-    {
-        Alt = 1,
-        Shift = 2,
-        Control = 4
-    }
-
-    public enum ConsoleSpecialKey
-    {
-        ControlC = 0,
-        ControlBreak = 1
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.console/4.3.0/system.console.nuspec b/src/referencePackages/src/system.console/4.3.0/system.console.nuspec
deleted file mode 100644
index 3e3005dd..00000000
--- a/src/referencePackages/src/system.console/4.3.0/system.console.nuspec
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Console</id>
-    <version>4.3.0</version>
-    <title>System.Console</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides the System.Console class, which represents the standard input, output and error streams for console applications.
-
-Commonly Used Types:
-System.Console
-System.ConsoleColor
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.diagnostics.debug/4.3.0/System.Diagnostics.Debug.4.3.0.csproj b/src/referencePackages/src/system.diagnostics.debug/4.3.0/System.Diagnostics.Debug.4.3.0.csproj
deleted file mode 100644
index f5c1b376..00000000
--- a/src/referencePackages/src/system.diagnostics.debug/4.3.0/System.Diagnostics.Debug.4.3.0.csproj
+++ /dev/null
@@ -1,20 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Diagnostics.Debug</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.diagnostics.debug/4.3.0/ref/netstandard1.0/System.Diagnostics.Debug.cs b/src/referencePackages/src/system.diagnostics.debug/4.3.0/ref/netstandard1.0/System.Diagnostics.Debug.cs
deleted file mode 100644
index 9ee18736..00000000
--- a/src/referencePackages/src/system.diagnostics.debug/4.3.0/ref/netstandard1.0/System.Diagnostics.Debug.cs
+++ /dev/null
@@ -1,107 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Reflection.AssemblyDescription("System.Diagnostics.Debug.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Diagnostics.Debug.dll")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyTitle("System.Diagnostics.Debug.dll")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Diagnostics
-{
-    public static partial class Debug
-    {
-        public static void Assert(bool condition, string message) { }
-
-        public static void Assert(bool condition) { }
-
-        public static void WriteLine(object value) { }
-
-        public static void WriteLine(string format, params object[] args) { }
-
-        public static void WriteLine(string message) { }
-
-        public static void WriteLineIf(bool condition, string message) { }
-    }
-
-    public static partial class Debugger
-    {
-        public static bool IsAttached { get { throw null; } }
-
-        public static void Break() { }
-
-        public static bool Launch() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public sealed partial class DebuggerBrowsableAttribute : Attribute
-    {
-        public DebuggerBrowsableAttribute(DebuggerBrowsableState state) { }
-
-        public DebuggerBrowsableState State { get { throw null; } }
-    }
-
-    public enum DebuggerBrowsableState
-    {
-        Never = 0,
-        Collapsed = 2,
-        RootHidden = 3
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Delegate, AllowMultiple = true)]
-    public sealed partial class DebuggerDisplayAttribute : Attribute
-    {
-        public DebuggerDisplayAttribute(string value) { }
-
-        public string Name { get { throw null; } set { } }
-
-        public Type Target { get { throw null; } set { } }
-
-        public string TargetTypeName { get { throw null; } set { } }
-
-        public string Type { get { throw null; } set { } }
-
-        public string Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property, Inherited = false)]
-    public sealed partial class DebuggerHiddenAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property, Inherited = false)]
-    public sealed partial class DebuggerNonUserCodeAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Constructor | AttributeTargets.Method, Inherited = false)]
-    public sealed partial class DebuggerStepThroughAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)]
-    public sealed partial class DebuggerTypeProxyAttribute : Attribute
-    {
-        public DebuggerTypeProxyAttribute(string typeName) { }
-
-        public DebuggerTypeProxyAttribute(Type type) { }
-
-        public string ProxyTypeName { get { throw null; } }
-
-        public Type Target { get { throw null; } set { } }
-
-        public string TargetTypeName { get { throw null; } set { } }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.diagnostics.debug/4.3.0/ref/netstandard1.3/System.Diagnostics.Debug.cs b/src/referencePackages/src/system.diagnostics.debug/4.3.0/ref/netstandard1.3/System.Diagnostics.Debug.cs
deleted file mode 100644
index 610a89cd..00000000
--- a/src/referencePackages/src/system.diagnostics.debug/4.3.0/ref/netstandard1.3/System.Diagnostics.Debug.cs
+++ /dev/null
@@ -1,144 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Diagnostics.Debug")]
-[assembly: System.Reflection.AssemblyDescription("System.Diagnostics.Debug")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Diagnostics.Debug")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Diagnostics
-{
-    public static partial class Debug
-    {
-        public static void Assert(bool condition, string message, string detailMessageFormat, params object[] args) { }
-
-        public static void Assert(bool condition, string message, string detailMessage) { }
-
-        public static void Assert(bool condition, string message) { }
-
-        public static void Assert(bool condition) { }
-
-        public static void Fail(string message, string detailMessage) { }
-
-        public static void Fail(string message) { }
-
-        public static void Write(object value, string category) { }
-
-        public static void Write(object value) { }
-
-        public static void Write(string message, string category) { }
-
-        public static void Write(string message) { }
-
-        public static void WriteIf(bool condition, object value, string category) { }
-
-        public static void WriteIf(bool condition, object value) { }
-
-        public static void WriteIf(bool condition, string message, string category) { }
-
-        public static void WriteIf(bool condition, string message) { }
-
-        public static void WriteLine(object value, string category) { }
-
-        public static void WriteLine(object value) { }
-
-        public static void WriteLine(string format, params object[] args) { }
-
-        public static void WriteLine(string message, string category) { }
-
-        public static void WriteLine(string message) { }
-
-        public static void WriteLineIf(bool condition, object value, string category) { }
-
-        public static void WriteLineIf(bool condition, object value) { }
-
-        public static void WriteLineIf(bool condition, string message, string category) { }
-
-        public static void WriteLineIf(bool condition, string message) { }
-    }
-
-    public static partial class Debugger
-    {
-        public static bool IsAttached { get { throw null; } }
-
-        public static void Break() { }
-
-        public static bool Launch() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false)]
-    public sealed partial class DebuggerBrowsableAttribute : Attribute
-    {
-        public DebuggerBrowsableAttribute(DebuggerBrowsableState state) { }
-
-        public DebuggerBrowsableState State { get { throw null; } }
-    }
-
-    public enum DebuggerBrowsableState
-    {
-        Never = 0,
-        Collapsed = 2,
-        RootHidden = 3
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Delegate, AllowMultiple = true)]
-    public sealed partial class DebuggerDisplayAttribute : Attribute
-    {
-        public DebuggerDisplayAttribute(string value) { }
-
-        public string Name { get { throw null; } set { } }
-
-        public Type Target { get { throw null; } set { } }
-
-        public string TargetTypeName { get { throw null; } set { } }
-
-        public string Type { get { throw null; } set { } }
-
-        public string Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property, Inherited = false)]
-    public sealed partial class DebuggerHiddenAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property, Inherited = false)]
-    public sealed partial class DebuggerNonUserCodeAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Constructor | AttributeTargets.Method, Inherited = false)]
-    public sealed partial class DebuggerStepThroughAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)]
-    public sealed partial class DebuggerTypeProxyAttribute : Attribute
-    {
-        public DebuggerTypeProxyAttribute(string typeName) { }
-
-        public DebuggerTypeProxyAttribute(Type type) { }
-
-        public string ProxyTypeName { get { throw null; } }
-
-        public Type Target { get { throw null; } set { } }
-
-        public string TargetTypeName { get { throw null; } set { } }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.diagnostics.debug/4.3.0/system.diagnostics.debug.nuspec b/src/referencePackages/src/system.diagnostics.debug/4.3.0/system.diagnostics.debug.nuspec
deleted file mode 100644
index aab2d2d0..00000000
--- a/src/referencePackages/src/system.diagnostics.debug/4.3.0/system.diagnostics.debug.nuspec
+++ /dev/null
@@ -1,43 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Diagnostics.Debug</id>
-    <version>4.3.0</version>
-    <title>System.Diagnostics.Debug</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides classes and attributes that allows basic interaction with a debugger.
-
-Commonly Used Types:
-System.Diagnostics.Debug
-System.Diagnostics.DebuggerStepThroughAttribute
-System.Diagnostics.Debugger
-System.Diagnostics.DebuggerDisplayAttribute
-System.Diagnostics.DebuggerBrowsableAttribute
-System.Diagnostics.DebuggerBrowsableState
-System.Diagnostics.DebuggerHiddenAttribute
-System.Diagnostics.DebuggerNonUserCodeAttribute
-System.Diagnostics.DebuggerTypeProxyAttribute
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/System.Diagnostics.DiagnosticSource.4.3.0.csproj b/src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/System.Diagnostics.DiagnosticSource.4.3.0.csproj
deleted file mode 100644
index 998a8508..00000000
--- a/src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/System.Diagnostics.DiagnosticSource.4.3.0.csproj
+++ /dev/null
@@ -1,25 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.1;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Diagnostics.DiagnosticSource</AssemblyName>
-    <StrongNameKeyId>Open</StrongNameKeyId>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Tracing" Version="4.3.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Threading" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Tracing" Version="4.3.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Threading" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/lib/netstandard1.1/System.Diagnostics.DiagnosticSource.cs b/src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/lib/netstandard1.1/System.Diagnostics.DiagnosticSource.cs
deleted file mode 100644
index 3620928d..00000000
--- a/src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/lib/netstandard1.1/System.Diagnostics.DiagnosticSource.cs
+++ /dev/null
@@ -1,52 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Reflection.AssemblyTitle("System.Diagnostics.DiagnosticSource")]
-[assembly: System.Reflection.AssemblyDescription("System.Diagnostics.DiagnosticSource")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Diagnostics.DiagnosticSource")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.24705.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.24705.01. Commit Hash: 4d1af962ca0fede10beb01d197367c2f90e92c97")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.1.0")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Diagnostics
-{
-    public partial class DiagnosticListener : DiagnosticSource, IObservable<Collections.Generic.KeyValuePair<string, object>>, IDisposable
-    {
-        public DiagnosticListener(string name) { }
-
-        public static IObservable<DiagnosticListener> AllListeners { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public virtual void Dispose() { }
-
-        public override bool IsEnabled(string name) { throw null; }
-
-        public virtual IDisposable Subscribe(IObserver<Collections.Generic.KeyValuePair<string, object>> observer, Predicate<string> isEnabled) { throw null; }
-
-        public IDisposable Subscribe(IObserver<Collections.Generic.KeyValuePair<string, object>> observer) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public override void Write(string name, object value) { }
-    }
-
-    public abstract partial class DiagnosticSource
-    {
-        public abstract bool IsEnabled(string name);
-        public abstract void Write(string name, object value);
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/lib/netstandard1.3/System.Diagnostics.DiagnosticSource.cs b/src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/lib/netstandard1.3/System.Diagnostics.DiagnosticSource.cs
deleted file mode 100644
index 3620928d..00000000
--- a/src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/lib/netstandard1.3/System.Diagnostics.DiagnosticSource.cs
+++ /dev/null
@@ -1,52 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Reflection.AssemblyTitle("System.Diagnostics.DiagnosticSource")]
-[assembly: System.Reflection.AssemblyDescription("System.Diagnostics.DiagnosticSource")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Diagnostics.DiagnosticSource")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.24705.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.24705.01. Commit Hash: 4d1af962ca0fede10beb01d197367c2f90e92c97")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.1.0")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Diagnostics
-{
-    public partial class DiagnosticListener : DiagnosticSource, IObservable<Collections.Generic.KeyValuePair<string, object>>, IDisposable
-    {
-        public DiagnosticListener(string name) { }
-
-        public static IObservable<DiagnosticListener> AllListeners { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public virtual void Dispose() { }
-
-        public override bool IsEnabled(string name) { throw null; }
-
-        public virtual IDisposable Subscribe(IObserver<Collections.Generic.KeyValuePair<string, object>> observer, Predicate<string> isEnabled) { throw null; }
-
-        public IDisposable Subscribe(IObserver<Collections.Generic.KeyValuePair<string, object>> observer) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public override void Write(string name, object value) { }
-    }
-
-    public abstract partial class DiagnosticSource
-    {
-        public abstract bool IsEnabled(string name);
-        public abstract void Write(string name, object value);
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/system.diagnostics.diagnosticsource.nuspec b/src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/system.diagnostics.diagnosticsource.nuspec
deleted file mode 100644
index 32a2e85e..00000000
--- a/src/referencePackages/src/system.diagnostics.diagnosticsource/4.3.0/system.diagnostics.diagnosticsource.nuspec
+++ /dev/null
@@ -1,38 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.8.6">
-    <id>System.Diagnostics.DiagnosticSource</id>
-    <version>4.3.0</version>
-    <title>System.Diagnostics.DiagnosticSource</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides Classes that allow you to decouple code logging rich (unserializable) diagnostics/telemetry (e.g. framework) from code that consumes it (e.g. tools)
-
-Commonly Used Types:
-System.Diagnostics.DiagnosticListener
-System.Diagnostics.DiagnosticSource</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="System.Collections" version="4.3.0" />
-        <dependency id="System.Diagnostics.Tracing" version="4.3.0" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Threading" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Collections" version="4.3.0" />
-        <dependency id="System.Diagnostics.Tracing" version="4.3.0" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Threading" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.diagnostics.tools/4.3.0/System.Diagnostics.Tools.4.3.0.csproj b/src/referencePackages/src/system.diagnostics.tools/4.3.0/System.Diagnostics.Tools.4.3.0.csproj
deleted file mode 100644
index 04238854..00000000
--- a/src/referencePackages/src/system.diagnostics.tools/4.3.0/System.Diagnostics.Tools.4.3.0.csproj
+++ /dev/null
@@ -1,14 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0</TargetFrameworks>
-    <AssemblyName>System.Diagnostics.Tools</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.diagnostics.tools/4.3.0/ref/netstandard1.0/System.Diagnostics.Tools.cs b/src/referencePackages/src/system.diagnostics.tools/4.3.0/ref/netstandard1.0/System.Diagnostics.Tools.cs
deleted file mode 100644
index fff6ee15..00000000
--- a/src/referencePackages/src/system.diagnostics.tools/4.3.0/ref/netstandard1.0/System.Diagnostics.Tools.cs
+++ /dev/null
@@ -1,57 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Diagnostics.Tools")]
-[assembly: System.Reflection.AssemblyDescription("System.Diagnostics.Tools")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Diagnostics.Tools")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.CodeDom.Compiler
-{
-    [AttributeUsage(AttributeTargets.All, Inherited = false, AllowMultiple = false)]
-    public sealed partial class GeneratedCodeAttribute : Attribute
-    {
-        public GeneratedCodeAttribute(string tool, string version) { }
-
-        public string Tool { get { throw null; } }
-
-        public string Version { get { throw null; } }
-    }
-}
-
-namespace System.Diagnostics.CodeAnalysis
-{
-    [AttributeUsage(AttributeTargets.All, Inherited = false, AllowMultiple = true)]
-    public sealed partial class SuppressMessageAttribute : Attribute
-    {
-        public SuppressMessageAttribute(string category, string checkId) { }
-
-        public string Category { get { throw null; } }
-
-        public string CheckId { get { throw null; } }
-
-        public string Justification { get { throw null; } set { } }
-
-        public string MessageId { get { throw null; } set { } }
-
-        public string Scope { get { throw null; } set { } }
-
-        public string Target { get { throw null; } set { } }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.diagnostics.tools/4.3.0/system.diagnostics.tools.nuspec b/src/referencePackages/src/system.diagnostics.tools/4.3.0/system.diagnostics.tools.nuspec
deleted file mode 100644
index 27bd1531..00000000
--- a/src/referencePackages/src/system.diagnostics.tools/4.3.0/system.diagnostics.tools.nuspec
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Diagnostics.Tools</id>
-    <version>4.3.0</version>
-    <title>System.Diagnostics.Tools</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides attributes, such as GeneratedCodeAttribute and SuppresMessageAttribute, that are emitted or consumed by analysis tools.
-
-Commonly Used Types:
-System.CodeDom.Compiler.GeneratedCodeAttribute
-System.Diagnostics.CodeAnalysis.SuppressMessageAttribute
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.diagnostics.tracing/4.3.0/System.Diagnostics.Tracing.4.3.0.csproj b/src/referencePackages/src/system.diagnostics.tracing/4.3.0/System.Diagnostics.Tracing.4.3.0.csproj
deleted file mode 100644
index 39e7cd1c..00000000
--- a/src/referencePackages/src/system.diagnostics.tracing/4.3.0/System.Diagnostics.Tracing.4.3.0.csproj
+++ /dev/null
@@ -1,32 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.1;netstandard1.2;netstandard1.3;netstandard1.5</TargetFrameworks>
-    <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.2'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.5'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.1/System.Diagnostics.Tracing.cs b/src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.1/System.Diagnostics.Tracing.cs
deleted file mode 100644
index a92313c0..00000000
--- a/src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.1/System.Diagnostics.Tracing.cs
+++ /dev/null
@@ -1,247 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyTitle("System.Diagnostics.Tracing.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.Diagnostics.Tracing.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Diagnostics.Tracing.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Diagnostics.Tracing
-{
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class EventAttribute : Attribute
-    {
-        public EventAttribute(int eventId) { }
-
-        public int EventId { get { throw null; } }
-
-        public EventKeywords Keywords { get { throw null; } set { } }
-
-        public EventLevel Level { get { throw null; } set { } }
-
-        public string Message { get { throw null; } set { } }
-
-        public EventOpcode Opcode { get { throw null; } set { } }
-
-        public EventTask Task { get { throw null; } set { } }
-
-        public byte Version { get { throw null; } set { } }
-    }
-
-    public enum EventCommand
-    {
-        Disable = -3,
-        Enable = -2,
-        SendManifest = -1,
-        Update = 0
-    }
-
-    public partial class EventCommandEventArgs : EventArgs
-    {
-        internal EventCommandEventArgs() { }
-
-        public Collections.Generic.IDictionary<string, string> Arguments { get { throw null; } }
-
-        public EventCommand Command { get { throw null; } }
-
-        public bool DisableEvent(int eventId) { throw null; }
-
-        public bool EnableEvent(int eventId) { throw null; }
-    }
-
-    [Flags]
-    public enum EventKeywords : long
-    {
-        AuditFailure = 4503599627370496L,
-        AuditSuccess = 9007199254740992L,
-        CorrelationHint = 4503599627370496L,
-        EventLogClassic = 36028797018963968L,
-        None = 0L,
-        Sqm = 2251799813685248L,
-        WdiContext = 562949953421312L,
-        WdiDiagnostic = 1125899906842624L
-    }
-
-    public enum EventLevel
-    {
-        LogAlways = 0,
-        Critical = 1,
-        Error = 2,
-        Warning = 3,
-        Informational = 4,
-        Verbose = 5
-    }
-
-    public abstract partial class EventListener : IDisposable
-    {
-        public void DisableEvents(EventSource eventSource) { }
-
-        public virtual void Dispose() { }
-
-        public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword, Collections.Generic.IDictionary<string, string> arguments) { }
-
-        public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword) { }
-
-        public void EnableEvents(EventSource eventSource, EventLevel level) { }
-
-        protected static int EventSourceIndex(EventSource eventSource) { throw null; }
-
-        protected internal virtual void OnEventSourceCreated(EventSource eventSource) { }
-
-        protected internal abstract void OnEventWritten(EventWrittenEventArgs eventData);
-    }
-
-    public enum EventOpcode
-    {
-        Info = 0,
-        Start = 1,
-        Stop = 2,
-        DataCollectionStart = 3,
-        DataCollectionStop = 4,
-        Extension = 5,
-        Reply = 6,
-        Resume = 7,
-        Suspend = 8,
-        Send = 9,
-        Receive = 240
-    }
-
-    public partial class EventSource : IDisposable
-    {
-        protected EventSource() { }
-
-        protected EventSource(bool throwOnEventWriteErrors) { }
-
-        public Guid Guid { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        ~EventSource() {
-        }
-
-        public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest) { throw null; }
-
-        public static Guid GetGuid(Type eventSourceType) { throw null; }
-
-        public static string GetName(Type eventSourceType) { throw null; }
-
-        public static Collections.Generic.IEnumerable<EventSource> GetSources() { throw null; }
-
-        public bool IsEnabled() { throw null; }
-
-        public bool IsEnabled(EventLevel level, EventKeywords keywords) { throw null; }
-
-        protected virtual void OnEventCommand(EventCommandEventArgs command) { }
-
-        public static void SendCommand(EventSource eventSource, EventCommand command, Collections.Generic.IDictionary<string, string> commandArguments) { }
-
-        public override string ToString() { throw null; }
-
-        protected void WriteEvent(int eventId, int arg1, int arg2, int arg3) { }
-
-        protected void WriteEvent(int eventId, int arg1, int arg2) { }
-
-        protected void WriteEvent(int eventId, int arg1) { }
-
-        protected void WriteEvent(int eventId, long arg1, long arg2, long arg3) { }
-
-        protected void WriteEvent(int eventId, long arg1, long arg2) { }
-
-        protected void WriteEvent(int eventId, long arg1) { }
-
-        protected void WriteEvent(int eventId, params object[] args) { }
-
-        protected void WriteEvent(int eventId, string arg1, int arg2, int arg3) { }
-
-        protected void WriteEvent(int eventId, string arg1, int arg2) { }
-
-        protected void WriteEvent(int eventId, string arg1, long arg2) { }
-
-        protected void WriteEvent(int eventId, string arg1, string arg2, string arg3) { }
-
-        protected void WriteEvent(int eventId, string arg1, string arg2) { }
-
-        protected void WriteEvent(int eventId, string arg1) { }
-
-        protected void WriteEvent(int eventId) { }
-
-        [CLSCompliant(false)]
-        protected unsafe void WriteEventCore(int eventId, int eventDataCount, EventData* data) { }
-
-        protected internal partial struct EventData
-        {
-            public IntPtr DataPointer { get { throw null; } set { } }
-
-            public int Size { get { throw null; } set { } }
-        }
-    }
-
-    [AttributeUsage(AttributeTargets.Class)]
-    public sealed partial class EventSourceAttribute : Attribute
-    {
-        public string Guid { get { throw null; } set { } }
-
-        public string LocalizationResources { get { throw null; } set { } }
-
-        public string Name { get { throw null; } set { } }
-    }
-
-    public partial class EventSourceException : Exception
-    {
-        public EventSourceException() { }
-
-        public EventSourceException(string message, Exception innerException) { }
-
-        public EventSourceException(string message) { }
-    }
-
-    public enum EventTask
-    {
-        None = 0
-    }
-
-    public partial class EventWrittenEventArgs : EventArgs
-    {
-        internal EventWrittenEventArgs() { }
-
-        public int EventId { get { throw null; } }
-
-        public EventSource EventSource { get { throw null; } }
-
-        public EventKeywords Keywords { get { throw null; } }
-
-        public EventLevel Level { get { throw null; } }
-
-        public string Message { get { throw null; } }
-
-        public EventOpcode Opcode { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<object> Payload { get { throw null; } }
-
-        public EventTask Task { get { throw null; } }
-
-        public byte Version { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class NonEventAttribute : Attribute
-    {
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.2/System.Diagnostics.Tracing.cs b/src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.2/System.Diagnostics.Tracing.cs
deleted file mode 100644
index 88f2f78c..00000000
--- a/src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.2/System.Diagnostics.Tracing.cs
+++ /dev/null
@@ -1,266 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyTitle("System.Diagnostics.Tracing.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.Diagnostics.Tracing.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Diagnostics.Tracing.dll")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyMetadata("BuildLabel", "130703.2")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.40013.0")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.40013.0")]
-[assembly: System.Reflection.AssemblyMetadata("BuildBranch", "Release\\ReferenceAssemblies\\1.0")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Diagnostics.Tracing
-{
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class EventAttribute : Attribute
-    {
-        public EventAttribute(int eventId) { }
-
-        public int EventId { get { throw null; } }
-
-        public EventKeywords Keywords { get { throw null; } set { } }
-
-        public EventLevel Level { get { throw null; } set { } }
-
-        public string Message { get { throw null; } set { } }
-
-        public EventOpcode Opcode { get { throw null; } set { } }
-
-        public EventTask Task { get { throw null; } set { } }
-
-        public byte Version { get { throw null; } set { } }
-    }
-
-    public enum EventCommand
-    {
-        Disable = -3,
-        Enable = -2,
-        SendManifest = -1,
-        Update = 0
-    }
-
-    public partial class EventCommandEventArgs : EventArgs
-    {
-        internal EventCommandEventArgs() { }
-
-        public Collections.Generic.IDictionary<string, string> Arguments { get { throw null; } }
-
-        public EventCommand Command { get { throw null; } }
-
-        public bool DisableEvent(int eventId) { throw null; }
-
-        public bool EnableEvent(int eventId) { throw null; }
-    }
-
-    [Flags]
-    public enum EventKeywords : long
-    {
-        AuditFailure = 4503599627370496L,
-        AuditSuccess = 9007199254740992L,
-        CorrelationHint = 4503599627370496L,
-        EventLogClassic = 36028797018963968L,
-        None = 0L,
-        Sqm = 2251799813685248L,
-        WdiContext = 562949953421312L,
-        WdiDiagnostic = 1125899906842624L
-    }
-
-    public enum EventLevel
-    {
-        LogAlways = 0,
-        Critical = 1,
-        Error = 2,
-        Warning = 3,
-        Informational = 4,
-        Verbose = 5
-    }
-
-    public abstract partial class EventListener : IDisposable
-    {
-        public void DisableEvents(EventSource eventSource) { }
-
-        public virtual void Dispose() { }
-
-        public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword, Collections.Generic.IDictionary<string, string> arguments) { }
-
-        public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword) { }
-
-        public void EnableEvents(EventSource eventSource, EventLevel level) { }
-
-        protected static int EventSourceIndex(EventSource eventSource) { throw null; }
-
-        protected internal virtual void OnEventSourceCreated(EventSource eventSource) { }
-
-        protected internal abstract void OnEventWritten(EventWrittenEventArgs eventData);
-    }
-
-    public enum EventOpcode
-    {
-        Info = 0,
-        Start = 1,
-        Stop = 2,
-        DataCollectionStart = 3,
-        DataCollectionStop = 4,
-        Extension = 5,
-        Reply = 6,
-        Resume = 7,
-        Suspend = 8,
-        Send = 9,
-        Receive = 240
-    }
-
-    public partial class EventSource : IDisposable
-    {
-        protected EventSource() { }
-
-        protected EventSource(bool throwOnEventWriteErrors) { }
-
-        public Exception ConstructionException { get { throw null; } }
-
-        public static Guid CurrentThreadActivityId { get { throw null; } }
-
-        public Guid Guid { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        ~EventSource() {
-        }
-
-        public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest) { throw null; }
-
-        public static Guid GetGuid(Type eventSourceType) { throw null; }
-
-        public static string GetName(Type eventSourceType) { throw null; }
-
-        public static Collections.Generic.IEnumerable<EventSource> GetSources() { throw null; }
-
-        public bool IsEnabled() { throw null; }
-
-        public bool IsEnabled(EventLevel level, EventKeywords keywords) { throw null; }
-
-        protected virtual void OnEventCommand(EventCommandEventArgs command) { }
-
-        public static void SendCommand(EventSource eventSource, EventCommand command, Collections.Generic.IDictionary<string, string> commandArguments) { }
-
-        public static void SetCurrentThreadActivityId(Guid activityId, out Guid oldActivityThatWillContinue) { throw null; }
-
-        public static void SetCurrentThreadActivityId(Guid activityId) { }
-
-        public override string ToString() { throw null; }
-
-        protected void WriteEvent(int eventId, int arg1, int arg2, int arg3) { }
-
-        protected void WriteEvent(int eventId, int arg1, int arg2) { }
-
-        protected void WriteEvent(int eventId, int arg1) { }
-
-        protected void WriteEvent(int eventId, long arg1, long arg2, long arg3) { }
-
-        protected void WriteEvent(int eventId, long arg1, long arg2) { }
-
-        protected void WriteEvent(int eventId, long arg1) { }
-
-        protected void WriteEvent(int eventId, params object[] args) { }
-
-        protected void WriteEvent(int eventId, string arg1, int arg2, int arg3) { }
-
-        protected void WriteEvent(int eventId, string arg1, int arg2) { }
-
-        protected void WriteEvent(int eventId, string arg1, long arg2) { }
-
-        protected void WriteEvent(int eventId, string arg1, string arg2, string arg3) { }
-
-        protected void WriteEvent(int eventId, string arg1, string arg2) { }
-
-        protected void WriteEvent(int eventId, string arg1) { }
-
-        protected void WriteEvent(int eventId) { }
-
-        [CLSCompliant(false)]
-        protected unsafe void WriteEventCore(int eventId, int eventDataCount, EventData* data) { }
-
-        protected void WriteEventWithRelatedActivityId(int eventId, Guid childActivityID, params object[] args) { }
-
-        [CLSCompliant(false)]
-        protected unsafe void WriteEventWithRelatedActivityIdCore(int eventId, Guid* childActivityID, int eventDataCount, EventData* data) { }
-
-        protected internal partial struct EventData
-        {
-            public IntPtr DataPointer { get { throw null; } set { } }
-
-            public int Size { get { throw null; } set { } }
-        }
-    }
-
-    [AttributeUsage(AttributeTargets.Class)]
-    public sealed partial class EventSourceAttribute : Attribute
-    {
-        public string Guid { get { throw null; } set { } }
-
-        public string LocalizationResources { get { throw null; } set { } }
-
-        public string Name { get { throw null; } set { } }
-    }
-
-    public partial class EventSourceException : Exception
-    {
-        public EventSourceException() { }
-
-        public EventSourceException(string message, Exception innerException) { }
-
-        public EventSourceException(string message) { }
-    }
-
-    public enum EventTask
-    {
-        None = 0
-    }
-
-    public partial class EventWrittenEventArgs : EventArgs
-    {
-        internal EventWrittenEventArgs() { }
-
-        public Guid ActivityId { get { throw null; } }
-
-        public int EventId { get { throw null; } }
-
-        public EventSource EventSource { get { throw null; } }
-
-        public EventKeywords Keywords { get { throw null; } }
-
-        public EventLevel Level { get { throw null; } }
-
-        public string Message { get { throw null; } }
-
-        public EventOpcode Opcode { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<object> Payload { get { throw null; } }
-
-        public Guid RelatedActivityId { get { throw null; } }
-
-        public EventTask Task { get { throw null; } }
-
-        public byte Version { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class NonEventAttribute : Attribute
-    {
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.3/System.Diagnostics.Tracing.cs b/src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.3/System.Diagnostics.Tracing.cs
deleted file mode 100644
index 0f308fd6..00000000
--- a/src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.3/System.Diagnostics.Tracing.cs
+++ /dev/null
@@ -1,411 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Diagnostics.Tracing")]
-[assembly: System.Reflection.AssemblyDescription("System.Diagnostics.Tracing")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Diagnostics.Tracing")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.23123.00")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.23123.00 built by: PROJECTKREL")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata("", "")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.20.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Diagnostics.Tracing
-{
-    [Flags]
-    public enum EventActivityOptions
-    {
-        None = 0,
-        Disable = 2,
-        Recursive = 4,
-        Detachable = 8
-    }
-
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class EventAttribute : Attribute
-    {
-        public EventAttribute(int eventId) { }
-
-        public EventActivityOptions ActivityOptions { get { throw null; } set { } }
-
-        public EventChannel Channel { get { throw null; } set { } }
-
-        public int EventId { get { throw null; } }
-
-        public EventKeywords Keywords { get { throw null; } set { } }
-
-        public EventLevel Level { get { throw null; } set { } }
-
-        public string Message { get { throw null; } set { } }
-
-        public EventOpcode Opcode { get { throw null; } set { } }
-
-        public EventTags Tags { get { throw null; } set { } }
-
-        public EventTask Task { get { throw null; } set { } }
-
-        public byte Version { get { throw null; } set { } }
-    }
-
-    public enum EventChannel : byte
-    {
-        None = 0,
-        Admin = 16,
-        Operational = 17,
-        Analytic = 18,
-        Debug = 19
-    }
-
-    public enum EventCommand
-    {
-        Disable = -3,
-        Enable = -2,
-        SendManifest = -1,
-        Update = 0
-    }
-
-    public partial class EventCommandEventArgs : EventArgs
-    {
-        internal EventCommandEventArgs() { }
-
-        public Collections.Generic.IDictionary<string, string> Arguments { get { throw null; } }
-
-        public EventCommand Command { get { throw null; } }
-
-        public bool DisableEvent(int eventId) { throw null; }
-
-        public bool EnableEvent(int eventId) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false)]
-    public partial class EventDataAttribute : Attribute
-    {
-        public string Name { get { throw null; } set { } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property)]
-    public partial class EventFieldAttribute : Attribute
-    {
-        public EventFieldFormat Format { get { throw null; } set { } }
-
-        public EventFieldTags Tags { get { throw null; } set { } }
-    }
-
-    public enum EventFieldFormat
-    {
-        Default = 0,
-        String = 2,
-        Boolean = 3,
-        Hexadecimal = 4,
-        Xml = 11,
-        Json = 12,
-        HResult = 15
-    }
-
-    [Flags]
-    public enum EventFieldTags
-    {
-        None = 0
-    }
-
-    [AttributeUsage(AttributeTargets.Property)]
-    public partial class EventIgnoreAttribute : Attribute
-    {
-    }
-
-    [Flags]
-    public enum EventKeywords : long
-    {
-        All = -1L,
-        AuditFailure = 4503599627370496L,
-        AuditSuccess = 9007199254740992L,
-        CorrelationHint = 4503599627370496L,
-        EventLogClassic = 36028797018963968L,
-        None = 0L,
-        Sqm = 2251799813685248L,
-        WdiContext = 562949953421312L,
-        WdiDiagnostic = 1125899906842624L
-    }
-
-    public enum EventLevel
-    {
-        LogAlways = 0,
-        Critical = 1,
-        Error = 2,
-        Warning = 3,
-        Informational = 4,
-        Verbose = 5
-    }
-
-    public abstract partial class EventListener : IDisposable
-    {
-        public void DisableEvents(EventSource eventSource) { }
-
-        public virtual void Dispose() { }
-
-        public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword, Collections.Generic.IDictionary<string, string> arguments) { }
-
-        public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword) { }
-
-        public void EnableEvents(EventSource eventSource, EventLevel level) { }
-
-        protected static int EventSourceIndex(EventSource eventSource) { throw null; }
-
-        protected internal virtual void OnEventSourceCreated(EventSource eventSource) { }
-
-        protected internal abstract void OnEventWritten(EventWrittenEventArgs eventData);
-    }
-
-    [Flags]
-    public enum EventManifestOptions
-    {
-        None = 0,
-        Strict = 1,
-        AllCultures = 2,
-        OnlyIfNeededForRegistration = 4,
-        AllowEventSourceOverride = 8
-    }
-
-    public enum EventOpcode
-    {
-        Info = 0,
-        Start = 1,
-        Stop = 2,
-        DataCollectionStart = 3,
-        DataCollectionStop = 4,
-        Extension = 5,
-        Reply = 6,
-        Resume = 7,
-        Suspend = 8,
-        Send = 9,
-        Receive = 240
-    }
-
-    public partial class EventSource : IDisposable
-    {
-        protected EventSource() { }
-
-        protected EventSource(bool throwOnEventWriteErrors) { }
-
-        protected EventSource(EventSourceSettings settings, params string[] traits) { }
-
-        protected EventSource(EventSourceSettings settings) { }
-
-        public EventSource(string eventSourceName, EventSourceSettings config, params string[] traits) { }
-
-        public EventSource(string eventSourceName, EventSourceSettings config) { }
-
-        public EventSource(string eventSourceName) { }
-
-        public Exception ConstructionException { get { throw null; } }
-
-        public static Guid CurrentThreadActivityId { get { throw null; } }
-
-        public Guid Guid { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public EventSourceSettings Settings { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        ~EventSource() {
-        }
-
-        public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest, EventManifestOptions flags) { throw null; }
-
-        public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest) { throw null; }
-
-        public static Guid GetGuid(Type eventSourceType) { throw null; }
-
-        public static string GetName(Type eventSourceType) { throw null; }
-
-        public static Collections.Generic.IEnumerable<EventSource> GetSources() { throw null; }
-
-        public string GetTrait(string key) { throw null; }
-
-        public bool IsEnabled() { throw null; }
-
-        public bool IsEnabled(EventLevel level, EventKeywords keywords, EventChannel channel) { throw null; }
-
-        public bool IsEnabled(EventLevel level, EventKeywords keywords) { throw null; }
-
-        protected virtual void OnEventCommand(EventCommandEventArgs command) { }
-
-        public static void SendCommand(EventSource eventSource, EventCommand command, Collections.Generic.IDictionary<string, string> commandArguments) { }
-
-        public static void SetCurrentThreadActivityId(Guid activityId, out Guid oldActivityThatWillContinue) { throw null; }
-
-        public static void SetCurrentThreadActivityId(Guid activityId) { }
-
-        public override string ToString() { throw null; }
-
-        public void Write(string eventName, EventSourceOptions options) { }
-
-        public void Write(string eventName) { }
-
-        public void Write<T>(string eventName, T data) { }
-
-        public void Write<T>(string eventName, EventSourceOptions options, T data) { }
-
-        public void Write<T>(string eventName, ref EventSourceOptions options, ref T data) { }
-
-        public void Write<T>(string eventName, ref EventSourceOptions options, ref Guid activityId, ref Guid relatedActivityId, ref T data) { }
-
-        protected void WriteEvent(int eventId, byte[] arg1) { }
-
-        protected void WriteEvent(int eventId, int arg1, int arg2, int arg3) { }
-
-        protected void WriteEvent(int eventId, int arg1, int arg2) { }
-
-        protected void WriteEvent(int eventId, int arg1, string arg2) { }
-
-        protected void WriteEvent(int eventId, int arg1) { }
-
-        protected void WriteEvent(int eventId, long arg1, byte[] arg2) { }
-
-        protected void WriteEvent(int eventId, long arg1, long arg2, long arg3) { }
-
-        protected void WriteEvent(int eventId, long arg1, long arg2) { }
-
-        protected void WriteEvent(int eventId, long arg1, string arg2) { }
-
-        protected void WriteEvent(int eventId, long arg1) { }
-
-        protected void WriteEvent(int eventId, params object[] args) { }
-
-        protected void WriteEvent(int eventId, string arg1, int arg2, int arg3) { }
-
-        protected void WriteEvent(int eventId, string arg1, int arg2) { }
-
-        protected void WriteEvent(int eventId, string arg1, long arg2) { }
-
-        protected void WriteEvent(int eventId, string arg1, string arg2, string arg3) { }
-
-        protected void WriteEvent(int eventId, string arg1, string arg2) { }
-
-        protected void WriteEvent(int eventId, string arg1) { }
-
-        protected void WriteEvent(int eventId) { }
-
-        [CLSCompliant(false)]
-        protected unsafe void WriteEventCore(int eventId, int eventDataCount, EventData* data) { }
-
-        protected void WriteEventWithRelatedActivityId(int eventId, Guid relatedActivityId, params object[] args) { }
-
-        [CLSCompliant(false)]
-        protected unsafe void WriteEventWithRelatedActivityIdCore(int eventId, Guid* relatedActivityId, int eventDataCount, EventData* data) { }
-
-        protected internal partial struct EventData
-        {
-            public IntPtr DataPointer { get { throw null; } set { } }
-
-            public int Size { get { throw null; } set { } }
-        }
-    }
-
-    [AttributeUsage(AttributeTargets.Class)]
-    public sealed partial class EventSourceAttribute : Attribute
-    {
-        public string Guid { get { throw null; } set { } }
-
-        public string LocalizationResources { get { throw null; } set { } }
-
-        public string Name { get { throw null; } set { } }
-    }
-
-    public partial class EventSourceException : Exception
-    {
-        public EventSourceException() { }
-
-        public EventSourceException(string message, Exception innerException) { }
-
-        public EventSourceException(string message) { }
-    }
-
-    public partial struct EventSourceOptions
-    {
-        public EventActivityOptions ActivityOptions { get { throw null; } set { } }
-
-        public EventKeywords Keywords { get { throw null; } set { } }
-
-        public EventLevel Level { get { throw null; } set { } }
-
-        public EventOpcode Opcode { get { throw null; } set { } }
-
-        public EventTags Tags { get { throw null; } set { } }
-    }
-
-    [Flags]
-    public enum EventSourceSettings
-    {
-        Default = 0,
-        ThrowOnEventWriteErrors = 1,
-        EtwManifestEventFormat = 4,
-        EtwSelfDescribingEventFormat = 8
-    }
-
-    [Flags]
-    public enum EventTags
-    {
-        None = 0
-    }
-
-    public enum EventTask
-    {
-        None = 0
-    }
-
-    public partial class EventWrittenEventArgs : EventArgs
-    {
-        internal EventWrittenEventArgs() { }
-
-        public Guid ActivityId { get { throw null; } }
-
-        public EventChannel Channel { get { throw null; } }
-
-        public int EventId { get { throw null; } }
-
-        public string EventName { get { throw null; } }
-
-        public EventSource EventSource { get { throw null; } }
-
-        public EventKeywords Keywords { get { throw null; } }
-
-        public EventLevel Level { get { throw null; } }
-
-        public string Message { get { throw null; } }
-
-        public EventOpcode Opcode { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<object> Payload { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<string> PayloadNames { get { throw null; } }
-
-        public Guid RelatedActivityId { get { throw null; } }
-
-        public EventTags Tags { get { throw null; } }
-
-        public EventTask Task { get { throw null; } }
-
-        public byte Version { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class NonEventAttribute : Attribute
-    {
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.5/System.Diagnostics.Tracing.cs b/src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.5/System.Diagnostics.Tracing.cs
deleted file mode 100644
index 7736ceec..00000000
--- a/src/referencePackages/src/system.diagnostics.tracing/4.3.0/ref/netstandard1.5/System.Diagnostics.Tracing.cs
+++ /dev/null
@@ -1,421 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Diagnostics.Tracing")]
-[assembly: System.Reflection.AssemblyDescription("System.Diagnostics.Tracing")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Diagnostics.Tracing")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Diagnostics.Tracing
-{
-    [Flags]
-    public enum EventActivityOptions
-    {
-        None = 0,
-        Disable = 2,
-        Recursive = 4,
-        Detachable = 8
-    }
-
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class EventAttribute : Attribute
-    {
-        public EventAttribute(int eventId) { }
-
-        public EventActivityOptions ActivityOptions { get { throw null; } set { } }
-
-        public EventChannel Channel { get { throw null; } set { } }
-
-        public int EventId { get { throw null; } }
-
-        public EventKeywords Keywords { get { throw null; } set { } }
-
-        public EventLevel Level { get { throw null; } set { } }
-
-        public string Message { get { throw null; } set { } }
-
-        public EventOpcode Opcode { get { throw null; } set { } }
-
-        public EventTags Tags { get { throw null; } set { } }
-
-        public EventTask Task { get { throw null; } set { } }
-
-        public byte Version { get { throw null; } set { } }
-    }
-
-    public enum EventChannel : byte
-    {
-        None = 0,
-        Admin = 16,
-        Operational = 17,
-        Analytic = 18,
-        Debug = 19
-    }
-
-    public enum EventCommand
-    {
-        Disable = -3,
-        Enable = -2,
-        SendManifest = -1,
-        Update = 0
-    }
-
-    public partial class EventCommandEventArgs : EventArgs
-    {
-        internal EventCommandEventArgs() { }
-
-        public Collections.Generic.IDictionary<string, string> Arguments { get { throw null; } }
-
-        public EventCommand Command { get { throw null; } }
-
-        public bool DisableEvent(int eventId) { throw null; }
-
-        public bool EnableEvent(int eventId) { throw null; }
-    }
-
-    public partial class EventCounter
-    {
-        public EventCounter(string name, EventSource eventSource) { }
-
-        public void WriteMetric(float value) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false)]
-    public partial class EventDataAttribute : Attribute
-    {
-        public string Name { get { throw null; } set { } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property)]
-    public partial class EventFieldAttribute : Attribute
-    {
-        public EventFieldFormat Format { get { throw null; } set { } }
-
-        public EventFieldTags Tags { get { throw null; } set { } }
-    }
-
-    public enum EventFieldFormat
-    {
-        Default = 0,
-        String = 2,
-        Boolean = 3,
-        Hexadecimal = 4,
-        Xml = 11,
-        Json = 12,
-        HResult = 15
-    }
-
-    [Flags]
-    public enum EventFieldTags
-    {
-        None = 0
-    }
-
-    [AttributeUsage(AttributeTargets.Property)]
-    public partial class EventIgnoreAttribute : Attribute
-    {
-    }
-
-    [Flags]
-    public enum EventKeywords : long
-    {
-        All = -1L,
-        AuditFailure = 4503599627370496L,
-        AuditSuccess = 9007199254740992L,
-        CorrelationHint = 4503599627370496L,
-        EventLogClassic = 36028797018963968L,
-        None = 0L,
-        Sqm = 2251799813685248L,
-        WdiContext = 562949953421312L,
-        WdiDiagnostic = 1125899906842624L
-    }
-
-    public enum EventLevel
-    {
-        LogAlways = 0,
-        Critical = 1,
-        Error = 2,
-        Warning = 3,
-        Informational = 4,
-        Verbose = 5
-    }
-
-    public abstract partial class EventListener : IDisposable
-    {
-        public void DisableEvents(EventSource eventSource) { }
-
-        public virtual void Dispose() { }
-
-        public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword, Collections.Generic.IDictionary<string, string> arguments) { }
-
-        public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword) { }
-
-        public void EnableEvents(EventSource eventSource, EventLevel level) { }
-
-        protected static int EventSourceIndex(EventSource eventSource) { throw null; }
-
-        protected internal virtual void OnEventSourceCreated(EventSource eventSource) { }
-
-        protected internal abstract void OnEventWritten(EventWrittenEventArgs eventData);
-    }
-
-    [Flags]
-    public enum EventManifestOptions
-    {
-        None = 0,
-        Strict = 1,
-        AllCultures = 2,
-        OnlyIfNeededForRegistration = 4,
-        AllowEventSourceOverride = 8
-    }
-
-    public enum EventOpcode
-    {
-        Info = 0,
-        Start = 1,
-        Stop = 2,
-        DataCollectionStart = 3,
-        DataCollectionStop = 4,
-        Extension = 5,
-        Reply = 6,
-        Resume = 7,
-        Suspend = 8,
-        Send = 9,
-        Receive = 240
-    }
-
-    public partial class EventSource : IDisposable
-    {
-        protected EventSource() { }
-
-        protected EventSource(bool throwOnEventWriteErrors) { }
-
-        protected EventSource(EventSourceSettings settings, params string[] traits) { }
-
-        protected EventSource(EventSourceSettings settings) { }
-
-        public EventSource(string eventSourceName, EventSourceSettings config, params string[] traits) { }
-
-        public EventSource(string eventSourceName, EventSourceSettings config) { }
-
-        public EventSource(string eventSourceName) { }
-
-        public Exception ConstructionException { get { throw null; } }
-
-        public static Guid CurrentThreadActivityId { get { throw null; } }
-
-        public Guid Guid { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public EventSourceSettings Settings { get { throw null; } }
-
-        public event EventHandler<EventCommandEventArgs> EventCommandExecuted { add { } remove { } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        ~EventSource() {
-        }
-
-        public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest, EventManifestOptions flags) { throw null; }
-
-        public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest) { throw null; }
-
-        public static Guid GetGuid(Type eventSourceType) { throw null; }
-
-        public static string GetName(Type eventSourceType) { throw null; }
-
-        public static Collections.Generic.IEnumerable<EventSource> GetSources() { throw null; }
-
-        public string GetTrait(string key) { throw null; }
-
-        public bool IsEnabled() { throw null; }
-
-        public bool IsEnabled(EventLevel level, EventKeywords keywords, EventChannel channel) { throw null; }
-
-        public bool IsEnabled(EventLevel level, EventKeywords keywords) { throw null; }
-
-        protected virtual void OnEventCommand(EventCommandEventArgs command) { }
-
-        public static void SendCommand(EventSource eventSource, EventCommand command, Collections.Generic.IDictionary<string, string> commandArguments) { }
-
-        public static void SetCurrentThreadActivityId(Guid activityId, out Guid oldActivityThatWillContinue) { throw null; }
-
-        public static void SetCurrentThreadActivityId(Guid activityId) { }
-
-        public override string ToString() { throw null; }
-
-        public void Write(string eventName, EventSourceOptions options) { }
-
-        public void Write(string eventName) { }
-
-        public void Write<T>(string eventName, T data) { }
-
-        public void Write<T>(string eventName, EventSourceOptions options, T data) { }
-
-        public void Write<T>(string eventName, ref EventSourceOptions options, ref T data) { }
-
-        public void Write<T>(string eventName, ref EventSourceOptions options, ref Guid activityId, ref Guid relatedActivityId, ref T data) { }
-
-        protected void WriteEvent(int eventId, byte[] arg1) { }
-
-        protected void WriteEvent(int eventId, int arg1, int arg2, int arg3) { }
-
-        protected void WriteEvent(int eventId, int arg1, int arg2) { }
-
-        protected void WriteEvent(int eventId, int arg1, string arg2) { }
-
-        protected void WriteEvent(int eventId, int arg1) { }
-
-        protected void WriteEvent(int eventId, long arg1, byte[] arg2) { }
-
-        protected void WriteEvent(int eventId, long arg1, long arg2, long arg3) { }
-
-        protected void WriteEvent(int eventId, long arg1, long arg2) { }
-
-        protected void WriteEvent(int eventId, long arg1, string arg2) { }
-
-        protected void WriteEvent(int eventId, long arg1) { }
-
-        protected void WriteEvent(int eventId, params object[] args) { }
-
-        protected void WriteEvent(int eventId, string arg1, int arg2, int arg3) { }
-
-        protected void WriteEvent(int eventId, string arg1, int arg2) { }
-
-        protected void WriteEvent(int eventId, string arg1, long arg2) { }
-
-        protected void WriteEvent(int eventId, string arg1, string arg2, string arg3) { }
-
-        protected void WriteEvent(int eventId, string arg1, string arg2) { }
-
-        protected void WriteEvent(int eventId, string arg1) { }
-
-        protected void WriteEvent(int eventId) { }
-
-        [CLSCompliant(false)]
-        protected unsafe void WriteEventCore(int eventId, int eventDataCount, EventData* data) { }
-
-        protected void WriteEventWithRelatedActivityId(int eventId, Guid relatedActivityId, params object[] args) { }
-
-        [CLSCompliant(false)]
-        protected unsafe void WriteEventWithRelatedActivityIdCore(int eventId, Guid* relatedActivityId, int eventDataCount, EventData* data) { }
-
-        protected internal partial struct EventData
-        {
-            public IntPtr DataPointer { get { throw null; } set { } }
-
-            public int Size { get { throw null; } set { } }
-        }
-    }
-
-    [AttributeUsage(AttributeTargets.Class)]
-    public sealed partial class EventSourceAttribute : Attribute
-    {
-        public string Guid { get { throw null; } set { } }
-
-        public string LocalizationResources { get { throw null; } set { } }
-
-        public string Name { get { throw null; } set { } }
-    }
-
-    public partial class EventSourceException : Exception
-    {
-        public EventSourceException() { }
-
-        public EventSourceException(string message, Exception innerException) { }
-
-        public EventSourceException(string message) { }
-    }
-
-    public partial struct EventSourceOptions
-    {
-        public EventActivityOptions ActivityOptions { get { throw null; } set { } }
-
-        public EventKeywords Keywords { get { throw null; } set { } }
-
-        public EventLevel Level { get { throw null; } set { } }
-
-        public EventOpcode Opcode { get { throw null; } set { } }
-
-        public EventTags Tags { get { throw null; } set { } }
-    }
-
-    [Flags]
-    public enum EventSourceSettings
-    {
-        Default = 0,
-        ThrowOnEventWriteErrors = 1,
-        EtwManifestEventFormat = 4,
-        EtwSelfDescribingEventFormat = 8
-    }
-
-    [Flags]
-    public enum EventTags
-    {
-        None = 0
-    }
-
-    public enum EventTask
-    {
-        None = 0
-    }
-
-    public partial class EventWrittenEventArgs : EventArgs
-    {
-        internal EventWrittenEventArgs() { }
-
-        public Guid ActivityId { get { throw null; } }
-
-        public EventChannel Channel { get { throw null; } }
-
-        public int EventId { get { throw null; } }
-
-        public string EventName { get { throw null; } }
-
-        public EventSource EventSource { get { throw null; } }
-
-        public EventKeywords Keywords { get { throw null; } }
-
-        public EventLevel Level { get { throw null; } }
-
-        public string Message { get { throw null; } }
-
-        public EventOpcode Opcode { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<object> Payload { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<string> PayloadNames { get { throw null; } }
-
-        public Guid RelatedActivityId { get { throw null; } }
-
-        public EventTags Tags { get { throw null; } }
-
-        public EventTask Task { get { throw null; } }
-
-        public byte Version { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class NonEventAttribute : Attribute
-    {
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.diagnostics.tracing/4.3.0/system.diagnostics.tracing.nuspec b/src/referencePackages/src/system.diagnostics.tracing/4.3.0/system.diagnostics.tracing.nuspec
deleted file mode 100644
index 3320da4e..00000000
--- a/src/referencePackages/src/system.diagnostics.tracing/4.3.0/system.diagnostics.tracing.nuspec
+++ /dev/null
@@ -1,52 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Diagnostics.Tracing</id>
-    <version>4.3.0</version>
-    <title>System.Diagnostics.Tracing</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides class that enable you to create high performance tracing events to be captured by event tracing for Windows (ETW).
-
-Commonly Used Types:
-System.Diagnostics.Tracing.EventSource
-System.Diagnostics.Tracing.EventListener
-System.Diagnostics.Tracing.EventLevel
-System.Diagnostics.Tracing.EventKeywords
-System.Diagnostics.Tracing.EventWrittenEventArgs
-System.Diagnostics.Tracing.EventAttribute
-System.Diagnostics.Tracing.EventSourceAttribute
-System.Diagnostics.Tracing.NonEventAttribute
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.2">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.5">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.dynamic.runtime/4.3.0/Customizations.cs b/src/referencePackages/src/system.dynamic.runtime/4.3.0/Customizations.cs
deleted file mode 100644
index 33fc4fe0..00000000
--- a/src/referencePackages/src/system.dynamic.runtime/4.3.0/Customizations.cs
+++ /dev/null
@@ -1,14 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-
-namespace System.Dynamic
-{
-    public sealed partial class ExpandoObject : Collections.Generic.IDictionary<string, object>, Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>, Collections.Generic.IEnumerable<Collections.Generic.KeyValuePair<string, object>>, Collections.IEnumerable, ComponentModel.INotifyPropertyChanged, IDynamicMetaObjectProvider
-    {
-        event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
-    }
-}
diff --git a/src/referencePackages/src/system.dynamic.runtime/4.3.0/System.Dynamic.Runtime.4.3.0.csproj b/src/referencePackages/src/system.dynamic.runtime/4.3.0/System.Dynamic.Runtime.4.3.0.csproj
deleted file mode 100644
index 7bdf95a9..00000000
--- a/src/referencePackages/src/system.dynamic.runtime/4.3.0/System.Dynamic.Runtime.4.3.0.csproj
+++ /dev/null
@@ -1,32 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Dynamic.Runtime</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Linq.Expressions" Version="4.3.0" />
-    <PackageReference Include="System.ObjectModel" Version="4.3.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
-    <PackageReference Include="System.Linq" Version="4.3.0" />
-    <PackageReference Include="System.Linq.Expressions" Version="4.3.0" />
-    <PackageReference Include="System.ObjectModel" Version="4.3.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Emit" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Emit.ILGeneration" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.TypeExtensions" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Threading" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.dynamic.runtime/4.3.0/ref/netstandard1.0/System.Dynamic.Runtime.cs b/src/referencePackages/src/system.dynamic.runtime/4.3.0/ref/netstandard1.0/System.Dynamic.Runtime.cs
deleted file mode 100644
index 619d8bce..00000000
--- a/src/referencePackages/src/system.dynamic.runtime/4.3.0/ref/netstandard1.0/System.Dynamic.Runtime.cs
+++ /dev/null
@@ -1,498 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyDescription("System.Dynamic.Runtime.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Dynamic.Runtime.dll")]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyTitle("System.Dynamic.Runtime.dll")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Dynamic
-{
-    public abstract partial class BinaryOperationBinder : DynamicMetaObjectBinder
-    {
-        protected BinaryOperationBinder(Linq.Expressions.ExpressionType operation) { }
-
-        public Linq.Expressions.ExpressionType Operation { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackBinaryOperation(DynamicMetaObject target, DynamicMetaObject arg, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackBinaryOperation(DynamicMetaObject target, DynamicMetaObject arg) { throw null; }
-    }
-
-    public abstract partial class BindingRestrictions
-    {
-        internal BindingRestrictions() { }
-
-        public static readonly BindingRestrictions Empty;
-        public static BindingRestrictions Combine(Collections.Generic.IList<DynamicMetaObject> contributingObjects) { throw null; }
-
-        public static BindingRestrictions GetExpressionRestriction(Linq.Expressions.Expression expression) { throw null; }
-
-        public static BindingRestrictions GetInstanceRestriction(Linq.Expressions.Expression expression, object instance) { throw null; }
-
-        public static BindingRestrictions GetTypeRestriction(Linq.Expressions.Expression expression, Type type) { throw null; }
-
-        public BindingRestrictions Merge(BindingRestrictions restrictions) { throw null; }
-
-        public Linq.Expressions.Expression ToExpression() { throw null; }
-    }
-
-    public sealed partial class CallInfo
-    {
-        public CallInfo(int argCount, Collections.Generic.IEnumerable<string> argNames) { }
-
-        public CallInfo(int argCount, params string[] argNames) { }
-
-        public int ArgumentCount { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<string> ArgumentNames { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-    }
-
-    public abstract partial class ConvertBinder : DynamicMetaObjectBinder
-    {
-        protected ConvertBinder(Type type, bool @explicit) { }
-
-        public bool Explicit { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public Type Type { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackConvert(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackConvert(DynamicMetaObject target) { throw null; }
-    }
-
-    public abstract partial class CreateInstanceBinder : DynamicMetaObjectBinder
-    {
-        protected CreateInstanceBinder(CallInfo callInfo) { }
-
-        public CallInfo CallInfo { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackCreateInstance(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackCreateInstance(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-    }
-
-    public abstract partial class DeleteIndexBinder : DynamicMetaObjectBinder
-    {
-        protected DeleteIndexBinder(CallInfo callInfo) { }
-
-        public CallInfo CallInfo { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackDeleteIndex(DynamicMetaObject target, DynamicMetaObject[] indexes, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackDeleteIndex(DynamicMetaObject target, DynamicMetaObject[] indexes) { throw null; }
-    }
-
-    public abstract partial class DeleteMemberBinder : DynamicMetaObjectBinder
-    {
-        protected DeleteMemberBinder(string name, bool ignoreCase) { }
-
-        public bool IgnoreCase { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackDeleteMember(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackDeleteMember(DynamicMetaObject target) { throw null; }
-    }
-
-    public partial class DynamicMetaObject
-    {
-        public static readonly DynamicMetaObject[] EmptyMetaObjects;
-        public DynamicMetaObject(Linq.Expressions.Expression expression, BindingRestrictions restrictions, object value) { }
-
-        public DynamicMetaObject(Linq.Expressions.Expression expression, BindingRestrictions restrictions) { }
-
-        public Linq.Expressions.Expression Expression { get { throw null; } }
-
-        public bool HasValue { get { throw null; } }
-
-        public Type LimitType { get { throw null; } }
-
-        public BindingRestrictions Restrictions { get { throw null; } }
-
-        public Type RuntimeType { get { throw null; } }
-
-        public object Value { get { throw null; } }
-
-        public virtual DynamicMetaObject BindBinaryOperation(BinaryOperationBinder binder, DynamicMetaObject arg) { throw null; }
-
-        public virtual DynamicMetaObject BindConvert(ConvertBinder binder) { throw null; }
-
-        public virtual DynamicMetaObject BindCreateInstance(CreateInstanceBinder binder, DynamicMetaObject[] args) { throw null; }
-
-        public virtual DynamicMetaObject BindDeleteIndex(DeleteIndexBinder binder, DynamicMetaObject[] indexes) { throw null; }
-
-        public virtual DynamicMetaObject BindDeleteMember(DeleteMemberBinder binder) { throw null; }
-
-        public virtual DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes) { throw null; }
-
-        public virtual DynamicMetaObject BindGetMember(GetMemberBinder binder) { throw null; }
-
-        public virtual DynamicMetaObject BindInvoke(InvokeBinder binder, DynamicMetaObject[] args) { throw null; }
-
-        public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args) { throw null; }
-
-        public virtual DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value) { throw null; }
-
-        public virtual DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value) { throw null; }
-
-        public virtual DynamicMetaObject BindUnaryOperation(UnaryOperationBinder binder) { throw null; }
-
-        public static DynamicMetaObject Create(object value, Linq.Expressions.Expression expression) { throw null; }
-
-        public virtual Collections.Generic.IEnumerable<string> GetDynamicMemberNames() { throw null; }
-    }
-
-    public abstract partial class DynamicMetaObjectBinder : Runtime.CompilerServices.CallSiteBinder
-    {
-        public virtual Type ReturnType { get { throw null; } }
-
-        public abstract DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args);
-        public sealed override Linq.Expressions.Expression Bind(object[] args, Collections.ObjectModel.ReadOnlyCollection<Linq.Expressions.ParameterExpression> parameters, Linq.Expressions.LabelTarget returnLabel) { throw null; }
-
-        public DynamicMetaObject Defer(DynamicMetaObject target, params DynamicMetaObject[] args) { throw null; }
-
-        public DynamicMetaObject Defer(params DynamicMetaObject[] args) { throw null; }
-
-        public Linq.Expressions.Expression GetUpdateExpression(Type type) { throw null; }
-    }
-
-    public partial class DynamicObject : IDynamicMetaObjectProvider
-    {
-        protected DynamicObject() { }
-
-        public virtual Collections.Generic.IEnumerable<string> GetDynamicMemberNames() { throw null; }
-
-        public virtual DynamicMetaObject GetMetaObject(Linq.Expressions.Expression parameter) { throw null; }
-
-        public virtual bool TryBinaryOperation(BinaryOperationBinder binder, object arg, out object result) { throw null; }
-
-        public virtual bool TryConvert(ConvertBinder binder, out object result) { throw null; }
-
-        public virtual bool TryCreateInstance(CreateInstanceBinder binder, object[] args, out object result) { throw null; }
-
-        public virtual bool TryDeleteIndex(DeleteIndexBinder binder, object[] indexes) { throw null; }
-
-        public virtual bool TryDeleteMember(DeleteMemberBinder binder) { throw null; }
-
-        public virtual bool TryGetIndex(GetIndexBinder binder, object[] indexes, out object result) { throw null; }
-
-        public virtual bool TryGetMember(GetMemberBinder binder, out object result) { throw null; }
-
-        public virtual bool TryInvoke(InvokeBinder binder, object[] args, out object result) { throw null; }
-
-        public virtual bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result) { throw null; }
-
-        public virtual bool TrySetIndex(SetIndexBinder binder, object[] indexes, object value) { throw null; }
-
-        public virtual bool TrySetMember(SetMemberBinder binder, object value) { throw null; }
-
-        public virtual bool TryUnaryOperation(UnaryOperationBinder binder, out object result) { throw null; }
-    }
-
-    public sealed partial class ExpandoObject : Collections.Generic.IDictionary<string, object>, Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>, Collections.Generic.IEnumerable<Collections.Generic.KeyValuePair<string, object>>, Collections.IEnumerable, ComponentModel.INotifyPropertyChanged, IDynamicMetaObjectProvider
-    {
-        int Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>.Count { get { throw null; } }
-
-        bool Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>.IsReadOnly { get { throw null; } }
-
-        object Collections.Generic.IDictionary<string, object>.this[string key] { get { throw null; } set { } }
-
-        Collections.Generic.ICollection<string> Collections.Generic.IDictionary<string, object>.Keys { get { throw null; } }
-
-        Collections.Generic.ICollection<object> Collections.Generic.IDictionary<string, object>.Values { get { throw null; } }
-
-        void Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>.Add(Collections.Generic.KeyValuePair<string, object> item) { }
-
-        void Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>.Clear() { }
-
-        bool Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>.Contains(Collections.Generic.KeyValuePair<string, object> item) { throw null; }
-
-        void Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>.CopyTo(Collections.Generic.KeyValuePair<string, object>[] array, int arrayIndex) { }
-
-        bool Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>.Remove(Collections.Generic.KeyValuePair<string, object> item) { throw null; }
-
-        void Collections.Generic.IDictionary<string, object>.Add(string key, object value) { }
-
-        bool Collections.Generic.IDictionary<string, object>.ContainsKey(string key) { throw null; }
-
-        bool Collections.Generic.IDictionary<string, object>.Remove(string key) { throw null; }
-
-        bool Collections.Generic.IDictionary<string, object>.TryGetValue(string key, out object value) { throw null; }
-
-        Collections.Generic.IEnumerator<Collections.Generic.KeyValuePair<string, object>> Collections.Generic.IEnumerable<Collections.Generic.KeyValuePair<string, object>>.GetEnumerator() { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        DynamicMetaObject IDynamicMetaObjectProvider.GetMetaObject(Linq.Expressions.Expression parameter) { throw null; }
-    }
-
-    public abstract partial class GetIndexBinder : DynamicMetaObjectBinder
-    {
-        protected GetIndexBinder(CallInfo callInfo) { }
-
-        public CallInfo CallInfo { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackGetIndex(DynamicMetaObject target, DynamicMetaObject[] indexes, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackGetIndex(DynamicMetaObject target, DynamicMetaObject[] indexes) { throw null; }
-    }
-
-    public abstract partial class GetMemberBinder : DynamicMetaObjectBinder
-    {
-        protected GetMemberBinder(string name, bool ignoreCase) { }
-
-        public bool IgnoreCase { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackGetMember(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackGetMember(DynamicMetaObject target) { throw null; }
-    }
-
-    public partial interface IDynamicMetaObjectProvider
-    {
-        DynamicMetaObject GetMetaObject(Linq.Expressions.Expression parameter);
-    }
-
-    public partial interface IInvokeOnGetBinder
-    {
-        bool InvokeOnGet { get; }
-    }
-
-    public abstract partial class InvokeBinder : DynamicMetaObjectBinder
-    {
-        protected InvokeBinder(CallInfo callInfo) { }
-
-        public CallInfo CallInfo { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-    }
-
-    public abstract partial class InvokeMemberBinder : DynamicMetaObjectBinder
-    {
-        protected InvokeMemberBinder(string name, bool ignoreCase, CallInfo callInfo) { }
-
-        public CallInfo CallInfo { get { throw null; } }
-
-        public bool IgnoreCase { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion);
-        public abstract DynamicMetaObject FallbackInvokeMember(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackInvokeMember(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-    }
-
-    public abstract partial class SetIndexBinder : DynamicMetaObjectBinder
-    {
-        protected SetIndexBinder(CallInfo callInfo) { }
-
-        public CallInfo CallInfo { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackSetIndex(DynamicMetaObject target, DynamicMetaObject[] indexes, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackSetIndex(DynamicMetaObject target, DynamicMetaObject[] indexes, DynamicMetaObject value) { throw null; }
-    }
-
-    public abstract partial class SetMemberBinder : DynamicMetaObjectBinder
-    {
-        protected SetMemberBinder(string name, bool ignoreCase) { }
-
-        public bool IgnoreCase { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value) { throw null; }
-    }
-
-    public abstract partial class UnaryOperationBinder : DynamicMetaObjectBinder
-    {
-        protected UnaryOperationBinder(Linq.Expressions.ExpressionType operation) { }
-
-        public Linq.Expressions.ExpressionType Operation { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackUnaryOperation(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackUnaryOperation(DynamicMetaObject target) { throw null; }
-    }
-}
-
-namespace System.Linq.Expressions
-{
-    public partial class DynamicExpression : Expression
-    {
-        internal DynamicExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        public Runtime.CompilerServices.CallSiteBinder Binder { get { throw null; } }
-
-        public Type DelegateType { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        protected override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public static DynamicExpression Dynamic(Runtime.CompilerServices.CallSiteBinder binder, Type returnType, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static DynamicExpression Dynamic(Runtime.CompilerServices.CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2, Expression arg3) { throw null; }
-
-        public static DynamicExpression Dynamic(Runtime.CompilerServices.CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2) { throw null; }
-
-        public static DynamicExpression Dynamic(Runtime.CompilerServices.CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1) { throw null; }
-
-        public static DynamicExpression Dynamic(Runtime.CompilerServices.CallSiteBinder binder, Type returnType, Expression arg0) { throw null; }
-
-        public static DynamicExpression Dynamic(Runtime.CompilerServices.CallSiteBinder binder, Type returnType, params Expression[] arguments) { throw null; }
-
-        public static DynamicExpression MakeDynamic(Type delegateType, Runtime.CompilerServices.CallSiteBinder binder, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static DynamicExpression MakeDynamic(Type delegateType, Runtime.CompilerServices.CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2, Expression arg3) { throw null; }
-
-        public static DynamicExpression MakeDynamic(Type delegateType, Runtime.CompilerServices.CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2) { throw null; }
-
-        public static DynamicExpression MakeDynamic(Type delegateType, Runtime.CompilerServices.CallSiteBinder binder, Expression arg0, Expression arg1) { throw null; }
-
-        public static DynamicExpression MakeDynamic(Type delegateType, Runtime.CompilerServices.CallSiteBinder binder, Expression arg0) { throw null; }
-
-        public static DynamicExpression MakeDynamic(Type delegateType, Runtime.CompilerServices.CallSiteBinder binder, params Expression[] arguments) { throw null; }
-
-        public DynamicExpression Update(Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public abstract partial class DynamicExpressionVisitor : ExpressionVisitor
-    {
-        protected virtual Expression VisitDynamic(DynamicExpression node) { throw null; }
-    }
-}
-
-namespace System.Runtime.CompilerServices
-{
-    public partial class CallSite
-    {
-        internal CallSite() { }
-
-        public CallSiteBinder Binder { get { throw null; } }
-
-        public static CallSite Create(Type delegateType, CallSiteBinder binder) { throw null; }
-    }
-
-    public abstract partial class CallSiteBinder
-    {
-        public static Linq.Expressions.LabelTarget UpdateLabel { get { throw null; } }
-
-        public abstract Linq.Expressions.Expression Bind(object[] args, Collections.ObjectModel.ReadOnlyCollection<Linq.Expressions.ParameterExpression> parameters, Linq.Expressions.LabelTarget returnLabel);
-        public virtual T BindDelegate<T>(CallSite<T> site, object[] args)
-            where T : class { throw null; }
-
-        protected void CacheTarget<T>(T target)
-            where T : class { }
-    }
-
-    public static partial class CallSiteHelpers
-    {
-        public static bool IsInternalFrame(Reflection.MethodBase mb) { throw null; }
-    }
-
-    public partial class CallSite<T> : CallSite where T : class
-    {
-        internal CallSite() { }
-
-        public T Target;
-        public T Update { get { throw null; } }
-
-        public static CallSite<T> Create(CallSiteBinder binder) { throw null; }
-    }
-
-    public sealed partial class ConditionalWeakTable<TKey, TValue>
-        where TKey : class where TValue : class
-    {
-        public void Add(TKey key, TValue value) { }
-
-        ~ConditionalWeakTable() {
-        }
-
-        public TValue GetOrCreateValue(TKey key) { throw null; }
-
-        public TValue GetValue(TKey key, CreateValueCallback createValueCallback) { throw null; }
-
-        public bool Remove(TKey key) { throw null; }
-
-        public bool TryGetValue(TKey key, out TValue value) { throw null; }
-
-        public delegate TValue CreateValueCallback(TKey key);
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.ReturnValue)]
-    public sealed partial class DynamicAttribute : Attribute
-    {
-        public DynamicAttribute() { }
-
-        public DynamicAttribute(bool[] transformFlags) { }
-
-        public Collections.Generic.IList<bool> TransformFlags { get { throw null; } }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.dynamic.runtime/4.3.0/ref/netstandard1.3/System.Dynamic.Runtime.cs b/src/referencePackages/src/system.dynamic.runtime/4.3.0/ref/netstandard1.3/System.Dynamic.Runtime.cs
deleted file mode 100644
index 15f13e13..00000000
--- a/src/referencePackages/src/system.dynamic.runtime/4.3.0/ref/netstandard1.3/System.Dynamic.Runtime.cs
+++ /dev/null
@@ -1,491 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Dynamic.Runtime")]
-[assembly: System.Reflection.AssemblyDescription("System.Dynamic.Runtime")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Dynamic.Runtime")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-[assembly: System.Runtime.CompilerServices.TypeForwardedTo(typeof(System.Runtime.CompilerServices.ConditionalWeakTable<,>))]
-namespace System.Dynamic
-{
-    public abstract partial class BinaryOperationBinder : DynamicMetaObjectBinder
-    {
-        protected BinaryOperationBinder(Linq.Expressions.ExpressionType operation) { }
-
-        public Linq.Expressions.ExpressionType Operation { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackBinaryOperation(DynamicMetaObject target, DynamicMetaObject arg, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackBinaryOperation(DynamicMetaObject target, DynamicMetaObject arg) { throw null; }
-    }
-
-    public abstract partial class BindingRestrictions
-    {
-        internal BindingRestrictions() { }
-
-        public static readonly BindingRestrictions Empty;
-        public static BindingRestrictions Combine(Collections.Generic.IList<DynamicMetaObject> contributingObjects) { throw null; }
-
-        public static BindingRestrictions GetExpressionRestriction(Linq.Expressions.Expression expression) { throw null; }
-
-        public static BindingRestrictions GetInstanceRestriction(Linq.Expressions.Expression expression, object instance) { throw null; }
-
-        public static BindingRestrictions GetTypeRestriction(Linq.Expressions.Expression expression, Type type) { throw null; }
-
-        public BindingRestrictions Merge(BindingRestrictions restrictions) { throw null; }
-
-        public Linq.Expressions.Expression ToExpression() { throw null; }
-    }
-
-    public sealed partial class CallInfo
-    {
-        public CallInfo(int argCount, Collections.Generic.IEnumerable<string> argNames) { }
-
-        public CallInfo(int argCount, params string[] argNames) { }
-
-        public int ArgumentCount { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<string> ArgumentNames { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-    }
-
-    public abstract partial class ConvertBinder : DynamicMetaObjectBinder
-    {
-        protected ConvertBinder(Type type, bool @explicit) { }
-
-        public bool Explicit { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public Type Type { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackConvert(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackConvert(DynamicMetaObject target) { throw null; }
-    }
-
-    public abstract partial class CreateInstanceBinder : DynamicMetaObjectBinder
-    {
-        protected CreateInstanceBinder(CallInfo callInfo) { }
-
-        public CallInfo CallInfo { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackCreateInstance(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackCreateInstance(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-    }
-
-    public abstract partial class DeleteIndexBinder : DynamicMetaObjectBinder
-    {
-        protected DeleteIndexBinder(CallInfo callInfo) { }
-
-        public CallInfo CallInfo { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackDeleteIndex(DynamicMetaObject target, DynamicMetaObject[] indexes, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackDeleteIndex(DynamicMetaObject target, DynamicMetaObject[] indexes) { throw null; }
-    }
-
-    public abstract partial class DeleteMemberBinder : DynamicMetaObjectBinder
-    {
-        protected DeleteMemberBinder(string name, bool ignoreCase) { }
-
-        public bool IgnoreCase { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackDeleteMember(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackDeleteMember(DynamicMetaObject target) { throw null; }
-    }
-
-    public partial class DynamicMetaObject
-    {
-        public static readonly DynamicMetaObject[] EmptyMetaObjects;
-        public DynamicMetaObject(Linq.Expressions.Expression expression, BindingRestrictions restrictions, object value) { }
-
-        public DynamicMetaObject(Linq.Expressions.Expression expression, BindingRestrictions restrictions) { }
-
-        public Linq.Expressions.Expression Expression { get { throw null; } }
-
-        public bool HasValue { get { throw null; } }
-
-        public Type LimitType { get { throw null; } }
-
-        public BindingRestrictions Restrictions { get { throw null; } }
-
-        public Type RuntimeType { get { throw null; } }
-
-        public object Value { get { throw null; } }
-
-        public virtual DynamicMetaObject BindBinaryOperation(BinaryOperationBinder binder, DynamicMetaObject arg) { throw null; }
-
-        public virtual DynamicMetaObject BindConvert(ConvertBinder binder) { throw null; }
-
-        public virtual DynamicMetaObject BindCreateInstance(CreateInstanceBinder binder, DynamicMetaObject[] args) { throw null; }
-
-        public virtual DynamicMetaObject BindDeleteIndex(DeleteIndexBinder binder, DynamicMetaObject[] indexes) { throw null; }
-
-        public virtual DynamicMetaObject BindDeleteMember(DeleteMemberBinder binder) { throw null; }
-
-        public virtual DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes) { throw null; }
-
-        public virtual DynamicMetaObject BindGetMember(GetMemberBinder binder) { throw null; }
-
-        public virtual DynamicMetaObject BindInvoke(InvokeBinder binder, DynamicMetaObject[] args) { throw null; }
-
-        public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args) { throw null; }
-
-        public virtual DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value) { throw null; }
-
-        public virtual DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value) { throw null; }
-
-        public virtual DynamicMetaObject BindUnaryOperation(UnaryOperationBinder binder) { throw null; }
-
-        public static DynamicMetaObject Create(object value, Linq.Expressions.Expression expression) { throw null; }
-
-        public virtual Collections.Generic.IEnumerable<string> GetDynamicMemberNames() { throw null; }
-    }
-
-    public abstract partial class DynamicMetaObjectBinder : Runtime.CompilerServices.CallSiteBinder
-    {
-        public virtual Type ReturnType { get { throw null; } }
-
-        public abstract DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args);
-        public sealed override Linq.Expressions.Expression Bind(object[] args, Collections.ObjectModel.ReadOnlyCollection<Linq.Expressions.ParameterExpression> parameters, Linq.Expressions.LabelTarget returnLabel) { throw null; }
-
-        public DynamicMetaObject Defer(DynamicMetaObject target, params DynamicMetaObject[] args) { throw null; }
-
-        public DynamicMetaObject Defer(params DynamicMetaObject[] args) { throw null; }
-
-        public Linq.Expressions.Expression GetUpdateExpression(Type type) { throw null; }
-    }
-
-    public partial class DynamicObject : IDynamicMetaObjectProvider
-    {
-        protected DynamicObject() { }
-
-        public virtual Collections.Generic.IEnumerable<string> GetDynamicMemberNames() { throw null; }
-
-        public virtual DynamicMetaObject GetMetaObject(Linq.Expressions.Expression parameter) { throw null; }
-
-        public virtual bool TryBinaryOperation(BinaryOperationBinder binder, object arg, out object result) { throw null; }
-
-        public virtual bool TryConvert(ConvertBinder binder, out object result) { throw null; }
-
-        public virtual bool TryCreateInstance(CreateInstanceBinder binder, object[] args, out object result) { throw null; }
-
-        public virtual bool TryDeleteIndex(DeleteIndexBinder binder, object[] indexes) { throw null; }
-
-        public virtual bool TryDeleteMember(DeleteMemberBinder binder) { throw null; }
-
-        public virtual bool TryGetIndex(GetIndexBinder binder, object[] indexes, out object result) { throw null; }
-
-        public virtual bool TryGetMember(GetMemberBinder binder, out object result) { throw null; }
-
-        public virtual bool TryInvoke(InvokeBinder binder, object[] args, out object result) { throw null; }
-
-        public virtual bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result) { throw null; }
-
-        public virtual bool TrySetIndex(SetIndexBinder binder, object[] indexes, object value) { throw null; }
-
-        public virtual bool TrySetMember(SetMemberBinder binder, object value) { throw null; }
-
-        public virtual bool TryUnaryOperation(UnaryOperationBinder binder, out object result) { throw null; }
-    }
-
-    public sealed partial class ExpandoObject : Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>, Collections.Generic.IEnumerable<Collections.Generic.KeyValuePair<string, object>>, Collections.IEnumerable, Collections.Generic.IDictionary<string, object>, ComponentModel.INotifyPropertyChanged, IDynamicMetaObjectProvider
-    {
-        int Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>.Count { get { throw null; } }
-
-        bool Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>.IsReadOnly { get { throw null; } }
-
-        object Collections.Generic.IDictionary<string, object>.this[string key] { get { throw null; } set { } }
-
-        Collections.Generic.ICollection<string> Collections.Generic.IDictionary<string, object>.Keys { get { throw null; } }
-
-        Collections.Generic.ICollection<object> Collections.Generic.IDictionary<string, object>.Values { get { throw null; } }
-
-        void Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>.Add(Collections.Generic.KeyValuePair<string, object> item) { }
-
-        void Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>.Clear() { }
-
-        bool Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>.Contains(Collections.Generic.KeyValuePair<string, object> item) { throw null; }
-
-        void Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>.CopyTo(Collections.Generic.KeyValuePair<string, object>[] array, int arrayIndex) { }
-
-        bool Collections.Generic.ICollection<Collections.Generic.KeyValuePair<string, object>>.Remove(Collections.Generic.KeyValuePair<string, object> item) { throw null; }
-
-        void Collections.Generic.IDictionary<string, object>.Add(string key, object value) { }
-
-        bool Collections.Generic.IDictionary<string, object>.ContainsKey(string key) { throw null; }
-
-        bool Collections.Generic.IDictionary<string, object>.Remove(string key) { throw null; }
-
-        bool Collections.Generic.IDictionary<string, object>.TryGetValue(string key, out object value) { throw null; }
-
-        Collections.Generic.IEnumerator<Collections.Generic.KeyValuePair<string, object>> Collections.Generic.IEnumerable<Collections.Generic.KeyValuePair<string, object>>.GetEnumerator() { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        DynamicMetaObject IDynamicMetaObjectProvider.GetMetaObject(Linq.Expressions.Expression parameter) { throw null; }
-    }
-
-    public abstract partial class GetIndexBinder : DynamicMetaObjectBinder
-    {
-        protected GetIndexBinder(CallInfo callInfo) { }
-
-        public CallInfo CallInfo { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackGetIndex(DynamicMetaObject target, DynamicMetaObject[] indexes, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackGetIndex(DynamicMetaObject target, DynamicMetaObject[] indexes) { throw null; }
-    }
-
-    public abstract partial class GetMemberBinder : DynamicMetaObjectBinder
-    {
-        protected GetMemberBinder(string name, bool ignoreCase) { }
-
-        public bool IgnoreCase { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackGetMember(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackGetMember(DynamicMetaObject target) { throw null; }
-    }
-
-    public partial interface IDynamicMetaObjectProvider
-    {
-        DynamicMetaObject GetMetaObject(Linq.Expressions.Expression parameter);
-    }
-
-    public partial interface IInvokeOnGetBinder
-    {
-        bool InvokeOnGet { get; }
-    }
-
-    public abstract partial class InvokeBinder : DynamicMetaObjectBinder
-    {
-        protected InvokeBinder(CallInfo callInfo) { }
-
-        public CallInfo CallInfo { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-    }
-
-    public abstract partial class InvokeMemberBinder : DynamicMetaObjectBinder
-    {
-        protected InvokeMemberBinder(string name, bool ignoreCase, CallInfo callInfo) { }
-
-        public CallInfo CallInfo { get { throw null; } }
-
-        public bool IgnoreCase { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion);
-        public abstract DynamicMetaObject FallbackInvokeMember(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackInvokeMember(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-    }
-
-    public abstract partial class SetIndexBinder : DynamicMetaObjectBinder
-    {
-        protected SetIndexBinder(CallInfo callInfo) { }
-
-        public CallInfo CallInfo { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackSetIndex(DynamicMetaObject target, DynamicMetaObject[] indexes, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackSetIndex(DynamicMetaObject target, DynamicMetaObject[] indexes, DynamicMetaObject value) { throw null; }
-    }
-
-    public abstract partial class SetMemberBinder : DynamicMetaObjectBinder
-    {
-        protected SetMemberBinder(string name, bool ignoreCase) { }
-
-        public bool IgnoreCase { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value) { throw null; }
-    }
-
-    public abstract partial class UnaryOperationBinder : DynamicMetaObjectBinder
-    {
-        protected UnaryOperationBinder(Linq.Expressions.ExpressionType operation) { }
-
-        public Linq.Expressions.ExpressionType Operation { get { throw null; } }
-
-        public sealed override Type ReturnType { get { throw null; } }
-
-        public sealed override DynamicMetaObject Bind(DynamicMetaObject target, DynamicMetaObject[] args) { throw null; }
-
-        public abstract DynamicMetaObject FallbackUnaryOperation(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
-        public DynamicMetaObject FallbackUnaryOperation(DynamicMetaObject target) { throw null; }
-    }
-}
-
-namespace System.Linq.Expressions
-{
-    public partial class DynamicExpression : Expression, IArgumentProvider, IDynamicExpression
-    {
-        internal DynamicExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        public Runtime.CompilerServices.CallSiteBinder Binder { get { throw null; } }
-
-        public Type DelegateType { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        int IArgumentProvider.ArgumentCount { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        protected override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public static DynamicExpression Dynamic(Runtime.CompilerServices.CallSiteBinder binder, Type returnType, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static DynamicExpression Dynamic(Runtime.CompilerServices.CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2, Expression arg3) { throw null; }
-
-        public static DynamicExpression Dynamic(Runtime.CompilerServices.CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2) { throw null; }
-
-        public static DynamicExpression Dynamic(Runtime.CompilerServices.CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1) { throw null; }
-
-        public static DynamicExpression Dynamic(Runtime.CompilerServices.CallSiteBinder binder, Type returnType, Expression arg0) { throw null; }
-
-        public static DynamicExpression Dynamic(Runtime.CompilerServices.CallSiteBinder binder, Type returnType, params Expression[] arguments) { throw null; }
-
-        public static DynamicExpression MakeDynamic(Type delegateType, Runtime.CompilerServices.CallSiteBinder binder, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static DynamicExpression MakeDynamic(Type delegateType, Runtime.CompilerServices.CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2, Expression arg3) { throw null; }
-
-        public static DynamicExpression MakeDynamic(Type delegateType, Runtime.CompilerServices.CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2) { throw null; }
-
-        public static DynamicExpression MakeDynamic(Type delegateType, Runtime.CompilerServices.CallSiteBinder binder, Expression arg0, Expression arg1) { throw null; }
-
-        public static DynamicExpression MakeDynamic(Type delegateType, Runtime.CompilerServices.CallSiteBinder binder, Expression arg0) { throw null; }
-
-        public static DynamicExpression MakeDynamic(Type delegateType, Runtime.CompilerServices.CallSiteBinder binder, params Expression[] arguments) { throw null; }
-
-        Expression IArgumentProvider.GetArgument(int index) { throw null; }
-
-        object IDynamicExpression.CreateCallSite() { throw null; }
-
-        Expression IDynamicExpression.Rewrite(Expression[] args) { throw null; }
-
-        public DynamicExpression Update(Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public abstract partial class DynamicExpressionVisitor : ExpressionVisitor
-    {
-        protected virtual Expression VisitDynamic(DynamicExpression node) { throw null; }
-    }
-}
-
-namespace System.Runtime.CompilerServices
-{
-    public partial class CallSite
-    {
-        internal CallSite() { }
-
-        public CallSiteBinder Binder { get { throw null; } }
-
-        public static CallSite Create(Type delegateType, CallSiteBinder binder) { throw null; }
-    }
-
-    public abstract partial class CallSiteBinder
-    {
-        public static Linq.Expressions.LabelTarget UpdateLabel { get { throw null; } }
-
-        public abstract Linq.Expressions.Expression Bind(object[] args, Collections.ObjectModel.ReadOnlyCollection<Linq.Expressions.ParameterExpression> parameters, Linq.Expressions.LabelTarget returnLabel);
-        public virtual T BindDelegate<T>(CallSite<T> site, object[] args)
-            where T : class { throw null; }
-
-        protected void CacheTarget<T>(T target)
-            where T : class { }
-    }
-
-    public static partial class CallSiteHelpers
-    {
-        public static bool IsInternalFrame(Reflection.MethodBase mb) { throw null; }
-    }
-
-    public partial class CallSite<T> : CallSite where T : class
-    {
-        internal CallSite() { }
-
-        public T Target;
-        public T Update { get { throw null; } }
-
-        public static CallSite<T> Create(CallSiteBinder binder) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.ReturnValue)]
-    public sealed partial class DynamicAttribute : Attribute
-    {
-        public DynamicAttribute() { }
-
-        public DynamicAttribute(bool[] transformFlags) { }
-
-        public Collections.Generic.IList<bool> TransformFlags { get { throw null; } }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.dynamic.runtime/4.3.0/system.dynamic.runtime.nuspec b/src/referencePackages/src/system.dynamic.runtime/4.3.0/system.dynamic.runtime.nuspec
deleted file mode 100644
index cb846fa4..00000000
--- a/src/referencePackages/src/system.dynamic.runtime/4.3.0/system.dynamic.runtime.nuspec
+++ /dev/null
@@ -1,56 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Dynamic.Runtime</id>
-    <version>4.3.0</version>
-    <title>System.Dynamic.Runtime</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides classes and interfaces that support the Dynamic Language Runtime (DLR).
-
-Commonly Used Types:
-System.Runtime.CompilerServices.CallSite
-System.Runtime.CompilerServices.CallSite&lt;T&gt;
-System.Dynamic.IDynamicMetaObjectProvider
-System.Dynamic.DynamicMetaObject
-System.Dynamic.SetMemberBinder
-System.Dynamic.GetMemberBinder
-System.Dynamic.ExpandoObject
-System.Dynamic.DynamicObject
-System.Runtime.CompilerServices.CallSiteBinder
-System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey, TValue&gt;
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Linq.Expressions" version="4.3.0" />
-        <dependency id="System.ObjectModel" version="4.3.0" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Linq" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Linq.Expressions" version="4.3.0" />
-        <dependency id="System.ObjectModel" version="4.3.0" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Reflection.Emit" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Reflection.Emit.ILGeneration" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Reflection.Primitives" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Reflection.TypeExtensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Threading" version="4.3.0" exclude="Compile" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.globalization.calendars/4.3.0/System.Globalization.Calendars.4.3.0.csproj b/src/referencePackages/src/system.globalization.calendars/4.3.0/System.Globalization.Calendars.4.3.0.csproj
deleted file mode 100644
index 00794ba2..00000000
--- a/src/referencePackages/src/system.globalization.calendars/4.3.0/System.Globalization.Calendars.4.3.0.csproj
+++ /dev/null
@@ -1,15 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Globalization.Calendars</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Globalization" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.globalization.calendars/4.3.0/ref/netstandard1.3/System.Globalization.Calendars.cs b/src/referencePackages/src/system.globalization.calendars/4.3.0/ref/netstandard1.3/System.Globalization.Calendars.cs
deleted file mode 100644
index 5a34620c..00000000
--- a/src/referencePackages/src/system.globalization.calendars/4.3.0/ref/netstandard1.3/System.Globalization.Calendars.cs
+++ /dev/null
@@ -1,599 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Globalization.Calendars")]
-[assembly: System.Reflection.AssemblyDescription("System.Globalization.Calendars")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Globalization.Calendars")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.1.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Globalization
-{
-    public partial class ChineseLunisolarCalendar : EastAsianLunisolarCalendar
-    {
-        public ChineseLunisolarCalendar() { }
-
-        public override int[] Eras { get { throw null; } }
-
-        public override DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public override DateTime MinSupportedDateTime { get { throw null; } }
-
-        public override int GetEra(DateTime time) { throw null; }
-    }
-
-    public abstract partial class EastAsianLunisolarCalendar : Calendar
-    {
-        internal EastAsianLunisolarCalendar() { }
-
-        public override int TwoDigitYearMax { get { throw null; } set { } }
-
-        public override DateTime AddMonths(DateTime time, int months) { throw null; }
-
-        public override DateTime AddYears(DateTime time, int years) { throw null; }
-
-        public int GetCelestialStem(int sexagenaryYear) { throw null; }
-
-        public override int GetDayOfMonth(DateTime time) { throw null; }
-
-        public override DayOfWeek GetDayOfWeek(DateTime time) { throw null; }
-
-        public override int GetDayOfYear(DateTime time) { throw null; }
-
-        public override int GetDaysInMonth(int year, int month, int era) { throw null; }
-
-        public override int GetDaysInYear(int year, int era) { throw null; }
-
-        public override int GetLeapMonth(int year, int era) { throw null; }
-
-        public override int GetMonth(DateTime time) { throw null; }
-
-        public override int GetMonthsInYear(int year, int era) { throw null; }
-
-        public virtual int GetSexagenaryYear(DateTime time) { throw null; }
-
-        public int GetTerrestrialBranch(int sexagenaryYear) { throw null; }
-
-        public override int GetYear(DateTime time) { throw null; }
-
-        public override bool IsLeapDay(int year, int month, int day, int era) { throw null; }
-
-        public override bool IsLeapMonth(int year, int month, int era) { throw null; }
-
-        public override bool IsLeapYear(int year, int era) { throw null; }
-
-        public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { throw null; }
-
-        public override int ToFourDigitYear(int year) { throw null; }
-    }
-
-    public partial class GregorianCalendar : Calendar
-    {
-        public GregorianCalendar() { }
-
-        public GregorianCalendar(GregorianCalendarTypes type) { }
-
-        public virtual GregorianCalendarTypes CalendarType { get { throw null; } set { } }
-
-        public override int[] Eras { get { throw null; } }
-
-        public override DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public override DateTime MinSupportedDateTime { get { throw null; } }
-
-        public override int TwoDigitYearMax { get { throw null; } set { } }
-
-        public override DateTime AddMonths(DateTime time, int months) { throw null; }
-
-        public override DateTime AddYears(DateTime time, int years) { throw null; }
-
-        public override int GetDayOfMonth(DateTime time) { throw null; }
-
-        public override DayOfWeek GetDayOfWeek(DateTime time) { throw null; }
-
-        public override int GetDayOfYear(DateTime time) { throw null; }
-
-        public override int GetDaysInMonth(int year, int month, int era) { throw null; }
-
-        public override int GetDaysInYear(int year, int era) { throw null; }
-
-        public override int GetEra(DateTime time) { throw null; }
-
-        public override int GetLeapMonth(int year, int era) { throw null; }
-
-        public override int GetMonth(DateTime time) { throw null; }
-
-        public override int GetMonthsInYear(int year, int era) { throw null; }
-
-        public override int GetYear(DateTime time) { throw null; }
-
-        public override bool IsLeapDay(int year, int month, int day, int era) { throw null; }
-
-        public override bool IsLeapMonth(int year, int month, int era) { throw null; }
-
-        public override bool IsLeapYear(int year, int era) { throw null; }
-
-        public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { throw null; }
-
-        public override int ToFourDigitYear(int year) { throw null; }
-    }
-
-    public enum GregorianCalendarTypes
-    {
-        Localized = 1,
-        USEnglish = 2,
-        MiddleEastFrench = 9,
-        Arabic = 10,
-        TransliteratedEnglish = 11,
-        TransliteratedFrench = 12
-    }
-
-    public partial class HebrewCalendar : Calendar
-    {
-        public override int[] Eras { get { throw null; } }
-
-        public override DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public override DateTime MinSupportedDateTime { get { throw null; } }
-
-        public override int TwoDigitYearMax { get { throw null; } set { } }
-
-        public override DateTime AddMonths(DateTime time, int months) { throw null; }
-
-        public override DateTime AddYears(DateTime time, int years) { throw null; }
-
-        public override int GetDayOfMonth(DateTime time) { throw null; }
-
-        public override DayOfWeek GetDayOfWeek(DateTime time) { throw null; }
-
-        public override int GetDayOfYear(DateTime time) { throw null; }
-
-        public override int GetDaysInMonth(int year, int month, int era) { throw null; }
-
-        public override int GetDaysInYear(int year, int era) { throw null; }
-
-        public override int GetEra(DateTime time) { throw null; }
-
-        public override int GetLeapMonth(int year, int era) { throw null; }
-
-        public override int GetMonth(DateTime time) { throw null; }
-
-        public override int GetMonthsInYear(int year, int era) { throw null; }
-
-        public override int GetYear(DateTime time) { throw null; }
-
-        public override bool IsLeapDay(int year, int month, int day, int era) { throw null; }
-
-        public override bool IsLeapMonth(int year, int month, int era) { throw null; }
-
-        public override bool IsLeapYear(int year, int era) { throw null; }
-
-        public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { throw null; }
-
-        public override int ToFourDigitYear(int year) { throw null; }
-    }
-
-    public partial class HijriCalendar : Calendar
-    {
-        public override int[] Eras { get { throw null; } }
-
-        public int HijriAdjustment { get { throw null; } set { } }
-
-        public override DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public override DateTime MinSupportedDateTime { get { throw null; } }
-
-        public override int TwoDigitYearMax { get { throw null; } set { } }
-
-        public override DateTime AddMonths(DateTime time, int months) { throw null; }
-
-        public override DateTime AddYears(DateTime time, int years) { throw null; }
-
-        public override int GetDayOfMonth(DateTime time) { throw null; }
-
-        public override DayOfWeek GetDayOfWeek(DateTime time) { throw null; }
-
-        public override int GetDayOfYear(DateTime time) { throw null; }
-
-        public override int GetDaysInMonth(int year, int month, int era) { throw null; }
-
-        public override int GetDaysInYear(int year, int era) { throw null; }
-
-        public override int GetEra(DateTime time) { throw null; }
-
-        public override int GetLeapMonth(int year, int era) { throw null; }
-
-        public override int GetMonth(DateTime time) { throw null; }
-
-        public override int GetMonthsInYear(int year, int era) { throw null; }
-
-        public override int GetYear(DateTime time) { throw null; }
-
-        public override bool IsLeapDay(int year, int month, int day, int era) { throw null; }
-
-        public override bool IsLeapMonth(int year, int month, int era) { throw null; }
-
-        public override bool IsLeapYear(int year, int era) { throw null; }
-
-        public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { throw null; }
-
-        public override int ToFourDigitYear(int year) { throw null; }
-    }
-
-    public partial class JapaneseCalendar : Calendar
-    {
-        public override int[] Eras { get { throw null; } }
-
-        public override DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public override DateTime MinSupportedDateTime { get { throw null; } }
-
-        public override int TwoDigitYearMax { get { throw null; } set { } }
-
-        public override DateTime AddMonths(DateTime time, int months) { throw null; }
-
-        public override DateTime AddYears(DateTime time, int years) { throw null; }
-
-        public override int GetDayOfMonth(DateTime time) { throw null; }
-
-        public override DayOfWeek GetDayOfWeek(DateTime time) { throw null; }
-
-        public override int GetDayOfYear(DateTime time) { throw null; }
-
-        public override int GetDaysInMonth(int year, int month, int era) { throw null; }
-
-        public override int GetDaysInYear(int year, int era) { throw null; }
-
-        public override int GetEra(DateTime time) { throw null; }
-
-        public override int GetLeapMonth(int year, int era) { throw null; }
-
-        public override int GetMonth(DateTime time) { throw null; }
-
-        public override int GetMonthsInYear(int year, int era) { throw null; }
-
-        public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek) { throw null; }
-
-        public override int GetYear(DateTime time) { throw null; }
-
-        public override bool IsLeapDay(int year, int month, int day, int era) { throw null; }
-
-        public override bool IsLeapMonth(int year, int month, int era) { throw null; }
-
-        public override bool IsLeapYear(int year, int era) { throw null; }
-
-        public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { throw null; }
-
-        public override int ToFourDigitYear(int year) { throw null; }
-    }
-
-    public partial class JapaneseLunisolarCalendar : EastAsianLunisolarCalendar
-    {
-        public JapaneseLunisolarCalendar() { }
-
-        public override int[] Eras { get { throw null; } }
-
-        public override DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public override DateTime MinSupportedDateTime { get { throw null; } }
-
-        public override int GetEra(DateTime time) { throw null; }
-    }
-
-    public partial class JulianCalendar : Calendar
-    {
-        public override int[] Eras { get { throw null; } }
-
-        public override DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public override DateTime MinSupportedDateTime { get { throw null; } }
-
-        public override int TwoDigitYearMax { get { throw null; } set { } }
-
-        public override DateTime AddMonths(DateTime time, int months) { throw null; }
-
-        public override DateTime AddYears(DateTime time, int years) { throw null; }
-
-        public override int GetDayOfMonth(DateTime time) { throw null; }
-
-        public override DayOfWeek GetDayOfWeek(DateTime time) { throw null; }
-
-        public override int GetDayOfYear(DateTime time) { throw null; }
-
-        public override int GetDaysInMonth(int year, int month, int era) { throw null; }
-
-        public override int GetDaysInYear(int year, int era) { throw null; }
-
-        public override int GetEra(DateTime time) { throw null; }
-
-        public override int GetLeapMonth(int year, int era) { throw null; }
-
-        public override int GetMonth(DateTime time) { throw null; }
-
-        public override int GetMonthsInYear(int year, int era) { throw null; }
-
-        public override int GetYear(DateTime time) { throw null; }
-
-        public override bool IsLeapDay(int year, int month, int day, int era) { throw null; }
-
-        public override bool IsLeapMonth(int year, int month, int era) { throw null; }
-
-        public override bool IsLeapYear(int year, int era) { throw null; }
-
-        public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { throw null; }
-
-        public override int ToFourDigitYear(int year) { throw null; }
-    }
-
-    public partial class KoreanCalendar : Calendar
-    {
-        public override int[] Eras { get { throw null; } }
-
-        public override DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public override DateTime MinSupportedDateTime { get { throw null; } }
-
-        public override int TwoDigitYearMax { get { throw null; } set { } }
-
-        public override DateTime AddMonths(DateTime time, int months) { throw null; }
-
-        public override DateTime AddYears(DateTime time, int years) { throw null; }
-
-        public override int GetDayOfMonth(DateTime time) { throw null; }
-
-        public override DayOfWeek GetDayOfWeek(DateTime time) { throw null; }
-
-        public override int GetDayOfYear(DateTime time) { throw null; }
-
-        public override int GetDaysInMonth(int year, int month, int era) { throw null; }
-
-        public override int GetDaysInYear(int year, int era) { throw null; }
-
-        public override int GetEra(DateTime time) { throw null; }
-
-        public override int GetLeapMonth(int year, int era) { throw null; }
-
-        public override int GetMonth(DateTime time) { throw null; }
-
-        public override int GetMonthsInYear(int year, int era) { throw null; }
-
-        public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek) { throw null; }
-
-        public override int GetYear(DateTime time) { throw null; }
-
-        public override bool IsLeapDay(int year, int month, int day, int era) { throw null; }
-
-        public override bool IsLeapMonth(int year, int month, int era) { throw null; }
-
-        public override bool IsLeapYear(int year, int era) { throw null; }
-
-        public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { throw null; }
-
-        public override int ToFourDigitYear(int year) { throw null; }
-    }
-
-    public partial class KoreanLunisolarCalendar : EastAsianLunisolarCalendar
-    {
-        public KoreanLunisolarCalendar() { }
-
-        public override int[] Eras { get { throw null; } }
-
-        public override DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public override DateTime MinSupportedDateTime { get { throw null; } }
-
-        public override int GetEra(DateTime time) { throw null; }
-    }
-
-    public partial class PersianCalendar : Calendar
-    {
-        public override int[] Eras { get { throw null; } }
-
-        public override DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public override DateTime MinSupportedDateTime { get { throw null; } }
-
-        public override int TwoDigitYearMax { get { throw null; } set { } }
-
-        public override DateTime AddMonths(DateTime time, int months) { throw null; }
-
-        public override DateTime AddYears(DateTime time, int years) { throw null; }
-
-        public override int GetDayOfMonth(DateTime time) { throw null; }
-
-        public override DayOfWeek GetDayOfWeek(DateTime time) { throw null; }
-
-        public override int GetDayOfYear(DateTime time) { throw null; }
-
-        public override int GetDaysInMonth(int year, int month, int era) { throw null; }
-
-        public override int GetDaysInYear(int year, int era) { throw null; }
-
-        public override int GetEra(DateTime time) { throw null; }
-
-        public override int GetLeapMonth(int year, int era) { throw null; }
-
-        public override int GetMonth(DateTime time) { throw null; }
-
-        public override int GetMonthsInYear(int year, int era) { throw null; }
-
-        public override int GetYear(DateTime time) { throw null; }
-
-        public override bool IsLeapDay(int year, int month, int day, int era) { throw null; }
-
-        public override bool IsLeapMonth(int year, int month, int era) { throw null; }
-
-        public override bool IsLeapYear(int year, int era) { throw null; }
-
-        public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { throw null; }
-
-        public override int ToFourDigitYear(int year) { throw null; }
-    }
-
-    public partial class TaiwanCalendar : Calendar
-    {
-        public override int[] Eras { get { throw null; } }
-
-        public override DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public override DateTime MinSupportedDateTime { get { throw null; } }
-
-        public override int TwoDigitYearMax { get { throw null; } set { } }
-
-        public override DateTime AddMonths(DateTime time, int months) { throw null; }
-
-        public override DateTime AddYears(DateTime time, int years) { throw null; }
-
-        public override int GetDayOfMonth(DateTime time) { throw null; }
-
-        public override DayOfWeek GetDayOfWeek(DateTime time) { throw null; }
-
-        public override int GetDayOfYear(DateTime time) { throw null; }
-
-        public override int GetDaysInMonth(int year, int month, int era) { throw null; }
-
-        public override int GetDaysInYear(int year, int era) { throw null; }
-
-        public override int GetEra(DateTime time) { throw null; }
-
-        public override int GetLeapMonth(int year, int era) { throw null; }
-
-        public override int GetMonth(DateTime time) { throw null; }
-
-        public override int GetMonthsInYear(int year, int era) { throw null; }
-
-        public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek) { throw null; }
-
-        public override int GetYear(DateTime time) { throw null; }
-
-        public override bool IsLeapDay(int year, int month, int day, int era) { throw null; }
-
-        public override bool IsLeapMonth(int year, int month, int era) { throw null; }
-
-        public override bool IsLeapYear(int year, int era) { throw null; }
-
-        public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { throw null; }
-
-        public override int ToFourDigitYear(int year) { throw null; }
-    }
-
-    public partial class TaiwanLunisolarCalendar : EastAsianLunisolarCalendar
-    {
-        public TaiwanLunisolarCalendar() { }
-
-        public override int[] Eras { get { throw null; } }
-
-        public override DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public override DateTime MinSupportedDateTime { get { throw null; } }
-
-        public override int GetEra(DateTime time) { throw null; }
-    }
-
-    public partial class ThaiBuddhistCalendar : Calendar
-    {
-        public override int[] Eras { get { throw null; } }
-
-        public override DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public override DateTime MinSupportedDateTime { get { throw null; } }
-
-        public override int TwoDigitYearMax { get { throw null; } set { } }
-
-        public override DateTime AddMonths(DateTime time, int months) { throw null; }
-
-        public override DateTime AddYears(DateTime time, int years) { throw null; }
-
-        public override int GetDayOfMonth(DateTime time) { throw null; }
-
-        public override DayOfWeek GetDayOfWeek(DateTime time) { throw null; }
-
-        public override int GetDayOfYear(DateTime time) { throw null; }
-
-        public override int GetDaysInMonth(int year, int month, int era) { throw null; }
-
-        public override int GetDaysInYear(int year, int era) { throw null; }
-
-        public override int GetEra(DateTime time) { throw null; }
-
-        public override int GetLeapMonth(int year, int era) { throw null; }
-
-        public override int GetMonth(DateTime time) { throw null; }
-
-        public override int GetMonthsInYear(int year, int era) { throw null; }
-
-        public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek) { throw null; }
-
-        public override int GetYear(DateTime time) { throw null; }
-
-        public override bool IsLeapDay(int year, int month, int day, int era) { throw null; }
-
-        public override bool IsLeapMonth(int year, int month, int era) { throw null; }
-
-        public override bool IsLeapYear(int year, int era) { throw null; }
-
-        public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { throw null; }
-
-        public override int ToFourDigitYear(int year) { throw null; }
-    }
-
-    public partial class UmAlQuraCalendar : Calendar
-    {
-        public override int[] Eras { get { throw null; } }
-
-        public override DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public override DateTime MinSupportedDateTime { get { throw null; } }
-
-        public override int TwoDigitYearMax { get { throw null; } set { } }
-
-        public override DateTime AddMonths(DateTime time, int months) { throw null; }
-
-        public override DateTime AddYears(DateTime time, int years) { throw null; }
-
-        public override int GetDayOfMonth(DateTime time) { throw null; }
-
-        public override DayOfWeek GetDayOfWeek(DateTime time) { throw null; }
-
-        public override int GetDayOfYear(DateTime time) { throw null; }
-
-        public override int GetDaysInMonth(int year, int month, int era) { throw null; }
-
-        public override int GetDaysInYear(int year, int era) { throw null; }
-
-        public override int GetEra(DateTime time) { throw null; }
-
-        public override int GetLeapMonth(int year, int era) { throw null; }
-
-        public override int GetMonth(DateTime time) { throw null; }
-
-        public override int GetMonthsInYear(int year, int era) { throw null; }
-
-        public override int GetYear(DateTime time) { throw null; }
-
-        public override bool IsLeapDay(int year, int month, int day, int era) { throw null; }
-
-        public override bool IsLeapMonth(int year, int month, int era) { throw null; }
-
-        public override bool IsLeapYear(int year, int era) { throw null; }
-
-        public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { throw null; }
-
-        public override int ToFourDigitYear(int year) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.globalization.calendars/4.3.0/system.globalization.calendars.nuspec b/src/referencePackages/src/system.globalization.calendars/4.3.0/system.globalization.calendars.nuspec
deleted file mode 100644
index 83a07907..00000000
--- a/src/referencePackages/src/system.globalization.calendars/4.3.0/system.globalization.calendars.nuspec
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Globalization.Calendars</id>
-    <version>4.3.0</version>
-    <title>System.Globalization.Calendars</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides classes for performing date calculations using specific calendars, including the Gregorian, Julian, Hijri and Korean calendars.
-
-Commonly Used Types:
-System.Globalization.HijriCalendar
-System.Globalization.GregorianCalendar
-System.Globalization.HebrewCalendar
-System.Globalization.KoreanCalendar
-System.Globalization.ThaiBuddhistCalendar
-System.Globalization.TaiwanCalendar
-System.Globalization.JapaneseCalendar
-System.Globalization.GregorianCalendarTypes
-System.Globalization.PersianCalendar
-System.Globalization.UmAlQuraCalendar
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Globalization" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.globalization/4.3.0/System.Globalization.4.3.0.csproj b/src/referencePackages/src/system.globalization/4.3.0/System.Globalization.4.3.0.csproj
deleted file mode 100644
index 33c783a9..00000000
--- a/src/referencePackages/src/system.globalization/4.3.0/System.Globalization.4.3.0.csproj
+++ /dev/null
@@ -1,20 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Globalization</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.globalization/4.3.0/ref/netstandard1.0/System.Globalization.cs b/src/referencePackages/src/system.globalization/4.3.0/ref/netstandard1.0/System.Globalization.cs
deleted file mode 100644
index 51a62b6e..00000000
--- a/src/referencePackages/src/system.globalization/4.3.0/ref/netstandard1.0/System.Globalization.cs
+++ /dev/null
@@ -1,543 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Globalization.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyTitle("System.Globalization.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.Globalization.dll")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Globalization
-{
-    public abstract partial class Calendar
-    {
-        public const int CurrentEra = 0;
-        public abstract int[] Eras { get; }
-
-        public bool IsReadOnly { get { throw null; } }
-
-        public virtual DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public virtual DateTime MinSupportedDateTime { get { throw null; } }
-
-        public virtual int TwoDigitYearMax { get { throw null; } set { } }
-
-        public virtual DateTime AddDays(DateTime time, int days) { throw null; }
-
-        public virtual DateTime AddHours(DateTime time, int hours) { throw null; }
-
-        public virtual DateTime AddMilliseconds(DateTime time, double milliseconds) { throw null; }
-
-        public virtual DateTime AddMinutes(DateTime time, int minutes) { throw null; }
-
-        public abstract DateTime AddMonths(DateTime time, int months);
-        public virtual DateTime AddSeconds(DateTime time, int seconds) { throw null; }
-
-        public virtual DateTime AddWeeks(DateTime time, int weeks) { throw null; }
-
-        public abstract DateTime AddYears(DateTime time, int years);
-        public abstract int GetDayOfMonth(DateTime time);
-        public abstract DayOfWeek GetDayOfWeek(DateTime time);
-        public abstract int GetDayOfYear(DateTime time);
-        public abstract int GetDaysInMonth(int year, int month, int era);
-        public virtual int GetDaysInMonth(int year, int month) { throw null; }
-
-        public abstract int GetDaysInYear(int year, int era);
-        public virtual int GetDaysInYear(int year) { throw null; }
-
-        public abstract int GetEra(DateTime time);
-        public virtual int GetHour(DateTime time) { throw null; }
-
-        public virtual int GetLeapMonth(int year, int era) { throw null; }
-
-        public virtual double GetMilliseconds(DateTime time) { throw null; }
-
-        public virtual int GetMinute(DateTime time) { throw null; }
-
-        public abstract int GetMonth(DateTime time);
-        public abstract int GetMonthsInYear(int year, int era);
-        public virtual int GetMonthsInYear(int year) { throw null; }
-
-        public virtual int GetSecond(DateTime time) { throw null; }
-
-        public virtual int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek) { throw null; }
-
-        public abstract int GetYear(DateTime time);
-        public abstract bool IsLeapDay(int year, int month, int day, int era);
-        public virtual bool IsLeapDay(int year, int month, int day) { throw null; }
-
-        public abstract bool IsLeapMonth(int year, int month, int era);
-        public virtual bool IsLeapMonth(int year, int month) { throw null; }
-
-        public abstract bool IsLeapYear(int year, int era);
-        public virtual bool IsLeapYear(int year) { throw null; }
-
-        public abstract DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
-        public virtual DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond) { throw null; }
-
-        public virtual int ToFourDigitYear(int year) { throw null; }
-    }
-
-    public enum CalendarWeekRule
-    {
-        FirstDay = 0,
-        FirstFullWeek = 1,
-        FirstFourDayWeek = 2
-    }
-
-    public static partial class CharUnicodeInfo
-    {
-        public static double GetNumericValue(char ch) { throw null; }
-
-        public static double GetNumericValue(string s, int index) { throw null; }
-
-        public static UnicodeCategory GetUnicodeCategory(char ch) { throw null; }
-
-        public static UnicodeCategory GetUnicodeCategory(string s, int index) { throw null; }
-    }
-
-    public partial class CompareInfo
-    {
-        internal CompareInfo() { }
-
-        public virtual string Name { get { throw null; } }
-
-        public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options) { throw null; }
-
-        public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2) { throw null; }
-
-        public virtual int Compare(string string1, int offset1, string string2, int offset2, CompareOptions options) { throw null; }
-
-        public virtual int Compare(string string1, int offset1, string string2, int offset2) { throw null; }
-
-        public virtual int Compare(string string1, string string2, CompareOptions options) { throw null; }
-
-        public virtual int Compare(string string1, string string2) { throw null; }
-
-        public override bool Equals(object value) { throw null; }
-
-        public static CompareInfo GetCompareInfo(string name) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual int IndexOf(string source, char value, CompareOptions options) { throw null; }
-
-        public virtual int IndexOf(string source, char value, int startIndex, CompareOptions options) { throw null; }
-
-        public virtual int IndexOf(string source, char value, int startIndex, int count, CompareOptions options) { throw null; }
-
-        public virtual int IndexOf(string source, char value, int startIndex, int count) { throw null; }
-
-        public virtual int IndexOf(string source, char value) { throw null; }
-
-        public virtual int IndexOf(string source, string value, CompareOptions options) { throw null; }
-
-        public virtual int IndexOf(string source, string value, int startIndex, CompareOptions options) { throw null; }
-
-        public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options) { throw null; }
-
-        public virtual int IndexOf(string source, string value, int startIndex, int count) { throw null; }
-
-        public virtual int IndexOf(string source, string value) { throw null; }
-
-        public virtual bool IsPrefix(string source, string prefix, CompareOptions options) { throw null; }
-
-        public virtual bool IsPrefix(string source, string prefix) { throw null; }
-
-        public virtual bool IsSuffix(string source, string suffix, CompareOptions options) { throw null; }
-
-        public virtual bool IsSuffix(string source, string suffix) { throw null; }
-
-        public virtual int LastIndexOf(string source, char value, CompareOptions options) { throw null; }
-
-        public virtual int LastIndexOf(string source, char value, int startIndex, CompareOptions options) { throw null; }
-
-        public virtual int LastIndexOf(string source, char value, int startIndex, int count, CompareOptions options) { throw null; }
-
-        public virtual int LastIndexOf(string source, char value, int startIndex, int count) { throw null; }
-
-        public virtual int LastIndexOf(string source, char value) { throw null; }
-
-        public virtual int LastIndexOf(string source, string value, CompareOptions options) { throw null; }
-
-        public virtual int LastIndexOf(string source, string value, int startIndex, CompareOptions options) { throw null; }
-
-        public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options) { throw null; }
-
-        public virtual int LastIndexOf(string source, string value, int startIndex, int count) { throw null; }
-
-        public virtual int LastIndexOf(string source, string value) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    [Flags]
-    public enum CompareOptions
-    {
-        None = 0,
-        IgnoreCase = 1,
-        IgnoreNonSpace = 2,
-        IgnoreSymbols = 4,
-        IgnoreKanaType = 8,
-        IgnoreWidth = 16,
-        OrdinalIgnoreCase = 268435456,
-        StringSort = 536870912,
-        Ordinal = 1073741824
-    }
-
-    public partial class CultureInfo : IFormatProvider
-    {
-        public CultureInfo(string name) { }
-
-        public virtual Calendar Calendar { get { throw null; } }
-
-        public virtual CompareInfo CompareInfo { get { throw null; } }
-
-        public static CultureInfo CurrentCulture { get { throw null; } }
-
-        public static CultureInfo CurrentUICulture { get { throw null; } }
-
-        public virtual DateTimeFormatInfo DateTimeFormat { get { throw null; } set { } }
-
-        public static CultureInfo DefaultThreadCurrentCulture { get { throw null; } set { } }
-
-        public static CultureInfo DefaultThreadCurrentUICulture { get { throw null; } set { } }
-
-        public virtual string DisplayName { get { throw null; } }
-
-        public virtual string EnglishName { get { throw null; } }
-
-        public static CultureInfo InvariantCulture { get { throw null; } }
-
-        public virtual bool IsNeutralCulture { get { throw null; } }
-
-        public bool IsReadOnly { get { throw null; } }
-
-        public virtual string Name { get { throw null; } }
-
-        public virtual string NativeName { get { throw null; } }
-
-        public virtual NumberFormatInfo NumberFormat { get { throw null; } set { } }
-
-        public virtual Calendar[] OptionalCalendars { get { throw null; } }
-
-        public virtual CultureInfo Parent { get { throw null; } }
-
-        public virtual TextInfo TextInfo { get { throw null; } }
-
-        public virtual string TwoLetterISOLanguageName { get { throw null; } }
-
-        public virtual object Clone() { throw null; }
-
-        public override bool Equals(object value) { throw null; }
-
-        public virtual object GetFormat(Type formatType) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static CultureInfo ReadOnly(CultureInfo ci) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class CultureNotFoundException : ArgumentException
-    {
-        public CultureNotFoundException() { }
-
-        public CultureNotFoundException(string message, Exception innerException) { }
-
-        public CultureNotFoundException(string message, string invalidCultureName, Exception innerException) { }
-
-        public CultureNotFoundException(string paramName, string invalidCultureName, string message) { }
-
-        public CultureNotFoundException(string paramName, string message) { }
-
-        public CultureNotFoundException(string message) { }
-
-        public virtual string InvalidCultureName { get { throw null; } }
-
-        public override string Message { get { throw null; } }
-    }
-
-    public sealed partial class DateTimeFormatInfo : IFormatProvider
-    {
-        public string[] AbbreviatedDayNames { get { throw null; } set { } }
-
-        public string[] AbbreviatedMonthGenitiveNames { get { throw null; } set { } }
-
-        public string[] AbbreviatedMonthNames { get { throw null; } set { } }
-
-        public string AMDesignator { get { throw null; } set { } }
-
-        public Calendar Calendar { get { throw null; } set { } }
-
-        public CalendarWeekRule CalendarWeekRule { get { throw null; } set { } }
-
-        public static DateTimeFormatInfo CurrentInfo { get { throw null; } }
-
-        public string[] DayNames { get { throw null; } set { } }
-
-        public DayOfWeek FirstDayOfWeek { get { throw null; } set { } }
-
-        public string FullDateTimePattern { get { throw null; } set { } }
-
-        public static DateTimeFormatInfo InvariantInfo { get { throw null; } }
-
-        public bool IsReadOnly { get { throw null; } }
-
-        public string LongDatePattern { get { throw null; } set { } }
-
-        public string LongTimePattern { get { throw null; } set { } }
-
-        public string MonthDayPattern { get { throw null; } set { } }
-
-        public string[] MonthGenitiveNames { get { throw null; } set { } }
-
-        public string[] MonthNames { get { throw null; } set { } }
-
-        public string PMDesignator { get { throw null; } set { } }
-
-        public string RFC1123Pattern { get { throw null; } }
-
-        public string ShortDatePattern { get { throw null; } set { } }
-
-        public string[] ShortestDayNames { get { throw null; } set { } }
-
-        public string ShortTimePattern { get { throw null; } set { } }
-
-        public string SortableDateTimePattern { get { throw null; } }
-
-        public string UniversalSortableDateTimePattern { get { throw null; } }
-
-        public string YearMonthPattern { get { throw null; } set { } }
-
-        public object Clone() { throw null; }
-
-        public string GetAbbreviatedDayName(DayOfWeek dayofweek) { throw null; }
-
-        public string GetAbbreviatedEraName(int era) { throw null; }
-
-        public string GetAbbreviatedMonthName(int month) { throw null; }
-
-        public string GetDayName(DayOfWeek dayofweek) { throw null; }
-
-        public int GetEra(string eraName) { throw null; }
-
-        public string GetEraName(int era) { throw null; }
-
-        public object GetFormat(Type formatType) { throw null; }
-
-        public static DateTimeFormatInfo GetInstance(IFormatProvider provider) { throw null; }
-
-        public string GetMonthName(int month) { throw null; }
-
-        public static DateTimeFormatInfo ReadOnly(DateTimeFormatInfo dtfi) { throw null; }
-    }
-
-    public sealed partial class NumberFormatInfo : IFormatProvider
-    {
-        public int CurrencyDecimalDigits { get { throw null; } set { } }
-
-        public string CurrencyDecimalSeparator { get { throw null; } set { } }
-
-        public string CurrencyGroupSeparator { get { throw null; } set { } }
-
-        public int[] CurrencyGroupSizes { get { throw null; } set { } }
-
-        public int CurrencyNegativePattern { get { throw null; } set { } }
-
-        public int CurrencyPositivePattern { get { throw null; } set { } }
-
-        public string CurrencySymbol { get { throw null; } set { } }
-
-        public static NumberFormatInfo CurrentInfo { get { throw null; } }
-
-        public static NumberFormatInfo InvariantInfo { get { throw null; } }
-
-        public bool IsReadOnly { get { throw null; } }
-
-        public string NaNSymbol { get { throw null; } set { } }
-
-        public string NegativeInfinitySymbol { get { throw null; } set { } }
-
-        public string NegativeSign { get { throw null; } set { } }
-
-        public int NumberDecimalDigits { get { throw null; } set { } }
-
-        public string NumberDecimalSeparator { get { throw null; } set { } }
-
-        public string NumberGroupSeparator { get { throw null; } set { } }
-
-        public int[] NumberGroupSizes { get { throw null; } set { } }
-
-        public int NumberNegativePattern { get { throw null; } set { } }
-
-        public int PercentDecimalDigits { get { throw null; } set { } }
-
-        public string PercentDecimalSeparator { get { throw null; } set { } }
-
-        public string PercentGroupSeparator { get { throw null; } set { } }
-
-        public int[] PercentGroupSizes { get { throw null; } set { } }
-
-        public int PercentNegativePattern { get { throw null; } set { } }
-
-        public int PercentPositivePattern { get { throw null; } set { } }
-
-        public string PercentSymbol { get { throw null; } set { } }
-
-        public string PerMilleSymbol { get { throw null; } set { } }
-
-        public string PositiveInfinitySymbol { get { throw null; } set { } }
-
-        public string PositiveSign { get { throw null; } set { } }
-
-        public object Clone() { throw null; }
-
-        public object GetFormat(Type formatType) { throw null; }
-
-        public static NumberFormatInfo GetInstance(IFormatProvider formatProvider) { throw null; }
-
-        public static NumberFormatInfo ReadOnly(NumberFormatInfo nfi) { throw null; }
-    }
-
-    public partial class RegionInfo
-    {
-        public RegionInfo(string name) { }
-
-        public virtual string CurrencySymbol { get { throw null; } }
-
-        public static RegionInfo CurrentRegion { get { throw null; } }
-
-        public virtual string DisplayName { get { throw null; } }
-
-        public virtual string EnglishName { get { throw null; } }
-
-        public virtual bool IsMetric { get { throw null; } }
-
-        public virtual string ISOCurrencySymbol { get { throw null; } }
-
-        public virtual string Name { get { throw null; } }
-
-        public virtual string NativeName { get { throw null; } }
-
-        public virtual string TwoLetterISORegionName { get { throw null; } }
-
-        public override bool Equals(object value) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class StringInfo
-    {
-        public StringInfo() { }
-
-        public StringInfo(string value) { }
-
-        public int LengthInTextElements { get { throw null; } }
-
-        public string String { get { throw null; } set { } }
-
-        public override bool Equals(object value) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static string GetNextTextElement(string str, int index) { throw null; }
-
-        public static string GetNextTextElement(string str) { throw null; }
-
-        public static TextElementEnumerator GetTextElementEnumerator(string str, int index) { throw null; }
-
-        public static TextElementEnumerator GetTextElementEnumerator(string str) { throw null; }
-
-        public static int[] ParseCombiningCharacters(string str) { throw null; }
-    }
-
-    public partial class TextElementEnumerator : Collections.IEnumerator
-    {
-        internal TextElementEnumerator() { }
-
-        public object Current { get { throw null; } }
-
-        public int ElementIndex { get { throw null; } }
-
-        public string GetTextElement() { throw null; }
-
-        public bool MoveNext() { throw null; }
-
-        public void Reset() { }
-    }
-
-    public partial class TextInfo
-    {
-        internal TextInfo() { }
-
-        public string CultureName { get { throw null; } }
-
-        public bool IsReadOnly { get { throw null; } }
-
-        public virtual string ListSeparator { get { throw null; } set { } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual char ToLower(char c) { throw null; }
-
-        public virtual string ToLower(string str) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public virtual char ToUpper(char c) { throw null; }
-
-        public virtual string ToUpper(string str) { throw null; }
-    }
-
-    public enum UnicodeCategory
-    {
-        UppercaseLetter = 0,
-        LowercaseLetter = 1,
-        TitlecaseLetter = 2,
-        ModifierLetter = 3,
-        OtherLetter = 4,
-        NonSpacingMark = 5,
-        SpacingCombiningMark = 6,
-        EnclosingMark = 7,
-        DecimalDigitNumber = 8,
-        LetterNumber = 9,
-        OtherNumber = 10,
-        SpaceSeparator = 11,
-        LineSeparator = 12,
-        ParagraphSeparator = 13,
-        Control = 14,
-        Format = 15,
-        Surrogate = 16,
-        PrivateUse = 17,
-        ConnectorPunctuation = 18,
-        DashPunctuation = 19,
-        OpenPunctuation = 20,
-        ClosePunctuation = 21,
-        InitialQuotePunctuation = 22,
-        FinalQuotePunctuation = 23,
-        OtherPunctuation = 24,
-        MathSymbol = 25,
-        CurrencySymbol = 26,
-        ModifierSymbol = 27,
-        OtherSymbol = 28,
-        OtherNotAssigned = 29
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.globalization/4.3.0/ref/netstandard1.3/System.Globalization.cs b/src/referencePackages/src/system.globalization/4.3.0/ref/netstandard1.3/System.Globalization.cs
deleted file mode 100644
index 955a9670..00000000
--- a/src/referencePackages/src/system.globalization/4.3.0/ref/netstandard1.3/System.Globalization.cs
+++ /dev/null
@@ -1,550 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Globalization")]
-[assembly: System.Reflection.AssemblyDescription("System.Globalization")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Globalization")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Globalization
-{
-    public abstract partial class Calendar
-    {
-        public const int CurrentEra = 0;
-        public abstract int[] Eras { get; }
-
-        public bool IsReadOnly { get { throw null; } }
-
-        public virtual DateTime MaxSupportedDateTime { get { throw null; } }
-
-        public virtual DateTime MinSupportedDateTime { get { throw null; } }
-
-        public virtual int TwoDigitYearMax { get { throw null; } set { } }
-
-        public virtual DateTime AddDays(DateTime time, int days) { throw null; }
-
-        public virtual DateTime AddHours(DateTime time, int hours) { throw null; }
-
-        public virtual DateTime AddMilliseconds(DateTime time, double milliseconds) { throw null; }
-
-        public virtual DateTime AddMinutes(DateTime time, int minutes) { throw null; }
-
-        public abstract DateTime AddMonths(DateTime time, int months);
-        public virtual DateTime AddSeconds(DateTime time, int seconds) { throw null; }
-
-        public virtual DateTime AddWeeks(DateTime time, int weeks) { throw null; }
-
-        public abstract DateTime AddYears(DateTime time, int years);
-        public abstract int GetDayOfMonth(DateTime time);
-        public abstract DayOfWeek GetDayOfWeek(DateTime time);
-        public abstract int GetDayOfYear(DateTime time);
-        public abstract int GetDaysInMonth(int year, int month, int era);
-        public virtual int GetDaysInMonth(int year, int month) { throw null; }
-
-        public abstract int GetDaysInYear(int year, int era);
-        public virtual int GetDaysInYear(int year) { throw null; }
-
-        public abstract int GetEra(DateTime time);
-        public virtual int GetHour(DateTime time) { throw null; }
-
-        public virtual int GetLeapMonth(int year, int era) { throw null; }
-
-        public virtual double GetMilliseconds(DateTime time) { throw null; }
-
-        public virtual int GetMinute(DateTime time) { throw null; }
-
-        public abstract int GetMonth(DateTime time);
-        public abstract int GetMonthsInYear(int year, int era);
-        public virtual int GetMonthsInYear(int year) { throw null; }
-
-        public virtual int GetSecond(DateTime time) { throw null; }
-
-        public virtual int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek) { throw null; }
-
-        public abstract int GetYear(DateTime time);
-        public abstract bool IsLeapDay(int year, int month, int day, int era);
-        public virtual bool IsLeapDay(int year, int month, int day) { throw null; }
-
-        public abstract bool IsLeapMonth(int year, int month, int era);
-        public virtual bool IsLeapMonth(int year, int month) { throw null; }
-
-        public abstract bool IsLeapYear(int year, int era);
-        public virtual bool IsLeapYear(int year) { throw null; }
-
-        public abstract DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
-        public virtual DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond) { throw null; }
-
-        public virtual int ToFourDigitYear(int year) { throw null; }
-    }
-
-    public enum CalendarWeekRule
-    {
-        FirstDay = 0,
-        FirstFullWeek = 1,
-        FirstFourDayWeek = 2
-    }
-
-    public static partial class CharUnicodeInfo
-    {
-        public static double GetNumericValue(char ch) { throw null; }
-
-        public static double GetNumericValue(string s, int index) { throw null; }
-
-        public static UnicodeCategory GetUnicodeCategory(char ch) { throw null; }
-
-        public static UnicodeCategory GetUnicodeCategory(string s, int index) { throw null; }
-    }
-
-    public partial class CompareInfo
-    {
-        internal CompareInfo() { }
-
-        public virtual string Name { get { throw null; } }
-
-        public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options) { throw null; }
-
-        public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2) { throw null; }
-
-        public virtual int Compare(string string1, int offset1, string string2, int offset2, CompareOptions options) { throw null; }
-
-        public virtual int Compare(string string1, int offset1, string string2, int offset2) { throw null; }
-
-        public virtual int Compare(string string1, string string2, CompareOptions options) { throw null; }
-
-        public virtual int Compare(string string1, string string2) { throw null; }
-
-        public override bool Equals(object value) { throw null; }
-
-        public static CompareInfo GetCompareInfo(string name) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual int GetHashCode(string source, CompareOptions options) { throw null; }
-
-        public virtual int IndexOf(string source, char value, CompareOptions options) { throw null; }
-
-        public virtual int IndexOf(string source, char value, int startIndex, CompareOptions options) { throw null; }
-
-        public virtual int IndexOf(string source, char value, int startIndex, int count, CompareOptions options) { throw null; }
-
-        public virtual int IndexOf(string source, char value, int startIndex, int count) { throw null; }
-
-        public virtual int IndexOf(string source, char value) { throw null; }
-
-        public virtual int IndexOf(string source, string value, CompareOptions options) { throw null; }
-
-        public virtual int IndexOf(string source, string value, int startIndex, CompareOptions options) { throw null; }
-
-        public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options) { throw null; }
-
-        public virtual int IndexOf(string source, string value, int startIndex, int count) { throw null; }
-
-        public virtual int IndexOf(string source, string value) { throw null; }
-
-        public virtual bool IsPrefix(string source, string prefix, CompareOptions options) { throw null; }
-
-        public virtual bool IsPrefix(string source, string prefix) { throw null; }
-
-        public virtual bool IsSuffix(string source, string suffix, CompareOptions options) { throw null; }
-
-        public virtual bool IsSuffix(string source, string suffix) { throw null; }
-
-        public virtual int LastIndexOf(string source, char value, CompareOptions options) { throw null; }
-
-        public virtual int LastIndexOf(string source, char value, int startIndex, CompareOptions options) { throw null; }
-
-        public virtual int LastIndexOf(string source, char value, int startIndex, int count, CompareOptions options) { throw null; }
-
-        public virtual int LastIndexOf(string source, char value, int startIndex, int count) { throw null; }
-
-        public virtual int LastIndexOf(string source, char value) { throw null; }
-
-        public virtual int LastIndexOf(string source, string value, CompareOptions options) { throw null; }
-
-        public virtual int LastIndexOf(string source, string value, int startIndex, CompareOptions options) { throw null; }
-
-        public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options) { throw null; }
-
-        public virtual int LastIndexOf(string source, string value, int startIndex, int count) { throw null; }
-
-        public virtual int LastIndexOf(string source, string value) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    [Flags]
-    public enum CompareOptions
-    {
-        None = 0,
-        IgnoreCase = 1,
-        IgnoreNonSpace = 2,
-        IgnoreSymbols = 4,
-        IgnoreKanaType = 8,
-        IgnoreWidth = 16,
-        OrdinalIgnoreCase = 268435456,
-        StringSort = 536870912,
-        Ordinal = 1073741824
-    }
-
-    public partial class CultureInfo : IFormatProvider
-    {
-        public CultureInfo(string name) { }
-
-        public virtual Calendar Calendar { get { throw null; } }
-
-        public virtual CompareInfo CompareInfo { get { throw null; } }
-
-        public static CultureInfo CurrentCulture { get { throw null; } set { } }
-
-        public static CultureInfo CurrentUICulture { get { throw null; } set { } }
-
-        public virtual DateTimeFormatInfo DateTimeFormat { get { throw null; } set { } }
-
-        public static CultureInfo DefaultThreadCurrentCulture { get { throw null; } set { } }
-
-        public static CultureInfo DefaultThreadCurrentUICulture { get { throw null; } set { } }
-
-        public virtual string DisplayName { get { throw null; } }
-
-        public virtual string EnglishName { get { throw null; } }
-
-        public static CultureInfo InvariantCulture { get { throw null; } }
-
-        public virtual bool IsNeutralCulture { get { throw null; } }
-
-        public bool IsReadOnly { get { throw null; } }
-
-        public virtual string Name { get { throw null; } }
-
-        public virtual string NativeName { get { throw null; } }
-
-        public virtual NumberFormatInfo NumberFormat { get { throw null; } set { } }
-
-        public virtual Calendar[] OptionalCalendars { get { throw null; } }
-
-        public virtual CultureInfo Parent { get { throw null; } }
-
-        public virtual TextInfo TextInfo { get { throw null; } }
-
-        public virtual string TwoLetterISOLanguageName { get { throw null; } }
-
-        public virtual object Clone() { throw null; }
-
-        public override bool Equals(object value) { throw null; }
-
-        public virtual object GetFormat(Type formatType) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static CultureInfo ReadOnly(CultureInfo ci) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class CultureNotFoundException : ArgumentException
-    {
-        public CultureNotFoundException() { }
-
-        public CultureNotFoundException(string message, Exception innerException) { }
-
-        public CultureNotFoundException(string message, string invalidCultureName, Exception innerException) { }
-
-        public CultureNotFoundException(string paramName, string invalidCultureName, string message) { }
-
-        public CultureNotFoundException(string paramName, string message) { }
-
-        public CultureNotFoundException(string message) { }
-
-        public virtual string InvalidCultureName { get { throw null; } }
-
-        public override string Message { get { throw null; } }
-    }
-
-    public sealed partial class DateTimeFormatInfo : IFormatProvider
-    {
-        public string[] AbbreviatedDayNames { get { throw null; } set { } }
-
-        public string[] AbbreviatedMonthGenitiveNames { get { throw null; } set { } }
-
-        public string[] AbbreviatedMonthNames { get { throw null; } set { } }
-
-        public string AMDesignator { get { throw null; } set { } }
-
-        public Calendar Calendar { get { throw null; } set { } }
-
-        public CalendarWeekRule CalendarWeekRule { get { throw null; } set { } }
-
-        public static DateTimeFormatInfo CurrentInfo { get { throw null; } }
-
-        public string[] DayNames { get { throw null; } set { } }
-
-        public DayOfWeek FirstDayOfWeek { get { throw null; } set { } }
-
-        public string FullDateTimePattern { get { throw null; } set { } }
-
-        public static DateTimeFormatInfo InvariantInfo { get { throw null; } }
-
-        public bool IsReadOnly { get { throw null; } }
-
-        public string LongDatePattern { get { throw null; } set { } }
-
-        public string LongTimePattern { get { throw null; } set { } }
-
-        public string MonthDayPattern { get { throw null; } set { } }
-
-        public string[] MonthGenitiveNames { get { throw null; } set { } }
-
-        public string[] MonthNames { get { throw null; } set { } }
-
-        public string PMDesignator { get { throw null; } set { } }
-
-        public string RFC1123Pattern { get { throw null; } }
-
-        public string ShortDatePattern { get { throw null; } set { } }
-
-        public string[] ShortestDayNames { get { throw null; } set { } }
-
-        public string ShortTimePattern { get { throw null; } set { } }
-
-        public string SortableDateTimePattern { get { throw null; } }
-
-        public string UniversalSortableDateTimePattern { get { throw null; } }
-
-        public string YearMonthPattern { get { throw null; } set { } }
-
-        public object Clone() { throw null; }
-
-        public string GetAbbreviatedDayName(DayOfWeek dayofweek) { throw null; }
-
-        public string GetAbbreviatedEraName(int era) { throw null; }
-
-        public string GetAbbreviatedMonthName(int month) { throw null; }
-
-        public string GetDayName(DayOfWeek dayofweek) { throw null; }
-
-        public int GetEra(string eraName) { throw null; }
-
-        public string GetEraName(int era) { throw null; }
-
-        public object GetFormat(Type formatType) { throw null; }
-
-        public static DateTimeFormatInfo GetInstance(IFormatProvider provider) { throw null; }
-
-        public string GetMonthName(int month) { throw null; }
-
-        public static DateTimeFormatInfo ReadOnly(DateTimeFormatInfo dtfi) { throw null; }
-    }
-
-    public sealed partial class NumberFormatInfo : IFormatProvider
-    {
-        public int CurrencyDecimalDigits { get { throw null; } set { } }
-
-        public string CurrencyDecimalSeparator { get { throw null; } set { } }
-
-        public string CurrencyGroupSeparator { get { throw null; } set { } }
-
-        public int[] CurrencyGroupSizes { get { throw null; } set { } }
-
-        public int CurrencyNegativePattern { get { throw null; } set { } }
-
-        public int CurrencyPositivePattern { get { throw null; } set { } }
-
-        public string CurrencySymbol { get { throw null; } set { } }
-
-        public static NumberFormatInfo CurrentInfo { get { throw null; } }
-
-        public static NumberFormatInfo InvariantInfo { get { throw null; } }
-
-        public bool IsReadOnly { get { throw null; } }
-
-        public string NaNSymbol { get { throw null; } set { } }
-
-        public string NegativeInfinitySymbol { get { throw null; } set { } }
-
-        public string NegativeSign { get { throw null; } set { } }
-
-        public int NumberDecimalDigits { get { throw null; } set { } }
-
-        public string NumberDecimalSeparator { get { throw null; } set { } }
-
-        public string NumberGroupSeparator { get { throw null; } set { } }
-
-        public int[] NumberGroupSizes { get { throw null; } set { } }
-
-        public int NumberNegativePattern { get { throw null; } set { } }
-
-        public int PercentDecimalDigits { get { throw null; } set { } }
-
-        public string PercentDecimalSeparator { get { throw null; } set { } }
-
-        public string PercentGroupSeparator { get { throw null; } set { } }
-
-        public int[] PercentGroupSizes { get { throw null; } set { } }
-
-        public int PercentNegativePattern { get { throw null; } set { } }
-
-        public int PercentPositivePattern { get { throw null; } set { } }
-
-        public string PercentSymbol { get { throw null; } set { } }
-
-        public string PerMilleSymbol { get { throw null; } set { } }
-
-        public string PositiveInfinitySymbol { get { throw null; } set { } }
-
-        public string PositiveSign { get { throw null; } set { } }
-
-        public object Clone() { throw null; }
-
-        public object GetFormat(Type formatType) { throw null; }
-
-        public static NumberFormatInfo GetInstance(IFormatProvider formatProvider) { throw null; }
-
-        public static NumberFormatInfo ReadOnly(NumberFormatInfo nfi) { throw null; }
-    }
-
-    public partial class RegionInfo
-    {
-        public RegionInfo(string name) { }
-
-        public virtual string CurrencySymbol { get { throw null; } }
-
-        public static RegionInfo CurrentRegion { get { throw null; } }
-
-        public virtual string DisplayName { get { throw null; } }
-
-        public virtual string EnglishName { get { throw null; } }
-
-        public virtual bool IsMetric { get { throw null; } }
-
-        public virtual string ISOCurrencySymbol { get { throw null; } }
-
-        public virtual string Name { get { throw null; } }
-
-        public virtual string NativeName { get { throw null; } }
-
-        public virtual string TwoLetterISORegionName { get { throw null; } }
-
-        public override bool Equals(object value) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class StringInfo
-    {
-        public StringInfo() { }
-
-        public StringInfo(string value) { }
-
-        public int LengthInTextElements { get { throw null; } }
-
-        public string String { get { throw null; } set { } }
-
-        public override bool Equals(object value) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static string GetNextTextElement(string str, int index) { throw null; }
-
-        public static string GetNextTextElement(string str) { throw null; }
-
-        public static TextElementEnumerator GetTextElementEnumerator(string str, int index) { throw null; }
-
-        public static TextElementEnumerator GetTextElementEnumerator(string str) { throw null; }
-
-        public static int[] ParseCombiningCharacters(string str) { throw null; }
-    }
-
-    public partial class TextElementEnumerator : Collections.IEnumerator
-    {
-        internal TextElementEnumerator() { }
-
-        public object Current { get { throw null; } }
-
-        public int ElementIndex { get { throw null; } }
-
-        public string GetTextElement() { throw null; }
-
-        public bool MoveNext() { throw null; }
-
-        public void Reset() { }
-    }
-
-    public partial class TextInfo
-    {
-        internal TextInfo() { }
-
-        public string CultureName { get { throw null; } }
-
-        public bool IsReadOnly { get { throw null; } }
-
-        public bool IsRightToLeft { get { throw null; } }
-
-        public virtual string ListSeparator { get { throw null; } set { } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual char ToLower(char c) { throw null; }
-
-        public virtual string ToLower(string str) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public virtual char ToUpper(char c) { throw null; }
-
-        public virtual string ToUpper(string str) { throw null; }
-    }
-
-    public enum UnicodeCategory
-    {
-        UppercaseLetter = 0,
-        LowercaseLetter = 1,
-        TitlecaseLetter = 2,
-        ModifierLetter = 3,
-        OtherLetter = 4,
-        NonSpacingMark = 5,
-        SpacingCombiningMark = 6,
-        EnclosingMark = 7,
-        DecimalDigitNumber = 8,
-        LetterNumber = 9,
-        OtherNumber = 10,
-        SpaceSeparator = 11,
-        LineSeparator = 12,
-        ParagraphSeparator = 13,
-        Control = 14,
-        Format = 15,
-        Surrogate = 16,
-        PrivateUse = 17,
-        ConnectorPunctuation = 18,
-        DashPunctuation = 19,
-        OpenPunctuation = 20,
-        ClosePunctuation = 21,
-        InitialQuotePunctuation = 22,
-        FinalQuotePunctuation = 23,
-        OtherPunctuation = 24,
-        MathSymbol = 25,
-        CurrencySymbol = 26,
-        ModifierSymbol = 27,
-        OtherSymbol = 28,
-        OtherNotAssigned = 29
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.globalization/4.3.0/system.globalization.nuspec b/src/referencePackages/src/system.globalization/4.3.0/system.globalization.nuspec
deleted file mode 100644
index 04e3a2bd..00000000
--- a/src/referencePackages/src/system.globalization/4.3.0/system.globalization.nuspec
+++ /dev/null
@@ -1,43 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Globalization</id>
-    <version>4.3.0</version>
-    <title>System.Globalization</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides classes that define culture-related information, including language, country/region, calendars in use, format patterns for dates, currency, and numbers, and sort order for strings.
-
-Commonly Used Types:
-System.Globalization.DateTimeFormatInfo
-System.Globalization.CultureInfo
-System.Globalization.NumberFormatInfo
-System.Globalization.CalendarWeekRule
-System.Globalization.TextInfo
-System.Globalization.Calendar
-System.Globalization.CompareInfo
-System.Globalization.CompareOptions
-System.Globalization.UnicodeCategory
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.io.compression.zipfile/4.3.0/System.IO.Compression.ZipFile.4.3.0.csproj b/src/referencePackages/src/system.io.compression.zipfile/4.3.0/System.IO.Compression.ZipFile.4.3.0.csproj
deleted file mode 100644
index 0fc6e577..00000000
--- a/src/referencePackages/src/system.io.compression.zipfile/4.3.0/System.IO.Compression.ZipFile.4.3.0.csproj
+++ /dev/null
@@ -1,21 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.IO.Compression.ZipFile</AssemblyName>
-    <StrongNameKeyId>ECMA</StrongNameKeyId>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Buffers" Version="4.3.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.IO.Compression" Version="4.3.0" />
-    <PackageReference Include="System.IO.FileSystem" Version="4.3.0" />
-    <PackageReference Include="System.IO.FileSystem.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.io.compression.zipfile/4.3.0/ref/netstandard1.3/System.IO.Compression.ZipFile.cs b/src/referencePackages/src/system.io.compression.zipfile/4.3.0/ref/netstandard1.3/System.IO.Compression.ZipFile.cs
deleted file mode 100644
index 366cd910..00000000
--- a/src/referencePackages/src/system.io.compression.zipfile/4.3.0/ref/netstandard1.3/System.IO.Compression.ZipFile.cs
+++ /dev/null
@@ -1,58 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.IO.Compression.ZipFile")]
-[assembly: System.Reflection.AssemblyDescription("System.IO.Compression.ZipFile")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.IO.Compression.ZipFile")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.1.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.IO.Compression
-{
-    public static partial class ZipFile
-    {
-        public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, CompressionLevel compressionLevel, bool includeBaseDirectory, Text.Encoding entryNameEncoding) { }
-
-        public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, CompressionLevel compressionLevel, bool includeBaseDirectory) { }
-
-        public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName) { }
-
-        public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, Text.Encoding entryNameEncoding) { }
-
-        public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName) { }
-
-        public static ZipArchive Open(string archiveFileName, ZipArchiveMode mode, Text.Encoding entryNameEncoding) { throw null; }
-
-        public static ZipArchive Open(string archiveFileName, ZipArchiveMode mode) { throw null; }
-
-        public static ZipArchive OpenRead(string archiveFileName) { throw null; }
-    }
-
-    public static partial class ZipFileExtensions
-    {
-        public static ZipArchiveEntry CreateEntryFromFile(this ZipArchive destination, string sourceFileName, string entryName, CompressionLevel compressionLevel) { throw null; }
-
-        public static ZipArchiveEntry CreateEntryFromFile(this ZipArchive destination, string sourceFileName, string entryName) { throw null; }
-
-        public static void ExtractToDirectory(this ZipArchive source, string destinationDirectoryName) { }
-
-        public static void ExtractToFile(this ZipArchiveEntry source, string destinationFileName, bool overwrite) { }
-
-        public static void ExtractToFile(this ZipArchiveEntry source, string destinationFileName) { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.io.compression.zipfile/4.3.0/system.io.compression.zipfile.nuspec b/src/referencePackages/src/system.io.compression.zipfile/4.3.0/system.io.compression.zipfile.nuspec
deleted file mode 100644
index 1f5e0399..00000000
--- a/src/referencePackages/src/system.io.compression.zipfile/4.3.0/system.io.compression.zipfile.nuspec
+++ /dev/null
@@ -1,36 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.IO.Compression.ZipFile</id>
-    <version>4.3.0</version>
-    <title>System.IO.Compression.ZipFile</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides classes that support the compression and decompression of streams using file system paths.
-
-Commonly Used Types:
-System.IO.Compression.ZipFile
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Buffers" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO.Compression" version="4.3.0" />
-        <dependency id="System.IO.FileSystem" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO.FileSystem.Primitives" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Text.Encoding" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.io.compression/4.3.0/System.IO.Compression.4.3.0.csproj b/src/referencePackages/src/system.io.compression/4.3.0/System.IO.Compression.4.3.0.csproj
deleted file mode 100644
index a4e75c3d..00000000
--- a/src/referencePackages/src/system.io.compression/4.3.0/System.IO.Compression.4.3.0.csproj
+++ /dev/null
@@ -1,31 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.1;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.IO.Compression</AssemblyName>
-    <StrongNameKeyId>ECMA</StrongNameKeyId>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="System.Buffers" Version="4.3.0" />
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-    <PackageReference Include="System.Threading" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.io.compression/4.3.0/ref/netstandard1.1/System.IO.Compression.cs b/src/referencePackages/src/system.io.compression/4.3.0/ref/netstandard1.1/System.IO.Compression.cs
deleted file mode 100644
index baa1f2e0..00000000
--- a/src/referencePackages/src/system.io.compression/4.3.0/ref/netstandard1.1/System.IO.Compression.cs
+++ /dev/null
@@ -1,161 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyTitle("System.IO.Compression.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.IO.Compression.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.IO.Compression.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.IO.Compression
-{
-    public enum CompressionLevel
-    {
-        Optimal = 0,
-        Fastest = 1,
-        NoCompression = 2
-    }
-
-    public enum CompressionMode
-    {
-        Decompress = 0,
-        Compress = 1
-    }
-
-    public partial class DeflateStream : Stream
-    {
-        public DeflateStream(Stream stream, CompressionLevel compressionLevel, bool leaveOpen) { }
-
-        public DeflateStream(Stream stream, CompressionLevel compressionLevel) { }
-
-        public DeflateStream(Stream stream, CompressionMode mode, bool leaveOpen) { }
-
-        public DeflateStream(Stream stream, CompressionMode mode) { }
-
-        public Stream BaseStream { get { throw null; } }
-
-        public override bool CanRead { get { throw null; } }
-
-        public override bool CanSeek { get { throw null; } }
-
-        public override bool CanWrite { get { throw null; } }
-
-        public override long Length { get { throw null; } }
-
-        public override long Position { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override void Flush() { }
-
-        public override int Read(byte[] array, int offset, int count) { throw null; }
-
-        public override long Seek(long offset, SeekOrigin origin) { throw null; }
-
-        public override void SetLength(long value) { }
-
-        public override void Write(byte[] array, int offset, int count) { }
-    }
-
-    public partial class GZipStream : Stream
-    {
-        public GZipStream(Stream stream, CompressionLevel compressionLevel, bool leaveOpen) { }
-
-        public GZipStream(Stream stream, CompressionLevel compressionLevel) { }
-
-        public GZipStream(Stream stream, CompressionMode mode, bool leaveOpen) { }
-
-        public GZipStream(Stream stream, CompressionMode mode) { }
-
-        public Stream BaseStream { get { throw null; } }
-
-        public override bool CanRead { get { throw null; } }
-
-        public override bool CanSeek { get { throw null; } }
-
-        public override bool CanWrite { get { throw null; } }
-
-        public override long Length { get { throw null; } }
-
-        public override long Position { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override void Flush() { }
-
-        public override int Read(byte[] array, int offset, int count) { throw null; }
-
-        public override long Seek(long offset, SeekOrigin origin) { throw null; }
-
-        public override void SetLength(long value) { }
-
-        public override void Write(byte[] array, int offset, int count) { }
-    }
-
-    public partial class ZipArchive : IDisposable
-    {
-        public ZipArchive(Stream stream, ZipArchiveMode mode, bool leaveOpen, Text.Encoding entryNameEncoding) { }
-
-        public ZipArchive(Stream stream, ZipArchiveMode mode, bool leaveOpen) { }
-
-        public ZipArchive(Stream stream, ZipArchiveMode mode) { }
-
-        public ZipArchive(Stream stream) { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ZipArchiveEntry> Entries { get { throw null; } }
-
-        public ZipArchiveMode Mode { get { throw null; } }
-
-        public ZipArchiveEntry CreateEntry(string entryName, CompressionLevel compressionLevel) { throw null; }
-
-        public ZipArchiveEntry CreateEntry(string entryName) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public ZipArchiveEntry GetEntry(string entryName) { throw null; }
-    }
-
-    public partial class ZipArchiveEntry
-    {
-        internal ZipArchiveEntry() { }
-
-        public ZipArchive Archive { get { throw null; } }
-
-        public long CompressedLength { get { throw null; } }
-
-        public string FullName { get { throw null; } }
-
-        public DateTimeOffset LastWriteTime { get { throw null; } set { } }
-
-        public long Length { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public void Delete() { }
-
-        public Stream Open() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum ZipArchiveMode
-    {
-        Read = 0,
-        Create = 1,
-        Update = 2
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.io.compression/4.3.0/ref/netstandard1.3/System.IO.Compression.cs b/src/referencePackages/src/system.io.compression/4.3.0/ref/netstandard1.3/System.IO.Compression.cs
deleted file mode 100644
index f498f62d..00000000
--- a/src/referencePackages/src/system.io.compression/4.3.0/ref/netstandard1.3/System.IO.Compression.cs
+++ /dev/null
@@ -1,172 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.IO.Compression")]
-[assembly: System.Reflection.AssemblyDescription("System.IO.Compression")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.IO.Compression")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24301.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24301.01. Commit Hash: 4ed15a98d1c957ae661d490ccfcfe77f4ed31d5a")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.1.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.IO.Compression
-{
-    public enum CompressionLevel
-    {
-        Optimal = 0,
-        Fastest = 1,
-        NoCompression = 2
-    }
-
-    public enum CompressionMode
-    {
-        Decompress = 0,
-        Compress = 1
-    }
-
-    public partial class DeflateStream : Stream
-    {
-        public DeflateStream(Stream stream, CompressionLevel compressionLevel, bool leaveOpen) { }
-
-        public DeflateStream(Stream stream, CompressionLevel compressionLevel) { }
-
-        public DeflateStream(Stream stream, CompressionMode mode, bool leaveOpen) { }
-
-        public DeflateStream(Stream stream, CompressionMode mode) { }
-
-        public Stream BaseStream { get { throw null; } }
-
-        public override bool CanRead { get { throw null; } }
-
-        public override bool CanSeek { get { throw null; } }
-
-        public override bool CanWrite { get { throw null; } }
-
-        public override long Length { get { throw null; } }
-
-        public override long Position { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override void Flush() { }
-
-        public override int Read(byte[] array, int offset, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadAsync(byte[] array, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override long Seek(long offset, SeekOrigin origin) { throw null; }
-
-        public override void SetLength(long value) { }
-
-        public override void Write(byte[] array, int offset, int count) { }
-
-        public override Threading.Tasks.Task WriteAsync(byte[] array, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-    }
-
-    public partial class GZipStream : Stream
-    {
-        public GZipStream(Stream stream, CompressionLevel compressionLevel, bool leaveOpen) { }
-
-        public GZipStream(Stream stream, CompressionLevel compressionLevel) { }
-
-        public GZipStream(Stream stream, CompressionMode mode, bool leaveOpen) { }
-
-        public GZipStream(Stream stream, CompressionMode mode) { }
-
-        public Stream BaseStream { get { throw null; } }
-
-        public override bool CanRead { get { throw null; } }
-
-        public override bool CanSeek { get { throw null; } }
-
-        public override bool CanWrite { get { throw null; } }
-
-        public override long Length { get { throw null; } }
-
-        public override long Position { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override void Flush() { }
-
-        public override int Read(byte[] array, int offset, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadAsync(byte[] array, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override long Seek(long offset, SeekOrigin origin) { throw null; }
-
-        public override void SetLength(long value) { }
-
-        public override void Write(byte[] array, int offset, int count) { }
-
-        public override Threading.Tasks.Task WriteAsync(byte[] array, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-    }
-
-    public partial class ZipArchive : IDisposable
-    {
-        public ZipArchive(Stream stream, ZipArchiveMode mode, bool leaveOpen, Text.Encoding entryNameEncoding) { }
-
-        public ZipArchive(Stream stream, ZipArchiveMode mode, bool leaveOpen) { }
-
-        public ZipArchive(Stream stream, ZipArchiveMode mode) { }
-
-        public ZipArchive(Stream stream) { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ZipArchiveEntry> Entries { get { throw null; } }
-
-        public ZipArchiveMode Mode { get { throw null; } }
-
-        public ZipArchiveEntry CreateEntry(string entryName, CompressionLevel compressionLevel) { throw null; }
-
-        public ZipArchiveEntry CreateEntry(string entryName) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public ZipArchiveEntry GetEntry(string entryName) { throw null; }
-    }
-
-    public partial class ZipArchiveEntry
-    {
-        internal ZipArchiveEntry() { }
-
-        public ZipArchive Archive { get { throw null; } }
-
-        public long CompressedLength { get { throw null; } }
-
-        public string FullName { get { throw null; } }
-
-        public DateTimeOffset LastWriteTime { get { throw null; } set { } }
-
-        public long Length { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public void Delete() { }
-
-        public Stream Open() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum ZipArchiveMode
-    {
-        Read = 0,
-        Create = 1,
-        Update = 2
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.io.compression/4.3.0/system.io.compression.nuspec b/src/referencePackages/src/system.io.compression/4.3.0/system.io.compression.nuspec
deleted file mode 100644
index 91661dd6..00000000
--- a/src/referencePackages/src/system.io.compression/4.3.0/system.io.compression.nuspec
+++ /dev/null
@@ -1,51 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.IO.Compression</id>
-    <version>4.3.0</version>
-    <title>System.IO.Compression</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides classes that support the compression and decompression of streams.
-
-Commonly Used Types:
-System.IO.Compression.DeflateStream
-System.IO.Compression.GZipStream
-System.IO.Compression.CompressionMode
-System.IO.Compression.CompressionLevel
-System.IO.Compression.ZipArchiveEntry
-System.IO.Compression.ZipArchive
-System.IO.Compression.ZipArchiveMode
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="System.Buffers" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Text.Encoding" version="4.3.0" />
-        <dependency id="System.Threading" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.io.filesystem.accesscontrol/5.0.0/System.IO.FileSystem.AccessControl.5.0.0.csproj b/src/referencePackages/src/system.io.filesystem.accesscontrol/5.0.0/System.IO.FileSystem.AccessControl.5.0.0.csproj
index 23aafdd7..71bae5c5 100644
--- a/src/referencePackages/src/system.io.filesystem.accesscontrol/5.0.0/System.IO.FileSystem.AccessControl.5.0.0.csproj
+++ b/src/referencePackages/src/system.io.filesystem.accesscontrol/5.0.0/System.IO.FileSystem.AccessControl.5.0.0.csproj
@@ -1,20 +1,10 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.3;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.IO.FileSystem" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-    <PackageReference Include="System.Security.AccessControl" Version="5.0.0" />
-    <PackageReference Include="System.Security.Principal.Windows" Version="5.0.0" />
-  </ItemGroup>
-
   <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
     <PackageReference Include="System.Buffers" Version="4.5.1" />
     <PackageReference Include="System.Memory" Version="4.5.4" />
diff --git a/src/referencePackages/src/system.io.filesystem.accesscontrol/5.0.0/ref/netstandard1.3/System.IO.FileSystem.AccessControl.cs b/src/referencePackages/src/system.io.filesystem.accesscontrol/5.0.0/ref/netstandard1.3/System.IO.FileSystem.AccessControl.cs
deleted file mode 100644
index 0ccc489e..00000000
--- a/src/referencePackages/src/system.io.filesystem.accesscontrol/5.0.0/ref/netstandard1.3/System.IO.FileSystem.AccessControl.cs
+++ /dev/null
@@ -1,194 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.IO.FileSystem.AccessControl")]
-[assembly: System.Reflection.AssemblyDescription("System.IO.FileSystem.AccessControl")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.IO.FileSystem.AccessControl")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.IO
-{
-    public static partial class FileSystemAclExtensions
-    {
-        public static Security.AccessControl.DirectorySecurity GetAccessControl(this DirectoryInfo directoryInfo, Security.AccessControl.AccessControlSections includeSections) { throw null; }
-
-        public static Security.AccessControl.DirectorySecurity GetAccessControl(this DirectoryInfo directoryInfo) { throw null; }
-
-        public static Security.AccessControl.FileSecurity GetAccessControl(this FileInfo fileInfo, Security.AccessControl.AccessControlSections includeSections) { throw null; }
-
-        public static Security.AccessControl.FileSecurity GetAccessControl(this FileInfo fileInfo) { throw null; }
-
-        public static Security.AccessControl.FileSecurity GetAccessControl(this FileStream fileStream) { throw null; }
-
-        public static void SetAccessControl(this DirectoryInfo directoryInfo, Security.AccessControl.DirectorySecurity directorySecurity) { }
-
-        public static void SetAccessControl(this FileInfo fileInfo, Security.AccessControl.FileSecurity fileSecurity) { }
-
-        public static void SetAccessControl(this FileStream fileStream, Security.AccessControl.FileSecurity fileSecurity) { }
-    }
-}
-
-namespace System.Security.AccessControl
-{
-    public abstract partial class DirectoryObjectSecurity : ObjectSecurity
-    {
-        protected DirectoryObjectSecurity() { }
-
-        protected DirectoryObjectSecurity(CommonSecurityDescriptor securityDescriptor) { }
-
-        public virtual AccessRule AccessRuleFactory(Principal.IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type, Guid objectType, Guid inheritedObjectType) { throw null; }
-
-        protected void AddAccessRule(ObjectAccessRule rule) { }
-
-        protected void AddAuditRule(ObjectAuditRule rule) { }
-
-        public virtual AuditRule AuditRuleFactory(Principal.IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags, Guid objectType, Guid inheritedObjectType) { throw null; }
-
-        public AuthorizationRuleCollection GetAccessRules(bool includeExplicit, bool includeInherited, Type targetType) { throw null; }
-
-        public AuthorizationRuleCollection GetAuditRules(bool includeExplicit, bool includeInherited, Type targetType) { throw null; }
-
-        protected override bool ModifyAccess(AccessControlModification modification, AccessRule rule, out bool modified) { throw null; }
-
-        protected override bool ModifyAudit(AccessControlModification modification, AuditRule rule, out bool modified) { throw null; }
-
-        protected bool RemoveAccessRule(ObjectAccessRule rule) { throw null; }
-
-        protected void RemoveAccessRuleAll(ObjectAccessRule rule) { }
-
-        protected void RemoveAccessRuleSpecific(ObjectAccessRule rule) { }
-
-        protected bool RemoveAuditRule(ObjectAuditRule rule) { throw null; }
-
-        protected void RemoveAuditRuleAll(ObjectAuditRule rule) { }
-
-        protected void RemoveAuditRuleSpecific(ObjectAuditRule rule) { }
-
-        protected void ResetAccessRule(ObjectAccessRule rule) { }
-
-        protected void SetAccessRule(ObjectAccessRule rule) { }
-
-        protected void SetAuditRule(ObjectAuditRule rule) { }
-    }
-
-    public sealed partial class DirectorySecurity : FileSystemSecurity
-    {
-        public DirectorySecurity() { }
-
-        public DirectorySecurity(string name, AccessControlSections includeSections) { }
-    }
-
-    public sealed partial class FileSecurity : FileSystemSecurity
-    {
-        public FileSecurity() { }
-
-        public FileSecurity(string fileName, AccessControlSections includeSections) { }
-    }
-
-    public sealed partial class FileSystemAccessRule : AccessRule
-    {
-        public FileSystemAccessRule(Principal.IdentityReference identity, FileSystemRights fileSystemRights, AccessControlType type) : base(default!, default, default, default, default, default) { }
-
-        public FileSystemAccessRule(Principal.IdentityReference identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) : base(default!, default, default, default, default, default) { }
-
-        public FileSystemAccessRule(string identity, FileSystemRights fileSystemRights, AccessControlType type) : base(default!, default, default, default, default, default) { }
-
-        public FileSystemAccessRule(string identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) : base(default!, default, default, default, default, default) { }
-
-        public FileSystemRights FileSystemRights { get { throw null; } }
-    }
-
-    public sealed partial class FileSystemAuditRule : AuditRule
-    {
-        public FileSystemAuditRule(Principal.IdentityReference identity, FileSystemRights fileSystemRights, AuditFlags flags) : base(default!, default, default, default, default, default) { }
-
-        public FileSystemAuditRule(Principal.IdentityReference identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) : base(default!, default, default, default, default, default) { }
-
-        public FileSystemAuditRule(string identity, FileSystemRights fileSystemRights, AuditFlags flags) : base(default!, default, default, default, default, default) { }
-
-        public FileSystemAuditRule(string identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) : base(default!, default, default, default, default, default) { }
-
-        public FileSystemRights FileSystemRights { get { throw null; } }
-    }
-
-    [Flags]
-    public enum FileSystemRights
-    {
-        ListDirectory = 1,
-        ReadData = 1,
-        CreateFiles = 2,
-        WriteData = 2,
-        AppendData = 4,
-        CreateDirectories = 4,
-        ReadExtendedAttributes = 8,
-        WriteExtendedAttributes = 16,
-        ExecuteFile = 32,
-        Traverse = 32,
-        DeleteSubdirectoriesAndFiles = 64,
-        ReadAttributes = 128,
-        WriteAttributes = 256,
-        Write = 278,
-        Delete = 65536,
-        ReadPermissions = 131072,
-        Read = 131209,
-        ReadAndExecute = 131241,
-        Modify = 197055,
-        ChangePermissions = 262144,
-        TakeOwnership = 524288,
-        Synchronize = 1048576,
-        FullControl = 2032127
-    }
-
-    public abstract partial class FileSystemSecurity : NativeObjectSecurity
-    {
-        internal FileSystemSecurity() : base(default, default) { }
-
-        public override Type AccessRightType { get { throw null; } }
-
-        public override Type AccessRuleType { get { throw null; } }
-
-        public override Type AuditRuleType { get { throw null; } }
-
-        public sealed override AccessRule AccessRuleFactory(Principal.IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) { throw null; }
-
-        public void AddAccessRule(FileSystemAccessRule rule) { }
-
-        public void AddAuditRule(FileSystemAuditRule rule) { }
-
-        public sealed override AuditRule AuditRuleFactory(Principal.IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) { throw null; }
-
-        public bool RemoveAccessRule(FileSystemAccessRule rule) { throw null; }
-
-        public void RemoveAccessRuleAll(FileSystemAccessRule rule) { }
-
-        public void RemoveAccessRuleSpecific(FileSystemAccessRule rule) { }
-
-        public bool RemoveAuditRule(FileSystemAuditRule rule) { throw null; }
-
-        public void RemoveAuditRuleAll(FileSystemAuditRule rule) { }
-
-        public void RemoveAuditRuleSpecific(FileSystemAuditRule rule) { }
-
-        public void ResetAccessRule(FileSystemAccessRule rule) { }
-
-        public void SetAccessRule(FileSystemAccessRule rule) { }
-
-        public void SetAuditRule(FileSystemAuditRule rule) { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.io.filesystem.accesscontrol/5.0.0/system.io.filesystem.accesscontrol.nuspec b/src/referencePackages/src/system.io.filesystem.accesscontrol/5.0.0/system.io.filesystem.accesscontrol.nuspec
index 0c927a8a..7635638c 100644
--- a/src/referencePackages/src/system.io.filesystem.accesscontrol/5.0.0/system.io.filesystem.accesscontrol.nuspec
+++ b/src/referencePackages/src/system.io.filesystem.accesscontrol/5.0.0/system.io.filesystem.accesscontrol.nuspec
@@ -28,15 +28,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <serviceable>true</serviceable>
     <repository type="git" url="git://github.com/dotnet/runtime" commit="cf258a14b70ad9069470a108f13765e0e5988f51" />
     <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.IO.FileSystem" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.AccessControl" version="5.0.0" />
-        <dependency id="System.Security.Principal.Windows" version="5.0.0" />
-      </group>
       <group targetFramework=".NETStandard2.0">
         <dependency id="System.Buffers" version="4.5.1" exclude="Compile" />
         <dependency id="System.Memory" version="4.5.4" exclude="Compile" />
diff --git a/src/referencePackages/src/system.io.filesystem.primitives/4.3.0/System.IO.FileSystem.Primitives.4.3.0.csproj b/src/referencePackages/src/system.io.filesystem.primitives/4.3.0/System.IO.FileSystem.Primitives.4.3.0.csproj
deleted file mode 100644
index e9172a23..00000000
--- a/src/referencePackages/src/system.io.filesystem.primitives/4.3.0/System.IO.FileSystem.Primitives.4.3.0.csproj
+++ /dev/null
@@ -1,12 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.IO.FileSystem.Primitives</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.io.filesystem.primitives/4.3.0/ref/netstandard1.3/System.IO.FileSystem.Primitives.cs b/src/referencePackages/src/system.io.filesystem.primitives/4.3.0/ref/netstandard1.3/System.IO.FileSystem.Primitives.cs
deleted file mode 100644
index c1d15da2..00000000
--- a/src/referencePackages/src/system.io.filesystem.primitives/4.3.0/ref/netstandard1.3/System.IO.FileSystem.Primitives.cs
+++ /dev/null
@@ -1,76 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.IO.FileSystem.Primitives")]
-[assembly: System.Reflection.AssemblyDescription("System.IO.FileSystem.Primitives")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.IO.FileSystem.Primitives")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.1.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.IO
-{
-    [Flags]
-    public enum FileAccess
-    {
-        Read = 1,
-        Write = 2,
-        ReadWrite = 3
-    }
-
-    [Flags]
-    public enum FileAttributes
-    {
-        ReadOnly = 1,
-        Hidden = 2,
-        System = 4,
-        Directory = 16,
-        Archive = 32,
-        Device = 64,
-        Normal = 128,
-        Temporary = 256,
-        SparseFile = 512,
-        ReparsePoint = 1024,
-        Compressed = 2048,
-        Offline = 4096,
-        NotContentIndexed = 8192,
-        Encrypted = 16384,
-        IntegrityStream = 32768,
-        NoScrubData = 131072
-    }
-
-    public enum FileMode
-    {
-        CreateNew = 1,
-        Create = 2,
-        Open = 3,
-        OpenOrCreate = 4,
-        Truncate = 5,
-        Append = 6
-    }
-
-    [Flags]
-    public enum FileShare
-    {
-        None = 0,
-        Read = 1,
-        Write = 2,
-        ReadWrite = 3,
-        Delete = 4,
-        Inheritable = 16
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.io.filesystem.primitives/4.3.0/system.io.filesystem.primitives.nuspec b/src/referencePackages/src/system.io.filesystem.primitives/4.3.0/system.io.filesystem.primitives.nuspec
deleted file mode 100644
index ecb79595..00000000
--- a/src/referencePackages/src/system.io.filesystem.primitives/4.3.0/system.io.filesystem.primitives.nuspec
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.IO.FileSystem.Primitives</id>
-    <version>4.3.0</version>
-    <title>System.IO.FileSystem.Primitives</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides common enumerations and exceptions for path-based I/O libraries.
-
-Commonly Used Types:
-System.IO.DirectoryNotFoundException
-System.IO.FileAccess
-System.IO.FileLoadException
-System.IO.PathTooLongException
-System.IO.FileMode
-System.IO.FileShare
-System.IO.FileAttributes
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.io.filesystem/4.3.0/System.IO.FileSystem.4.3.0.csproj b/src/referencePackages/src/system.io.filesystem/4.3.0/System.IO.FileSystem.4.3.0.csproj
deleted file mode 100644
index 967dc4c1..00000000
--- a/src/referencePackages/src/system.io.filesystem/4.3.0/System.IO.FileSystem.4.3.0.csproj
+++ /dev/null
@@ -1,19 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.IO.FileSystem</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.IO.FileSystem.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.io.filesystem/4.3.0/ref/netstandard1.3/System.IO.FileSystem.cs b/src/referencePackages/src/system.io.filesystem/4.3.0/ref/netstandard1.3/System.IO.FileSystem.cs
deleted file mode 100644
index 09fa459f..00000000
--- a/src/referencePackages/src/system.io.filesystem/4.3.0/ref/netstandard1.3/System.IO.FileSystem.cs
+++ /dev/null
@@ -1,432 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.IO.FileSystem")]
-[assembly: System.Reflection.AssemblyDescription("System.IO.FileSystem")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.IO.FileSystem")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.1.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace Microsoft.Win32.SafeHandles
-{
-    public sealed partial class SafeFileHandle : System.Runtime.InteropServices.SafeHandle
-    {
-        public SafeFileHandle(System.IntPtr preexistingHandle, bool ownsHandle) : base(default, default) { }
-
-        public override bool IsInvalid { get { throw null; } }
-
-        protected override bool ReleaseHandle() { throw null; }
-    }
-}
-
-namespace System.IO
-{
-    public static partial class Directory
-    {
-        public static DirectoryInfo CreateDirectory(string path) { throw null; }
-
-        public static void Delete(string path, bool recursive) { }
-
-        public static void Delete(string path) { }
-
-        public static Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern, SearchOption searchOption) { throw null; }
-
-        public static Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern) { throw null; }
-
-        public static Collections.Generic.IEnumerable<string> EnumerateDirectories(string path) { throw null; }
-
-        public static Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption) { throw null; }
-
-        public static Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern) { throw null; }
-
-        public static Collections.Generic.IEnumerable<string> EnumerateFiles(string path) { throw null; }
-
-        public static Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, SearchOption searchOption) { throw null; }
-
-        public static Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern) { throw null; }
-
-        public static Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path) { throw null; }
-
-        public static bool Exists(string path) { throw null; }
-
-        public static DateTime GetCreationTime(string path) { throw null; }
-
-        public static DateTime GetCreationTimeUtc(string path) { throw null; }
-
-        public static string GetCurrentDirectory() { throw null; }
-
-        public static string[] GetDirectories(string path, string searchPattern, SearchOption searchOption) { throw null; }
-
-        public static string[] GetDirectories(string path, string searchPattern) { throw null; }
-
-        public static string[] GetDirectories(string path) { throw null; }
-
-        public static string GetDirectoryRoot(string path) { throw null; }
-
-        public static string[] GetFiles(string path, string searchPattern, SearchOption searchOption) { throw null; }
-
-        public static string[] GetFiles(string path, string searchPattern) { throw null; }
-
-        public static string[] GetFiles(string path) { throw null; }
-
-        public static string[] GetFileSystemEntries(string path, string searchPattern, SearchOption searchOption) { throw null; }
-
-        public static string[] GetFileSystemEntries(string path, string searchPattern) { throw null; }
-
-        public static string[] GetFileSystemEntries(string path) { throw null; }
-
-        public static DateTime GetLastAccessTime(string path) { throw null; }
-
-        public static DateTime GetLastAccessTimeUtc(string path) { throw null; }
-
-        public static DateTime GetLastWriteTime(string path) { throw null; }
-
-        public static DateTime GetLastWriteTimeUtc(string path) { throw null; }
-
-        public static DirectoryInfo GetParent(string path) { throw null; }
-
-        public static void Move(string sourceDirName, string destDirName) { }
-
-        public static void SetCreationTime(string path, DateTime creationTime) { }
-
-        public static void SetCreationTimeUtc(string path, DateTime creationTimeUtc) { }
-
-        public static void SetCurrentDirectory(string path) { }
-
-        public static void SetLastAccessTime(string path, DateTime lastAccessTime) { }
-
-        public static void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc) { }
-
-        public static void SetLastWriteTime(string path, DateTime lastWriteTime) { }
-
-        public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc) { }
-    }
-
-    public sealed partial class DirectoryInfo : FileSystemInfo
-    {
-        public DirectoryInfo(string path) { }
-
-        public override bool Exists { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public DirectoryInfo Parent { get { throw null; } }
-
-        public DirectoryInfo Root { get { throw null; } }
-
-        public void Create() { }
-
-        public DirectoryInfo CreateSubdirectory(string path) { throw null; }
-
-        public override void Delete() { }
-
-        public void Delete(bool recursive) { }
-
-        public Collections.Generic.IEnumerable<DirectoryInfo> EnumerateDirectories() { throw null; }
-
-        public Collections.Generic.IEnumerable<DirectoryInfo> EnumerateDirectories(string searchPattern, SearchOption searchOption) { throw null; }
-
-        public Collections.Generic.IEnumerable<DirectoryInfo> EnumerateDirectories(string searchPattern) { throw null; }
-
-        public Collections.Generic.IEnumerable<FileInfo> EnumerateFiles() { throw null; }
-
-        public Collections.Generic.IEnumerable<FileInfo> EnumerateFiles(string searchPattern, SearchOption searchOption) { throw null; }
-
-        public Collections.Generic.IEnumerable<FileInfo> EnumerateFiles(string searchPattern) { throw null; }
-
-        public Collections.Generic.IEnumerable<FileSystemInfo> EnumerateFileSystemInfos() { throw null; }
-
-        public Collections.Generic.IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(string searchPattern, SearchOption searchOption) { throw null; }
-
-        public Collections.Generic.IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(string searchPattern) { throw null; }
-
-        public DirectoryInfo[] GetDirectories() { throw null; }
-
-        public DirectoryInfo[] GetDirectories(string searchPattern, SearchOption searchOption) { throw null; }
-
-        public DirectoryInfo[] GetDirectories(string searchPattern) { throw null; }
-
-        public FileInfo[] GetFiles() { throw null; }
-
-        public FileInfo[] GetFiles(string searchPattern, SearchOption searchOption) { throw null; }
-
-        public FileInfo[] GetFiles(string searchPattern) { throw null; }
-
-        public FileSystemInfo[] GetFileSystemInfos() { throw null; }
-
-        public FileSystemInfo[] GetFileSystemInfos(string searchPattern, SearchOption searchOption) { throw null; }
-
-        public FileSystemInfo[] GetFileSystemInfos(string searchPattern) { throw null; }
-
-        public void MoveTo(string destDirName) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    public static partial class File
-    {
-        public static void AppendAllLines(string path, Collections.Generic.IEnumerable<string> contents, Text.Encoding encoding) { }
-
-        public static void AppendAllLines(string path, Collections.Generic.IEnumerable<string> contents) { }
-
-        public static void AppendAllText(string path, string contents, Text.Encoding encoding) { }
-
-        public static void AppendAllText(string path, string contents) { }
-
-        public static StreamWriter AppendText(string path) { throw null; }
-
-        public static void Copy(string sourceFileName, string destFileName, bool overwrite) { }
-
-        public static void Copy(string sourceFileName, string destFileName) { }
-
-        public static FileStream Create(string path, int bufferSize, FileOptions options) { throw null; }
-
-        public static FileStream Create(string path, int bufferSize) { throw null; }
-
-        public static FileStream Create(string path) { throw null; }
-
-        public static StreamWriter CreateText(string path) { throw null; }
-
-        public static void Delete(string path) { }
-
-        public static bool Exists(string path) { throw null; }
-
-        public static FileAttributes GetAttributes(string path) { throw null; }
-
-        public static DateTime GetCreationTime(string path) { throw null; }
-
-        public static DateTime GetCreationTimeUtc(string path) { throw null; }
-
-        public static DateTime GetLastAccessTime(string path) { throw null; }
-
-        public static DateTime GetLastAccessTimeUtc(string path) { throw null; }
-
-        public static DateTime GetLastWriteTime(string path) { throw null; }
-
-        public static DateTime GetLastWriteTimeUtc(string path) { throw null; }
-
-        public static void Move(string sourceFileName, string destFileName) { }
-
-        public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share) { throw null; }
-
-        public static FileStream Open(string path, FileMode mode, FileAccess access) { throw null; }
-
-        public static FileStream Open(string path, FileMode mode) { throw null; }
-
-        public static FileStream OpenRead(string path) { throw null; }
-
-        public static StreamReader OpenText(string path) { throw null; }
-
-        public static FileStream OpenWrite(string path) { throw null; }
-
-        public static byte[] ReadAllBytes(string path) { throw null; }
-
-        public static string[] ReadAllLines(string path, Text.Encoding encoding) { throw null; }
-
-        public static string[] ReadAllLines(string path) { throw null; }
-
-        public static string ReadAllText(string path, Text.Encoding encoding) { throw null; }
-
-        public static string ReadAllText(string path) { throw null; }
-
-        public static Collections.Generic.IEnumerable<string> ReadLines(string path, Text.Encoding encoding) { throw null; }
-
-        public static Collections.Generic.IEnumerable<string> ReadLines(string path) { throw null; }
-
-        public static void SetAttributes(string path, FileAttributes fileAttributes) { }
-
-        public static void SetCreationTime(string path, DateTime creationTime) { }
-
-        public static void SetCreationTimeUtc(string path, DateTime creationTimeUtc) { }
-
-        public static void SetLastAccessTime(string path, DateTime lastAccessTime) { }
-
-        public static void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc) { }
-
-        public static void SetLastWriteTime(string path, DateTime lastWriteTime) { }
-
-        public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc) { }
-
-        public static void WriteAllBytes(string path, byte[] bytes) { }
-
-        public static void WriteAllLines(string path, Collections.Generic.IEnumerable<string> contents, Text.Encoding encoding) { }
-
-        public static void WriteAllLines(string path, Collections.Generic.IEnumerable<string> contents) { }
-
-        public static void WriteAllText(string path, string contents, Text.Encoding encoding) { }
-
-        public static void WriteAllText(string path, string contents) { }
-    }
-
-    public sealed partial class FileInfo : FileSystemInfo
-    {
-        public FileInfo(string fileName) { }
-
-        public DirectoryInfo Directory { get { throw null; } }
-
-        public string DirectoryName { get { throw null; } }
-
-        public override bool Exists { get { throw null; } }
-
-        public bool IsReadOnly { get { throw null; } set { } }
-
-        public long Length { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public StreamWriter AppendText() { throw null; }
-
-        public FileInfo CopyTo(string destFileName, bool overwrite) { throw null; }
-
-        public FileInfo CopyTo(string destFileName) { throw null; }
-
-        public FileStream Create() { throw null; }
-
-        public StreamWriter CreateText() { throw null; }
-
-        public override void Delete() { }
-
-        public void MoveTo(string destFileName) { }
-
-        public FileStream Open(FileMode mode, FileAccess access, FileShare share) { throw null; }
-
-        public FileStream Open(FileMode mode, FileAccess access) { throw null; }
-
-        public FileStream Open(FileMode mode) { throw null; }
-
-        public FileStream OpenRead() { throw null; }
-
-        public StreamReader OpenText() { throw null; }
-
-        public FileStream OpenWrite() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    [Flags]
-    public enum FileOptions
-    {
-        WriteThrough = int.MinValue,
-        None = 0,
-        Encrypted = 16384,
-        DeleteOnClose = 67108864,
-        SequentialScan = 134217728,
-        RandomAccess = 268435456,
-        Asynchronous = 1073741824
-    }
-
-    public partial class FileStream : Stream
-    {
-        public FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle handle, FileAccess access, int bufferSize, bool isAsync) { }
-
-        public FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle handle, FileAccess access, int bufferSize) { }
-
-        public FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle handle, FileAccess access) { }
-
-        public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool useAsync) { }
-
-        public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options) { }
-
-        public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize) { }
-
-        public FileStream(string path, FileMode mode, FileAccess access, FileShare share) { }
-
-        public FileStream(string path, FileMode mode, FileAccess access) { }
-
-        public FileStream(string path, FileMode mode) { }
-
-        public override bool CanRead { get { throw null; } }
-
-        public override bool CanSeek { get { throw null; } }
-
-        public override bool CanWrite { get { throw null; } }
-
-        public virtual bool IsAsync { get { throw null; } }
-
-        public override long Length { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public override long Position { get { throw null; } set { } }
-
-        public virtual Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle { get { throw null; } }
-
-        protected override void Dispose(bool disposing) { }
-
-        ~FileStream() {
-        }
-
-        public override void Flush() { }
-
-        public virtual void Flush(bool flushToDisk) { }
-
-        public override Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override int Read(byte[] array, int offset, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override int ReadByte() { throw null; }
-
-        public override long Seek(long offset, SeekOrigin origin) { throw null; }
-
-        public override void SetLength(long value) { }
-
-        public override void Write(byte[] array, int offset, int count) { }
-
-        public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override void WriteByte(byte value) { }
-    }
-
-    public abstract partial class FileSystemInfo
-    {
-        protected string FullPath;
-        protected string OriginalPath;
-        public FileAttributes Attributes { get { throw null; } set { } }
-
-        public DateTime CreationTime { get { throw null; } set { } }
-
-        public DateTime CreationTimeUtc { get { throw null; } set { } }
-
-        public abstract bool Exists { get; }
-
-        public string Extension { get { throw null; } }
-
-        public virtual string FullName { get { throw null; } }
-
-        public DateTime LastAccessTime { get { throw null; } set { } }
-
-        public DateTime LastAccessTimeUtc { get { throw null; } set { } }
-
-        public DateTime LastWriteTime { get { throw null; } set { } }
-
-        public DateTime LastWriteTimeUtc { get { throw null; } set { } }
-
-        public abstract string Name { get; }
-
-        public abstract void Delete();
-        public void Refresh() { }
-    }
-
-    public enum SearchOption
-    {
-        TopDirectoryOnly = 0,
-        AllDirectories = 1
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.io.filesystem/4.3.0/system.io.filesystem.nuspec b/src/referencePackages/src/system.io.filesystem/4.3.0/system.io.filesystem.nuspec
deleted file mode 100644
index efda727f..00000000
--- a/src/referencePackages/src/system.io.filesystem/4.3.0/system.io.filesystem.nuspec
+++ /dev/null
@@ -1,42 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.IO.FileSystem</id>
-    <version>4.3.0</version>
-    <title>System.IO.FileSystem</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides types that allow reading and writing to files and types that provide basic file and directory support.
-
-Commonly Used Types:
-System.IO.FileStream
-System.IO.FileInfo
-System.IO.DirectoryInfo
-System.IO.FileSystemInfo
-System.IO.File
-System.IO.Directory
-System.IO.SearchOption
-System.IO.FileOptions
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.IO.FileSystem.Primitives" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.io/4.3.0/System.IO.4.3.0.csproj b/src/referencePackages/src/system.io/4.3.0/System.IO.4.3.0.csproj
deleted file mode 100644
index d566eec1..00000000
--- a/src/referencePackages/src/system.io/4.3.0/System.IO.4.3.0.csproj
+++ /dev/null
@@ -1,32 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3;netstandard1.5</TargetFrameworks>
-    <AssemblyName>System.IO</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.5'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.io/4.3.0/ref/netstandard1.0/System.IO.cs b/src/referencePackages/src/system.io/4.3.0/ref/netstandard1.0/System.IO.cs
deleted file mode 100644
index 7e371bec..00000000
--- a/src/referencePackages/src/system.io/4.3.0/ref/netstandard1.0/System.IO.cs
+++ /dev/null
@@ -1,597 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyTitle("System.IO.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.IO.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.IO.dll")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.IO
-{
-    public partial class BinaryReader : IDisposable
-    {
-        public BinaryReader(Stream input, Text.Encoding encoding, bool leaveOpen) { }
-
-        public BinaryReader(Stream input, Text.Encoding encoding) { }
-
-        public BinaryReader(Stream input) { }
-
-        public virtual Stream BaseStream { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        protected virtual void FillBuffer(int numBytes) { }
-
-        public virtual int PeekChar() { throw null; }
-
-        public virtual int Read() { throw null; }
-
-        public virtual int Read(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual int Read(char[] buffer, int index, int count) { throw null; }
-
-        protected internal int Read7BitEncodedInt() { throw null; }
-
-        public virtual bool ReadBoolean() { throw null; }
-
-        public virtual byte ReadByte() { throw null; }
-
-        public virtual byte[] ReadBytes(int count) { throw null; }
-
-        public virtual char ReadChar() { throw null; }
-
-        public virtual char[] ReadChars(int count) { throw null; }
-
-        public virtual decimal ReadDecimal() { throw null; }
-
-        public virtual double ReadDouble() { throw null; }
-
-        public virtual short ReadInt16() { throw null; }
-
-        public virtual int ReadInt32() { throw null; }
-
-        public virtual long ReadInt64() { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual sbyte ReadSByte() { throw null; }
-
-        public virtual float ReadSingle() { throw null; }
-
-        public virtual string ReadString() { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual ushort ReadUInt16() { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual uint ReadUInt32() { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual ulong ReadUInt64() { throw null; }
-    }
-
-    public partial class BinaryWriter : IDisposable
-    {
-        public static readonly BinaryWriter Null;
-        protected Stream OutStream;
-        protected BinaryWriter() { }
-
-        public BinaryWriter(Stream output, Text.Encoding encoding, bool leaveOpen) { }
-
-        public BinaryWriter(Stream output, Text.Encoding encoding) { }
-
-        public BinaryWriter(Stream output) { }
-
-        public virtual Stream BaseStream { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public virtual void Flush() { }
-
-        public virtual long Seek(int offset, SeekOrigin origin) { throw null; }
-
-        public virtual void Write(bool value) { }
-
-        public virtual void Write(byte value) { }
-
-        public virtual void Write(byte[] buffer, int index, int count) { }
-
-        public virtual void Write(byte[] buffer) { }
-
-        public virtual void Write(char ch) { }
-
-        public virtual void Write(char[] chars, int index, int count) { }
-
-        public virtual void Write(char[] chars) { }
-
-        public virtual void Write(decimal value) { }
-
-        public virtual void Write(double value) { }
-
-        public virtual void Write(short value) { }
-
-        public virtual void Write(int value) { }
-
-        public virtual void Write(long value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(sbyte value) { }
-
-        public virtual void Write(float value) { }
-
-        public virtual void Write(string value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(ushort value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(uint value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(ulong value) { }
-
-        protected void Write7BitEncodedInt(int value) { }
-    }
-
-    public partial class EndOfStreamException : IOException
-    {
-        public EndOfStreamException() { }
-
-        public EndOfStreamException(string message, Exception innerException) { }
-
-        public EndOfStreamException(string message) { }
-    }
-
-    public partial class FileNotFoundException : IOException
-    {
-        public FileNotFoundException() { }
-
-        public FileNotFoundException(string message, Exception innerException) { }
-
-        public FileNotFoundException(string message, string fileName, Exception innerException) { }
-
-        public FileNotFoundException(string message, string fileName) { }
-
-        public FileNotFoundException(string message) { }
-
-        public string FileName { get { throw null; } }
-
-        public override string Message { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public sealed partial class InvalidDataException : Exception
-    {
-        public InvalidDataException() { }
-
-        public InvalidDataException(string message, Exception innerException) { }
-
-        public InvalidDataException(string message) { }
-    }
-
-    public partial class IOException : Exception
-    {
-        public IOException() { }
-
-        public IOException(string message, Exception innerException) { }
-
-        public IOException(string message, int hresult) { }
-
-        public IOException(string message) { }
-    }
-
-    public partial class MemoryStream : Stream
-    {
-        public MemoryStream() { }
-
-        public MemoryStream(byte[] buffer, bool writable) { }
-
-        public MemoryStream(byte[] buffer, int index, int count, bool writable) { }
-
-        public MemoryStream(byte[] buffer, int index, int count) { }
-
-        public MemoryStream(byte[] buffer) { }
-
-        public MemoryStream(int capacity) { }
-
-        public override bool CanRead { get { throw null; } }
-
-        public override bool CanSeek { get { throw null; } }
-
-        public override bool CanWrite { get { throw null; } }
-
-        public virtual int Capacity { get { throw null; } set { } }
-
-        public override long Length { get { throw null; } }
-
-        public override long Position { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override void Flush() { }
-
-        public override Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override int Read(byte[] buffer, int offset, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override int ReadByte() { throw null; }
-
-        public override long Seek(long offset, SeekOrigin loc) { throw null; }
-
-        public override void SetLength(long value) { }
-
-        public virtual byte[] ToArray() { throw null; }
-
-        public override void Write(byte[] buffer, int offset, int count) { }
-
-        public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override void WriteByte(byte value) { }
-
-        public virtual void WriteTo(Stream stream) { }
-    }
-
-    public enum SeekOrigin
-    {
-        Begin = 0,
-        Current = 1,
-        End = 2
-    }
-
-    public abstract partial class Stream : IDisposable
-    {
-        public static readonly Stream Null;
-        public abstract bool CanRead { get; }
-        public abstract bool CanSeek { get; }
-
-        public virtual bool CanTimeout { get { throw null; } }
-
-        public abstract bool CanWrite { get; }
-        public abstract long Length { get; }
-        public abstract long Position { get; set; }
-
-        public virtual int ReadTimeout { get { throw null; } set { } }
-
-        public virtual int WriteTimeout { get { throw null; } set { } }
-
-        public void CopyTo(Stream destination, int bufferSize) { }
-
-        public void CopyTo(Stream destination) { }
-
-        public virtual Threading.Tasks.Task CopyToAsync(Stream destination, int bufferSize, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task CopyToAsync(Stream destination, int bufferSize) { throw null; }
-
-        public Threading.Tasks.Task CopyToAsync(Stream destination) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract void Flush();
-        public Threading.Tasks.Task FlushAsync() { throw null; }
-
-        public virtual Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken) { throw null; }
-
-        public abstract int Read(byte[] buffer, int offset, int count);
-        public virtual Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count) { throw null; }
-
-        public virtual int ReadByte() { throw null; }
-
-        public abstract long Seek(long offset, SeekOrigin origin);
-        public abstract void SetLength(long value);
-        public abstract void Write(byte[] buffer, int offset, int count);
-        public virtual Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count) { throw null; }
-
-        public virtual void WriteByte(byte value) { }
-    }
-
-    public partial class StreamReader : TextReader
-    {
-        public new static readonly StreamReader Null;
-        public StreamReader(Stream stream, bool detectEncodingFromByteOrderMarks) { }
-
-        public StreamReader(Stream stream, Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen) { }
-
-        public StreamReader(Stream stream, Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) { }
-
-        public StreamReader(Stream stream, Text.Encoding encoding, bool detectEncodingFromByteOrderMarks) { }
-
-        public StreamReader(Stream stream, Text.Encoding encoding) { }
-
-        public StreamReader(Stream stream) { }
-
-        public virtual Stream BaseStream { get { throw null; } }
-
-        public virtual Text.Encoding CurrentEncoding { get { throw null; } }
-
-        public bool EndOfStream { get { throw null; } }
-
-        public void DiscardBufferedData() { }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override int Peek() { throw null; }
-
-        public override int Read() { throw null; }
-
-        public override int Read(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override int ReadBlock(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadBlockAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override string ReadLine() { throw null; }
-
-        public override Threading.Tasks.Task<string> ReadLineAsync() { throw null; }
-
-        public override string ReadToEnd() { throw null; }
-
-        public override Threading.Tasks.Task<string> ReadToEndAsync() { throw null; }
-    }
-
-    public partial class StreamWriter : TextWriter
-    {
-        public new static readonly StreamWriter Null;
-        public StreamWriter(Stream stream, Text.Encoding encoding, int bufferSize, bool leaveOpen) { }
-
-        public StreamWriter(Stream stream, Text.Encoding encoding, int bufferSize) { }
-
-        public StreamWriter(Stream stream, Text.Encoding encoding) { }
-
-        public StreamWriter(Stream stream) { }
-
-        public virtual bool AutoFlush { get { throw null; } set { } }
-
-        public virtual Stream BaseStream { get { throw null; } }
-
-        public override Text.Encoding Encoding { get { throw null; } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override void Flush() { }
-
-        public override Threading.Tasks.Task FlushAsync() { throw null; }
-
-        public override void Write(char value) { }
-
-        public override void Write(char[] buffer, int index, int count) { }
-
-        public override void Write(char[] buffer) { }
-
-        public override void Write(string value) { }
-
-        public override Threading.Tasks.Task WriteAsync(char value) { throw null; }
-
-        public override Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task WriteAsync(string value) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync() { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(char value) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(string value) { throw null; }
-    }
-
-    public partial class StringReader : TextReader
-    {
-        public StringReader(string s) { }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override int Peek() { throw null; }
-
-        public override int Read() { throw null; }
-
-        public override int Read(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadBlockAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override string ReadLine() { throw null; }
-
-        public override Threading.Tasks.Task<string> ReadLineAsync() { throw null; }
-
-        public override string ReadToEnd() { throw null; }
-
-        public override Threading.Tasks.Task<string> ReadToEndAsync() { throw null; }
-    }
-
-    public partial class StringWriter : TextWriter
-    {
-        public StringWriter() { }
-
-        public StringWriter(IFormatProvider formatProvider) { }
-
-        public StringWriter(Text.StringBuilder sb, IFormatProvider formatProvider) { }
-
-        public StringWriter(Text.StringBuilder sb) { }
-
-        public override Text.Encoding Encoding { get { throw null; } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override Threading.Tasks.Task FlushAsync() { throw null; }
-
-        public virtual Text.StringBuilder GetStringBuilder() { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public override void Write(char value) { }
-
-        public override void Write(char[] buffer, int index, int count) { }
-
-        public override void Write(string value) { }
-
-        public override Threading.Tasks.Task WriteAsync(char value) { throw null; }
-
-        public override Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task WriteAsync(string value) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(char value) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(string value) { throw null; }
-    }
-
-    public abstract partial class TextReader : IDisposable
-    {
-        public static readonly TextReader Null;
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public virtual int Peek() { throw null; }
-
-        public virtual int Read() { throw null; }
-
-        public virtual int Read(char[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count) { throw null; }
-
-        public virtual int ReadBlock(char[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadBlockAsync(char[] buffer, int index, int count) { throw null; }
-
-        public virtual string ReadLine() { throw null; }
-
-        public virtual Threading.Tasks.Task<string> ReadLineAsync() { throw null; }
-
-        public virtual string ReadToEnd() { throw null; }
-
-        public virtual Threading.Tasks.Task<string> ReadToEndAsync() { throw null; }
-    }
-
-    public abstract partial class TextWriter : IDisposable
-    {
-        protected char[] CoreNewLine;
-        public static readonly TextWriter Null;
-        protected TextWriter() { }
-
-        protected TextWriter(IFormatProvider formatProvider) { }
-
-        public abstract Text.Encoding Encoding { get; }
-
-        public virtual IFormatProvider FormatProvider { get { throw null; } }
-
-        public virtual string NewLine { get { throw null; } set { } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public virtual void Flush() { }
-
-        public virtual Threading.Tasks.Task FlushAsync() { throw null; }
-
-        public virtual void Write(bool value) { }
-
-        public abstract void Write(char value);
-        public virtual void Write(char[] buffer, int index, int count) { }
-
-        public virtual void Write(char[] buffer) { }
-
-        public virtual void Write(decimal value) { }
-
-        public virtual void Write(double value) { }
-
-        public virtual void Write(int value) { }
-
-        public virtual void Write(long value) { }
-
-        public virtual void Write(object value) { }
-
-        public virtual void Write(float value) { }
-
-        public virtual void Write(string format, params object[] arg) { }
-
-        public virtual void Write(string value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(uint value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(ulong value) { }
-
-        public virtual Threading.Tasks.Task WriteAsync(char value) { throw null; }
-
-        public virtual Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count) { throw null; }
-
-        public Threading.Tasks.Task WriteAsync(char[] buffer) { throw null; }
-
-        public virtual Threading.Tasks.Task WriteAsync(string value) { throw null; }
-
-        public virtual void WriteLine() { }
-
-        public virtual void WriteLine(bool value) { }
-
-        public virtual void WriteLine(char value) { }
-
-        public virtual void WriteLine(char[] buffer, int index, int count) { }
-
-        public virtual void WriteLine(char[] buffer) { }
-
-        public virtual void WriteLine(decimal value) { }
-
-        public virtual void WriteLine(double value) { }
-
-        public virtual void WriteLine(int value) { }
-
-        public virtual void WriteLine(long value) { }
-
-        public virtual void WriteLine(object value) { }
-
-        public virtual void WriteLine(float value) { }
-
-        public virtual void WriteLine(string format, params object[] arg) { }
-
-        public virtual void WriteLine(string value) { }
-
-        [CLSCompliant(false)]
-        public virtual void WriteLine(uint value) { }
-
-        [CLSCompliant(false)]
-        public virtual void WriteLine(ulong value) { }
-
-        public virtual Threading.Tasks.Task WriteLineAsync() { throw null; }
-
-        public virtual Threading.Tasks.Task WriteLineAsync(char value) { throw null; }
-
-        public virtual Threading.Tasks.Task WriteLineAsync(char[] buffer, int index, int count) { throw null; }
-
-        public Threading.Tasks.Task WriteLineAsync(char[] buffer) { throw null; }
-
-        public virtual Threading.Tasks.Task WriteLineAsync(string value) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.io/4.3.0/ref/netstandard1.3/System.IO.cs b/src/referencePackages/src/system.io/4.3.0/ref/netstandard1.3/System.IO.cs
deleted file mode 100644
index 31da8a85..00000000
--- a/src/referencePackages/src/system.io/4.3.0/ref/netstandard1.3/System.IO.cs
+++ /dev/null
@@ -1,589 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.IO")]
-[assembly: System.Reflection.AssemblyDescription("System.IO")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.IO")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.23123.00")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.23123.00 built by: PROJECTKREL")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata("", "")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-[assembly: System.Runtime.CompilerServices.TypeForwardedTo(typeof(System.IO.FileNotFoundException))]
-[assembly: System.Runtime.CompilerServices.TypeForwardedTo(typeof(System.IO.IOException))]
-namespace System.IO
-{
-    public partial class BinaryReader : IDisposable
-    {
-        public BinaryReader(Stream input, Text.Encoding encoding, bool leaveOpen) { }
-
-        public BinaryReader(Stream input, Text.Encoding encoding) { }
-
-        public BinaryReader(Stream input) { }
-
-        public virtual Stream BaseStream { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        protected virtual void FillBuffer(int numBytes) { }
-
-        public virtual int PeekChar() { throw null; }
-
-        public virtual int Read() { throw null; }
-
-        public virtual int Read(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual int Read(char[] buffer, int index, int count) { throw null; }
-
-        protected internal int Read7BitEncodedInt() { throw null; }
-
-        public virtual bool ReadBoolean() { throw null; }
-
-        public virtual byte ReadByte() { throw null; }
-
-        public virtual byte[] ReadBytes(int count) { throw null; }
-
-        public virtual char ReadChar() { throw null; }
-
-        public virtual char[] ReadChars(int count) { throw null; }
-
-        public virtual decimal ReadDecimal() { throw null; }
-
-        public virtual double ReadDouble() { throw null; }
-
-        public virtual short ReadInt16() { throw null; }
-
-        public virtual int ReadInt32() { throw null; }
-
-        public virtual long ReadInt64() { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual sbyte ReadSByte() { throw null; }
-
-        public virtual float ReadSingle() { throw null; }
-
-        public virtual string ReadString() { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual ushort ReadUInt16() { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual uint ReadUInt32() { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual ulong ReadUInt64() { throw null; }
-    }
-
-    public partial class BinaryWriter : IDisposable
-    {
-        public static readonly BinaryWriter Null;
-        protected Stream OutStream;
-        protected BinaryWriter() { }
-
-        public BinaryWriter(Stream output, Text.Encoding encoding, bool leaveOpen) { }
-
-        public BinaryWriter(Stream output, Text.Encoding encoding) { }
-
-        public BinaryWriter(Stream output) { }
-
-        public virtual Stream BaseStream { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public virtual void Flush() { }
-
-        public virtual long Seek(int offset, SeekOrigin origin) { throw null; }
-
-        public virtual void Write(bool value) { }
-
-        public virtual void Write(byte value) { }
-
-        public virtual void Write(byte[] buffer, int index, int count) { }
-
-        public virtual void Write(byte[] buffer) { }
-
-        public virtual void Write(char ch) { }
-
-        public virtual void Write(char[] chars, int index, int count) { }
-
-        public virtual void Write(char[] chars) { }
-
-        public virtual void Write(decimal value) { }
-
-        public virtual void Write(double value) { }
-
-        public virtual void Write(short value) { }
-
-        public virtual void Write(int value) { }
-
-        public virtual void Write(long value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(sbyte value) { }
-
-        public virtual void Write(float value) { }
-
-        public virtual void Write(string value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(ushort value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(uint value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(ulong value) { }
-
-        protected void Write7BitEncodedInt(int value) { }
-    }
-
-    public partial class EndOfStreamException : IOException
-    {
-        public EndOfStreamException() { }
-
-        public EndOfStreamException(string message, Exception innerException) { }
-
-        public EndOfStreamException(string message) { }
-    }
-
-    public sealed partial class InvalidDataException : Exception
-    {
-        public InvalidDataException() { }
-
-        public InvalidDataException(string message, Exception innerException) { }
-
-        public InvalidDataException(string message) { }
-    }
-
-    public partial class MemoryStream : Stream
-    {
-        public MemoryStream() { }
-
-        public MemoryStream(byte[] buffer, bool writable) { }
-
-        public MemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible) { }
-
-        public MemoryStream(byte[] buffer, int index, int count, bool writable) { }
-
-        public MemoryStream(byte[] buffer, int index, int count) { }
-
-        public MemoryStream(byte[] buffer) { }
-
-        public MemoryStream(int capacity) { }
-
-        public override bool CanRead { get { throw null; } }
-
-        public override bool CanSeek { get { throw null; } }
-
-        public override bool CanWrite { get { throw null; } }
-
-        public virtual int Capacity { get { throw null; } set { } }
-
-        public override long Length { get { throw null; } }
-
-        public override long Position { get { throw null; } set { } }
-
-        public override Threading.Tasks.Task CopyToAsync(Stream destination, int bufferSize, Threading.CancellationToken cancellationToken) { throw null; }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override void Flush() { }
-
-        public override Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override int Read(byte[] buffer, int offset, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override int ReadByte() { throw null; }
-
-        public override long Seek(long offset, SeekOrigin loc) { throw null; }
-
-        public override void SetLength(long value) { }
-
-        public virtual byte[] ToArray() { throw null; }
-
-        public virtual bool TryGetBuffer(out ArraySegment<byte> buffer) { throw null; }
-
-        public override void Write(byte[] buffer, int offset, int count) { }
-
-        public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override void WriteByte(byte value) { }
-
-        public virtual void WriteTo(Stream stream) { }
-    }
-
-    public enum SeekOrigin
-    {
-        Begin = 0,
-        Current = 1,
-        End = 2
-    }
-
-    public abstract partial class Stream : IDisposable
-    {
-        public static readonly Stream Null;
-        public abstract bool CanRead { get; }
-        public abstract bool CanSeek { get; }
-
-        public virtual bool CanTimeout { get { throw null; } }
-
-        public abstract bool CanWrite { get; }
-        public abstract long Length { get; }
-        public abstract long Position { get; set; }
-
-        public virtual int ReadTimeout { get { throw null; } set { } }
-
-        public virtual int WriteTimeout { get { throw null; } set { } }
-
-        public void CopyTo(Stream destination, int bufferSize) { }
-
-        public void CopyTo(Stream destination) { }
-
-        public virtual Threading.Tasks.Task CopyToAsync(Stream destination, int bufferSize, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task CopyToAsync(Stream destination, int bufferSize) { throw null; }
-
-        public Threading.Tasks.Task CopyToAsync(Stream destination) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract void Flush();
-        public Threading.Tasks.Task FlushAsync() { throw null; }
-
-        public virtual Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken) { throw null; }
-
-        public abstract int Read(byte[] buffer, int offset, int count);
-        public virtual Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count) { throw null; }
-
-        public virtual int ReadByte() { throw null; }
-
-        public abstract long Seek(long offset, SeekOrigin origin);
-        public abstract void SetLength(long value);
-        public abstract void Write(byte[] buffer, int offset, int count);
-        public virtual Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count) { throw null; }
-
-        public virtual void WriteByte(byte value) { }
-    }
-
-    public partial class StreamReader : TextReader
-    {
-        public new static readonly StreamReader Null;
-        public StreamReader(Stream stream, bool detectEncodingFromByteOrderMarks) { }
-
-        public StreamReader(Stream stream, Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen) { }
-
-        public StreamReader(Stream stream, Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) { }
-
-        public StreamReader(Stream stream, Text.Encoding encoding, bool detectEncodingFromByteOrderMarks) { }
-
-        public StreamReader(Stream stream, Text.Encoding encoding) { }
-
-        public StreamReader(Stream stream) { }
-
-        public virtual Stream BaseStream { get { throw null; } }
-
-        public virtual Text.Encoding CurrentEncoding { get { throw null; } }
-
-        public bool EndOfStream { get { throw null; } }
-
-        public void DiscardBufferedData() { }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override int Peek() { throw null; }
-
-        public override int Read() { throw null; }
-
-        public override int Read(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override int ReadBlock(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadBlockAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override string ReadLine() { throw null; }
-
-        public override Threading.Tasks.Task<string> ReadLineAsync() { throw null; }
-
-        public override string ReadToEnd() { throw null; }
-
-        public override Threading.Tasks.Task<string> ReadToEndAsync() { throw null; }
-    }
-
-    public partial class StreamWriter : TextWriter
-    {
-        public new static readonly StreamWriter Null;
-        public StreamWriter(Stream stream, Text.Encoding encoding, int bufferSize, bool leaveOpen) { }
-
-        public StreamWriter(Stream stream, Text.Encoding encoding, int bufferSize) { }
-
-        public StreamWriter(Stream stream, Text.Encoding encoding) { }
-
-        public StreamWriter(Stream stream) { }
-
-        public virtual bool AutoFlush { get { throw null; } set { } }
-
-        public virtual Stream BaseStream { get { throw null; } }
-
-        public override Text.Encoding Encoding { get { throw null; } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override void Flush() { }
-
-        public override Threading.Tasks.Task FlushAsync() { throw null; }
-
-        public override void Write(char value) { }
-
-        public override void Write(char[] buffer, int index, int count) { }
-
-        public override void Write(char[] buffer) { }
-
-        public override void Write(string value) { }
-
-        public override Threading.Tasks.Task WriteAsync(char value) { throw null; }
-
-        public override Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task WriteAsync(string value) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync() { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(char value) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(string value) { throw null; }
-    }
-
-    public partial class StringReader : TextReader
-    {
-        public StringReader(string s) { }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override int Peek() { throw null; }
-
-        public override int Read() { throw null; }
-
-        public override int Read(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadBlockAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override string ReadLine() { throw null; }
-
-        public override Threading.Tasks.Task<string> ReadLineAsync() { throw null; }
-
-        public override string ReadToEnd() { throw null; }
-
-        public override Threading.Tasks.Task<string> ReadToEndAsync() { throw null; }
-    }
-
-    public partial class StringWriter : TextWriter
-    {
-        public StringWriter() { }
-
-        public StringWriter(IFormatProvider formatProvider) { }
-
-        public StringWriter(Text.StringBuilder sb, IFormatProvider formatProvider) { }
-
-        public StringWriter(Text.StringBuilder sb) { }
-
-        public override Text.Encoding Encoding { get { throw null; } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override Threading.Tasks.Task FlushAsync() { throw null; }
-
-        public virtual Text.StringBuilder GetStringBuilder() { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public override void Write(char value) { }
-
-        public override void Write(char[] buffer, int index, int count) { }
-
-        public override void Write(string value) { }
-
-        public override Threading.Tasks.Task WriteAsync(char value) { throw null; }
-
-        public override Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task WriteAsync(string value) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(char value) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(string value) { throw null; }
-    }
-
-    public abstract partial class TextReader : IDisposable
-    {
-        public static readonly TextReader Null;
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public virtual int Peek() { throw null; }
-
-        public virtual int Read() { throw null; }
-
-        public virtual int Read(char[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count) { throw null; }
-
-        public virtual int ReadBlock(char[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadBlockAsync(char[] buffer, int index, int count) { throw null; }
-
-        public virtual string ReadLine() { throw null; }
-
-        public virtual Threading.Tasks.Task<string> ReadLineAsync() { throw null; }
-
-        public virtual string ReadToEnd() { throw null; }
-
-        public virtual Threading.Tasks.Task<string> ReadToEndAsync() { throw null; }
-    }
-
-    public abstract partial class TextWriter : IDisposable
-    {
-        protected char[] CoreNewLine;
-        public static readonly TextWriter Null;
-        protected TextWriter() { }
-
-        protected TextWriter(IFormatProvider formatProvider) { }
-
-        public abstract Text.Encoding Encoding { get; }
-
-        public virtual IFormatProvider FormatProvider { get { throw null; } }
-
-        public virtual string NewLine { get { throw null; } set { } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public virtual void Flush() { }
-
-        public virtual Threading.Tasks.Task FlushAsync() { throw null; }
-
-        public virtual void Write(bool value) { }
-
-        public abstract void Write(char value);
-        public virtual void Write(char[] buffer, int index, int count) { }
-
-        public virtual void Write(char[] buffer) { }
-
-        public virtual void Write(decimal value) { }
-
-        public virtual void Write(double value) { }
-
-        public virtual void Write(int value) { }
-
-        public virtual void Write(long value) { }
-
-        public virtual void Write(object value) { }
-
-        public virtual void Write(float value) { }
-
-        public virtual void Write(string format, object arg0, object arg1, object arg2) { }
-
-        public virtual void Write(string format, object arg0, object arg1) { }
-
-        public virtual void Write(string format, object arg0) { }
-
-        public virtual void Write(string format, params object[] arg) { }
-
-        public virtual void Write(string value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(uint value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(ulong value) { }
-
-        public virtual Threading.Tasks.Task WriteAsync(char value) { throw null; }
-
-        public virtual Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count) { throw null; }
-
-        public Threading.Tasks.Task WriteAsync(char[] buffer) { throw null; }
-
-        public virtual Threading.Tasks.Task WriteAsync(string value) { throw null; }
-
-        public virtual void WriteLine() { }
-
-        public virtual void WriteLine(bool value) { }
-
-        public virtual void WriteLine(char value) { }
-
-        public virtual void WriteLine(char[] buffer, int index, int count) { }
-
-        public virtual void WriteLine(char[] buffer) { }
-
-        public virtual void WriteLine(decimal value) { }
-
-        public virtual void WriteLine(double value) { }
-
-        public virtual void WriteLine(int value) { }
-
-        public virtual void WriteLine(long value) { }
-
-        public virtual void WriteLine(object value) { }
-
-        public virtual void WriteLine(float value) { }
-
-        public virtual void WriteLine(string format, object arg0, object arg1, object arg2) { }
-
-        public virtual void WriteLine(string format, object arg0, object arg1) { }
-
-        public virtual void WriteLine(string format, object arg0) { }
-
-        public virtual void WriteLine(string format, params object[] arg) { }
-
-        public virtual void WriteLine(string value) { }
-
-        [CLSCompliant(false)]
-        public virtual void WriteLine(uint value) { }
-
-        [CLSCompliant(false)]
-        public virtual void WriteLine(ulong value) { }
-
-        public virtual Threading.Tasks.Task WriteLineAsync() { throw null; }
-
-        public virtual Threading.Tasks.Task WriteLineAsync(char value) { throw null; }
-
-        public virtual Threading.Tasks.Task WriteLineAsync(char[] buffer, int index, int count) { throw null; }
-
-        public Threading.Tasks.Task WriteLineAsync(char[] buffer) { throw null; }
-
-        public virtual Threading.Tasks.Task WriteLineAsync(string value) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.io/4.3.0/ref/netstandard1.5/System.IO.cs b/src/referencePackages/src/system.io/4.3.0/ref/netstandard1.5/System.IO.cs
deleted file mode 100644
index fd770723..00000000
--- a/src/referencePackages/src/system.io/4.3.0/ref/netstandard1.5/System.IO.cs
+++ /dev/null
@@ -1,629 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.IO")]
-[assembly: System.Reflection.AssemblyDescription("System.IO")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.IO")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-[assembly: System.Runtime.CompilerServices.TypeForwardedTo(typeof(System.IO.FileNotFoundException))]
-[assembly: System.Runtime.CompilerServices.TypeForwardedTo(typeof(System.IO.IOException))]
-namespace System.IO
-{
-    public partial class BinaryReader : IDisposable
-    {
-        public BinaryReader(Stream input, Text.Encoding encoding, bool leaveOpen) { }
-
-        public BinaryReader(Stream input, Text.Encoding encoding) { }
-
-        public BinaryReader(Stream input) { }
-
-        public virtual Stream BaseStream { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        protected virtual void FillBuffer(int numBytes) { }
-
-        public virtual int PeekChar() { throw null; }
-
-        public virtual int Read() { throw null; }
-
-        public virtual int Read(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual int Read(char[] buffer, int index, int count) { throw null; }
-
-        protected internal int Read7BitEncodedInt() { throw null; }
-
-        public virtual bool ReadBoolean() { throw null; }
-
-        public virtual byte ReadByte() { throw null; }
-
-        public virtual byte[] ReadBytes(int count) { throw null; }
-
-        public virtual char ReadChar() { throw null; }
-
-        public virtual char[] ReadChars(int count) { throw null; }
-
-        public virtual decimal ReadDecimal() { throw null; }
-
-        public virtual double ReadDouble() { throw null; }
-
-        public virtual short ReadInt16() { throw null; }
-
-        public virtual int ReadInt32() { throw null; }
-
-        public virtual long ReadInt64() { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual sbyte ReadSByte() { throw null; }
-
-        public virtual float ReadSingle() { throw null; }
-
-        public virtual string ReadString() { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual ushort ReadUInt16() { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual uint ReadUInt32() { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual ulong ReadUInt64() { throw null; }
-    }
-
-    public partial class BinaryWriter : IDisposable
-    {
-        public static readonly BinaryWriter Null;
-        protected Stream OutStream;
-        protected BinaryWriter() { }
-
-        public BinaryWriter(Stream output, Text.Encoding encoding, bool leaveOpen) { }
-
-        public BinaryWriter(Stream output, Text.Encoding encoding) { }
-
-        public BinaryWriter(Stream output) { }
-
-        public virtual Stream BaseStream { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public virtual void Flush() { }
-
-        public virtual long Seek(int offset, SeekOrigin origin) { throw null; }
-
-        public virtual void Write(bool value) { }
-
-        public virtual void Write(byte value) { }
-
-        public virtual void Write(byte[] buffer, int index, int count) { }
-
-        public virtual void Write(byte[] buffer) { }
-
-        public virtual void Write(char ch) { }
-
-        public virtual void Write(char[] chars, int index, int count) { }
-
-        public virtual void Write(char[] chars) { }
-
-        public virtual void Write(decimal value) { }
-
-        public virtual void Write(double value) { }
-
-        public virtual void Write(short value) { }
-
-        public virtual void Write(int value) { }
-
-        public virtual void Write(long value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(sbyte value) { }
-
-        public virtual void Write(float value) { }
-
-        public virtual void Write(string value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(ushort value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(uint value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(ulong value) { }
-
-        protected void Write7BitEncodedInt(int value) { }
-    }
-
-    public sealed partial class BufferedStream : Stream
-    {
-        public BufferedStream(Stream stream, int bufferSize) { }
-
-        public BufferedStream(Stream stream) { }
-
-        public override bool CanRead { get { throw null; } }
-
-        public override bool CanSeek { get { throw null; } }
-
-        public override bool CanWrite { get { throw null; } }
-
-        public override long Length { get { throw null; } }
-
-        public override long Position { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override void Flush() { }
-
-        public override Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override int Read(byte[] array, int offset, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override int ReadByte() { throw null; }
-
-        public override long Seek(long offset, SeekOrigin origin) { throw null; }
-
-        public override void SetLength(long value) { }
-
-        public override void Write(byte[] array, int offset, int count) { }
-
-        public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override void WriteByte(byte value) { }
-    }
-
-    public partial class EndOfStreamException : IOException
-    {
-        public EndOfStreamException() { }
-
-        public EndOfStreamException(string message, Exception innerException) { }
-
-        public EndOfStreamException(string message) { }
-    }
-
-    public sealed partial class InvalidDataException : Exception
-    {
-        public InvalidDataException() { }
-
-        public InvalidDataException(string message, Exception innerException) { }
-
-        public InvalidDataException(string message) { }
-    }
-
-    public partial class MemoryStream : Stream
-    {
-        public MemoryStream() { }
-
-        public MemoryStream(byte[] buffer, bool writable) { }
-
-        public MemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible) { }
-
-        public MemoryStream(byte[] buffer, int index, int count, bool writable) { }
-
-        public MemoryStream(byte[] buffer, int index, int count) { }
-
-        public MemoryStream(byte[] buffer) { }
-
-        public MemoryStream(int capacity) { }
-
-        public override bool CanRead { get { throw null; } }
-
-        public override bool CanSeek { get { throw null; } }
-
-        public override bool CanWrite { get { throw null; } }
-
-        public virtual int Capacity { get { throw null; } set { } }
-
-        public override long Length { get { throw null; } }
-
-        public override long Position { get { throw null; } set { } }
-
-        public override Threading.Tasks.Task CopyToAsync(Stream destination, int bufferSize, Threading.CancellationToken cancellationToken) { throw null; }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override void Flush() { }
-
-        public override Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override int Read(byte[] buffer, int offset, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override int ReadByte() { throw null; }
-
-        public override long Seek(long offset, SeekOrigin loc) { throw null; }
-
-        public override void SetLength(long value) { }
-
-        public virtual byte[] ToArray() { throw null; }
-
-        public virtual bool TryGetBuffer(out ArraySegment<byte> buffer) { throw null; }
-
-        public override void Write(byte[] buffer, int offset, int count) { }
-
-        public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override void WriteByte(byte value) { }
-
-        public virtual void WriteTo(Stream stream) { }
-    }
-
-    public enum SeekOrigin
-    {
-        Begin = 0,
-        Current = 1,
-        End = 2
-    }
-
-    public abstract partial class Stream : IDisposable
-    {
-        public static readonly Stream Null;
-        public abstract bool CanRead { get; }
-        public abstract bool CanSeek { get; }
-
-        public virtual bool CanTimeout { get { throw null; } }
-
-        public abstract bool CanWrite { get; }
-        public abstract long Length { get; }
-        public abstract long Position { get; set; }
-
-        public virtual int ReadTimeout { get { throw null; } set { } }
-
-        public virtual int WriteTimeout { get { throw null; } set { } }
-
-        public void CopyTo(Stream destination, int bufferSize) { }
-
-        public void CopyTo(Stream destination) { }
-
-        public virtual Threading.Tasks.Task CopyToAsync(Stream destination, int bufferSize, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task CopyToAsync(Stream destination, int bufferSize) { throw null; }
-
-        public Threading.Tasks.Task CopyToAsync(Stream destination) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract void Flush();
-        public Threading.Tasks.Task FlushAsync() { throw null; }
-
-        public virtual Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken) { throw null; }
-
-        public abstract int Read(byte[] buffer, int offset, int count);
-        public virtual Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count) { throw null; }
-
-        public virtual int ReadByte() { throw null; }
-
-        public abstract long Seek(long offset, SeekOrigin origin);
-        public abstract void SetLength(long value);
-        public abstract void Write(byte[] buffer, int offset, int count);
-        public virtual Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count) { throw null; }
-
-        public virtual void WriteByte(byte value) { }
-    }
-
-    public partial class StreamReader : TextReader
-    {
-        public new static readonly StreamReader Null;
-        public StreamReader(Stream stream, bool detectEncodingFromByteOrderMarks) { }
-
-        public StreamReader(Stream stream, Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen) { }
-
-        public StreamReader(Stream stream, Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) { }
-
-        public StreamReader(Stream stream, Text.Encoding encoding, bool detectEncodingFromByteOrderMarks) { }
-
-        public StreamReader(Stream stream, Text.Encoding encoding) { }
-
-        public StreamReader(Stream stream) { }
-
-        public virtual Stream BaseStream { get { throw null; } }
-
-        public virtual Text.Encoding CurrentEncoding { get { throw null; } }
-
-        public bool EndOfStream { get { throw null; } }
-
-        public void DiscardBufferedData() { }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override int Peek() { throw null; }
-
-        public override int Read() { throw null; }
-
-        public override int Read(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override int ReadBlock(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadBlockAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override string ReadLine() { throw null; }
-
-        public override Threading.Tasks.Task<string> ReadLineAsync() { throw null; }
-
-        public override string ReadToEnd() { throw null; }
-
-        public override Threading.Tasks.Task<string> ReadToEndAsync() { throw null; }
-    }
-
-    public partial class StreamWriter : TextWriter
-    {
-        public new static readonly StreamWriter Null;
-        public StreamWriter(Stream stream, Text.Encoding encoding, int bufferSize, bool leaveOpen) { }
-
-        public StreamWriter(Stream stream, Text.Encoding encoding, int bufferSize) { }
-
-        public StreamWriter(Stream stream, Text.Encoding encoding) { }
-
-        public StreamWriter(Stream stream) { }
-
-        public virtual bool AutoFlush { get { throw null; } set { } }
-
-        public virtual Stream BaseStream { get { throw null; } }
-
-        public override Text.Encoding Encoding { get { throw null; } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override void Flush() { }
-
-        public override Threading.Tasks.Task FlushAsync() { throw null; }
-
-        public override void Write(char value) { }
-
-        public override void Write(char[] buffer, int index, int count) { }
-
-        public override void Write(char[] buffer) { }
-
-        public override void Write(string value) { }
-
-        public override Threading.Tasks.Task WriteAsync(char value) { throw null; }
-
-        public override Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task WriteAsync(string value) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync() { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(char value) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(string value) { throw null; }
-    }
-
-    public partial class StringReader : TextReader
-    {
-        public StringReader(string s) { }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override int Peek() { throw null; }
-
-        public override int Read() { throw null; }
-
-        public override int Read(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadBlockAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override string ReadLine() { throw null; }
-
-        public override Threading.Tasks.Task<string> ReadLineAsync() { throw null; }
-
-        public override string ReadToEnd() { throw null; }
-
-        public override Threading.Tasks.Task<string> ReadToEndAsync() { throw null; }
-    }
-
-    public partial class StringWriter : TextWriter
-    {
-        public StringWriter() { }
-
-        public StringWriter(IFormatProvider formatProvider) { }
-
-        public StringWriter(Text.StringBuilder sb, IFormatProvider formatProvider) { }
-
-        public StringWriter(Text.StringBuilder sb) { }
-
-        public override Text.Encoding Encoding { get { throw null; } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override Threading.Tasks.Task FlushAsync() { throw null; }
-
-        public virtual Text.StringBuilder GetStringBuilder() { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public override void Write(char value) { }
-
-        public override void Write(char[] buffer, int index, int count) { }
-
-        public override void Write(string value) { }
-
-        public override Threading.Tasks.Task WriteAsync(char value) { throw null; }
-
-        public override Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task WriteAsync(string value) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(char value) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(char[] buffer, int index, int count) { throw null; }
-
-        public override Threading.Tasks.Task WriteLineAsync(string value) { throw null; }
-    }
-
-    public abstract partial class TextReader : IDisposable
-    {
-        public static readonly TextReader Null;
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public virtual int Peek() { throw null; }
-
-        public virtual int Read() { throw null; }
-
-        public virtual int Read(char[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count) { throw null; }
-
-        public virtual int ReadBlock(char[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadBlockAsync(char[] buffer, int index, int count) { throw null; }
-
-        public virtual string ReadLine() { throw null; }
-
-        public virtual Threading.Tasks.Task<string> ReadLineAsync() { throw null; }
-
-        public virtual string ReadToEnd() { throw null; }
-
-        public virtual Threading.Tasks.Task<string> ReadToEndAsync() { throw null; }
-    }
-
-    public abstract partial class TextWriter : IDisposable
-    {
-        protected char[] CoreNewLine;
-        public static readonly TextWriter Null;
-        protected TextWriter() { }
-
-        protected TextWriter(IFormatProvider formatProvider) { }
-
-        public abstract Text.Encoding Encoding { get; }
-
-        public virtual IFormatProvider FormatProvider { get { throw null; } }
-
-        public virtual string NewLine { get { throw null; } set { } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public virtual void Flush() { }
-
-        public virtual Threading.Tasks.Task FlushAsync() { throw null; }
-
-        public virtual void Write(bool value) { }
-
-        public abstract void Write(char value);
-        public virtual void Write(char[] buffer, int index, int count) { }
-
-        public virtual void Write(char[] buffer) { }
-
-        public virtual void Write(decimal value) { }
-
-        public virtual void Write(double value) { }
-
-        public virtual void Write(int value) { }
-
-        public virtual void Write(long value) { }
-
-        public virtual void Write(object value) { }
-
-        public virtual void Write(float value) { }
-
-        public virtual void Write(string format, object arg0, object arg1, object arg2) { }
-
-        public virtual void Write(string format, object arg0, object arg1) { }
-
-        public virtual void Write(string format, object arg0) { }
-
-        public virtual void Write(string format, params object[] arg) { }
-
-        public virtual void Write(string value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(uint value) { }
-
-        [CLSCompliant(false)]
-        public virtual void Write(ulong value) { }
-
-        public virtual Threading.Tasks.Task WriteAsync(char value) { throw null; }
-
-        public virtual Threading.Tasks.Task WriteAsync(char[] buffer, int index, int count) { throw null; }
-
-        public Threading.Tasks.Task WriteAsync(char[] buffer) { throw null; }
-
-        public virtual Threading.Tasks.Task WriteAsync(string value) { throw null; }
-
-        public virtual void WriteLine() { }
-
-        public virtual void WriteLine(bool value) { }
-
-        public virtual void WriteLine(char value) { }
-
-        public virtual void WriteLine(char[] buffer, int index, int count) { }
-
-        public virtual void WriteLine(char[] buffer) { }
-
-        public virtual void WriteLine(decimal value) { }
-
-        public virtual void WriteLine(double value) { }
-
-        public virtual void WriteLine(int value) { }
-
-        public virtual void WriteLine(long value) { }
-
-        public virtual void WriteLine(object value) { }
-
-        public virtual void WriteLine(float value) { }
-
-        public virtual void WriteLine(string format, object arg0, object arg1, object arg2) { }
-
-        public virtual void WriteLine(string format, object arg0, object arg1) { }
-
-        public virtual void WriteLine(string format, object arg0) { }
-
-        public virtual void WriteLine(string format, params object[] arg) { }
-
-        public virtual void WriteLine(string value) { }
-
-        [CLSCompliant(false)]
-        public virtual void WriteLine(uint value) { }
-
-        [CLSCompliant(false)]
-        public virtual void WriteLine(ulong value) { }
-
-        public virtual Threading.Tasks.Task WriteLineAsync() { throw null; }
-
-        public virtual Threading.Tasks.Task WriteLineAsync(char value) { throw null; }
-
-        public virtual Threading.Tasks.Task WriteLineAsync(char[] buffer, int index, int count) { throw null; }
-
-        public Threading.Tasks.Task WriteLineAsync(char[] buffer) { throw null; }
-
-        public virtual Threading.Tasks.Task WriteLineAsync(string value) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.io/4.3.0/system.io.nuspec b/src/referencePackages/src/system.io/4.3.0/system.io.nuspec
deleted file mode 100644
index 11216e51..00000000
--- a/src/referencePackages/src/system.io/4.3.0/system.io.nuspec
+++ /dev/null
@@ -1,53 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.IO</id>
-    <version>4.3.0</version>
-    <title>System.IO</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides base input and output (I/O) types, including System.IO.Stream, System.IO.StreamReader and System.IO.StreamWriter, that allow reading and writing to data streams
-
-Commonly Used Types:
-System.IO.Stream
-System.IO.EndOfStreamException
-System.IO.MemoryStream
-System.IO.StreamReader
-System.IO.StreamWriter
-System.IO.StringWriter
-System.IO.TextWriter
-System.IO.TextReader
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.5">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.linq.expressions/4.3.0/System.Linq.Expressions.4.3.0.csproj b/src/referencePackages/src/system.linq.expressions/4.3.0/System.Linq.Expressions.4.3.0.csproj
deleted file mode 100644
index 30e5007d..00000000
--- a/src/referencePackages/src/system.linq.expressions/4.3.0/System.Linq.Expressions.4.3.0.csproj
+++ /dev/null
@@ -1,38 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3;netstandard1.6</TargetFrameworks>
-    <AssemblyName>System.Linq.Expressions</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.6'">
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
-    <PackageReference Include="System.Globalization" Version="4.3.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Linq" Version="4.3.0" />
-    <PackageReference Include="System.ObjectModel" Version="4.3.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Emit" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Emit.ILGeneration" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Emit.Lightweight" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.TypeExtensions" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Threading" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.linq.expressions/4.3.0/ref/netstandard1.0/System.Linq.Expressions.cs b/src/referencePackages/src/system.linq.expressions/4.3.0/ref/netstandard1.0/System.Linq.Expressions.cs
deleted file mode 100644
index ef805f81..00000000
--- a/src/referencePackages/src/system.linq.expressions/4.3.0/ref/netstandard1.0/System.Linq.Expressions.cs
+++ /dev/null
@@ -1,1415 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Linq.Expressions.dll")]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyDescription("System.Linq.Expressions.dll")]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Reflection.AssemblyTitle("System.Linq.Expressions.dll")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Linq
-{
-    public partial interface IOrderedQueryable : IQueryable, Collections.IEnumerable
-    {
-    }
-
-    public partial interface IOrderedQueryable<out T> : IOrderedQueryable, IQueryable<T>, Collections.Generic.IEnumerable<T>, IQueryable, Collections.IEnumerable
-    {
-    }
-
-    public partial interface IQueryable : Collections.IEnumerable
-    {
-        Type ElementType { get; }
-
-        Expressions.Expression Expression { get; }
-
-        IQueryProvider Provider { get; }
-    }
-
-    public partial interface IQueryable<out T> : Collections.Generic.IEnumerable<T>, IQueryable, Collections.IEnumerable
-    {
-    }
-
-    public partial interface IQueryProvider
-    {
-        IQueryable CreateQuery(Expressions.Expression expression);
-        IQueryable<TElement> CreateQuery<TElement>(Expressions.Expression expression);
-        object Execute(Expressions.Expression expression);
-        TResult Execute<TResult>(Expressions.Expression expression);
-    }
-}
-
-namespace System.Linq.Expressions
-{
-    public partial class BinaryExpression : Expression
-    {
-        internal BinaryExpression() { }
-
-        public override bool CanReduce { get { throw null; } }
-
-        public LambdaExpression Conversion { get { throw null; } }
-
-        public bool IsLifted { get { throw null; } }
-
-        public bool IsLiftedToNull { get { throw null; } }
-
-        public Expression Left { get { throw null; } }
-
-        public Reflection.MethodInfo Method { get { throw null; } }
-
-        public Expression Right { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public override Expression Reduce() { throw null; }
-
-        public BinaryExpression Update(Expression left, LambdaExpression conversion, Expression right) { throw null; }
-    }
-
-    public partial class BlockExpression : Expression
-    {
-        internal BlockExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Expressions { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression Result { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ParameterExpression> Variables { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public BlockExpression Update(Collections.Generic.IEnumerable<ParameterExpression> variables, Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-    }
-
-    public sealed partial class CatchBlock
-    {
-        internal CatchBlock() { }
-
-        public Expression Body { get { throw null; } }
-
-        public Expression Filter { get { throw null; } }
-
-        public Type Test { get { throw null; } }
-
-        public ParameterExpression Variable { get { throw null; } }
-
-        public override string ToString() { throw null; }
-
-        public CatchBlock Update(ParameterExpression variable, Expression filter, Expression body) { throw null; }
-    }
-
-    public partial class ConditionalExpression : Expression
-    {
-        internal ConditionalExpression() { }
-
-        public Expression IfFalse { get { throw null; } }
-
-        public Expression IfTrue { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression Test { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public ConditionalExpression Update(Expression test, Expression ifTrue, Expression ifFalse) { throw null; }
-    }
-
-    public partial class ConstantExpression : Expression
-    {
-        internal ConstantExpression() { }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        public object Value { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-    }
-
-    public partial class DebugInfoExpression : Expression
-    {
-        internal DebugInfoExpression() { }
-
-        public SymbolDocumentInfo Document { get { throw null; } }
-
-        public virtual int EndColumn { get { throw null; } }
-
-        public virtual int EndLine { get { throw null; } }
-
-        public virtual bool IsClear { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public virtual int StartColumn { get { throw null; } }
-
-        public virtual int StartLine { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-    }
-
-    public sealed partial class DefaultExpression : Expression
-    {
-        internal DefaultExpression() { }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-    }
-
-    public sealed partial class ElementInit
-    {
-        internal ElementInit() { }
-
-        public Reflection.MethodInfo AddMethod { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        public override string ToString() { throw null; }
-
-        public ElementInit Update(Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public abstract partial class Expression
-    {
-        public virtual bool CanReduce { get { throw null; } }
-
-        public virtual ExpressionType NodeType { get { throw null; } }
-
-        public virtual Type Type { get { throw null; } }
-
-        protected internal virtual Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public static BinaryExpression Add(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Add(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression AddAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression AddAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression AddAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression AddAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression AddAssignChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression AddAssignChecked(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression AddChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression AddChecked(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression And(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression And(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression AndAlso(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression AndAlso(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression AndAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression AndAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression AndAssign(Expression left, Expression right) { throw null; }
-
-        public static IndexExpression ArrayAccess(Expression array, Collections.Generic.IEnumerable<Expression> indexes) { throw null; }
-
-        public static IndexExpression ArrayAccess(Expression array, params Expression[] indexes) { throw null; }
-
-        public static MethodCallExpression ArrayIndex(Expression array, Collections.Generic.IEnumerable<Expression> indexes) { throw null; }
-
-        public static BinaryExpression ArrayIndex(Expression array, Expression index) { throw null; }
-
-        public static MethodCallExpression ArrayIndex(Expression array, params Expression[] indexes) { throw null; }
-
-        public static UnaryExpression ArrayLength(Expression array) { throw null; }
-
-        public static BinaryExpression Assign(Expression left, Expression right) { throw null; }
-
-        public static MemberAssignment Bind(Reflection.MemberInfo member, Expression expression) { throw null; }
-
-        public static MemberAssignment Bind(Reflection.MethodInfo propertyAccessor, Expression expression) { throw null; }
-
-        public static BlockExpression Block(Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-
-        public static BlockExpression Block(Collections.Generic.IEnumerable<ParameterExpression> variables, Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-
-        public static BlockExpression Block(Collections.Generic.IEnumerable<ParameterExpression> variables, params Expression[] expressions) { throw null; }
-
-        public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4) { throw null; }
-
-        public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3) { throw null; }
-
-        public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2) { throw null; }
-
-        public static BlockExpression Block(Expression arg0, Expression arg1) { throw null; }
-
-        public static BlockExpression Block(params Expression[] expressions) { throw null; }
-
-        public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-
-        public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<ParameterExpression> variables, Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-
-        public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<ParameterExpression> variables, params Expression[] expressions) { throw null; }
-
-        public static BlockExpression Block(Type type, params Expression[] expressions) { throw null; }
-
-        public static GotoExpression Break(LabelTarget target, Expression value, Type type) { throw null; }
-
-        public static GotoExpression Break(LabelTarget target, Expression value) { throw null; }
-
-        public static GotoExpression Break(LabelTarget target, Type type) { throw null; }
-
-        public static GotoExpression Break(LabelTarget target) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Expression arg0, Expression arg1) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, params Expression[] arguments) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, string methodName, Type[] typeArguments, params Expression[] arguments) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, params Expression[] arguments) { throw null; }
-
-        public static MethodCallExpression Call(Type type, string methodName, Type[] typeArguments, params Expression[] arguments) { throw null; }
-
-        public static CatchBlock Catch(ParameterExpression variable, Expression body, Expression filter) { throw null; }
-
-        public static CatchBlock Catch(ParameterExpression variable, Expression body) { throw null; }
-
-        public static CatchBlock Catch(Type type, Expression body, Expression filter) { throw null; }
-
-        public static CatchBlock Catch(Type type, Expression body) { throw null; }
-
-        public static DebugInfoExpression ClearDebugInfo(SymbolDocumentInfo document) { throw null; }
-
-        public static BinaryExpression Coalesce(Expression left, Expression right, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression Coalesce(Expression left, Expression right) { throw null; }
-
-        public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse, Type type) { throw null; }
-
-        public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse) { throw null; }
-
-        public static ConstantExpression Constant(object value, Type type) { throw null; }
-
-        public static ConstantExpression Constant(object value) { throw null; }
-
-        public static GotoExpression Continue(LabelTarget target, Type type) { throw null; }
-
-        public static GotoExpression Continue(LabelTarget target) { throw null; }
-
-        public static UnaryExpression Convert(Expression expression, Type type, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression Convert(Expression expression, Type type) { throw null; }
-
-        public static UnaryExpression ConvertChecked(Expression expression, Type type, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression ConvertChecked(Expression expression, Type type) { throw null; }
-
-        public static DebugInfoExpression DebugInfo(SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn) { throw null; }
-
-        public static UnaryExpression Decrement(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression Decrement(Expression expression) { throw null; }
-
-        public static DefaultExpression Default(Type type) { throw null; }
-
-        public static BinaryExpression Divide(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Divide(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression DivideAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression DivideAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression DivideAssign(Expression left, Expression right) { throw null; }
-
-        public static ElementInit ElementInit(Reflection.MethodInfo addMethod, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static ElementInit ElementInit(Reflection.MethodInfo addMethod, params Expression[] arguments) { throw null; }
-
-        public static DefaultExpression Empty() { throw null; }
-
-        public static BinaryExpression Equal(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Equal(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression ExclusiveOr(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression ExclusiveOr(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right) { throw null; }
-
-        public static MemberExpression Field(Expression expression, Reflection.FieldInfo field) { throw null; }
-
-        public static MemberExpression Field(Expression expression, string fieldName) { throw null; }
-
-        public static MemberExpression Field(Expression expression, Type type, string fieldName) { throw null; }
-
-        public static Type GetActionType(params Type[] typeArgs) { throw null; }
-
-        public static Type GetDelegateType(params Type[] typeArgs) { throw null; }
-
-        public static Type GetFuncType(params Type[] typeArgs) { throw null; }
-
-        public static GotoExpression Goto(LabelTarget target, Expression value, Type type) { throw null; }
-
-        public static GotoExpression Goto(LabelTarget target, Expression value) { throw null; }
-
-        public static GotoExpression Goto(LabelTarget target, Type type) { throw null; }
-
-        public static GotoExpression Goto(LabelTarget target) { throw null; }
-
-        public static BinaryExpression GreaterThan(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression GreaterThan(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right) { throw null; }
-
-        public static ConditionalExpression IfThen(Expression test, Expression ifTrue) { throw null; }
-
-        public static ConditionalExpression IfThenElse(Expression test, Expression ifTrue, Expression ifFalse) { throw null; }
-
-        public static UnaryExpression Increment(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression Increment(Expression expression) { throw null; }
-
-        public static InvocationExpression Invoke(Expression expression, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static InvocationExpression Invoke(Expression expression, params Expression[] arguments) { throw null; }
-
-        public static UnaryExpression IsFalse(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression IsFalse(Expression expression) { throw null; }
-
-        public static UnaryExpression IsTrue(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression IsTrue(Expression expression) { throw null; }
-
-        public static LabelTarget Label() { throw null; }
-
-        public static LabelExpression Label(LabelTarget target, Expression defaultValue) { throw null; }
-
-        public static LabelExpression Label(LabelTarget target) { throw null; }
-
-        public static LabelTarget Label(string name) { throw null; }
-
-        public static LabelTarget Label(Type type, string name) { throw null; }
-
-        public static LabelTarget Label(Type type) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, bool tailCall, params ParameterExpression[] parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, params ParameterExpression[] parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, params ParameterExpression[] parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, params ParameterExpression[] parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, params ParameterExpression[] parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, params ParameterExpression[] parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static BinaryExpression LeftShift(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression LeftShift(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression LeftShiftAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression LeftShiftAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression LeftShiftAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression LessThan(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression LessThan(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression LessThanOrEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression LessThanOrEqual(Expression left, Expression right) { throw null; }
-
-        public static MemberListBinding ListBind(Reflection.MemberInfo member, Collections.Generic.IEnumerable<ElementInit> initializers) { throw null; }
-
-        public static MemberListBinding ListBind(Reflection.MemberInfo member, params ElementInit[] initializers) { throw null; }
-
-        public static MemberListBinding ListBind(Reflection.MethodInfo propertyAccessor, Collections.Generic.IEnumerable<ElementInit> initializers) { throw null; }
-
-        public static MemberListBinding ListBind(Reflection.MethodInfo propertyAccessor, params ElementInit[] initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, Collections.Generic.IEnumerable<ElementInit> initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, Collections.Generic.IEnumerable<Expression> initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, params ElementInit[] initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, params Expression[] initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, Reflection.MethodInfo addMethod, Collections.Generic.IEnumerable<Expression> initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, Reflection.MethodInfo addMethod, params Expression[] initializers) { throw null; }
-
-        public static LoopExpression Loop(Expression body, LabelTarget @break, LabelTarget @continue) { throw null; }
-
-        public static LoopExpression Loop(Expression body, LabelTarget @break) { throw null; }
-
-        public static LoopExpression Loop(Expression body) { throw null; }
-
-        public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right) { throw null; }
-
-        public static CatchBlock MakeCatchBlock(Type type, ParameterExpression variable, Expression body, Expression filter) { throw null; }
-
-        public static GotoExpression MakeGoto(GotoExpressionKind kind, LabelTarget target, Expression value, Type type) { throw null; }
-
-        public static IndexExpression MakeIndex(Expression instance, Reflection.PropertyInfo indexer, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static MemberExpression MakeMemberAccess(Expression expression, Reflection.MemberInfo member) { throw null; }
-
-        public static TryExpression MakeTry(Type type, Expression body, Expression @finally, Expression fault, Collections.Generic.IEnumerable<CatchBlock> handlers) { throw null; }
-
-        public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type) { throw null; }
-
-        public static MemberMemberBinding MemberBind(Reflection.MemberInfo member, Collections.Generic.IEnumerable<MemberBinding> bindings) { throw null; }
-
-        public static MemberMemberBinding MemberBind(Reflection.MemberInfo member, params MemberBinding[] bindings) { throw null; }
-
-        public static MemberMemberBinding MemberBind(Reflection.MethodInfo propertyAccessor, Collections.Generic.IEnumerable<MemberBinding> bindings) { throw null; }
-
-        public static MemberMemberBinding MemberBind(Reflection.MethodInfo propertyAccessor, params MemberBinding[] bindings) { throw null; }
-
-        public static MemberInitExpression MemberInit(NewExpression newExpression, Collections.Generic.IEnumerable<MemberBinding> bindings) { throw null; }
-
-        public static MemberInitExpression MemberInit(NewExpression newExpression, params MemberBinding[] bindings) { throw null; }
-
-        public static BinaryExpression Modulo(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Modulo(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression ModuloAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression ModuloAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression ModuloAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression Multiply(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Multiply(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression MultiplyAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression MultiplyAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression MultiplyAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression MultiplyChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression MultiplyChecked(Expression left, Expression right) { throw null; }
-
-        public static UnaryExpression Negate(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression Negate(Expression expression) { throw null; }
-
-        public static UnaryExpression NegateChecked(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression NegateChecked(Expression expression) { throw null; }
-
-        public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments, Collections.Generic.IEnumerable<Reflection.MemberInfo> members) { throw null; }
-
-        public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments, params Reflection.MemberInfo[] members) { throw null; }
-
-        public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static NewExpression New(Reflection.ConstructorInfo constructor, params Expression[] arguments) { throw null; }
-
-        public static NewExpression New(Reflection.ConstructorInfo constructor) { throw null; }
-
-        public static NewExpression New(Type type) { throw null; }
-
-        public static NewArrayExpression NewArrayBounds(Type type, Collections.Generic.IEnumerable<Expression> bounds) { throw null; }
-
-        public static NewArrayExpression NewArrayBounds(Type type, params Expression[] bounds) { throw null; }
-
-        public static NewArrayExpression NewArrayInit(Type type, Collections.Generic.IEnumerable<Expression> initializers) { throw null; }
-
-        public static NewArrayExpression NewArrayInit(Type type, params Expression[] initializers) { throw null; }
-
-        public static UnaryExpression Not(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression Not(Expression expression) { throw null; }
-
-        public static BinaryExpression NotEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression NotEqual(Expression left, Expression right) { throw null; }
-
-        public static UnaryExpression OnesComplement(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression OnesComplement(Expression expression) { throw null; }
-
-        public static BinaryExpression Or(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Or(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression OrAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression OrAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression OrAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression OrElse(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression OrElse(Expression left, Expression right) { throw null; }
-
-        public static ParameterExpression Parameter(Type type, string name) { throw null; }
-
-        public static ParameterExpression Parameter(Type type) { throw null; }
-
-        public static UnaryExpression PostDecrementAssign(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression PostDecrementAssign(Expression expression) { throw null; }
-
-        public static UnaryExpression PostIncrementAssign(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression PostIncrementAssign(Expression expression) { throw null; }
-
-        public static BinaryExpression Power(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Power(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression PowerAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression PowerAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression PowerAssign(Expression left, Expression right) { throw null; }
-
-        public static UnaryExpression PreDecrementAssign(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression PreDecrementAssign(Expression expression) { throw null; }
-
-        public static UnaryExpression PreIncrementAssign(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression PreIncrementAssign(Expression expression) { throw null; }
-
-        public static MemberExpression Property(Expression expression, Reflection.MethodInfo propertyAccessor) { throw null; }
-
-        public static IndexExpression Property(Expression instance, Reflection.PropertyInfo indexer, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static IndexExpression Property(Expression instance, Reflection.PropertyInfo indexer, params Expression[] arguments) { throw null; }
-
-        public static MemberExpression Property(Expression expression, Reflection.PropertyInfo property) { throw null; }
-
-        public static IndexExpression Property(Expression instance, string propertyName, params Expression[] arguments) { throw null; }
-
-        public static MemberExpression Property(Expression expression, string propertyName) { throw null; }
-
-        public static MemberExpression Property(Expression expression, Type type, string propertyName) { throw null; }
-
-        public static MemberExpression PropertyOrField(Expression expression, string propertyOrFieldName) { throw null; }
-
-        public static UnaryExpression Quote(Expression expression) { throw null; }
-
-        public virtual Expression Reduce() { throw null; }
-
-        public Expression ReduceAndCheck() { throw null; }
-
-        public Expression ReduceExtensions() { throw null; }
-
-        public static BinaryExpression ReferenceEqual(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression ReferenceNotEqual(Expression left, Expression right) { throw null; }
-
-        public static UnaryExpression Rethrow() { throw null; }
-
-        public static UnaryExpression Rethrow(Type type) { throw null; }
-
-        public static GotoExpression Return(LabelTarget target, Expression value, Type type) { throw null; }
-
-        public static GotoExpression Return(LabelTarget target, Expression value) { throw null; }
-
-        public static GotoExpression Return(LabelTarget target, Type type) { throw null; }
-
-        public static GotoExpression Return(LabelTarget target) { throw null; }
-
-        public static BinaryExpression RightShift(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression RightShift(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression RightShiftAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression RightShiftAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression RightShiftAssign(Expression left, Expression right) { throw null; }
-
-        public static RuntimeVariablesExpression RuntimeVariables(Collections.Generic.IEnumerable<ParameterExpression> variables) { throw null; }
-
-        public static RuntimeVariablesExpression RuntimeVariables(params ParameterExpression[] variables) { throw null; }
-
-        public static BinaryExpression Subtract(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Subtract(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression SubtractAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression SubtractAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression SubtractAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression SubtractAssignChecked(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression SubtractChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression SubtractChecked(Expression left, Expression right) { throw null; }
-
-        public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, params SwitchCase[] cases) { throw null; }
-
-        public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, Collections.Generic.IEnumerable<SwitchCase> cases) { throw null; }
-
-        public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, params SwitchCase[] cases) { throw null; }
-
-        public static SwitchExpression Switch(Expression switchValue, params SwitchCase[] cases) { throw null; }
-
-        public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, Collections.Generic.IEnumerable<SwitchCase> cases) { throw null; }
-
-        public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, params SwitchCase[] cases) { throw null; }
-
-        public static SwitchCase SwitchCase(Expression body, Collections.Generic.IEnumerable<Expression> testValues) { throw null; }
-
-        public static SwitchCase SwitchCase(Expression body, params Expression[] testValues) { throw null; }
-
-        public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor, Guid documentType) { throw null; }
-
-        public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor) { throw null; }
-
-        public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language) { throw null; }
-
-        public static SymbolDocumentInfo SymbolDocument(string fileName) { throw null; }
-
-        public static UnaryExpression Throw(Expression value, Type type) { throw null; }
-
-        public static UnaryExpression Throw(Expression value) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static TryExpression TryCatch(Expression body, params CatchBlock[] handlers) { throw null; }
-
-        public static TryExpression TryCatchFinally(Expression body, Expression @finally, params CatchBlock[] handlers) { throw null; }
-
-        public static TryExpression TryFault(Expression body, Expression fault) { throw null; }
-
-        public static TryExpression TryFinally(Expression body, Expression @finally) { throw null; }
-
-        public static bool TryGetActionType(Type[] typeArgs, out Type actionType) { throw null; }
-
-        public static bool TryGetFuncType(Type[] typeArgs, out Type funcType) { throw null; }
-
-        public static UnaryExpression TypeAs(Expression expression, Type type) { throw null; }
-
-        public static TypeBinaryExpression TypeEqual(Expression expression, Type type) { throw null; }
-
-        public static TypeBinaryExpression TypeIs(Expression expression, Type type) { throw null; }
-
-        public static UnaryExpression UnaryPlus(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression UnaryPlus(Expression expression) { throw null; }
-
-        public static UnaryExpression Unbox(Expression expression, Type type) { throw null; }
-
-        public static ParameterExpression Variable(Type type, string name) { throw null; }
-
-        public static ParameterExpression Variable(Type type) { throw null; }
-
-        protected internal virtual Expression VisitChildren(ExpressionVisitor visitor) { throw null; }
-    }
-
-    public enum ExpressionType
-    {
-        Add = 0,
-        AddChecked = 1,
-        And = 2,
-        AndAlso = 3,
-        ArrayLength = 4,
-        ArrayIndex = 5,
-        Call = 6,
-        Coalesce = 7,
-        Conditional = 8,
-        Constant = 9,
-        Convert = 10,
-        ConvertChecked = 11,
-        Divide = 12,
-        Equal = 13,
-        ExclusiveOr = 14,
-        GreaterThan = 15,
-        GreaterThanOrEqual = 16,
-        Invoke = 17,
-        Lambda = 18,
-        LeftShift = 19,
-        LessThan = 20,
-        LessThanOrEqual = 21,
-        ListInit = 22,
-        MemberAccess = 23,
-        MemberInit = 24,
-        Modulo = 25,
-        Multiply = 26,
-        MultiplyChecked = 27,
-        Negate = 28,
-        UnaryPlus = 29,
-        NegateChecked = 30,
-        New = 31,
-        NewArrayInit = 32,
-        NewArrayBounds = 33,
-        Not = 34,
-        NotEqual = 35,
-        Or = 36,
-        OrElse = 37,
-        Parameter = 38,
-        Power = 39,
-        Quote = 40,
-        RightShift = 41,
-        Subtract = 42,
-        SubtractChecked = 43,
-        TypeAs = 44,
-        TypeIs = 45,
-        Assign = 46,
-        Block = 47,
-        DebugInfo = 48,
-        Decrement = 49,
-        Dynamic = 50,
-        Default = 51,
-        Extension = 52,
-        Goto = 53,
-        Increment = 54,
-        Index = 55,
-        Label = 56,
-        RuntimeVariables = 57,
-        Loop = 58,
-        Switch = 59,
-        Throw = 60,
-        Try = 61,
-        Unbox = 62,
-        AddAssign = 63,
-        AndAssign = 64,
-        DivideAssign = 65,
-        ExclusiveOrAssign = 66,
-        LeftShiftAssign = 67,
-        ModuloAssign = 68,
-        MultiplyAssign = 69,
-        OrAssign = 70,
-        PowerAssign = 71,
-        RightShiftAssign = 72,
-        SubtractAssign = 73,
-        AddAssignChecked = 74,
-        MultiplyAssignChecked = 75,
-        SubtractAssignChecked = 76,
-        PreIncrementAssign = 77,
-        PreDecrementAssign = 78,
-        PostIncrementAssign = 79,
-        PostDecrementAssign = 80,
-        TypeEqual = 81,
-        OnesComplement = 82,
-        IsTrue = 83,
-        IsFalse = 84
-    }
-
-    public abstract partial class ExpressionVisitor
-    {
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Visit(Collections.ObjectModel.ReadOnlyCollection<Expression> nodes) { throw null; }
-
-        public virtual Expression Visit(Expression node) { throw null; }
-
-        public static Collections.ObjectModel.ReadOnlyCollection<T> Visit<T>(Collections.ObjectModel.ReadOnlyCollection<T> nodes, Func<T, T> elementVisitor) { throw null; }
-
-        public T VisitAndConvert<T>(T node, string callerName)
-            where T : Expression { throw null; }
-
-        public Collections.ObjectModel.ReadOnlyCollection<T> VisitAndConvert<T>(Collections.ObjectModel.ReadOnlyCollection<T> nodes, string callerName)
-            where T : Expression { throw null; }
-
-        protected internal virtual Expression VisitBinary(BinaryExpression node) { throw null; }
-
-        protected internal virtual Expression VisitBlock(BlockExpression node) { throw null; }
-
-        protected virtual CatchBlock VisitCatchBlock(CatchBlock node) { throw null; }
-
-        protected internal virtual Expression VisitConditional(ConditionalExpression node) { throw null; }
-
-        protected internal virtual Expression VisitConstant(ConstantExpression node) { throw null; }
-
-        protected internal virtual Expression VisitDebugInfo(DebugInfoExpression node) { throw null; }
-
-        protected internal virtual Expression VisitDefault(DefaultExpression node) { throw null; }
-
-        protected virtual ElementInit VisitElementInit(ElementInit node) { throw null; }
-
-        protected internal virtual Expression VisitExtension(Expression node) { throw null; }
-
-        protected internal virtual Expression VisitGoto(GotoExpression node) { throw null; }
-
-        protected internal virtual Expression VisitIndex(IndexExpression node) { throw null; }
-
-        protected internal virtual Expression VisitInvocation(InvocationExpression node) { throw null; }
-
-        protected internal virtual Expression VisitLabel(LabelExpression node) { throw null; }
-
-        protected virtual LabelTarget VisitLabelTarget(LabelTarget node) { throw null; }
-
-        protected internal virtual Expression VisitLambda<T>(Expression<T> node) { throw null; }
-
-        protected internal virtual Expression VisitListInit(ListInitExpression node) { throw null; }
-
-        protected internal virtual Expression VisitLoop(LoopExpression node) { throw null; }
-
-        protected internal virtual Expression VisitMember(MemberExpression node) { throw null; }
-
-        protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment node) { throw null; }
-
-        protected virtual MemberBinding VisitMemberBinding(MemberBinding node) { throw null; }
-
-        protected internal virtual Expression VisitMemberInit(MemberInitExpression node) { throw null; }
-
-        protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding node) { throw null; }
-
-        protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding node) { throw null; }
-
-        protected internal virtual Expression VisitMethodCall(MethodCallExpression node) { throw null; }
-
-        protected internal virtual Expression VisitNew(NewExpression node) { throw null; }
-
-        protected internal virtual Expression VisitNewArray(NewArrayExpression node) { throw null; }
-
-        protected internal virtual Expression VisitParameter(ParameterExpression node) { throw null; }
-
-        protected internal virtual Expression VisitRuntimeVariables(RuntimeVariablesExpression node) { throw null; }
-
-        protected internal virtual Expression VisitSwitch(SwitchExpression node) { throw null; }
-
-        protected virtual SwitchCase VisitSwitchCase(SwitchCase node) { throw null; }
-
-        protected internal virtual Expression VisitTry(TryExpression node) { throw null; }
-
-        protected internal virtual Expression VisitTypeBinary(TypeBinaryExpression node) { throw null; }
-
-        protected internal virtual Expression VisitUnary(UnaryExpression node) { throw null; }
-    }
-
-    public sealed partial class Expression<TDelegate> : LambdaExpression
-    {
-        internal Expression() { }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public new TDelegate Compile() { throw null; }
-
-        public Expression<TDelegate> Update(Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-    }
-
-    public sealed partial class GotoExpression : Expression
-    {
-        internal GotoExpression() { }
-
-        public GotoExpressionKind Kind { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public LabelTarget Target { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        public Expression Value { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public GotoExpression Update(LabelTarget target, Expression value) { throw null; }
-    }
-
-    public enum GotoExpressionKind
-    {
-        Goto = 0,
-        Return = 1,
-        Break = 2,
-        Continue = 3
-    }
-
-    public sealed partial class IndexExpression : Expression
-    {
-        internal IndexExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        public Reflection.PropertyInfo Indexer { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression Object { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public IndexExpression Update(Expression @object, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public sealed partial class InvocationExpression : Expression
-    {
-        internal InvocationExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        public Expression Expression { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public InvocationExpression Update(Expression expression, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public sealed partial class LabelExpression : Expression
-    {
-        internal LabelExpression() { }
-
-        public Expression DefaultValue { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public LabelTarget Target { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public LabelExpression Update(LabelTarget target, Expression defaultValue) { throw null; }
-    }
-
-    public sealed partial class LabelTarget
-    {
-        internal LabelTarget() { }
-
-        public string Name { get { throw null; } }
-
-        public Type Type { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public abstract partial class LambdaExpression : Expression
-    {
-        internal LambdaExpression() { }
-
-        public Expression Body { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ParameterExpression> Parameters { get { throw null; } }
-
-        public Type ReturnType { get { throw null; } }
-
-        public bool TailCall { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        public Delegate Compile() { throw null; }
-    }
-
-    public sealed partial class ListInitExpression : Expression
-    {
-        internal ListInitExpression() { }
-
-        public override bool CanReduce { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ElementInit> Initializers { get { throw null; } }
-
-        public NewExpression NewExpression { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public override Expression Reduce() { throw null; }
-
-        public ListInitExpression Update(NewExpression newExpression, Collections.Generic.IEnumerable<ElementInit> initializers) { throw null; }
-    }
-
-    public sealed partial class LoopExpression : Expression
-    {
-        internal LoopExpression() { }
-
-        public Expression Body { get { throw null; } }
-
-        public LabelTarget BreakLabel { get { throw null; } }
-
-        public LabelTarget ContinueLabel { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public LoopExpression Update(LabelTarget breakLabel, LabelTarget continueLabel, Expression body) { throw null; }
-    }
-
-    public sealed partial class MemberAssignment : MemberBinding
-    {
-        internal MemberAssignment() { }
-
-        public Expression Expression { get { throw null; } }
-
-        public MemberAssignment Update(Expression expression) { throw null; }
-    }
-
-    public abstract partial class MemberBinding
-    {
-        internal MemberBinding() { }
-
-        public MemberBindingType BindingType { get { throw null; } }
-
-        public Reflection.MemberInfo Member { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum MemberBindingType
-    {
-        Assignment = 0,
-        MemberBinding = 1,
-        ListBinding = 2
-    }
-
-    public partial class MemberExpression : Expression
-    {
-        internal MemberExpression() { }
-
-        public Expression Expression { get { throw null; } }
-
-        public Reflection.MemberInfo Member { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public MemberExpression Update(Expression expression) { throw null; }
-    }
-
-    public sealed partial class MemberInitExpression : Expression
-    {
-        internal MemberInitExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<MemberBinding> Bindings { get { throw null; } }
-
-        public override bool CanReduce { get { throw null; } }
-
-        public NewExpression NewExpression { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public override Expression Reduce() { throw null; }
-
-        public MemberInitExpression Update(NewExpression newExpression, Collections.Generic.IEnumerable<MemberBinding> bindings) { throw null; }
-    }
-
-    public sealed partial class MemberListBinding : MemberBinding
-    {
-        internal MemberListBinding() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ElementInit> Initializers { get { throw null; } }
-
-        public MemberListBinding Update(Collections.Generic.IEnumerable<ElementInit> initializers) { throw null; }
-    }
-
-    public sealed partial class MemberMemberBinding : MemberBinding
-    {
-        internal MemberMemberBinding() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<MemberBinding> Bindings { get { throw null; } }
-
-        public MemberMemberBinding Update(Collections.Generic.IEnumerable<MemberBinding> bindings) { throw null; }
-    }
-
-    public partial class MethodCallExpression : Expression
-    {
-        internal MethodCallExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        public Reflection.MethodInfo Method { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression Object { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public MethodCallExpression Update(Expression @object, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public partial class NewArrayExpression : Expression
-    {
-        internal NewArrayExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Expressions { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public NewArrayExpression Update(Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-    }
-
-    public partial class NewExpression : Expression
-    {
-        internal NewExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        public Reflection.ConstructorInfo Constructor { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Reflection.MemberInfo> Members { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public NewExpression Update(Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public partial class ParameterExpression : Expression
-    {
-        internal ParameterExpression() { }
-
-        public bool IsByRef { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-    }
-
-    public sealed partial class RuntimeVariablesExpression : Expression
-    {
-        internal RuntimeVariablesExpression() { }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ParameterExpression> Variables { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public RuntimeVariablesExpression Update(Collections.Generic.IEnumerable<ParameterExpression> variables) { throw null; }
-    }
-
-    public sealed partial class SwitchCase
-    {
-        internal SwitchCase() { }
-
-        public Expression Body { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> TestValues { get { throw null; } }
-
-        public override string ToString() { throw null; }
-
-        public SwitchCase Update(Collections.Generic.IEnumerable<Expression> testValues, Expression body) { throw null; }
-    }
-
-    public sealed partial class SwitchExpression : Expression
-    {
-        internal SwitchExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<SwitchCase> Cases { get { throw null; } }
-
-        public Reflection.MethodInfo Comparison { get { throw null; } }
-
-        public Expression DefaultBody { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression SwitchValue { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public SwitchExpression Update(Expression switchValue, Collections.Generic.IEnumerable<SwitchCase> cases, Expression defaultBody) { throw null; }
-    }
-
-    public partial class SymbolDocumentInfo
-    {
-        internal SymbolDocumentInfo() { }
-
-        public virtual Guid DocumentType { get { throw null; } }
-
-        public string FileName { get { throw null; } }
-
-        public virtual Guid Language { get { throw null; } }
-
-        public virtual Guid LanguageVendor { get { throw null; } }
-    }
-
-    public sealed partial class TryExpression : Expression
-    {
-        internal TryExpression() { }
-
-        public Expression Body { get { throw null; } }
-
-        public Expression Fault { get { throw null; } }
-
-        public Expression Finally { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<CatchBlock> Handlers { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public TryExpression Update(Expression body, Collections.Generic.IEnumerable<CatchBlock> handlers, Expression @finally, Expression fault) { throw null; }
-    }
-
-    public sealed partial class TypeBinaryExpression : Expression
-    {
-        internal TypeBinaryExpression() { }
-
-        public Expression Expression { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        public Type TypeOperand { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public TypeBinaryExpression Update(Expression expression) { throw null; }
-    }
-
-    public sealed partial class UnaryExpression : Expression
-    {
-        internal UnaryExpression() { }
-
-        public override bool CanReduce { get { throw null; } }
-
-        public bool IsLifted { get { throw null; } }
-
-        public bool IsLiftedToNull { get { throw null; } }
-
-        public Reflection.MethodInfo Method { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression Operand { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public override Expression Reduce() { throw null; }
-
-        public UnaryExpression Update(Expression operand) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.linq.expressions/4.3.0/ref/netstandard1.3/System.Linq.Expressions.cs b/src/referencePackages/src/system.linq.expressions/4.3.0/ref/netstandard1.3/System.Linq.Expressions.cs
deleted file mode 100644
index 3ea63eb0..00000000
--- a/src/referencePackages/src/system.linq.expressions/4.3.0/ref/netstandard1.3/System.Linq.Expressions.cs
+++ /dev/null
@@ -1,1452 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Linq.Expressions")]
-[assembly: System.Reflection.AssemblyDescription("System.Linq.Expressions")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Linq.Expressions")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.23123.00")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.23123.00 built by: PROJECTKREL")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata("", "")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Linq
-{
-    public partial interface IOrderedQueryable : Collections.IEnumerable, IQueryable
-    {
-    }
-
-    public partial interface IOrderedQueryable<out T> : Collections.Generic.IEnumerable<T>, Collections.IEnumerable, IOrderedQueryable, IQueryable, IQueryable<T>
-    {
-    }
-
-    public partial interface IQueryable : Collections.IEnumerable
-    {
-        Type ElementType { get; }
-
-        Expressions.Expression Expression { get; }
-
-        IQueryProvider Provider { get; }
-    }
-
-    public partial interface IQueryable<out T> : Collections.Generic.IEnumerable<T>, Collections.IEnumerable, IQueryable
-    {
-    }
-
-    public partial interface IQueryProvider
-    {
-        IQueryable CreateQuery(Expressions.Expression expression);
-        IQueryable<TElement> CreateQuery<TElement>(Expressions.Expression expression);
-        object Execute(Expressions.Expression expression);
-        TResult Execute<TResult>(Expressions.Expression expression);
-    }
-}
-
-namespace System.Linq.Expressions
-{
-    public partial class BinaryExpression : Expression
-    {
-        internal BinaryExpression() { }
-
-        public override bool CanReduce { get { throw null; } }
-
-        public LambdaExpression Conversion { get { throw null; } }
-
-        public bool IsLifted { get { throw null; } }
-
-        public bool IsLiftedToNull { get { throw null; } }
-
-        public Expression Left { get { throw null; } }
-
-        public Reflection.MethodInfo Method { get { throw null; } }
-
-        public Expression Right { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public override Expression Reduce() { throw null; }
-
-        public BinaryExpression Update(Expression left, LambdaExpression conversion, Expression right) { throw null; }
-    }
-
-    public partial class BlockExpression : Expression
-    {
-        internal BlockExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Expressions { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression Result { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ParameterExpression> Variables { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public BlockExpression Update(Collections.Generic.IEnumerable<ParameterExpression> variables, Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-    }
-
-    public sealed partial class CatchBlock
-    {
-        internal CatchBlock() { }
-
-        public Expression Body { get { throw null; } }
-
-        public Expression Filter { get { throw null; } }
-
-        public Type Test { get { throw null; } }
-
-        public ParameterExpression Variable { get { throw null; } }
-
-        public override string ToString() { throw null; }
-
-        public CatchBlock Update(ParameterExpression variable, Expression filter, Expression body) { throw null; }
-    }
-
-    public partial class ConditionalExpression : Expression
-    {
-        internal ConditionalExpression() { }
-
-        public Expression IfFalse { get { throw null; } }
-
-        public Expression IfTrue { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression Test { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public ConditionalExpression Update(Expression test, Expression ifTrue, Expression ifFalse) { throw null; }
-    }
-
-    public partial class ConstantExpression : Expression
-    {
-        internal ConstantExpression() { }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        public object Value { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-    }
-
-    public partial class DebugInfoExpression : Expression
-    {
-        internal DebugInfoExpression() { }
-
-        public SymbolDocumentInfo Document { get { throw null; } }
-
-        public virtual int EndColumn { get { throw null; } }
-
-        public virtual int EndLine { get { throw null; } }
-
-        public virtual bool IsClear { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public virtual int StartColumn { get { throw null; } }
-
-        public virtual int StartLine { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-    }
-
-    public sealed partial class DefaultExpression : Expression
-    {
-        internal DefaultExpression() { }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-    }
-
-    public sealed partial class ElementInit : IArgumentProvider
-    {
-        internal ElementInit() { }
-
-        public Reflection.MethodInfo AddMethod { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        int IArgumentProvider.ArgumentCount { get { throw null; } }
-
-        Expression IArgumentProvider.GetArgument(int index) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public ElementInit Update(Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public abstract partial class Expression
-    {
-        public virtual bool CanReduce { get { throw null; } }
-
-        public virtual ExpressionType NodeType { get { throw null; } }
-
-        public virtual Type Type { get { throw null; } }
-
-        protected internal virtual Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public static BinaryExpression Add(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Add(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression AddAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression AddAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression AddAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression AddAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression AddAssignChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression AddAssignChecked(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression AddChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression AddChecked(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression And(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression And(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression AndAlso(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression AndAlso(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression AndAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression AndAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression AndAssign(Expression left, Expression right) { throw null; }
-
-        public static IndexExpression ArrayAccess(Expression array, Collections.Generic.IEnumerable<Expression> indexes) { throw null; }
-
-        public static IndexExpression ArrayAccess(Expression array, params Expression[] indexes) { throw null; }
-
-        public static MethodCallExpression ArrayIndex(Expression array, Collections.Generic.IEnumerable<Expression> indexes) { throw null; }
-
-        public static BinaryExpression ArrayIndex(Expression array, Expression index) { throw null; }
-
-        public static MethodCallExpression ArrayIndex(Expression array, params Expression[] indexes) { throw null; }
-
-        public static UnaryExpression ArrayLength(Expression array) { throw null; }
-
-        public static BinaryExpression Assign(Expression left, Expression right) { throw null; }
-
-        public static MemberAssignment Bind(Reflection.MemberInfo member, Expression expression) { throw null; }
-
-        public static MemberAssignment Bind(Reflection.MethodInfo propertyAccessor, Expression expression) { throw null; }
-
-        public static BlockExpression Block(Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-
-        public static BlockExpression Block(Collections.Generic.IEnumerable<ParameterExpression> variables, Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-
-        public static BlockExpression Block(Collections.Generic.IEnumerable<ParameterExpression> variables, params Expression[] expressions) { throw null; }
-
-        public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4) { throw null; }
-
-        public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3) { throw null; }
-
-        public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2) { throw null; }
-
-        public static BlockExpression Block(Expression arg0, Expression arg1) { throw null; }
-
-        public static BlockExpression Block(params Expression[] expressions) { throw null; }
-
-        public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-
-        public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<ParameterExpression> variables, Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-
-        public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<ParameterExpression> variables, params Expression[] expressions) { throw null; }
-
-        public static BlockExpression Block(Type type, params Expression[] expressions) { throw null; }
-
-        public static GotoExpression Break(LabelTarget target, Expression value, Type type) { throw null; }
-
-        public static GotoExpression Break(LabelTarget target, Expression value) { throw null; }
-
-        public static GotoExpression Break(LabelTarget target, Type type) { throw null; }
-
-        public static GotoExpression Break(LabelTarget target) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Expression arg0, Expression arg1) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, params Expression[] arguments) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, string methodName, Type[] typeArguments, params Expression[] arguments) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, params Expression[] arguments) { throw null; }
-
-        public static MethodCallExpression Call(Type type, string methodName, Type[] typeArguments, params Expression[] arguments) { throw null; }
-
-        public static CatchBlock Catch(ParameterExpression variable, Expression body, Expression filter) { throw null; }
-
-        public static CatchBlock Catch(ParameterExpression variable, Expression body) { throw null; }
-
-        public static CatchBlock Catch(Type type, Expression body, Expression filter) { throw null; }
-
-        public static CatchBlock Catch(Type type, Expression body) { throw null; }
-
-        public static DebugInfoExpression ClearDebugInfo(SymbolDocumentInfo document) { throw null; }
-
-        public static BinaryExpression Coalesce(Expression left, Expression right, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression Coalesce(Expression left, Expression right) { throw null; }
-
-        public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse, Type type) { throw null; }
-
-        public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse) { throw null; }
-
-        public static ConstantExpression Constant(object value, Type type) { throw null; }
-
-        public static ConstantExpression Constant(object value) { throw null; }
-
-        public static GotoExpression Continue(LabelTarget target, Type type) { throw null; }
-
-        public static GotoExpression Continue(LabelTarget target) { throw null; }
-
-        public static UnaryExpression Convert(Expression expression, Type type, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression Convert(Expression expression, Type type) { throw null; }
-
-        public static UnaryExpression ConvertChecked(Expression expression, Type type, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression ConvertChecked(Expression expression, Type type) { throw null; }
-
-        public static DebugInfoExpression DebugInfo(SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn) { throw null; }
-
-        public static UnaryExpression Decrement(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression Decrement(Expression expression) { throw null; }
-
-        public static DefaultExpression Default(Type type) { throw null; }
-
-        public static BinaryExpression Divide(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Divide(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression DivideAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression DivideAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression DivideAssign(Expression left, Expression right) { throw null; }
-
-        public static ElementInit ElementInit(Reflection.MethodInfo addMethod, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static ElementInit ElementInit(Reflection.MethodInfo addMethod, params Expression[] arguments) { throw null; }
-
-        public static DefaultExpression Empty() { throw null; }
-
-        public static BinaryExpression Equal(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Equal(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression ExclusiveOr(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression ExclusiveOr(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right) { throw null; }
-
-        public static MemberExpression Field(Expression expression, Reflection.FieldInfo field) { throw null; }
-
-        public static MemberExpression Field(Expression expression, string fieldName) { throw null; }
-
-        public static MemberExpression Field(Expression expression, Type type, string fieldName) { throw null; }
-
-        public static Type GetActionType(params Type[] typeArgs) { throw null; }
-
-        public static Type GetDelegateType(params Type[] typeArgs) { throw null; }
-
-        public static Type GetFuncType(params Type[] typeArgs) { throw null; }
-
-        public static GotoExpression Goto(LabelTarget target, Expression value, Type type) { throw null; }
-
-        public static GotoExpression Goto(LabelTarget target, Expression value) { throw null; }
-
-        public static GotoExpression Goto(LabelTarget target, Type type) { throw null; }
-
-        public static GotoExpression Goto(LabelTarget target) { throw null; }
-
-        public static BinaryExpression GreaterThan(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression GreaterThan(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right) { throw null; }
-
-        public static ConditionalExpression IfThen(Expression test, Expression ifTrue) { throw null; }
-
-        public static ConditionalExpression IfThenElse(Expression test, Expression ifTrue, Expression ifFalse) { throw null; }
-
-        public static UnaryExpression Increment(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression Increment(Expression expression) { throw null; }
-
-        public static InvocationExpression Invoke(Expression expression, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static InvocationExpression Invoke(Expression expression, params Expression[] arguments) { throw null; }
-
-        public static UnaryExpression IsFalse(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression IsFalse(Expression expression) { throw null; }
-
-        public static UnaryExpression IsTrue(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression IsTrue(Expression expression) { throw null; }
-
-        public static LabelTarget Label() { throw null; }
-
-        public static LabelExpression Label(LabelTarget target, Expression defaultValue) { throw null; }
-
-        public static LabelExpression Label(LabelTarget target) { throw null; }
-
-        public static LabelTarget Label(string name) { throw null; }
-
-        public static LabelTarget Label(Type type, string name) { throw null; }
-
-        public static LabelTarget Label(Type type) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, bool tailCall, params ParameterExpression[] parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, params ParameterExpression[] parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, params ParameterExpression[] parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, params ParameterExpression[] parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, params ParameterExpression[] parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, params ParameterExpression[] parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static BinaryExpression LeftShift(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression LeftShift(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression LeftShiftAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression LeftShiftAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression LeftShiftAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression LessThan(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression LessThan(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression LessThanOrEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression LessThanOrEqual(Expression left, Expression right) { throw null; }
-
-        public static MemberListBinding ListBind(Reflection.MemberInfo member, Collections.Generic.IEnumerable<ElementInit> initializers) { throw null; }
-
-        public static MemberListBinding ListBind(Reflection.MemberInfo member, params ElementInit[] initializers) { throw null; }
-
-        public static MemberListBinding ListBind(Reflection.MethodInfo propertyAccessor, Collections.Generic.IEnumerable<ElementInit> initializers) { throw null; }
-
-        public static MemberListBinding ListBind(Reflection.MethodInfo propertyAccessor, params ElementInit[] initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, Collections.Generic.IEnumerable<ElementInit> initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, Collections.Generic.IEnumerable<Expression> initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, params ElementInit[] initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, params Expression[] initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, Reflection.MethodInfo addMethod, Collections.Generic.IEnumerable<Expression> initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, Reflection.MethodInfo addMethod, params Expression[] initializers) { throw null; }
-
-        public static LoopExpression Loop(Expression body, LabelTarget @break, LabelTarget @continue) { throw null; }
-
-        public static LoopExpression Loop(Expression body, LabelTarget @break) { throw null; }
-
-        public static LoopExpression Loop(Expression body) { throw null; }
-
-        public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right) { throw null; }
-
-        public static CatchBlock MakeCatchBlock(Type type, ParameterExpression variable, Expression body, Expression filter) { throw null; }
-
-        public static GotoExpression MakeGoto(GotoExpressionKind kind, LabelTarget target, Expression value, Type type) { throw null; }
-
-        public static IndexExpression MakeIndex(Expression instance, Reflection.PropertyInfo indexer, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static MemberExpression MakeMemberAccess(Expression expression, Reflection.MemberInfo member) { throw null; }
-
-        public static TryExpression MakeTry(Type type, Expression body, Expression @finally, Expression fault, Collections.Generic.IEnumerable<CatchBlock> handlers) { throw null; }
-
-        public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type) { throw null; }
-
-        public static MemberMemberBinding MemberBind(Reflection.MemberInfo member, Collections.Generic.IEnumerable<MemberBinding> bindings) { throw null; }
-
-        public static MemberMemberBinding MemberBind(Reflection.MemberInfo member, params MemberBinding[] bindings) { throw null; }
-
-        public static MemberMemberBinding MemberBind(Reflection.MethodInfo propertyAccessor, Collections.Generic.IEnumerable<MemberBinding> bindings) { throw null; }
-
-        public static MemberMemberBinding MemberBind(Reflection.MethodInfo propertyAccessor, params MemberBinding[] bindings) { throw null; }
-
-        public static MemberInitExpression MemberInit(NewExpression newExpression, Collections.Generic.IEnumerable<MemberBinding> bindings) { throw null; }
-
-        public static MemberInitExpression MemberInit(NewExpression newExpression, params MemberBinding[] bindings) { throw null; }
-
-        public static BinaryExpression Modulo(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Modulo(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression ModuloAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression ModuloAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression ModuloAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression Multiply(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Multiply(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression MultiplyAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression MultiplyAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression MultiplyAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression MultiplyChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression MultiplyChecked(Expression left, Expression right) { throw null; }
-
-        public static UnaryExpression Negate(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression Negate(Expression expression) { throw null; }
-
-        public static UnaryExpression NegateChecked(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression NegateChecked(Expression expression) { throw null; }
-
-        public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments, Collections.Generic.IEnumerable<Reflection.MemberInfo> members) { throw null; }
-
-        public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments, params Reflection.MemberInfo[] members) { throw null; }
-
-        public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static NewExpression New(Reflection.ConstructorInfo constructor, params Expression[] arguments) { throw null; }
-
-        public static NewExpression New(Reflection.ConstructorInfo constructor) { throw null; }
-
-        public static NewExpression New(Type type) { throw null; }
-
-        public static NewArrayExpression NewArrayBounds(Type type, Collections.Generic.IEnumerable<Expression> bounds) { throw null; }
-
-        public static NewArrayExpression NewArrayBounds(Type type, params Expression[] bounds) { throw null; }
-
-        public static NewArrayExpression NewArrayInit(Type type, Collections.Generic.IEnumerable<Expression> initializers) { throw null; }
-
-        public static NewArrayExpression NewArrayInit(Type type, params Expression[] initializers) { throw null; }
-
-        public static UnaryExpression Not(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression Not(Expression expression) { throw null; }
-
-        public static BinaryExpression NotEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression NotEqual(Expression left, Expression right) { throw null; }
-
-        public static UnaryExpression OnesComplement(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression OnesComplement(Expression expression) { throw null; }
-
-        public static BinaryExpression Or(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Or(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression OrAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression OrAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression OrAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression OrElse(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression OrElse(Expression left, Expression right) { throw null; }
-
-        public static ParameterExpression Parameter(Type type, string name) { throw null; }
-
-        public static ParameterExpression Parameter(Type type) { throw null; }
-
-        public static UnaryExpression PostDecrementAssign(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression PostDecrementAssign(Expression expression) { throw null; }
-
-        public static UnaryExpression PostIncrementAssign(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression PostIncrementAssign(Expression expression) { throw null; }
-
-        public static BinaryExpression Power(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Power(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression PowerAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression PowerAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression PowerAssign(Expression left, Expression right) { throw null; }
-
-        public static UnaryExpression PreDecrementAssign(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression PreDecrementAssign(Expression expression) { throw null; }
-
-        public static UnaryExpression PreIncrementAssign(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression PreIncrementAssign(Expression expression) { throw null; }
-
-        public static MemberExpression Property(Expression expression, Reflection.MethodInfo propertyAccessor) { throw null; }
-
-        public static IndexExpression Property(Expression instance, Reflection.PropertyInfo indexer, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static IndexExpression Property(Expression instance, Reflection.PropertyInfo indexer, params Expression[] arguments) { throw null; }
-
-        public static MemberExpression Property(Expression expression, Reflection.PropertyInfo property) { throw null; }
-
-        public static IndexExpression Property(Expression instance, string propertyName, params Expression[] arguments) { throw null; }
-
-        public static MemberExpression Property(Expression expression, string propertyName) { throw null; }
-
-        public static MemberExpression Property(Expression expression, Type type, string propertyName) { throw null; }
-
-        public static MemberExpression PropertyOrField(Expression expression, string propertyOrFieldName) { throw null; }
-
-        public static UnaryExpression Quote(Expression expression) { throw null; }
-
-        public virtual Expression Reduce() { throw null; }
-
-        public Expression ReduceAndCheck() { throw null; }
-
-        public Expression ReduceExtensions() { throw null; }
-
-        public static BinaryExpression ReferenceEqual(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression ReferenceNotEqual(Expression left, Expression right) { throw null; }
-
-        public static UnaryExpression Rethrow() { throw null; }
-
-        public static UnaryExpression Rethrow(Type type) { throw null; }
-
-        public static GotoExpression Return(LabelTarget target, Expression value, Type type) { throw null; }
-
-        public static GotoExpression Return(LabelTarget target, Expression value) { throw null; }
-
-        public static GotoExpression Return(LabelTarget target, Type type) { throw null; }
-
-        public static GotoExpression Return(LabelTarget target) { throw null; }
-
-        public static BinaryExpression RightShift(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression RightShift(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression RightShiftAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression RightShiftAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression RightShiftAssign(Expression left, Expression right) { throw null; }
-
-        public static RuntimeVariablesExpression RuntimeVariables(Collections.Generic.IEnumerable<ParameterExpression> variables) { throw null; }
-
-        public static RuntimeVariablesExpression RuntimeVariables(params ParameterExpression[] variables) { throw null; }
-
-        public static BinaryExpression Subtract(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Subtract(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression SubtractAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression SubtractAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression SubtractAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression SubtractAssignChecked(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression SubtractChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression SubtractChecked(Expression left, Expression right) { throw null; }
-
-        public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, params SwitchCase[] cases) { throw null; }
-
-        public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, Collections.Generic.IEnumerable<SwitchCase> cases) { throw null; }
-
-        public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, params SwitchCase[] cases) { throw null; }
-
-        public static SwitchExpression Switch(Expression switchValue, params SwitchCase[] cases) { throw null; }
-
-        public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, Collections.Generic.IEnumerable<SwitchCase> cases) { throw null; }
-
-        public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, params SwitchCase[] cases) { throw null; }
-
-        public static SwitchCase SwitchCase(Expression body, Collections.Generic.IEnumerable<Expression> testValues) { throw null; }
-
-        public static SwitchCase SwitchCase(Expression body, params Expression[] testValues) { throw null; }
-
-        public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor, Guid documentType) { throw null; }
-
-        public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor) { throw null; }
-
-        public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language) { throw null; }
-
-        public static SymbolDocumentInfo SymbolDocument(string fileName) { throw null; }
-
-        public static UnaryExpression Throw(Expression value, Type type) { throw null; }
-
-        public static UnaryExpression Throw(Expression value) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static TryExpression TryCatch(Expression body, params CatchBlock[] handlers) { throw null; }
-
-        public static TryExpression TryCatchFinally(Expression body, Expression @finally, params CatchBlock[] handlers) { throw null; }
-
-        public static TryExpression TryFault(Expression body, Expression fault) { throw null; }
-
-        public static TryExpression TryFinally(Expression body, Expression @finally) { throw null; }
-
-        public static bool TryGetActionType(Type[] typeArgs, out Type actionType) { throw null; }
-
-        public static bool TryGetFuncType(Type[] typeArgs, out Type funcType) { throw null; }
-
-        public static UnaryExpression TypeAs(Expression expression, Type type) { throw null; }
-
-        public static TypeBinaryExpression TypeEqual(Expression expression, Type type) { throw null; }
-
-        public static TypeBinaryExpression TypeIs(Expression expression, Type type) { throw null; }
-
-        public static UnaryExpression UnaryPlus(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression UnaryPlus(Expression expression) { throw null; }
-
-        public static UnaryExpression Unbox(Expression expression, Type type) { throw null; }
-
-        public static ParameterExpression Variable(Type type, string name) { throw null; }
-
-        public static ParameterExpression Variable(Type type) { throw null; }
-
-        protected internal virtual Expression VisitChildren(ExpressionVisitor visitor) { throw null; }
-    }
-
-    public enum ExpressionType
-    {
-        Add = 0,
-        AddChecked = 1,
-        And = 2,
-        AndAlso = 3,
-        ArrayLength = 4,
-        ArrayIndex = 5,
-        Call = 6,
-        Coalesce = 7,
-        Conditional = 8,
-        Constant = 9,
-        Convert = 10,
-        ConvertChecked = 11,
-        Divide = 12,
-        Equal = 13,
-        ExclusiveOr = 14,
-        GreaterThan = 15,
-        GreaterThanOrEqual = 16,
-        Invoke = 17,
-        Lambda = 18,
-        LeftShift = 19,
-        LessThan = 20,
-        LessThanOrEqual = 21,
-        ListInit = 22,
-        MemberAccess = 23,
-        MemberInit = 24,
-        Modulo = 25,
-        Multiply = 26,
-        MultiplyChecked = 27,
-        Negate = 28,
-        UnaryPlus = 29,
-        NegateChecked = 30,
-        New = 31,
-        NewArrayInit = 32,
-        NewArrayBounds = 33,
-        Not = 34,
-        NotEqual = 35,
-        Or = 36,
-        OrElse = 37,
-        Parameter = 38,
-        Power = 39,
-        Quote = 40,
-        RightShift = 41,
-        Subtract = 42,
-        SubtractChecked = 43,
-        TypeAs = 44,
-        TypeIs = 45,
-        Assign = 46,
-        Block = 47,
-        DebugInfo = 48,
-        Decrement = 49,
-        Dynamic = 50,
-        Default = 51,
-        Extension = 52,
-        Goto = 53,
-        Increment = 54,
-        Index = 55,
-        Label = 56,
-        RuntimeVariables = 57,
-        Loop = 58,
-        Switch = 59,
-        Throw = 60,
-        Try = 61,
-        Unbox = 62,
-        AddAssign = 63,
-        AndAssign = 64,
-        DivideAssign = 65,
-        ExclusiveOrAssign = 66,
-        LeftShiftAssign = 67,
-        ModuloAssign = 68,
-        MultiplyAssign = 69,
-        OrAssign = 70,
-        PowerAssign = 71,
-        RightShiftAssign = 72,
-        SubtractAssign = 73,
-        AddAssignChecked = 74,
-        MultiplyAssignChecked = 75,
-        SubtractAssignChecked = 76,
-        PreIncrementAssign = 77,
-        PreDecrementAssign = 78,
-        PostIncrementAssign = 79,
-        PostDecrementAssign = 80,
-        TypeEqual = 81,
-        OnesComplement = 82,
-        IsTrue = 83,
-        IsFalse = 84
-    }
-
-    public abstract partial class ExpressionVisitor
-    {
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Visit(Collections.ObjectModel.ReadOnlyCollection<Expression> nodes) { throw null; }
-
-        public virtual Expression Visit(Expression node) { throw null; }
-
-        public static Collections.ObjectModel.ReadOnlyCollection<T> Visit<T>(Collections.ObjectModel.ReadOnlyCollection<T> nodes, Func<T, T> elementVisitor) { throw null; }
-
-        public T VisitAndConvert<T>(T node, string callerName)
-            where T : Expression { throw null; }
-
-        public Collections.ObjectModel.ReadOnlyCollection<T> VisitAndConvert<T>(Collections.ObjectModel.ReadOnlyCollection<T> nodes, string callerName)
-            where T : Expression { throw null; }
-
-        protected internal virtual Expression VisitBinary(BinaryExpression node) { throw null; }
-
-        protected internal virtual Expression VisitBlock(BlockExpression node) { throw null; }
-
-        protected virtual CatchBlock VisitCatchBlock(CatchBlock node) { throw null; }
-
-        protected internal virtual Expression VisitConditional(ConditionalExpression node) { throw null; }
-
-        protected internal virtual Expression VisitConstant(ConstantExpression node) { throw null; }
-
-        protected internal virtual Expression VisitDebugInfo(DebugInfoExpression node) { throw null; }
-
-        protected internal virtual Expression VisitDefault(DefaultExpression node) { throw null; }
-
-        protected virtual ElementInit VisitElementInit(ElementInit node) { throw null; }
-
-        protected internal virtual Expression VisitExtension(Expression node) { throw null; }
-
-        protected internal virtual Expression VisitGoto(GotoExpression node) { throw null; }
-
-        protected internal virtual Expression VisitIndex(IndexExpression node) { throw null; }
-
-        protected internal virtual Expression VisitInvocation(InvocationExpression node) { throw null; }
-
-        protected internal virtual Expression VisitLabel(LabelExpression node) { throw null; }
-
-        protected virtual LabelTarget VisitLabelTarget(LabelTarget node) { throw null; }
-
-        protected internal virtual Expression VisitLambda<T>(Expression<T> node) { throw null; }
-
-        protected internal virtual Expression VisitListInit(ListInitExpression node) { throw null; }
-
-        protected internal virtual Expression VisitLoop(LoopExpression node) { throw null; }
-
-        protected internal virtual Expression VisitMember(MemberExpression node) { throw null; }
-
-        protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment node) { throw null; }
-
-        protected virtual MemberBinding VisitMemberBinding(MemberBinding node) { throw null; }
-
-        protected internal virtual Expression VisitMemberInit(MemberInitExpression node) { throw null; }
-
-        protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding node) { throw null; }
-
-        protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding node) { throw null; }
-
-        protected internal virtual Expression VisitMethodCall(MethodCallExpression node) { throw null; }
-
-        protected internal virtual Expression VisitNew(NewExpression node) { throw null; }
-
-        protected internal virtual Expression VisitNewArray(NewArrayExpression node) { throw null; }
-
-        protected internal virtual Expression VisitParameter(ParameterExpression node) { throw null; }
-
-        protected internal virtual Expression VisitRuntimeVariables(RuntimeVariablesExpression node) { throw null; }
-
-        protected internal virtual Expression VisitSwitch(SwitchExpression node) { throw null; }
-
-        protected virtual SwitchCase VisitSwitchCase(SwitchCase node) { throw null; }
-
-        protected internal virtual Expression VisitTry(TryExpression node) { throw null; }
-
-        protected internal virtual Expression VisitTypeBinary(TypeBinaryExpression node) { throw null; }
-
-        protected internal virtual Expression VisitUnary(UnaryExpression node) { throw null; }
-    }
-
-    public sealed partial class Expression<TDelegate> : LambdaExpression
-    {
-        internal Expression() { }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public new TDelegate Compile() { throw null; }
-
-        public Expression<TDelegate> Update(Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-    }
-
-    public sealed partial class GotoExpression : Expression
-    {
-        internal GotoExpression() { }
-
-        public GotoExpressionKind Kind { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public LabelTarget Target { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        public Expression Value { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public GotoExpression Update(LabelTarget target, Expression value) { throw null; }
-    }
-
-    public enum GotoExpressionKind
-    {
-        Goto = 0,
-        Return = 1,
-        Break = 2,
-        Continue = 3
-    }
-
-    public partial interface IArgumentProvider
-    {
-        int ArgumentCount { get; }
-
-        Expression GetArgument(int index);
-    }
-
-    public partial interface IDynamicExpression : IArgumentProvider
-    {
-        Type DelegateType { get; }
-
-        object CreateCallSite();
-        Expression Rewrite(Expression[] args);
-    }
-
-    public sealed partial class IndexExpression : Expression, IArgumentProvider
-    {
-        internal IndexExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        public Reflection.PropertyInfo Indexer { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression Object { get { throw null; } }
-
-        int IArgumentProvider.ArgumentCount { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        Expression IArgumentProvider.GetArgument(int index) { throw null; }
-
-        public IndexExpression Update(Expression @object, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public sealed partial class InvocationExpression : Expression, IArgumentProvider
-    {
-        internal InvocationExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        public Expression Expression { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        int IArgumentProvider.ArgumentCount { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        Expression IArgumentProvider.GetArgument(int index) { throw null; }
-
-        public InvocationExpression Update(Expression expression, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public sealed partial class LabelExpression : Expression
-    {
-        internal LabelExpression() { }
-
-        public Expression DefaultValue { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public LabelTarget Target { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public LabelExpression Update(LabelTarget target, Expression defaultValue) { throw null; }
-    }
-
-    public sealed partial class LabelTarget
-    {
-        internal LabelTarget() { }
-
-        public string Name { get { throw null; } }
-
-        public Type Type { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public abstract partial class LambdaExpression : Expression
-    {
-        internal LambdaExpression() { }
-
-        public Expression Body { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ParameterExpression> Parameters { get { throw null; } }
-
-        public Type ReturnType { get { throw null; } }
-
-        public bool TailCall { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        public Delegate Compile() { throw null; }
-    }
-
-    public sealed partial class ListInitExpression : Expression
-    {
-        internal ListInitExpression() { }
-
-        public override bool CanReduce { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ElementInit> Initializers { get { throw null; } }
-
-        public NewExpression NewExpression { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public override Expression Reduce() { throw null; }
-
-        public ListInitExpression Update(NewExpression newExpression, Collections.Generic.IEnumerable<ElementInit> initializers) { throw null; }
-    }
-
-    public sealed partial class LoopExpression : Expression
-    {
-        internal LoopExpression() { }
-
-        public Expression Body { get { throw null; } }
-
-        public LabelTarget BreakLabel { get { throw null; } }
-
-        public LabelTarget ContinueLabel { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public LoopExpression Update(LabelTarget breakLabel, LabelTarget continueLabel, Expression body) { throw null; }
-    }
-
-    public sealed partial class MemberAssignment : MemberBinding
-    {
-        internal MemberAssignment() { }
-
-        public Expression Expression { get { throw null; } }
-
-        public MemberAssignment Update(Expression expression) { throw null; }
-    }
-
-    public abstract partial class MemberBinding
-    {
-        internal MemberBinding() { }
-
-        public MemberBindingType BindingType { get { throw null; } }
-
-        public Reflection.MemberInfo Member { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum MemberBindingType
-    {
-        Assignment = 0,
-        MemberBinding = 1,
-        ListBinding = 2
-    }
-
-    public partial class MemberExpression : Expression
-    {
-        internal MemberExpression() { }
-
-        public Expression Expression { get { throw null; } }
-
-        public Reflection.MemberInfo Member { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public MemberExpression Update(Expression expression) { throw null; }
-    }
-
-    public sealed partial class MemberInitExpression : Expression
-    {
-        internal MemberInitExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<MemberBinding> Bindings { get { throw null; } }
-
-        public override bool CanReduce { get { throw null; } }
-
-        public NewExpression NewExpression { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public override Expression Reduce() { throw null; }
-
-        public MemberInitExpression Update(NewExpression newExpression, Collections.Generic.IEnumerable<MemberBinding> bindings) { throw null; }
-    }
-
-    public sealed partial class MemberListBinding : MemberBinding
-    {
-        internal MemberListBinding() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ElementInit> Initializers { get { throw null; } }
-
-        public MemberListBinding Update(Collections.Generic.IEnumerable<ElementInit> initializers) { throw null; }
-    }
-
-    public sealed partial class MemberMemberBinding : MemberBinding
-    {
-        internal MemberMemberBinding() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<MemberBinding> Bindings { get { throw null; } }
-
-        public MemberMemberBinding Update(Collections.Generic.IEnumerable<MemberBinding> bindings) { throw null; }
-    }
-
-    public partial class MethodCallExpression : Expression, IArgumentProvider
-    {
-        internal MethodCallExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        public Reflection.MethodInfo Method { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression Object { get { throw null; } }
-
-        int IArgumentProvider.ArgumentCount { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        Expression IArgumentProvider.GetArgument(int index) { throw null; }
-
-        public MethodCallExpression Update(Expression @object, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public partial class NewArrayExpression : Expression
-    {
-        internal NewArrayExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Expressions { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public NewArrayExpression Update(Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-    }
-
-    public partial class NewExpression : Expression, IArgumentProvider
-    {
-        internal NewExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        public Reflection.ConstructorInfo Constructor { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Reflection.MemberInfo> Members { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        int IArgumentProvider.ArgumentCount { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        Expression IArgumentProvider.GetArgument(int index) { throw null; }
-
-        public NewExpression Update(Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public partial class ParameterExpression : Expression
-    {
-        internal ParameterExpression() { }
-
-        public bool IsByRef { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-    }
-
-    public sealed partial class RuntimeVariablesExpression : Expression
-    {
-        internal RuntimeVariablesExpression() { }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ParameterExpression> Variables { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public RuntimeVariablesExpression Update(Collections.Generic.IEnumerable<ParameterExpression> variables) { throw null; }
-    }
-
-    public sealed partial class SwitchCase
-    {
-        internal SwitchCase() { }
-
-        public Expression Body { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> TestValues { get { throw null; } }
-
-        public override string ToString() { throw null; }
-
-        public SwitchCase Update(Collections.Generic.IEnumerable<Expression> testValues, Expression body) { throw null; }
-    }
-
-    public sealed partial class SwitchExpression : Expression
-    {
-        internal SwitchExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<SwitchCase> Cases { get { throw null; } }
-
-        public Reflection.MethodInfo Comparison { get { throw null; } }
-
-        public Expression DefaultBody { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression SwitchValue { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public SwitchExpression Update(Expression switchValue, Collections.Generic.IEnumerable<SwitchCase> cases, Expression defaultBody) { throw null; }
-    }
-
-    public partial class SymbolDocumentInfo
-    {
-        internal SymbolDocumentInfo() { }
-
-        public virtual Guid DocumentType { get { throw null; } }
-
-        public string FileName { get { throw null; } }
-
-        public virtual Guid Language { get { throw null; } }
-
-        public virtual Guid LanguageVendor { get { throw null; } }
-    }
-
-    public sealed partial class TryExpression : Expression
-    {
-        internal TryExpression() { }
-
-        public Expression Body { get { throw null; } }
-
-        public Expression Fault { get { throw null; } }
-
-        public Expression Finally { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<CatchBlock> Handlers { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public TryExpression Update(Expression body, Collections.Generic.IEnumerable<CatchBlock> handlers, Expression @finally, Expression fault) { throw null; }
-    }
-
-    public sealed partial class TypeBinaryExpression : Expression
-    {
-        internal TypeBinaryExpression() { }
-
-        public Expression Expression { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        public Type TypeOperand { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public TypeBinaryExpression Update(Expression expression) { throw null; }
-    }
-
-    public sealed partial class UnaryExpression : Expression
-    {
-        internal UnaryExpression() { }
-
-        public override bool CanReduce { get { throw null; } }
-
-        public bool IsLifted { get { throw null; } }
-
-        public bool IsLiftedToNull { get { throw null; } }
-
-        public Reflection.MethodInfo Method { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression Operand { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public override Expression Reduce() { throw null; }
-
-        public UnaryExpression Update(Expression operand) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.linq.expressions/4.3.0/ref/netstandard1.6/System.Linq.Expressions.cs b/src/referencePackages/src/system.linq.expressions/4.3.0/ref/netstandard1.6/System.Linq.Expressions.cs
deleted file mode 100644
index 4c682759..00000000
--- a/src/referencePackages/src/system.linq.expressions/4.3.0/ref/netstandard1.6/System.Linq.Expressions.cs
+++ /dev/null
@@ -1,1457 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Linq.Expressions")]
-[assembly: System.Reflection.AssemblyDescription("System.Linq.Expressions")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Linq.Expressions")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Linq
-{
-    public partial interface IOrderedQueryable : Collections.IEnumerable, IQueryable
-    {
-    }
-
-    public partial interface IOrderedQueryable<out T> : Collections.Generic.IEnumerable<T>, Collections.IEnumerable, IOrderedQueryable, IQueryable, IQueryable<T>
-    {
-    }
-
-    public partial interface IQueryable : Collections.IEnumerable
-    {
-        Type ElementType { get; }
-
-        Expressions.Expression Expression { get; }
-
-        IQueryProvider Provider { get; }
-    }
-
-    public partial interface IQueryable<out T> : Collections.Generic.IEnumerable<T>, Collections.IEnumerable, IQueryable
-    {
-    }
-
-    public partial interface IQueryProvider
-    {
-        IQueryable CreateQuery(Expressions.Expression expression);
-        IQueryable<TElement> CreateQuery<TElement>(Expressions.Expression expression);
-        object Execute(Expressions.Expression expression);
-        TResult Execute<TResult>(Expressions.Expression expression);
-    }
-}
-
-namespace System.Linq.Expressions
-{
-    public partial class BinaryExpression : Expression
-    {
-        internal BinaryExpression() { }
-
-        public override bool CanReduce { get { throw null; } }
-
-        public LambdaExpression Conversion { get { throw null; } }
-
-        public bool IsLifted { get { throw null; } }
-
-        public bool IsLiftedToNull { get { throw null; } }
-
-        public Expression Left { get { throw null; } }
-
-        public Reflection.MethodInfo Method { get { throw null; } }
-
-        public Expression Right { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public override Expression Reduce() { throw null; }
-
-        public BinaryExpression Update(Expression left, LambdaExpression conversion, Expression right) { throw null; }
-    }
-
-    public partial class BlockExpression : Expression
-    {
-        internal BlockExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Expressions { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression Result { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ParameterExpression> Variables { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public BlockExpression Update(Collections.Generic.IEnumerable<ParameterExpression> variables, Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-    }
-
-    public sealed partial class CatchBlock
-    {
-        internal CatchBlock() { }
-
-        public Expression Body { get { throw null; } }
-
-        public Expression Filter { get { throw null; } }
-
-        public Type Test { get { throw null; } }
-
-        public ParameterExpression Variable { get { throw null; } }
-
-        public override string ToString() { throw null; }
-
-        public CatchBlock Update(ParameterExpression variable, Expression filter, Expression body) { throw null; }
-    }
-
-    public partial class ConditionalExpression : Expression
-    {
-        internal ConditionalExpression() { }
-
-        public Expression IfFalse { get { throw null; } }
-
-        public Expression IfTrue { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression Test { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public ConditionalExpression Update(Expression test, Expression ifTrue, Expression ifFalse) { throw null; }
-    }
-
-    public partial class ConstantExpression : Expression
-    {
-        internal ConstantExpression() { }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        public object Value { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-    }
-
-    public partial class DebugInfoExpression : Expression
-    {
-        internal DebugInfoExpression() { }
-
-        public SymbolDocumentInfo Document { get { throw null; } }
-
-        public virtual int EndColumn { get { throw null; } }
-
-        public virtual int EndLine { get { throw null; } }
-
-        public virtual bool IsClear { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public virtual int StartColumn { get { throw null; } }
-
-        public virtual int StartLine { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-    }
-
-    public sealed partial class DefaultExpression : Expression
-    {
-        internal DefaultExpression() { }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-    }
-
-    public sealed partial class ElementInit : IArgumentProvider
-    {
-        internal ElementInit() { }
-
-        public Reflection.MethodInfo AddMethod { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        int IArgumentProvider.ArgumentCount { get { throw null; } }
-
-        Expression IArgumentProvider.GetArgument(int index) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public ElementInit Update(Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public abstract partial class Expression
-    {
-        public virtual bool CanReduce { get { throw null; } }
-
-        public virtual ExpressionType NodeType { get { throw null; } }
-
-        public virtual Type Type { get { throw null; } }
-
-        protected internal virtual Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public static BinaryExpression Add(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Add(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression AddAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression AddAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression AddAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression AddAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression AddAssignChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression AddAssignChecked(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression AddChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression AddChecked(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression And(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression And(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression AndAlso(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression AndAlso(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression AndAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression AndAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression AndAssign(Expression left, Expression right) { throw null; }
-
-        public static IndexExpression ArrayAccess(Expression array, Collections.Generic.IEnumerable<Expression> indexes) { throw null; }
-
-        public static IndexExpression ArrayAccess(Expression array, params Expression[] indexes) { throw null; }
-
-        public static MethodCallExpression ArrayIndex(Expression array, Collections.Generic.IEnumerable<Expression> indexes) { throw null; }
-
-        public static BinaryExpression ArrayIndex(Expression array, Expression index) { throw null; }
-
-        public static MethodCallExpression ArrayIndex(Expression array, params Expression[] indexes) { throw null; }
-
-        public static UnaryExpression ArrayLength(Expression array) { throw null; }
-
-        public static BinaryExpression Assign(Expression left, Expression right) { throw null; }
-
-        public static MemberAssignment Bind(Reflection.MemberInfo member, Expression expression) { throw null; }
-
-        public static MemberAssignment Bind(Reflection.MethodInfo propertyAccessor, Expression expression) { throw null; }
-
-        public static BlockExpression Block(Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-
-        public static BlockExpression Block(Collections.Generic.IEnumerable<ParameterExpression> variables, Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-
-        public static BlockExpression Block(Collections.Generic.IEnumerable<ParameterExpression> variables, params Expression[] expressions) { throw null; }
-
-        public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4) { throw null; }
-
-        public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3) { throw null; }
-
-        public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2) { throw null; }
-
-        public static BlockExpression Block(Expression arg0, Expression arg1) { throw null; }
-
-        public static BlockExpression Block(params Expression[] expressions) { throw null; }
-
-        public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-
-        public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<ParameterExpression> variables, Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-
-        public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<ParameterExpression> variables, params Expression[] expressions) { throw null; }
-
-        public static BlockExpression Block(Type type, params Expression[] expressions) { throw null; }
-
-        public static GotoExpression Break(LabelTarget target, Expression value, Type type) { throw null; }
-
-        public static GotoExpression Break(LabelTarget target, Expression value) { throw null; }
-
-        public static GotoExpression Break(LabelTarget target, Type type) { throw null; }
-
-        public static GotoExpression Break(LabelTarget target) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Expression arg0, Expression arg1) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, params Expression[] arguments) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method) { throw null; }
-
-        public static MethodCallExpression Call(Expression instance, string methodName, Type[] typeArguments, params Expression[] arguments) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0) { throw null; }
-
-        public static MethodCallExpression Call(Reflection.MethodInfo method, params Expression[] arguments) { throw null; }
-
-        public static MethodCallExpression Call(Type type, string methodName, Type[] typeArguments, params Expression[] arguments) { throw null; }
-
-        public static CatchBlock Catch(ParameterExpression variable, Expression body, Expression filter) { throw null; }
-
-        public static CatchBlock Catch(ParameterExpression variable, Expression body) { throw null; }
-
-        public static CatchBlock Catch(Type type, Expression body, Expression filter) { throw null; }
-
-        public static CatchBlock Catch(Type type, Expression body) { throw null; }
-
-        public static DebugInfoExpression ClearDebugInfo(SymbolDocumentInfo document) { throw null; }
-
-        public static BinaryExpression Coalesce(Expression left, Expression right, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression Coalesce(Expression left, Expression right) { throw null; }
-
-        public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse, Type type) { throw null; }
-
-        public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse) { throw null; }
-
-        public static ConstantExpression Constant(object value, Type type) { throw null; }
-
-        public static ConstantExpression Constant(object value) { throw null; }
-
-        public static GotoExpression Continue(LabelTarget target, Type type) { throw null; }
-
-        public static GotoExpression Continue(LabelTarget target) { throw null; }
-
-        public static UnaryExpression Convert(Expression expression, Type type, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression Convert(Expression expression, Type type) { throw null; }
-
-        public static UnaryExpression ConvertChecked(Expression expression, Type type, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression ConvertChecked(Expression expression, Type type) { throw null; }
-
-        public static DebugInfoExpression DebugInfo(SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn) { throw null; }
-
-        public static UnaryExpression Decrement(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression Decrement(Expression expression) { throw null; }
-
-        public static DefaultExpression Default(Type type) { throw null; }
-
-        public static BinaryExpression Divide(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Divide(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression DivideAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression DivideAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression DivideAssign(Expression left, Expression right) { throw null; }
-
-        public static ElementInit ElementInit(Reflection.MethodInfo addMethod, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static ElementInit ElementInit(Reflection.MethodInfo addMethod, params Expression[] arguments) { throw null; }
-
-        public static DefaultExpression Empty() { throw null; }
-
-        public static BinaryExpression Equal(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Equal(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression ExclusiveOr(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression ExclusiveOr(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right) { throw null; }
-
-        public static MemberExpression Field(Expression expression, Reflection.FieldInfo field) { throw null; }
-
-        public static MemberExpression Field(Expression expression, string fieldName) { throw null; }
-
-        public static MemberExpression Field(Expression expression, Type type, string fieldName) { throw null; }
-
-        public static Type GetActionType(params Type[] typeArgs) { throw null; }
-
-        public static Type GetDelegateType(params Type[] typeArgs) { throw null; }
-
-        public static Type GetFuncType(params Type[] typeArgs) { throw null; }
-
-        public static GotoExpression Goto(LabelTarget target, Expression value, Type type) { throw null; }
-
-        public static GotoExpression Goto(LabelTarget target, Expression value) { throw null; }
-
-        public static GotoExpression Goto(LabelTarget target, Type type) { throw null; }
-
-        public static GotoExpression Goto(LabelTarget target) { throw null; }
-
-        public static BinaryExpression GreaterThan(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression GreaterThan(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right) { throw null; }
-
-        public static ConditionalExpression IfThen(Expression test, Expression ifTrue) { throw null; }
-
-        public static ConditionalExpression IfThenElse(Expression test, Expression ifTrue, Expression ifFalse) { throw null; }
-
-        public static UnaryExpression Increment(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression Increment(Expression expression) { throw null; }
-
-        public static InvocationExpression Invoke(Expression expression, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static InvocationExpression Invoke(Expression expression, params Expression[] arguments) { throw null; }
-
-        public static UnaryExpression IsFalse(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression IsFalse(Expression expression) { throw null; }
-
-        public static UnaryExpression IsTrue(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression IsTrue(Expression expression) { throw null; }
-
-        public static LabelTarget Label() { throw null; }
-
-        public static LabelExpression Label(LabelTarget target, Expression defaultValue) { throw null; }
-
-        public static LabelExpression Label(LabelTarget target) { throw null; }
-
-        public static LabelTarget Label(string name) { throw null; }
-
-        public static LabelTarget Label(Type type, string name) { throw null; }
-
-        public static LabelTarget Label(Type type) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, bool tailCall, params ParameterExpression[] parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, params ParameterExpression[] parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, params ParameterExpression[] parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, params ParameterExpression[] parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static LambdaExpression Lambda(Type delegateType, Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, params ParameterExpression[] parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, params ParameterExpression[] parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-
-        public static BinaryExpression LeftShift(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression LeftShift(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression LeftShiftAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression LeftShiftAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression LeftShiftAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression LessThan(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression LessThan(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression LessThanOrEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression LessThanOrEqual(Expression left, Expression right) { throw null; }
-
-        public static MemberListBinding ListBind(Reflection.MemberInfo member, Collections.Generic.IEnumerable<ElementInit> initializers) { throw null; }
-
-        public static MemberListBinding ListBind(Reflection.MemberInfo member, params ElementInit[] initializers) { throw null; }
-
-        public static MemberListBinding ListBind(Reflection.MethodInfo propertyAccessor, Collections.Generic.IEnumerable<ElementInit> initializers) { throw null; }
-
-        public static MemberListBinding ListBind(Reflection.MethodInfo propertyAccessor, params ElementInit[] initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, Collections.Generic.IEnumerable<ElementInit> initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, Collections.Generic.IEnumerable<Expression> initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, params ElementInit[] initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, params Expression[] initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, Reflection.MethodInfo addMethod, Collections.Generic.IEnumerable<Expression> initializers) { throw null; }
-
-        public static ListInitExpression ListInit(NewExpression newExpression, Reflection.MethodInfo addMethod, params Expression[] initializers) { throw null; }
-
-        public static LoopExpression Loop(Expression body, LabelTarget @break, LabelTarget @continue) { throw null; }
-
-        public static LoopExpression Loop(Expression body, LabelTarget @break) { throw null; }
-
-        public static LoopExpression Loop(Expression body) { throw null; }
-
-        public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right) { throw null; }
-
-        public static CatchBlock MakeCatchBlock(Type type, ParameterExpression variable, Expression body, Expression filter) { throw null; }
-
-        public static GotoExpression MakeGoto(GotoExpressionKind kind, LabelTarget target, Expression value, Type type) { throw null; }
-
-        public static IndexExpression MakeIndex(Expression instance, Reflection.PropertyInfo indexer, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static MemberExpression MakeMemberAccess(Expression expression, Reflection.MemberInfo member) { throw null; }
-
-        public static TryExpression MakeTry(Type type, Expression body, Expression @finally, Expression fault, Collections.Generic.IEnumerable<CatchBlock> handlers) { throw null; }
-
-        public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type) { throw null; }
-
-        public static MemberMemberBinding MemberBind(Reflection.MemberInfo member, Collections.Generic.IEnumerable<MemberBinding> bindings) { throw null; }
-
-        public static MemberMemberBinding MemberBind(Reflection.MemberInfo member, params MemberBinding[] bindings) { throw null; }
-
-        public static MemberMemberBinding MemberBind(Reflection.MethodInfo propertyAccessor, Collections.Generic.IEnumerable<MemberBinding> bindings) { throw null; }
-
-        public static MemberMemberBinding MemberBind(Reflection.MethodInfo propertyAccessor, params MemberBinding[] bindings) { throw null; }
-
-        public static MemberInitExpression MemberInit(NewExpression newExpression, Collections.Generic.IEnumerable<MemberBinding> bindings) { throw null; }
-
-        public static MemberInitExpression MemberInit(NewExpression newExpression, params MemberBinding[] bindings) { throw null; }
-
-        public static BinaryExpression Modulo(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Modulo(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression ModuloAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression ModuloAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression ModuloAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression Multiply(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Multiply(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression MultiplyAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression MultiplyAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression MultiplyAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression MultiplyChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression MultiplyChecked(Expression left, Expression right) { throw null; }
-
-        public static UnaryExpression Negate(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression Negate(Expression expression) { throw null; }
-
-        public static UnaryExpression NegateChecked(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression NegateChecked(Expression expression) { throw null; }
-
-        public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments, Collections.Generic.IEnumerable<Reflection.MemberInfo> members) { throw null; }
-
-        public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments, params Reflection.MemberInfo[] members) { throw null; }
-
-        public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static NewExpression New(Reflection.ConstructorInfo constructor, params Expression[] arguments) { throw null; }
-
-        public static NewExpression New(Reflection.ConstructorInfo constructor) { throw null; }
-
-        public static NewExpression New(Type type) { throw null; }
-
-        public static NewArrayExpression NewArrayBounds(Type type, Collections.Generic.IEnumerable<Expression> bounds) { throw null; }
-
-        public static NewArrayExpression NewArrayBounds(Type type, params Expression[] bounds) { throw null; }
-
-        public static NewArrayExpression NewArrayInit(Type type, Collections.Generic.IEnumerable<Expression> initializers) { throw null; }
-
-        public static NewArrayExpression NewArrayInit(Type type, params Expression[] initializers) { throw null; }
-
-        public static UnaryExpression Not(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression Not(Expression expression) { throw null; }
-
-        public static BinaryExpression NotEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression NotEqual(Expression left, Expression right) { throw null; }
-
-        public static UnaryExpression OnesComplement(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression OnesComplement(Expression expression) { throw null; }
-
-        public static BinaryExpression Or(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Or(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression OrAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression OrAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression OrAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression OrElse(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression OrElse(Expression left, Expression right) { throw null; }
-
-        public static ParameterExpression Parameter(Type type, string name) { throw null; }
-
-        public static ParameterExpression Parameter(Type type) { throw null; }
-
-        public static UnaryExpression PostDecrementAssign(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression PostDecrementAssign(Expression expression) { throw null; }
-
-        public static UnaryExpression PostIncrementAssign(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression PostIncrementAssign(Expression expression) { throw null; }
-
-        public static BinaryExpression Power(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Power(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression PowerAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression PowerAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression PowerAssign(Expression left, Expression right) { throw null; }
-
-        public static UnaryExpression PreDecrementAssign(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression PreDecrementAssign(Expression expression) { throw null; }
-
-        public static UnaryExpression PreIncrementAssign(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression PreIncrementAssign(Expression expression) { throw null; }
-
-        public static MemberExpression Property(Expression expression, Reflection.MethodInfo propertyAccessor) { throw null; }
-
-        public static IndexExpression Property(Expression instance, Reflection.PropertyInfo indexer, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-
-        public static IndexExpression Property(Expression instance, Reflection.PropertyInfo indexer, params Expression[] arguments) { throw null; }
-
-        public static MemberExpression Property(Expression expression, Reflection.PropertyInfo property) { throw null; }
-
-        public static IndexExpression Property(Expression instance, string propertyName, params Expression[] arguments) { throw null; }
-
-        public static MemberExpression Property(Expression expression, string propertyName) { throw null; }
-
-        public static MemberExpression Property(Expression expression, Type type, string propertyName) { throw null; }
-
-        public static MemberExpression PropertyOrField(Expression expression, string propertyOrFieldName) { throw null; }
-
-        public static UnaryExpression Quote(Expression expression) { throw null; }
-
-        public virtual Expression Reduce() { throw null; }
-
-        public Expression ReduceAndCheck() { throw null; }
-
-        public Expression ReduceExtensions() { throw null; }
-
-        public static BinaryExpression ReferenceEqual(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression ReferenceNotEqual(Expression left, Expression right) { throw null; }
-
-        public static UnaryExpression Rethrow() { throw null; }
-
-        public static UnaryExpression Rethrow(Type type) { throw null; }
-
-        public static GotoExpression Return(LabelTarget target, Expression value, Type type) { throw null; }
-
-        public static GotoExpression Return(LabelTarget target, Expression value) { throw null; }
-
-        public static GotoExpression Return(LabelTarget target, Type type) { throw null; }
-
-        public static GotoExpression Return(LabelTarget target) { throw null; }
-
-        public static BinaryExpression RightShift(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression RightShift(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression RightShiftAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression RightShiftAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression RightShiftAssign(Expression left, Expression right) { throw null; }
-
-        public static RuntimeVariablesExpression RuntimeVariables(Collections.Generic.IEnumerable<ParameterExpression> variables) { throw null; }
-
-        public static RuntimeVariablesExpression RuntimeVariables(params ParameterExpression[] variables) { throw null; }
-
-        public static BinaryExpression Subtract(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression Subtract(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression SubtractAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression SubtractAssign(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression SubtractAssign(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion) { throw null; }
-
-        public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression SubtractAssignChecked(Expression left, Expression right) { throw null; }
-
-        public static BinaryExpression SubtractChecked(Expression left, Expression right, Reflection.MethodInfo method) { throw null; }
-
-        public static BinaryExpression SubtractChecked(Expression left, Expression right) { throw null; }
-
-        public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, params SwitchCase[] cases) { throw null; }
-
-        public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, Collections.Generic.IEnumerable<SwitchCase> cases) { throw null; }
-
-        public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, params SwitchCase[] cases) { throw null; }
-
-        public static SwitchExpression Switch(Expression switchValue, params SwitchCase[] cases) { throw null; }
-
-        public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, Collections.Generic.IEnumerable<SwitchCase> cases) { throw null; }
-
-        public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, params SwitchCase[] cases) { throw null; }
-
-        public static SwitchCase SwitchCase(Expression body, Collections.Generic.IEnumerable<Expression> testValues) { throw null; }
-
-        public static SwitchCase SwitchCase(Expression body, params Expression[] testValues) { throw null; }
-
-        public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor, Guid documentType) { throw null; }
-
-        public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor) { throw null; }
-
-        public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language) { throw null; }
-
-        public static SymbolDocumentInfo SymbolDocument(string fileName) { throw null; }
-
-        public static UnaryExpression Throw(Expression value, Type type) { throw null; }
-
-        public static UnaryExpression Throw(Expression value) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static TryExpression TryCatch(Expression body, params CatchBlock[] handlers) { throw null; }
-
-        public static TryExpression TryCatchFinally(Expression body, Expression @finally, params CatchBlock[] handlers) { throw null; }
-
-        public static TryExpression TryFault(Expression body, Expression fault) { throw null; }
-
-        public static TryExpression TryFinally(Expression body, Expression @finally) { throw null; }
-
-        public static bool TryGetActionType(Type[] typeArgs, out Type actionType) { throw null; }
-
-        public static bool TryGetFuncType(Type[] typeArgs, out Type funcType) { throw null; }
-
-        public static UnaryExpression TypeAs(Expression expression, Type type) { throw null; }
-
-        public static TypeBinaryExpression TypeEqual(Expression expression, Type type) { throw null; }
-
-        public static TypeBinaryExpression TypeIs(Expression expression, Type type) { throw null; }
-
-        public static UnaryExpression UnaryPlus(Expression expression, Reflection.MethodInfo method) { throw null; }
-
-        public static UnaryExpression UnaryPlus(Expression expression) { throw null; }
-
-        public static UnaryExpression Unbox(Expression expression, Type type) { throw null; }
-
-        public static ParameterExpression Variable(Type type, string name) { throw null; }
-
-        public static ParameterExpression Variable(Type type) { throw null; }
-
-        protected internal virtual Expression VisitChildren(ExpressionVisitor visitor) { throw null; }
-    }
-
-    public enum ExpressionType
-    {
-        Add = 0,
-        AddChecked = 1,
-        And = 2,
-        AndAlso = 3,
-        ArrayLength = 4,
-        ArrayIndex = 5,
-        Call = 6,
-        Coalesce = 7,
-        Conditional = 8,
-        Constant = 9,
-        Convert = 10,
-        ConvertChecked = 11,
-        Divide = 12,
-        Equal = 13,
-        ExclusiveOr = 14,
-        GreaterThan = 15,
-        GreaterThanOrEqual = 16,
-        Invoke = 17,
-        Lambda = 18,
-        LeftShift = 19,
-        LessThan = 20,
-        LessThanOrEqual = 21,
-        ListInit = 22,
-        MemberAccess = 23,
-        MemberInit = 24,
-        Modulo = 25,
-        Multiply = 26,
-        MultiplyChecked = 27,
-        Negate = 28,
-        UnaryPlus = 29,
-        NegateChecked = 30,
-        New = 31,
-        NewArrayInit = 32,
-        NewArrayBounds = 33,
-        Not = 34,
-        NotEqual = 35,
-        Or = 36,
-        OrElse = 37,
-        Parameter = 38,
-        Power = 39,
-        Quote = 40,
-        RightShift = 41,
-        Subtract = 42,
-        SubtractChecked = 43,
-        TypeAs = 44,
-        TypeIs = 45,
-        Assign = 46,
-        Block = 47,
-        DebugInfo = 48,
-        Decrement = 49,
-        Dynamic = 50,
-        Default = 51,
-        Extension = 52,
-        Goto = 53,
-        Increment = 54,
-        Index = 55,
-        Label = 56,
-        RuntimeVariables = 57,
-        Loop = 58,
-        Switch = 59,
-        Throw = 60,
-        Try = 61,
-        Unbox = 62,
-        AddAssign = 63,
-        AndAssign = 64,
-        DivideAssign = 65,
-        ExclusiveOrAssign = 66,
-        LeftShiftAssign = 67,
-        ModuloAssign = 68,
-        MultiplyAssign = 69,
-        OrAssign = 70,
-        PowerAssign = 71,
-        RightShiftAssign = 72,
-        SubtractAssign = 73,
-        AddAssignChecked = 74,
-        MultiplyAssignChecked = 75,
-        SubtractAssignChecked = 76,
-        PreIncrementAssign = 77,
-        PreDecrementAssign = 78,
-        PostIncrementAssign = 79,
-        PostDecrementAssign = 80,
-        TypeEqual = 81,
-        OnesComplement = 82,
-        IsTrue = 83,
-        IsFalse = 84
-    }
-
-    public abstract partial class ExpressionVisitor
-    {
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Visit(Collections.ObjectModel.ReadOnlyCollection<Expression> nodes) { throw null; }
-
-        public virtual Expression Visit(Expression node) { throw null; }
-
-        public static Collections.ObjectModel.ReadOnlyCollection<T> Visit<T>(Collections.ObjectModel.ReadOnlyCollection<T> nodes, Func<T, T> elementVisitor) { throw null; }
-
-        public T VisitAndConvert<T>(T node, string callerName)
-            where T : Expression { throw null; }
-
-        public Collections.ObjectModel.ReadOnlyCollection<T> VisitAndConvert<T>(Collections.ObjectModel.ReadOnlyCollection<T> nodes, string callerName)
-            where T : Expression { throw null; }
-
-        protected internal virtual Expression VisitBinary(BinaryExpression node) { throw null; }
-
-        protected internal virtual Expression VisitBlock(BlockExpression node) { throw null; }
-
-        protected virtual CatchBlock VisitCatchBlock(CatchBlock node) { throw null; }
-
-        protected internal virtual Expression VisitConditional(ConditionalExpression node) { throw null; }
-
-        protected internal virtual Expression VisitConstant(ConstantExpression node) { throw null; }
-
-        protected internal virtual Expression VisitDebugInfo(DebugInfoExpression node) { throw null; }
-
-        protected internal virtual Expression VisitDefault(DefaultExpression node) { throw null; }
-
-        protected virtual ElementInit VisitElementInit(ElementInit node) { throw null; }
-
-        protected internal virtual Expression VisitExtension(Expression node) { throw null; }
-
-        protected internal virtual Expression VisitGoto(GotoExpression node) { throw null; }
-
-        protected internal virtual Expression VisitIndex(IndexExpression node) { throw null; }
-
-        protected internal virtual Expression VisitInvocation(InvocationExpression node) { throw null; }
-
-        protected internal virtual Expression VisitLabel(LabelExpression node) { throw null; }
-
-        protected virtual LabelTarget VisitLabelTarget(LabelTarget node) { throw null; }
-
-        protected internal virtual Expression VisitLambda<T>(Expression<T> node) { throw null; }
-
-        protected internal virtual Expression VisitListInit(ListInitExpression node) { throw null; }
-
-        protected internal virtual Expression VisitLoop(LoopExpression node) { throw null; }
-
-        protected internal virtual Expression VisitMember(MemberExpression node) { throw null; }
-
-        protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment node) { throw null; }
-
-        protected virtual MemberBinding VisitMemberBinding(MemberBinding node) { throw null; }
-
-        protected internal virtual Expression VisitMemberInit(MemberInitExpression node) { throw null; }
-
-        protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding node) { throw null; }
-
-        protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding node) { throw null; }
-
-        protected internal virtual Expression VisitMethodCall(MethodCallExpression node) { throw null; }
-
-        protected internal virtual Expression VisitNew(NewExpression node) { throw null; }
-
-        protected internal virtual Expression VisitNewArray(NewArrayExpression node) { throw null; }
-
-        protected internal virtual Expression VisitParameter(ParameterExpression node) { throw null; }
-
-        protected internal virtual Expression VisitRuntimeVariables(RuntimeVariablesExpression node) { throw null; }
-
-        protected internal virtual Expression VisitSwitch(SwitchExpression node) { throw null; }
-
-        protected virtual SwitchCase VisitSwitchCase(SwitchCase node) { throw null; }
-
-        protected internal virtual Expression VisitTry(TryExpression node) { throw null; }
-
-        protected internal virtual Expression VisitTypeBinary(TypeBinaryExpression node) { throw null; }
-
-        protected internal virtual Expression VisitUnary(UnaryExpression node) { throw null; }
-    }
-
-    public sealed partial class Expression<TDelegate> : LambdaExpression
-    {
-        internal Expression() { }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public new TDelegate Compile() { throw null; }
-
-        public new TDelegate Compile(bool preferInterpretation) { throw null; }
-
-        public Expression<TDelegate> Update(Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters) { throw null; }
-    }
-
-    public sealed partial class GotoExpression : Expression
-    {
-        internal GotoExpression() { }
-
-        public GotoExpressionKind Kind { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public LabelTarget Target { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        public Expression Value { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public GotoExpression Update(LabelTarget target, Expression value) { throw null; }
-    }
-
-    public enum GotoExpressionKind
-    {
-        Goto = 0,
-        Return = 1,
-        Break = 2,
-        Continue = 3
-    }
-
-    public partial interface IArgumentProvider
-    {
-        int ArgumentCount { get; }
-
-        Expression GetArgument(int index);
-    }
-
-    public partial interface IDynamicExpression : IArgumentProvider
-    {
-        Type DelegateType { get; }
-
-        object CreateCallSite();
-        Expression Rewrite(Expression[] args);
-    }
-
-    public sealed partial class IndexExpression : Expression, IArgumentProvider
-    {
-        internal IndexExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        public Reflection.PropertyInfo Indexer { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression Object { get { throw null; } }
-
-        int IArgumentProvider.ArgumentCount { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        Expression IArgumentProvider.GetArgument(int index) { throw null; }
-
-        public IndexExpression Update(Expression @object, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public sealed partial class InvocationExpression : Expression, IArgumentProvider
-    {
-        internal InvocationExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        public Expression Expression { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        int IArgumentProvider.ArgumentCount { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        Expression IArgumentProvider.GetArgument(int index) { throw null; }
-
-        public InvocationExpression Update(Expression expression, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public sealed partial class LabelExpression : Expression
-    {
-        internal LabelExpression() { }
-
-        public Expression DefaultValue { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public LabelTarget Target { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public LabelExpression Update(LabelTarget target, Expression defaultValue) { throw null; }
-    }
-
-    public sealed partial class LabelTarget
-    {
-        internal LabelTarget() { }
-
-        public string Name { get { throw null; } }
-
-        public Type Type { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public abstract partial class LambdaExpression : Expression
-    {
-        internal LambdaExpression() { }
-
-        public Expression Body { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ParameterExpression> Parameters { get { throw null; } }
-
-        public Type ReturnType { get { throw null; } }
-
-        public bool TailCall { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        public Delegate Compile() { throw null; }
-
-        public Delegate Compile(bool preferInterpretation) { throw null; }
-    }
-
-    public sealed partial class ListInitExpression : Expression
-    {
-        internal ListInitExpression() { }
-
-        public override bool CanReduce { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ElementInit> Initializers { get { throw null; } }
-
-        public NewExpression NewExpression { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public override Expression Reduce() { throw null; }
-
-        public ListInitExpression Update(NewExpression newExpression, Collections.Generic.IEnumerable<ElementInit> initializers) { throw null; }
-    }
-
-    public sealed partial class LoopExpression : Expression
-    {
-        internal LoopExpression() { }
-
-        public Expression Body { get { throw null; } }
-
-        public LabelTarget BreakLabel { get { throw null; } }
-
-        public LabelTarget ContinueLabel { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public LoopExpression Update(LabelTarget breakLabel, LabelTarget continueLabel, Expression body) { throw null; }
-    }
-
-    public sealed partial class MemberAssignment : MemberBinding
-    {
-        internal MemberAssignment() { }
-
-        public Expression Expression { get { throw null; } }
-
-        public MemberAssignment Update(Expression expression) { throw null; }
-    }
-
-    public abstract partial class MemberBinding
-    {
-        internal MemberBinding() { }
-
-        public MemberBindingType BindingType { get { throw null; } }
-
-        public Reflection.MemberInfo Member { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum MemberBindingType
-    {
-        Assignment = 0,
-        MemberBinding = 1,
-        ListBinding = 2
-    }
-
-    public partial class MemberExpression : Expression
-    {
-        internal MemberExpression() { }
-
-        public Expression Expression { get { throw null; } }
-
-        public Reflection.MemberInfo Member { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public MemberExpression Update(Expression expression) { throw null; }
-    }
-
-    public sealed partial class MemberInitExpression : Expression
-    {
-        internal MemberInitExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<MemberBinding> Bindings { get { throw null; } }
-
-        public override bool CanReduce { get { throw null; } }
-
-        public NewExpression NewExpression { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public override Expression Reduce() { throw null; }
-
-        public MemberInitExpression Update(NewExpression newExpression, Collections.Generic.IEnumerable<MemberBinding> bindings) { throw null; }
-    }
-
-    public sealed partial class MemberListBinding : MemberBinding
-    {
-        internal MemberListBinding() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ElementInit> Initializers { get { throw null; } }
-
-        public MemberListBinding Update(Collections.Generic.IEnumerable<ElementInit> initializers) { throw null; }
-    }
-
-    public sealed partial class MemberMemberBinding : MemberBinding
-    {
-        internal MemberMemberBinding() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<MemberBinding> Bindings { get { throw null; } }
-
-        public MemberMemberBinding Update(Collections.Generic.IEnumerable<MemberBinding> bindings) { throw null; }
-    }
-
-    public partial class MethodCallExpression : Expression, IArgumentProvider
-    {
-        internal MethodCallExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        public Reflection.MethodInfo Method { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression Object { get { throw null; } }
-
-        int IArgumentProvider.ArgumentCount { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        Expression IArgumentProvider.GetArgument(int index) { throw null; }
-
-        public MethodCallExpression Update(Expression @object, Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public partial class NewArrayExpression : Expression
-    {
-        internal NewArrayExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Expressions { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public NewArrayExpression Update(Collections.Generic.IEnumerable<Expression> expressions) { throw null; }
-    }
-
-    public partial class NewExpression : Expression, IArgumentProvider
-    {
-        internal NewExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> Arguments { get { throw null; } }
-
-        public Reflection.ConstructorInfo Constructor { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Reflection.MemberInfo> Members { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        int IArgumentProvider.ArgumentCount { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        Expression IArgumentProvider.GetArgument(int index) { throw null; }
-
-        public NewExpression Update(Collections.Generic.IEnumerable<Expression> arguments) { throw null; }
-    }
-
-    public partial class ParameterExpression : Expression
-    {
-        internal ParameterExpression() { }
-
-        public bool IsByRef { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-    }
-
-    public sealed partial class RuntimeVariablesExpression : Expression
-    {
-        internal RuntimeVariablesExpression() { }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<ParameterExpression> Variables { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public RuntimeVariablesExpression Update(Collections.Generic.IEnumerable<ParameterExpression> variables) { throw null; }
-    }
-
-    public sealed partial class SwitchCase
-    {
-        internal SwitchCase() { }
-
-        public Expression Body { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Expression> TestValues { get { throw null; } }
-
-        public override string ToString() { throw null; }
-
-        public SwitchCase Update(Collections.Generic.IEnumerable<Expression> testValues, Expression body) { throw null; }
-    }
-
-    public sealed partial class SwitchExpression : Expression
-    {
-        internal SwitchExpression() { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<SwitchCase> Cases { get { throw null; } }
-
-        public Reflection.MethodInfo Comparison { get { throw null; } }
-
-        public Expression DefaultBody { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression SwitchValue { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public SwitchExpression Update(Expression switchValue, Collections.Generic.IEnumerable<SwitchCase> cases, Expression defaultBody) { throw null; }
-    }
-
-    public partial class SymbolDocumentInfo
-    {
-        internal SymbolDocumentInfo() { }
-
-        public virtual Guid DocumentType { get { throw null; } }
-
-        public string FileName { get { throw null; } }
-
-        public virtual Guid Language { get { throw null; } }
-
-        public virtual Guid LanguageVendor { get { throw null; } }
-    }
-
-    public sealed partial class TryExpression : Expression
-    {
-        internal TryExpression() { }
-
-        public Expression Body { get { throw null; } }
-
-        public Expression Fault { get { throw null; } }
-
-        public Expression Finally { get { throw null; } }
-
-        public Collections.ObjectModel.ReadOnlyCollection<CatchBlock> Handlers { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public TryExpression Update(Expression body, Collections.Generic.IEnumerable<CatchBlock> handlers, Expression @finally, Expression fault) { throw null; }
-    }
-
-    public sealed partial class TypeBinaryExpression : Expression
-    {
-        internal TypeBinaryExpression() { }
-
-        public Expression Expression { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        public Type TypeOperand { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public TypeBinaryExpression Update(Expression expression) { throw null; }
-    }
-
-    public sealed partial class UnaryExpression : Expression
-    {
-        internal UnaryExpression() { }
-
-        public override bool CanReduce { get { throw null; } }
-
-        public bool IsLifted { get { throw null; } }
-
-        public bool IsLiftedToNull { get { throw null; } }
-
-        public Reflection.MethodInfo Method { get { throw null; } }
-
-        public sealed override ExpressionType NodeType { get { throw null; } }
-
-        public Expression Operand { get { throw null; } }
-
-        public sealed override Type Type { get { throw null; } }
-
-        protected internal override Expression Accept(ExpressionVisitor visitor) { throw null; }
-
-        public override Expression Reduce() { throw null; }
-
-        public UnaryExpression Update(Expression operand) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.linq.expressions/4.3.0/system.linq.expressions.nuspec b/src/referencePackages/src/system.linq.expressions/4.3.0/system.linq.expressions.nuspec
deleted file mode 100644
index 1da0863b..00000000
--- a/src/referencePackages/src/system.linq.expressions/4.3.0/system.linq.expressions.nuspec
+++ /dev/null
@@ -1,56 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Linq.Expressions</id>
-    <version>4.3.0</version>
-    <title>System.Linq.Expressions</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides classes, interfaces and enumerations that enable language-level code expressions to be represented as objects in the form of expression trees.
-
-Commonly Used Types:
-System.Linq.IQueryable&lt;T&gt;
-System.Linq.IQueryable
-System.Linq.Expressions.Expression&lt;TDelegate&gt;
-System.Linq.Expressions.Expression
-System.Linq.Expressions.ExpressionVisitor
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.6">
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Globalization" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Linq" version="4.3.0" exclude="Compile" />
-        <dependency id="System.ObjectModel" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Reflection.Emit" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Reflection.Emit.ILGeneration" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Reflection.Emit.Lightweight" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Reflection.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Reflection.Primitives" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Reflection.TypeExtensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Threading" version="4.3.0" exclude="Compile" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.linq/4.3.0/System.Linq.4.3.0.csproj b/src/referencePackages/src/system.linq/4.3.0/System.Linq.4.3.0.csproj
deleted file mode 100644
index c5821502..00000000
--- a/src/referencePackages/src/system.linq/4.3.0/System.Linq.4.3.0.csproj
+++ /dev/null
@@ -1,21 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.6</TargetFrameworks>
-    <AssemblyName>System.Linq</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.6'">
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.linq/4.3.0/ref/netstandard1.0/System.Linq.cs b/src/referencePackages/src/system.linq/4.3.0/ref/netstandard1.0/System.Linq.cs
deleted file mode 100644
index a1edc5cd..00000000
--- a/src/referencePackages/src/system.linq/4.3.0/ref/netstandard1.0/System.Linq.cs
+++ /dev/null
@@ -1,412 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyTitle("System.Linq.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.Linq.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Linq.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Linq
-{
-    public static partial class Enumerable
-    {
-        public static TSource Aggregate<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TSource, TSource> func) { throw null; }
-
-        public static TAccumulate Aggregate<TSource, TAccumulate>(this Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func) { throw null; }
-
-        public static TResult Aggregate<TSource, TAccumulate, TResult>(this Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector) { throw null; }
-
-        public static bool All<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static bool Any<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static bool Any<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static decimal Average(this Collections.Generic.IEnumerable<decimal> source) { throw null; }
-
-        public static double Average(this Collections.Generic.IEnumerable<double> source) { throw null; }
-
-        public static double Average(this Collections.Generic.IEnumerable<int> source) { throw null; }
-
-        public static double Average(this Collections.Generic.IEnumerable<long> source) { throw null; }
-
-        public static decimal? Average(this Collections.Generic.IEnumerable<decimal?> source) { throw null; }
-
-        public static double? Average(this Collections.Generic.IEnumerable<double?> source) { throw null; }
-
-        public static double? Average(this Collections.Generic.IEnumerable<int?> source) { throw null; }
-
-        public static double? Average(this Collections.Generic.IEnumerable<long?> source) { throw null; }
-
-        public static float? Average(this Collections.Generic.IEnumerable<float?> source) { throw null; }
-
-        public static float Average(this Collections.Generic.IEnumerable<float> source) { throw null; }
-
-        public static decimal Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector) { throw null; }
-
-        public static double Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector) { throw null; }
-
-        public static double Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector) { throw null; }
-
-        public static double Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector) { throw null; }
-
-        public static decimal? Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal?> selector) { throw null; }
-
-        public static double? Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double?> selector) { throw null; }
-
-        public static double? Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int?> selector) { throw null; }
-
-        public static double? Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long?> selector) { throw null; }
-
-        public static float? Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float?> selector) { throw null; }
-
-        public static float Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Cast<TResult>(this Collections.IEnumerable source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Concat<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second) { throw null; }
-
-        public static bool Contains<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource value, Collections.Generic.IEqualityComparer<TSource> comparer) { throw null; }
-
-        public static bool Contains<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource value) { throw null; }
-
-        public static int Count<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static int Count<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource defaultValue) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Distinct<TSource>(this Collections.Generic.IEnumerable<TSource> source, Collections.Generic.IEqualityComparer<TSource> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Distinct<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static TSource ElementAt<TSource>(this Collections.Generic.IEnumerable<TSource> source, int index) { throw null; }
-
-        public static TSource ElementAtOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, int index) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Empty<TResult>() { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Except<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Except<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second) { throw null; }
-
-        public static TSource First<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static TSource First<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static TSource FirstOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static TSource FirstOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult> resultSelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult> resultSelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult> resultSelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Intersect<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Intersect<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector) { throw null; }
-
-        public static TSource Last<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static TSource Last<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static TSource LastOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static TSource LastOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static long LongCount<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static long LongCount<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static decimal Max(this Collections.Generic.IEnumerable<decimal> source) { throw null; }
-
-        public static double Max(this Collections.Generic.IEnumerable<double> source) { throw null; }
-
-        public static int Max(this Collections.Generic.IEnumerable<int> source) { throw null; }
-
-        public static long Max(this Collections.Generic.IEnumerable<long> source) { throw null; }
-
-        public static decimal? Max(this Collections.Generic.IEnumerable<decimal?> source) { throw null; }
-
-        public static double? Max(this Collections.Generic.IEnumerable<double?> source) { throw null; }
-
-        public static int? Max(this Collections.Generic.IEnumerable<int?> source) { throw null; }
-
-        public static long? Max(this Collections.Generic.IEnumerable<long?> source) { throw null; }
-
-        public static float? Max(this Collections.Generic.IEnumerable<float?> source) { throw null; }
-
-        public static float Max(this Collections.Generic.IEnumerable<float> source) { throw null; }
-
-        public static decimal Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector) { throw null; }
-
-        public static double Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector) { throw null; }
-
-        public static int Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector) { throw null; }
-
-        public static long Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector) { throw null; }
-
-        public static decimal? Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal?> selector) { throw null; }
-
-        public static double? Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double?> selector) { throw null; }
-
-        public static int? Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int?> selector) { throw null; }
-
-        public static long? Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long?> selector) { throw null; }
-
-        public static float? Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float?> selector) { throw null; }
-
-        public static float Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector) { throw null; }
-
-        public static TSource Max<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static TResult Max<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TResult> selector) { throw null; }
-
-        public static decimal Min(this Collections.Generic.IEnumerable<decimal> source) { throw null; }
-
-        public static double Min(this Collections.Generic.IEnumerable<double> source) { throw null; }
-
-        public static int Min(this Collections.Generic.IEnumerable<int> source) { throw null; }
-
-        public static long Min(this Collections.Generic.IEnumerable<long> source) { throw null; }
-
-        public static decimal? Min(this Collections.Generic.IEnumerable<decimal?> source) { throw null; }
-
-        public static double? Min(this Collections.Generic.IEnumerable<double?> source) { throw null; }
-
-        public static int? Min(this Collections.Generic.IEnumerable<int?> source) { throw null; }
-
-        public static long? Min(this Collections.Generic.IEnumerable<long?> source) { throw null; }
-
-        public static float? Min(this Collections.Generic.IEnumerable<float?> source) { throw null; }
-
-        public static float Min(this Collections.Generic.IEnumerable<float> source) { throw null; }
-
-        public static decimal Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector) { throw null; }
-
-        public static double Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector) { throw null; }
-
-        public static int Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector) { throw null; }
-
-        public static long Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector) { throw null; }
-
-        public static decimal? Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal?> selector) { throw null; }
-
-        public static double? Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double?> selector) { throw null; }
-
-        public static int? Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int?> selector) { throw null; }
-
-        public static long? Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long?> selector) { throw null; }
-
-        public static float? Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float?> selector) { throw null; }
-
-        public static float Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector) { throw null; }
-
-        public static TSource Min<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static TResult Min<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TResult> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> OfType<TResult>(this Collections.IEnumerable source) { throw null; }
-
-        public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer) { throw null; }
-
-        public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer) { throw null; }
-
-        public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<int> Range(int start, int count) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Repeat<TResult>(TResult element, int count) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Reverse<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Select<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TResult> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Select<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, TResult> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Collections.Generic.IEnumerable<TResult>> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, Collections.Generic.IEnumerable<TResult>> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector) { throw null; }
-
-        public static bool SequenceEqual<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer) { throw null; }
-
-        public static bool SequenceEqual<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second) { throw null; }
-
-        public static TSource Single<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static TSource Single<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static TSource SingleOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static TSource SingleOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Skip<TSource>(this Collections.Generic.IEnumerable<TSource> source, int count) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, bool> predicate) { throw null; }
-
-        public static decimal Sum(this Collections.Generic.IEnumerable<decimal> source) { throw null; }
-
-        public static double Sum(this Collections.Generic.IEnumerable<double> source) { throw null; }
-
-        public static int Sum(this Collections.Generic.IEnumerable<int> source) { throw null; }
-
-        public static long Sum(this Collections.Generic.IEnumerable<long> source) { throw null; }
-
-        public static decimal? Sum(this Collections.Generic.IEnumerable<decimal?> source) { throw null; }
-
-        public static double? Sum(this Collections.Generic.IEnumerable<double?> source) { throw null; }
-
-        public static int? Sum(this Collections.Generic.IEnumerable<int?> source) { throw null; }
-
-        public static long? Sum(this Collections.Generic.IEnumerable<long?> source) { throw null; }
-
-        public static float? Sum(this Collections.Generic.IEnumerable<float?> source) { throw null; }
-
-        public static float Sum(this Collections.Generic.IEnumerable<float> source) { throw null; }
-
-        public static decimal Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector) { throw null; }
-
-        public static double Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector) { throw null; }
-
-        public static int Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector) { throw null; }
-
-        public static long Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector) { throw null; }
-
-        public static decimal? Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal?> selector) { throw null; }
-
-        public static double? Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double?> selector) { throw null; }
-
-        public static int? Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int?> selector) { throw null; }
-
-        public static long? Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long?> selector) { throw null; }
-
-        public static float? Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float?> selector) { throw null; }
-
-        public static float Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Take<TSource>(this Collections.Generic.IEnumerable<TSource> source, int count) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, bool> predicate) { throw null; }
-
-        public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer) { throw null; }
-
-        public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer) { throw null; }
-
-        public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static TSource[] ToArray<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector) { throw null; }
-
-        public static Collections.Generic.List<TSource> ToList<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Union<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Union<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Where<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Where<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, bool> predicate) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Zip<TFirst, TSecond, TResult>(this Collections.Generic.IEnumerable<TFirst> first, Collections.Generic.IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector) { throw null; }
-    }
-
-    public partial interface IGrouping<out TKey, out TElement> : Collections.Generic.IEnumerable<TElement>, Collections.IEnumerable
-    {
-        TKey Key { get; }
-    }
-
-    public partial interface ILookup<TKey, TElement> : Collections.Generic.IEnumerable<IGrouping<TKey, TElement>>, Collections.IEnumerable
-    {
-        int Count { get; }
-
-        Collections.Generic.IEnumerable<TElement> this[TKey key] { get; }
-
-        bool Contains(TKey key);
-    }
-
-    public partial interface IOrderedEnumerable<TElement> : Collections.Generic.IEnumerable<TElement>, Collections.IEnumerable
-    {
-        IOrderedEnumerable<TElement> CreateOrderedEnumerable<TKey>(Func<TElement, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer, bool descending);
-    }
-
-    public partial class Lookup<TKey, TElement> : ILookup<TKey, TElement>, Collections.Generic.IEnumerable<IGrouping<TKey, TElement>>, Collections.IEnumerable
-    {
-        internal Lookup() { }
-
-        public int Count { get { throw null; } }
-
-        public Collections.Generic.IEnumerable<TElement> this[TKey key] { get { throw null; } }
-
-        public Collections.Generic.IEnumerable<TResult> ApplyResultSelector<TResult>(Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult> resultSelector) { throw null; }
-
-        public bool Contains(TKey key) { throw null; }
-
-        public Collections.Generic.IEnumerator<IGrouping<TKey, TElement>> GetEnumerator() { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.linq/4.3.0/ref/netstandard1.6/System.Linq.cs b/src/referencePackages/src/system.linq/4.3.0/ref/netstandard1.6/System.Linq.cs
deleted file mode 100644
index a8dc04dd..00000000
--- a/src/referencePackages/src/system.linq/4.3.0/ref/netstandard1.6/System.Linq.cs
+++ /dev/null
@@ -1,419 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Linq")]
-[assembly: System.Reflection.AssemblyDescription("System.Linq")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Linq")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Linq
-{
-    public static partial class Enumerable
-    {
-        public static TSource Aggregate<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TSource, TSource> func) { throw null; }
-
-        public static TAccumulate Aggregate<TSource, TAccumulate>(this Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func) { throw null; }
-
-        public static TResult Aggregate<TSource, TAccumulate, TResult>(this Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector) { throw null; }
-
-        public static bool All<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static bool Any<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static bool Any<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Append<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource element) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static decimal Average(this Collections.Generic.IEnumerable<decimal> source) { throw null; }
-
-        public static double Average(this Collections.Generic.IEnumerable<double> source) { throw null; }
-
-        public static double Average(this Collections.Generic.IEnumerable<int> source) { throw null; }
-
-        public static double Average(this Collections.Generic.IEnumerable<long> source) { throw null; }
-
-        public static decimal? Average(this Collections.Generic.IEnumerable<decimal?> source) { throw null; }
-
-        public static double? Average(this Collections.Generic.IEnumerable<double?> source) { throw null; }
-
-        public static double? Average(this Collections.Generic.IEnumerable<int?> source) { throw null; }
-
-        public static double? Average(this Collections.Generic.IEnumerable<long?> source) { throw null; }
-
-        public static float? Average(this Collections.Generic.IEnumerable<float?> source) { throw null; }
-
-        public static float Average(this Collections.Generic.IEnumerable<float> source) { throw null; }
-
-        public static decimal Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector) { throw null; }
-
-        public static double Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector) { throw null; }
-
-        public static double Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector) { throw null; }
-
-        public static double Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector) { throw null; }
-
-        public static decimal? Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal?> selector) { throw null; }
-
-        public static double? Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double?> selector) { throw null; }
-
-        public static double? Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int?> selector) { throw null; }
-
-        public static double? Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long?> selector) { throw null; }
-
-        public static float? Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float?> selector) { throw null; }
-
-        public static float Average<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Cast<TResult>(this Collections.IEnumerable source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Concat<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second) { throw null; }
-
-        public static bool Contains<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource value, Collections.Generic.IEqualityComparer<TSource> comparer) { throw null; }
-
-        public static bool Contains<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource value) { throw null; }
-
-        public static int Count<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static int Count<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource defaultValue) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Distinct<TSource>(this Collections.Generic.IEnumerable<TSource> source, Collections.Generic.IEqualityComparer<TSource> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Distinct<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static TSource ElementAt<TSource>(this Collections.Generic.IEnumerable<TSource> source, int index) { throw null; }
-
-        public static TSource ElementAtOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, int index) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Empty<TResult>() { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Except<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Except<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second) { throw null; }
-
-        public static TSource First<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static TSource First<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static TSource FirstOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static TSource FirstOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult> resultSelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult> resultSelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult> resultSelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Intersect<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Intersect<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this Collections.Generic.IEnumerable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector) { throw null; }
-
-        public static TSource Last<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static TSource Last<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static TSource LastOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static TSource LastOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static long LongCount<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static long LongCount<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static decimal Max(this Collections.Generic.IEnumerable<decimal> source) { throw null; }
-
-        public static double Max(this Collections.Generic.IEnumerable<double> source) { throw null; }
-
-        public static int Max(this Collections.Generic.IEnumerable<int> source) { throw null; }
-
-        public static long Max(this Collections.Generic.IEnumerable<long> source) { throw null; }
-
-        public static decimal? Max(this Collections.Generic.IEnumerable<decimal?> source) { throw null; }
-
-        public static double? Max(this Collections.Generic.IEnumerable<double?> source) { throw null; }
-
-        public static int? Max(this Collections.Generic.IEnumerable<int?> source) { throw null; }
-
-        public static long? Max(this Collections.Generic.IEnumerable<long?> source) { throw null; }
-
-        public static float? Max(this Collections.Generic.IEnumerable<float?> source) { throw null; }
-
-        public static float Max(this Collections.Generic.IEnumerable<float> source) { throw null; }
-
-        public static decimal Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector) { throw null; }
-
-        public static double Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector) { throw null; }
-
-        public static int Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector) { throw null; }
-
-        public static long Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector) { throw null; }
-
-        public static decimal? Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal?> selector) { throw null; }
-
-        public static double? Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double?> selector) { throw null; }
-
-        public static int? Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int?> selector) { throw null; }
-
-        public static long? Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long?> selector) { throw null; }
-
-        public static float? Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float?> selector) { throw null; }
-
-        public static float Max<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector) { throw null; }
-
-        public static TSource Max<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static TResult Max<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TResult> selector) { throw null; }
-
-        public static decimal Min(this Collections.Generic.IEnumerable<decimal> source) { throw null; }
-
-        public static double Min(this Collections.Generic.IEnumerable<double> source) { throw null; }
-
-        public static int Min(this Collections.Generic.IEnumerable<int> source) { throw null; }
-
-        public static long Min(this Collections.Generic.IEnumerable<long> source) { throw null; }
-
-        public static decimal? Min(this Collections.Generic.IEnumerable<decimal?> source) { throw null; }
-
-        public static double? Min(this Collections.Generic.IEnumerable<double?> source) { throw null; }
-
-        public static int? Min(this Collections.Generic.IEnumerable<int?> source) { throw null; }
-
-        public static long? Min(this Collections.Generic.IEnumerable<long?> source) { throw null; }
-
-        public static float? Min(this Collections.Generic.IEnumerable<float?> source) { throw null; }
-
-        public static float Min(this Collections.Generic.IEnumerable<float> source) { throw null; }
-
-        public static decimal Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector) { throw null; }
-
-        public static double Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector) { throw null; }
-
-        public static int Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector) { throw null; }
-
-        public static long Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector) { throw null; }
-
-        public static decimal? Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal?> selector) { throw null; }
-
-        public static double? Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double?> selector) { throw null; }
-
-        public static int? Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int?> selector) { throw null; }
-
-        public static long? Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long?> selector) { throw null; }
-
-        public static float? Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float?> selector) { throw null; }
-
-        public static float Min<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector) { throw null; }
-
-        public static TSource Min<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static TResult Min<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TResult> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> OfType<TResult>(this Collections.IEnumerable source) { throw null; }
-
-        public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer) { throw null; }
-
-        public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer) { throw null; }
-
-        public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Prepend<TSource>(this Collections.Generic.IEnumerable<TSource> source, TSource element) { throw null; }
-
-        public static Collections.Generic.IEnumerable<int> Range(int start, int count) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Repeat<TResult>(TResult element, int count) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Reverse<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Select<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TResult> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Select<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, TResult> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Collections.Generic.IEnumerable<TResult>> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, Collections.Generic.IEnumerable<TResult>> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector) { throw null; }
-
-        public static bool SequenceEqual<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer) { throw null; }
-
-        public static bool SequenceEqual<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second) { throw null; }
-
-        public static TSource Single<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static TSource Single<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static TSource SingleOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static TSource SingleOrDefault<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Skip<TSource>(this Collections.Generic.IEnumerable<TSource> source, int count) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, bool> predicate) { throw null; }
-
-        public static decimal Sum(this Collections.Generic.IEnumerable<decimal> source) { throw null; }
-
-        public static double Sum(this Collections.Generic.IEnumerable<double> source) { throw null; }
-
-        public static int Sum(this Collections.Generic.IEnumerable<int> source) { throw null; }
-
-        public static long Sum(this Collections.Generic.IEnumerable<long> source) { throw null; }
-
-        public static decimal? Sum(this Collections.Generic.IEnumerable<decimal?> source) { throw null; }
-
-        public static double? Sum(this Collections.Generic.IEnumerable<double?> source) { throw null; }
-
-        public static int? Sum(this Collections.Generic.IEnumerable<int?> source) { throw null; }
-
-        public static long? Sum(this Collections.Generic.IEnumerable<long?> source) { throw null; }
-
-        public static float? Sum(this Collections.Generic.IEnumerable<float?> source) { throw null; }
-
-        public static float Sum(this Collections.Generic.IEnumerable<float> source) { throw null; }
-
-        public static decimal Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal> selector) { throw null; }
-
-        public static double Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double> selector) { throw null; }
-
-        public static int Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int> selector) { throw null; }
-
-        public static long Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long> selector) { throw null; }
-
-        public static decimal? Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, decimal?> selector) { throw null; }
-
-        public static double? Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, double?> selector) { throw null; }
-
-        public static int? Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int?> selector) { throw null; }
-
-        public static long? Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, long?> selector) { throw null; }
-
-        public static float? Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float?> selector) { throw null; }
-
-        public static float Sum<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, float> selector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Take<TSource>(this Collections.Generic.IEnumerable<TSource> source, int count) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, bool> predicate) { throw null; }
-
-        public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer) { throw null; }
-
-        public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer) { throw null; }
-
-        public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static TSource[] ToArray<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static Collections.Generic.Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector) { throw null; }
-
-        public static Collections.Generic.List<TSource> ToList<TSource>(this Collections.Generic.IEnumerable<TSource> source) { throw null; }
-
-        public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector) { throw null; }
-
-        public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer) { throw null; }
-
-        public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Union<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second, Collections.Generic.IEqualityComparer<TSource> comparer) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Union<TSource>(this Collections.Generic.IEnumerable<TSource> first, Collections.Generic.IEnumerable<TSource> second) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Where<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, bool> predicate) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TSource> Where<TSource>(this Collections.Generic.IEnumerable<TSource> source, Func<TSource, int, bool> predicate) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TResult> Zip<TFirst, TSecond, TResult>(this Collections.Generic.IEnumerable<TFirst> first, Collections.Generic.IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector) { throw null; }
-    }
-
-    public partial interface IGrouping<out TKey, out TElement> : Collections.Generic.IEnumerable<TElement>, Collections.IEnumerable
-    {
-        TKey Key { get; }
-    }
-
-    public partial interface ILookup<TKey, TElement> : Collections.Generic.IEnumerable<IGrouping<TKey, TElement>>, Collections.IEnumerable
-    {
-        int Count { get; }
-
-        Collections.Generic.IEnumerable<TElement> this[TKey key] { get; }
-
-        bool Contains(TKey key);
-    }
-
-    public partial interface IOrderedEnumerable<TElement> : Collections.Generic.IEnumerable<TElement>, Collections.IEnumerable
-    {
-        IOrderedEnumerable<TElement> CreateOrderedEnumerable<TKey>(Func<TElement, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer, bool descending);
-    }
-
-    public partial class Lookup<TKey, TElement> : Collections.Generic.IEnumerable<IGrouping<TKey, TElement>>, Collections.IEnumerable, ILookup<TKey, TElement>
-    {
-        internal Lookup() { }
-
-        public int Count { get { throw null; } }
-
-        public Collections.Generic.IEnumerable<TElement> this[TKey key] { get { throw null; } }
-
-        public Collections.Generic.IEnumerable<TResult> ApplyResultSelector<TResult>(Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult> resultSelector) { throw null; }
-
-        public bool Contains(TKey key) { throw null; }
-
-        public Collections.Generic.IEnumerator<IGrouping<TKey, TElement>> GetEnumerator() { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.linq/4.3.0/system.linq.nuspec b/src/referencePackages/src/system.linq/4.3.0/system.linq.nuspec
deleted file mode 100644
index 1e2de50a..00000000
--- a/src/referencePackages/src/system.linq/4.3.0/system.linq.nuspec
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Linq</id>
-    <version>4.3.0</version>
-    <title>System.Linq</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides classes and interfaces that supports queries that use Language-Integrated Query (LINQ).
-
-Commonly Used Types:
-System.Linq.Enumerable
-System.Linq.IGrouping&lt;TKey, TElement&gt;
-System.Linq.IOrderedEnumerable&lt;TElement&gt;
-System.Linq.ILookup&lt;TKey, TElement&gt;
-System.Linq.Lookup&lt;TKey, TElement&gt;
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Collections" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.6">
-        <dependency id="System.Collections" version="4.3.0" />
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.memory/4.5.4/System.Memory.4.5.4.csproj b/src/referencePackages/src/system.memory/4.5.4/System.Memory.4.5.4.csproj
index 3d796a11..18f6af86 100644
--- a/src/referencePackages/src/system.memory/4.5.4/System.Memory.4.5.4.csproj
+++ b/src/referencePackages/src/system.memory/4.5.4/System.Memory.4.5.4.csproj
@@ -1,23 +1,11 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.1;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Memory</AssemblyName>
     <StrongNameKeyId>Open</StrongNameKeyId>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="System.Buffers" Version="4.5.1" />
-    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
-    <PackageReference Include="System.Globalization" Version="4.3.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.CompilerServices.Unsafe" Version="4.5.3" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
-  </ItemGroup>
-
   <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
     <PackageReference Include="System.Buffers" Version="4.5.1" />
     <PackageReference Include="System.Numerics.Vectors" Version="4.4.0" />
diff --git a/src/referencePackages/src/system.memory/4.5.4/lib/netstandard1.1/System.Memory.cs b/src/referencePackages/src/system.memory/4.5.4/lib/netstandard1.1/System.Memory.cs
deleted file mode 100644
index 85ec3588..00000000
--- a/src/referencePackages/src/system.memory/4.5.4/lib/netstandard1.1/System.Memory.cs
+++ /dev/null
@@ -1,940 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
-[assembly: System.Reflection.AssemblyTitle("System.Memory")]
-[assembly: System.Reflection.AssemblyDescription("System.Memory")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Memory")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.28619.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.28619.01 @BuiltBy: dlab14-DDVSOWINAGE069 @Branch: release/2.1 @SrcCode: https://github.com/dotnet/corefx/tree/7601f4f6225089ffb291dc7d58293c7bbf5c5d4f")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyMetadata("PreferInbox", "True")]
-[assembly: System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory | System.Runtime.InteropServices.DllImportSearchPath.System32)]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.1.1")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public static partial class MemoryExtensions
-    {
-        public static ReadOnlyMemory<char> AsMemory(this string text, int start, int length) { throw null; }
-
-        public static ReadOnlyMemory<char> AsMemory(this string text, int start) { throw null; }
-
-        public static ReadOnlyMemory<char> AsMemory(this string text) { throw null; }
-
-        public static Memory<T> AsMemory<T>(this T[] array, int start, int length) { throw null; }
-
-        public static Memory<T> AsMemory<T>(this T[] array, int start) { throw null; }
-
-        public static Memory<T> AsMemory<T>(this T[] array) { throw null; }
-
-        public static Memory<T> AsMemory<T>(this ArraySegment<T> segment, int start, int length) { throw null; }
-
-        public static Memory<T> AsMemory<T>(this ArraySegment<T> segment, int start) { throw null; }
-
-        public static Memory<T> AsMemory<T>(this ArraySegment<T> segment) { throw null; }
-
-        public static ReadOnlySpan<char> AsSpan(this string text, int start, int length) { throw null; }
-
-        public static ReadOnlySpan<char> AsSpan(this string text, int start) { throw null; }
-
-        public static ReadOnlySpan<char> AsSpan(this string text) { throw null; }
-
-        public static Span<T> AsSpan<T>(this T[] array, int start, int length) { throw null; }
-
-        public static Span<T> AsSpan<T>(this T[] array, int start) { throw null; }
-
-        public static Span<T> AsSpan<T>(this T[] array) { throw null; }
-
-        public static Span<T> AsSpan<T>(this ArraySegment<T> segment, int start, int length) { throw null; }
-
-        public static Span<T> AsSpan<T>(this ArraySegment<T> segment, int start) { throw null; }
-
-        public static Span<T> AsSpan<T>(this ArraySegment<T> segment) { throw null; }
-
-        public static int BinarySearch<T>(this ReadOnlySpan<T> span, IComparable<T> comparable) { throw null; }
-
-        public static int BinarySearch<T>(this Span<T> span, IComparable<T> comparable) { throw null; }
-
-        public static int BinarySearch<T, TComparer>(this ReadOnlySpan<T> span, T value, TComparer comparer)
-            where TComparer : Collections.Generic.IComparer<T> { throw null; }
-
-        public static int BinarySearch<T, TComparable>(this ReadOnlySpan<T> span, TComparable comparable)
-            where TComparable : IComparable<T> { throw null; }
-
-        public static int BinarySearch<T, TComparer>(this Span<T> span, T value, TComparer comparer)
-            where TComparer : Collections.Generic.IComparer<T> { throw null; }
-
-        public static int BinarySearch<T, TComparable>(this Span<T> span, TComparable comparable)
-            where TComparable : IComparable<T> { throw null; }
-
-        public static int CompareTo(this ReadOnlySpan<char> span, ReadOnlySpan<char> other, StringComparison comparisonType) { throw null; }
-
-        public static bool Contains(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType) { throw null; }
-
-        public static void CopyTo<T>(this T[] source, Memory<T> destination) { }
-
-        public static void CopyTo<T>(this T[] source, Span<T> destination) { }
-
-        public static bool EndsWith(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType) { throw null; }
-
-        public static bool EndsWith<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static bool EndsWith<T>(this Span<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static bool Equals(this ReadOnlySpan<char> span, ReadOnlySpan<char> other, StringComparison comparisonType) { throw null; }
-
-        public static int IndexOf(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType) { throw null; }
-
-        public static int IndexOf<T>(this ReadOnlySpan<T> span, T value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOf<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOf<T>(this Span<T> span, T value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOf<T>(this Span<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1, T value2)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOfAny<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> values)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOfAny<T>(this Span<T> span, T value0, T value1, T value2)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOfAny<T>(this Span<T> span, T value0, T value1)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOfAny<T>(this Span<T> span, ReadOnlySpan<T> values)
-            where T : IEquatable<T> { throw null; }
-
-        public static bool IsWhiteSpace(this ReadOnlySpan<char> span) { throw null; }
-
-        public static int LastIndexOf<T>(this ReadOnlySpan<T> span, T value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOf<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOf<T>(this Span<T> span, T value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOf<T>(this Span<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1, T value2)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOfAny<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> values)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOfAny<T>(this Span<T> span, T value0, T value1, T value2)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOfAny<T>(this Span<T> span, T value0, T value1)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOfAny<T>(this Span<T> span, ReadOnlySpan<T> values)
-            where T : IEquatable<T> { throw null; }
-
-        public static bool Overlaps<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other, out int elementOffset) { throw null; }
-
-        public static bool Overlaps<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other) { throw null; }
-
-        public static bool Overlaps<T>(this Span<T> span, ReadOnlySpan<T> other, out int elementOffset) { throw null; }
-
-        public static bool Overlaps<T>(this Span<T> span, ReadOnlySpan<T> other) { throw null; }
-
-        public static void Reverse<T>(this Span<T> span) { }
-
-        public static int SequenceCompareTo<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other)
-            where T : IComparable<T> { throw null; }
-
-        public static int SequenceCompareTo<T>(this Span<T> span, ReadOnlySpan<T> other)
-            where T : IComparable<T> { throw null; }
-
-        public static bool SequenceEqual<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other)
-            where T : IEquatable<T> { throw null; }
-
-        public static bool SequenceEqual<T>(this Span<T> span, ReadOnlySpan<T> other)
-            where T : IEquatable<T> { throw null; }
-
-        public static bool StartsWith(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType) { throw null; }
-
-        public static bool StartsWith<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static bool StartsWith<T>(this Span<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int ToLower(this ReadOnlySpan<char> source, Span<char> destination, Globalization.CultureInfo culture) { throw null; }
-
-        public static int ToLowerInvariant(this ReadOnlySpan<char> source, Span<char> destination) { throw null; }
-
-        public static int ToUpper(this ReadOnlySpan<char> source, Span<char> destination, Globalization.CultureInfo culture) { throw null; }
-
-        public static int ToUpperInvariant(this ReadOnlySpan<char> source, Span<char> destination) { throw null; }
-
-        public static ReadOnlySpan<char> Trim(this ReadOnlySpan<char> span, char trimChar) { throw null; }
-
-        public static ReadOnlySpan<char> Trim(this ReadOnlySpan<char> span, ReadOnlySpan<char> trimChars) { throw null; }
-
-        public static ReadOnlySpan<char> Trim(this ReadOnlySpan<char> span) { throw null; }
-
-        public static ReadOnlySpan<char> TrimEnd(this ReadOnlySpan<char> span, char trimChar) { throw null; }
-
-        public static ReadOnlySpan<char> TrimEnd(this ReadOnlySpan<char> span, ReadOnlySpan<char> trimChars) { throw null; }
-
-        public static ReadOnlySpan<char> TrimEnd(this ReadOnlySpan<char> span) { throw null; }
-
-        public static ReadOnlySpan<char> TrimStart(this ReadOnlySpan<char> span, char trimChar) { throw null; }
-
-        public static ReadOnlySpan<char> TrimStart(this ReadOnlySpan<char> span, ReadOnlySpan<char> trimChars) { throw null; }
-
-        public static ReadOnlySpan<char> TrimStart(this ReadOnlySpan<char> span) { throw null; }
-    }
-
-    public readonly partial struct Memory<T>
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public Memory(T[] array, int start, int length) { }
-
-        public Memory(T[] array) { }
-
-        public static Memory<T> Empty { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public Span<T> Span { get { throw null; } }
-
-        public readonly void CopyTo(Memory<T> destination) { }
-
-        public readonly bool Equals(Memory<T> other) { throw null; }
-
-        public override readonly bool Equals(object obj) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static implicit operator Memory<T>(T[] array) { throw null; }
-
-        public static implicit operator Memory<T>(ArraySegment<T> segment) { throw null; }
-
-        public static implicit operator ReadOnlyMemory<T>(Memory<T> memory) { throw null; }
-
-        public readonly Buffers.MemoryHandle Pin() { throw null; }
-
-        public readonly Memory<T> Slice(int start, int length) { throw null; }
-
-        public readonly Memory<T> Slice(int start) { throw null; }
-
-        public readonly T[] ToArray() { throw null; }
-
-        public override readonly string ToString() { throw null; }
-
-        public readonly bool TryCopyTo(Memory<T> destination) { throw null; }
-    }
-
-    public readonly partial struct ReadOnlyMemory<T>
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public ReadOnlyMemory(T[] array, int start, int length) { }
-
-        public ReadOnlyMemory(T[] array) { }
-
-        public static ReadOnlyMemory<T> Empty { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public ReadOnlySpan<T> Span { get { throw null; } }
-
-        public readonly void CopyTo(Memory<T> destination) { }
-
-        public override readonly bool Equals(object obj) { throw null; }
-
-        public readonly bool Equals(ReadOnlyMemory<T> other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static implicit operator ReadOnlyMemory<T>(T[] array) { throw null; }
-
-        public static implicit operator ReadOnlyMemory<T>(ArraySegment<T> segment) { throw null; }
-
-        public readonly Buffers.MemoryHandle Pin() { throw null; }
-
-        public readonly ReadOnlyMemory<T> Slice(int start, int length) { throw null; }
-
-        public readonly ReadOnlyMemory<T> Slice(int start) { throw null; }
-
-        public readonly T[] ToArray() { throw null; }
-
-        public override readonly string ToString() { throw null; }
-
-        public readonly bool TryCopyTo(Memory<T> destination) { throw null; }
-    }
-
-    public readonly ref partial struct ReadOnlySpan<T>
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public ReadOnlySpan(T[] array, int start, int length) { }
-
-        public ReadOnlySpan(T[] array) { }
-
-        [CLSCompliant(false)]
-        public unsafe ReadOnlySpan(void* pointer, int length) { }
-
-        public static ReadOnlySpan<T> Empty { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public ref readonly T this[int index] { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public readonly void CopyTo(Span<T> destination) { }
-
-        [Obsolete("Equals() on ReadOnlySpan will always throw an exception. Use == instead.")]
-        public override readonly bool Equals(object obj) { throw null; }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        [Obsolete("GetHashCode() on ReadOnlySpan will always throw an exception.")]
-        public override readonly int GetHashCode() { throw null; }
-
-        public readonly ref readonly T GetPinnableReference() { throw null; }
-
-        public static bool operator ==(ReadOnlySpan<T> left, ReadOnlySpan<T> right) { throw null; }
-
-        public static implicit operator ReadOnlySpan<T>(T[] array) { throw null; }
-
-        public static implicit operator ReadOnlySpan<T>(ArraySegment<T> segment) { throw null; }
-
-        public static bool operator !=(ReadOnlySpan<T> left, ReadOnlySpan<T> right) { throw null; }
-
-        public readonly ReadOnlySpan<T> Slice(int start, int length) { throw null; }
-
-        public readonly ReadOnlySpan<T> Slice(int start) { throw null; }
-
-        public readonly T[] ToArray() { throw null; }
-
-        public override readonly string ToString() { throw null; }
-
-        public readonly bool TryCopyTo(Span<T> destination) { throw null; }
-
-        public ref partial struct Enumerator
-        {
-            private ReadOnlySpan<T> _span;
-            private object _dummy;
-            private int _dummyPrimitive;
-            public ref readonly T Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-        }
-    }
-
-    public readonly partial struct SequencePosition : IEquatable<SequencePosition>
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public SequencePosition(object @object, int integer) { }
-
-        public override readonly bool Equals(object obj) { throw null; }
-
-        public readonly bool Equals(SequencePosition other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public readonly int GetInteger() { throw null; }
-
-        public readonly object GetObject() { throw null; }
-    }
-
-    public readonly ref partial struct Span<T>
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public Span(T[] array, int start, int length) { }
-
-        public Span(T[] array) { }
-
-        [CLSCompliant(false)]
-        public unsafe Span(void* pointer, int length) { }
-
-        public static Span<T> Empty { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public ref T this[int index] { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public readonly void Clear() { }
-
-        public readonly void CopyTo(Span<T> destination) { }
-
-        [Obsolete("Equals() on Span will always throw an exception. Use == instead.")]
-        public override readonly bool Equals(object obj) { throw null; }
-
-        public readonly void Fill(T value) { }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        [Obsolete("GetHashCode() on Span will always throw an exception.")]
-        public override readonly int GetHashCode() { throw null; }
-
-        public readonly ref T GetPinnableReference() { throw null; }
-
-        public static bool operator ==(Span<T> left, Span<T> right) { throw null; }
-
-        public static implicit operator Span<T>(T[] array) { throw null; }
-
-        public static implicit operator Span<T>(ArraySegment<T> segment) { throw null; }
-
-        public static implicit operator ReadOnlySpan<T>(Span<T> span) { throw null; }
-
-        public static bool operator !=(Span<T> left, Span<T> right) { throw null; }
-
-        public readonly Span<T> Slice(int start, int length) { throw null; }
-
-        public readonly Span<T> Slice(int start) { throw null; }
-
-        public readonly T[] ToArray() { throw null; }
-
-        public override readonly string ToString() { throw null; }
-
-        public readonly bool TryCopyTo(Span<T> destination) { throw null; }
-
-        public ref partial struct Enumerator
-        {
-            private Span<T> _span;
-            private object _dummy;
-            private int _dummyPrimitive;
-            public ref T Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-        }
-    }
-}
-
-namespace System.Buffers
-{
-    public static partial class BuffersExtensions
-    {
-        public static void CopyTo<T>(this in ReadOnlySequence<T> source, Span<T> destination) { }
-
-        public static SequencePosition? PositionOf<T>(this in ReadOnlySequence<T> source, T value)
-            where T : IEquatable<T> { throw null; }
-
-        public static T[] ToArray<T>(this in ReadOnlySequence<T> sequence) { throw null; }
-
-        public static void Write<T>(this IBufferWriter<T> writer, ReadOnlySpan<T> value) { }
-    }
-
-    public partial interface IBufferWriter<T>
-    {
-        void Advance(int count);
-        Memory<T> GetMemory(int sizeHint = 0);
-        Span<T> GetSpan(int sizeHint = 0);
-    }
-
-    public partial interface IMemoryOwner<T> : IDisposable
-    {
-        Memory<T> Memory { get; }
-    }
-
-    public partial interface IPinnable
-    {
-        MemoryHandle Pin(int elementIndex);
-        void Unpin();
-    }
-
-    public partial struct MemoryHandle : IDisposable
-    {
-        private object _dummy;
-        private int _dummyPrimitive;
-        [CLSCompliant(false)]
-        public unsafe MemoryHandle(void* pointer, Runtime.InteropServices.GCHandle handle = default, IPinnable pinnable = null) { }
-
-        [CLSCompliant(false)]
-        public unsafe void* Pointer { get { throw null; } }
-
-        public void Dispose() { }
-    }
-
-    public abstract partial class MemoryManager<T> : IMemoryOwner<T>, IDisposable, IPinnable
-    {
-        public virtual Memory<T> Memory { get { throw null; } }
-
-        protected Memory<T> CreateMemory(int start, int length) { throw null; }
-
-        protected Memory<T> CreateMemory(int length) { throw null; }
-
-        protected abstract void Dispose(bool disposing);
-        public abstract Span<T> GetSpan();
-        public abstract MemoryHandle Pin(int elementIndex = 0);
-        void IDisposable.Dispose() { }
-
-        protected internal virtual bool TryGetArray(out ArraySegment<T> segment) { throw null; }
-
-        public abstract void Unpin();
-    }
-
-    public abstract partial class MemoryPool<T> : IDisposable
-    {
-        public abstract int MaxBufferSize { get; }
-
-        public static MemoryPool<T> Shared { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected abstract void Dispose(bool disposing);
-        public abstract IMemoryOwner<T> Rent(int minBufferSize = -1);
-    }
-
-    public enum OperationStatus
-    {
-        Done = 0,
-        DestinationTooSmall = 1,
-        NeedMoreData = 2,
-        InvalidData = 3
-    }
-
-    public abstract partial class ReadOnlySequenceSegment<T>
-    {
-        public ReadOnlyMemory<T> Memory { get { throw null; } protected set { } }
-
-        public ReadOnlySequenceSegment<T> Next { get { throw null; } protected set { } }
-
-        public long RunningIndex { get { throw null; } protected set { } }
-    }
-
-    public readonly partial struct ReadOnlySequence<T>
-    {
-        public static readonly ReadOnlySequence<T> Empty;
-        public ReadOnlySequence(T[] array, int start, int length) { }
-
-        public ReadOnlySequence(T[] array) { }
-
-        public ReadOnlySequence(ReadOnlySequenceSegment<T> startSegment, int startIndex, ReadOnlySequenceSegment<T> endSegment, int endIndex) { }
-
-        public ReadOnlySequence(ReadOnlyMemory<T> memory) { }
-
-        public SequencePosition End { get { throw null; } }
-
-        public ReadOnlyMemory<T> First { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public bool IsSingleSegment { get { throw null; } }
-
-        public long Length { get { throw null; } }
-
-        public SequencePosition Start { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        public readonly SequencePosition GetPosition(long offset, SequencePosition origin) { throw null; }
-
-        public readonly SequencePosition GetPosition(long offset) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(int start, int length) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(int start, SequencePosition end) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(long start, long length) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(long start, SequencePosition end) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(long start) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(SequencePosition start, int length) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(SequencePosition start, long length) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(SequencePosition start, SequencePosition end) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(SequencePosition start) { throw null; }
-
-        public override readonly string ToString() { throw null; }
-
-        public readonly bool TryGet(ref SequencePosition position, out ReadOnlyMemory<T> memory, bool advance = true) { throw null; }
-
-        public partial struct Enumerator
-        {
-            private ReadOnlySequence<T> _sequence;
-            private ReadOnlyMemory<T> _currentMemory;
-            private int _dummyPrimitive;
-            public Enumerator(in ReadOnlySequence<T> sequence) { }
-
-            public ReadOnlyMemory<T> Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-        }
-    }
-
-    public readonly partial struct StandardFormat : IEquatable<StandardFormat>
-    {
-        private readonly int _dummyPrimitive;
-        public const byte MaxPrecision = 99;
-        public const byte NoPrecision = 255;
-        public StandardFormat(char symbol, byte precision = 255) { }
-
-        public bool HasPrecision { get { throw null; } }
-
-        public bool IsDefault { get { throw null; } }
-
-        public byte Precision { get { throw null; } }
-
-        public char Symbol { get { throw null; } }
-
-        public readonly bool Equals(StandardFormat other) { throw null; }
-
-        public override readonly bool Equals(object obj) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(StandardFormat left, StandardFormat right) { throw null; }
-
-        public static implicit operator StandardFormat(char symbol) { throw null; }
-
-        public static bool operator !=(StandardFormat left, StandardFormat right) { throw null; }
-
-        public static StandardFormat Parse(ReadOnlySpan<char> format) { throw null; }
-
-        public static StandardFormat Parse(string format) { throw null; }
-
-        public override readonly string ToString() { throw null; }
-    }
-}
-
-namespace System.Buffers.Binary
-{
-    public static partial class BinaryPrimitives
-    {
-        public static short ReadInt16BigEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        public static short ReadInt16LittleEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        public static int ReadInt32BigEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        public static int ReadInt32LittleEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        public static long ReadInt64BigEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        public static long ReadInt64LittleEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ReadUInt16BigEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ReadUInt16LittleEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ReadUInt32BigEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ReadUInt32LittleEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ReadUInt64BigEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ReadUInt64LittleEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        public static byte ReverseEndianness(byte value) { throw null; }
-
-        public static short ReverseEndianness(short value) { throw null; }
-
-        public static int ReverseEndianness(int value) { throw null; }
-
-        public static long ReverseEndianness(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ReverseEndianness(sbyte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ReverseEndianness(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ReverseEndianness(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ReverseEndianness(ulong value) { throw null; }
-
-        public static bool TryReadInt16BigEndian(ReadOnlySpan<byte> source, out short value) { throw null; }
-
-        public static bool TryReadInt16LittleEndian(ReadOnlySpan<byte> source, out short value) { throw null; }
-
-        public static bool TryReadInt32BigEndian(ReadOnlySpan<byte> source, out int value) { throw null; }
-
-        public static bool TryReadInt32LittleEndian(ReadOnlySpan<byte> source, out int value) { throw null; }
-
-        public static bool TryReadInt64BigEndian(ReadOnlySpan<byte> source, out long value) { throw null; }
-
-        public static bool TryReadInt64LittleEndian(ReadOnlySpan<byte> source, out long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryReadUInt16BigEndian(ReadOnlySpan<byte> source, out ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryReadUInt16LittleEndian(ReadOnlySpan<byte> source, out ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryReadUInt32BigEndian(ReadOnlySpan<byte> source, out uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryReadUInt32LittleEndian(ReadOnlySpan<byte> source, out uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryReadUInt64BigEndian(ReadOnlySpan<byte> source, out ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryReadUInt64LittleEndian(ReadOnlySpan<byte> source, out ulong value) { throw null; }
-
-        public static bool TryWriteInt16BigEndian(Span<byte> destination, short value) { throw null; }
-
-        public static bool TryWriteInt16LittleEndian(Span<byte> destination, short value) { throw null; }
-
-        public static bool TryWriteInt32BigEndian(Span<byte> destination, int value) { throw null; }
-
-        public static bool TryWriteInt32LittleEndian(Span<byte> destination, int value) { throw null; }
-
-        public static bool TryWriteInt64BigEndian(Span<byte> destination, long value) { throw null; }
-
-        public static bool TryWriteInt64LittleEndian(Span<byte> destination, long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryWriteUInt16BigEndian(Span<byte> destination, ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryWriteUInt16LittleEndian(Span<byte> destination, ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryWriteUInt32BigEndian(Span<byte> destination, uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryWriteUInt32LittleEndian(Span<byte> destination, uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryWriteUInt64BigEndian(Span<byte> destination, ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryWriteUInt64LittleEndian(Span<byte> destination, ulong value) { throw null; }
-
-        public static void WriteInt16BigEndian(Span<byte> destination, short value) { }
-
-        public static void WriteInt16LittleEndian(Span<byte> destination, short value) { }
-
-        public static void WriteInt32BigEndian(Span<byte> destination, int value) { }
-
-        public static void WriteInt32LittleEndian(Span<byte> destination, int value) { }
-
-        public static void WriteInt64BigEndian(Span<byte> destination, long value) { }
-
-        public static void WriteInt64LittleEndian(Span<byte> destination, long value) { }
-
-        [CLSCompliant(false)]
-        public static void WriteUInt16BigEndian(Span<byte> destination, ushort value) { }
-
-        [CLSCompliant(false)]
-        public static void WriteUInt16LittleEndian(Span<byte> destination, ushort value) { }
-
-        [CLSCompliant(false)]
-        public static void WriteUInt32BigEndian(Span<byte> destination, uint value) { }
-
-        [CLSCompliant(false)]
-        public static void WriteUInt32LittleEndian(Span<byte> destination, uint value) { }
-
-        [CLSCompliant(false)]
-        public static void WriteUInt64BigEndian(Span<byte> destination, ulong value) { }
-
-        [CLSCompliant(false)]
-        public static void WriteUInt64LittleEndian(Span<byte> destination, ulong value) { }
-    }
-}
-
-namespace System.Buffers.Text
-{
-    public static partial class Base64
-    {
-        public static OperationStatus DecodeFromUtf8(ReadOnlySpan<byte> utf8, Span<byte> bytes, out int bytesConsumed, out int bytesWritten, bool isFinalBlock = true) { throw null; }
-
-        public static OperationStatus DecodeFromUtf8InPlace(Span<byte> buffer, out int bytesWritten) { throw null; }
-
-        public static OperationStatus EncodeToUtf8(ReadOnlySpan<byte> bytes, Span<byte> utf8, out int bytesConsumed, out int bytesWritten, bool isFinalBlock = true) { throw null; }
-
-        public static OperationStatus EncodeToUtf8InPlace(Span<byte> buffer, int dataLength, out int bytesWritten) { throw null; }
-
-        public static int GetMaxDecodedFromUtf8Length(int length) { throw null; }
-
-        public static int GetMaxEncodedToUtf8Length(int length) { throw null; }
-    }
-
-    public static partial class Utf8Formatter
-    {
-        public static bool TryFormat(bool value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(byte value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(DateTime value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(DateTimeOffset value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(decimal value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(double value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(Guid value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(short value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(int value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(long value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryFormat(sbyte value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(float value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(TimeSpan value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryFormat(ushort value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryFormat(uint value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryFormat(ulong value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-    }
-
-    public static partial class Utf8Parser
-    {
-        public static bool TryParse(ReadOnlySpan<byte> source, out bool value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out byte value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out DateTime value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out DateTimeOffset value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out decimal value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out double value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out Guid value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out short value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out int value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out long value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryParse(ReadOnlySpan<byte> source, out sbyte value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out float value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out TimeSpan value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryParse(ReadOnlySpan<byte> source, out ushort value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryParse(ReadOnlySpan<byte> source, out uint value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryParse(ReadOnlySpan<byte> source, out ulong value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-    }
-}
-
-namespace System.Runtime.InteropServices
-{
-    public static partial class MemoryMarshal
-    {
-        public static ReadOnlySpan<byte> AsBytes<T>(ReadOnlySpan<T> span)
-            where T : struct { throw null; }
-
-        public static Span<byte> AsBytes<T>(Span<T> span)
-            where T : struct { throw null; }
-
-        public static Memory<T> AsMemory<T>(ReadOnlyMemory<T> memory) { throw null; }
-
-        public static ReadOnlySpan<TTo> Cast<TFrom, TTo>(ReadOnlySpan<TFrom> span)
-            where TFrom : struct where TTo : struct { throw null; }
-
-        public static Span<TTo> Cast<TFrom, TTo>(Span<TFrom> span)
-            where TFrom : struct where TTo : struct { throw null; }
-
-        public static Memory<T> CreateFromPinnedArray<T>(T[] array, int start, int length) { throw null; }
-
-        public static ref T GetReference<T>(ReadOnlySpan<T> span) { throw null; }
-
-        public static ref T GetReference<T>(Span<T> span) { throw null; }
-
-        public static T Read<T>(ReadOnlySpan<byte> source)
-            where T : struct { throw null; }
-
-        public static Collections.Generic.IEnumerable<T> ToEnumerable<T>(ReadOnlyMemory<T> memory) { throw null; }
-
-        public static bool TryGetArray<T>(ReadOnlyMemory<T> memory, out ArraySegment<T> segment) { throw null; }
-
-        public static bool TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T> memory, out TManager manager, out int start, out int length)
-            where TManager : Buffers.MemoryManager<T> { throw null; }
-
-        public static bool TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T> memory, out TManager manager)
-            where TManager : Buffers.MemoryManager<T> { throw null; }
-
-        public static bool TryGetString(ReadOnlyMemory<char> memory, out string text, out int start, out int length) { throw null; }
-
-        public static bool TryRead<T>(ReadOnlySpan<byte> source, out T value)
-            where T : struct { throw null; }
-
-        public static bool TryWrite<T>(Span<byte> destination, ref T value)
-            where T : struct { throw null; }
-
-        public static void Write<T>(Span<byte> destination, ref T value)
-            where T : struct { }
-    }
-
-    public static partial class SequenceMarshal
-    {
-        public static bool TryGetArray<T>(Buffers.ReadOnlySequence<T> sequence, out ArraySegment<T> segment) { throw null; }
-
-        public static bool TryGetReadOnlyMemory<T>(Buffers.ReadOnlySequence<T> sequence, out ReadOnlyMemory<T> memory) { throw null; }
-
-        public static bool TryGetReadOnlySequenceSegment<T>(Buffers.ReadOnlySequence<T> sequence, out Buffers.ReadOnlySequenceSegment<T> startSegment, out int startIndex, out Buffers.ReadOnlySequenceSegment<T> endSegment, out int endIndex) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.memory/4.5.4/system.memory.nuspec b/src/referencePackages/src/system.memory/4.5.4/system.memory.nuspec
index 35ea0510..50588fbf 100644
--- a/src/referencePackages/src/system.memory/4.5.4/system.memory.nuspec
+++ b/src/referencePackages/src/system.memory/4.5.4/system.memory.nuspec
@@ -28,17 +28,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <copyright>© Microsoft Corporation. All rights reserved.</copyright>
     <serviceable>true</serviceable>
     <dependencies>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="System.Buffers" version="4.5.1" />
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" />
-        <dependency id="System.Globalization" version="4.3.0" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.CompilerServices.Unsafe" version="4.5.3" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" />
-      </group>
       <group targetFramework=".NETStandard2.0">
         <dependency id="System.Buffers" version="4.5.1" />
         <dependency id="System.Numerics.Vectors" version="4.4.0" />
diff --git a/src/referencePackages/src/system.memory/4.5.5/System.Memory.4.5.5.csproj b/src/referencePackages/src/system.memory/4.5.5/System.Memory.4.5.5.csproj
index 3d796a11..18f6af86 100644
--- a/src/referencePackages/src/system.memory/4.5.5/System.Memory.4.5.5.csproj
+++ b/src/referencePackages/src/system.memory/4.5.5/System.Memory.4.5.5.csproj
@@ -1,23 +1,11 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.1;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Memory</AssemblyName>
     <StrongNameKeyId>Open</StrongNameKeyId>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="System.Buffers" Version="4.5.1" />
-    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
-    <PackageReference Include="System.Globalization" Version="4.3.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.CompilerServices.Unsafe" Version="4.5.3" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
-  </ItemGroup>
-
   <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
     <PackageReference Include="System.Buffers" Version="4.5.1" />
     <PackageReference Include="System.Numerics.Vectors" Version="4.4.0" />
diff --git a/src/referencePackages/src/system.memory/4.5.5/lib/netstandard1.1/System.Memory.cs b/src/referencePackages/src/system.memory/4.5.5/lib/netstandard1.1/System.Memory.cs
deleted file mode 100644
index 487cb4cc..00000000
--- a/src/referencePackages/src/system.memory/4.5.5/lib/netstandard1.1/System.Memory.cs
+++ /dev/null
@@ -1,940 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
-[assembly: System.Reflection.AssemblyTitle("System.Memory")]
-[assembly: System.Reflection.AssemblyDescription("System.Memory")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Memory")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.31308.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.31308.01 @BuiltBy: cloudtest-841353dfc000000 @Branch: release/2.1-MSRC @SrcCode: https://github.com/dotnet/corefx/tree/32b491939fbd125f304031c35038b1e14b4e3958")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyMetadata("PreferInbox", "True")]
-[assembly: System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory | System.Runtime.InteropServices.DllImportSearchPath.System32)]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.1.2")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public static partial class MemoryExtensions
-    {
-        public static ReadOnlyMemory<char> AsMemory(this string text, int start, int length) { throw null; }
-
-        public static ReadOnlyMemory<char> AsMemory(this string text, int start) { throw null; }
-
-        public static ReadOnlyMemory<char> AsMemory(this string text) { throw null; }
-
-        public static Memory<T> AsMemory<T>(this T[] array, int start, int length) { throw null; }
-
-        public static Memory<T> AsMemory<T>(this T[] array, int start) { throw null; }
-
-        public static Memory<T> AsMemory<T>(this T[] array) { throw null; }
-
-        public static Memory<T> AsMemory<T>(this ArraySegment<T> segment, int start, int length) { throw null; }
-
-        public static Memory<T> AsMemory<T>(this ArraySegment<T> segment, int start) { throw null; }
-
-        public static Memory<T> AsMemory<T>(this ArraySegment<T> segment) { throw null; }
-
-        public static ReadOnlySpan<char> AsSpan(this string text, int start, int length) { throw null; }
-
-        public static ReadOnlySpan<char> AsSpan(this string text, int start) { throw null; }
-
-        public static ReadOnlySpan<char> AsSpan(this string text) { throw null; }
-
-        public static Span<T> AsSpan<T>(this T[] array, int start, int length) { throw null; }
-
-        public static Span<T> AsSpan<T>(this T[] array, int start) { throw null; }
-
-        public static Span<T> AsSpan<T>(this T[] array) { throw null; }
-
-        public static Span<T> AsSpan<T>(this ArraySegment<T> segment, int start, int length) { throw null; }
-
-        public static Span<T> AsSpan<T>(this ArraySegment<T> segment, int start) { throw null; }
-
-        public static Span<T> AsSpan<T>(this ArraySegment<T> segment) { throw null; }
-
-        public static int BinarySearch<T>(this ReadOnlySpan<T> span, IComparable<T> comparable) { throw null; }
-
-        public static int BinarySearch<T>(this Span<T> span, IComparable<T> comparable) { throw null; }
-
-        public static int BinarySearch<T, TComparer>(this ReadOnlySpan<T> span, T value, TComparer comparer)
-            where TComparer : Collections.Generic.IComparer<T> { throw null; }
-
-        public static int BinarySearch<T, TComparable>(this ReadOnlySpan<T> span, TComparable comparable)
-            where TComparable : IComparable<T> { throw null; }
-
-        public static int BinarySearch<T, TComparer>(this Span<T> span, T value, TComparer comparer)
-            where TComparer : Collections.Generic.IComparer<T> { throw null; }
-
-        public static int BinarySearch<T, TComparable>(this Span<T> span, TComparable comparable)
-            where TComparable : IComparable<T> { throw null; }
-
-        public static int CompareTo(this ReadOnlySpan<char> span, ReadOnlySpan<char> other, StringComparison comparisonType) { throw null; }
-
-        public static bool Contains(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType) { throw null; }
-
-        public static void CopyTo<T>(this T[] source, Memory<T> destination) { }
-
-        public static void CopyTo<T>(this T[] source, Span<T> destination) { }
-
-        public static bool EndsWith(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType) { throw null; }
-
-        public static bool EndsWith<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static bool EndsWith<T>(this Span<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static bool Equals(this ReadOnlySpan<char> span, ReadOnlySpan<char> other, StringComparison comparisonType) { throw null; }
-
-        public static int IndexOf(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType) { throw null; }
-
-        public static int IndexOf<T>(this ReadOnlySpan<T> span, T value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOf<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOf<T>(this Span<T> span, T value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOf<T>(this Span<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1, T value2)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOfAny<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> values)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOfAny<T>(this Span<T> span, T value0, T value1, T value2)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOfAny<T>(this Span<T> span, T value0, T value1)
-            where T : IEquatable<T> { throw null; }
-
-        public static int IndexOfAny<T>(this Span<T> span, ReadOnlySpan<T> values)
-            where T : IEquatable<T> { throw null; }
-
-        public static bool IsWhiteSpace(this ReadOnlySpan<char> span) { throw null; }
-
-        public static int LastIndexOf<T>(this ReadOnlySpan<T> span, T value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOf<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOf<T>(this Span<T> span, T value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOf<T>(this Span<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1, T value2)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOfAny<T>(this ReadOnlySpan<T> span, T value0, T value1)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOfAny<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> values)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOfAny<T>(this Span<T> span, T value0, T value1, T value2)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOfAny<T>(this Span<T> span, T value0, T value1)
-            where T : IEquatable<T> { throw null; }
-
-        public static int LastIndexOfAny<T>(this Span<T> span, ReadOnlySpan<T> values)
-            where T : IEquatable<T> { throw null; }
-
-        public static bool Overlaps<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other, out int elementOffset) { throw null; }
-
-        public static bool Overlaps<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other) { throw null; }
-
-        public static bool Overlaps<T>(this Span<T> span, ReadOnlySpan<T> other, out int elementOffset) { throw null; }
-
-        public static bool Overlaps<T>(this Span<T> span, ReadOnlySpan<T> other) { throw null; }
-
-        public static void Reverse<T>(this Span<T> span) { }
-
-        public static int SequenceCompareTo<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other)
-            where T : IComparable<T> { throw null; }
-
-        public static int SequenceCompareTo<T>(this Span<T> span, ReadOnlySpan<T> other)
-            where T : IComparable<T> { throw null; }
-
-        public static bool SequenceEqual<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> other)
-            where T : IEquatable<T> { throw null; }
-
-        public static bool SequenceEqual<T>(this Span<T> span, ReadOnlySpan<T> other)
-            where T : IEquatable<T> { throw null; }
-
-        public static bool StartsWith(this ReadOnlySpan<char> span, ReadOnlySpan<char> value, StringComparison comparisonType) { throw null; }
-
-        public static bool StartsWith<T>(this ReadOnlySpan<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static bool StartsWith<T>(this Span<T> span, ReadOnlySpan<T> value)
-            where T : IEquatable<T> { throw null; }
-
-        public static int ToLower(this ReadOnlySpan<char> source, Span<char> destination, Globalization.CultureInfo culture) { throw null; }
-
-        public static int ToLowerInvariant(this ReadOnlySpan<char> source, Span<char> destination) { throw null; }
-
-        public static int ToUpper(this ReadOnlySpan<char> source, Span<char> destination, Globalization.CultureInfo culture) { throw null; }
-
-        public static int ToUpperInvariant(this ReadOnlySpan<char> source, Span<char> destination) { throw null; }
-
-        public static ReadOnlySpan<char> Trim(this ReadOnlySpan<char> span, char trimChar) { throw null; }
-
-        public static ReadOnlySpan<char> Trim(this ReadOnlySpan<char> span, ReadOnlySpan<char> trimChars) { throw null; }
-
-        public static ReadOnlySpan<char> Trim(this ReadOnlySpan<char> span) { throw null; }
-
-        public static ReadOnlySpan<char> TrimEnd(this ReadOnlySpan<char> span, char trimChar) { throw null; }
-
-        public static ReadOnlySpan<char> TrimEnd(this ReadOnlySpan<char> span, ReadOnlySpan<char> trimChars) { throw null; }
-
-        public static ReadOnlySpan<char> TrimEnd(this ReadOnlySpan<char> span) { throw null; }
-
-        public static ReadOnlySpan<char> TrimStart(this ReadOnlySpan<char> span, char trimChar) { throw null; }
-
-        public static ReadOnlySpan<char> TrimStart(this ReadOnlySpan<char> span, ReadOnlySpan<char> trimChars) { throw null; }
-
-        public static ReadOnlySpan<char> TrimStart(this ReadOnlySpan<char> span) { throw null; }
-    }
-
-    public readonly partial struct Memory<T>
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public Memory(T[] array, int start, int length) { }
-
-        public Memory(T[] array) { }
-
-        public static Memory<T> Empty { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public Span<T> Span { get { throw null; } }
-
-        public readonly void CopyTo(Memory<T> destination) { }
-
-        public readonly bool Equals(Memory<T> other) { throw null; }
-
-        public override readonly bool Equals(object obj) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static implicit operator Memory<T>(T[] array) { throw null; }
-
-        public static implicit operator Memory<T>(ArraySegment<T> segment) { throw null; }
-
-        public static implicit operator ReadOnlyMemory<T>(Memory<T> memory) { throw null; }
-
-        public readonly Buffers.MemoryHandle Pin() { throw null; }
-
-        public readonly Memory<T> Slice(int start, int length) { throw null; }
-
-        public readonly Memory<T> Slice(int start) { throw null; }
-
-        public readonly T[] ToArray() { throw null; }
-
-        public override readonly string ToString() { throw null; }
-
-        public readonly bool TryCopyTo(Memory<T> destination) { throw null; }
-    }
-
-    public readonly partial struct ReadOnlyMemory<T>
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public ReadOnlyMemory(T[] array, int start, int length) { }
-
-        public ReadOnlyMemory(T[] array) { }
-
-        public static ReadOnlyMemory<T> Empty { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public ReadOnlySpan<T> Span { get { throw null; } }
-
-        public readonly void CopyTo(Memory<T> destination) { }
-
-        public override readonly bool Equals(object obj) { throw null; }
-
-        public readonly bool Equals(ReadOnlyMemory<T> other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static implicit operator ReadOnlyMemory<T>(T[] array) { throw null; }
-
-        public static implicit operator ReadOnlyMemory<T>(ArraySegment<T> segment) { throw null; }
-
-        public readonly Buffers.MemoryHandle Pin() { throw null; }
-
-        public readonly ReadOnlyMemory<T> Slice(int start, int length) { throw null; }
-
-        public readonly ReadOnlyMemory<T> Slice(int start) { throw null; }
-
-        public readonly T[] ToArray() { throw null; }
-
-        public override readonly string ToString() { throw null; }
-
-        public readonly bool TryCopyTo(Memory<T> destination) { throw null; }
-    }
-
-    public readonly ref partial struct ReadOnlySpan<T>
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public ReadOnlySpan(T[] array, int start, int length) { }
-
-        public ReadOnlySpan(T[] array) { }
-
-        [CLSCompliant(false)]
-        public unsafe ReadOnlySpan(void* pointer, int length) { }
-
-        public static ReadOnlySpan<T> Empty { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public ref readonly T this[int index] { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public readonly void CopyTo(Span<T> destination) { }
-
-        [Obsolete("Equals() on ReadOnlySpan will always throw an exception. Use == instead.")]
-        public override readonly bool Equals(object obj) { throw null; }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        [Obsolete("GetHashCode() on ReadOnlySpan will always throw an exception.")]
-        public override readonly int GetHashCode() { throw null; }
-
-        public readonly ref readonly T GetPinnableReference() { throw null; }
-
-        public static bool operator ==(ReadOnlySpan<T> left, ReadOnlySpan<T> right) { throw null; }
-
-        public static implicit operator ReadOnlySpan<T>(T[] array) { throw null; }
-
-        public static implicit operator ReadOnlySpan<T>(ArraySegment<T> segment) { throw null; }
-
-        public static bool operator !=(ReadOnlySpan<T> left, ReadOnlySpan<T> right) { throw null; }
-
-        public readonly ReadOnlySpan<T> Slice(int start, int length) { throw null; }
-
-        public readonly ReadOnlySpan<T> Slice(int start) { throw null; }
-
-        public readonly T[] ToArray() { throw null; }
-
-        public override readonly string ToString() { throw null; }
-
-        public readonly bool TryCopyTo(Span<T> destination) { throw null; }
-
-        public ref partial struct Enumerator
-        {
-            private ReadOnlySpan<T> _span;
-            private object _dummy;
-            private int _dummyPrimitive;
-            public ref readonly T Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-        }
-    }
-
-    public readonly partial struct SequencePosition : IEquatable<SequencePosition>
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public SequencePosition(object @object, int integer) { }
-
-        public override readonly bool Equals(object obj) { throw null; }
-
-        public readonly bool Equals(SequencePosition other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public readonly int GetInteger() { throw null; }
-
-        public readonly object GetObject() { throw null; }
-    }
-
-    public readonly ref partial struct Span<T>
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public Span(T[] array, int start, int length) { }
-
-        public Span(T[] array) { }
-
-        [CLSCompliant(false)]
-        public unsafe Span(void* pointer, int length) { }
-
-        public static Span<T> Empty { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public ref T this[int index] { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public readonly void Clear() { }
-
-        public readonly void CopyTo(Span<T> destination) { }
-
-        [Obsolete("Equals() on Span will always throw an exception. Use == instead.")]
-        public override readonly bool Equals(object obj) { throw null; }
-
-        public readonly void Fill(T value) { }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        [Obsolete("GetHashCode() on Span will always throw an exception.")]
-        public override readonly int GetHashCode() { throw null; }
-
-        public readonly ref T GetPinnableReference() { throw null; }
-
-        public static bool operator ==(Span<T> left, Span<T> right) { throw null; }
-
-        public static implicit operator Span<T>(T[] array) { throw null; }
-
-        public static implicit operator Span<T>(ArraySegment<T> segment) { throw null; }
-
-        public static implicit operator ReadOnlySpan<T>(Span<T> span) { throw null; }
-
-        public static bool operator !=(Span<T> left, Span<T> right) { throw null; }
-
-        public readonly Span<T> Slice(int start, int length) { throw null; }
-
-        public readonly Span<T> Slice(int start) { throw null; }
-
-        public readonly T[] ToArray() { throw null; }
-
-        public override readonly string ToString() { throw null; }
-
-        public readonly bool TryCopyTo(Span<T> destination) { throw null; }
-
-        public ref partial struct Enumerator
-        {
-            private Span<T> _span;
-            private object _dummy;
-            private int _dummyPrimitive;
-            public ref T Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-        }
-    }
-}
-
-namespace System.Buffers
-{
-    public static partial class BuffersExtensions
-    {
-        public static void CopyTo<T>(this in ReadOnlySequence<T> source, Span<T> destination) { }
-
-        public static SequencePosition? PositionOf<T>(this in ReadOnlySequence<T> source, T value)
-            where T : IEquatable<T> { throw null; }
-
-        public static T[] ToArray<T>(this in ReadOnlySequence<T> sequence) { throw null; }
-
-        public static void Write<T>(this IBufferWriter<T> writer, ReadOnlySpan<T> value) { }
-    }
-
-    public partial interface IBufferWriter<T>
-    {
-        void Advance(int count);
-        Memory<T> GetMemory(int sizeHint = 0);
-        Span<T> GetSpan(int sizeHint = 0);
-    }
-
-    public partial interface IMemoryOwner<T> : IDisposable
-    {
-        Memory<T> Memory { get; }
-    }
-
-    public partial interface IPinnable
-    {
-        MemoryHandle Pin(int elementIndex);
-        void Unpin();
-    }
-
-    public partial struct MemoryHandle : IDisposable
-    {
-        private object _dummy;
-        private int _dummyPrimitive;
-        [CLSCompliant(false)]
-        public unsafe MemoryHandle(void* pointer, Runtime.InteropServices.GCHandle handle = default, IPinnable pinnable = null) { }
-
-        [CLSCompliant(false)]
-        public unsafe void* Pointer { get { throw null; } }
-
-        public void Dispose() { }
-    }
-
-    public abstract partial class MemoryManager<T> : IMemoryOwner<T>, IDisposable, IPinnable
-    {
-        public virtual Memory<T> Memory { get { throw null; } }
-
-        protected Memory<T> CreateMemory(int start, int length) { throw null; }
-
-        protected Memory<T> CreateMemory(int length) { throw null; }
-
-        protected abstract void Dispose(bool disposing);
-        public abstract Span<T> GetSpan();
-        public abstract MemoryHandle Pin(int elementIndex = 0);
-        void IDisposable.Dispose() { }
-
-        protected internal virtual bool TryGetArray(out ArraySegment<T> segment) { throw null; }
-
-        public abstract void Unpin();
-    }
-
-    public abstract partial class MemoryPool<T> : IDisposable
-    {
-        public abstract int MaxBufferSize { get; }
-
-        public static MemoryPool<T> Shared { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected abstract void Dispose(bool disposing);
-        public abstract IMemoryOwner<T> Rent(int minBufferSize = -1);
-    }
-
-    public enum OperationStatus
-    {
-        Done = 0,
-        DestinationTooSmall = 1,
-        NeedMoreData = 2,
-        InvalidData = 3
-    }
-
-    public abstract partial class ReadOnlySequenceSegment<T>
-    {
-        public ReadOnlyMemory<T> Memory { get { throw null; } protected set { } }
-
-        public ReadOnlySequenceSegment<T> Next { get { throw null; } protected set { } }
-
-        public long RunningIndex { get { throw null; } protected set { } }
-    }
-
-    public readonly partial struct ReadOnlySequence<T>
-    {
-        public static readonly ReadOnlySequence<T> Empty;
-        public ReadOnlySequence(T[] array, int start, int length) { }
-
-        public ReadOnlySequence(T[] array) { }
-
-        public ReadOnlySequence(ReadOnlySequenceSegment<T> startSegment, int startIndex, ReadOnlySequenceSegment<T> endSegment, int endIndex) { }
-
-        public ReadOnlySequence(ReadOnlyMemory<T> memory) { }
-
-        public SequencePosition End { get { throw null; } }
-
-        public ReadOnlyMemory<T> First { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public bool IsSingleSegment { get { throw null; } }
-
-        public long Length { get { throw null; } }
-
-        public SequencePosition Start { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        public readonly SequencePosition GetPosition(long offset, SequencePosition origin) { throw null; }
-
-        public readonly SequencePosition GetPosition(long offset) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(int start, int length) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(int start, SequencePosition end) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(long start, long length) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(long start, SequencePosition end) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(long start) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(SequencePosition start, int length) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(SequencePosition start, long length) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(SequencePosition start, SequencePosition end) { throw null; }
-
-        public readonly ReadOnlySequence<T> Slice(SequencePosition start) { throw null; }
-
-        public override readonly string ToString() { throw null; }
-
-        public readonly bool TryGet(ref SequencePosition position, out ReadOnlyMemory<T> memory, bool advance = true) { throw null; }
-
-        public partial struct Enumerator
-        {
-            private ReadOnlySequence<T> _sequence;
-            private ReadOnlyMemory<T> _currentMemory;
-            private int _dummyPrimitive;
-            public Enumerator(in ReadOnlySequence<T> sequence) { }
-
-            public ReadOnlyMemory<T> Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-        }
-    }
-
-    public readonly partial struct StandardFormat : IEquatable<StandardFormat>
-    {
-        private readonly int _dummyPrimitive;
-        public const byte MaxPrecision = 99;
-        public const byte NoPrecision = 255;
-        public StandardFormat(char symbol, byte precision = 255) { }
-
-        public bool HasPrecision { get { throw null; } }
-
-        public bool IsDefault { get { throw null; } }
-
-        public byte Precision { get { throw null; } }
-
-        public char Symbol { get { throw null; } }
-
-        public readonly bool Equals(StandardFormat other) { throw null; }
-
-        public override readonly bool Equals(object obj) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(StandardFormat left, StandardFormat right) { throw null; }
-
-        public static implicit operator StandardFormat(char symbol) { throw null; }
-
-        public static bool operator !=(StandardFormat left, StandardFormat right) { throw null; }
-
-        public static StandardFormat Parse(ReadOnlySpan<char> format) { throw null; }
-
-        public static StandardFormat Parse(string format) { throw null; }
-
-        public override readonly string ToString() { throw null; }
-    }
-}
-
-namespace System.Buffers.Binary
-{
-    public static partial class BinaryPrimitives
-    {
-        public static short ReadInt16BigEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        public static short ReadInt16LittleEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        public static int ReadInt32BigEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        public static int ReadInt32LittleEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        public static long ReadInt64BigEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        public static long ReadInt64LittleEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ReadUInt16BigEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ReadUInt16LittleEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ReadUInt32BigEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ReadUInt32LittleEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ReadUInt64BigEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ReadUInt64LittleEndian(ReadOnlySpan<byte> source) { throw null; }
-
-        public static byte ReverseEndianness(byte value) { throw null; }
-
-        public static short ReverseEndianness(short value) { throw null; }
-
-        public static int ReverseEndianness(int value) { throw null; }
-
-        public static long ReverseEndianness(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ReverseEndianness(sbyte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ReverseEndianness(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ReverseEndianness(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ReverseEndianness(ulong value) { throw null; }
-
-        public static bool TryReadInt16BigEndian(ReadOnlySpan<byte> source, out short value) { throw null; }
-
-        public static bool TryReadInt16LittleEndian(ReadOnlySpan<byte> source, out short value) { throw null; }
-
-        public static bool TryReadInt32BigEndian(ReadOnlySpan<byte> source, out int value) { throw null; }
-
-        public static bool TryReadInt32LittleEndian(ReadOnlySpan<byte> source, out int value) { throw null; }
-
-        public static bool TryReadInt64BigEndian(ReadOnlySpan<byte> source, out long value) { throw null; }
-
-        public static bool TryReadInt64LittleEndian(ReadOnlySpan<byte> source, out long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryReadUInt16BigEndian(ReadOnlySpan<byte> source, out ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryReadUInt16LittleEndian(ReadOnlySpan<byte> source, out ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryReadUInt32BigEndian(ReadOnlySpan<byte> source, out uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryReadUInt32LittleEndian(ReadOnlySpan<byte> source, out uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryReadUInt64BigEndian(ReadOnlySpan<byte> source, out ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryReadUInt64LittleEndian(ReadOnlySpan<byte> source, out ulong value) { throw null; }
-
-        public static bool TryWriteInt16BigEndian(Span<byte> destination, short value) { throw null; }
-
-        public static bool TryWriteInt16LittleEndian(Span<byte> destination, short value) { throw null; }
-
-        public static bool TryWriteInt32BigEndian(Span<byte> destination, int value) { throw null; }
-
-        public static bool TryWriteInt32LittleEndian(Span<byte> destination, int value) { throw null; }
-
-        public static bool TryWriteInt64BigEndian(Span<byte> destination, long value) { throw null; }
-
-        public static bool TryWriteInt64LittleEndian(Span<byte> destination, long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryWriteUInt16BigEndian(Span<byte> destination, ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryWriteUInt16LittleEndian(Span<byte> destination, ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryWriteUInt32BigEndian(Span<byte> destination, uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryWriteUInt32LittleEndian(Span<byte> destination, uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryWriteUInt64BigEndian(Span<byte> destination, ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryWriteUInt64LittleEndian(Span<byte> destination, ulong value) { throw null; }
-
-        public static void WriteInt16BigEndian(Span<byte> destination, short value) { }
-
-        public static void WriteInt16LittleEndian(Span<byte> destination, short value) { }
-
-        public static void WriteInt32BigEndian(Span<byte> destination, int value) { }
-
-        public static void WriteInt32LittleEndian(Span<byte> destination, int value) { }
-
-        public static void WriteInt64BigEndian(Span<byte> destination, long value) { }
-
-        public static void WriteInt64LittleEndian(Span<byte> destination, long value) { }
-
-        [CLSCompliant(false)]
-        public static void WriteUInt16BigEndian(Span<byte> destination, ushort value) { }
-
-        [CLSCompliant(false)]
-        public static void WriteUInt16LittleEndian(Span<byte> destination, ushort value) { }
-
-        [CLSCompliant(false)]
-        public static void WriteUInt32BigEndian(Span<byte> destination, uint value) { }
-
-        [CLSCompliant(false)]
-        public static void WriteUInt32LittleEndian(Span<byte> destination, uint value) { }
-
-        [CLSCompliant(false)]
-        public static void WriteUInt64BigEndian(Span<byte> destination, ulong value) { }
-
-        [CLSCompliant(false)]
-        public static void WriteUInt64LittleEndian(Span<byte> destination, ulong value) { }
-    }
-}
-
-namespace System.Buffers.Text
-{
-    public static partial class Base64
-    {
-        public static OperationStatus DecodeFromUtf8(ReadOnlySpan<byte> utf8, Span<byte> bytes, out int bytesConsumed, out int bytesWritten, bool isFinalBlock = true) { throw null; }
-
-        public static OperationStatus DecodeFromUtf8InPlace(Span<byte> buffer, out int bytesWritten) { throw null; }
-
-        public static OperationStatus EncodeToUtf8(ReadOnlySpan<byte> bytes, Span<byte> utf8, out int bytesConsumed, out int bytesWritten, bool isFinalBlock = true) { throw null; }
-
-        public static OperationStatus EncodeToUtf8InPlace(Span<byte> buffer, int dataLength, out int bytesWritten) { throw null; }
-
-        public static int GetMaxDecodedFromUtf8Length(int length) { throw null; }
-
-        public static int GetMaxEncodedToUtf8Length(int length) { throw null; }
-    }
-
-    public static partial class Utf8Formatter
-    {
-        public static bool TryFormat(bool value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(byte value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(DateTime value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(DateTimeOffset value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(decimal value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(double value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(Guid value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(short value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(int value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(long value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryFormat(sbyte value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(float value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        public static bool TryFormat(TimeSpan value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryFormat(ushort value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryFormat(uint value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryFormat(ulong value, Span<byte> destination, out int bytesWritten, StandardFormat format = default) { throw null; }
-    }
-
-    public static partial class Utf8Parser
-    {
-        public static bool TryParse(ReadOnlySpan<byte> source, out bool value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out byte value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out DateTime value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out DateTimeOffset value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out decimal value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out double value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out Guid value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out short value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out int value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out long value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryParse(ReadOnlySpan<byte> source, out sbyte value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out float value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        public static bool TryParse(ReadOnlySpan<byte> source, out TimeSpan value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryParse(ReadOnlySpan<byte> source, out ushort value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryParse(ReadOnlySpan<byte> source, out uint value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool TryParse(ReadOnlySpan<byte> source, out ulong value, out int bytesConsumed, char standardFormat = '\0') { throw null; }
-    }
-}
-
-namespace System.Runtime.InteropServices
-{
-    public static partial class MemoryMarshal
-    {
-        public static ReadOnlySpan<byte> AsBytes<T>(ReadOnlySpan<T> span)
-            where T : struct { throw null; }
-
-        public static Span<byte> AsBytes<T>(Span<T> span)
-            where T : struct { throw null; }
-
-        public static Memory<T> AsMemory<T>(ReadOnlyMemory<T> memory) { throw null; }
-
-        public static ReadOnlySpan<TTo> Cast<TFrom, TTo>(ReadOnlySpan<TFrom> span)
-            where TFrom : struct where TTo : struct { throw null; }
-
-        public static Span<TTo> Cast<TFrom, TTo>(Span<TFrom> span)
-            where TFrom : struct where TTo : struct { throw null; }
-
-        public static Memory<T> CreateFromPinnedArray<T>(T[] array, int start, int length) { throw null; }
-
-        public static ref T GetReference<T>(ReadOnlySpan<T> span) { throw null; }
-
-        public static ref T GetReference<T>(Span<T> span) { throw null; }
-
-        public static T Read<T>(ReadOnlySpan<byte> source)
-            where T : struct { throw null; }
-
-        public static Collections.Generic.IEnumerable<T> ToEnumerable<T>(ReadOnlyMemory<T> memory) { throw null; }
-
-        public static bool TryGetArray<T>(ReadOnlyMemory<T> memory, out ArraySegment<T> segment) { throw null; }
-
-        public static bool TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T> memory, out TManager manager, out int start, out int length)
-            where TManager : Buffers.MemoryManager<T> { throw null; }
-
-        public static bool TryGetMemoryManager<T, TManager>(ReadOnlyMemory<T> memory, out TManager manager)
-            where TManager : Buffers.MemoryManager<T> { throw null; }
-
-        public static bool TryGetString(ReadOnlyMemory<char> memory, out string text, out int start, out int length) { throw null; }
-
-        public static bool TryRead<T>(ReadOnlySpan<byte> source, out T value)
-            where T : struct { throw null; }
-
-        public static bool TryWrite<T>(Span<byte> destination, ref T value)
-            where T : struct { throw null; }
-
-        public static void Write<T>(Span<byte> destination, ref T value)
-            where T : struct { }
-    }
-
-    public static partial class SequenceMarshal
-    {
-        public static bool TryGetArray<T>(Buffers.ReadOnlySequence<T> sequence, out ArraySegment<T> segment) { throw null; }
-
-        public static bool TryGetReadOnlyMemory<T>(Buffers.ReadOnlySequence<T> sequence, out ReadOnlyMemory<T> memory) { throw null; }
-
-        public static bool TryGetReadOnlySequenceSegment<T>(Buffers.ReadOnlySequence<T> sequence, out Buffers.ReadOnlySequenceSegment<T> startSegment, out int startIndex, out Buffers.ReadOnlySequenceSegment<T> endSegment, out int endIndex) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.memory/4.5.5/system.memory.nuspec b/src/referencePackages/src/system.memory/4.5.5/system.memory.nuspec
index 334d5c64..fe629cd6 100644
--- a/src/referencePackages/src/system.memory/4.5.5/system.memory.nuspec
+++ b/src/referencePackages/src/system.memory/4.5.5/system.memory.nuspec
@@ -28,17 +28,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <copyright>© Microsoft Corporation. All rights reserved.</copyright>
     <serviceable>true</serviceable>
     <dependencies>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="System.Buffers" version="4.5.1" />
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" />
-        <dependency id="System.Globalization" version="4.3.0" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.CompilerServices.Unsafe" version="4.5.3" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" />
-      </group>
       <group targetFramework=".NETStandard2.0">
         <dependency id="System.Buffers" version="4.5.1" />
         <dependency id="System.Numerics.Vectors" version="4.4.0" />
diff --git a/src/referencePackages/src/system.net.http/4.3.0/System.Net.Http.4.3.0.csproj b/src/referencePackages/src/system.net.http/4.3.0/System.Net.Http.4.3.0.csproj
deleted file mode 100644
index cf643bca..00000000
--- a/src/referencePackages/src/system.net.http/4.3.0/System.Net.Http.4.3.0.csproj
+++ /dev/null
@@ -1,38 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.1;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Net.Http</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Net.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.Win32.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.DiagnosticSource" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Tracing" Version="4.3.0" />
-    <PackageReference Include="System.Globalization" Version="4.3.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.IO.Compression" Version="4.3.0" />
-    <PackageReference Include="System.Net.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.X509Certificates" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-    <PackageReference Include="System.Threading" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.net.http/4.3.0/ref/netstandard1.1/System.Net.Http.cs b/src/referencePackages/src/system.net.http/4.3.0/ref/netstandard1.1/System.Net.Http.cs
deleted file mode 100644
index 71d52c70..00000000
--- a/src/referencePackages/src/system.net.http/4.3.0/ref/netstandard1.1/System.Net.Http.cs
+++ /dev/null
@@ -1,1065 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyTitle("System.Net.Http.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.Net.Http.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Net.Http.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Net.Http
-{
-    public partial class ByteArrayContent : HttpContent
-    {
-        public ByteArrayContent(byte[] content, int offset, int count) { }
-
-        public ByteArrayContent(byte[] content) { }
-
-        protected override Threading.Tasks.Task<IO.Stream> CreateContentReadStreamAsync() { throw null; }
-
-        protected override Threading.Tasks.Task SerializeToStreamAsync(IO.Stream stream, TransportContext context) { throw null; }
-
-        protected internal override bool TryComputeLength(out long length) { throw null; }
-    }
-
-    public enum ClientCertificateOption
-    {
-        Manual = 0,
-        Automatic = 1
-    }
-
-    public abstract partial class DelegatingHandler : HttpMessageHandler
-    {
-        protected DelegatingHandler() { }
-
-        protected DelegatingHandler(HttpMessageHandler innerHandler) { }
-
-        public HttpMessageHandler InnerHandler { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected internal override Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, Threading.CancellationToken cancellationToken) { throw null; }
-    }
-
-    public partial class FormUrlEncodedContent : ByteArrayContent
-    {
-        public FormUrlEncodedContent(Collections.Generic.IEnumerable<Collections.Generic.KeyValuePair<string, string>> nameValueCollection) : base(default!) { }
-    }
-
-    public partial class HttpClient : HttpMessageInvoker
-    {
-        public HttpClient() : base(default!) { }
-
-        public HttpClient(HttpMessageHandler handler, bool disposeHandler) : base(default!) { }
-
-        public HttpClient(HttpMessageHandler handler) : base(default!) { }
-
-        public Uri BaseAddress { get { throw null; } set { } }
-
-        public Headers.HttpRequestHeaders DefaultRequestHeaders { get { throw null; } }
-
-        public long MaxResponseContentBufferSize { get { throw null; } set { } }
-
-        public TimeSpan Timeout { get { throw null; } set { } }
-
-        public void CancelPendingRequests() { }
-
-        public Threading.Tasks.Task<HttpResponseMessage> DeleteAsync(string requestUri, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> DeleteAsync(string requestUri) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> DeleteAsync(Uri requestUri, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> DeleteAsync(Uri requestUri) { throw null; }
-
-        protected override void Dispose(bool disposing) { }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(string requestUri, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(string requestUri) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(Uri requestUri, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(Uri requestUri) { throw null; }
-
-        public Threading.Tasks.Task<byte[]> GetByteArrayAsync(string requestUri) { throw null; }
-
-        public Threading.Tasks.Task<byte[]> GetByteArrayAsync(Uri requestUri) { throw null; }
-
-        public Threading.Tasks.Task<IO.Stream> GetStreamAsync(string requestUri) { throw null; }
-
-        public Threading.Tasks.Task<IO.Stream> GetStreamAsync(Uri requestUri) { throw null; }
-
-        public Threading.Tasks.Task<string> GetStringAsync(string requestUri) { throw null; }
-
-        public Threading.Tasks.Task<string> GetStringAsync(Uri requestUri) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PutAsync(string requestUri, HttpContent content, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PutAsync(string requestUri, HttpContent content) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption) { throw null; }
-
-        public override Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request) { throw null; }
-    }
-
-    public partial class HttpClientHandler : HttpMessageHandler
-    {
-        public bool AllowAutoRedirect { get { throw null; } set { } }
-
-        public DecompressionMethods AutomaticDecompression { get { throw null; } set { } }
-
-        public ClientCertificateOption ClientCertificateOptions { get { throw null; } set { } }
-
-        public CookieContainer CookieContainer { get { throw null; } set { } }
-
-        public ICredentials Credentials { get { throw null; } set { } }
-
-        public int MaxAutomaticRedirections { get { throw null; } set { } }
-
-        public long MaxRequestContentBufferSize { get { throw null; } set { } }
-
-        public bool PreAuthenticate { get { throw null; } set { } }
-
-        public IWebProxy Proxy { get { throw null; } set { } }
-
-        public virtual bool SupportsAutomaticDecompression { get { throw null; } }
-
-        public virtual bool SupportsProxy { get { throw null; } }
-
-        public virtual bool SupportsRedirectConfiguration { get { throw null; } }
-
-        public bool UseCookies { get { throw null; } set { } }
-
-        public bool UseDefaultCredentials { get { throw null; } set { } }
-
-        public bool UseProxy { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected internal override Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, Threading.CancellationToken cancellationToken) { throw null; }
-    }
-
-    public enum HttpCompletionOption
-    {
-        ResponseContentRead = 0,
-        ResponseHeadersRead = 1
-    }
-
-    public abstract partial class HttpContent : IDisposable
-    {
-        public Headers.HttpContentHeaders Headers { get { throw null; } }
-
-        public Threading.Tasks.Task CopyToAsync(IO.Stream stream, TransportContext context) { throw null; }
-
-        public Threading.Tasks.Task CopyToAsync(IO.Stream stream) { throw null; }
-
-        protected virtual Threading.Tasks.Task<IO.Stream> CreateContentReadStreamAsync() { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public Threading.Tasks.Task LoadIntoBufferAsync() { throw null; }
-
-        public Threading.Tasks.Task LoadIntoBufferAsync(long maxBufferSize) { throw null; }
-
-        public Threading.Tasks.Task<byte[]> ReadAsByteArrayAsync() { throw null; }
-
-        public Threading.Tasks.Task<IO.Stream> ReadAsStreamAsync() { throw null; }
-
-        public Threading.Tasks.Task<string> ReadAsStringAsync() { throw null; }
-
-        protected abstract Threading.Tasks.Task SerializeToStreamAsync(IO.Stream stream, TransportContext context);
-        protected internal abstract bool TryComputeLength(out long length);
-    }
-
-    public abstract partial class HttpMessageHandler : IDisposable
-    {
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        protected internal abstract Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, Threading.CancellationToken cancellationToken);
-    }
-
-    public partial class HttpMessageInvoker : IDisposable
-    {
-        public HttpMessageInvoker(HttpMessageHandler handler, bool disposeHandler) { }
-
-        public HttpMessageInvoker(HttpMessageHandler handler) { }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public virtual Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, Threading.CancellationToken cancellationToken) { throw null; }
-    }
-
-    public partial class HttpMethod : IEquatable<HttpMethod>
-    {
-        public HttpMethod(string method) { }
-
-        public static HttpMethod Delete { get { throw null; } }
-
-        public static HttpMethod Get { get { throw null; } }
-
-        public static HttpMethod Head { get { throw null; } }
-
-        public string Method { get { throw null; } }
-
-        public static HttpMethod Options { get { throw null; } }
-
-        public static HttpMethod Post { get { throw null; } }
-
-        public static HttpMethod Put { get { throw null; } }
-
-        public static HttpMethod Trace { get { throw null; } }
-
-        public bool Equals(HttpMethod other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(HttpMethod left, HttpMethod right) { throw null; }
-
-        public static bool operator !=(HttpMethod left, HttpMethod right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class HttpRequestException : Exception
-    {
-        public HttpRequestException() { }
-
-        public HttpRequestException(string message, Exception inner) { }
-
-        public HttpRequestException(string message) { }
-    }
-
-    public partial class HttpRequestMessage : IDisposable
-    {
-        public HttpRequestMessage() { }
-
-        public HttpRequestMessage(HttpMethod method, string requestUri) { }
-
-        public HttpRequestMessage(HttpMethod method, Uri requestUri) { }
-
-        public HttpContent Content { get { throw null; } set { } }
-
-        public Headers.HttpRequestHeaders Headers { get { throw null; } }
-
-        public HttpMethod Method { get { throw null; } set { } }
-
-        public Collections.Generic.IDictionary<string, object> Properties { get { throw null; } }
-
-        public Uri RequestUri { get { throw null; } set { } }
-
-        public Version Version { get { throw null; } set { } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class HttpResponseMessage : IDisposable
-    {
-        public HttpResponseMessage() { }
-
-        public HttpResponseMessage(HttpStatusCode statusCode) { }
-
-        public HttpContent Content { get { throw null; } set { } }
-
-        public Headers.HttpResponseHeaders Headers { get { throw null; } }
-
-        public bool IsSuccessStatusCode { get { throw null; } }
-
-        public string ReasonPhrase { get { throw null; } set { } }
-
-        public HttpRequestMessage RequestMessage { get { throw null; } set { } }
-
-        public HttpStatusCode StatusCode { get { throw null; } set { } }
-
-        public Version Version { get { throw null; } set { } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public HttpResponseMessage EnsureSuccessStatusCode() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public abstract partial class MessageProcessingHandler : DelegatingHandler
-    {
-        protected MessageProcessingHandler() { }
-
-        protected MessageProcessingHandler(HttpMessageHandler innerHandler) { }
-
-        protected abstract HttpRequestMessage ProcessRequest(HttpRequestMessage request, Threading.CancellationToken cancellationToken);
-        protected abstract HttpResponseMessage ProcessResponse(HttpResponseMessage response, Threading.CancellationToken cancellationToken);
-        protected internal sealed override Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, Threading.CancellationToken cancellationToken) { throw null; }
-    }
-
-    public partial class MultipartContent : HttpContent, Collections.Generic.IEnumerable<HttpContent>, Collections.IEnumerable
-    {
-        public MultipartContent() { }
-
-        public MultipartContent(string subtype, string boundary) { }
-
-        public MultipartContent(string subtype) { }
-
-        public virtual void Add(HttpContent content) { }
-
-        protected override void Dispose(bool disposing) { }
-
-        public Collections.Generic.IEnumerator<HttpContent> GetEnumerator() { throw null; }
-
-        protected override Threading.Tasks.Task SerializeToStreamAsync(IO.Stream stream, TransportContext context) { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        protected internal override bool TryComputeLength(out long length) { throw null; }
-    }
-
-    public partial class MultipartFormDataContent : MultipartContent
-    {
-        public MultipartFormDataContent() { }
-
-        public MultipartFormDataContent(string boundary) { }
-
-        public void Add(HttpContent content, string name, string fileName) { }
-
-        public void Add(HttpContent content, string name) { }
-
-        public override void Add(HttpContent content) { }
-    }
-
-    public partial class StreamContent : HttpContent
-    {
-        public StreamContent(IO.Stream content, int bufferSize) { }
-
-        public StreamContent(IO.Stream content) { }
-
-        protected override Threading.Tasks.Task<IO.Stream> CreateContentReadStreamAsync() { throw null; }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override Threading.Tasks.Task SerializeToStreamAsync(IO.Stream stream, TransportContext context) { throw null; }
-
-        protected internal override bool TryComputeLength(out long length) { throw null; }
-    }
-
-    public partial class StringContent : ByteArrayContent
-    {
-        public StringContent(string content, Text.Encoding encoding, string mediaType) : base(default!) { }
-
-        public StringContent(string content, Text.Encoding encoding) : base(default!) { }
-
-        public StringContent(string content) : base(default!) { }
-    }
-}
-
-namespace System.Net.Http.Headers
-{
-    public partial class AuthenticationHeaderValue
-    {
-        public AuthenticationHeaderValue(string scheme, string parameter) { }
-
-        public AuthenticationHeaderValue(string scheme) { }
-
-        public string Parameter { get { throw null; } }
-
-        public string Scheme { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static AuthenticationHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out AuthenticationHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class CacheControlHeaderValue
-    {
-        public Collections.Generic.ICollection<NameValueHeaderValue> Extensions { get { throw null; } }
-
-        public TimeSpan? MaxAge { get { throw null; } set { } }
-
-        public bool MaxStale { get { throw null; } set { } }
-
-        public TimeSpan? MaxStaleLimit { get { throw null; } set { } }
-
-        public TimeSpan? MinFresh { get { throw null; } set { } }
-
-        public bool MustRevalidate { get { throw null; } set { } }
-
-        public bool NoCache { get { throw null; } set { } }
-
-        public Collections.Generic.ICollection<string> NoCacheHeaders { get { throw null; } }
-
-        public bool NoStore { get { throw null; } set { } }
-
-        public bool NoTransform { get { throw null; } set { } }
-
-        public bool OnlyIfCached { get { throw null; } set { } }
-
-        public bool Private { get { throw null; } set { } }
-
-        public Collections.Generic.ICollection<string> PrivateHeaders { get { throw null; } }
-
-        public bool ProxyRevalidate { get { throw null; } set { } }
-
-        public bool Public { get { throw null; } set { } }
-
-        public TimeSpan? SharedMaxAge { get { throw null; } set { } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static CacheControlHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out CacheControlHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class ContentDispositionHeaderValue
-    {
-        protected ContentDispositionHeaderValue(ContentDispositionHeaderValue source) { }
-
-        public ContentDispositionHeaderValue(string dispositionType) { }
-
-        public DateTimeOffset? CreationDate { get { throw null; } set { } }
-
-        public string DispositionType { get { throw null; } set { } }
-
-        public string FileName { get { throw null; } set { } }
-
-        public string FileNameStar { get { throw null; } set { } }
-
-        public DateTimeOffset? ModificationDate { get { throw null; } set { } }
-
-        public string Name { get { throw null; } set { } }
-
-        public Collections.Generic.ICollection<NameValueHeaderValue> Parameters { get { throw null; } }
-
-        public DateTimeOffset? ReadDate { get { throw null; } set { } }
-
-        public long? Size { get { throw null; } set { } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static ContentDispositionHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out ContentDispositionHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class ContentRangeHeaderValue
-    {
-        public ContentRangeHeaderValue(long from, long to, long length) { }
-
-        public ContentRangeHeaderValue(long from, long to) { }
-
-        public ContentRangeHeaderValue(long length) { }
-
-        public long? From { get { throw null; } }
-
-        public bool HasLength { get { throw null; } }
-
-        public bool HasRange { get { throw null; } }
-
-        public long? Length { get { throw null; } }
-
-        public long? To { get { throw null; } }
-
-        public string Unit { get { throw null; } set { } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static ContentRangeHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out ContentRangeHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class EntityTagHeaderValue
-    {
-        public EntityTagHeaderValue(string tag, bool isWeak) { }
-
-        public EntityTagHeaderValue(string tag) { }
-
-        public static EntityTagHeaderValue Any { get { throw null; } }
-
-        public bool IsWeak { get { throw null; } }
-
-        public string Tag { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static EntityTagHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out EntityTagHeaderValue parsedValue) { throw null; }
-    }
-
-    public sealed partial class HttpContentHeaders : HttpHeaders
-    {
-        internal HttpContentHeaders() { }
-
-        public Collections.Generic.ICollection<string> Allow { get { throw null; } }
-
-        public ContentDispositionHeaderValue ContentDisposition { get { throw null; } set { } }
-
-        public Collections.Generic.ICollection<string> ContentEncoding { get { throw null; } }
-
-        public Collections.Generic.ICollection<string> ContentLanguage { get { throw null; } }
-
-        public long? ContentLength { get { throw null; } set { } }
-
-        public Uri ContentLocation { get { throw null; } set { } }
-
-        public byte[] ContentMD5 { get { throw null; } set { } }
-
-        public ContentRangeHeaderValue ContentRange { get { throw null; } set { } }
-
-        public MediaTypeHeaderValue ContentType { get { throw null; } set { } }
-
-        public DateTimeOffset? Expires { get { throw null; } set { } }
-
-        public DateTimeOffset? LastModified { get { throw null; } set { } }
-    }
-
-    public abstract partial class HttpHeaders : Collections.Generic.IEnumerable<Collections.Generic.KeyValuePair<string, Collections.Generic.IEnumerable<string>>>, Collections.IEnumerable
-    {
-        public void Add(string name, Collections.Generic.IEnumerable<string> values) { }
-
-        public void Add(string name, string value) { }
-
-        public void Clear() { }
-
-        public bool Contains(string name) { throw null; }
-
-        public Collections.Generic.IEnumerator<Collections.Generic.KeyValuePair<string, Collections.Generic.IEnumerable<string>>> GetEnumerator() { throw null; }
-
-        public Collections.Generic.IEnumerable<string> GetValues(string name) { throw null; }
-
-        public bool Remove(string name) { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public bool TryAddWithoutValidation(string name, Collections.Generic.IEnumerable<string> values) { throw null; }
-
-        public bool TryAddWithoutValidation(string name, string value) { throw null; }
-
-        public bool TryGetValues(string name, out Collections.Generic.IEnumerable<string> values) { throw null; }
-    }
-
-    public sealed partial class HttpHeaderValueCollection<T> : Collections.Generic.ICollection<T>, Collections.Generic.IEnumerable<T>, Collections.IEnumerable where T : class
-    {
-        internal HttpHeaderValueCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public bool IsReadOnly { get { throw null; } }
-
-        public void Add(T item) { }
-
-        public void Clear() { }
-
-        public bool Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, int arrayIndex) { }
-
-        public Collections.Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        public void ParseAdd(string input) { }
-
-        public bool Remove(T item) { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public bool TryParseAdd(string input) { throw null; }
-    }
-
-    public sealed partial class HttpRequestHeaders : HttpHeaders
-    {
-        internal HttpRequestHeaders() { }
-
-        public HttpHeaderValueCollection<MediaTypeWithQualityHeaderValue> Accept { get { throw null; } }
-
-        public HttpHeaderValueCollection<StringWithQualityHeaderValue> AcceptCharset { get { throw null; } }
-
-        public HttpHeaderValueCollection<StringWithQualityHeaderValue> AcceptEncoding { get { throw null; } }
-
-        public HttpHeaderValueCollection<StringWithQualityHeaderValue> AcceptLanguage { get { throw null; } }
-
-        public AuthenticationHeaderValue Authorization { get { throw null; } set { } }
-
-        public CacheControlHeaderValue CacheControl { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<string> Connection { get { throw null; } }
-
-        public bool? ConnectionClose { get { throw null; } set { } }
-
-        public DateTimeOffset? Date { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<NameValueWithParametersHeaderValue> Expect { get { throw null; } }
-
-        public bool? ExpectContinue { get { throw null; } set { } }
-
-        public string From { get { throw null; } set { } }
-
-        public string Host { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<EntityTagHeaderValue> IfMatch { get { throw null; } }
-
-        public DateTimeOffset? IfModifiedSince { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<EntityTagHeaderValue> IfNoneMatch { get { throw null; } }
-
-        public RangeConditionHeaderValue IfRange { get { throw null; } set { } }
-
-        public DateTimeOffset? IfUnmodifiedSince { get { throw null; } set { } }
-
-        public int? MaxForwards { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<NameValueHeaderValue> Pragma { get { throw null; } }
-
-        public AuthenticationHeaderValue ProxyAuthorization { get { throw null; } set { } }
-
-        public RangeHeaderValue Range { get { throw null; } set { } }
-
-        public Uri Referrer { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<TransferCodingWithQualityHeaderValue> TE { get { throw null; } }
-
-        public HttpHeaderValueCollection<string> Trailer { get { throw null; } }
-
-        public HttpHeaderValueCollection<TransferCodingHeaderValue> TransferEncoding { get { throw null; } }
-
-        public bool? TransferEncodingChunked { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<ProductHeaderValue> Upgrade { get { throw null; } }
-
-        public HttpHeaderValueCollection<ProductInfoHeaderValue> UserAgent { get { throw null; } }
-
-        public HttpHeaderValueCollection<ViaHeaderValue> Via { get { throw null; } }
-
-        public HttpHeaderValueCollection<WarningHeaderValue> Warning { get { throw null; } }
-    }
-
-    public sealed partial class HttpResponseHeaders : HttpHeaders
-    {
-        internal HttpResponseHeaders() { }
-
-        public HttpHeaderValueCollection<string> AcceptRanges { get { throw null; } }
-
-        public TimeSpan? Age { get { throw null; } set { } }
-
-        public CacheControlHeaderValue CacheControl { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<string> Connection { get { throw null; } }
-
-        public bool? ConnectionClose { get { throw null; } set { } }
-
-        public DateTimeOffset? Date { get { throw null; } set { } }
-
-        public EntityTagHeaderValue ETag { get { throw null; } set { } }
-
-        public Uri Location { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<NameValueHeaderValue> Pragma { get { throw null; } }
-
-        public HttpHeaderValueCollection<AuthenticationHeaderValue> ProxyAuthenticate { get { throw null; } }
-
-        public RetryConditionHeaderValue RetryAfter { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<ProductInfoHeaderValue> Server { get { throw null; } }
-
-        public HttpHeaderValueCollection<string> Trailer { get { throw null; } }
-
-        public HttpHeaderValueCollection<TransferCodingHeaderValue> TransferEncoding { get { throw null; } }
-
-        public bool? TransferEncodingChunked { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<ProductHeaderValue> Upgrade { get { throw null; } }
-
-        public HttpHeaderValueCollection<string> Vary { get { throw null; } }
-
-        public HttpHeaderValueCollection<ViaHeaderValue> Via { get { throw null; } }
-
-        public HttpHeaderValueCollection<WarningHeaderValue> Warning { get { throw null; } }
-
-        public HttpHeaderValueCollection<AuthenticationHeaderValue> WwwAuthenticate { get { throw null; } }
-    }
-
-    public partial class MediaTypeHeaderValue
-    {
-        protected MediaTypeHeaderValue(MediaTypeHeaderValue source) { }
-
-        public MediaTypeHeaderValue(string mediaType) { }
-
-        public string CharSet { get { throw null; } set { } }
-
-        public string MediaType { get { throw null; } set { } }
-
-        public Collections.Generic.ICollection<NameValueHeaderValue> Parameters { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static MediaTypeHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out MediaTypeHeaderValue parsedValue) { throw null; }
-    }
-
-    public sealed partial class MediaTypeWithQualityHeaderValue : MediaTypeHeaderValue
-    {
-        public MediaTypeWithQualityHeaderValue(string mediaType, double quality) : base(default(MediaTypeHeaderValue)!) { }
-
-        public MediaTypeWithQualityHeaderValue(string mediaType) : base(default(MediaTypeHeaderValue)!) { }
-
-        public double? Quality { get { throw null; } set { } }
-
-        public new static MediaTypeWithQualityHeaderValue Parse(string input) { throw null; }
-
-        public static bool TryParse(string input, out MediaTypeWithQualityHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class NameValueHeaderValue
-    {
-        protected NameValueHeaderValue(NameValueHeaderValue source) { }
-
-        public NameValueHeaderValue(string name, string value) { }
-
-        public NameValueHeaderValue(string name) { }
-
-        public string Name { get { throw null; } }
-
-        public string Value { get { throw null; } set { } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static NameValueHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out NameValueHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class NameValueWithParametersHeaderValue : NameValueHeaderValue
-    {
-        protected NameValueWithParametersHeaderValue(NameValueWithParametersHeaderValue source) : base(default(NameValueHeaderValue)!) { }
-
-        public NameValueWithParametersHeaderValue(string name, string value) : base(default(NameValueHeaderValue)!) { }
-
-        public NameValueWithParametersHeaderValue(string name) : base(default(NameValueHeaderValue)!) { }
-
-        public Collections.Generic.ICollection<NameValueHeaderValue> Parameters { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public new static NameValueWithParametersHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out NameValueWithParametersHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class ProductHeaderValue
-    {
-        public ProductHeaderValue(string name, string version) { }
-
-        public ProductHeaderValue(string name) { }
-
-        public string Name { get { throw null; } }
-
-        public string Version { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static ProductHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out ProductHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class ProductInfoHeaderValue
-    {
-        public ProductInfoHeaderValue(ProductHeaderValue product) { }
-
-        public ProductInfoHeaderValue(string productName, string productVersion) { }
-
-        public ProductInfoHeaderValue(string comment) { }
-
-        public string Comment { get { throw null; } }
-
-        public ProductHeaderValue Product { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static ProductInfoHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out ProductInfoHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class RangeConditionHeaderValue
-    {
-        public RangeConditionHeaderValue(DateTimeOffset date) { }
-
-        public RangeConditionHeaderValue(EntityTagHeaderValue entityTag) { }
-
-        public RangeConditionHeaderValue(string entityTag) { }
-
-        public DateTimeOffset? Date { get { throw null; } }
-
-        public EntityTagHeaderValue EntityTag { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static RangeConditionHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out RangeConditionHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class RangeHeaderValue
-    {
-        public RangeHeaderValue() { }
-
-        public RangeHeaderValue(long? from, long? to) { }
-
-        public Collections.Generic.ICollection<RangeItemHeaderValue> Ranges { get { throw null; } }
-
-        public string Unit { get { throw null; } set { } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static RangeHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out RangeHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class RangeItemHeaderValue
-    {
-        public RangeItemHeaderValue(long? from, long? to) { }
-
-        public long? From { get { throw null; } }
-
-        public long? To { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class RetryConditionHeaderValue
-    {
-        public RetryConditionHeaderValue(DateTimeOffset date) { }
-
-        public RetryConditionHeaderValue(TimeSpan delta) { }
-
-        public DateTimeOffset? Date { get { throw null; } }
-
-        public TimeSpan? Delta { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static RetryConditionHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out RetryConditionHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class StringWithQualityHeaderValue
-    {
-        public StringWithQualityHeaderValue(string value, double quality) { }
-
-        public StringWithQualityHeaderValue(string value) { }
-
-        public double? Quality { get { throw null; } }
-
-        public string Value { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static StringWithQualityHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out StringWithQualityHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class TransferCodingHeaderValue
-    {
-        protected TransferCodingHeaderValue(TransferCodingHeaderValue source) { }
-
-        public TransferCodingHeaderValue(string value) { }
-
-        public Collections.Generic.ICollection<NameValueHeaderValue> Parameters { get { throw null; } }
-
-        public string Value { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static TransferCodingHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out TransferCodingHeaderValue parsedValue) { throw null; }
-    }
-
-    public sealed partial class TransferCodingWithQualityHeaderValue : TransferCodingHeaderValue
-    {
-        public TransferCodingWithQualityHeaderValue(string value, double quality) : base(default(TransferCodingHeaderValue)!) { }
-
-        public TransferCodingWithQualityHeaderValue(string value) : base(default(TransferCodingHeaderValue)!) { }
-
-        public double? Quality { get { throw null; } set { } }
-
-        public new static TransferCodingWithQualityHeaderValue Parse(string input) { throw null; }
-
-        public static bool TryParse(string input, out TransferCodingWithQualityHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class ViaHeaderValue
-    {
-        public ViaHeaderValue(string protocolVersion, string receivedBy, string protocolName, string comment) { }
-
-        public ViaHeaderValue(string protocolVersion, string receivedBy, string protocolName) { }
-
-        public ViaHeaderValue(string protocolVersion, string receivedBy) { }
-
-        public string Comment { get { throw null; } }
-
-        public string ProtocolName { get { throw null; } }
-
-        public string ProtocolVersion { get { throw null; } }
-
-        public string ReceivedBy { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static ViaHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out ViaHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class WarningHeaderValue
-    {
-        public WarningHeaderValue(int code, string agent, string text, DateTimeOffset date) { }
-
-        public WarningHeaderValue(int code, string agent, string text) { }
-
-        public string Agent { get { throw null; } }
-
-        public int Code { get { throw null; } }
-
-        public DateTimeOffset? Date { get { throw null; } }
-
-        public string Text { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static WarningHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out WarningHeaderValue parsedValue) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.net.http/4.3.0/ref/netstandard1.3/System.Net.Http.cs b/src/referencePackages/src/system.net.http/4.3.0/ref/netstandard1.3/System.Net.Http.cs
deleted file mode 100644
index 3a6af742..00000000
--- a/src/referencePackages/src/system.net.http/4.3.0/ref/netstandard1.3/System.Net.Http.cs
+++ /dev/null
@@ -1,1084 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Net.Http")]
-[assembly: System.Reflection.AssemblyDescription("System.Net.Http")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Net.Http")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.24705.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.24705.01. Commit Hash: 4d1af962ca0fede10beb01d197367c2f90e92c97")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.1.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Net.Http
-{
-    public partial class ByteArrayContent : HttpContent
-    {
-        public ByteArrayContent(byte[] content, int offset, int count) { }
-
-        public ByteArrayContent(byte[] content) { }
-
-        protected override Threading.Tasks.Task<IO.Stream> CreateContentReadStreamAsync() { throw null; }
-
-        protected override Threading.Tasks.Task SerializeToStreamAsync(IO.Stream stream, TransportContext context) { throw null; }
-
-        protected internal override bool TryComputeLength(out long length) { throw null; }
-    }
-
-    public enum ClientCertificateOption
-    {
-        Manual = 0,
-        Automatic = 1
-    }
-
-    public abstract partial class DelegatingHandler : HttpMessageHandler
-    {
-        protected DelegatingHandler() { }
-
-        protected DelegatingHandler(HttpMessageHandler innerHandler) { }
-
-        public HttpMessageHandler InnerHandler { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected internal override Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, Threading.CancellationToken cancellationToken) { throw null; }
-    }
-
-    public partial class FormUrlEncodedContent : ByteArrayContent
-    {
-        public FormUrlEncodedContent(Collections.Generic.IEnumerable<Collections.Generic.KeyValuePair<string, string>> nameValueCollection) : base(default!) { }
-    }
-
-    public partial class HttpClient : HttpMessageInvoker
-    {
-        public HttpClient() : base(default!) { }
-
-        public HttpClient(HttpMessageHandler handler, bool disposeHandler) : base(default!) { }
-
-        public HttpClient(HttpMessageHandler handler) : base(default!) { }
-
-        public Uri BaseAddress { get { throw null; } set { } }
-
-        public Headers.HttpRequestHeaders DefaultRequestHeaders { get { throw null; } }
-
-        public long MaxResponseContentBufferSize { get { throw null; } set { } }
-
-        public TimeSpan Timeout { get { throw null; } set { } }
-
-        public void CancelPendingRequests() { }
-
-        public Threading.Tasks.Task<HttpResponseMessage> DeleteAsync(string requestUri, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> DeleteAsync(string requestUri) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> DeleteAsync(Uri requestUri, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> DeleteAsync(Uri requestUri) { throw null; }
-
-        protected override void Dispose(bool disposing) { }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(string requestUri, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(string requestUri) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(Uri requestUri, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> GetAsync(Uri requestUri) { throw null; }
-
-        public Threading.Tasks.Task<byte[]> GetByteArrayAsync(string requestUri) { throw null; }
-
-        public Threading.Tasks.Task<byte[]> GetByteArrayAsync(Uri requestUri) { throw null; }
-
-        public Threading.Tasks.Task<IO.Stream> GetStreamAsync(string requestUri) { throw null; }
-
-        public Threading.Tasks.Task<IO.Stream> GetStreamAsync(Uri requestUri) { throw null; }
-
-        public Threading.Tasks.Task<string> GetStringAsync(string requestUri) { throw null; }
-
-        public Threading.Tasks.Task<string> GetStringAsync(Uri requestUri) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PutAsync(string requestUri, HttpContent content, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PutAsync(string requestUri, HttpContent content) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption) { throw null; }
-
-        public override Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request) { throw null; }
-    }
-
-    public partial class HttpClientHandler : HttpMessageHandler
-    {
-        public bool AllowAutoRedirect { get { throw null; } set { } }
-
-        public DecompressionMethods AutomaticDecompression { get { throw null; } set { } }
-
-        public bool CheckCertificateRevocationList { get { throw null; } set { } }
-
-        public ClientCertificateOption ClientCertificateOptions { get { throw null; } set { } }
-
-        public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get { throw null; } }
-
-        public CookieContainer CookieContainer { get { throw null; } set { } }
-
-        public ICredentials Credentials { get { throw null; } set { } }
-
-        public ICredentials DefaultProxyCredentials { get { throw null; } set { } }
-
-        public int MaxAutomaticRedirections { get { throw null; } set { } }
-
-        public int MaxConnectionsPerServer { get { throw null; } set { } }
-
-        public long MaxRequestContentBufferSize { get { throw null; } set { } }
-
-        public int MaxResponseHeadersLength { get { throw null; } set { } }
-
-        public bool PreAuthenticate { get { throw null; } set { } }
-
-        public Collections.Generic.IDictionary<string, object> Properties { get { throw null; } }
-
-        public IWebProxy Proxy { get { throw null; } set { } }
-
-        public Func<HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, Security.SslPolicyErrors, bool> ServerCertificateCustomValidationCallback { get { throw null; } set { } }
-
-        public System.Security.Authentication.SslProtocols SslProtocols { get { throw null; } set { } }
-
-        public virtual bool SupportsAutomaticDecompression { get { throw null; } }
-
-        public virtual bool SupportsProxy { get { throw null; } }
-
-        public virtual bool SupportsRedirectConfiguration { get { throw null; } }
-
-        public bool UseCookies { get { throw null; } set { } }
-
-        public bool UseDefaultCredentials { get { throw null; } set { } }
-
-        public bool UseProxy { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected internal override Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, Threading.CancellationToken cancellationToken) { throw null; }
-    }
-
-    public enum HttpCompletionOption
-    {
-        ResponseContentRead = 0,
-        ResponseHeadersRead = 1
-    }
-
-    public abstract partial class HttpContent : IDisposable
-    {
-        public Headers.HttpContentHeaders Headers { get { throw null; } }
-
-        public Threading.Tasks.Task CopyToAsync(IO.Stream stream, TransportContext context) { throw null; }
-
-        public Threading.Tasks.Task CopyToAsync(IO.Stream stream) { throw null; }
-
-        protected virtual Threading.Tasks.Task<IO.Stream> CreateContentReadStreamAsync() { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public Threading.Tasks.Task LoadIntoBufferAsync() { throw null; }
-
-        public Threading.Tasks.Task LoadIntoBufferAsync(long maxBufferSize) { throw null; }
-
-        public Threading.Tasks.Task<byte[]> ReadAsByteArrayAsync() { throw null; }
-
-        public Threading.Tasks.Task<IO.Stream> ReadAsStreamAsync() { throw null; }
-
-        public Threading.Tasks.Task<string> ReadAsStringAsync() { throw null; }
-
-        protected abstract Threading.Tasks.Task SerializeToStreamAsync(IO.Stream stream, TransportContext context);
-        protected internal abstract bool TryComputeLength(out long length);
-    }
-
-    public abstract partial class HttpMessageHandler : IDisposable
-    {
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        protected internal abstract Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, Threading.CancellationToken cancellationToken);
-    }
-
-    public partial class HttpMessageInvoker : IDisposable
-    {
-        public HttpMessageInvoker(HttpMessageHandler handler, bool disposeHandler) { }
-
-        public HttpMessageInvoker(HttpMessageHandler handler) { }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public virtual Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, Threading.CancellationToken cancellationToken) { throw null; }
-    }
-
-    public partial class HttpMethod : IEquatable<HttpMethod>
-    {
-        public HttpMethod(string method) { }
-
-        public static HttpMethod Delete { get { throw null; } }
-
-        public static HttpMethod Get { get { throw null; } }
-
-        public static HttpMethod Head { get { throw null; } }
-
-        public string Method { get { throw null; } }
-
-        public static HttpMethod Options { get { throw null; } }
-
-        public static HttpMethod Post { get { throw null; } }
-
-        public static HttpMethod Put { get { throw null; } }
-
-        public static HttpMethod Trace { get { throw null; } }
-
-        public bool Equals(HttpMethod other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(HttpMethod left, HttpMethod right) { throw null; }
-
-        public static bool operator !=(HttpMethod left, HttpMethod right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class HttpRequestException : Exception
-    {
-        public HttpRequestException() { }
-
-        public HttpRequestException(string message, Exception inner) { }
-
-        public HttpRequestException(string message) { }
-    }
-
-    public partial class HttpRequestMessage : IDisposable
-    {
-        public HttpRequestMessage() { }
-
-        public HttpRequestMessage(HttpMethod method, string requestUri) { }
-
-        public HttpRequestMessage(HttpMethod method, Uri requestUri) { }
-
-        public HttpContent Content { get { throw null; } set { } }
-
-        public Headers.HttpRequestHeaders Headers { get { throw null; } }
-
-        public HttpMethod Method { get { throw null; } set { } }
-
-        public Collections.Generic.IDictionary<string, object> Properties { get { throw null; } }
-
-        public Uri RequestUri { get { throw null; } set { } }
-
-        public Version Version { get { throw null; } set { } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class HttpResponseMessage : IDisposable
-    {
-        public HttpResponseMessage() { }
-
-        public HttpResponseMessage(HttpStatusCode statusCode) { }
-
-        public HttpContent Content { get { throw null; } set { } }
-
-        public Headers.HttpResponseHeaders Headers { get { throw null; } }
-
-        public bool IsSuccessStatusCode { get { throw null; } }
-
-        public string ReasonPhrase { get { throw null; } set { } }
-
-        public HttpRequestMessage RequestMessage { get { throw null; } set { } }
-
-        public HttpStatusCode StatusCode { get { throw null; } set { } }
-
-        public Version Version { get { throw null; } set { } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public HttpResponseMessage EnsureSuccessStatusCode() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public abstract partial class MessageProcessingHandler : DelegatingHandler
-    {
-        protected MessageProcessingHandler() { }
-
-        protected MessageProcessingHandler(HttpMessageHandler innerHandler) { }
-
-        protected abstract HttpRequestMessage ProcessRequest(HttpRequestMessage request, Threading.CancellationToken cancellationToken);
-        protected abstract HttpResponseMessage ProcessResponse(HttpResponseMessage response, Threading.CancellationToken cancellationToken);
-        protected internal sealed override Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, Threading.CancellationToken cancellationToken) { throw null; }
-    }
-
-    public partial class MultipartContent : HttpContent, Collections.Generic.IEnumerable<HttpContent>, Collections.IEnumerable
-    {
-        public MultipartContent() { }
-
-        public MultipartContent(string subtype, string boundary) { }
-
-        public MultipartContent(string subtype) { }
-
-        public virtual void Add(HttpContent content) { }
-
-        protected override void Dispose(bool disposing) { }
-
-        public Collections.Generic.IEnumerator<HttpContent> GetEnumerator() { throw null; }
-
-        protected override Threading.Tasks.Task SerializeToStreamAsync(IO.Stream stream, TransportContext context) { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        protected internal override bool TryComputeLength(out long length) { throw null; }
-    }
-
-    public partial class MultipartFormDataContent : MultipartContent
-    {
-        public MultipartFormDataContent() { }
-
-        public MultipartFormDataContent(string boundary) { }
-
-        public void Add(HttpContent content, string name, string fileName) { }
-
-        public void Add(HttpContent content, string name) { }
-
-        public override void Add(HttpContent content) { }
-    }
-
-    public partial class StreamContent : HttpContent
-    {
-        public StreamContent(IO.Stream content, int bufferSize) { }
-
-        public StreamContent(IO.Stream content) { }
-
-        protected override Threading.Tasks.Task<IO.Stream> CreateContentReadStreamAsync() { throw null; }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override Threading.Tasks.Task SerializeToStreamAsync(IO.Stream stream, TransportContext context) { throw null; }
-
-        protected internal override bool TryComputeLength(out long length) { throw null; }
-    }
-
-    public partial class StringContent : ByteArrayContent
-    {
-        public StringContent(string content, Text.Encoding encoding, string mediaType) : base(default!) { }
-
-        public StringContent(string content, Text.Encoding encoding) : base(default!) { }
-
-        public StringContent(string content) : base(default!) { }
-    }
-}
-
-namespace System.Net.Http.Headers
-{
-    public partial class AuthenticationHeaderValue
-    {
-        public AuthenticationHeaderValue(string scheme, string parameter) { }
-
-        public AuthenticationHeaderValue(string scheme) { }
-
-        public string Parameter { get { throw null; } }
-
-        public string Scheme { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static AuthenticationHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out AuthenticationHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class CacheControlHeaderValue
-    {
-        public Collections.Generic.ICollection<NameValueHeaderValue> Extensions { get { throw null; } }
-
-        public TimeSpan? MaxAge { get { throw null; } set { } }
-
-        public bool MaxStale { get { throw null; } set { } }
-
-        public TimeSpan? MaxStaleLimit { get { throw null; } set { } }
-
-        public TimeSpan? MinFresh { get { throw null; } set { } }
-
-        public bool MustRevalidate { get { throw null; } set { } }
-
-        public bool NoCache { get { throw null; } set { } }
-
-        public Collections.Generic.ICollection<string> NoCacheHeaders { get { throw null; } }
-
-        public bool NoStore { get { throw null; } set { } }
-
-        public bool NoTransform { get { throw null; } set { } }
-
-        public bool OnlyIfCached { get { throw null; } set { } }
-
-        public bool Private { get { throw null; } set { } }
-
-        public Collections.Generic.ICollection<string> PrivateHeaders { get { throw null; } }
-
-        public bool ProxyRevalidate { get { throw null; } set { } }
-
-        public bool Public { get { throw null; } set { } }
-
-        public TimeSpan? SharedMaxAge { get { throw null; } set { } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static CacheControlHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out CacheControlHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class ContentDispositionHeaderValue
-    {
-        protected ContentDispositionHeaderValue(ContentDispositionHeaderValue source) { }
-
-        public ContentDispositionHeaderValue(string dispositionType) { }
-
-        public DateTimeOffset? CreationDate { get { throw null; } set { } }
-
-        public string DispositionType { get { throw null; } set { } }
-
-        public string FileName { get { throw null; } set { } }
-
-        public string FileNameStar { get { throw null; } set { } }
-
-        public DateTimeOffset? ModificationDate { get { throw null; } set { } }
-
-        public string Name { get { throw null; } set { } }
-
-        public Collections.Generic.ICollection<NameValueHeaderValue> Parameters { get { throw null; } }
-
-        public DateTimeOffset? ReadDate { get { throw null; } set { } }
-
-        public long? Size { get { throw null; } set { } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static ContentDispositionHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out ContentDispositionHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class ContentRangeHeaderValue
-    {
-        public ContentRangeHeaderValue(long from, long to, long length) { }
-
-        public ContentRangeHeaderValue(long from, long to) { }
-
-        public ContentRangeHeaderValue(long length) { }
-
-        public long? From { get { throw null; } }
-
-        public bool HasLength { get { throw null; } }
-
-        public bool HasRange { get { throw null; } }
-
-        public long? Length { get { throw null; } }
-
-        public long? To { get { throw null; } }
-
-        public string Unit { get { throw null; } set { } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static ContentRangeHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out ContentRangeHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class EntityTagHeaderValue
-    {
-        public EntityTagHeaderValue(string tag, bool isWeak) { }
-
-        public EntityTagHeaderValue(string tag) { }
-
-        public static EntityTagHeaderValue Any { get { throw null; } }
-
-        public bool IsWeak { get { throw null; } }
-
-        public string Tag { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static EntityTagHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out EntityTagHeaderValue parsedValue) { throw null; }
-    }
-
-    public sealed partial class HttpContentHeaders : HttpHeaders
-    {
-        internal HttpContentHeaders() { }
-
-        public Collections.Generic.ICollection<string> Allow { get { throw null; } }
-
-        public ContentDispositionHeaderValue ContentDisposition { get { throw null; } set { } }
-
-        public Collections.Generic.ICollection<string> ContentEncoding { get { throw null; } }
-
-        public Collections.Generic.ICollection<string> ContentLanguage { get { throw null; } }
-
-        public long? ContentLength { get { throw null; } set { } }
-
-        public Uri ContentLocation { get { throw null; } set { } }
-
-        public byte[] ContentMD5 { get { throw null; } set { } }
-
-        public ContentRangeHeaderValue ContentRange { get { throw null; } set { } }
-
-        public MediaTypeHeaderValue ContentType { get { throw null; } set { } }
-
-        public DateTimeOffset? Expires { get { throw null; } set { } }
-
-        public DateTimeOffset? LastModified { get { throw null; } set { } }
-    }
-
-    public abstract partial class HttpHeaders : Collections.Generic.IEnumerable<Collections.Generic.KeyValuePair<string, Collections.Generic.IEnumerable<string>>>, Collections.IEnumerable
-    {
-        public void Add(string name, Collections.Generic.IEnumerable<string> values) { }
-
-        public void Add(string name, string value) { }
-
-        public void Clear() { }
-
-        public bool Contains(string name) { throw null; }
-
-        public Collections.Generic.IEnumerator<Collections.Generic.KeyValuePair<string, Collections.Generic.IEnumerable<string>>> GetEnumerator() { throw null; }
-
-        public Collections.Generic.IEnumerable<string> GetValues(string name) { throw null; }
-
-        public bool Remove(string name) { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public bool TryAddWithoutValidation(string name, Collections.Generic.IEnumerable<string> values) { throw null; }
-
-        public bool TryAddWithoutValidation(string name, string value) { throw null; }
-
-        public bool TryGetValues(string name, out Collections.Generic.IEnumerable<string> values) { throw null; }
-    }
-
-    public sealed partial class HttpHeaderValueCollection<T> : Collections.Generic.ICollection<T>, Collections.Generic.IEnumerable<T>, Collections.IEnumerable where T : class
-    {
-        internal HttpHeaderValueCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public bool IsReadOnly { get { throw null; } }
-
-        public void Add(T item) { }
-
-        public void Clear() { }
-
-        public bool Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, int arrayIndex) { }
-
-        public Collections.Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        public void ParseAdd(string input) { }
-
-        public bool Remove(T item) { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public bool TryParseAdd(string input) { throw null; }
-    }
-
-    public sealed partial class HttpRequestHeaders : HttpHeaders
-    {
-        internal HttpRequestHeaders() { }
-
-        public HttpHeaderValueCollection<MediaTypeWithQualityHeaderValue> Accept { get { throw null; } }
-
-        public HttpHeaderValueCollection<StringWithQualityHeaderValue> AcceptCharset { get { throw null; } }
-
-        public HttpHeaderValueCollection<StringWithQualityHeaderValue> AcceptEncoding { get { throw null; } }
-
-        public HttpHeaderValueCollection<StringWithQualityHeaderValue> AcceptLanguage { get { throw null; } }
-
-        public AuthenticationHeaderValue Authorization { get { throw null; } set { } }
-
-        public CacheControlHeaderValue CacheControl { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<string> Connection { get { throw null; } }
-
-        public bool? ConnectionClose { get { throw null; } set { } }
-
-        public DateTimeOffset? Date { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<NameValueWithParametersHeaderValue> Expect { get { throw null; } }
-
-        public bool? ExpectContinue { get { throw null; } set { } }
-
-        public string From { get { throw null; } set { } }
-
-        public string Host { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<EntityTagHeaderValue> IfMatch { get { throw null; } }
-
-        public DateTimeOffset? IfModifiedSince { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<EntityTagHeaderValue> IfNoneMatch { get { throw null; } }
-
-        public RangeConditionHeaderValue IfRange { get { throw null; } set { } }
-
-        public DateTimeOffset? IfUnmodifiedSince { get { throw null; } set { } }
-
-        public int? MaxForwards { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<NameValueHeaderValue> Pragma { get { throw null; } }
-
-        public AuthenticationHeaderValue ProxyAuthorization { get { throw null; } set { } }
-
-        public RangeHeaderValue Range { get { throw null; } set { } }
-
-        public Uri Referrer { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<TransferCodingWithQualityHeaderValue> TE { get { throw null; } }
-
-        public HttpHeaderValueCollection<string> Trailer { get { throw null; } }
-
-        public HttpHeaderValueCollection<TransferCodingHeaderValue> TransferEncoding { get { throw null; } }
-
-        public bool? TransferEncodingChunked { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<ProductHeaderValue> Upgrade { get { throw null; } }
-
-        public HttpHeaderValueCollection<ProductInfoHeaderValue> UserAgent { get { throw null; } }
-
-        public HttpHeaderValueCollection<ViaHeaderValue> Via { get { throw null; } }
-
-        public HttpHeaderValueCollection<WarningHeaderValue> Warning { get { throw null; } }
-    }
-
-    public sealed partial class HttpResponseHeaders : HttpHeaders
-    {
-        internal HttpResponseHeaders() { }
-
-        public HttpHeaderValueCollection<string> AcceptRanges { get { throw null; } }
-
-        public TimeSpan? Age { get { throw null; } set { } }
-
-        public CacheControlHeaderValue CacheControl { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<string> Connection { get { throw null; } }
-
-        public bool? ConnectionClose { get { throw null; } set { } }
-
-        public DateTimeOffset? Date { get { throw null; } set { } }
-
-        public EntityTagHeaderValue ETag { get { throw null; } set { } }
-
-        public Uri Location { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<NameValueHeaderValue> Pragma { get { throw null; } }
-
-        public HttpHeaderValueCollection<AuthenticationHeaderValue> ProxyAuthenticate { get { throw null; } }
-
-        public RetryConditionHeaderValue RetryAfter { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<ProductInfoHeaderValue> Server { get { throw null; } }
-
-        public HttpHeaderValueCollection<string> Trailer { get { throw null; } }
-
-        public HttpHeaderValueCollection<TransferCodingHeaderValue> TransferEncoding { get { throw null; } }
-
-        public bool? TransferEncodingChunked { get { throw null; } set { } }
-
-        public HttpHeaderValueCollection<ProductHeaderValue> Upgrade { get { throw null; } }
-
-        public HttpHeaderValueCollection<string> Vary { get { throw null; } }
-
-        public HttpHeaderValueCollection<ViaHeaderValue> Via { get { throw null; } }
-
-        public HttpHeaderValueCollection<WarningHeaderValue> Warning { get { throw null; } }
-
-        public HttpHeaderValueCollection<AuthenticationHeaderValue> WwwAuthenticate { get { throw null; } }
-    }
-
-    public partial class MediaTypeHeaderValue
-    {
-        protected MediaTypeHeaderValue(MediaTypeHeaderValue source) { }
-
-        public MediaTypeHeaderValue(string mediaType) { }
-
-        public string CharSet { get { throw null; } set { } }
-
-        public string MediaType { get { throw null; } set { } }
-
-        public Collections.Generic.ICollection<NameValueHeaderValue> Parameters { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static MediaTypeHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out MediaTypeHeaderValue parsedValue) { throw null; }
-    }
-
-    public sealed partial class MediaTypeWithQualityHeaderValue : MediaTypeHeaderValue
-    {
-        public MediaTypeWithQualityHeaderValue(string mediaType, double quality) : base(default(MediaTypeHeaderValue)!) { }
-
-        public MediaTypeWithQualityHeaderValue(string mediaType) : base(default(MediaTypeHeaderValue)!) { }
-
-        public double? Quality { get { throw null; } set { } }
-
-        public new static MediaTypeWithQualityHeaderValue Parse(string input) { throw null; }
-
-        public static bool TryParse(string input, out MediaTypeWithQualityHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class NameValueHeaderValue
-    {
-        protected NameValueHeaderValue(NameValueHeaderValue source) { }
-
-        public NameValueHeaderValue(string name, string value) { }
-
-        public NameValueHeaderValue(string name) { }
-
-        public string Name { get { throw null; } }
-
-        public string Value { get { throw null; } set { } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static NameValueHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out NameValueHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class NameValueWithParametersHeaderValue : NameValueHeaderValue
-    {
-        protected NameValueWithParametersHeaderValue(NameValueWithParametersHeaderValue source) : base(default(NameValueHeaderValue)!) { }
-
-        public NameValueWithParametersHeaderValue(string name, string value) : base(default(NameValueHeaderValue)!) { }
-
-        public NameValueWithParametersHeaderValue(string name) : base(default(NameValueHeaderValue)!) { }
-
-        public Collections.Generic.ICollection<NameValueHeaderValue> Parameters { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public new static NameValueWithParametersHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out NameValueWithParametersHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class ProductHeaderValue
-    {
-        public ProductHeaderValue(string name, string version) { }
-
-        public ProductHeaderValue(string name) { }
-
-        public string Name { get { throw null; } }
-
-        public string Version { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static ProductHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out ProductHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class ProductInfoHeaderValue
-    {
-        public ProductInfoHeaderValue(ProductHeaderValue product) { }
-
-        public ProductInfoHeaderValue(string productName, string productVersion) { }
-
-        public ProductInfoHeaderValue(string comment) { }
-
-        public string Comment { get { throw null; } }
-
-        public ProductHeaderValue Product { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static ProductInfoHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out ProductInfoHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class RangeConditionHeaderValue
-    {
-        public RangeConditionHeaderValue(DateTimeOffset date) { }
-
-        public RangeConditionHeaderValue(EntityTagHeaderValue entityTag) { }
-
-        public RangeConditionHeaderValue(string entityTag) { }
-
-        public DateTimeOffset? Date { get { throw null; } }
-
-        public EntityTagHeaderValue EntityTag { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static RangeConditionHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out RangeConditionHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class RangeHeaderValue
-    {
-        public RangeHeaderValue() { }
-
-        public RangeHeaderValue(long? from, long? to) { }
-
-        public Collections.Generic.ICollection<RangeItemHeaderValue> Ranges { get { throw null; } }
-
-        public string Unit { get { throw null; } set { } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static RangeHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out RangeHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class RangeItemHeaderValue
-    {
-        public RangeItemHeaderValue(long? from, long? to) { }
-
-        public long? From { get { throw null; } }
-
-        public long? To { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class RetryConditionHeaderValue
-    {
-        public RetryConditionHeaderValue(DateTimeOffset date) { }
-
-        public RetryConditionHeaderValue(TimeSpan delta) { }
-
-        public DateTimeOffset? Date { get { throw null; } }
-
-        public TimeSpan? Delta { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static RetryConditionHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out RetryConditionHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class StringWithQualityHeaderValue
-    {
-        public StringWithQualityHeaderValue(string value, double quality) { }
-
-        public StringWithQualityHeaderValue(string value) { }
-
-        public double? Quality { get { throw null; } }
-
-        public string Value { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static StringWithQualityHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out StringWithQualityHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class TransferCodingHeaderValue
-    {
-        protected TransferCodingHeaderValue(TransferCodingHeaderValue source) { }
-
-        public TransferCodingHeaderValue(string value) { }
-
-        public Collections.Generic.ICollection<NameValueHeaderValue> Parameters { get { throw null; } }
-
-        public string Value { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static TransferCodingHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out TransferCodingHeaderValue parsedValue) { throw null; }
-    }
-
-    public sealed partial class TransferCodingWithQualityHeaderValue : TransferCodingHeaderValue
-    {
-        public TransferCodingWithQualityHeaderValue(string value, double quality) : base(default(TransferCodingHeaderValue)!) { }
-
-        public TransferCodingWithQualityHeaderValue(string value) : base(default(TransferCodingHeaderValue)!) { }
-
-        public double? Quality { get { throw null; } set { } }
-
-        public new static TransferCodingWithQualityHeaderValue Parse(string input) { throw null; }
-
-        public static bool TryParse(string input, out TransferCodingWithQualityHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class ViaHeaderValue
-    {
-        public ViaHeaderValue(string protocolVersion, string receivedBy, string protocolName, string comment) { }
-
-        public ViaHeaderValue(string protocolVersion, string receivedBy, string protocolName) { }
-
-        public ViaHeaderValue(string protocolVersion, string receivedBy) { }
-
-        public string Comment { get { throw null; } }
-
-        public string ProtocolName { get { throw null; } }
-
-        public string ProtocolVersion { get { throw null; } }
-
-        public string ReceivedBy { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static ViaHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out ViaHeaderValue parsedValue) { throw null; }
-    }
-
-    public partial class WarningHeaderValue
-    {
-        public WarningHeaderValue(int code, string agent, string text, DateTimeOffset date) { }
-
-        public WarningHeaderValue(int code, string agent, string text) { }
-
-        public string Agent { get { throw null; } }
-
-        public int Code { get { throw null; } }
-
-        public DateTimeOffset? Date { get { throw null; } }
-
-        public string Text { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static WarningHeaderValue Parse(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string input, out WarningHeaderValue parsedValue) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.net.http/4.3.0/system.net.http.nuspec b/src/referencePackages/src/system.net.http/4.3.0/system.net.http.nuspec
deleted file mode 100644
index c9856987..00000000
--- a/src/referencePackages/src/system.net.http/4.3.0/system.net.http.nuspec
+++ /dev/null
@@ -1,87 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Net.Http</id>
-    <version>4.3.0</version>
-    <title>System.Net.Http</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.
-
-Commonly Used Types:
-System.Net.Http.HttpResponseMessage
-System.Net.Http.DelegatingHandler
-System.Net.Http.HttpRequestException
-System.Net.Http.HttpClient
-System.Net.Http.MultipartContent
-System.Net.Http.Headers.HttpContentHeaders
-System.Net.Http.HttpClientHandler
-System.Net.Http.StreamContent
-System.Net.Http.FormUrlEncodedContent
-System.Net.Http.HttpMessageHandler
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Net.Primitives" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.Win32.Primitives" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.DiagnosticSource" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Tracing" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Globalization" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.IO.Compression" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Net.Primitives" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.X509Certificates" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" />
-        <dependency id="System.Threading" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.6">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.DiagnosticSource" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Tracing" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Globalization" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Globalization.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.IO.FileSystem" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Net.Primitives" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.Algorithms" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.Encoding" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.OpenSsl" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.Primitives" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.X509Certificates" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" />
-        <dependency id="System.Threading" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.net.primitives/4.3.0/System.Net.Primitives.4.3.0.csproj b/src/referencePackages/src/system.net.primitives/4.3.0/System.Net.Primitives.4.3.0.csproj
deleted file mode 100644
index 1714cb25..00000000
--- a/src/referencePackages/src/system.net.primitives/4.3.0/System.Net.Primitives.4.3.0.csproj
+++ /dev/null
@@ -1,27 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.1;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Net.Primitives</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.net.primitives/4.3.0/ref/netstandard1.0/System.Net.Primitives.cs b/src/referencePackages/src/system.net.primitives/4.3.0/ref/netstandard1.0/System.Net.Primitives.cs
deleted file mode 100644
index b2b7338b..00000000
--- a/src/referencePackages/src/system.net.primitives/4.3.0/ref/netstandard1.0/System.Net.Primitives.cs
+++ /dev/null
@@ -1,186 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17931")]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyDescription("System.Net.Primitives.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Net.Primitives.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyTitle("System.Net.Primitives.dll")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17931")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Reflection.AssemblyVersionAttribute("3.9.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Net
-{
-    public sealed partial class Cookie
-    {
-        public Cookie() { }
-
-        public Cookie(string name, string value, string path, string domain) { }
-
-        public Cookie(string name, string value, string path) { }
-
-        public Cookie(string name, string value) { }
-
-        public string Comment { get { throw null; } set { } }
-
-        public Uri CommentUri { get { throw null; } set { } }
-
-        public bool Discard { get { throw null; } set { } }
-
-        public string Domain { get { throw null; } set { } }
-
-        public bool Expired { get { throw null; } set { } }
-
-        public DateTime Expires { get { throw null; } set { } }
-
-        public bool HttpOnly { get { throw null; } set { } }
-
-        public string Name { get { throw null; } set { } }
-
-        public string Path { get { throw null; } set { } }
-
-        public string Port { get { throw null; } set { } }
-
-        public bool Secure { get { throw null; } set { } }
-
-        public DateTime TimeStamp { get { throw null; } }
-
-        public string Value { get { throw null; } set { } }
-
-        public int Version { get { throw null; } set { } }
-
-        public override bool Equals(object comparand) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public sealed partial class CookieCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        public int Count { get { throw null; } }
-
-        public Cookie this[string name] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public void Add(Cookie cookie) { }
-
-        public void Add(CookieCollection cookies) { }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int index) { }
-    }
-
-    public sealed partial class CookieContainer
-    {
-        public const int DefaultCookieLengthLimit = 4096;
-        public const int DefaultCookieLimit = 300;
-        public const int DefaultPerDomainCookieLimit = 20;
-        public int Capacity { get { throw null; } }
-
-        public int Count { get { throw null; } }
-
-        public int MaxCookieSize { get { throw null; } }
-
-        public int PerDomainCapacity { get { throw null; } }
-
-        public void Add(Uri uri, Cookie cookie) { }
-
-        public void Add(Uri uri, CookieCollection cookies) { }
-
-        public string GetCookieHeader(Uri uri) { throw null; }
-
-        public CookieCollection GetCookies(Uri uri) { throw null; }
-
-        public void SetCookies(Uri uri, string cookieHeader) { }
-    }
-
-    public partial class CookieException : FormatException
-    {
-    }
-
-    public enum HttpStatusCode
-    {
-        Continue = 100,
-        SwitchingProtocols = 101,
-        OK = 200,
-        Created = 201,
-        Accepted = 202,
-        NonAuthoritativeInformation = 203,
-        NoContent = 204,
-        ResetContent = 205,
-        PartialContent = 206,
-        Ambiguous = 300,
-        MultipleChoices = 300,
-        Moved = 301,
-        MovedPermanently = 301,
-        Found = 302,
-        Redirect = 302,
-        RedirectMethod = 303,
-        SeeOther = 303,
-        NotModified = 304,
-        UseProxy = 305,
-        Unused = 306,
-        RedirectKeepVerb = 307,
-        TemporaryRedirect = 307,
-        BadRequest = 400,
-        Unauthorized = 401,
-        PaymentRequired = 402,
-        Forbidden = 403,
-        NotFound = 404,
-        MethodNotAllowed = 405,
-        NotAcceptable = 406,
-        ProxyAuthenticationRequired = 407,
-        RequestTimeout = 408,
-        Conflict = 409,
-        Gone = 410,
-        LengthRequired = 411,
-        PreconditionFailed = 412,
-        RequestEntityTooLarge = 413,
-        RequestUriTooLong = 414,
-        UnsupportedMediaType = 415,
-        RequestedRangeNotSatisfiable = 416,
-        ExpectationFailed = 417,
-        InternalServerError = 500,
-        NotImplemented = 501,
-        BadGateway = 502,
-        ServiceUnavailable = 503,
-        GatewayTimeout = 504,
-        HttpVersionNotSupported = 505
-    }
-
-    public partial interface ICredentials
-    {
-        NetworkCredential GetCredential(Uri uri, string authType);
-    }
-
-    public partial class NetworkCredential : ICredentials
-    {
-        public NetworkCredential() { }
-
-        public NetworkCredential(string userName, string password, string domain) { }
-
-        public NetworkCredential(string userName, string password) { }
-
-        public string Domain { get { throw null; } set { } }
-
-        public string Password { get { throw null; } set { } }
-
-        public string UserName { get { throw null; } set { } }
-
-        public NetworkCredential GetCredential(Uri uri, string authType) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.net.primitives/4.3.0/ref/netstandard1.1/System.Net.Primitives.cs b/src/referencePackages/src/system.net.primitives/4.3.0/ref/netstandard1.1/System.Net.Primitives.cs
deleted file mode 100644
index baa24fe8..00000000
--- a/src/referencePackages/src/system.net.primitives/4.3.0/ref/netstandard1.1/System.Net.Primitives.cs
+++ /dev/null
@@ -1,249 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Reflection.AssemblyTitle("System.Net.Primitives.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.Net.Primitives.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Net.Primitives.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Net
-{
-    [Flags]
-    public enum AuthenticationSchemes
-    {
-        None = 0,
-        Digest = 1,
-        Negotiate = 2,
-        Ntlm = 4,
-        IntegratedWindowsAuthentication = 6,
-        Basic = 8,
-        Anonymous = 32768
-    }
-
-    public sealed partial class Cookie
-    {
-        public Cookie() { }
-
-        public Cookie(string name, string value, string path, string domain) { }
-
-        public Cookie(string name, string value, string path) { }
-
-        public Cookie(string name, string value) { }
-
-        public string Comment { get { throw null; } set { } }
-
-        public Uri CommentUri { get { throw null; } set { } }
-
-        public bool Discard { get { throw null; } set { } }
-
-        public string Domain { get { throw null; } set { } }
-
-        public bool Expired { get { throw null; } set { } }
-
-        public DateTime Expires { get { throw null; } set { } }
-
-        public bool HttpOnly { get { throw null; } set { } }
-
-        public string Name { get { throw null; } set { } }
-
-        public string Path { get { throw null; } set { } }
-
-        public string Port { get { throw null; } set { } }
-
-        public bool Secure { get { throw null; } set { } }
-
-        public DateTime TimeStamp { get { throw null; } }
-
-        public string Value { get { throw null; } set { } }
-
-        public int Version { get { throw null; } set { } }
-
-        public override bool Equals(object comparand) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class CookieCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        public int Count { get { throw null; } }
-
-        public Cookie this[string name] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public void Add(Cookie cookie) { }
-
-        public void Add(CookieCollection cookies) { }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int index) { }
-    }
-
-    public partial class CookieContainer
-    {
-        public const int DefaultCookieLengthLimit = 4096;
-        public const int DefaultCookieLimit = 300;
-        public const int DefaultPerDomainCookieLimit = 20;
-        public int Capacity { get { throw null; } set { } }
-
-        public int Count { get { throw null; } }
-
-        public int MaxCookieSize { get { throw null; } set { } }
-
-        public int PerDomainCapacity { get { throw null; } set { } }
-
-        public void Add(Uri uri, Cookie cookie) { }
-
-        public void Add(Uri uri, CookieCollection cookies) { }
-
-        public string GetCookieHeader(Uri uri) { throw null; }
-
-        public CookieCollection GetCookies(Uri uri) { throw null; }
-
-        public void SetCookies(Uri uri, string cookieHeader) { }
-    }
-
-    public partial class CookieException : FormatException
-    {
-    }
-
-    public partial class CredentialCache : Collections.IEnumerable, ICredentials, ICredentialsByHost
-    {
-        public static ICredentials DefaultCredentials { get { throw null; } }
-
-        public static NetworkCredential DefaultNetworkCredentials { get { throw null; } }
-
-        public void Add(string host, int port, string authenticationType, NetworkCredential credential) { }
-
-        public void Add(Uri uriPrefix, string authType, NetworkCredential cred) { }
-
-        public NetworkCredential GetCredential(string host, int port, string authenticationType) { throw null; }
-
-        public NetworkCredential GetCredential(Uri uriPrefix, string authType) { throw null; }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        public void Remove(string host, int port, string authenticationType) { }
-
-        public void Remove(Uri uriPrefix, string authType) { }
-    }
-
-    [Flags]
-    public enum DecompressionMethods
-    {
-        None = 0,
-        GZip = 1,
-        Deflate = 2
-    }
-
-    public enum HttpStatusCode
-    {
-        Continue = 100,
-        SwitchingProtocols = 101,
-        OK = 200,
-        Created = 201,
-        Accepted = 202,
-        NonAuthoritativeInformation = 203,
-        NoContent = 204,
-        ResetContent = 205,
-        PartialContent = 206,
-        Ambiguous = 300,
-        MultipleChoices = 300,
-        Moved = 301,
-        MovedPermanently = 301,
-        Found = 302,
-        Redirect = 302,
-        RedirectMethod = 303,
-        SeeOther = 303,
-        NotModified = 304,
-        UseProxy = 305,
-        Unused = 306,
-        RedirectKeepVerb = 307,
-        TemporaryRedirect = 307,
-        BadRequest = 400,
-        Unauthorized = 401,
-        PaymentRequired = 402,
-        Forbidden = 403,
-        NotFound = 404,
-        MethodNotAllowed = 405,
-        NotAcceptable = 406,
-        ProxyAuthenticationRequired = 407,
-        RequestTimeout = 408,
-        Conflict = 409,
-        Gone = 410,
-        LengthRequired = 411,
-        PreconditionFailed = 412,
-        RequestEntityTooLarge = 413,
-        RequestUriTooLong = 414,
-        UnsupportedMediaType = 415,
-        RequestedRangeNotSatisfiable = 416,
-        ExpectationFailed = 417,
-        UpgradeRequired = 426,
-        InternalServerError = 500,
-        NotImplemented = 501,
-        BadGateway = 502,
-        ServiceUnavailable = 503,
-        GatewayTimeout = 504,
-        HttpVersionNotSupported = 505
-    }
-
-    public partial interface ICredentials
-    {
-        NetworkCredential GetCredential(Uri uri, string authType);
-    }
-
-    public partial interface ICredentialsByHost
-    {
-        NetworkCredential GetCredential(string host, int port, string authenticationType);
-    }
-
-    public partial interface IWebProxy
-    {
-        ICredentials Credentials { get; set; }
-
-        Uri GetProxy(Uri destination);
-        bool IsBypassed(Uri host);
-    }
-
-    public partial class NetworkCredential : ICredentials, ICredentialsByHost
-    {
-        public NetworkCredential() { }
-
-        public NetworkCredential(string userName, string password, string domain) { }
-
-        public NetworkCredential(string userName, string password) { }
-
-        public string Domain { get { throw null; } set { } }
-
-        public string Password { get { throw null; } set { } }
-
-        public string UserName { get { throw null; } set { } }
-
-        public NetworkCredential GetCredential(string host, int port, string authenticationType) { throw null; }
-
-        public NetworkCredential GetCredential(Uri uri, string authType) { throw null; }
-    }
-
-    public abstract partial class TransportContext
-    {
-        internal TransportContext() { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.net.primitives/4.3.0/ref/netstandard1.3/System.Net.Primitives.cs b/src/referencePackages/src/system.net.primitives/4.3.0/ref/netstandard1.3/System.Net.Primitives.cs
deleted file mode 100644
index e31b200f..00000000
--- a/src/referencePackages/src/system.net.primitives/4.3.0/ref/netstandard1.3/System.Net.Primitives.cs
+++ /dev/null
@@ -1,592 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Net.Primitives")]
-[assembly: System.Reflection.AssemblyDescription("System.Net.Primitives")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Net.Primitives")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Net
-{
-    [Flags]
-    public enum AuthenticationSchemes
-    {
-        None = 0,
-        Digest = 1,
-        Negotiate = 2,
-        Ntlm = 4,
-        IntegratedWindowsAuthentication = 6,
-        Basic = 8,
-        Anonymous = 32768
-    }
-
-    public sealed partial class Cookie
-    {
-        public Cookie() { }
-
-        public Cookie(string name, string value, string path, string domain) { }
-
-        public Cookie(string name, string value, string path) { }
-
-        public Cookie(string name, string value) { }
-
-        public string Comment { get { throw null; } set { } }
-
-        public Uri CommentUri { get { throw null; } set { } }
-
-        public bool Discard { get { throw null; } set { } }
-
-        public string Domain { get { throw null; } set { } }
-
-        public bool Expired { get { throw null; } set { } }
-
-        public DateTime Expires { get { throw null; } set { } }
-
-        public bool HttpOnly { get { throw null; } set { } }
-
-        public string Name { get { throw null; } set { } }
-
-        public string Path { get { throw null; } set { } }
-
-        public string Port { get { throw null; } set { } }
-
-        public bool Secure { get { throw null; } set { } }
-
-        public DateTime TimeStamp { get { throw null; } }
-
-        public string Value { get { throw null; } set { } }
-
-        public int Version { get { throw null; } set { } }
-
-        public override bool Equals(object comparand) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class CookieCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        public int Count { get { throw null; } }
-
-        public Cookie this[string name] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public void Add(Cookie cookie) { }
-
-        public void Add(CookieCollection cookies) { }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int index) { }
-    }
-
-    public partial class CookieContainer
-    {
-        public const int DefaultCookieLengthLimit = 4096;
-        public const int DefaultCookieLimit = 300;
-        public const int DefaultPerDomainCookieLimit = 20;
-        public int Capacity { get { throw null; } set { } }
-
-        public int Count { get { throw null; } }
-
-        public int MaxCookieSize { get { throw null; } set { } }
-
-        public int PerDomainCapacity { get { throw null; } set { } }
-
-        public void Add(Uri uri, Cookie cookie) { }
-
-        public void Add(Uri uri, CookieCollection cookies) { }
-
-        public string GetCookieHeader(Uri uri) { throw null; }
-
-        public CookieCollection GetCookies(Uri uri) { throw null; }
-
-        public void SetCookies(Uri uri, string cookieHeader) { }
-    }
-
-    public partial class CookieException : FormatException
-    {
-    }
-
-    public partial class CredentialCache : Collections.IEnumerable, ICredentials, ICredentialsByHost
-    {
-        public static ICredentials DefaultCredentials { get { throw null; } }
-
-        public static NetworkCredential DefaultNetworkCredentials { get { throw null; } }
-
-        public void Add(string host, int port, string authenticationType, NetworkCredential credential) { }
-
-        public void Add(Uri uriPrefix, string authType, NetworkCredential cred) { }
-
-        public NetworkCredential GetCredential(string host, int port, string authenticationType) { throw null; }
-
-        public NetworkCredential GetCredential(Uri uriPrefix, string authType) { throw null; }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        public void Remove(string host, int port, string authenticationType) { }
-
-        public void Remove(Uri uriPrefix, string authType) { }
-    }
-
-    [Flags]
-    public enum DecompressionMethods
-    {
-        None = 0,
-        GZip = 1,
-        Deflate = 2
-    }
-
-    public partial class DnsEndPoint : EndPoint
-    {
-        public DnsEndPoint(string host, int port, Sockets.AddressFamily addressFamily) { }
-
-        public DnsEndPoint(string host, int port) { }
-
-        public override Sockets.AddressFamily AddressFamily { get { throw null; } }
-
-        public string Host { get { throw null; } }
-
-        public int Port { get { throw null; } }
-
-        public override bool Equals(object comparand) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public abstract partial class EndPoint
-    {
-        public virtual Sockets.AddressFamily AddressFamily { get { throw null; } }
-
-        public virtual EndPoint Create(SocketAddress socketAddress) { throw null; }
-
-        public virtual SocketAddress Serialize() { throw null; }
-    }
-
-    public enum HttpStatusCode
-    {
-        Continue = 100,
-        SwitchingProtocols = 101,
-        OK = 200,
-        Created = 201,
-        Accepted = 202,
-        NonAuthoritativeInformation = 203,
-        NoContent = 204,
-        ResetContent = 205,
-        PartialContent = 206,
-        Ambiguous = 300,
-        MultipleChoices = 300,
-        Moved = 301,
-        MovedPermanently = 301,
-        Found = 302,
-        Redirect = 302,
-        RedirectMethod = 303,
-        SeeOther = 303,
-        NotModified = 304,
-        UseProxy = 305,
-        Unused = 306,
-        RedirectKeepVerb = 307,
-        TemporaryRedirect = 307,
-        BadRequest = 400,
-        Unauthorized = 401,
-        PaymentRequired = 402,
-        Forbidden = 403,
-        NotFound = 404,
-        MethodNotAllowed = 405,
-        NotAcceptable = 406,
-        ProxyAuthenticationRequired = 407,
-        RequestTimeout = 408,
-        Conflict = 409,
-        Gone = 410,
-        LengthRequired = 411,
-        PreconditionFailed = 412,
-        RequestEntityTooLarge = 413,
-        RequestUriTooLong = 414,
-        UnsupportedMediaType = 415,
-        RequestedRangeNotSatisfiable = 416,
-        ExpectationFailed = 417,
-        UpgradeRequired = 426,
-        InternalServerError = 500,
-        NotImplemented = 501,
-        BadGateway = 502,
-        ServiceUnavailable = 503,
-        GatewayTimeout = 504,
-        HttpVersionNotSupported = 505
-    }
-
-    public partial interface ICredentials
-    {
-        NetworkCredential GetCredential(Uri uri, string authType);
-    }
-
-    public partial interface ICredentialsByHost
-    {
-        NetworkCredential GetCredential(string host, int port, string authenticationType);
-    }
-
-    public partial class IPAddress
-    {
-        public static readonly IPAddress Any;
-        public static readonly IPAddress Broadcast;
-        public static readonly IPAddress IPv6Any;
-        public static readonly IPAddress IPv6Loopback;
-        public static readonly IPAddress IPv6None;
-        public static readonly IPAddress Loopback;
-        public static readonly IPAddress None;
-        public IPAddress(byte[] address, long scopeid) { }
-
-        public IPAddress(byte[] address) { }
-
-        public IPAddress(long newAddress) { }
-
-        public Sockets.AddressFamily AddressFamily { get { throw null; } }
-
-        public bool IsIPv4MappedToIPv6 { get { throw null; } }
-
-        public bool IsIPv6LinkLocal { get { throw null; } }
-
-        public bool IsIPv6Multicast { get { throw null; } }
-
-        public bool IsIPv6SiteLocal { get { throw null; } }
-
-        public bool IsIPv6Teredo { get { throw null; } }
-
-        public long ScopeId { get { throw null; } set { } }
-
-        public override bool Equals(object comparand) { throw null; }
-
-        public byte[] GetAddressBytes() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static short HostToNetworkOrder(short host) { throw null; }
-
-        public static int HostToNetworkOrder(int host) { throw null; }
-
-        public static long HostToNetworkOrder(long host) { throw null; }
-
-        public static bool IsLoopback(IPAddress address) { throw null; }
-
-        public IPAddress MapToIPv4() { throw null; }
-
-        public IPAddress MapToIPv6() { throw null; }
-
-        public static short NetworkToHostOrder(short network) { throw null; }
-
-        public static int NetworkToHostOrder(int network) { throw null; }
-
-        public static long NetworkToHostOrder(long network) { throw null; }
-
-        public static IPAddress Parse(string ipString) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static bool TryParse(string ipString, out IPAddress address) { throw null; }
-    }
-
-    public partial class IPEndPoint : EndPoint
-    {
-        public const int MaxPort = 65535;
-        public const int MinPort = 0;
-        public IPEndPoint(long address, int port) { }
-
-        public IPEndPoint(IPAddress address, int port) { }
-
-        public IPAddress Address { get { throw null; } set { } }
-
-        public override Sockets.AddressFamily AddressFamily { get { throw null; } }
-
-        public int Port { get { throw null; } set { } }
-
-        public override EndPoint Create(SocketAddress socketAddress) { throw null; }
-
-        public override bool Equals(object comparand) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override SocketAddress Serialize() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial interface IWebProxy
-    {
-        ICredentials Credentials { get; set; }
-
-        Uri GetProxy(Uri destination);
-        bool IsBypassed(Uri host);
-    }
-
-    public partial class NetworkCredential : ICredentials, ICredentialsByHost
-    {
-        public NetworkCredential() { }
-
-        public NetworkCredential(string userName, string password, string domain) { }
-
-        public NetworkCredential(string userName, string password) { }
-
-        public string Domain { get { throw null; } set { } }
-
-        public string Password { get { throw null; } set { } }
-
-        public string UserName { get { throw null; } set { } }
-
-        public NetworkCredential GetCredential(string host, int port, string authenticationType) { throw null; }
-
-        public NetworkCredential GetCredential(Uri uri, string authType) { throw null; }
-    }
-
-    public partial class SocketAddress
-    {
-        public SocketAddress(Sockets.AddressFamily family, int size) { }
-
-        public SocketAddress(Sockets.AddressFamily family) { }
-
-        public Sockets.AddressFamily Family { get { throw null; } }
-
-        public byte this[int offset] { get { throw null; } set { } }
-
-        public int Size { get { throw null; } }
-
-        public override bool Equals(object comparand) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public abstract partial class TransportContext
-    {
-        public abstract System.Security.Authentication.ExtendedProtection.ChannelBinding GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind kind);
-    }
-}
-
-namespace System.Net.NetworkInformation
-{
-    public partial class IPAddressCollection : Collections.Generic.ICollection<IPAddress>, Collections.Generic.IEnumerable<IPAddress>, Collections.IEnumerable
-    {
-        protected internal IPAddressCollection() { }
-
-        public virtual int Count { get { throw null; } }
-
-        public virtual bool IsReadOnly { get { throw null; } }
-
-        public virtual IPAddress this[int index] { get { throw null; } }
-
-        public virtual void Add(IPAddress address) { }
-
-        public virtual void Clear() { }
-
-        public virtual bool Contains(IPAddress address) { throw null; }
-
-        public virtual void CopyTo(IPAddress[] array, int offset) { }
-
-        public virtual Collections.Generic.IEnumerator<IPAddress> GetEnumerator() { throw null; }
-
-        public virtual bool Remove(IPAddress address) { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-    }
-}
-
-namespace System.Net.Security
-{
-    public enum AuthenticationLevel
-    {
-        None = 0,
-        MutualAuthRequested = 1,
-        MutualAuthRequired = 2
-    }
-
-    [Flags]
-    public enum SslPolicyErrors
-    {
-        None = 0,
-        RemoteCertificateNotAvailable = 1,
-        RemoteCertificateNameMismatch = 2,
-        RemoteCertificateChainErrors = 4
-    }
-}
-
-namespace System.Net.Sockets
-{
-    public enum AddressFamily
-    {
-        Unknown = -1,
-        Unspecified = 0,
-        Unix = 1,
-        InterNetwork = 2,
-        ImpLink = 3,
-        Pup = 4,
-        Chaos = 5,
-        Ipx = 6,
-        NS = 6,
-        Iso = 7,
-        Osi = 7,
-        Ecma = 8,
-        DataKit = 9,
-        Ccitt = 10,
-        Sna = 11,
-        DecNet = 12,
-        DataLink = 13,
-        Lat = 14,
-        HyperChannel = 15,
-        AppleTalk = 16,
-        NetBios = 17,
-        VoiceView = 18,
-        FireFox = 19,
-        Banyan = 21,
-        Atm = 22,
-        InterNetworkV6 = 23,
-        Cluster = 24,
-        Ieee12844 = 25,
-        Irda = 26,
-        NetworkDesigners = 28
-    }
-
-    public enum SocketError
-    {
-        SocketError = -1,
-        Success = 0,
-        OperationAborted = 995,
-        IOPending = 997,
-        Interrupted = 10004,
-        AccessDenied = 10013,
-        Fault = 10014,
-        InvalidArgument = 10022,
-        TooManyOpenSockets = 10024,
-        WouldBlock = 10035,
-        InProgress = 10036,
-        AlreadyInProgress = 10037,
-        NotSocket = 10038,
-        DestinationAddressRequired = 10039,
-        MessageSize = 10040,
-        ProtocolType = 10041,
-        ProtocolOption = 10042,
-        ProtocolNotSupported = 10043,
-        SocketNotSupported = 10044,
-        OperationNotSupported = 10045,
-        ProtocolFamilyNotSupported = 10046,
-        AddressFamilyNotSupported = 10047,
-        AddressAlreadyInUse = 10048,
-        AddressNotAvailable = 10049,
-        NetworkDown = 10050,
-        NetworkUnreachable = 10051,
-        NetworkReset = 10052,
-        ConnectionAborted = 10053,
-        ConnectionReset = 10054,
-        NoBufferSpaceAvailable = 10055,
-        IsConnected = 10056,
-        NotConnected = 10057,
-        Shutdown = 10058,
-        TimedOut = 10060,
-        ConnectionRefused = 10061,
-        HostDown = 10064,
-        HostUnreachable = 10065,
-        ProcessLimit = 10067,
-        SystemNotReady = 10091,
-        VersionNotSupported = 10092,
-        NotInitialized = 10093,
-        Disconnecting = 10101,
-        TypeNotFound = 10109,
-        HostNotFound = 11001,
-        TryAgain = 11002,
-        NoRecovery = 11003,
-        NoData = 11004
-    }
-
-    public partial class SocketException : Exception
-    {
-        public SocketException() { }
-
-        public SocketException(int errorCode) { }
-
-        public override string Message { get { throw null; } }
-
-        public SocketError SocketErrorCode { get { throw null; } }
-    }
-}
-
-namespace System.Security.Authentication
-{
-    public enum CipherAlgorithmType
-    {
-        None = 0,
-        Null = 24576,
-        Des = 26113,
-        Rc2 = 26114,
-        TripleDes = 26115,
-        Aes128 = 26126,
-        Aes192 = 26127,
-        Aes256 = 26128,
-        Aes = 26129,
-        Rc4 = 26625
-    }
-
-    public enum ExchangeAlgorithmType
-    {
-        None = 0,
-        RsaSign = 9216,
-        RsaKeyX = 41984,
-        DiffieHellman = 43522
-    }
-
-    public enum HashAlgorithmType
-    {
-        None = 0,
-        Md5 = 32771,
-        Sha1 = 32772
-    }
-
-    [Flags]
-    public enum SslProtocols
-    {
-        None = 0,
-        Ssl2 = 12,
-        Ssl3 = 48,
-        Tls = 192,
-        Tls11 = 768,
-        Tls12 = 3072
-    }
-}
-
-namespace System.Security.Authentication.ExtendedProtection
-{
-    public abstract partial class ChannelBinding : Runtime.InteropServices.SafeHandle
-    {
-        protected ChannelBinding() : base(default, default) { }
-
-        protected ChannelBinding(bool ownsHandle) : base(default, default) { }
-
-        public abstract int Size { get; }
-    }
-
-    public enum ChannelBindingKind
-    {
-        Unknown = 0,
-        Unique = 25,
-        Endpoint = 26
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.net.primitives/4.3.0/system.net.primitives.nuspec b/src/referencePackages/src/system.net.primitives/4.3.0/system.net.primitives.nuspec
deleted file mode 100644
index 6ed76db3..00000000
--- a/src/referencePackages/src/system.net.primitives/4.3.0/system.net.primitives.nuspec
+++ /dev/null
@@ -1,50 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Net.Primitives</id>
-    <version>4.3.0</version>
-    <title>System.Net.Primitives</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides common types for network-based libraries, including System.Net.IPAddress, System.Net.IPEndPoint, and System.Net.CookieContainer.
-
-Commonly Used Types:
-System.Net.HttpStatusCode
-System.Net.Sockets.SocketError
-System.Net.Cookie
-System.Net.Sockets.SocketException
-System.Net.IPEndPoint
-System.Net.ICredentials
-System.Net.NetworkCredential
-System.Net.IPAddress
-System.Net.CookieCollection
-System.Net.CookieContainer
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.net.sockets/4.3.0/System.Net.Sockets.4.3.0.csproj b/src/referencePackages/src/system.net.sockets/4.3.0/System.Net.Sockets.4.3.0.csproj
deleted file mode 100644
index 028ba0d6..00000000
--- a/src/referencePackages/src/system.net.sockets/4.3.0/System.Net.Sockets.4.3.0.csproj
+++ /dev/null
@@ -1,17 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Net.Sockets</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Net.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.net.sockets/4.3.0/ref/netstandard1.3/System.Net.Sockets.cs b/src/referencePackages/src/system.net.sockets/4.3.0/ref/netstandard1.3/System.Net.Sockets.cs
deleted file mode 100644
index 0d3d50f9..00000000
--- a/src/referencePackages/src/system.net.sockets/4.3.0/ref/netstandard1.3/System.Net.Sockets.cs
+++ /dev/null
@@ -1,733 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Net.Sockets")]
-[assembly: System.Reflection.AssemblyDescription("System.Net.Sockets")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Net.Sockets")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Net.Sockets
-{
-    public enum IOControlCode : long
-    {
-        AsyncIO = 2147772029L,
-        NonBlockingIO = 2147772030L,
-        AssociateHandle = 2281701377L,
-        MultipointLoopback = 2281701385L,
-        MulticastScope = 2281701386L,
-        SetQos = 2281701387L,
-        SetGroupQos = 2281701388L,
-        RoutingInterfaceChange = 2281701397L,
-        NamespaceChange = 2281701401L,
-        ReceiveAll = 2550136833L,
-        ReceiveAllMulticast = 2550136834L,
-        ReceiveAllIgmpMulticast = 2550136835L,
-        KeepAliveValues = 2550136836L,
-        AbsorbRouterAlert = 2550136837L,
-        UnicastInterface = 2550136838L,
-        LimitBroadcasts = 2550136839L,
-        BindToInterface = 2550136840L,
-        MulticastInterface = 2550136841L,
-        AddMulticastGroupOnInterface = 2550136842L,
-        DeleteMulticastGroupFromInterface = 2550136843L,
-        GetExtensionFunctionPointer = 3355443206L,
-        GetQos = 3355443207L,
-        GetGroupQos = 3355443208L,
-        TranslateHandle = 3355443213L,
-        RoutingInterfaceQuery = 3355443220L,
-        AddressListSort = 3355443225L,
-        EnableCircularQueuing = 671088642L,
-        Flush = 671088644L,
-        AddressListChange = 671088663L,
-        DataToRead = 1074030207L,
-        OobDataRead = 1074033415L,
-        GetBroadcastAddress = 1207959557L,
-        AddressListQuery = 1207959574L,
-        QueryTargetPnpHandle = 1207959576L
-    }
-
-    public partial struct IPPacketInformation
-    {
-        public IPAddress Address { get { throw null; } }
-
-        public int Interface { get { throw null; } }
-
-        public override bool Equals(object comparand) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(IPPacketInformation packetInformation1, IPPacketInformation packetInformation2) { throw null; }
-
-        public static bool operator !=(IPPacketInformation packetInformation1, IPPacketInformation packetInformation2) { throw null; }
-    }
-
-    public enum IPProtectionLevel
-    {
-        Unspecified = -1,
-        Unrestricted = 10,
-        EdgeRestricted = 20,
-        Restricted = 30
-    }
-
-    public partial class IPv6MulticastOption
-    {
-        public IPv6MulticastOption(IPAddress group, long ifindex) { }
-
-        public IPv6MulticastOption(IPAddress group) { }
-
-        public IPAddress Group { get { throw null; } set { } }
-
-        public long InterfaceIndex { get { throw null; } set { } }
-    }
-
-    public partial class LingerOption
-    {
-        public LingerOption(bool enable, int seconds) { }
-
-        public bool Enabled { get { throw null; } set { } }
-
-        public int LingerTime { get { throw null; } set { } }
-    }
-
-    public partial class MulticastOption
-    {
-        public MulticastOption(IPAddress group, int interfaceIndex) { }
-
-        public MulticastOption(IPAddress group, IPAddress mcint) { }
-
-        public MulticastOption(IPAddress group) { }
-
-        public IPAddress Group { get { throw null; } set { } }
-
-        public int InterfaceIndex { get { throw null; } set { } }
-
-        public IPAddress LocalAddress { get { throw null; } set { } }
-    }
-
-    public partial class NetworkStream : IO.Stream
-    {
-        public NetworkStream(Socket socket, bool ownsSocket) { }
-
-        public NetworkStream(Socket socket) { }
-
-        public override bool CanRead { get { throw null; } }
-
-        public override bool CanSeek { get { throw null; } }
-
-        public override bool CanTimeout { get { throw null; } }
-
-        public override bool CanWrite { get { throw null; } }
-
-        public virtual bool DataAvailable { get { throw null; } }
-
-        public override long Length { get { throw null; } }
-
-        public override long Position { get { throw null; } set { } }
-
-        public override int ReadTimeout { get { throw null; } set { } }
-
-        public override int WriteTimeout { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        ~NetworkStream() {
-        }
-
-        public override void Flush() { }
-
-        public override Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override int Read(byte[] buffer, int offset, int size) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int size, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override long Seek(long offset, IO.SeekOrigin origin) { throw null; }
-
-        public override void SetLength(long value) { }
-
-        public override void Write(byte[] buffer, int offset, int size) { }
-
-        public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int size, Threading.CancellationToken cancellationToken) { throw null; }
-    }
-
-    public enum ProtocolType
-    {
-        Unknown = -1,
-        IP = 0,
-        IPv6HopByHopOptions = 0,
-        Unspecified = 0,
-        Icmp = 1,
-        Igmp = 2,
-        Ggp = 3,
-        IPv4 = 4,
-        Tcp = 6,
-        Pup = 12,
-        Udp = 17,
-        Idp = 22,
-        IPv6 = 41,
-        IPv6RoutingHeader = 43,
-        IPv6FragmentHeader = 44,
-        IPSecEncapsulatingSecurityPayload = 50,
-        IPSecAuthenticationHeader = 51,
-        IcmpV6 = 58,
-        IPv6NoNextHeader = 59,
-        IPv6DestinationOptions = 60,
-        ND = 77,
-        Raw = 255,
-        Ipx = 1000,
-        Spx = 1256,
-        SpxII = 1257
-    }
-
-    public enum SelectMode
-    {
-        SelectRead = 0,
-        SelectWrite = 1,
-        SelectError = 2
-    }
-
-    public partial class SendPacketsElement
-    {
-        public SendPacketsElement(byte[] buffer, int offset, int count, bool endOfPacket) { }
-
-        public SendPacketsElement(byte[] buffer, int offset, int count) { }
-
-        public SendPacketsElement(byte[] buffer) { }
-
-        public SendPacketsElement(string filepath, int offset, int count, bool endOfPacket) { }
-
-        public SendPacketsElement(string filepath, int offset, int count) { }
-
-        public SendPacketsElement(string filepath) { }
-
-        public byte[] Buffer { get { throw null; } }
-
-        public int Count { get { throw null; } }
-
-        public bool EndOfPacket { get { throw null; } }
-
-        public string FilePath { get { throw null; } }
-
-        public int Offset { get { throw null; } }
-    }
-
-    public partial class Socket : IDisposable
-    {
-        public Socket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType) { }
-
-        public Socket(SocketType socketType, ProtocolType protocolType) { }
-
-        public AddressFamily AddressFamily { get { throw null; } }
-
-        public int Available { get { throw null; } }
-
-        public bool Blocking { get { throw null; } set { } }
-
-        public bool Connected { get { throw null; } }
-
-        public bool DontFragment { get { throw null; } set { } }
-
-        public bool DualMode { get { throw null; } set { } }
-
-        public bool EnableBroadcast { get { throw null; } set { } }
-
-        public bool ExclusiveAddressUse { get { throw null; } set { } }
-
-        public bool IsBound { get { throw null; } }
-
-        public LingerOption LingerState { get { throw null; } set { } }
-
-        public EndPoint LocalEndPoint { get { throw null; } }
-
-        public bool MulticastLoopback { get { throw null; } set { } }
-
-        public bool NoDelay { get { throw null; } set { } }
-
-        public static bool OSSupportsIPv4 { get { throw null; } }
-
-        public static bool OSSupportsIPv6 { get { throw null; } }
-
-        public ProtocolType ProtocolType { get { throw null; } }
-
-        public int ReceiveBufferSize { get { throw null; } set { } }
-
-        public int ReceiveTimeout { get { throw null; } set { } }
-
-        public EndPoint RemoteEndPoint { get { throw null; } }
-
-        public int SendBufferSize { get { throw null; } set { } }
-
-        public int SendTimeout { get { throw null; } set { } }
-
-        public SocketType SocketType { get { throw null; } }
-
-        public short Ttl { get { throw null; } set { } }
-
-        public Socket Accept() { throw null; }
-
-        public bool AcceptAsync(SocketAsyncEventArgs e) { throw null; }
-
-        public void Bind(EndPoint localEP) { }
-
-        public static void CancelConnectAsync(SocketAsyncEventArgs e) { }
-
-        public void Connect(EndPoint remoteEP) { }
-
-        public void Connect(IPAddress address, int port) { }
-
-        public void Connect(IPAddress[] addresses, int port) { }
-
-        public void Connect(string host, int port) { }
-
-        public bool ConnectAsync(SocketAsyncEventArgs e) { throw null; }
-
-        public static bool ConnectAsync(SocketType socketType, ProtocolType protocolType, SocketAsyncEventArgs e) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        ~Socket() {
-        }
-
-        public void GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, byte[] optionValue) { }
-
-        public byte[] GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionLength) { throw null; }
-
-        public object GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName) { throw null; }
-
-        public int IOControl(int ioControlCode, byte[] optionInValue, byte[] optionOutValue) { throw null; }
-
-        public int IOControl(IOControlCode ioControlCode, byte[] optionInValue, byte[] optionOutValue) { throw null; }
-
-        public void Listen(int backlog) { }
-
-        public bool Poll(int microSeconds, SelectMode mode) { throw null; }
-
-        public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode) { throw null; }
-
-        public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags) { throw null; }
-
-        public int Receive(byte[] buffer, int size, SocketFlags socketFlags) { throw null; }
-
-        public int Receive(byte[] buffer, SocketFlags socketFlags) { throw null; }
-
-        public int Receive(byte[] buffer) { throw null; }
-
-        public int Receive(Collections.Generic.IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode) { throw null; }
-
-        public int Receive(Collections.Generic.IList<ArraySegment<byte>> buffers, SocketFlags socketFlags) { throw null; }
-
-        public int Receive(Collections.Generic.IList<ArraySegment<byte>> buffers) { throw null; }
-
-        public bool ReceiveAsync(SocketAsyncEventArgs e) { throw null; }
-
-        public int ReceiveFrom(byte[] buffer, int offset, int size, SocketFlags socketFlags, ref EndPoint remoteEP) { throw null; }
-
-        public int ReceiveFrom(byte[] buffer, int size, SocketFlags socketFlags, ref EndPoint remoteEP) { throw null; }
-
-        public int ReceiveFrom(byte[] buffer, ref EndPoint remoteEP) { throw null; }
-
-        public int ReceiveFrom(byte[] buffer, SocketFlags socketFlags, ref EndPoint remoteEP) { throw null; }
-
-        public bool ReceiveFromAsync(SocketAsyncEventArgs e) { throw null; }
-
-        public int ReceiveMessageFrom(byte[] buffer, int offset, int size, ref SocketFlags socketFlags, ref EndPoint remoteEP, out IPPacketInformation ipPacketInformation) { throw null; }
-
-        public bool ReceiveMessageFromAsync(SocketAsyncEventArgs e) { throw null; }
-
-        public static void Select(Collections.IList checkRead, Collections.IList checkWrite, Collections.IList checkError, int microSeconds) { }
-
-        public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode) { throw null; }
-
-        public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags) { throw null; }
-
-        public int Send(byte[] buffer, int size, SocketFlags socketFlags) { throw null; }
-
-        public int Send(byte[] buffer, SocketFlags socketFlags) { throw null; }
-
-        public int Send(byte[] buffer) { throw null; }
-
-        public int Send(Collections.Generic.IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode) { throw null; }
-
-        public int Send(Collections.Generic.IList<ArraySegment<byte>> buffers, SocketFlags socketFlags) { throw null; }
-
-        public int Send(Collections.Generic.IList<ArraySegment<byte>> buffers) { throw null; }
-
-        public bool SendAsync(SocketAsyncEventArgs e) { throw null; }
-
-        public bool SendPacketsAsync(SocketAsyncEventArgs e) { throw null; }
-
-        public int SendTo(byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint remoteEP) { throw null; }
-
-        public int SendTo(byte[] buffer, int size, SocketFlags socketFlags, EndPoint remoteEP) { throw null; }
-
-        public int SendTo(byte[] buffer, EndPoint remoteEP) { throw null; }
-
-        public int SendTo(byte[] buffer, SocketFlags socketFlags, EndPoint remoteEP) { throw null; }
-
-        public bool SendToAsync(SocketAsyncEventArgs e) { throw null; }
-
-        public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, bool optionValue) { }
-
-        public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, byte[] optionValue) { }
-
-        public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue) { }
-
-        public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, object optionValue) { }
-
-        public void Shutdown(SocketShutdown how) { }
-    }
-
-    public partial class SocketAsyncEventArgs : EventArgs, IDisposable
-    {
-        public Socket AcceptSocket { get { throw null; } set { } }
-
-        public byte[] Buffer { get { throw null; } }
-
-        public Collections.Generic.IList<ArraySegment<byte>> BufferList { get { throw null; } set { } }
-
-        public int BytesTransferred { get { throw null; } }
-
-        public Exception ConnectByNameError { get { throw null; } }
-
-        public Socket ConnectSocket { get { throw null; } }
-
-        public int Count { get { throw null; } }
-
-        public SocketAsyncOperation LastOperation { get { throw null; } }
-
-        public int Offset { get { throw null; } }
-
-        public IPPacketInformation ReceiveMessageFromPacketInfo { get { throw null; } }
-
-        public EndPoint RemoteEndPoint { get { throw null; } set { } }
-
-        public SendPacketsElement[] SendPacketsElements { get { throw null; } set { } }
-
-        public int SendPacketsSendSize { get { throw null; } set { } }
-
-        public SocketError SocketError { get { throw null; } set { } }
-
-        public SocketFlags SocketFlags { get { throw null; } set { } }
-
-        public object UserToken { get { throw null; } set { } }
-
-        public event EventHandler<SocketAsyncEventArgs> Completed { add { } remove { } }
-
-        public void Dispose() { }
-
-        ~SocketAsyncEventArgs() {
-        }
-
-        protected virtual void OnCompleted(SocketAsyncEventArgs e) { }
-
-        public void SetBuffer(byte[] buffer, int offset, int count) { }
-
-        public void SetBuffer(int offset, int count) { }
-    }
-
-    public enum SocketAsyncOperation
-    {
-        None = 0,
-        Accept = 1,
-        Connect = 2,
-        Disconnect = 3,
-        Receive = 4,
-        ReceiveFrom = 5,
-        ReceiveMessageFrom = 6,
-        Send = 7,
-        SendPackets = 8,
-        SendTo = 9
-    }
-
-    [Flags]
-    public enum SocketFlags
-    {
-        None = 0,
-        OutOfBand = 1,
-        Peek = 2,
-        DontRoute = 4,
-        Truncated = 256,
-        ControlDataTruncated = 512,
-        Broadcast = 1024,
-        Multicast = 2048,
-        Partial = 32768
-    }
-
-    public enum SocketOptionLevel
-    {
-        IP = 0,
-        Tcp = 6,
-        Udp = 17,
-        IPv6 = 41,
-        Socket = 65535
-    }
-
-    public enum SocketOptionName
-    {
-        DontLinger = -129,
-        ExclusiveAddressUse = -5,
-        Debug = 1,
-        IPOptions = 1,
-        NoChecksum = 1,
-        NoDelay = 1,
-        AcceptConnection = 2,
-        BsdUrgent = 2,
-        Expedited = 2,
-        HeaderIncluded = 2,
-        TypeOfService = 3,
-        IpTimeToLive = 4,
-        ReuseAddress = 4,
-        KeepAlive = 8,
-        MulticastInterface = 9,
-        MulticastTimeToLive = 10,
-        MulticastLoopback = 11,
-        AddMembership = 12,
-        DropMembership = 13,
-        DontFragment = 14,
-        AddSourceMembership = 15,
-        DontRoute = 16,
-        DropSourceMembership = 16,
-        BlockSource = 17,
-        UnblockSource = 18,
-        PacketInformation = 19,
-        ChecksumCoverage = 20,
-        HopLimit = 21,
-        IPProtectionLevel = 23,
-        IPv6Only = 27,
-        Broadcast = 32,
-        UseLoopback = 64,
-        Linger = 128,
-        OutOfBandInline = 256,
-        SendBuffer = 4097,
-        ReceiveBuffer = 4098,
-        SendLowWater = 4099,
-        ReceiveLowWater = 4100,
-        SendTimeout = 4101,
-        ReceiveTimeout = 4102,
-        Error = 4103,
-        Type = 4104,
-        ReuseUnicastPort = 12295,
-        UpdateAcceptContext = 28683,
-        UpdateConnectContext = 28688,
-        MaxConnections = int.MaxValue
-    }
-
-    public partial struct SocketReceiveFromResult
-    {
-        public int ReceivedBytes;
-        public EndPoint RemoteEndPoint;
-    }
-
-    public partial struct SocketReceiveMessageFromResult
-    {
-        public IPPacketInformation PacketInformation;
-        public int ReceivedBytes;
-        public EndPoint RemoteEndPoint;
-        public SocketFlags SocketFlags;
-    }
-
-    public enum SocketShutdown
-    {
-        Receive = 0,
-        Send = 1,
-        Both = 2
-    }
-
-    public static partial class SocketTaskExtensions
-    {
-        public static Threading.Tasks.Task<Socket> AcceptAsync(this Socket socket, Socket acceptSocket) { throw null; }
-
-        public static Threading.Tasks.Task<Socket> AcceptAsync(this Socket socket) { throw null; }
-
-        public static Threading.Tasks.Task ConnectAsync(this Socket socket, EndPoint remoteEP) { throw null; }
-
-        public static Threading.Tasks.Task ConnectAsync(this Socket socket, IPAddress address, int port) { throw null; }
-
-        public static Threading.Tasks.Task ConnectAsync(this Socket socket, IPAddress[] addresses, int port) { throw null; }
-
-        public static Threading.Tasks.Task ConnectAsync(this Socket socket, string host, int port) { throw null; }
-
-        public static Threading.Tasks.Task<int> ReceiveAsync(this Socket socket, ArraySegment<byte> buffer, SocketFlags socketFlags) { throw null; }
-
-        public static Threading.Tasks.Task<int> ReceiveAsync(this Socket socket, Collections.Generic.IList<ArraySegment<byte>> buffers, SocketFlags socketFlags) { throw null; }
-
-        public static Threading.Tasks.Task<SocketReceiveFromResult> ReceiveFromAsync(this Socket socket, ArraySegment<byte> buffer, SocketFlags socketFlags, EndPoint remoteEndPoint) { throw null; }
-
-        public static Threading.Tasks.Task<SocketReceiveMessageFromResult> ReceiveMessageFromAsync(this Socket socket, ArraySegment<byte> buffer, SocketFlags socketFlags, EndPoint remoteEndPoint) { throw null; }
-
-        public static Threading.Tasks.Task<int> SendAsync(this Socket socket, ArraySegment<byte> buffer, SocketFlags socketFlags) { throw null; }
-
-        public static Threading.Tasks.Task<int> SendAsync(this Socket socket, Collections.Generic.IList<ArraySegment<byte>> buffers, SocketFlags socketFlags) { throw null; }
-
-        public static Threading.Tasks.Task<int> SendToAsync(this Socket socket, ArraySegment<byte> buffer, SocketFlags socketFlags, EndPoint remoteEP) { throw null; }
-    }
-
-    public enum SocketType
-    {
-        Unknown = -1,
-        Stream = 1,
-        Dgram = 2,
-        Raw = 3,
-        Rdm = 4,
-        Seqpacket = 5
-    }
-
-    public partial class TcpClient : IDisposable
-    {
-        public TcpClient() { }
-
-        public TcpClient(AddressFamily family) { }
-
-        protected bool Active { get { throw null; } set { } }
-
-        public int Available { get { throw null; } }
-
-        public Socket Client { get { throw null; } set { } }
-
-        public bool Connected { get { throw null; } }
-
-        public bool ExclusiveAddressUse { get { throw null; } set { } }
-
-        public LingerOption LingerState { get { throw null; } set { } }
-
-        public bool NoDelay { get { throw null; } set { } }
-
-        public int ReceiveBufferSize { get { throw null; } set { } }
-
-        public int ReceiveTimeout { get { throw null; } set { } }
-
-        public int SendBufferSize { get { throw null; } set { } }
-
-        public int SendTimeout { get { throw null; } set { } }
-
-        public Threading.Tasks.Task ConnectAsync(IPAddress address, int port) { throw null; }
-
-        public Threading.Tasks.Task ConnectAsync(IPAddress[] addresses, int port) { throw null; }
-
-        public Threading.Tasks.Task ConnectAsync(string host, int port) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        ~TcpClient() {
-        }
-
-        public NetworkStream GetStream() { throw null; }
-    }
-
-    public partial class TcpListener
-    {
-        public TcpListener(IPAddress localaddr, int port) { }
-
-        public TcpListener(IPEndPoint localEP) { }
-
-        protected bool Active { get { throw null; } }
-
-        public bool ExclusiveAddressUse { get { throw null; } set { } }
-
-        public EndPoint LocalEndpoint { get { throw null; } }
-
-        public Socket Server { get { throw null; } }
-
-        public Threading.Tasks.Task<Socket> AcceptSocketAsync() { throw null; }
-
-        public Threading.Tasks.Task<TcpClient> AcceptTcpClientAsync() { throw null; }
-
-        public bool Pending() { throw null; }
-
-        public void Start() { }
-
-        public void Start(int backlog) { }
-
-        public void Stop() { }
-    }
-
-    public partial class UdpClient : IDisposable
-    {
-        public UdpClient() { }
-
-        public UdpClient(int port, AddressFamily family) { }
-
-        public UdpClient(int port) { }
-
-        public UdpClient(IPEndPoint localEP) { }
-
-        public UdpClient(AddressFamily family) { }
-
-        protected bool Active { get { throw null; } set { } }
-
-        public int Available { get { throw null; } }
-
-        public Socket Client { get { throw null; } set { } }
-
-        public bool DontFragment { get { throw null; } set { } }
-
-        public bool EnableBroadcast { get { throw null; } set { } }
-
-        public bool ExclusiveAddressUse { get { throw null; } set { } }
-
-        public bool MulticastLoopback { get { throw null; } set { } }
-
-        public short Ttl { get { throw null; } set { } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public void DropMulticastGroup(IPAddress multicastAddr, int ifindex) { }
-
-        public void DropMulticastGroup(IPAddress multicastAddr) { }
-
-        public void JoinMulticastGroup(int ifindex, IPAddress multicastAddr) { }
-
-        public void JoinMulticastGroup(IPAddress multicastAddr, int timeToLive) { }
-
-        public void JoinMulticastGroup(IPAddress multicastAddr, IPAddress localAddress) { }
-
-        public void JoinMulticastGroup(IPAddress multicastAddr) { }
-
-        public Threading.Tasks.Task<UdpReceiveResult> ReceiveAsync() { throw null; }
-
-        public Threading.Tasks.Task<int> SendAsync(byte[] datagram, int bytes, IPEndPoint endPoint) { throw null; }
-
-        public Threading.Tasks.Task<int> SendAsync(byte[] datagram, int bytes, string hostname, int port) { throw null; }
-    }
-
-    public partial struct UdpReceiveResult : IEquatable<UdpReceiveResult>
-    {
-        public UdpReceiveResult(byte[] buffer, IPEndPoint remoteEndPoint) { }
-
-        public byte[] Buffer { get { throw null; } }
-
-        public IPEndPoint RemoteEndPoint { get { throw null; } }
-
-        public bool Equals(UdpReceiveResult other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(UdpReceiveResult left, UdpReceiveResult right) { throw null; }
-
-        public static bool operator !=(UdpReceiveResult left, UdpReceiveResult right) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.net.sockets/4.3.0/system.net.sockets.nuspec b/src/referencePackages/src/system.net.sockets/4.3.0/system.net.sockets.nuspec
deleted file mode 100644
index 42a89ce1..00000000
--- a/src/referencePackages/src/system.net.sockets/4.3.0/system.net.sockets.nuspec
+++ /dev/null
@@ -1,42 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Net.Sockets</id>
-    <version>4.3.0</version>
-    <title>System.Net.Sockets</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides classes such as Socket, TcpClient and UdpClient, which enable developers to send and receive data over the network.
-
-Commonly Used Types:
-System.Net.Sockets.Socket
-System.Net.Sockets.SocketAsyncEventArgs
-System.Net.Sockets.LingerOption
-System.Net.Sockets.SocketAsyncOperation
-System.Net.Sockets.ProtocolType
-System.Net.Sockets.NetworkStream
-System.Net.Sockets.TcpClient
-System.Net.Sockets.SocketType
-System.Net.Sockets.UdpClient
-System.Net.Sockets.SocketShutdown
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Net.Primitives" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.numerics.vectors/4.4.0/System.Numerics.Vectors.4.4.0.csproj b/src/referencePackages/src/system.numerics.vectors/4.4.0/System.Numerics.Vectors.4.4.0.csproj
index 2eaefba2..bc100e00 100644
--- a/src/referencePackages/src/system.numerics.vectors/4.4.0/System.Numerics.Vectors.4.4.0.csproj
+++ b/src/referencePackages/src/system.numerics.vectors/4.4.0/System.Numerics.Vectors.4.4.0.csproj
@@ -1,7 +1,7 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Numerics.Vectors</AssemblyName>
   </PropertyGroup>
 
diff --git a/src/referencePackages/src/system.numerics.vectors/4.4.0/ref/netstandard1.0/System.Numerics.Vectors.cs b/src/referencePackages/src/system.numerics.vectors/4.4.0/ref/netstandard1.0/System.Numerics.Vectors.cs
deleted file mode 100644
index 7cd2014d..00000000
--- a/src/referencePackages/src/system.numerics.vectors/4.4.0/ref/netstandard1.0/System.Numerics.Vectors.cs
+++ /dev/null
@@ -1,996 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Numerics.Vectors")]
-[assembly: System.Reflection.AssemblyDescription("System.Numerics.Vectors")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Numerics.Vectors")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.25519.03")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.25519.03 built by: dlab-DDVSOWINAGE013. Commit Hash: 8321c729934c0f8be754953439b88e6e1c120c24")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyMetadata("PreferInbox", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.3.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Numerics
-{
-    public partial struct Matrix3x2 : IEquatable<Matrix3x2>
-    {
-        public float M11;
-        public float M12;
-        public float M21;
-        public float M22;
-        public float M31;
-        public float M32;
-        public Matrix3x2(float m11, float m12, float m21, float m22, float m31, float m32) { }
-
-        public static Matrix3x2 Identity { get { throw null; } }
-
-        public bool IsIdentity { get { throw null; } }
-
-        public Vector2 Translation { get { throw null; } set { } }
-
-        public static Matrix3x2 Add(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public static Matrix3x2 CreateRotation(float radians, Vector2 centerPoint) { throw null; }
-
-        public static Matrix3x2 CreateRotation(float radians) { throw null; }
-
-        public static Matrix3x2 CreateScale(Vector2 scales, Vector2 centerPoint) { throw null; }
-
-        public static Matrix3x2 CreateScale(Vector2 scales) { throw null; }
-
-        public static Matrix3x2 CreateScale(float scale, Vector2 centerPoint) { throw null; }
-
-        public static Matrix3x2 CreateScale(float xScale, float yScale, Vector2 centerPoint) { throw null; }
-
-        public static Matrix3x2 CreateScale(float xScale, float yScale) { throw null; }
-
-        public static Matrix3x2 CreateScale(float scale) { throw null; }
-
-        public static Matrix3x2 CreateSkew(float radiansX, float radiansY, Vector2 centerPoint) { throw null; }
-
-        public static Matrix3x2 CreateSkew(float radiansX, float radiansY) { throw null; }
-
-        public static Matrix3x2 CreateTranslation(Vector2 position) { throw null; }
-
-        public static Matrix3x2 CreateTranslation(float xPosition, float yPosition) { throw null; }
-
-        public bool Equals(Matrix3x2 other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public float GetDeterminant() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool Invert(Matrix3x2 matrix, out Matrix3x2 result) { throw null; }
-
-        public static Matrix3x2 Lerp(Matrix3x2 matrix1, Matrix3x2 matrix2, float amount) { throw null; }
-
-        public static Matrix3x2 Multiply(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public static Matrix3x2 Multiply(Matrix3x2 value1, float value2) { throw null; }
-
-        public static Matrix3x2 Negate(Matrix3x2 value) { throw null; }
-
-        public static Matrix3x2 operator +(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public static bool operator ==(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public static bool operator !=(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public static Matrix3x2 operator *(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public static Matrix3x2 operator *(Matrix3x2 value1, float value2) { throw null; }
-
-        public static Matrix3x2 operator -(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public static Matrix3x2 operator -(Matrix3x2 value) { throw null; }
-
-        public static Matrix3x2 Subtract(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial struct Matrix4x4 : IEquatable<Matrix4x4>
-    {
-        public float M11;
-        public float M12;
-        public float M13;
-        public float M14;
-        public float M21;
-        public float M22;
-        public float M23;
-        public float M24;
-        public float M31;
-        public float M32;
-        public float M33;
-        public float M34;
-        public float M41;
-        public float M42;
-        public float M43;
-        public float M44;
-        public Matrix4x4(Matrix3x2 value) { }
-
-        public Matrix4x4(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44) { }
-
-        public static Matrix4x4 Identity { get { throw null; } }
-
-        public bool IsIdentity { get { throw null; } }
-
-        public Vector3 Translation { get { throw null; } set { } }
-
-        public static Matrix4x4 Add(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public static Matrix4x4 CreateBillboard(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector) { throw null; }
-
-        public static Matrix4x4 CreateConstrainedBillboard(Vector3 objectPosition, Vector3 cameraPosition, Vector3 rotateAxis, Vector3 cameraForwardVector, Vector3 objectForwardVector) { throw null; }
-
-        public static Matrix4x4 CreateFromAxisAngle(Vector3 axis, float angle) { throw null; }
-
-        public static Matrix4x4 CreateFromQuaternion(Quaternion quaternion) { throw null; }
-
-        public static Matrix4x4 CreateFromYawPitchRoll(float yaw, float pitch, float roll) { throw null; }
-
-        public static Matrix4x4 CreateLookAt(Vector3 cameraPosition, Vector3 cameraTarget, Vector3 cameraUpVector) { throw null; }
-
-        public static Matrix4x4 CreateOrthographic(float width, float height, float zNearPlane, float zFarPlane) { throw null; }
-
-        public static Matrix4x4 CreateOrthographicOffCenter(float left, float right, float bottom, float top, float zNearPlane, float zFarPlane) { throw null; }
-
-        public static Matrix4x4 CreatePerspective(float width, float height, float nearPlaneDistance, float farPlaneDistance) { throw null; }
-
-        public static Matrix4x4 CreatePerspectiveFieldOfView(float fieldOfView, float aspectRatio, float nearPlaneDistance, float farPlaneDistance) { throw null; }
-
-        public static Matrix4x4 CreatePerspectiveOffCenter(float left, float right, float bottom, float top, float nearPlaneDistance, float farPlaneDistance) { throw null; }
-
-        public static Matrix4x4 CreateReflection(Plane value) { throw null; }
-
-        public static Matrix4x4 CreateRotationX(float radians, Vector3 centerPoint) { throw null; }
-
-        public static Matrix4x4 CreateRotationX(float radians) { throw null; }
-
-        public static Matrix4x4 CreateRotationY(float radians, Vector3 centerPoint) { throw null; }
-
-        public static Matrix4x4 CreateRotationY(float radians) { throw null; }
-
-        public static Matrix4x4 CreateRotationZ(float radians, Vector3 centerPoint) { throw null; }
-
-        public static Matrix4x4 CreateRotationZ(float radians) { throw null; }
-
-        public static Matrix4x4 CreateScale(Vector3 scales, Vector3 centerPoint) { throw null; }
-
-        public static Matrix4x4 CreateScale(Vector3 scales) { throw null; }
-
-        public static Matrix4x4 CreateScale(float scale, Vector3 centerPoint) { throw null; }
-
-        public static Matrix4x4 CreateScale(float xScale, float yScale, float zScale, Vector3 centerPoint) { throw null; }
-
-        public static Matrix4x4 CreateScale(float xScale, float yScale, float zScale) { throw null; }
-
-        public static Matrix4x4 CreateScale(float scale) { throw null; }
-
-        public static Matrix4x4 CreateShadow(Vector3 lightDirection, Plane plane) { throw null; }
-
-        public static Matrix4x4 CreateTranslation(Vector3 position) { throw null; }
-
-        public static Matrix4x4 CreateTranslation(float xPosition, float yPosition, float zPosition) { throw null; }
-
-        public static Matrix4x4 CreateWorld(Vector3 position, Vector3 forward, Vector3 up) { throw null; }
-
-        public static bool Decompose(Matrix4x4 matrix, out Vector3 scale, out Quaternion rotation, out Vector3 translation) { throw null; }
-
-        public bool Equals(Matrix4x4 other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public float GetDeterminant() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool Invert(Matrix4x4 matrix, out Matrix4x4 result) { throw null; }
-
-        public static Matrix4x4 Lerp(Matrix4x4 matrix1, Matrix4x4 matrix2, float amount) { throw null; }
-
-        public static Matrix4x4 Multiply(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public static Matrix4x4 Multiply(Matrix4x4 value1, float value2) { throw null; }
-
-        public static Matrix4x4 Negate(Matrix4x4 value) { throw null; }
-
-        public static Matrix4x4 operator +(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public static bool operator ==(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public static bool operator !=(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public static Matrix4x4 operator *(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public static Matrix4x4 operator *(Matrix4x4 value1, float value2) { throw null; }
-
-        public static Matrix4x4 operator -(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public static Matrix4x4 operator -(Matrix4x4 value) { throw null; }
-
-        public static Matrix4x4 Subtract(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static Matrix4x4 Transform(Matrix4x4 value, Quaternion rotation) { throw null; }
-
-        public static Matrix4x4 Transpose(Matrix4x4 matrix) { throw null; }
-    }
-
-    public partial struct Plane : IEquatable<Plane>
-    {
-        public float D;
-        public Vector3 Normal;
-        public Plane(Vector3 normal, float d) { }
-
-        public Plane(Vector4 value) { }
-
-        public Plane(float x, float y, float z, float d) { }
-
-        public static Plane CreateFromVertices(Vector3 point1, Vector3 point2, Vector3 point3) { throw null; }
-
-        public static float Dot(Plane plane, Vector4 value) { throw null; }
-
-        public static float DotCoordinate(Plane plane, Vector3 value) { throw null; }
-
-        public static float DotNormal(Plane plane, Vector3 value) { throw null; }
-
-        public bool Equals(Plane other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static Plane Normalize(Plane value) { throw null; }
-
-        public static bool operator ==(Plane value1, Plane value2) { throw null; }
-
-        public static bool operator !=(Plane value1, Plane value2) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static Plane Transform(Plane plane, Matrix4x4 matrix) { throw null; }
-
-        public static Plane Transform(Plane plane, Quaternion rotation) { throw null; }
-    }
-
-    public partial struct Quaternion : IEquatable<Quaternion>
-    {
-        public float W;
-        public float X;
-        public float Y;
-        public float Z;
-        public Quaternion(Vector3 vectorPart, float scalarPart) { }
-
-        public Quaternion(float x, float y, float z, float w) { }
-
-        public static Quaternion Identity { get { throw null; } }
-
-        public bool IsIdentity { get { throw null; } }
-
-        public static Quaternion Add(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static Quaternion Concatenate(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static Quaternion Conjugate(Quaternion value) { throw null; }
-
-        public static Quaternion CreateFromAxisAngle(Vector3 axis, float angle) { throw null; }
-
-        public static Quaternion CreateFromRotationMatrix(Matrix4x4 matrix) { throw null; }
-
-        public static Quaternion CreateFromYawPitchRoll(float yaw, float pitch, float roll) { throw null; }
-
-        public static Quaternion Divide(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static float Dot(Quaternion quaternion1, Quaternion quaternion2) { throw null; }
-
-        public bool Equals(Quaternion other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static Quaternion Inverse(Quaternion value) { throw null; }
-
-        public float Length() { throw null; }
-
-        public float LengthSquared() { throw null; }
-
-        public static Quaternion Lerp(Quaternion quaternion1, Quaternion quaternion2, float amount) { throw null; }
-
-        public static Quaternion Multiply(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static Quaternion Multiply(Quaternion value1, float value2) { throw null; }
-
-        public static Quaternion Negate(Quaternion value) { throw null; }
-
-        public static Quaternion Normalize(Quaternion value) { throw null; }
-
-        public static Quaternion operator +(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static Quaternion operator /(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static bool operator ==(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static bool operator !=(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static Quaternion operator *(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static Quaternion operator *(Quaternion value1, float value2) { throw null; }
-
-        public static Quaternion operator -(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static Quaternion operator -(Quaternion value) { throw null; }
-
-        public static Quaternion Slerp(Quaternion quaternion1, Quaternion quaternion2, float amount) { throw null; }
-
-        public static Quaternion Subtract(Quaternion value1, Quaternion value2) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public static partial class Vector
-    {
-        public static bool IsHardwareAccelerated { get { throw null; } }
-
-        public static Vector<T> Abs<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<T> Add<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<T> AndNot<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<byte> AsVectorByte<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<double> AsVectorDouble<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<short> AsVectorInt16<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<int> AsVectorInt32<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<long> AsVectorInt64<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<sbyte> AsVectorSByte<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<float> AsVectorSingle<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<ushort> AsVectorUInt16<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<uint> AsVectorUInt32<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<ulong> AsVectorUInt64<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<T> BitwiseAnd<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<T> BitwiseOr<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<float> ConditionalSelect(Vector<int> condition, Vector<float> left, Vector<float> right) { throw null; }
-
-        public static Vector<double> ConditionalSelect(Vector<long> condition, Vector<double> left, Vector<double> right) { throw null; }
-
-        public static Vector<T> ConditionalSelect<T>(Vector<T> condition, Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<double> ConvertToDouble(Vector<long> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<double> ConvertToDouble(Vector<ulong> value) { throw null; }
-
-        public static Vector<int> ConvertToInt32(Vector<float> value) { throw null; }
-
-        public static Vector<long> ConvertToInt64(Vector<double> value) { throw null; }
-
-        public static Vector<float> ConvertToSingle(Vector<int> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<float> ConvertToSingle(Vector<uint> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<uint> ConvertToUInt32(Vector<float> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<ulong> ConvertToUInt64(Vector<double> value) { throw null; }
-
-        public static Vector<T> Divide<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static T Dot<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<long> Equals(Vector<double> left, Vector<double> right) { throw null; }
-
-        public static Vector<int> Equals(Vector<int> left, Vector<int> right) { throw null; }
-
-        public static Vector<long> Equals(Vector<long> left, Vector<long> right) { throw null; }
-
-        public static Vector<int> Equals(Vector<float> left, Vector<float> right) { throw null; }
-
-        public static Vector<T> Equals<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool EqualsAll<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool EqualsAny<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<long> GreaterThan(Vector<double> left, Vector<double> right) { throw null; }
-
-        public static Vector<int> GreaterThan(Vector<int> left, Vector<int> right) { throw null; }
-
-        public static Vector<long> GreaterThan(Vector<long> left, Vector<long> right) { throw null; }
-
-        public static Vector<int> GreaterThan(Vector<float> left, Vector<float> right) { throw null; }
-
-        public static Vector<T> GreaterThan<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool GreaterThanAll<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool GreaterThanAny<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<long> GreaterThanOrEqual(Vector<double> left, Vector<double> right) { throw null; }
-
-        public static Vector<int> GreaterThanOrEqual(Vector<int> left, Vector<int> right) { throw null; }
-
-        public static Vector<long> GreaterThanOrEqual(Vector<long> left, Vector<long> right) { throw null; }
-
-        public static Vector<int> GreaterThanOrEqual(Vector<float> left, Vector<float> right) { throw null; }
-
-        public static Vector<T> GreaterThanOrEqual<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool GreaterThanOrEqualAll<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool GreaterThanOrEqualAny<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<long> LessThan(Vector<double> left, Vector<double> right) { throw null; }
-
-        public static Vector<int> LessThan(Vector<int> left, Vector<int> right) { throw null; }
-
-        public static Vector<long> LessThan(Vector<long> left, Vector<long> right) { throw null; }
-
-        public static Vector<int> LessThan(Vector<float> left, Vector<float> right) { throw null; }
-
-        public static Vector<T> LessThan<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool LessThanAll<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool LessThanAny<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<long> LessThanOrEqual(Vector<double> left, Vector<double> right) { throw null; }
-
-        public static Vector<int> LessThanOrEqual(Vector<int> left, Vector<int> right) { throw null; }
-
-        public static Vector<long> LessThanOrEqual(Vector<long> left, Vector<long> right) { throw null; }
-
-        public static Vector<int> LessThanOrEqual(Vector<float> left, Vector<float> right) { throw null; }
-
-        public static Vector<T> LessThanOrEqual<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool LessThanOrEqualAll<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool LessThanOrEqualAny<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<T> Max<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<T> Min<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<T> Multiply<T>(T left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<T> Multiply<T>(Vector<T> left, T right)
-            where T : struct { throw null; }
-
-        public static Vector<T> Multiply<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<float> Narrow(Vector<double> source1, Vector<double> source2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<sbyte> Narrow(Vector<short> source1, Vector<short> source2) { throw null; }
-
-        public static Vector<short> Narrow(Vector<int> source1, Vector<int> source2) { throw null; }
-
-        public static Vector<int> Narrow(Vector<long> source1, Vector<long> source2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<byte> Narrow(Vector<ushort> source1, Vector<ushort> source2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<ushort> Narrow(Vector<uint> source1, Vector<uint> source2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<uint> Narrow(Vector<ulong> source1, Vector<ulong> source2) { throw null; }
-
-        public static Vector<T> Negate<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<T> OnesComplement<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<T> SquareRoot<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<T> Subtract<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        [CLSCompliant(false)]
-        public static void Widen(Vector<byte> source, out Vector<ushort> dest1, out Vector<ushort> dest2) { throw null; }
-
-        public static void Widen(Vector<short> source, out Vector<int> dest1, out Vector<int> dest2) { throw null; }
-
-        public static void Widen(Vector<int> source, out Vector<long> dest1, out Vector<long> dest2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static void Widen(Vector<sbyte> source, out Vector<short> dest1, out Vector<short> dest2) { throw null; }
-
-        public static void Widen(Vector<float> source, out Vector<double> dest1, out Vector<double> dest2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static void Widen(Vector<ushort> source, out Vector<uint> dest1, out Vector<uint> dest2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static void Widen(Vector<uint> source, out Vector<ulong> dest1, out Vector<ulong> dest2) { throw null; }
-
-        public static Vector<T> Xor<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-    }
-
-    public partial struct Vector2 : IEquatable<Vector2>, IFormattable
-    {
-        public float X;
-        public float Y;
-        public Vector2(float x, float y) { }
-
-        public Vector2(float value) { }
-
-        public static Vector2 One { get { throw null; } }
-
-        public static Vector2 UnitX { get { throw null; } }
-
-        public static Vector2 UnitY { get { throw null; } }
-
-        public static Vector2 Zero { get { throw null; } }
-
-        public static Vector2 Abs(Vector2 value) { throw null; }
-
-        public static Vector2 Add(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 Clamp(Vector2 value1, Vector2 min, Vector2 max) { throw null; }
-
-        public void CopyTo(float[] array, int index) { }
-
-        public void CopyTo(float[] array) { }
-
-        public static float Distance(Vector2 value1, Vector2 value2) { throw null; }
-
-        public static float DistanceSquared(Vector2 value1, Vector2 value2) { throw null; }
-
-        public static Vector2 Divide(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 Divide(Vector2 left, float divisor) { throw null; }
-
-        public static float Dot(Vector2 value1, Vector2 value2) { throw null; }
-
-        public bool Equals(Vector2 other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public float Length() { throw null; }
-
-        public float LengthSquared() { throw null; }
-
-        public static Vector2 Lerp(Vector2 value1, Vector2 value2, float amount) { throw null; }
-
-        public static Vector2 Max(Vector2 value1, Vector2 value2) { throw null; }
-
-        public static Vector2 Min(Vector2 value1, Vector2 value2) { throw null; }
-
-        public static Vector2 Multiply(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 Multiply(Vector2 left, float right) { throw null; }
-
-        public static Vector2 Multiply(float left, Vector2 right) { throw null; }
-
-        public static Vector2 Negate(Vector2 value) { throw null; }
-
-        public static Vector2 Normalize(Vector2 value) { throw null; }
-
-        public static Vector2 operator +(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 operator /(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 operator /(Vector2 value1, float value2) { throw null; }
-
-        public static bool operator ==(Vector2 left, Vector2 right) { throw null; }
-
-        public static bool operator !=(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 operator *(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 operator *(Vector2 left, float right) { throw null; }
-
-        public static Vector2 operator *(float left, Vector2 right) { throw null; }
-
-        public static Vector2 operator -(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 operator -(Vector2 value) { throw null; }
-
-        public static Vector2 Reflect(Vector2 vector, Vector2 normal) { throw null; }
-
-        public static Vector2 SquareRoot(Vector2 value) { throw null; }
-
-        public static Vector2 Subtract(Vector2 left, Vector2 right) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public string ToString(string format, IFormatProvider formatProvider) { throw null; }
-
-        public string ToString(string format) { throw null; }
-
-        public static Vector2 Transform(Vector2 position, Matrix3x2 matrix) { throw null; }
-
-        public static Vector2 Transform(Vector2 position, Matrix4x4 matrix) { throw null; }
-
-        public static Vector2 Transform(Vector2 value, Quaternion rotation) { throw null; }
-
-        public static Vector2 TransformNormal(Vector2 normal, Matrix3x2 matrix) { throw null; }
-
-        public static Vector2 TransformNormal(Vector2 normal, Matrix4x4 matrix) { throw null; }
-    }
-
-    public partial struct Vector3 : IEquatable<Vector3>, IFormattable
-    {
-        public float X;
-        public float Y;
-        public float Z;
-        public Vector3(Vector2 value, float z) { }
-
-        public Vector3(float x, float y, float z) { }
-
-        public Vector3(float value) { }
-
-        public static Vector3 One { get { throw null; } }
-
-        public static Vector3 UnitX { get { throw null; } }
-
-        public static Vector3 UnitY { get { throw null; } }
-
-        public static Vector3 UnitZ { get { throw null; } }
-
-        public static Vector3 Zero { get { throw null; } }
-
-        public static Vector3 Abs(Vector3 value) { throw null; }
-
-        public static Vector3 Add(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 Clamp(Vector3 value1, Vector3 min, Vector3 max) { throw null; }
-
-        public void CopyTo(float[] array, int index) { }
-
-        public void CopyTo(float[] array) { }
-
-        public static Vector3 Cross(Vector3 vector1, Vector3 vector2) { throw null; }
-
-        public static float Distance(Vector3 value1, Vector3 value2) { throw null; }
-
-        public static float DistanceSquared(Vector3 value1, Vector3 value2) { throw null; }
-
-        public static Vector3 Divide(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 Divide(Vector3 left, float divisor) { throw null; }
-
-        public static float Dot(Vector3 vector1, Vector3 vector2) { throw null; }
-
-        public bool Equals(Vector3 other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public float Length() { throw null; }
-
-        public float LengthSquared() { throw null; }
-
-        public static Vector3 Lerp(Vector3 value1, Vector3 value2, float amount) { throw null; }
-
-        public static Vector3 Max(Vector3 value1, Vector3 value2) { throw null; }
-
-        public static Vector3 Min(Vector3 value1, Vector3 value2) { throw null; }
-
-        public static Vector3 Multiply(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 Multiply(Vector3 left, float right) { throw null; }
-
-        public static Vector3 Multiply(float left, Vector3 right) { throw null; }
-
-        public static Vector3 Negate(Vector3 value) { throw null; }
-
-        public static Vector3 Normalize(Vector3 value) { throw null; }
-
-        public static Vector3 operator +(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 operator /(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 operator /(Vector3 value1, float value2) { throw null; }
-
-        public static bool operator ==(Vector3 left, Vector3 right) { throw null; }
-
-        public static bool operator !=(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 operator *(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 operator *(Vector3 left, float right) { throw null; }
-
-        public static Vector3 operator *(float left, Vector3 right) { throw null; }
-
-        public static Vector3 operator -(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 operator -(Vector3 value) { throw null; }
-
-        public static Vector3 Reflect(Vector3 vector, Vector3 normal) { throw null; }
-
-        public static Vector3 SquareRoot(Vector3 value) { throw null; }
-
-        public static Vector3 Subtract(Vector3 left, Vector3 right) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public string ToString(string format, IFormatProvider formatProvider) { throw null; }
-
-        public string ToString(string format) { throw null; }
-
-        public static Vector3 Transform(Vector3 position, Matrix4x4 matrix) { throw null; }
-
-        public static Vector3 Transform(Vector3 value, Quaternion rotation) { throw null; }
-
-        public static Vector3 TransformNormal(Vector3 normal, Matrix4x4 matrix) { throw null; }
-    }
-
-    public partial struct Vector4 : IEquatable<Vector4>, IFormattable
-    {
-        public float W;
-        public float X;
-        public float Y;
-        public float Z;
-        public Vector4(Vector2 value, float z, float w) { }
-
-        public Vector4(Vector3 value, float w) { }
-
-        public Vector4(float x, float y, float z, float w) { }
-
-        public Vector4(float value) { }
-
-        public static Vector4 One { get { throw null; } }
-
-        public static Vector4 UnitW { get { throw null; } }
-
-        public static Vector4 UnitX { get { throw null; } }
-
-        public static Vector4 UnitY { get { throw null; } }
-
-        public static Vector4 UnitZ { get { throw null; } }
-
-        public static Vector4 Zero { get { throw null; } }
-
-        public static Vector4 Abs(Vector4 value) { throw null; }
-
-        public static Vector4 Add(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 Clamp(Vector4 value1, Vector4 min, Vector4 max) { throw null; }
-
-        public void CopyTo(float[] array, int index) { }
-
-        public void CopyTo(float[] array) { }
-
-        public static float Distance(Vector4 value1, Vector4 value2) { throw null; }
-
-        public static float DistanceSquared(Vector4 value1, Vector4 value2) { throw null; }
-
-        public static Vector4 Divide(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 Divide(Vector4 left, float divisor) { throw null; }
-
-        public static float Dot(Vector4 vector1, Vector4 vector2) { throw null; }
-
-        public bool Equals(Vector4 other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public float Length() { throw null; }
-
-        public float LengthSquared() { throw null; }
-
-        public static Vector4 Lerp(Vector4 value1, Vector4 value2, float amount) { throw null; }
-
-        public static Vector4 Max(Vector4 value1, Vector4 value2) { throw null; }
-
-        public static Vector4 Min(Vector4 value1, Vector4 value2) { throw null; }
-
-        public static Vector4 Multiply(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 Multiply(Vector4 left, float right) { throw null; }
-
-        public static Vector4 Multiply(float left, Vector4 right) { throw null; }
-
-        public static Vector4 Negate(Vector4 value) { throw null; }
-
-        public static Vector4 Normalize(Vector4 vector) { throw null; }
-
-        public static Vector4 operator +(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 operator /(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 operator /(Vector4 value1, float value2) { throw null; }
-
-        public static bool operator ==(Vector4 left, Vector4 right) { throw null; }
-
-        public static bool operator !=(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 operator *(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 operator *(Vector4 left, float right) { throw null; }
-
-        public static Vector4 operator *(float left, Vector4 right) { throw null; }
-
-        public static Vector4 operator -(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 operator -(Vector4 value) { throw null; }
-
-        public static Vector4 SquareRoot(Vector4 value) { throw null; }
-
-        public static Vector4 Subtract(Vector4 left, Vector4 right) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public string ToString(string format, IFormatProvider formatProvider) { throw null; }
-
-        public string ToString(string format) { throw null; }
-
-        public static Vector4 Transform(Vector2 position, Matrix4x4 matrix) { throw null; }
-
-        public static Vector4 Transform(Vector2 value, Quaternion rotation) { throw null; }
-
-        public static Vector4 Transform(Vector3 position, Matrix4x4 matrix) { throw null; }
-
-        public static Vector4 Transform(Vector3 value, Quaternion rotation) { throw null; }
-
-        public static Vector4 Transform(Vector4 vector, Matrix4x4 matrix) { throw null; }
-
-        public static Vector4 Transform(Vector4 value, Quaternion rotation) { throw null; }
-    }
-
-    public partial struct Vector<T> : IEquatable<Vector<T>>, IFormattable where T : struct
-    {
-        public Vector(T value) { }
-
-        public Vector(T[] values, int index) { }
-
-        public Vector(T[] values) { }
-
-        public static int Count { get { throw null; } }
-
-        public T this[int index] { get { throw null; } }
-
-        public static Vector<T> One { get { throw null; } }
-
-        public static Vector<T> Zero { get { throw null; } }
-
-        public void CopyTo(T[] destination, int startIndex) { }
-
-        public void CopyTo(T[] destination) { }
-
-        public bool Equals(Vector<T> other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static Vector<T> operator +(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static Vector<T> operator &(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static Vector<T> operator |(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static Vector<T> operator /(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static bool operator ==(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static Vector<T> operator ^(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static explicit operator Vector<byte>(Vector<T> value) { throw null; }
-
-        public static explicit operator Vector<double>(Vector<T> value) { throw null; }
-
-        public static explicit operator Vector<short>(Vector<T> value) { throw null; }
-
-        public static explicit operator Vector<int>(Vector<T> value) { throw null; }
-
-        public static explicit operator Vector<long>(Vector<T> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Vector<sbyte>(Vector<T> value) { throw null; }
-
-        public static explicit operator Vector<float>(Vector<T> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Vector<ushort>(Vector<T> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Vector<uint>(Vector<T> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Vector<ulong>(Vector<T> value) { throw null; }
-
-        public static bool operator !=(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static Vector<T> operator *(T factor, Vector<T> value) { throw null; }
-
-        public static Vector<T> operator *(Vector<T> value, T factor) { throw null; }
-
-        public static Vector<T> operator *(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static Vector<T> operator ~(Vector<T> value) { throw null; }
-
-        public static Vector<T> operator -(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static Vector<T> operator -(Vector<T> value) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public string ToString(string format, IFormatProvider formatProvider) { throw null; }
-
-        public string ToString(string format) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.numerics.vectors/4.4.0/system.numerics.vectors.nuspec b/src/referencePackages/src/system.numerics.vectors/4.4.0/system.numerics.vectors.nuspec
index dd4c514a..ae05548a 100644
--- a/src/referencePackages/src/system.numerics.vectors/4.4.0/system.numerics.vectors.nuspec
+++ b/src/referencePackages/src/system.numerics.vectors/4.4.0/system.numerics.vectors.nuspec
@@ -28,9 +28,6 @@ System.Numerics.Vector&lt;T&gt;
     <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
     <serviceable>true</serviceable>
     <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-      </group>
       <group targetFramework=".NETStandard2.0" />
     </dependencies>
   </metadata>
diff --git a/src/referencePackages/src/system.numerics.vectors/4.5.0/System.Numerics.Vectors.4.5.0.csproj b/src/referencePackages/src/system.numerics.vectors/4.5.0/System.Numerics.Vectors.4.5.0.csproj
index 2eaefba2..bc100e00 100644
--- a/src/referencePackages/src/system.numerics.vectors/4.5.0/System.Numerics.Vectors.4.5.0.csproj
+++ b/src/referencePackages/src/system.numerics.vectors/4.5.0/System.Numerics.Vectors.4.5.0.csproj
@@ -1,7 +1,7 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Numerics.Vectors</AssemblyName>
   </PropertyGroup>
 
diff --git a/src/referencePackages/src/system.numerics.vectors/4.5.0/ref/netstandard1.0/System.Numerics.Vectors.cs b/src/referencePackages/src/system.numerics.vectors/4.5.0/ref/netstandard1.0/System.Numerics.Vectors.cs
deleted file mode 100644
index 7cd2014d..00000000
--- a/src/referencePackages/src/system.numerics.vectors/4.5.0/ref/netstandard1.0/System.Numerics.Vectors.cs
+++ /dev/null
@@ -1,996 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Numerics.Vectors")]
-[assembly: System.Reflection.AssemblyDescription("System.Numerics.Vectors")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Numerics.Vectors")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.25519.03")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.25519.03 built by: dlab-DDVSOWINAGE013. Commit Hash: 8321c729934c0f8be754953439b88e6e1c120c24")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyMetadata("PreferInbox", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.3.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Numerics
-{
-    public partial struct Matrix3x2 : IEquatable<Matrix3x2>
-    {
-        public float M11;
-        public float M12;
-        public float M21;
-        public float M22;
-        public float M31;
-        public float M32;
-        public Matrix3x2(float m11, float m12, float m21, float m22, float m31, float m32) { }
-
-        public static Matrix3x2 Identity { get { throw null; } }
-
-        public bool IsIdentity { get { throw null; } }
-
-        public Vector2 Translation { get { throw null; } set { } }
-
-        public static Matrix3x2 Add(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public static Matrix3x2 CreateRotation(float radians, Vector2 centerPoint) { throw null; }
-
-        public static Matrix3x2 CreateRotation(float radians) { throw null; }
-
-        public static Matrix3x2 CreateScale(Vector2 scales, Vector2 centerPoint) { throw null; }
-
-        public static Matrix3x2 CreateScale(Vector2 scales) { throw null; }
-
-        public static Matrix3x2 CreateScale(float scale, Vector2 centerPoint) { throw null; }
-
-        public static Matrix3x2 CreateScale(float xScale, float yScale, Vector2 centerPoint) { throw null; }
-
-        public static Matrix3x2 CreateScale(float xScale, float yScale) { throw null; }
-
-        public static Matrix3x2 CreateScale(float scale) { throw null; }
-
-        public static Matrix3x2 CreateSkew(float radiansX, float radiansY, Vector2 centerPoint) { throw null; }
-
-        public static Matrix3x2 CreateSkew(float radiansX, float radiansY) { throw null; }
-
-        public static Matrix3x2 CreateTranslation(Vector2 position) { throw null; }
-
-        public static Matrix3x2 CreateTranslation(float xPosition, float yPosition) { throw null; }
-
-        public bool Equals(Matrix3x2 other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public float GetDeterminant() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool Invert(Matrix3x2 matrix, out Matrix3x2 result) { throw null; }
-
-        public static Matrix3x2 Lerp(Matrix3x2 matrix1, Matrix3x2 matrix2, float amount) { throw null; }
-
-        public static Matrix3x2 Multiply(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public static Matrix3x2 Multiply(Matrix3x2 value1, float value2) { throw null; }
-
-        public static Matrix3x2 Negate(Matrix3x2 value) { throw null; }
-
-        public static Matrix3x2 operator +(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public static bool operator ==(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public static bool operator !=(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public static Matrix3x2 operator *(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public static Matrix3x2 operator *(Matrix3x2 value1, float value2) { throw null; }
-
-        public static Matrix3x2 operator -(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public static Matrix3x2 operator -(Matrix3x2 value) { throw null; }
-
-        public static Matrix3x2 Subtract(Matrix3x2 value1, Matrix3x2 value2) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial struct Matrix4x4 : IEquatable<Matrix4x4>
-    {
-        public float M11;
-        public float M12;
-        public float M13;
-        public float M14;
-        public float M21;
-        public float M22;
-        public float M23;
-        public float M24;
-        public float M31;
-        public float M32;
-        public float M33;
-        public float M34;
-        public float M41;
-        public float M42;
-        public float M43;
-        public float M44;
-        public Matrix4x4(Matrix3x2 value) { }
-
-        public Matrix4x4(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44) { }
-
-        public static Matrix4x4 Identity { get { throw null; } }
-
-        public bool IsIdentity { get { throw null; } }
-
-        public Vector3 Translation { get { throw null; } set { } }
-
-        public static Matrix4x4 Add(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public static Matrix4x4 CreateBillboard(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector) { throw null; }
-
-        public static Matrix4x4 CreateConstrainedBillboard(Vector3 objectPosition, Vector3 cameraPosition, Vector3 rotateAxis, Vector3 cameraForwardVector, Vector3 objectForwardVector) { throw null; }
-
-        public static Matrix4x4 CreateFromAxisAngle(Vector3 axis, float angle) { throw null; }
-
-        public static Matrix4x4 CreateFromQuaternion(Quaternion quaternion) { throw null; }
-
-        public static Matrix4x4 CreateFromYawPitchRoll(float yaw, float pitch, float roll) { throw null; }
-
-        public static Matrix4x4 CreateLookAt(Vector3 cameraPosition, Vector3 cameraTarget, Vector3 cameraUpVector) { throw null; }
-
-        public static Matrix4x4 CreateOrthographic(float width, float height, float zNearPlane, float zFarPlane) { throw null; }
-
-        public static Matrix4x4 CreateOrthographicOffCenter(float left, float right, float bottom, float top, float zNearPlane, float zFarPlane) { throw null; }
-
-        public static Matrix4x4 CreatePerspective(float width, float height, float nearPlaneDistance, float farPlaneDistance) { throw null; }
-
-        public static Matrix4x4 CreatePerspectiveFieldOfView(float fieldOfView, float aspectRatio, float nearPlaneDistance, float farPlaneDistance) { throw null; }
-
-        public static Matrix4x4 CreatePerspectiveOffCenter(float left, float right, float bottom, float top, float nearPlaneDistance, float farPlaneDistance) { throw null; }
-
-        public static Matrix4x4 CreateReflection(Plane value) { throw null; }
-
-        public static Matrix4x4 CreateRotationX(float radians, Vector3 centerPoint) { throw null; }
-
-        public static Matrix4x4 CreateRotationX(float radians) { throw null; }
-
-        public static Matrix4x4 CreateRotationY(float radians, Vector3 centerPoint) { throw null; }
-
-        public static Matrix4x4 CreateRotationY(float radians) { throw null; }
-
-        public static Matrix4x4 CreateRotationZ(float radians, Vector3 centerPoint) { throw null; }
-
-        public static Matrix4x4 CreateRotationZ(float radians) { throw null; }
-
-        public static Matrix4x4 CreateScale(Vector3 scales, Vector3 centerPoint) { throw null; }
-
-        public static Matrix4x4 CreateScale(Vector3 scales) { throw null; }
-
-        public static Matrix4x4 CreateScale(float scale, Vector3 centerPoint) { throw null; }
-
-        public static Matrix4x4 CreateScale(float xScale, float yScale, float zScale, Vector3 centerPoint) { throw null; }
-
-        public static Matrix4x4 CreateScale(float xScale, float yScale, float zScale) { throw null; }
-
-        public static Matrix4x4 CreateScale(float scale) { throw null; }
-
-        public static Matrix4x4 CreateShadow(Vector3 lightDirection, Plane plane) { throw null; }
-
-        public static Matrix4x4 CreateTranslation(Vector3 position) { throw null; }
-
-        public static Matrix4x4 CreateTranslation(float xPosition, float yPosition, float zPosition) { throw null; }
-
-        public static Matrix4x4 CreateWorld(Vector3 position, Vector3 forward, Vector3 up) { throw null; }
-
-        public static bool Decompose(Matrix4x4 matrix, out Vector3 scale, out Quaternion rotation, out Vector3 translation) { throw null; }
-
-        public bool Equals(Matrix4x4 other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public float GetDeterminant() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool Invert(Matrix4x4 matrix, out Matrix4x4 result) { throw null; }
-
-        public static Matrix4x4 Lerp(Matrix4x4 matrix1, Matrix4x4 matrix2, float amount) { throw null; }
-
-        public static Matrix4x4 Multiply(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public static Matrix4x4 Multiply(Matrix4x4 value1, float value2) { throw null; }
-
-        public static Matrix4x4 Negate(Matrix4x4 value) { throw null; }
-
-        public static Matrix4x4 operator +(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public static bool operator ==(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public static bool operator !=(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public static Matrix4x4 operator *(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public static Matrix4x4 operator *(Matrix4x4 value1, float value2) { throw null; }
-
-        public static Matrix4x4 operator -(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public static Matrix4x4 operator -(Matrix4x4 value) { throw null; }
-
-        public static Matrix4x4 Subtract(Matrix4x4 value1, Matrix4x4 value2) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static Matrix4x4 Transform(Matrix4x4 value, Quaternion rotation) { throw null; }
-
-        public static Matrix4x4 Transpose(Matrix4x4 matrix) { throw null; }
-    }
-
-    public partial struct Plane : IEquatable<Plane>
-    {
-        public float D;
-        public Vector3 Normal;
-        public Plane(Vector3 normal, float d) { }
-
-        public Plane(Vector4 value) { }
-
-        public Plane(float x, float y, float z, float d) { }
-
-        public static Plane CreateFromVertices(Vector3 point1, Vector3 point2, Vector3 point3) { throw null; }
-
-        public static float Dot(Plane plane, Vector4 value) { throw null; }
-
-        public static float DotCoordinate(Plane plane, Vector3 value) { throw null; }
-
-        public static float DotNormal(Plane plane, Vector3 value) { throw null; }
-
-        public bool Equals(Plane other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static Plane Normalize(Plane value) { throw null; }
-
-        public static bool operator ==(Plane value1, Plane value2) { throw null; }
-
-        public static bool operator !=(Plane value1, Plane value2) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static Plane Transform(Plane plane, Matrix4x4 matrix) { throw null; }
-
-        public static Plane Transform(Plane plane, Quaternion rotation) { throw null; }
-    }
-
-    public partial struct Quaternion : IEquatable<Quaternion>
-    {
-        public float W;
-        public float X;
-        public float Y;
-        public float Z;
-        public Quaternion(Vector3 vectorPart, float scalarPart) { }
-
-        public Quaternion(float x, float y, float z, float w) { }
-
-        public static Quaternion Identity { get { throw null; } }
-
-        public bool IsIdentity { get { throw null; } }
-
-        public static Quaternion Add(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static Quaternion Concatenate(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static Quaternion Conjugate(Quaternion value) { throw null; }
-
-        public static Quaternion CreateFromAxisAngle(Vector3 axis, float angle) { throw null; }
-
-        public static Quaternion CreateFromRotationMatrix(Matrix4x4 matrix) { throw null; }
-
-        public static Quaternion CreateFromYawPitchRoll(float yaw, float pitch, float roll) { throw null; }
-
-        public static Quaternion Divide(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static float Dot(Quaternion quaternion1, Quaternion quaternion2) { throw null; }
-
-        public bool Equals(Quaternion other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static Quaternion Inverse(Quaternion value) { throw null; }
-
-        public float Length() { throw null; }
-
-        public float LengthSquared() { throw null; }
-
-        public static Quaternion Lerp(Quaternion quaternion1, Quaternion quaternion2, float amount) { throw null; }
-
-        public static Quaternion Multiply(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static Quaternion Multiply(Quaternion value1, float value2) { throw null; }
-
-        public static Quaternion Negate(Quaternion value) { throw null; }
-
-        public static Quaternion Normalize(Quaternion value) { throw null; }
-
-        public static Quaternion operator +(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static Quaternion operator /(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static bool operator ==(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static bool operator !=(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static Quaternion operator *(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static Quaternion operator *(Quaternion value1, float value2) { throw null; }
-
-        public static Quaternion operator -(Quaternion value1, Quaternion value2) { throw null; }
-
-        public static Quaternion operator -(Quaternion value) { throw null; }
-
-        public static Quaternion Slerp(Quaternion quaternion1, Quaternion quaternion2, float amount) { throw null; }
-
-        public static Quaternion Subtract(Quaternion value1, Quaternion value2) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public static partial class Vector
-    {
-        public static bool IsHardwareAccelerated { get { throw null; } }
-
-        public static Vector<T> Abs<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<T> Add<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<T> AndNot<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<byte> AsVectorByte<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<double> AsVectorDouble<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<short> AsVectorInt16<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<int> AsVectorInt32<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<long> AsVectorInt64<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<sbyte> AsVectorSByte<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<float> AsVectorSingle<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<ushort> AsVectorUInt16<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<uint> AsVectorUInt32<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<ulong> AsVectorUInt64<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<T> BitwiseAnd<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<T> BitwiseOr<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<float> ConditionalSelect(Vector<int> condition, Vector<float> left, Vector<float> right) { throw null; }
-
-        public static Vector<double> ConditionalSelect(Vector<long> condition, Vector<double> left, Vector<double> right) { throw null; }
-
-        public static Vector<T> ConditionalSelect<T>(Vector<T> condition, Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<double> ConvertToDouble(Vector<long> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<double> ConvertToDouble(Vector<ulong> value) { throw null; }
-
-        public static Vector<int> ConvertToInt32(Vector<float> value) { throw null; }
-
-        public static Vector<long> ConvertToInt64(Vector<double> value) { throw null; }
-
-        public static Vector<float> ConvertToSingle(Vector<int> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<float> ConvertToSingle(Vector<uint> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<uint> ConvertToUInt32(Vector<float> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<ulong> ConvertToUInt64(Vector<double> value) { throw null; }
-
-        public static Vector<T> Divide<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static T Dot<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<long> Equals(Vector<double> left, Vector<double> right) { throw null; }
-
-        public static Vector<int> Equals(Vector<int> left, Vector<int> right) { throw null; }
-
-        public static Vector<long> Equals(Vector<long> left, Vector<long> right) { throw null; }
-
-        public static Vector<int> Equals(Vector<float> left, Vector<float> right) { throw null; }
-
-        public static Vector<T> Equals<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool EqualsAll<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool EqualsAny<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<long> GreaterThan(Vector<double> left, Vector<double> right) { throw null; }
-
-        public static Vector<int> GreaterThan(Vector<int> left, Vector<int> right) { throw null; }
-
-        public static Vector<long> GreaterThan(Vector<long> left, Vector<long> right) { throw null; }
-
-        public static Vector<int> GreaterThan(Vector<float> left, Vector<float> right) { throw null; }
-
-        public static Vector<T> GreaterThan<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool GreaterThanAll<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool GreaterThanAny<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<long> GreaterThanOrEqual(Vector<double> left, Vector<double> right) { throw null; }
-
-        public static Vector<int> GreaterThanOrEqual(Vector<int> left, Vector<int> right) { throw null; }
-
-        public static Vector<long> GreaterThanOrEqual(Vector<long> left, Vector<long> right) { throw null; }
-
-        public static Vector<int> GreaterThanOrEqual(Vector<float> left, Vector<float> right) { throw null; }
-
-        public static Vector<T> GreaterThanOrEqual<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool GreaterThanOrEqualAll<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool GreaterThanOrEqualAny<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<long> LessThan(Vector<double> left, Vector<double> right) { throw null; }
-
-        public static Vector<int> LessThan(Vector<int> left, Vector<int> right) { throw null; }
-
-        public static Vector<long> LessThan(Vector<long> left, Vector<long> right) { throw null; }
-
-        public static Vector<int> LessThan(Vector<float> left, Vector<float> right) { throw null; }
-
-        public static Vector<T> LessThan<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool LessThanAll<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool LessThanAny<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<long> LessThanOrEqual(Vector<double> left, Vector<double> right) { throw null; }
-
-        public static Vector<int> LessThanOrEqual(Vector<int> left, Vector<int> right) { throw null; }
-
-        public static Vector<long> LessThanOrEqual(Vector<long> left, Vector<long> right) { throw null; }
-
-        public static Vector<int> LessThanOrEqual(Vector<float> left, Vector<float> right) { throw null; }
-
-        public static Vector<T> LessThanOrEqual<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool LessThanOrEqualAll<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static bool LessThanOrEqualAny<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<T> Max<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<T> Min<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<T> Multiply<T>(T left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<T> Multiply<T>(Vector<T> left, T right)
-            where T : struct { throw null; }
-
-        public static Vector<T> Multiply<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        public static Vector<float> Narrow(Vector<double> source1, Vector<double> source2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<sbyte> Narrow(Vector<short> source1, Vector<short> source2) { throw null; }
-
-        public static Vector<short> Narrow(Vector<int> source1, Vector<int> source2) { throw null; }
-
-        public static Vector<int> Narrow(Vector<long> source1, Vector<long> source2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<byte> Narrow(Vector<ushort> source1, Vector<ushort> source2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<ushort> Narrow(Vector<uint> source1, Vector<uint> source2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Vector<uint> Narrow(Vector<ulong> source1, Vector<ulong> source2) { throw null; }
-
-        public static Vector<T> Negate<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<T> OnesComplement<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<T> SquareRoot<T>(Vector<T> value)
-            where T : struct { throw null; }
-
-        public static Vector<T> Subtract<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-
-        [CLSCompliant(false)]
-        public static void Widen(Vector<byte> source, out Vector<ushort> dest1, out Vector<ushort> dest2) { throw null; }
-
-        public static void Widen(Vector<short> source, out Vector<int> dest1, out Vector<int> dest2) { throw null; }
-
-        public static void Widen(Vector<int> source, out Vector<long> dest1, out Vector<long> dest2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static void Widen(Vector<sbyte> source, out Vector<short> dest1, out Vector<short> dest2) { throw null; }
-
-        public static void Widen(Vector<float> source, out Vector<double> dest1, out Vector<double> dest2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static void Widen(Vector<ushort> source, out Vector<uint> dest1, out Vector<uint> dest2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static void Widen(Vector<uint> source, out Vector<ulong> dest1, out Vector<ulong> dest2) { throw null; }
-
-        public static Vector<T> Xor<T>(Vector<T> left, Vector<T> right)
-            where T : struct { throw null; }
-    }
-
-    public partial struct Vector2 : IEquatable<Vector2>, IFormattable
-    {
-        public float X;
-        public float Y;
-        public Vector2(float x, float y) { }
-
-        public Vector2(float value) { }
-
-        public static Vector2 One { get { throw null; } }
-
-        public static Vector2 UnitX { get { throw null; } }
-
-        public static Vector2 UnitY { get { throw null; } }
-
-        public static Vector2 Zero { get { throw null; } }
-
-        public static Vector2 Abs(Vector2 value) { throw null; }
-
-        public static Vector2 Add(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 Clamp(Vector2 value1, Vector2 min, Vector2 max) { throw null; }
-
-        public void CopyTo(float[] array, int index) { }
-
-        public void CopyTo(float[] array) { }
-
-        public static float Distance(Vector2 value1, Vector2 value2) { throw null; }
-
-        public static float DistanceSquared(Vector2 value1, Vector2 value2) { throw null; }
-
-        public static Vector2 Divide(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 Divide(Vector2 left, float divisor) { throw null; }
-
-        public static float Dot(Vector2 value1, Vector2 value2) { throw null; }
-
-        public bool Equals(Vector2 other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public float Length() { throw null; }
-
-        public float LengthSquared() { throw null; }
-
-        public static Vector2 Lerp(Vector2 value1, Vector2 value2, float amount) { throw null; }
-
-        public static Vector2 Max(Vector2 value1, Vector2 value2) { throw null; }
-
-        public static Vector2 Min(Vector2 value1, Vector2 value2) { throw null; }
-
-        public static Vector2 Multiply(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 Multiply(Vector2 left, float right) { throw null; }
-
-        public static Vector2 Multiply(float left, Vector2 right) { throw null; }
-
-        public static Vector2 Negate(Vector2 value) { throw null; }
-
-        public static Vector2 Normalize(Vector2 value) { throw null; }
-
-        public static Vector2 operator +(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 operator /(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 operator /(Vector2 value1, float value2) { throw null; }
-
-        public static bool operator ==(Vector2 left, Vector2 right) { throw null; }
-
-        public static bool operator !=(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 operator *(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 operator *(Vector2 left, float right) { throw null; }
-
-        public static Vector2 operator *(float left, Vector2 right) { throw null; }
-
-        public static Vector2 operator -(Vector2 left, Vector2 right) { throw null; }
-
-        public static Vector2 operator -(Vector2 value) { throw null; }
-
-        public static Vector2 Reflect(Vector2 vector, Vector2 normal) { throw null; }
-
-        public static Vector2 SquareRoot(Vector2 value) { throw null; }
-
-        public static Vector2 Subtract(Vector2 left, Vector2 right) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public string ToString(string format, IFormatProvider formatProvider) { throw null; }
-
-        public string ToString(string format) { throw null; }
-
-        public static Vector2 Transform(Vector2 position, Matrix3x2 matrix) { throw null; }
-
-        public static Vector2 Transform(Vector2 position, Matrix4x4 matrix) { throw null; }
-
-        public static Vector2 Transform(Vector2 value, Quaternion rotation) { throw null; }
-
-        public static Vector2 TransformNormal(Vector2 normal, Matrix3x2 matrix) { throw null; }
-
-        public static Vector2 TransformNormal(Vector2 normal, Matrix4x4 matrix) { throw null; }
-    }
-
-    public partial struct Vector3 : IEquatable<Vector3>, IFormattable
-    {
-        public float X;
-        public float Y;
-        public float Z;
-        public Vector3(Vector2 value, float z) { }
-
-        public Vector3(float x, float y, float z) { }
-
-        public Vector3(float value) { }
-
-        public static Vector3 One { get { throw null; } }
-
-        public static Vector3 UnitX { get { throw null; } }
-
-        public static Vector3 UnitY { get { throw null; } }
-
-        public static Vector3 UnitZ { get { throw null; } }
-
-        public static Vector3 Zero { get { throw null; } }
-
-        public static Vector3 Abs(Vector3 value) { throw null; }
-
-        public static Vector3 Add(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 Clamp(Vector3 value1, Vector3 min, Vector3 max) { throw null; }
-
-        public void CopyTo(float[] array, int index) { }
-
-        public void CopyTo(float[] array) { }
-
-        public static Vector3 Cross(Vector3 vector1, Vector3 vector2) { throw null; }
-
-        public static float Distance(Vector3 value1, Vector3 value2) { throw null; }
-
-        public static float DistanceSquared(Vector3 value1, Vector3 value2) { throw null; }
-
-        public static Vector3 Divide(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 Divide(Vector3 left, float divisor) { throw null; }
-
-        public static float Dot(Vector3 vector1, Vector3 vector2) { throw null; }
-
-        public bool Equals(Vector3 other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public float Length() { throw null; }
-
-        public float LengthSquared() { throw null; }
-
-        public static Vector3 Lerp(Vector3 value1, Vector3 value2, float amount) { throw null; }
-
-        public static Vector3 Max(Vector3 value1, Vector3 value2) { throw null; }
-
-        public static Vector3 Min(Vector3 value1, Vector3 value2) { throw null; }
-
-        public static Vector3 Multiply(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 Multiply(Vector3 left, float right) { throw null; }
-
-        public static Vector3 Multiply(float left, Vector3 right) { throw null; }
-
-        public static Vector3 Negate(Vector3 value) { throw null; }
-
-        public static Vector3 Normalize(Vector3 value) { throw null; }
-
-        public static Vector3 operator +(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 operator /(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 operator /(Vector3 value1, float value2) { throw null; }
-
-        public static bool operator ==(Vector3 left, Vector3 right) { throw null; }
-
-        public static bool operator !=(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 operator *(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 operator *(Vector3 left, float right) { throw null; }
-
-        public static Vector3 operator *(float left, Vector3 right) { throw null; }
-
-        public static Vector3 operator -(Vector3 left, Vector3 right) { throw null; }
-
-        public static Vector3 operator -(Vector3 value) { throw null; }
-
-        public static Vector3 Reflect(Vector3 vector, Vector3 normal) { throw null; }
-
-        public static Vector3 SquareRoot(Vector3 value) { throw null; }
-
-        public static Vector3 Subtract(Vector3 left, Vector3 right) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public string ToString(string format, IFormatProvider formatProvider) { throw null; }
-
-        public string ToString(string format) { throw null; }
-
-        public static Vector3 Transform(Vector3 position, Matrix4x4 matrix) { throw null; }
-
-        public static Vector3 Transform(Vector3 value, Quaternion rotation) { throw null; }
-
-        public static Vector3 TransformNormal(Vector3 normal, Matrix4x4 matrix) { throw null; }
-    }
-
-    public partial struct Vector4 : IEquatable<Vector4>, IFormattable
-    {
-        public float W;
-        public float X;
-        public float Y;
-        public float Z;
-        public Vector4(Vector2 value, float z, float w) { }
-
-        public Vector4(Vector3 value, float w) { }
-
-        public Vector4(float x, float y, float z, float w) { }
-
-        public Vector4(float value) { }
-
-        public static Vector4 One { get { throw null; } }
-
-        public static Vector4 UnitW { get { throw null; } }
-
-        public static Vector4 UnitX { get { throw null; } }
-
-        public static Vector4 UnitY { get { throw null; } }
-
-        public static Vector4 UnitZ { get { throw null; } }
-
-        public static Vector4 Zero { get { throw null; } }
-
-        public static Vector4 Abs(Vector4 value) { throw null; }
-
-        public static Vector4 Add(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 Clamp(Vector4 value1, Vector4 min, Vector4 max) { throw null; }
-
-        public void CopyTo(float[] array, int index) { }
-
-        public void CopyTo(float[] array) { }
-
-        public static float Distance(Vector4 value1, Vector4 value2) { throw null; }
-
-        public static float DistanceSquared(Vector4 value1, Vector4 value2) { throw null; }
-
-        public static Vector4 Divide(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 Divide(Vector4 left, float divisor) { throw null; }
-
-        public static float Dot(Vector4 vector1, Vector4 vector2) { throw null; }
-
-        public bool Equals(Vector4 other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public float Length() { throw null; }
-
-        public float LengthSquared() { throw null; }
-
-        public static Vector4 Lerp(Vector4 value1, Vector4 value2, float amount) { throw null; }
-
-        public static Vector4 Max(Vector4 value1, Vector4 value2) { throw null; }
-
-        public static Vector4 Min(Vector4 value1, Vector4 value2) { throw null; }
-
-        public static Vector4 Multiply(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 Multiply(Vector4 left, float right) { throw null; }
-
-        public static Vector4 Multiply(float left, Vector4 right) { throw null; }
-
-        public static Vector4 Negate(Vector4 value) { throw null; }
-
-        public static Vector4 Normalize(Vector4 vector) { throw null; }
-
-        public static Vector4 operator +(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 operator /(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 operator /(Vector4 value1, float value2) { throw null; }
-
-        public static bool operator ==(Vector4 left, Vector4 right) { throw null; }
-
-        public static bool operator !=(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 operator *(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 operator *(Vector4 left, float right) { throw null; }
-
-        public static Vector4 operator *(float left, Vector4 right) { throw null; }
-
-        public static Vector4 operator -(Vector4 left, Vector4 right) { throw null; }
-
-        public static Vector4 operator -(Vector4 value) { throw null; }
-
-        public static Vector4 SquareRoot(Vector4 value) { throw null; }
-
-        public static Vector4 Subtract(Vector4 left, Vector4 right) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public string ToString(string format, IFormatProvider formatProvider) { throw null; }
-
-        public string ToString(string format) { throw null; }
-
-        public static Vector4 Transform(Vector2 position, Matrix4x4 matrix) { throw null; }
-
-        public static Vector4 Transform(Vector2 value, Quaternion rotation) { throw null; }
-
-        public static Vector4 Transform(Vector3 position, Matrix4x4 matrix) { throw null; }
-
-        public static Vector4 Transform(Vector3 value, Quaternion rotation) { throw null; }
-
-        public static Vector4 Transform(Vector4 vector, Matrix4x4 matrix) { throw null; }
-
-        public static Vector4 Transform(Vector4 value, Quaternion rotation) { throw null; }
-    }
-
-    public partial struct Vector<T> : IEquatable<Vector<T>>, IFormattable where T : struct
-    {
-        public Vector(T value) { }
-
-        public Vector(T[] values, int index) { }
-
-        public Vector(T[] values) { }
-
-        public static int Count { get { throw null; } }
-
-        public T this[int index] { get { throw null; } }
-
-        public static Vector<T> One { get { throw null; } }
-
-        public static Vector<T> Zero { get { throw null; } }
-
-        public void CopyTo(T[] destination, int startIndex) { }
-
-        public void CopyTo(T[] destination) { }
-
-        public bool Equals(Vector<T> other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static Vector<T> operator +(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static Vector<T> operator &(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static Vector<T> operator |(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static Vector<T> operator /(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static bool operator ==(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static Vector<T> operator ^(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static explicit operator Vector<byte>(Vector<T> value) { throw null; }
-
-        public static explicit operator Vector<double>(Vector<T> value) { throw null; }
-
-        public static explicit operator Vector<short>(Vector<T> value) { throw null; }
-
-        public static explicit operator Vector<int>(Vector<T> value) { throw null; }
-
-        public static explicit operator Vector<long>(Vector<T> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Vector<sbyte>(Vector<T> value) { throw null; }
-
-        public static explicit operator Vector<float>(Vector<T> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Vector<ushort>(Vector<T> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Vector<uint>(Vector<T> value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Vector<ulong>(Vector<T> value) { throw null; }
-
-        public static bool operator !=(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static Vector<T> operator *(T factor, Vector<T> value) { throw null; }
-
-        public static Vector<T> operator *(Vector<T> value, T factor) { throw null; }
-
-        public static Vector<T> operator *(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static Vector<T> operator ~(Vector<T> value) { throw null; }
-
-        public static Vector<T> operator -(Vector<T> left, Vector<T> right) { throw null; }
-
-        public static Vector<T> operator -(Vector<T> value) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public string ToString(string format, IFormatProvider formatProvider) { throw null; }
-
-        public string ToString(string format) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.numerics.vectors/4.5.0/system.numerics.vectors.nuspec b/src/referencePackages/src/system.numerics.vectors/4.5.0/system.numerics.vectors.nuspec
index df6e758e..ec061435 100644
--- a/src/referencePackages/src/system.numerics.vectors/4.5.0/system.numerics.vectors.nuspec
+++ b/src/referencePackages/src/system.numerics.vectors/4.5.0/system.numerics.vectors.nuspec
@@ -28,9 +28,6 @@ System.Numerics.Vector&lt;T&gt;
     <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
     <serviceable>true</serviceable>
     <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-      </group>
       <group targetFramework=".NETStandard2.0" />
     </dependencies>
   </metadata>
diff --git a/src/referencePackages/src/system.objectmodel/4.3.0/Customizations.cs b/src/referencePackages/src/system.objectmodel/4.3.0/Customizations.cs
deleted file mode 100644
index 22a28cc4..00000000
--- a/src/referencePackages/src/system.objectmodel/4.3.0/Customizations.cs
+++ /dev/null
@@ -1,21 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-
-namespace System.Collections.ObjectModel
-{
-    public partial class ObservableCollection<T> : Collection<T>, Specialized.INotifyCollectionChanged, ComponentModel.INotifyPropertyChanged
-    {
-        event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
-    }
-
-        public partial class ReadOnlyObservableCollection<T> : ReadOnlyCollection<T>, Specialized.INotifyCollectionChanged, ComponentModel.INotifyPropertyChanged
-    {
-        event System.Collections.Specialized.NotifyCollectionChangedEventHandler System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged { add { } remove { } }
-
-        event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.objectmodel/4.3.0/System.ObjectModel.4.3.0.csproj b/src/referencePackages/src/system.objectmodel/4.3.0/System.ObjectModel.4.3.0.csproj
deleted file mode 100644
index 36bc69f7..00000000
--- a/src/referencePackages/src/system.objectmodel/4.3.0/System.ObjectModel.4.3.0.csproj
+++ /dev/null
@@ -1,20 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.ObjectModel</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Threading" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.objectmodel/4.3.0/ref/netstandard1.0/System.ObjectModel.cs b/src/referencePackages/src/system.objectmodel/4.3.0/ref/netstandard1.0/System.ObjectModel.cs
deleted file mode 100644
index 761bacd0..00000000
--- a/src/referencePackages/src/system.objectmodel/4.3.0/ref/netstandard1.0/System.ObjectModel.cs
+++ /dev/null
@@ -1,326 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyTitle("System.ObjectModel.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.ObjectModel.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.ObjectModel.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Collections.ObjectModel
-{
-    public abstract partial class KeyedCollection<TKey, TItem> : Collection<TItem>
-    {
-        protected KeyedCollection() { }
-
-        protected KeyedCollection(Generic.IEqualityComparer<TKey> comparer, int dictionaryCreationThreshold) { }
-
-        protected KeyedCollection(Generic.IEqualityComparer<TKey> comparer) { }
-
-        public Generic.IEqualityComparer<TKey> Comparer { get { throw null; } }
-
-        protected Generic.IDictionary<TKey, TItem> Dictionary { get { throw null; } }
-
-        public TItem this[TKey key] { get { throw null; } }
-
-        protected void ChangeItemKey(TItem item, TKey newKey) { }
-
-        protected override void ClearItems() { }
-
-        public bool Contains(TKey key) { throw null; }
-
-        protected abstract TKey GetKeyForItem(TItem item);
-        protected override void InsertItem(int index, TItem item) { }
-
-        public bool Remove(TKey key) { throw null; }
-
-        protected override void RemoveItem(int index) { }
-
-        protected override void SetItem(int index, TItem item) { }
-    }
-
-    public partial class ObservableCollection<T> : Collection<T>, Specialized.INotifyCollectionChanged, ComponentModel.INotifyPropertyChanged
-    {
-        public ObservableCollection() { }
-
-        public ObservableCollection(Generic.IEnumerable<T> collection) { }
-
-        public virtual event Specialized.NotifyCollectionChangedEventHandler CollectionChanged { add { } remove { } }
-
-        protected virtual event ComponentModel.PropertyChangedEventHandler PropertyChanged { add { } remove { } }
-
-        protected IDisposable BlockReentrancy() { throw null; }
-
-        protected void CheckReentrancy() { }
-
-        protected override void ClearItems() { }
-
-        protected override void InsertItem(int index, T item) { }
-
-        public void Move(int oldIndex, int newIndex) { }
-
-        protected virtual void MoveItem(int oldIndex, int newIndex) { }
-
-        protected virtual void OnCollectionChanged(Specialized.NotifyCollectionChangedEventArgs e) { }
-
-        protected virtual void OnPropertyChanged(ComponentModel.PropertyChangedEventArgs e) { }
-
-        protected override void RemoveItem(int index) { }
-
-        protected override void SetItem(int index, T item) { }
-    }
-
-    public partial class ReadOnlyDictionary<TKey, TValue> : Generic.IDictionary<TKey, TValue>, Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IReadOnlyDictionary<TKey, TValue>, Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable
-    {
-        public ReadOnlyDictionary(Generic.IDictionary<TKey, TValue> dictionary) { }
-
-        public int Count { get { throw null; } }
-
-        protected Generic.IDictionary<TKey, TValue> Dictionary { get { throw null; } }
-
-        public TValue this[TKey key] { get { throw null; } }
-
-        public KeyCollection Keys { get { throw null; } }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-        TValue Generic.IDictionary<TKey, TValue>.this[TKey key] { get { throw null; } set { } }
-
-        Generic.ICollection<TKey> Generic.IDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        Generic.ICollection<TValue> Generic.IDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        Generic.IEnumerable<TKey> Generic.IReadOnlyDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        Generic.IEnumerable<TValue> Generic.IReadOnlyDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IDictionary.IsFixedSize { get { throw null; } }
-
-        bool IDictionary.IsReadOnly { get { throw null; } }
-
-        object IDictionary.this[object key] { get { throw null; } set { } }
-
-        ICollection IDictionary.Keys { get { throw null; } }
-
-        ICollection IDictionary.Values { get { throw null; } }
-
-        public ValueCollection Values { get { throw null; } }
-
-        public bool ContainsKey(TKey key) { throw null; }
-
-        public Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>> GetEnumerator() { throw null; }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Add(Generic.KeyValuePair<TKey, TValue> item) { }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Clear() { }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Contains(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.CopyTo(Generic.KeyValuePair<TKey, TValue>[] array, int arrayIndex) { }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Remove(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-        void Generic.IDictionary<TKey, TValue>.Add(TKey key, TValue value) { }
-
-        bool Generic.IDictionary<TKey, TValue>.Remove(TKey key) { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        void IDictionary.Add(object key, object value) { }
-
-        void IDictionary.Clear() { }
-
-        bool IDictionary.Contains(object key) { throw null; }
-
-        IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-        void IDictionary.Remove(object key) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public bool TryGetValue(TKey key, out TValue value) { throw null; }
-
-        public sealed partial class KeyCollection : Generic.ICollection<TKey>, Generic.IEnumerable<TKey>, ICollection, IEnumerable
-        {
-            internal KeyCollection() { }
-
-            public int Count { get { throw null; } }
-
-            bool Generic.ICollection<TKey>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            public void CopyTo(TKey[] array, int arrayIndex) { }
-
-            public Generic.IEnumerator<TKey> GetEnumerator() { throw null; }
-
-            void Generic.ICollection<TKey>.Add(TKey item) { }
-
-            void Generic.ICollection<TKey>.Clear() { }
-
-            bool Generic.ICollection<TKey>.Contains(TKey item) { throw null; }
-
-            bool Generic.ICollection<TKey>.Remove(TKey item) { throw null; }
-
-            void ICollection.CopyTo(Array array, int index) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-        }
-
-        public sealed partial class ValueCollection : Generic.ICollection<TValue>, Generic.IEnumerable<TValue>, ICollection, IEnumerable
-        {
-            internal ValueCollection() { }
-
-            public int Count { get { throw null; } }
-
-            bool Generic.ICollection<TValue>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            public void CopyTo(TValue[] array, int arrayIndex) { }
-
-            public Generic.IEnumerator<TValue> GetEnumerator() { throw null; }
-
-            void Generic.ICollection<TValue>.Add(TValue item) { }
-
-            void Generic.ICollection<TValue>.Clear() { }
-
-            bool Generic.ICollection<TValue>.Contains(TValue item) { throw null; }
-
-            bool Generic.ICollection<TValue>.Remove(TValue item) { throw null; }
-
-            void ICollection.CopyTo(Array array, int index) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-        }
-    }
-
-    public partial class ReadOnlyObservableCollection<T> : ReadOnlyCollection<T>, Specialized.INotifyCollectionChanged, ComponentModel.INotifyPropertyChanged
-    {
-        public ReadOnlyObservableCollection(ObservableCollection<T> list) : base(default!) { }
-
-        protected virtual event Specialized.NotifyCollectionChangedEventHandler CollectionChanged { add { } remove { } }
-
-        protected virtual event ComponentModel.PropertyChangedEventHandler PropertyChanged { add { } remove { } }
-
-        protected virtual void OnCollectionChanged(Specialized.NotifyCollectionChangedEventArgs args) { }
-
-        protected virtual void OnPropertyChanged(ComponentModel.PropertyChangedEventArgs args) { }
-    }
-}
-
-namespace System.Collections.Specialized
-{
-    public partial interface INotifyCollectionChanged
-    {
-        event NotifyCollectionChangedEventHandler CollectionChanged;
-    }
-
-    public enum NotifyCollectionChangedAction
-    {
-        Add = 0,
-        Remove = 1,
-        Replace = 2,
-        Move = 3,
-        Reset = 4
-    }
-
-    public partial class NotifyCollectionChangedEventArgs : EventArgs
-    {
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems, int startingIndex) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int index, int oldIndex) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int startingIndex) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index, int oldIndex) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem, int index) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action) { }
-
-        public NotifyCollectionChangedAction Action { get { throw null; } }
-
-        public IList NewItems { get { throw null; } }
-
-        public int NewStartingIndex { get { throw null; } }
-
-        public IList OldItems { get { throw null; } }
-
-        public int OldStartingIndex { get { throw null; } }
-    }
-
-    public delegate void NotifyCollectionChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e);
-}
-
-namespace System.ComponentModel
-{
-    public partial class DataErrorsChangedEventArgs : EventArgs
-    {
-        public DataErrorsChangedEventArgs(string propertyName) { }
-
-        public virtual string PropertyName { get { throw null; } }
-    }
-
-    public partial interface INotifyDataErrorInfo
-    {
-        bool HasErrors { get; }
-
-        event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged;
-        Collections.IEnumerable GetErrors(string propertyName);
-    }
-
-    public partial interface INotifyPropertyChanged
-    {
-        event PropertyChangedEventHandler PropertyChanged;
-    }
-
-    public partial class PropertyChangedEventArgs : EventArgs
-    {
-        public PropertyChangedEventArgs(string propertyName) { }
-
-        public string PropertyName { get { throw null; } }
-    }
-
-    public delegate void PropertyChangedEventHandler(object sender, PropertyChangedEventArgs e);
-}
-
-namespace System.Windows.Input
-{
-    public partial interface ICommand
-    {
-        event EventHandler CanExecuteChanged;
-        bool CanExecute(object parameter);
-        void Execute(object parameter);
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.objectmodel/4.3.0/ref/netstandard1.3/System.ObjectModel.cs b/src/referencePackages/src/system.objectmodel/4.3.0/ref/netstandard1.3/System.ObjectModel.cs
deleted file mode 100644
index e4bfa31c..00000000
--- a/src/referencePackages/src/system.objectmodel/4.3.0/ref/netstandard1.3/System.ObjectModel.cs
+++ /dev/null
@@ -1,342 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.ObjectModel")]
-[assembly: System.Reflection.AssemblyDescription("System.ObjectModel")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.ObjectModel")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Collections.ObjectModel
-{
-    public abstract partial class KeyedCollection<TKey, TItem> : Collection<TItem>
-    {
-        protected KeyedCollection() { }
-
-        protected KeyedCollection(Generic.IEqualityComparer<TKey> comparer, int dictionaryCreationThreshold) { }
-
-        protected KeyedCollection(Generic.IEqualityComparer<TKey> comparer) { }
-
-        public Generic.IEqualityComparer<TKey> Comparer { get { throw null; } }
-
-        protected Generic.IDictionary<TKey, TItem> Dictionary { get { throw null; } }
-
-        public TItem this[TKey key] { get { throw null; } }
-
-        protected void ChangeItemKey(TItem item, TKey newKey) { }
-
-        protected override void ClearItems() { }
-
-        public bool Contains(TKey key) { throw null; }
-
-        protected abstract TKey GetKeyForItem(TItem item);
-        protected override void InsertItem(int index, TItem item) { }
-
-        public bool Remove(TKey key) { throw null; }
-
-        protected override void RemoveItem(int index) { }
-
-        protected override void SetItem(int index, TItem item) { }
-    }
-
-    public partial class ObservableCollection<T> : Collection<T>, Specialized.INotifyCollectionChanged, ComponentModel.INotifyPropertyChanged
-    {
-        public ObservableCollection() { }
-
-        public ObservableCollection(Generic.IEnumerable<T> collection) { }
-
-        public virtual event Specialized.NotifyCollectionChangedEventHandler CollectionChanged { add { } remove { } }
-
-        protected virtual event ComponentModel.PropertyChangedEventHandler PropertyChanged { add { } remove { } }
-
-        protected IDisposable BlockReentrancy() { throw null; }
-
-        protected void CheckReentrancy() { }
-
-        protected override void ClearItems() { }
-
-        protected override void InsertItem(int index, T item) { }
-
-        public void Move(int oldIndex, int newIndex) { }
-
-        protected virtual void MoveItem(int oldIndex, int newIndex) { }
-
-        protected virtual void OnCollectionChanged(Specialized.NotifyCollectionChangedEventArgs e) { }
-
-        protected virtual void OnPropertyChanged(ComponentModel.PropertyChangedEventArgs e) { }
-
-        protected override void RemoveItem(int index) { }
-
-        protected override void SetItem(int index, T item) { }
-    }
-
-    public partial class ReadOnlyDictionary<TKey, TValue> : Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>, IEnumerable, Generic.IDictionary<TKey, TValue>, Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>, Generic.IReadOnlyDictionary<TKey, TValue>, ICollection, IDictionary
-    {
-        public ReadOnlyDictionary(Generic.IDictionary<TKey, TValue> dictionary) { }
-
-        public int Count { get { throw null; } }
-
-        protected Generic.IDictionary<TKey, TValue> Dictionary { get { throw null; } }
-
-        public TValue this[TKey key] { get { throw null; } }
-
-        public KeyCollection Keys { get { throw null; } }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.IsReadOnly { get { throw null; } }
-
-        TValue Generic.IDictionary<TKey, TValue>.this[TKey key] { get { throw null; } set { } }
-
-        Generic.ICollection<TKey> Generic.IDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        Generic.ICollection<TValue> Generic.IDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        Generic.IEnumerable<TKey> Generic.IReadOnlyDictionary<TKey, TValue>.Keys { get { throw null; } }
-
-        Generic.IEnumerable<TValue> Generic.IReadOnlyDictionary<TKey, TValue>.Values { get { throw null; } }
-
-        bool ICollection.IsSynchronized { get { throw null; } }
-
-        object ICollection.SyncRoot { get { throw null; } }
-
-        bool IDictionary.IsFixedSize { get { throw null; } }
-
-        bool IDictionary.IsReadOnly { get { throw null; } }
-
-        object IDictionary.this[object key] { get { throw null; } set { } }
-
-        ICollection IDictionary.Keys { get { throw null; } }
-
-        ICollection IDictionary.Values { get { throw null; } }
-
-        public ValueCollection Values { get { throw null; } }
-
-        public bool ContainsKey(TKey key) { throw null; }
-
-        public Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>> GetEnumerator() { throw null; }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Add(Generic.KeyValuePair<TKey, TValue> item) { }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Clear() { }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Contains(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-        void Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.CopyTo(Generic.KeyValuePair<TKey, TValue>[] array, int arrayIndex) { }
-
-        bool Generic.ICollection<Generic.KeyValuePair<TKey, TValue>>.Remove(Generic.KeyValuePair<TKey, TValue> item) { throw null; }
-
-        void Generic.IDictionary<TKey, TValue>.Add(TKey key, TValue value) { }
-
-        bool Generic.IDictionary<TKey, TValue>.Remove(TKey key) { throw null; }
-
-        void ICollection.CopyTo(Array array, int index) { }
-
-        void IDictionary.Add(object key, object value) { }
-
-        void IDictionary.Clear() { }
-
-        bool IDictionary.Contains(object key) { throw null; }
-
-        IDictionaryEnumerator IDictionary.GetEnumerator() { throw null; }
-
-        void IDictionary.Remove(object key) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        public bool TryGetValue(TKey key, out TValue value) { throw null; }
-
-        public sealed partial class KeyCollection : Generic.ICollection<TKey>, Generic.IEnumerable<TKey>, IEnumerable, Generic.IReadOnlyCollection<TKey>, ICollection
-        {
-            internal KeyCollection() { }
-
-            public int Count { get { throw null; } }
-
-            bool Generic.ICollection<TKey>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            public void CopyTo(TKey[] array, int arrayIndex) { }
-
-            public Generic.IEnumerator<TKey> GetEnumerator() { throw null; }
-
-            void Generic.ICollection<TKey>.Add(TKey item) { }
-
-            void Generic.ICollection<TKey>.Clear() { }
-
-            bool Generic.ICollection<TKey>.Contains(TKey item) { throw null; }
-
-            bool Generic.ICollection<TKey>.Remove(TKey item) { throw null; }
-
-            void ICollection.CopyTo(Array array, int index) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-        }
-
-        public sealed partial class ValueCollection : Generic.ICollection<TValue>, Generic.IEnumerable<TValue>, IEnumerable, Generic.IReadOnlyCollection<TValue>, ICollection
-        {
-            internal ValueCollection() { }
-
-            public int Count { get { throw null; } }
-
-            bool Generic.ICollection<TValue>.IsReadOnly { get { throw null; } }
-
-            bool ICollection.IsSynchronized { get { throw null; } }
-
-            object ICollection.SyncRoot { get { throw null; } }
-
-            public void CopyTo(TValue[] array, int arrayIndex) { }
-
-            public Generic.IEnumerator<TValue> GetEnumerator() { throw null; }
-
-            void Generic.ICollection<TValue>.Add(TValue item) { }
-
-            void Generic.ICollection<TValue>.Clear() { }
-
-            bool Generic.ICollection<TValue>.Contains(TValue item) { throw null; }
-
-            bool Generic.ICollection<TValue>.Remove(TValue item) { throw null; }
-
-            void ICollection.CopyTo(Array array, int index) { }
-
-            IEnumerator IEnumerable.GetEnumerator() { throw null; }
-        }
-    }
-
-    public partial class ReadOnlyObservableCollection<T> : ReadOnlyCollection<T>, Specialized.INotifyCollectionChanged, ComponentModel.INotifyPropertyChanged
-    {
-        public ReadOnlyObservableCollection(ObservableCollection<T> list) : base(default!) { }
-
-        protected virtual event Specialized.NotifyCollectionChangedEventHandler CollectionChanged { add { } remove { } }
-
-        protected virtual event ComponentModel.PropertyChangedEventHandler PropertyChanged { add { } remove { } }
-
-        protected virtual void OnCollectionChanged(Specialized.NotifyCollectionChangedEventArgs args) { }
-
-        protected virtual void OnPropertyChanged(ComponentModel.PropertyChangedEventArgs args) { }
-    }
-}
-
-namespace System.Collections.Specialized
-{
-    public partial interface INotifyCollectionChanged
-    {
-        event NotifyCollectionChangedEventHandler CollectionChanged;
-    }
-
-    public enum NotifyCollectionChangedAction
-    {
-        Add = 0,
-        Remove = 1,
-        Replace = 2,
-        Move = 3,
-        Reset = 4
-    }
-
-    public partial class NotifyCollectionChangedEventArgs : EventArgs
-    {
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems, int startingIndex) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int index, int oldIndex) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int startingIndex) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index, int oldIndex) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem, int index) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem) { }
-
-        public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action) { }
-
-        public NotifyCollectionChangedAction Action { get { throw null; } }
-
-        public IList NewItems { get { throw null; } }
-
-        public int NewStartingIndex { get { throw null; } }
-
-        public IList OldItems { get { throw null; } }
-
-        public int OldStartingIndex { get { throw null; } }
-    }
-
-    public delegate void NotifyCollectionChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e);
-}
-
-namespace System.ComponentModel
-{
-    public partial class DataErrorsChangedEventArgs : EventArgs
-    {
-        public DataErrorsChangedEventArgs(string propertyName) { }
-
-        public virtual string PropertyName { get { throw null; } }
-    }
-
-    public partial interface INotifyDataErrorInfo
-    {
-        bool HasErrors { get; }
-
-        event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged;
-        Collections.IEnumerable GetErrors(string propertyName);
-    }
-
-    public partial interface INotifyPropertyChanged
-    {
-        event PropertyChangedEventHandler PropertyChanged;
-    }
-
-    public partial interface INotifyPropertyChanging
-    {
-        event PropertyChangingEventHandler PropertyChanging;
-    }
-
-    public partial class PropertyChangedEventArgs : EventArgs
-    {
-        public PropertyChangedEventArgs(string propertyName) { }
-
-        public virtual string PropertyName { get { throw null; } }
-    }
-
-    public delegate void PropertyChangedEventHandler(object sender, PropertyChangedEventArgs e);
-    public partial class PropertyChangingEventArgs : EventArgs
-    {
-        public PropertyChangingEventArgs(string propertyName) { }
-
-        public virtual string PropertyName { get { throw null; } }
-    }
-
-    public delegate void PropertyChangingEventHandler(object sender, PropertyChangingEventArgs e);
-}
-
-namespace System.Windows.Input
-{
-    public partial interface ICommand
-    {
-        event EventHandler CanExecuteChanged;
-        bool CanExecute(object parameter);
-        void Execute(object parameter);
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.objectmodel/4.3.0/system.objectmodel.nuspec b/src/referencePackages/src/system.objectmodel/4.3.0/system.objectmodel.nuspec
deleted file mode 100644
index 6e42304c..00000000
--- a/src/referencePackages/src/system.objectmodel/4.3.0/system.objectmodel.nuspec
+++ /dev/null
@@ -1,44 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.ObjectModel</id>
-    <version>4.3.0</version>
-    <title>System.ObjectModel</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides types and interfaces that allow the creation of observable types that provide notifications to clients when changes are made to it.
-
-Commonly Used Types:
-System.ComponentModel.INotifyPropertyChanged
-System.Collections.ObjectModel.ObservableCollection&lt;T&gt;
-System.ComponentModel.PropertyChangedEventHandler
-System.Windows.Input.ICommand
-System.Collections.Specialized.INotifyCollectionChanged
-System.Collections.Specialized.NotifyCollectionChangedEventArgs
-System.Collections.Specialized.NotifyCollectionChangedEventHandler
-System.Collections.ObjectModel.KeyedCollection&lt;TKey, TItem&gt;
-System.ComponentModel.PropertyChangedEventArgs
-System.Collections.ObjectModel.ReadOnlyDictionary&lt;TKey, TValue&gt;
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Threading" version="4.3.0" exclude="Compile" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.emit.ilgeneration/4.3.0/System.Reflection.Emit.ILGeneration.4.3.0.csproj b/src/referencePackages/src/system.reflection.emit.ilgeneration/4.3.0/System.Reflection.Emit.ILGeneration.4.3.0.csproj
deleted file mode 100644
index b19bc211..00000000
--- a/src/referencePackages/src/system.reflection.emit.ilgeneration/4.3.0/System.Reflection.Emit.ILGeneration.4.3.0.csproj
+++ /dev/null
@@ -1,14 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0</TargetFrameworks>
-    <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.reflection.emit.ilgeneration/4.3.0/ref/netstandard1.0/System.Reflection.Emit.ILGeneration.cs b/src/referencePackages/src/system.reflection.emit.ilgeneration/4.3.0/ref/netstandard1.0/System.Reflection.Emit.ILGeneration.cs
deleted file mode 100644
index 9d5329b7..00000000
--- a/src/referencePackages/src/system.reflection.emit.ilgeneration/4.3.0/ref/netstandard1.0/System.Reflection.Emit.ILGeneration.cs
+++ /dev/null
@@ -1,205 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Reflection.Emit.ILGeneration")]
-[assembly: System.Reflection.AssemblyDescription("System.Reflection.Emit.ILGeneration")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Reflection.Emit.ILGeneration")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Reflection.Emit
-{
-    public partial class CustomAttributeBuilder
-    {
-        public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, FieldInfo[] namedFields, object[] fieldValues) { }
-
-        public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues) { }
-
-        public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues) { }
-
-        public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs) { }
-    }
-
-    public partial class ILGenerator
-    {
-        internal ILGenerator() { }
-
-        public virtual int ILOffset { get { throw null; } }
-
-        public virtual void BeginCatchBlock(Type exceptionType) { }
-
-        public virtual void BeginExceptFilterBlock() { }
-
-        public virtual Label BeginExceptionBlock() { throw null; }
-
-        public virtual void BeginFaultBlock() { }
-
-        public virtual void BeginFinallyBlock() { }
-
-        public virtual void BeginScope() { }
-
-        public virtual LocalBuilder DeclareLocal(Type localType, bool pinned) { throw null; }
-
-        public virtual LocalBuilder DeclareLocal(Type localType) { throw null; }
-
-        public virtual Label DefineLabel() { throw null; }
-
-        public virtual void Emit(OpCode opcode, byte arg) { }
-
-        public virtual void Emit(OpCode opcode, double arg) { }
-
-        public virtual void Emit(OpCode opcode, short arg) { }
-
-        public virtual void Emit(OpCode opcode, int arg) { }
-
-        public virtual void Emit(OpCode opcode, long arg) { }
-
-        public virtual void Emit(OpCode opcode, ConstructorInfo con) { }
-
-        public virtual void Emit(OpCode opcode, Label label) { }
-
-        public virtual void Emit(OpCode opcode, Label[] labels) { }
-
-        public virtual void Emit(OpCode opcode, LocalBuilder local) { }
-
-        public virtual void Emit(OpCode opcode, SignatureHelper signature) { }
-
-        public virtual void Emit(OpCode opcode, FieldInfo field) { }
-
-        public virtual void Emit(OpCode opcode, MethodInfo meth) { }
-
-        [CLSCompliant(false)]
-        public void Emit(OpCode opcode, sbyte arg) { }
-
-        public virtual void Emit(OpCode opcode, float arg) { }
-
-        public virtual void Emit(OpCode opcode, string str) { }
-
-        public virtual void Emit(OpCode opcode, Type cls) { }
-
-        public virtual void Emit(OpCode opcode) { }
-
-        public virtual void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes) { }
-
-        public virtual void EmitCalli(OpCode opcode, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes) { }
-
-        public virtual void EmitWriteLine(LocalBuilder localBuilder) { }
-
-        public virtual void EmitWriteLine(FieldInfo fld) { }
-
-        public virtual void EmitWriteLine(string value) { }
-
-        public virtual void EndExceptionBlock() { }
-
-        public virtual void EndScope() { }
-
-        public virtual void MarkLabel(Label loc) { }
-
-        public virtual void ThrowException(Type excType) { }
-
-        public virtual void UsingNamespace(string usingNamespace) { }
-    }
-
-    public partial struct Label
-    {
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(Label obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(Label a, Label b) { throw null; }
-
-        public static bool operator !=(Label a, Label b) { throw null; }
-    }
-
-    public sealed partial class LocalBuilder : LocalVariableInfo
-    {
-        internal LocalBuilder() { }
-
-        public override bool IsPinned { get { throw null; } }
-
-        public override int LocalIndex { get { throw null; } }
-
-        public override Type LocalType { get { throw null; } }
-    }
-
-    public partial class ParameterBuilder
-    {
-        internal ParameterBuilder() { }
-
-        public virtual int Attributes { get { throw null; } }
-
-        public bool IsIn { get { throw null; } }
-
-        public bool IsOptional { get { throw null; } }
-
-        public bool IsOut { get { throw null; } }
-
-        public virtual string Name { get { throw null; } }
-
-        public virtual int Position { get { throw null; } }
-
-        public virtual void SetConstant(object defaultValue) { }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-    }
-
-    public sealed partial class SignatureHelper
-    {
-        internal SignatureHelper() { }
-
-        public void AddArgument(Type argument, bool pinned) { }
-
-        public void AddArgument(Type argument, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers) { }
-
-        public void AddArgument(Type clsArgument) { }
-
-        public void AddArguments(Type[] arguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers) { }
-
-        public void AddSentinel() { }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public static SignatureHelper GetFieldSigHelper(Module mod) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static SignatureHelper GetLocalVarSigHelper() { throw null; }
-
-        public static SignatureHelper GetLocalVarSigHelper(Module mod) { throw null; }
-
-        public static SignatureHelper GetMethodSigHelper(CallingConventions callingConvention, Type returnType) { throw null; }
-
-        public static SignatureHelper GetMethodSigHelper(Module mod, CallingConventions callingConvention, Type returnType) { throw null; }
-
-        public static SignatureHelper GetMethodSigHelper(Module mod, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public static SignatureHelper GetPropertySigHelper(Module mod, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers) { throw null; }
-
-        public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers) { throw null; }
-
-        public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public byte[] GetSignature() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.emit.ilgeneration/4.3.0/system.reflection.emit.ilgeneration.nuspec b/src/referencePackages/src/system.reflection.emit.ilgeneration/4.3.0/system.reflection.emit.ilgeneration.nuspec
deleted file mode 100644
index 583f4fda..00000000
--- a/src/referencePackages/src/system.reflection.emit.ilgeneration/4.3.0/system.reflection.emit.ilgeneration.nuspec
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Reflection.Emit.ILGeneration</id>
-    <version>4.3.0</version>
-    <title>System.Reflection.Emit.ILGeneration</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides classes that allow a compiler or tool to emit Microsoft intermediate language (MSIL). The primary clients of these classes are script engines and compilers.
-
-Commonly Used Types:
-System.Reflection.Emit.ILGenerator
-System.Reflection.Emit.Label
-System.Reflection.Emit.CustomAttributeBuilder
-System.Reflection.Emit.LocalBuilder
-System.Reflection.Emit.ParameterBuilder
-System.Reflection.Emit.SignatureHelper
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Reflection.Primitives" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.emit.ilgeneration/4.7.0/System.Reflection.Emit.ILGeneration.4.7.0.csproj b/src/referencePackages/src/system.reflection.emit.ilgeneration/4.7.0/System.Reflection.Emit.ILGeneration.4.7.0.csproj
index 63002926..b4c4d5c8 100644
--- a/src/referencePackages/src/system.reflection.emit.ilgeneration/4.7.0/System.Reflection.Emit.ILGeneration.4.7.0.csproj
+++ b/src/referencePackages/src/system.reflection.emit.ilgeneration/4.7.0/System.Reflection.Emit.ILGeneration.4.7.0.csproj
@@ -1,15 +1,8 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
 </Project>
diff --git a/src/referencePackages/src/system.reflection.emit.ilgeneration/4.7.0/ref/netstandard1.0/System.Reflection.Emit.ILGeneration.cs b/src/referencePackages/src/system.reflection.emit.ilgeneration/4.7.0/ref/netstandard1.0/System.Reflection.Emit.ILGeneration.cs
deleted file mode 100644
index 9d5329b7..00000000
--- a/src/referencePackages/src/system.reflection.emit.ilgeneration/4.7.0/ref/netstandard1.0/System.Reflection.Emit.ILGeneration.cs
+++ /dev/null
@@ -1,205 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Reflection.Emit.ILGeneration")]
-[assembly: System.Reflection.AssemblyDescription("System.Reflection.Emit.ILGeneration")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Reflection.Emit.ILGeneration")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Reflection.Emit
-{
-    public partial class CustomAttributeBuilder
-    {
-        public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, FieldInfo[] namedFields, object[] fieldValues) { }
-
-        public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues) { }
-
-        public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues) { }
-
-        public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs) { }
-    }
-
-    public partial class ILGenerator
-    {
-        internal ILGenerator() { }
-
-        public virtual int ILOffset { get { throw null; } }
-
-        public virtual void BeginCatchBlock(Type exceptionType) { }
-
-        public virtual void BeginExceptFilterBlock() { }
-
-        public virtual Label BeginExceptionBlock() { throw null; }
-
-        public virtual void BeginFaultBlock() { }
-
-        public virtual void BeginFinallyBlock() { }
-
-        public virtual void BeginScope() { }
-
-        public virtual LocalBuilder DeclareLocal(Type localType, bool pinned) { throw null; }
-
-        public virtual LocalBuilder DeclareLocal(Type localType) { throw null; }
-
-        public virtual Label DefineLabel() { throw null; }
-
-        public virtual void Emit(OpCode opcode, byte arg) { }
-
-        public virtual void Emit(OpCode opcode, double arg) { }
-
-        public virtual void Emit(OpCode opcode, short arg) { }
-
-        public virtual void Emit(OpCode opcode, int arg) { }
-
-        public virtual void Emit(OpCode opcode, long arg) { }
-
-        public virtual void Emit(OpCode opcode, ConstructorInfo con) { }
-
-        public virtual void Emit(OpCode opcode, Label label) { }
-
-        public virtual void Emit(OpCode opcode, Label[] labels) { }
-
-        public virtual void Emit(OpCode opcode, LocalBuilder local) { }
-
-        public virtual void Emit(OpCode opcode, SignatureHelper signature) { }
-
-        public virtual void Emit(OpCode opcode, FieldInfo field) { }
-
-        public virtual void Emit(OpCode opcode, MethodInfo meth) { }
-
-        [CLSCompliant(false)]
-        public void Emit(OpCode opcode, sbyte arg) { }
-
-        public virtual void Emit(OpCode opcode, float arg) { }
-
-        public virtual void Emit(OpCode opcode, string str) { }
-
-        public virtual void Emit(OpCode opcode, Type cls) { }
-
-        public virtual void Emit(OpCode opcode) { }
-
-        public virtual void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes) { }
-
-        public virtual void EmitCalli(OpCode opcode, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes) { }
-
-        public virtual void EmitWriteLine(LocalBuilder localBuilder) { }
-
-        public virtual void EmitWriteLine(FieldInfo fld) { }
-
-        public virtual void EmitWriteLine(string value) { }
-
-        public virtual void EndExceptionBlock() { }
-
-        public virtual void EndScope() { }
-
-        public virtual void MarkLabel(Label loc) { }
-
-        public virtual void ThrowException(Type excType) { }
-
-        public virtual void UsingNamespace(string usingNamespace) { }
-    }
-
-    public partial struct Label
-    {
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(Label obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(Label a, Label b) { throw null; }
-
-        public static bool operator !=(Label a, Label b) { throw null; }
-    }
-
-    public sealed partial class LocalBuilder : LocalVariableInfo
-    {
-        internal LocalBuilder() { }
-
-        public override bool IsPinned { get { throw null; } }
-
-        public override int LocalIndex { get { throw null; } }
-
-        public override Type LocalType { get { throw null; } }
-    }
-
-    public partial class ParameterBuilder
-    {
-        internal ParameterBuilder() { }
-
-        public virtual int Attributes { get { throw null; } }
-
-        public bool IsIn { get { throw null; } }
-
-        public bool IsOptional { get { throw null; } }
-
-        public bool IsOut { get { throw null; } }
-
-        public virtual string Name { get { throw null; } }
-
-        public virtual int Position { get { throw null; } }
-
-        public virtual void SetConstant(object defaultValue) { }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-    }
-
-    public sealed partial class SignatureHelper
-    {
-        internal SignatureHelper() { }
-
-        public void AddArgument(Type argument, bool pinned) { }
-
-        public void AddArgument(Type argument, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers) { }
-
-        public void AddArgument(Type clsArgument) { }
-
-        public void AddArguments(Type[] arguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers) { }
-
-        public void AddSentinel() { }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public static SignatureHelper GetFieldSigHelper(Module mod) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static SignatureHelper GetLocalVarSigHelper() { throw null; }
-
-        public static SignatureHelper GetLocalVarSigHelper(Module mod) { throw null; }
-
-        public static SignatureHelper GetMethodSigHelper(CallingConventions callingConvention, Type returnType) { throw null; }
-
-        public static SignatureHelper GetMethodSigHelper(Module mod, CallingConventions callingConvention, Type returnType) { throw null; }
-
-        public static SignatureHelper GetMethodSigHelper(Module mod, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public static SignatureHelper GetPropertySigHelper(Module mod, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers) { throw null; }
-
-        public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers) { throw null; }
-
-        public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public byte[] GetSignature() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.emit.ilgeneration/4.7.0/system.reflection.emit.ilgeneration.nuspec b/src/referencePackages/src/system.reflection.emit.ilgeneration/4.7.0/system.reflection.emit.ilgeneration.nuspec
index 9813de95..d45cce48 100644
--- a/src/referencePackages/src/system.reflection.emit.ilgeneration/4.7.0/system.reflection.emit.ilgeneration.nuspec
+++ b/src/referencePackages/src/system.reflection.emit.ilgeneration/4.7.0/system.reflection.emit.ilgeneration.nuspec
@@ -26,12 +26,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <copyright>© Microsoft Corporation. All rights reserved.</copyright>
     <serviceable>true</serviceable>
     <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Reflection.Primitives" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
       <group targetFramework=".NETStandard2.0" />
       <group targetFramework=".NETStandard2.1" />
     </dependencies>
diff --git a/src/referencePackages/src/system.reflection.emit.lightweight/4.3.0/System.Reflection.Emit.Lightweight.4.3.0.csproj b/src/referencePackages/src/system.reflection.emit.lightweight/4.3.0/System.Reflection.Emit.Lightweight.4.3.0.csproj
deleted file mode 100644
index 050c6639..00000000
--- a/src/referencePackages/src/system.reflection.emit.lightweight/4.3.0/System.Reflection.Emit.Lightweight.4.3.0.csproj
+++ /dev/null
@@ -1,15 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0</TargetFrameworks>
-    <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Emit.ILGeneration" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.reflection.emit.lightweight/4.3.0/ref/netstandard1.0/System.Reflection.Emit.Lightweight.cs b/src/referencePackages/src/system.reflection.emit.lightweight/4.3.0/ref/netstandard1.0/System.Reflection.Emit.Lightweight.cs
deleted file mode 100644
index 0a5624a8..00000000
--- a/src/referencePackages/src/system.reflection.emit.lightweight/4.3.0/ref/netstandard1.0/System.Reflection.Emit.Lightweight.cs
+++ /dev/null
@@ -1,73 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Reflection.Emit.Lightweight")]
-[assembly: System.Reflection.AssemblyDescription("System.Reflection.Emit.Lightweight")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Reflection.Emit.Lightweight")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Reflection.Emit
-{
-    public sealed partial class DynamicMethod : MethodInfo
-    {
-        public DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility) { }
-
-        public DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility) { }
-
-        public DynamicMethod(string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility) { }
-
-        public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility) { }
-
-        public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Module m) { }
-
-        public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility) { }
-
-        public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner) { }
-
-        public DynamicMethod(string name, Type returnType, Type[] parameterTypes) { }
-
-        public override MethodAttributes Attributes { get { throw null; } }
-
-        public override CallingConventions CallingConvention { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public bool InitLocals { get { throw null; } set { } }
-
-        public override MethodImplAttributes MethodImplementationFlags { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override ParameterInfo ReturnParameter { get { throw null; } }
-
-        public override Type ReturnType { get { throw null; } }
-
-        public sealed override Delegate CreateDelegate(Type delegateType, object target) { throw null; }
-
-        public sealed override Delegate CreateDelegate(Type delegateType) { throw null; }
-
-        public ILGenerator GetILGenerator() { throw null; }
-
-        public ILGenerator GetILGenerator(int streamSize) { throw null; }
-
-        public override ParameterInfo[] GetParameters() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.emit.lightweight/4.3.0/system.reflection.emit.lightweight.nuspec b/src/referencePackages/src/system.reflection.emit.lightweight/4.3.0/system.reflection.emit.lightweight.nuspec
deleted file mode 100644
index f9774bfc..00000000
--- a/src/referencePackages/src/system.reflection.emit.lightweight/4.3.0/system.reflection.emit.lightweight.nuspec
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Reflection.Emit.Lightweight</id>
-    <version>4.3.0</version>
-    <title>System.Reflection.Emit.Lightweight</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides the System.Reflection.Emit.DynamicMethod class, which represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.
-
-Commonly Used Types:
-System.Reflection.Emit.DynamicMethod
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Reflection.Emit.ILGeneration" version="4.3.0" />
-        <dependency id="System.Reflection.Primitives" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.emit/4.3.0/System.Reflection.Emit.4.3.0.csproj b/src/referencePackages/src/system.reflection.emit/4.3.0/System.Reflection.Emit.4.3.0.csproj
deleted file mode 100644
index 0493087b..00000000
--- a/src/referencePackages/src/system.reflection.emit/4.3.0/System.Reflection.Emit.4.3.0.csproj
+++ /dev/null
@@ -1,16 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.1</TargetFrameworks>
-    <AssemblyName>System.Reflection.Emit</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Emit.ILGeneration" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.reflection.emit/4.3.0/ref/netstandard1.1/System.Reflection.Emit.cs b/src/referencePackages/src/system.reflection.emit/4.3.0/ref/netstandard1.1/System.Reflection.Emit.cs
deleted file mode 100644
index fdfe45de..00000000
--- a/src/referencePackages/src/system.reflection.emit/4.3.0/ref/netstandard1.1/System.Reflection.Emit.cs
+++ /dev/null
@@ -1,593 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Runtime.InteropServices, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Reflection.Emit, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Reflection.Emit.Lightweight, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Reflection.Emit")]
-[assembly: System.Reflection.AssemblyDescription("System.Reflection.Emit")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Reflection.Emit")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Reflection.Emit
-{
-    public sealed partial class AssemblyBuilder : Assembly
-    {
-        internal AssemblyBuilder() { }
-
-        public override Collections.Generic.IEnumerable<TypeInfo> DefinedTypes { get { throw null; } }
-
-        public override string FullName { get { throw null; } }
-
-        public override bool IsDynamic { get { throw null; } }
-
-        public override Module ManifestModule { get { throw null; } }
-
-        public override Collections.Generic.IEnumerable<Module> Modules { get { throw null; } }
-
-        public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Collections.Generic.IEnumerable<CustomAttributeBuilder> assemblyAttributes) { throw null; }
-
-        public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access) { throw null; }
-
-        public ModuleBuilder DefineDynamicModule(string name) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public ModuleBuilder GetDynamicModule(string name) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override ManifestResourceInfo GetManifestResourceInfo(string resourceName) { throw null; }
-
-        public override string[] GetManifestResourceNames() { throw null; }
-
-        public override IO.Stream GetManifestResourceStream(string name) { throw null; }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-    }
-
-    [Flags]
-    public enum AssemblyBuilderAccess
-    {
-        Run = 1,
-        RunAndCollect = 9
-    }
-
-    public sealed partial class ConstructorBuilder : ConstructorInfo
-    {
-        internal ConstructorBuilder() { }
-
-        public override MethodAttributes Attributes { get { throw null; } }
-
-        public override CallingConventions CallingConvention { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public bool InitLocals { get { throw null; } set { } }
-
-        public override MethodImplAttributes MethodImplementationFlags { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public ParameterBuilder DefineParameter(int iSequence, ParameterAttributes attributes, string strParamName) { throw null; }
-
-        public ILGenerator GetILGenerator() { throw null; }
-
-        public ILGenerator GetILGenerator(int streamSize) { throw null; }
-
-        public override ParameterInfo[] GetParameters() { throw null; }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-
-        public void SetImplementationFlags(MethodImplAttributes attributes) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    public sealed partial class EnumBuilder : TypeInfo
-    {
-        internal EnumBuilder() { }
-
-        public override Assembly Assembly { get { throw null; } }
-
-        public override string AssemblyQualifiedName { get { throw null; } }
-
-        public override TypeAttributes Attributes { get { throw null; } }
-
-        public override Type BaseType { get { throw null; } }
-
-        public override bool ContainsGenericParameters { get { throw null; } }
-
-        public override MethodBase DeclaringMethod { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public override string FullName { get { throw null; } }
-
-        public override GenericParameterAttributes GenericParameterAttributes { get { throw null; } }
-
-        public override int GenericParameterPosition { get { throw null; } }
-
-        public override Type[] GenericTypeArguments { get { throw null; } }
-
-        public override Guid GUID { get { throw null; } }
-
-        public override bool IsEnum { get { throw null; } }
-
-        public override bool IsGenericParameter { get { throw null; } }
-
-        public override bool IsGenericType { get { throw null; } }
-
-        public override bool IsGenericTypeDefinition { get { throw null; } }
-
-        public override bool IsSerializable { get { throw null; } }
-
-        public override Module Module { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override string Namespace { get { throw null; } }
-
-        public FieldBuilder UnderlyingField { get { throw null; } }
-
-        public TypeInfo CreateTypeInfo() { throw null; }
-
-        public FieldBuilder DefineLiteral(string literalName, object literalValue) { throw null; }
-
-        public override int GetArrayRank() { throw null; }
-
-        public override Type GetElementType() { throw null; }
-
-        public override Type[] GetGenericParameterConstraints() { throw null; }
-
-        public override Type GetGenericTypeDefinition() { throw null; }
-
-        public override bool IsAssignableFrom(TypeInfo typeInfo) { throw null; }
-
-        public override Type MakeArrayType() { throw null; }
-
-        public override Type MakeArrayType(int rank) { throw null; }
-
-        public override Type MakeByRefType() { throw null; }
-
-        public override Type MakeGenericType(params Type[] typeArguments) { throw null; }
-
-        public override Type MakePointerType() { throw null; }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-    }
-
-    public sealed partial class EventBuilder
-    {
-        internal EventBuilder() { }
-
-        public void AddOtherMethod(MethodBuilder mdBuilder) { }
-
-        public void SetAddOnMethod(MethodBuilder mdBuilder) { }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-
-        public void SetRaiseMethod(MethodBuilder mdBuilder) { }
-
-        public void SetRemoveOnMethod(MethodBuilder mdBuilder) { }
-    }
-
-    public sealed partial class FieldBuilder : FieldInfo
-    {
-        internal FieldBuilder() { }
-
-        public override FieldAttributes Attributes { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public override Type FieldType { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override object GetValue(object obj) { throw null; }
-
-        public void SetConstant(object defaultValue) { }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-
-        public void SetOffset(int iOffset) { }
-    }
-
-    public sealed partial class GenericTypeParameterBuilder : TypeInfo
-    {
-        internal GenericTypeParameterBuilder() { }
-
-        public override Assembly Assembly { get { throw null; } }
-
-        public override string AssemblyQualifiedName { get { throw null; } }
-
-        public override TypeAttributes Attributes { get { throw null; } }
-
-        public override Type BaseType { get { throw null; } }
-
-        public override bool ContainsGenericParameters { get { throw null; } }
-
-        public override MethodBase DeclaringMethod { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public override string FullName { get { throw null; } }
-
-        public override GenericParameterAttributes GenericParameterAttributes { get { throw null; } }
-
-        public override int GenericParameterPosition { get { throw null; } }
-
-        public override Type[] GenericTypeArguments { get { throw null; } }
-
-        public override Guid GUID { get { throw null; } }
-
-        public override bool IsEnum { get { throw null; } }
-
-        public override bool IsGenericParameter { get { throw null; } }
-
-        public override bool IsGenericType { get { throw null; } }
-
-        public override bool IsGenericTypeDefinition { get { throw null; } }
-
-        public override bool IsSerializable { get { throw null; } }
-
-        public override Module Module { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override string Namespace { get { throw null; } }
-
-        public override bool Equals(object o) { throw null; }
-
-        public override int GetArrayRank() { throw null; }
-
-        public override Type GetElementType() { throw null; }
-
-        public override Type[] GetGenericParameterConstraints() { throw null; }
-
-        public override Type GetGenericTypeDefinition() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override bool IsAssignableFrom(TypeInfo typeInfo) { throw null; }
-
-        public override bool IsSubclassOf(Type c) { throw null; }
-
-        public override Type MakeArrayType() { throw null; }
-
-        public override Type MakeArrayType(int rank) { throw null; }
-
-        public override Type MakeByRefType() { throw null; }
-
-        public override Type MakeGenericType(params Type[] typeArguments) { throw null; }
-
-        public override Type MakePointerType() { throw null; }
-
-        public void SetBaseTypeConstraint(Type baseTypeConstraint) { }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-
-        public void SetGenericParameterAttributes(GenericParameterAttributes genericParameterAttributes) { }
-
-        public void SetInterfaceConstraints(params Type[] interfaceConstraints) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    public sealed partial class MethodBuilder : MethodInfo
-    {
-        internal MethodBuilder() { }
-
-        public override MethodAttributes Attributes { get { throw null; } }
-
-        public override CallingConventions CallingConvention { get { throw null; } }
-
-        public override bool ContainsGenericParameters { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public bool InitLocals { get { throw null; } set { } }
-
-        public override bool IsGenericMethod { get { throw null; } }
-
-        public override bool IsGenericMethodDefinition { get { throw null; } }
-
-        public override MethodImplAttributes MethodImplementationFlags { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override ParameterInfo ReturnParameter { get { throw null; } }
-
-        public override Type ReturnType { get { throw null; } }
-
-        public GenericTypeParameterBuilder[] DefineGenericParameters(params string[] names) { throw null; }
-
-        public ParameterBuilder DefineParameter(int position, ParameterAttributes attributes, string strParamName) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override Type[] GetGenericArguments() { throw null; }
-
-        public override MethodInfo GetGenericMethodDefinition() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public ILGenerator GetILGenerator() { throw null; }
-
-        public ILGenerator GetILGenerator(int size) { throw null; }
-
-        public override ParameterInfo[] GetParameters() { throw null; }
-
-        public override MethodInfo MakeGenericMethod(params Type[] typeArguments) { throw null; }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-
-        public void SetImplementationFlags(MethodImplAttributes attributes) { }
-
-        public void SetParameters(params Type[] parameterTypes) { }
-
-        public void SetReturnType(Type returnType) { }
-
-        public void SetSignature(Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class ModuleBuilder : Module
-    {
-        internal ModuleBuilder() { }
-
-        public override Assembly Assembly { get { throw null; } }
-
-        public override string FullyQualifiedName { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public void CreateGlobalFunctions() { }
-
-        public EnumBuilder DefineEnum(string name, TypeAttributes visibility, Type underlyingType) { throw null; }
-
-        public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers) { throw null; }
-
-        public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public FieldBuilder DefineInitializedData(string name, byte[] data, FieldAttributes attributes) { throw null; }
-
-        public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, int typesize) { throw null; }
-
-        public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packingSize, int typesize) { throw null; }
-
-        public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packsize) { throw null; }
-
-        public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces) { throw null; }
-
-        public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent) { throw null; }
-
-        public TypeBuilder DefineType(string name, TypeAttributes attr) { throw null; }
-
-        public TypeBuilder DefineType(string name) { throw null; }
-
-        public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public MethodInfo GetArrayMethod(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-    }
-
-    public sealed partial class PropertyBuilder : PropertyInfo
-    {
-        internal PropertyBuilder() { }
-
-        public override PropertyAttributes Attributes { get { throw null; } }
-
-        public override bool CanRead { get { throw null; } }
-
-        public override bool CanWrite { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override Type PropertyType { get { throw null; } }
-
-        public void AddOtherMethod(MethodBuilder mdBuilder) { }
-
-        public override ParameterInfo[] GetIndexParameters() { throw null; }
-
-        public override object GetValue(object obj, object[] index) { throw null; }
-
-        public void SetConstant(object defaultValue) { }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-
-        public void SetGetMethod(MethodBuilder mdBuilder) { }
-
-        public void SetSetMethod(MethodBuilder mdBuilder) { }
-
-        public override void SetValue(object obj, object value, object[] index) { }
-    }
-
-    public sealed partial class TypeBuilder : TypeInfo
-    {
-        internal TypeBuilder() { }
-
-        public const int UnspecifiedTypeSize = 0;
-        public override Assembly Assembly { get { throw null; } }
-
-        public override string AssemblyQualifiedName { get { throw null; } }
-
-        public override TypeAttributes Attributes { get { throw null; } }
-
-        public override Type BaseType { get { throw null; } }
-
-        public override bool ContainsGenericParameters { get { throw null; } }
-
-        public override MethodBase DeclaringMethod { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public override string FullName { get { throw null; } }
-
-        public override GenericParameterAttributes GenericParameterAttributes { get { throw null; } }
-
-        public override int GenericParameterPosition { get { throw null; } }
-
-        public override Type[] GenericTypeArguments { get { throw null; } }
-
-        public override Guid GUID { get { throw null; } }
-
-        public override bool IsEnum { get { throw null; } }
-
-        public override bool IsGenericParameter { get { throw null; } }
-
-        public override bool IsGenericType { get { throw null; } }
-
-        public override bool IsGenericTypeDefinition { get { throw null; } }
-
-        public override bool IsSerializable { get { throw null; } }
-
-        public override Module Module { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override string Namespace { get { throw null; } }
-
-        public PackingSize PackingSize { get { throw null; } }
-
-        public int Size { get { throw null; } }
-
-        public void AddInterfaceImplementation(Type interfaceType) { }
-
-        public TypeInfo CreateTypeInfo() { throw null; }
-
-        public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers) { throw null; }
-
-        public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes) { throw null; }
-
-        public ConstructorBuilder DefineDefaultConstructor(MethodAttributes attributes) { throw null; }
-
-        public EventBuilder DefineEvent(string name, EventAttributes attributes, Type eventtype) { throw null; }
-
-        public FieldBuilder DefineField(string fieldName, Type type, FieldAttributes attributes) { throw null; }
-
-        public FieldBuilder DefineField(string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes) { throw null; }
-
-        public GenericTypeParameterBuilder[] DefineGenericParameters(params string[] names) { throw null; }
-
-        public FieldBuilder DefineInitializedData(string name, byte[] data, FieldAttributes attributes) { throw null; }
-
-        public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers) { throw null; }
-
-        public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention) { throw null; }
-
-        public MethodBuilder DefineMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public MethodBuilder DefineMethod(string name, MethodAttributes attributes) { throw null; }
-
-        public void DefineMethodOverride(MethodInfo methodInfoBody, MethodInfo methodInfoDeclaration) { }
-
-        public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, int typeSize) { throw null; }
-
-        public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, PackingSize packSize, int typeSize) { throw null; }
-
-        public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, PackingSize packSize) { throw null; }
-
-        public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces) { throw null; }
-
-        public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent) { throw null; }
-
-        public TypeBuilder DefineNestedType(string name, TypeAttributes attr) { throw null; }
-
-        public TypeBuilder DefineNestedType(string name) { throw null; }
-
-        public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers) { throw null; }
-
-        public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers) { throw null; }
-
-        public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public ConstructorBuilder DefineTypeInitializer() { throw null; }
-
-        public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes) { throw null; }
-
-        public override int GetArrayRank() { throw null; }
-
-        public static ConstructorInfo GetConstructor(Type type, ConstructorInfo constructor) { throw null; }
-
-        public override Type GetElementType() { throw null; }
-
-        public static FieldInfo GetField(Type type, FieldInfo field) { throw null; }
-
-        public override Type[] GetGenericParameterConstraints() { throw null; }
-
-        public override Type GetGenericTypeDefinition() { throw null; }
-
-        public static MethodInfo GetMethod(Type type, MethodInfo method) { throw null; }
-
-        public override bool IsAssignableFrom(TypeInfo typeInfo) { throw null; }
-
-        public bool IsCreated() { throw null; }
-
-        public override Type MakeArrayType() { throw null; }
-
-        public override Type MakeArrayType(int rank) { throw null; }
-
-        public override Type MakeByRefType() { throw null; }
-
-        public override Type MakeGenericType(params Type[] typeArguments) { throw null; }
-
-        public override Type MakePointerType() { throw null; }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-
-        public void SetParent(Type parent) { }
-
-        public override string ToString() { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.emit/4.3.0/system.reflection.emit.nuspec b/src/referencePackages/src/system.reflection.emit/4.3.0/system.reflection.emit.nuspec
deleted file mode 100644
index 7dfc62df..00000000
--- a/src/referencePackages/src/system.reflection.emit/4.3.0/system.reflection.emit.nuspec
+++ /dev/null
@@ -1,41 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Reflection.Emit</id>
-    <version>4.3.0</version>
-    <title>System.Reflection.Emit</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides classes that allow a compiler or tool to emit metadata and optionally generate a PE file on disk. The primary clients of these classes are script engines and compilers.
-
-Commonly Used Types:
-System.Reflection.Emit.AssemblyBuilder
-System.Reflection.Emit.FieldBuilder
-System.Reflection.Emit.TypeBuilder
-System.Reflection.Emit.MethodBuilder
-System.Reflection.Emit.ConstructorBuilder
-System.Reflection.Emit.GenericTypeParameterBuilder
-System.Reflection.Emit.ModuleBuilder
-System.Reflection.Emit.PropertyBuilder
-System.Reflection.Emit.AssemblyBuilderAccess
-System.Reflection.Emit.EventBuilder
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Reflection.Emit.ILGeneration" version="4.3.0" />
-        <dependency id="System.Reflection.Primitives" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.emit/4.7.0/System.Reflection.Emit.4.7.0.csproj b/src/referencePackages/src/system.reflection.emit/4.7.0/System.Reflection.Emit.4.7.0.csproj
index 77a157a4..22638a2e 100644
--- a/src/referencePackages/src/system.reflection.emit/4.7.0/System.Reflection.Emit.4.7.0.csproj
+++ b/src/referencePackages/src/system.reflection.emit/4.7.0/System.Reflection.Emit.4.7.0.csproj
@@ -1,20 +1,10 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.1;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Reflection.Emit</AssemblyName>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Emit.ILGeneration" Version="4.7.0" />
-    <PackageReference Include="System.Reflection.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
-  </ItemGroup>
-
   <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
     <PackageReference Include="System.Reflection.Emit.ILGeneration" Version="4.7.0" />
   </ItemGroup>
diff --git a/src/referencePackages/src/system.reflection.emit/4.7.0/ref/netstandard1.1/System.Reflection.Emit.cs b/src/referencePackages/src/system.reflection.emit/4.7.0/ref/netstandard1.1/System.Reflection.Emit.cs
deleted file mode 100644
index fdfe45de..00000000
--- a/src/referencePackages/src/system.reflection.emit/4.7.0/ref/netstandard1.1/System.Reflection.Emit.cs
+++ /dev/null
@@ -1,593 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Runtime.InteropServices, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Reflection.Emit, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Reflection.Emit.Lightweight, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Reflection.Emit")]
-[assembly: System.Reflection.AssemblyDescription("System.Reflection.Emit")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Reflection.Emit")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Reflection.Emit
-{
-    public sealed partial class AssemblyBuilder : Assembly
-    {
-        internal AssemblyBuilder() { }
-
-        public override Collections.Generic.IEnumerable<TypeInfo> DefinedTypes { get { throw null; } }
-
-        public override string FullName { get { throw null; } }
-
-        public override bool IsDynamic { get { throw null; } }
-
-        public override Module ManifestModule { get { throw null; } }
-
-        public override Collections.Generic.IEnumerable<Module> Modules { get { throw null; } }
-
-        public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Collections.Generic.IEnumerable<CustomAttributeBuilder> assemblyAttributes) { throw null; }
-
-        public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access) { throw null; }
-
-        public ModuleBuilder DefineDynamicModule(string name) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public ModuleBuilder GetDynamicModule(string name) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override ManifestResourceInfo GetManifestResourceInfo(string resourceName) { throw null; }
-
-        public override string[] GetManifestResourceNames() { throw null; }
-
-        public override IO.Stream GetManifestResourceStream(string name) { throw null; }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-    }
-
-    [Flags]
-    public enum AssemblyBuilderAccess
-    {
-        Run = 1,
-        RunAndCollect = 9
-    }
-
-    public sealed partial class ConstructorBuilder : ConstructorInfo
-    {
-        internal ConstructorBuilder() { }
-
-        public override MethodAttributes Attributes { get { throw null; } }
-
-        public override CallingConventions CallingConvention { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public bool InitLocals { get { throw null; } set { } }
-
-        public override MethodImplAttributes MethodImplementationFlags { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public ParameterBuilder DefineParameter(int iSequence, ParameterAttributes attributes, string strParamName) { throw null; }
-
-        public ILGenerator GetILGenerator() { throw null; }
-
-        public ILGenerator GetILGenerator(int streamSize) { throw null; }
-
-        public override ParameterInfo[] GetParameters() { throw null; }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-
-        public void SetImplementationFlags(MethodImplAttributes attributes) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    public sealed partial class EnumBuilder : TypeInfo
-    {
-        internal EnumBuilder() { }
-
-        public override Assembly Assembly { get { throw null; } }
-
-        public override string AssemblyQualifiedName { get { throw null; } }
-
-        public override TypeAttributes Attributes { get { throw null; } }
-
-        public override Type BaseType { get { throw null; } }
-
-        public override bool ContainsGenericParameters { get { throw null; } }
-
-        public override MethodBase DeclaringMethod { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public override string FullName { get { throw null; } }
-
-        public override GenericParameterAttributes GenericParameterAttributes { get { throw null; } }
-
-        public override int GenericParameterPosition { get { throw null; } }
-
-        public override Type[] GenericTypeArguments { get { throw null; } }
-
-        public override Guid GUID { get { throw null; } }
-
-        public override bool IsEnum { get { throw null; } }
-
-        public override bool IsGenericParameter { get { throw null; } }
-
-        public override bool IsGenericType { get { throw null; } }
-
-        public override bool IsGenericTypeDefinition { get { throw null; } }
-
-        public override bool IsSerializable { get { throw null; } }
-
-        public override Module Module { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override string Namespace { get { throw null; } }
-
-        public FieldBuilder UnderlyingField { get { throw null; } }
-
-        public TypeInfo CreateTypeInfo() { throw null; }
-
-        public FieldBuilder DefineLiteral(string literalName, object literalValue) { throw null; }
-
-        public override int GetArrayRank() { throw null; }
-
-        public override Type GetElementType() { throw null; }
-
-        public override Type[] GetGenericParameterConstraints() { throw null; }
-
-        public override Type GetGenericTypeDefinition() { throw null; }
-
-        public override bool IsAssignableFrom(TypeInfo typeInfo) { throw null; }
-
-        public override Type MakeArrayType() { throw null; }
-
-        public override Type MakeArrayType(int rank) { throw null; }
-
-        public override Type MakeByRefType() { throw null; }
-
-        public override Type MakeGenericType(params Type[] typeArguments) { throw null; }
-
-        public override Type MakePointerType() { throw null; }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-    }
-
-    public sealed partial class EventBuilder
-    {
-        internal EventBuilder() { }
-
-        public void AddOtherMethod(MethodBuilder mdBuilder) { }
-
-        public void SetAddOnMethod(MethodBuilder mdBuilder) { }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-
-        public void SetRaiseMethod(MethodBuilder mdBuilder) { }
-
-        public void SetRemoveOnMethod(MethodBuilder mdBuilder) { }
-    }
-
-    public sealed partial class FieldBuilder : FieldInfo
-    {
-        internal FieldBuilder() { }
-
-        public override FieldAttributes Attributes { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public override Type FieldType { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override object GetValue(object obj) { throw null; }
-
-        public void SetConstant(object defaultValue) { }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-
-        public void SetOffset(int iOffset) { }
-    }
-
-    public sealed partial class GenericTypeParameterBuilder : TypeInfo
-    {
-        internal GenericTypeParameterBuilder() { }
-
-        public override Assembly Assembly { get { throw null; } }
-
-        public override string AssemblyQualifiedName { get { throw null; } }
-
-        public override TypeAttributes Attributes { get { throw null; } }
-
-        public override Type BaseType { get { throw null; } }
-
-        public override bool ContainsGenericParameters { get { throw null; } }
-
-        public override MethodBase DeclaringMethod { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public override string FullName { get { throw null; } }
-
-        public override GenericParameterAttributes GenericParameterAttributes { get { throw null; } }
-
-        public override int GenericParameterPosition { get { throw null; } }
-
-        public override Type[] GenericTypeArguments { get { throw null; } }
-
-        public override Guid GUID { get { throw null; } }
-
-        public override bool IsEnum { get { throw null; } }
-
-        public override bool IsGenericParameter { get { throw null; } }
-
-        public override bool IsGenericType { get { throw null; } }
-
-        public override bool IsGenericTypeDefinition { get { throw null; } }
-
-        public override bool IsSerializable { get { throw null; } }
-
-        public override Module Module { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override string Namespace { get { throw null; } }
-
-        public override bool Equals(object o) { throw null; }
-
-        public override int GetArrayRank() { throw null; }
-
-        public override Type GetElementType() { throw null; }
-
-        public override Type[] GetGenericParameterConstraints() { throw null; }
-
-        public override Type GetGenericTypeDefinition() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override bool IsAssignableFrom(TypeInfo typeInfo) { throw null; }
-
-        public override bool IsSubclassOf(Type c) { throw null; }
-
-        public override Type MakeArrayType() { throw null; }
-
-        public override Type MakeArrayType(int rank) { throw null; }
-
-        public override Type MakeByRefType() { throw null; }
-
-        public override Type MakeGenericType(params Type[] typeArguments) { throw null; }
-
-        public override Type MakePointerType() { throw null; }
-
-        public void SetBaseTypeConstraint(Type baseTypeConstraint) { }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-
-        public void SetGenericParameterAttributes(GenericParameterAttributes genericParameterAttributes) { }
-
-        public void SetInterfaceConstraints(params Type[] interfaceConstraints) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    public sealed partial class MethodBuilder : MethodInfo
-    {
-        internal MethodBuilder() { }
-
-        public override MethodAttributes Attributes { get { throw null; } }
-
-        public override CallingConventions CallingConvention { get { throw null; } }
-
-        public override bool ContainsGenericParameters { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public bool InitLocals { get { throw null; } set { } }
-
-        public override bool IsGenericMethod { get { throw null; } }
-
-        public override bool IsGenericMethodDefinition { get { throw null; } }
-
-        public override MethodImplAttributes MethodImplementationFlags { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override ParameterInfo ReturnParameter { get { throw null; } }
-
-        public override Type ReturnType { get { throw null; } }
-
-        public GenericTypeParameterBuilder[] DefineGenericParameters(params string[] names) { throw null; }
-
-        public ParameterBuilder DefineParameter(int position, ParameterAttributes attributes, string strParamName) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override Type[] GetGenericArguments() { throw null; }
-
-        public override MethodInfo GetGenericMethodDefinition() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public ILGenerator GetILGenerator() { throw null; }
-
-        public ILGenerator GetILGenerator(int size) { throw null; }
-
-        public override ParameterInfo[] GetParameters() { throw null; }
-
-        public override MethodInfo MakeGenericMethod(params Type[] typeArguments) { throw null; }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-
-        public void SetImplementationFlags(MethodImplAttributes attributes) { }
-
-        public void SetParameters(params Type[] parameterTypes) { }
-
-        public void SetReturnType(Type returnType) { }
-
-        public void SetSignature(Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class ModuleBuilder : Module
-    {
-        internal ModuleBuilder() { }
-
-        public override Assembly Assembly { get { throw null; } }
-
-        public override string FullyQualifiedName { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public void CreateGlobalFunctions() { }
-
-        public EnumBuilder DefineEnum(string name, TypeAttributes visibility, Type underlyingType) { throw null; }
-
-        public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers) { throw null; }
-
-        public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public FieldBuilder DefineInitializedData(string name, byte[] data, FieldAttributes attributes) { throw null; }
-
-        public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, int typesize) { throw null; }
-
-        public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packingSize, int typesize) { throw null; }
-
-        public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packsize) { throw null; }
-
-        public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces) { throw null; }
-
-        public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent) { throw null; }
-
-        public TypeBuilder DefineType(string name, TypeAttributes attr) { throw null; }
-
-        public TypeBuilder DefineType(string name) { throw null; }
-
-        public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public MethodInfo GetArrayMethod(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-    }
-
-    public sealed partial class PropertyBuilder : PropertyInfo
-    {
-        internal PropertyBuilder() { }
-
-        public override PropertyAttributes Attributes { get { throw null; } }
-
-        public override bool CanRead { get { throw null; } }
-
-        public override bool CanWrite { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override Type PropertyType { get { throw null; } }
-
-        public void AddOtherMethod(MethodBuilder mdBuilder) { }
-
-        public override ParameterInfo[] GetIndexParameters() { throw null; }
-
-        public override object GetValue(object obj, object[] index) { throw null; }
-
-        public void SetConstant(object defaultValue) { }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-
-        public void SetGetMethod(MethodBuilder mdBuilder) { }
-
-        public void SetSetMethod(MethodBuilder mdBuilder) { }
-
-        public override void SetValue(object obj, object value, object[] index) { }
-    }
-
-    public sealed partial class TypeBuilder : TypeInfo
-    {
-        internal TypeBuilder() { }
-
-        public const int UnspecifiedTypeSize = 0;
-        public override Assembly Assembly { get { throw null; } }
-
-        public override string AssemblyQualifiedName { get { throw null; } }
-
-        public override TypeAttributes Attributes { get { throw null; } }
-
-        public override Type BaseType { get { throw null; } }
-
-        public override bool ContainsGenericParameters { get { throw null; } }
-
-        public override MethodBase DeclaringMethod { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public override string FullName { get { throw null; } }
-
-        public override GenericParameterAttributes GenericParameterAttributes { get { throw null; } }
-
-        public override int GenericParameterPosition { get { throw null; } }
-
-        public override Type[] GenericTypeArguments { get { throw null; } }
-
-        public override Guid GUID { get { throw null; } }
-
-        public override bool IsEnum { get { throw null; } }
-
-        public override bool IsGenericParameter { get { throw null; } }
-
-        public override bool IsGenericType { get { throw null; } }
-
-        public override bool IsGenericTypeDefinition { get { throw null; } }
-
-        public override bool IsSerializable { get { throw null; } }
-
-        public override Module Module { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override string Namespace { get { throw null; } }
-
-        public PackingSize PackingSize { get { throw null; } }
-
-        public int Size { get { throw null; } }
-
-        public void AddInterfaceImplementation(Type interfaceType) { }
-
-        public TypeInfo CreateTypeInfo() { throw null; }
-
-        public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers) { throw null; }
-
-        public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes) { throw null; }
-
-        public ConstructorBuilder DefineDefaultConstructor(MethodAttributes attributes) { throw null; }
-
-        public EventBuilder DefineEvent(string name, EventAttributes attributes, Type eventtype) { throw null; }
-
-        public FieldBuilder DefineField(string fieldName, Type type, FieldAttributes attributes) { throw null; }
-
-        public FieldBuilder DefineField(string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes) { throw null; }
-
-        public GenericTypeParameterBuilder[] DefineGenericParameters(params string[] names) { throw null; }
-
-        public FieldBuilder DefineInitializedData(string name, byte[] data, FieldAttributes attributes) { throw null; }
-
-        public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers) { throw null; }
-
-        public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention) { throw null; }
-
-        public MethodBuilder DefineMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public MethodBuilder DefineMethod(string name, MethodAttributes attributes) { throw null; }
-
-        public void DefineMethodOverride(MethodInfo methodInfoBody, MethodInfo methodInfoDeclaration) { }
-
-        public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, int typeSize) { throw null; }
-
-        public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, PackingSize packSize, int typeSize) { throw null; }
-
-        public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, PackingSize packSize) { throw null; }
-
-        public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces) { throw null; }
-
-        public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent) { throw null; }
-
-        public TypeBuilder DefineNestedType(string name, TypeAttributes attr) { throw null; }
-
-        public TypeBuilder DefineNestedType(string name) { throw null; }
-
-        public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers) { throw null; }
-
-        public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers) { throw null; }
-
-        public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] parameterTypes) { throw null; }
-
-        public ConstructorBuilder DefineTypeInitializer() { throw null; }
-
-        public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes) { throw null; }
-
-        public override int GetArrayRank() { throw null; }
-
-        public static ConstructorInfo GetConstructor(Type type, ConstructorInfo constructor) { throw null; }
-
-        public override Type GetElementType() { throw null; }
-
-        public static FieldInfo GetField(Type type, FieldInfo field) { throw null; }
-
-        public override Type[] GetGenericParameterConstraints() { throw null; }
-
-        public override Type GetGenericTypeDefinition() { throw null; }
-
-        public static MethodInfo GetMethod(Type type, MethodInfo method) { throw null; }
-
-        public override bool IsAssignableFrom(TypeInfo typeInfo) { throw null; }
-
-        public bool IsCreated() { throw null; }
-
-        public override Type MakeArrayType() { throw null; }
-
-        public override Type MakeArrayType(int rank) { throw null; }
-
-        public override Type MakeByRefType() { throw null; }
-
-        public override Type MakeGenericType(params Type[] typeArguments) { throw null; }
-
-        public override Type MakePointerType() { throw null; }
-
-        public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute) { }
-
-        public void SetCustomAttribute(CustomAttributeBuilder customBuilder) { }
-
-        public void SetParent(Type parent) { }
-
-        public override string ToString() { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.emit/4.7.0/system.reflection.emit.nuspec b/src/referencePackages/src/system.reflection.emit/4.7.0/system.reflection.emit.nuspec
index 16ee92d2..c3064be3 100644
--- a/src/referencePackages/src/system.reflection.emit/4.7.0/system.reflection.emit.nuspec
+++ b/src/referencePackages/src/system.reflection.emit/4.7.0/system.reflection.emit.nuspec
@@ -30,15 +30,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <copyright>© Microsoft Corporation. All rights reserved.</copyright>
     <serviceable>true</serviceable>
     <dependencies>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Reflection.Emit.ILGeneration" version="4.7.0" />
-        <dependency id="System.Reflection.Primitives" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" exclude="Compile" />
-      </group>
       <group targetFramework=".NETStandard2.0">
         <dependency id="System.Reflection.Emit.ILGeneration" version="4.7.0" />
       </group>
diff --git a/src/referencePackages/src/system.reflection.extensions/4.3.0/System.Reflection.Extensions.4.3.0.csproj b/src/referencePackages/src/system.reflection.extensions/4.3.0/System.Reflection.Extensions.4.3.0.csproj
deleted file mode 100644
index 6a245d5b..00000000
--- a/src/referencePackages/src/system.reflection.extensions/4.3.0/System.Reflection.Extensions.4.3.0.csproj
+++ /dev/null
@@ -1,15 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0</TargetFrameworks>
-    <AssemblyName>System.Reflection.Extensions</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.reflection.extensions/4.3.0/ref/netstandard1.0/System.Reflection.Extensions.cs b/src/referencePackages/src/system.reflection.extensions/4.3.0/ref/netstandard1.0/System.Reflection.Extensions.cs
deleted file mode 100644
index 6a7b7535..00000000
--- a/src/referencePackages/src/system.reflection.extensions/4.3.0/ref/netstandard1.0/System.Reflection.Extensions.cs
+++ /dev/null
@@ -1,146 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Reflection.Extensions")]
-[assembly: System.Reflection.AssemblyDescription("System.Reflection.Extensions")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Reflection.Extensions")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Reflection
-{
-    public static partial class CustomAttributeExtensions
-    {
-        public static Attribute GetCustomAttribute(this Assembly element, Type attributeType) { throw null; }
-
-        public static Attribute GetCustomAttribute(this MemberInfo element, Type attributeType, bool inherit) { throw null; }
-
-        public static Attribute GetCustomAttribute(this MemberInfo element, Type attributeType) { throw null; }
-
-        public static Attribute GetCustomAttribute(this Module element, Type attributeType) { throw null; }
-
-        public static Attribute GetCustomAttribute(this ParameterInfo element, Type attributeType, bool inherit) { throw null; }
-
-        public static Attribute GetCustomAttribute(this ParameterInfo element, Type attributeType) { throw null; }
-
-        public static T GetCustomAttribute<T>(this Assembly element)
-            where T : Attribute { throw null; }
-
-        public static T GetCustomAttribute<T>(this MemberInfo element, bool inherit)
-            where T : Attribute { throw null; }
-
-        public static T GetCustomAttribute<T>(this MemberInfo element)
-            where T : Attribute { throw null; }
-
-        public static T GetCustomAttribute<T>(this Module element)
-            where T : Attribute { throw null; }
-
-        public static T GetCustomAttribute<T>(this ParameterInfo element, bool inherit)
-            where T : Attribute { throw null; }
-
-        public static T GetCustomAttribute<T>(this ParameterInfo element)
-            where T : Attribute { throw null; }
-
-        public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this Assembly element, Type attributeType) { throw null; }
-
-        public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this Assembly element) { throw null; }
-
-        public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this MemberInfo element, bool inherit) { throw null; }
-
-        public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this MemberInfo element, Type attributeType, bool inherit) { throw null; }
-
-        public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this MemberInfo element, Type attributeType) { throw null; }
-
-        public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this MemberInfo element) { throw null; }
-
-        public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this Module element, Type attributeType) { throw null; }
-
-        public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this Module element) { throw null; }
-
-        public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this ParameterInfo element, bool inherit) { throw null; }
-
-        public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this ParameterInfo element, Type attributeType, bool inherit) { throw null; }
-
-        public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this ParameterInfo element, Type attributeType) { throw null; }
-
-        public static Collections.Generic.IEnumerable<Attribute> GetCustomAttributes(this ParameterInfo element) { throw null; }
-
-        public static Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this Assembly element)
-            where T : Attribute { throw null; }
-
-        public static Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this MemberInfo element, bool inherit)
-            where T : Attribute { throw null; }
-
-        public static Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this MemberInfo element)
-            where T : Attribute { throw null; }
-
-        public static Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this Module element)
-            where T : Attribute { throw null; }
-
-        public static Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this ParameterInfo element, bool inherit)
-            where T : Attribute { throw null; }
-
-        public static Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(this ParameterInfo element)
-            where T : Attribute { throw null; }
-
-        public static bool IsDefined(this Assembly element, Type attributeType) { throw null; }
-
-        public static bool IsDefined(this MemberInfo element, Type attributeType, bool inherit) { throw null; }
-
-        public static bool IsDefined(this MemberInfo element, Type attributeType) { throw null; }
-
-        public static bool IsDefined(this Module element, Type attributeType) { throw null; }
-
-        public static bool IsDefined(this ParameterInfo element, Type attributeType, bool inherit) { throw null; }
-
-        public static bool IsDefined(this ParameterInfo element, Type attributeType) { throw null; }
-    }
-
-    public partial struct InterfaceMapping
-    {
-        public MethodInfo[] InterfaceMethods;
-        public Type InterfaceType;
-        public MethodInfo[] TargetMethods;
-        public Type TargetType;
-    }
-
-    public static partial class RuntimeReflectionExtensions
-    {
-        public static MethodInfo GetMethodInfo(this Delegate del) { throw null; }
-
-        public static MethodInfo GetRuntimeBaseDefinition(this MethodInfo method) { throw null; }
-
-        public static EventInfo GetRuntimeEvent(this Type type, string name) { throw null; }
-
-        public static Collections.Generic.IEnumerable<EventInfo> GetRuntimeEvents(this Type type) { throw null; }
-
-        public static FieldInfo GetRuntimeField(this Type type, string name) { throw null; }
-
-        public static Collections.Generic.IEnumerable<FieldInfo> GetRuntimeFields(this Type type) { throw null; }
-
-        public static InterfaceMapping GetRuntimeInterfaceMap(this TypeInfo typeInfo, Type interfaceType) { throw null; }
-
-        public static MethodInfo GetRuntimeMethod(this Type type, string name, Type[] parameters) { throw null; }
-
-        public static Collections.Generic.IEnumerable<MethodInfo> GetRuntimeMethods(this Type type) { throw null; }
-
-        public static Collections.Generic.IEnumerable<PropertyInfo> GetRuntimeProperties(this Type type) { throw null; }
-
-        public static PropertyInfo GetRuntimeProperty(this Type type, string name) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.extensions/4.3.0/system.reflection.extensions.nuspec b/src/referencePackages/src/system.reflection.extensions/4.3.0/system.reflection.extensions.nuspec
deleted file mode 100644
index 6144604a..00000000
--- a/src/referencePackages/src/system.reflection.extensions/4.3.0/system.reflection.extensions.nuspec
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Reflection.Extensions</id>
-    <version>4.3.0</version>
-    <title>System.Reflection.Extensions</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides custom attribute extension methods for System.Reflection types.
-
-Commonly Used Types:
-System.Reflection.InterfaceMapping
-System.Reflection.CustomAttributeExtensions
-System.Reflection.RuntimeReflectionExtensions
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.metadata/5.0.0/System.Reflection.Metadata.5.0.0.csproj b/src/referencePackages/src/system.reflection.metadata/5.0.0/System.Reflection.Metadata.5.0.0.csproj
index 8a21c571..4c96beec 100644
--- a/src/referencePackages/src/system.reflection.metadata/5.0.0/System.Reflection.Metadata.5.0.0.csproj
+++ b/src/referencePackages/src/system.reflection.metadata/5.0.0/System.Reflection.Metadata.5.0.0.csproj
@@ -1,14 +1,10 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.1;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Reflection.Metadata</AssemblyName>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="System.Collections.Immutable" Version="5.0.0" />
-  </ItemGroup>
-
   <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
     <PackageReference Include="System.Collections.Immutable" Version="5.0.0" />
   </ItemGroup>
diff --git a/src/referencePackages/src/system.reflection.metadata/5.0.0/lib/netstandard1.1/System.Reflection.Metadata.cs b/src/referencePackages/src/system.reflection.metadata/5.0.0/lib/netstandard1.1/System.Reflection.Metadata.cs
deleted file mode 100644
index dc34281e..00000000
--- a/src/referencePackages/src/system.reflection.metadata/5.0.0/lib/netstandard1.1/System.Reflection.Metadata.cs
+++ /dev/null
@@ -1,5379 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Reflection.Metadata.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001004b86c4cb78549b34bab61a3b1800e23bfeb5b3ec390074041536a7e3cbd97f5f04cf0f857155a8928eaa29ebfd11cfbbad3ba70efea7bda3226c6a8d370a4cd303f714486b6ebc225985a638471e6ef571cc92a4613c00b8fa65d61ccee0cbe5f36330c9a01f4183559f1bef24cc2917c6d913e3a541333a1d05d9bed22b38cb")]
-[assembly: System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.1", FrameworkDisplayName = "")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Reflection.Metadata")]
-[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyMetadata("PreferInbox", "True")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")]
-[assembly: System.Reflection.AssemblyDescription("System.Reflection.Metadata")]
-[assembly: System.Reflection.AssemblyFileVersion("5.0.20.51904")]
-[assembly: System.Reflection.AssemblyInformationalVersion("5.0.0+cf258a14b70ad9069470a108f13765e0e5988f51")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET")]
-[assembly: System.Reflection.AssemblyTitle("System.Reflection.Metadata")]
-[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "git://github.com/dotnet/runtime")]
-[assembly: System.Reflection.AssemblyVersionAttribute("5.0.0.0")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Reflection
-{
-    [Flags]
-    public enum AssemblyFlags
-    {
-        PublicKey = 1,
-        Retargetable = 256,
-        WindowsRuntime = 512,
-        ContentTypeMask = 3584,
-        DisableJitCompileOptimizer = 16384,
-        EnableJitCompileTracking = 32768
-    }
-
-    public enum AssemblyHashAlgorithm
-    {
-        None = 0,
-        MD5 = 32771,
-        Sha1 = 32772,
-        Sha256 = 32780,
-        Sha384 = 32781,
-        Sha512 = 32782
-    }
-
-    public enum DeclarativeSecurityAction : short
-    {
-        None = 0,
-        Demand = 2,
-        Assert = 3,
-        Deny = 4,
-        PermitOnly = 5,
-        LinkDemand = 6,
-        InheritanceDemand = 7,
-        RequestMinimum = 8,
-        RequestOptional = 9,
-        RequestRefuse = 10
-    }
-
-    [Flags]
-    public enum ManifestResourceAttributes
-    {
-        Public = 1,
-        Private = 2,
-        VisibilityMask = 7
-    }
-
-    [Flags]
-    public enum MethodImportAttributes : short
-    {
-        None = 0,
-        ExactSpelling = 1,
-        CharSetAnsi = 2,
-        CharSetUnicode = 4,
-        CharSetAuto = 6,
-        CharSetMask = 6,
-        BestFitMappingEnable = 16,
-        BestFitMappingDisable = 32,
-        BestFitMappingMask = 48,
-        SetLastError = 64,
-        CallingConventionWinApi = 256,
-        CallingConventionCDecl = 512,
-        CallingConventionStdCall = 768,
-        CallingConventionThisCall = 1024,
-        CallingConventionFastCall = 1280,
-        CallingConventionMask = 1792,
-        ThrowOnUnmappableCharEnable = 4096,
-        ThrowOnUnmappableCharDisable = 8192,
-        ThrowOnUnmappableCharMask = 12288
-    }
-
-    [Flags]
-    public enum MethodSemanticsAttributes
-    {
-        Setter = 1,
-        Getter = 2,
-        Other = 4,
-        Adder = 8,
-        Remover = 16,
-        Raiser = 32
-    }
-}
-
-namespace System.Reflection.Metadata
-{
-    public readonly partial struct ArrayShape
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public ArrayShape(int rank, Collections.Immutable.ImmutableArray<int> sizes, Collections.Immutable.ImmutableArray<int> lowerBounds) { }
-
-        public Collections.Immutable.ImmutableArray<int> LowerBounds { get { throw null; } }
-
-        public int Rank { get { throw null; } }
-
-        public Collections.Immutable.ImmutableArray<int> Sizes { get { throw null; } }
-    }
-
-    public readonly partial struct AssemblyDefinition
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public StringHandle Culture { get { throw null; } }
-
-        public AssemblyFlags Flags { get { throw null; } }
-
-        public AssemblyHashAlgorithm HashAlgorithm { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-
-        public BlobHandle PublicKey { get { throw null; } }
-
-        public Version Version { get { throw null; } }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-
-        public readonly DeclarativeSecurityAttributeHandleCollection GetDeclarativeSecurityAttributes() { throw null; }
-    }
-
-    public readonly partial struct AssemblyDefinitionHandle : IEquatable<AssemblyDefinitionHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(AssemblyDefinitionHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(AssemblyDefinitionHandle left, AssemblyDefinitionHandle right) { throw null; }
-
-        public static explicit operator AssemblyDefinitionHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator AssemblyDefinitionHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(AssemblyDefinitionHandle handle) { throw null; }
-
-        public static implicit operator Handle(AssemblyDefinitionHandle handle) { throw null; }
-
-        public static bool operator !=(AssemblyDefinitionHandle left, AssemblyDefinitionHandle right) { throw null; }
-    }
-
-    public readonly partial struct AssemblyFile
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public bool ContainsMetadata { get { throw null; } }
-
-        public BlobHandle HashValue { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-    }
-
-    public readonly partial struct AssemblyFileHandle : IEquatable<AssemblyFileHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(AssemblyFileHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(AssemblyFileHandle left, AssemblyFileHandle right) { throw null; }
-
-        public static explicit operator AssemblyFileHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator AssemblyFileHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(AssemblyFileHandle handle) { throw null; }
-
-        public static implicit operator Handle(AssemblyFileHandle handle) { throw null; }
-
-        public static bool operator !=(AssemblyFileHandle left, AssemblyFileHandle right) { throw null; }
-    }
-
-    public readonly partial struct AssemblyFileHandleCollection : Collections.Generic.IReadOnlyCollection<AssemblyFileHandle>, Collections.Generic.IEnumerable<AssemblyFileHandle>, Collections.IEnumerable
-    {
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<AssemblyFileHandle> Collections.Generic.IEnumerable<AssemblyFileHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<AssemblyFileHandle>, Collections.IEnumerator, IDisposable
-        {
-            private int _dummyPrimitive;
-            public AssemblyFileHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct AssemblyReference
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public StringHandle Culture { get { throw null; } }
-
-        public AssemblyFlags Flags { get { throw null; } }
-
-        public BlobHandle HashValue { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-
-        public BlobHandle PublicKeyOrToken { get { throw null; } }
-
-        public Version Version { get { throw null; } }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-    }
-
-    public readonly partial struct AssemblyReferenceHandle : IEquatable<AssemblyReferenceHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(AssemblyReferenceHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(AssemblyReferenceHandle left, AssemblyReferenceHandle right) { throw null; }
-
-        public static explicit operator AssemblyReferenceHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator AssemblyReferenceHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(AssemblyReferenceHandle handle) { throw null; }
-
-        public static implicit operator Handle(AssemblyReferenceHandle handle) { throw null; }
-
-        public static bool operator !=(AssemblyReferenceHandle left, AssemblyReferenceHandle right) { throw null; }
-    }
-
-    public readonly partial struct AssemblyReferenceHandleCollection : Collections.Generic.IReadOnlyCollection<AssemblyReferenceHandle>, Collections.Generic.IEnumerable<AssemblyReferenceHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<AssemblyReferenceHandle> Collections.Generic.IEnumerable<AssemblyReferenceHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<AssemblyReferenceHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public AssemblyReferenceHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct Blob
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public bool IsDefault { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public readonly ArraySegment<byte> GetBytes() { throw null; }
-    }
-
-    public partial class BlobBuilder
-    {
-        public BlobBuilder(int capacity = 256) { }
-
-        protected internal int ChunkCapacity { get { throw null; } }
-
-        public int Count { get { throw null; } }
-
-        protected int FreeBytes { get { throw null; } }
-
-        public void Align(int alignment) { }
-
-        protected virtual BlobBuilder AllocateChunk(int minimalSize) { throw null; }
-
-        public void Clear() { }
-
-        public bool ContentEquals(BlobBuilder other) { throw null; }
-
-        protected void Free() { }
-
-        protected virtual void FreeChunk() { }
-
-        public Blobs GetBlobs() { throw null; }
-
-        public void LinkPrefix(BlobBuilder prefix) { }
-
-        public void LinkSuffix(BlobBuilder suffix) { }
-
-        public void PadTo(int position) { }
-
-        public Blob ReserveBytes(int byteCount) { throw null; }
-
-        public byte[] ToArray() { throw null; }
-
-        public byte[] ToArray(int start, int byteCount) { throw null; }
-
-        public Collections.Immutable.ImmutableArray<byte> ToImmutableArray() { throw null; }
-
-        public Collections.Immutable.ImmutableArray<byte> ToImmutableArray(int start, int byteCount) { throw null; }
-
-        public int TryWriteBytes(IO.Stream source, int byteCount) { throw null; }
-
-        public void WriteBoolean(bool value) { }
-
-        public void WriteByte(byte value) { }
-
-        public void WriteBytes(byte value, int byteCount) { }
-
-        public void WriteBytes(byte[] buffer, int start, int byteCount) { }
-
-        public void WriteBytes(byte[] buffer) { }
-
-        public unsafe void WriteBytes(byte* buffer, int byteCount) { }
-
-        public void WriteBytes(Collections.Immutable.ImmutableArray<byte> buffer, int start, int byteCount) { }
-
-        public void WriteBytes(Collections.Immutable.ImmutableArray<byte> buffer) { }
-
-        public void WriteCompressedInteger(int value) { }
-
-        public void WriteCompressedSignedInteger(int value) { }
-
-        public void WriteConstant(object? value) { }
-
-        public void WriteContentTo(IO.Stream destination) { }
-
-        public void WriteContentTo(BlobBuilder destination) { }
-
-        public void WriteContentTo(ref BlobWriter destination) { }
-
-        public void WriteDateTime(DateTime value) { }
-
-        public void WriteDecimal(decimal value) { }
-
-        public void WriteDouble(double value) { }
-
-        public void WriteGuid(Guid value) { }
-
-        public void WriteInt16(short value) { }
-
-        public void WriteInt16BE(short value) { }
-
-        public void WriteInt32(int value) { }
-
-        public void WriteInt32BE(int value) { }
-
-        public void WriteInt64(long value) { }
-
-        public void WriteReference(int reference, bool isSmall) { }
-
-        public void WriteSByte(sbyte value) { }
-
-        public void WriteSerializedString(string? value) { }
-
-        public void WriteSingle(float value) { }
-
-        public void WriteUInt16(ushort value) { }
-
-        public void WriteUInt16BE(ushort value) { }
-
-        public void WriteUInt32(uint value) { }
-
-        public void WriteUInt32BE(uint value) { }
-
-        public void WriteUInt64(ulong value) { }
-
-        public void WriteUserString(string value) { }
-
-        public void WriteUTF16(char[] value) { }
-
-        public void WriteUTF16(string value) { }
-
-        public void WriteUTF8(string value, bool allowUnpairedSurrogates = true) { }
-
-        public partial struct Blobs : Collections.Generic.IEnumerable<Blob>, Collections.IEnumerable, Collections.Generic.IEnumerator<Blob>, Collections.IEnumerator, IDisposable
-        {
-            public Blob Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public Blobs GetEnumerator() { throw null; }
-
-            public bool MoveNext() { throw null; }
-
-            public void Reset() { }
-
-            Collections.Generic.IEnumerator<Blob> Collections.Generic.IEnumerable<Blob>.GetEnumerator() { throw null; }
-
-            Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct BlobContentId : IEquatable<BlobContentId>
-    {
-        private readonly int _dummyPrimitive;
-        public BlobContentId(byte[] id) { }
-
-        public BlobContentId(Collections.Immutable.ImmutableArray<byte> id) { }
-
-        public BlobContentId(Guid guid, uint stamp) { }
-
-        public Guid Guid { get { throw null; } }
-
-        public bool IsDefault { get { throw null; } }
-
-        public uint Stamp { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(BlobContentId other) { throw null; }
-
-        public static BlobContentId FromHash(byte[] hashCode) { throw null; }
-
-        public static BlobContentId FromHash(Collections.Immutable.ImmutableArray<byte> hashCode) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static Func<Collections.Generic.IEnumerable<Blob>, BlobContentId> GetTimeBasedProvider() { throw null; }
-
-        public static bool operator ==(BlobContentId left, BlobContentId right) { throw null; }
-
-        public static bool operator !=(BlobContentId left, BlobContentId right) { throw null; }
-    }
-
-    public readonly partial struct BlobHandle : IEquatable<BlobHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(BlobHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(BlobHandle left, BlobHandle right) { throw null; }
-
-        public static explicit operator BlobHandle(Handle handle) { throw null; }
-
-        public static implicit operator Handle(BlobHandle handle) { throw null; }
-
-        public static bool operator !=(BlobHandle left, BlobHandle right) { throw null; }
-    }
-
-    public partial struct BlobReader
-    {
-        private object _dummy;
-        private int _dummyPrimitive;
-        public unsafe BlobReader(byte* buffer, int length) { }
-
-        public unsafe byte* CurrentPointer { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public int Offset { get { throw null; } set { } }
-
-        public int RemainingBytes { get { throw null; } }
-
-        public unsafe byte* StartPointer { get { throw null; } }
-
-        public void Align(byte alignment) { }
-
-        public int IndexOf(byte value) { throw null; }
-
-        public BlobHandle ReadBlobHandle() { throw null; }
-
-        public bool ReadBoolean() { throw null; }
-
-        public byte ReadByte() { throw null; }
-
-        public void ReadBytes(int byteCount, byte[] buffer, int bufferOffset) { }
-
-        public byte[] ReadBytes(int byteCount) { throw null; }
-
-        public char ReadChar() { throw null; }
-
-        public int ReadCompressedInteger() { throw null; }
-
-        public int ReadCompressedSignedInteger() { throw null; }
-
-        public object? ReadConstant(ConstantTypeCode typeCode) { throw null; }
-
-        public DateTime ReadDateTime() { throw null; }
-
-        public decimal ReadDecimal() { throw null; }
-
-        public double ReadDouble() { throw null; }
-
-        public Guid ReadGuid() { throw null; }
-
-        public short ReadInt16() { throw null; }
-
-        public int ReadInt32() { throw null; }
-
-        public long ReadInt64() { throw null; }
-
-        public sbyte ReadSByte() { throw null; }
-
-        public SerializationTypeCode ReadSerializationTypeCode() { throw null; }
-
-        public string? ReadSerializedString() { throw null; }
-
-        public SignatureHeader ReadSignatureHeader() { throw null; }
-
-        public SignatureTypeCode ReadSignatureTypeCode() { throw null; }
-
-        public float ReadSingle() { throw null; }
-
-        public EntityHandle ReadTypeHandle() { throw null; }
-
-        public ushort ReadUInt16() { throw null; }
-
-        public uint ReadUInt32() { throw null; }
-
-        public ulong ReadUInt64() { throw null; }
-
-        public string ReadUTF16(int byteCount) { throw null; }
-
-        public string ReadUTF8(int byteCount) { throw null; }
-
-        public void Reset() { }
-
-        public bool TryReadCompressedInteger(out int value) { throw null; }
-
-        public bool TryReadCompressedSignedInteger(out int value) { throw null; }
-    }
-
-    public partial struct BlobWriter
-    {
-        private object _dummy;
-        private int _dummyPrimitive;
-        public BlobWriter(byte[] buffer, int start, int count) { }
-
-        public BlobWriter(byte[] buffer) { }
-
-        public BlobWriter(int size) { }
-
-        public BlobWriter(Blob blob) { }
-
-        public Blob Blob { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public int Offset { get { throw null; } set { } }
-
-        public int RemainingBytes { get { throw null; } }
-
-        public void Align(int alignment) { }
-
-        public void Clear() { }
-
-        public bool ContentEquals(BlobWriter other) { throw null; }
-
-        public void PadTo(int offset) { }
-
-        public byte[] ToArray() { throw null; }
-
-        public byte[] ToArray(int start, int byteCount) { throw null; }
-
-        public Collections.Immutable.ImmutableArray<byte> ToImmutableArray() { throw null; }
-
-        public Collections.Immutable.ImmutableArray<byte> ToImmutableArray(int start, int byteCount) { throw null; }
-
-        public void WriteBoolean(bool value) { }
-
-        public void WriteByte(byte value) { }
-
-        public void WriteBytes(byte value, int byteCount) { }
-
-        public void WriteBytes(byte[] buffer, int start, int byteCount) { }
-
-        public void WriteBytes(byte[] buffer) { }
-
-        public unsafe void WriteBytes(byte* buffer, int byteCount) { }
-
-        public void WriteBytes(Collections.Immutable.ImmutableArray<byte> buffer, int start, int byteCount) { }
-
-        public void WriteBytes(Collections.Immutable.ImmutableArray<byte> buffer) { }
-
-        public int WriteBytes(IO.Stream source, int byteCount) { throw null; }
-
-        public void WriteBytes(BlobBuilder source) { }
-
-        public void WriteCompressedInteger(int value) { }
-
-        public void WriteCompressedSignedInteger(int value) { }
-
-        public void WriteConstant(object? value) { }
-
-        public void WriteDateTime(DateTime value) { }
-
-        public void WriteDecimal(decimal value) { }
-
-        public void WriteDouble(double value) { }
-
-        public void WriteGuid(Guid value) { }
-
-        public void WriteInt16(short value) { }
-
-        public void WriteInt16BE(short value) { }
-
-        public void WriteInt32(int value) { }
-
-        public void WriteInt32BE(int value) { }
-
-        public void WriteInt64(long value) { }
-
-        public void WriteReference(int reference, bool isSmall) { }
-
-        public void WriteSByte(sbyte value) { }
-
-        public void WriteSerializedString(string? str) { }
-
-        public void WriteSingle(float value) { }
-
-        public void WriteUInt16(ushort value) { }
-
-        public void WriteUInt16BE(ushort value) { }
-
-        public void WriteUInt32(uint value) { }
-
-        public void WriteUInt32BE(uint value) { }
-
-        public void WriteUInt64(ulong value) { }
-
-        public void WriteUserString(string value) { }
-
-        public void WriteUTF16(char[] value) { }
-
-        public void WriteUTF16(string value) { }
-
-        public void WriteUTF8(string value, bool allowUnpairedSurrogates) { }
-    }
-
-    public readonly partial struct Constant
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public EntityHandle Parent { get { throw null; } }
-
-        public ConstantTypeCode TypeCode { get { throw null; } }
-
-        public BlobHandle Value { get { throw null; } }
-    }
-
-    public readonly partial struct ConstantHandle : IEquatable<ConstantHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(ConstantHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(ConstantHandle left, ConstantHandle right) { throw null; }
-
-        public static explicit operator ConstantHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator ConstantHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(ConstantHandle handle) { throw null; }
-
-        public static implicit operator Handle(ConstantHandle handle) { throw null; }
-
-        public static bool operator !=(ConstantHandle left, ConstantHandle right) { throw null; }
-    }
-
-    public enum ConstantTypeCode : byte
-    {
-        Invalid = 0,
-        Boolean = 2,
-        Char = 3,
-        SByte = 4,
-        Byte = 5,
-        Int16 = 6,
-        UInt16 = 7,
-        Int32 = 8,
-        UInt32 = 9,
-        Int64 = 10,
-        UInt64 = 11,
-        Single = 12,
-        Double = 13,
-        String = 14,
-        NullReference = 18
-    }
-
-    public readonly partial struct CustomAttribute
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public EntityHandle Constructor { get { throw null; } }
-
-        public EntityHandle Parent { get { throw null; } }
-
-        public BlobHandle Value { get { throw null; } }
-
-        public readonly CustomAttributeValue<TType> DecodeValue<TType>(ICustomAttributeTypeProvider<TType> provider) { throw null; }
-    }
-
-    public readonly partial struct CustomAttributeHandle : IEquatable<CustomAttributeHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(CustomAttributeHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(CustomAttributeHandle left, CustomAttributeHandle right) { throw null; }
-
-        public static explicit operator CustomAttributeHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator CustomAttributeHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(CustomAttributeHandle handle) { throw null; }
-
-        public static implicit operator Handle(CustomAttributeHandle handle) { throw null; }
-
-        public static bool operator !=(CustomAttributeHandle left, CustomAttributeHandle right) { throw null; }
-    }
-
-    public readonly partial struct CustomAttributeHandleCollection : Collections.Generic.IReadOnlyCollection<CustomAttributeHandle>, Collections.Generic.IEnumerable<CustomAttributeHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<CustomAttributeHandle> Collections.Generic.IEnumerable<CustomAttributeHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<CustomAttributeHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public CustomAttributeHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public enum CustomAttributeNamedArgumentKind : byte
-    {
-        Field = 83,
-        Property = 84
-    }
-
-    public readonly partial struct CustomAttributeNamedArgument<TType>
-    {
-        private readonly TType _Type_k__BackingField;
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public CustomAttributeNamedArgument(string? name, CustomAttributeNamedArgumentKind kind, TType type, object? value) { }
-
-        public CustomAttributeNamedArgumentKind Kind { get { throw null; } }
-
-        public string? Name { get { throw null; } }
-
-        public TType Type { get { throw null; } }
-
-        public object? Value { get { throw null; } }
-    }
-
-    public readonly partial struct CustomAttributeTypedArgument<TType>
-    {
-        private readonly TType _Type_k__BackingField;
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public CustomAttributeTypedArgument(TType type, object? value) { }
-
-        public TType Type { get { throw null; } }
-
-        public object? Value { get { throw null; } }
-    }
-
-    public readonly partial struct CustomAttributeValue<TType>
-    {
-        private readonly Collections.Immutable.ImmutableArray<CustomAttributeTypedArgument<TType>> _FixedArguments_k__BackingField;
-        private readonly Collections.Immutable.ImmutableArray<CustomAttributeNamedArgument<TType>> _NamedArguments_k__BackingField;
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public CustomAttributeValue(Collections.Immutable.ImmutableArray<CustomAttributeTypedArgument<TType>> fixedArguments, Collections.Immutable.ImmutableArray<CustomAttributeNamedArgument<TType>> namedArguments) { }
-
-        public Collections.Immutable.ImmutableArray<CustomAttributeTypedArgument<TType>> FixedArguments { get { throw null; } }
-
-        public Collections.Immutable.ImmutableArray<CustomAttributeNamedArgument<TType>> NamedArguments { get { throw null; } }
-    }
-
-    public readonly partial struct CustomDebugInformation
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public GuidHandle Kind { get { throw null; } }
-
-        public EntityHandle Parent { get { throw null; } }
-
-        public BlobHandle Value { get { throw null; } }
-    }
-
-    public readonly partial struct CustomDebugInformationHandle : IEquatable<CustomDebugInformationHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(CustomDebugInformationHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(CustomDebugInformationHandle left, CustomDebugInformationHandle right) { throw null; }
-
-        public static explicit operator CustomDebugInformationHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator CustomDebugInformationHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(CustomDebugInformationHandle handle) { throw null; }
-
-        public static implicit operator Handle(CustomDebugInformationHandle handle) { throw null; }
-
-        public static bool operator !=(CustomDebugInformationHandle left, CustomDebugInformationHandle right) { throw null; }
-    }
-
-    public readonly partial struct CustomDebugInformationHandleCollection : Collections.Generic.IReadOnlyCollection<CustomDebugInformationHandle>, Collections.Generic.IEnumerable<CustomDebugInformationHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<CustomDebugInformationHandle> Collections.Generic.IEnumerable<CustomDebugInformationHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<CustomDebugInformationHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public CustomDebugInformationHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public sealed partial class DebugMetadataHeader
-    {
-        internal DebugMetadataHeader() { }
-
-        public MethodDefinitionHandle EntryPoint { get { throw null; } }
-
-        public Collections.Immutable.ImmutableArray<byte> Id { get { throw null; } }
-
-        public int IdStartOffset { get { throw null; } }
-    }
-
-    public readonly partial struct DeclarativeSecurityAttribute
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public DeclarativeSecurityAction Action { get { throw null; } }
-
-        public EntityHandle Parent { get { throw null; } }
-
-        public BlobHandle PermissionSet { get { throw null; } }
-    }
-
-    public readonly partial struct DeclarativeSecurityAttributeHandle : IEquatable<DeclarativeSecurityAttributeHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(DeclarativeSecurityAttributeHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(DeclarativeSecurityAttributeHandle left, DeclarativeSecurityAttributeHandle right) { throw null; }
-
-        public static explicit operator DeclarativeSecurityAttributeHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator DeclarativeSecurityAttributeHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(DeclarativeSecurityAttributeHandle handle) { throw null; }
-
-        public static implicit operator Handle(DeclarativeSecurityAttributeHandle handle) { throw null; }
-
-        public static bool operator !=(DeclarativeSecurityAttributeHandle left, DeclarativeSecurityAttributeHandle right) { throw null; }
-    }
-
-    public readonly partial struct DeclarativeSecurityAttributeHandleCollection : Collections.Generic.IReadOnlyCollection<DeclarativeSecurityAttributeHandle>, Collections.Generic.IEnumerable<DeclarativeSecurityAttributeHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<DeclarativeSecurityAttributeHandle> Collections.Generic.IEnumerable<DeclarativeSecurityAttributeHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<DeclarativeSecurityAttributeHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public DeclarativeSecurityAttributeHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct Document
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public BlobHandle Hash { get { throw null; } }
-
-        public GuidHandle HashAlgorithm { get { throw null; } }
-
-        public GuidHandle Language { get { throw null; } }
-
-        public DocumentNameBlobHandle Name { get { throw null; } }
-    }
-
-    public readonly partial struct DocumentHandle : IEquatable<DocumentHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(DocumentHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(DocumentHandle left, DocumentHandle right) { throw null; }
-
-        public static explicit operator DocumentHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator DocumentHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(DocumentHandle handle) { throw null; }
-
-        public static implicit operator Handle(DocumentHandle handle) { throw null; }
-
-        public static bool operator !=(DocumentHandle left, DocumentHandle right) { throw null; }
-    }
-
-    public readonly partial struct DocumentHandleCollection : Collections.Generic.IReadOnlyCollection<DocumentHandle>, Collections.Generic.IEnumerable<DocumentHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<DocumentHandle> Collections.Generic.IEnumerable<DocumentHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<DocumentHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public DocumentHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct DocumentNameBlobHandle : IEquatable<DocumentNameBlobHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(DocumentNameBlobHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(DocumentNameBlobHandle left, DocumentNameBlobHandle right) { throw null; }
-
-        public static explicit operator DocumentNameBlobHandle(BlobHandle handle) { throw null; }
-
-        public static implicit operator BlobHandle(DocumentNameBlobHandle handle) { throw null; }
-
-        public static bool operator !=(DocumentNameBlobHandle left, DocumentNameBlobHandle right) { throw null; }
-    }
-
-    public readonly partial struct EntityHandle : IEquatable<EntityHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public static readonly AssemblyDefinitionHandle AssemblyDefinition;
-        public static readonly ModuleDefinitionHandle ModuleDefinition;
-        public bool IsNil { get { throw null; } }
-
-        public HandleKind Kind { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(EntityHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(EntityHandle left, EntityHandle right) { throw null; }
-
-        public static explicit operator EntityHandle(Handle handle) { throw null; }
-
-        public static implicit operator Handle(EntityHandle handle) { throw null; }
-
-        public static bool operator !=(EntityHandle left, EntityHandle right) { throw null; }
-    }
-
-    public readonly partial struct EventAccessors
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public MethodDefinitionHandle Adder { get { throw null; } }
-
-        public Collections.Immutable.ImmutableArray<MethodDefinitionHandle> Others { get { throw null; } }
-
-        public MethodDefinitionHandle Raiser { get { throw null; } }
-
-        public MethodDefinitionHandle Remover { get { throw null; } }
-    }
-
-    public readonly partial struct EventDefinition
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public EventAttributes Attributes { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-
-        public EntityHandle Type { get { throw null; } }
-
-        public readonly EventAccessors GetAccessors() { throw null; }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-    }
-
-    public readonly partial struct EventDefinitionHandle : IEquatable<EventDefinitionHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(EventDefinitionHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(EventDefinitionHandle left, EventDefinitionHandle right) { throw null; }
-
-        public static explicit operator EventDefinitionHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator EventDefinitionHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(EventDefinitionHandle handle) { throw null; }
-
-        public static implicit operator Handle(EventDefinitionHandle handle) { throw null; }
-
-        public static bool operator !=(EventDefinitionHandle left, EventDefinitionHandle right) { throw null; }
-    }
-
-    public readonly partial struct EventDefinitionHandleCollection : Collections.Generic.IReadOnlyCollection<EventDefinitionHandle>, Collections.Generic.IEnumerable<EventDefinitionHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<EventDefinitionHandle> Collections.Generic.IEnumerable<EventDefinitionHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<EventDefinitionHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public EventDefinitionHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct ExceptionRegion
-    {
-        private readonly int _dummyPrimitive;
-        public EntityHandle CatchType { get { throw null; } }
-
-        public int FilterOffset { get { throw null; } }
-
-        public int HandlerLength { get { throw null; } }
-
-        public int HandlerOffset { get { throw null; } }
-
-        public ExceptionRegionKind Kind { get { throw null; } }
-
-        public int TryLength { get { throw null; } }
-
-        public int TryOffset { get { throw null; } }
-    }
-
-    public enum ExceptionRegionKind : ushort
-    {
-        Catch = 0,
-        Filter = 1,
-        Finally = 2,
-        Fault = 4
-    }
-
-    public readonly partial struct ExportedType
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public TypeAttributes Attributes { get { throw null; } }
-
-        public EntityHandle Implementation { get { throw null; } }
-
-        public bool IsForwarder { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-
-        public StringHandle Namespace { get { throw null; } }
-
-        public NamespaceDefinitionHandle NamespaceDefinition { get { throw null; } }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-    }
-
-    public readonly partial struct ExportedTypeHandle : IEquatable<ExportedTypeHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(ExportedTypeHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(ExportedTypeHandle left, ExportedTypeHandle right) { throw null; }
-
-        public static explicit operator ExportedTypeHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator ExportedTypeHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(ExportedTypeHandle handle) { throw null; }
-
-        public static implicit operator Handle(ExportedTypeHandle handle) { throw null; }
-
-        public static bool operator !=(ExportedTypeHandle left, ExportedTypeHandle right) { throw null; }
-    }
-
-    public readonly partial struct ExportedTypeHandleCollection : Collections.Generic.IReadOnlyCollection<ExportedTypeHandle>, Collections.Generic.IEnumerable<ExportedTypeHandle>, Collections.IEnumerable
-    {
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<ExportedTypeHandle> Collections.Generic.IEnumerable<ExportedTypeHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<ExportedTypeHandle>, Collections.IEnumerator, IDisposable
-        {
-            private int _dummyPrimitive;
-            public ExportedTypeHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct FieldDefinition
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public FieldAttributes Attributes { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-
-        public BlobHandle Signature { get { throw null; } }
-
-        public readonly TType DecodeSignature<TType, TGenericContext>(ISignatureTypeProvider<TType, TGenericContext> provider, TGenericContext genericContext) { throw null; }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-
-        public readonly TypeDefinitionHandle GetDeclaringType() { throw null; }
-
-        public readonly ConstantHandle GetDefaultValue() { throw null; }
-
-        public readonly BlobHandle GetMarshallingDescriptor() { throw null; }
-
-        public readonly int GetOffset() { throw null; }
-
-        public readonly int GetRelativeVirtualAddress() { throw null; }
-    }
-
-    public readonly partial struct FieldDefinitionHandle : IEquatable<FieldDefinitionHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(FieldDefinitionHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(FieldDefinitionHandle left, FieldDefinitionHandle right) { throw null; }
-
-        public static explicit operator FieldDefinitionHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator FieldDefinitionHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(FieldDefinitionHandle handle) { throw null; }
-
-        public static implicit operator Handle(FieldDefinitionHandle handle) { throw null; }
-
-        public static bool operator !=(FieldDefinitionHandle left, FieldDefinitionHandle right) { throw null; }
-    }
-
-    public readonly partial struct FieldDefinitionHandleCollection : Collections.Generic.IReadOnlyCollection<FieldDefinitionHandle>, Collections.Generic.IEnumerable<FieldDefinitionHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<FieldDefinitionHandle> Collections.Generic.IEnumerable<FieldDefinitionHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<FieldDefinitionHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public FieldDefinitionHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct GenericParameter
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public GenericParameterAttributes Attributes { get { throw null; } }
-
-        public int Index { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-
-        public EntityHandle Parent { get { throw null; } }
-
-        public readonly GenericParameterConstraintHandleCollection GetConstraints() { throw null; }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-    }
-
-    public readonly partial struct GenericParameterConstraint
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public GenericParameterHandle Parameter { get { throw null; } }
-
-        public EntityHandle Type { get { throw null; } }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-    }
-
-    public readonly partial struct GenericParameterConstraintHandle : IEquatable<GenericParameterConstraintHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(GenericParameterConstraintHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(GenericParameterConstraintHandle left, GenericParameterConstraintHandle right) { throw null; }
-
-        public static explicit operator GenericParameterConstraintHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator GenericParameterConstraintHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(GenericParameterConstraintHandle handle) { throw null; }
-
-        public static implicit operator Handle(GenericParameterConstraintHandle handle) { throw null; }
-
-        public static bool operator !=(GenericParameterConstraintHandle left, GenericParameterConstraintHandle right) { throw null; }
-    }
-
-    public readonly partial struct GenericParameterConstraintHandleCollection : Collections.Generic.IReadOnlyList<GenericParameterConstraintHandle>, Collections.Generic.IReadOnlyCollection<GenericParameterConstraintHandle>, Collections.Generic.IEnumerable<GenericParameterConstraintHandle>, Collections.IEnumerable
-    {
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public GenericParameterConstraintHandle this[int index] { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<GenericParameterConstraintHandle> Collections.Generic.IEnumerable<GenericParameterConstraintHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<GenericParameterConstraintHandle>, Collections.IEnumerator, IDisposable
-        {
-            private int _dummyPrimitive;
-            public GenericParameterConstraintHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct GenericParameterHandle : IEquatable<GenericParameterHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(GenericParameterHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(GenericParameterHandle left, GenericParameterHandle right) { throw null; }
-
-        public static explicit operator GenericParameterHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator GenericParameterHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(GenericParameterHandle handle) { throw null; }
-
-        public static implicit operator Handle(GenericParameterHandle handle) { throw null; }
-
-        public static bool operator !=(GenericParameterHandle left, GenericParameterHandle right) { throw null; }
-    }
-
-    public readonly partial struct GenericParameterHandleCollection : Collections.Generic.IReadOnlyList<GenericParameterHandle>, Collections.Generic.IReadOnlyCollection<GenericParameterHandle>, Collections.Generic.IEnumerable<GenericParameterHandle>, Collections.IEnumerable
-    {
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public GenericParameterHandle this[int index] { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<GenericParameterHandle> Collections.Generic.IEnumerable<GenericParameterHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<GenericParameterHandle>, Collections.IEnumerator, IDisposable
-        {
-            private int _dummyPrimitive;
-            public GenericParameterHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct GuidHandle : IEquatable<GuidHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(GuidHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(GuidHandle left, GuidHandle right) { throw null; }
-
-        public static explicit operator GuidHandle(Handle handle) { throw null; }
-
-        public static implicit operator Handle(GuidHandle handle) { throw null; }
-
-        public static bool operator !=(GuidHandle left, GuidHandle right) { throw null; }
-    }
-
-    public readonly partial struct Handle : IEquatable<Handle>
-    {
-        private readonly int _dummyPrimitive;
-        public static readonly AssemblyDefinitionHandle AssemblyDefinition;
-        public static readonly ModuleDefinitionHandle ModuleDefinition;
-        public bool IsNil { get { throw null; } }
-
-        public HandleKind Kind { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(Handle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(Handle left, Handle right) { throw null; }
-
-        public static bool operator !=(Handle left, Handle right) { throw null; }
-    }
-
-    public sealed partial class HandleComparer : Collections.Generic.IEqualityComparer<Handle>, Collections.Generic.IComparer<Handle>, Collections.Generic.IEqualityComparer<EntityHandle>, Collections.Generic.IComparer<EntityHandle>
-    {
-        internal HandleComparer() { }
-
-        public static HandleComparer Default { get { throw null; } }
-
-        public int Compare(EntityHandle x, EntityHandle y) { throw null; }
-
-        public int Compare(Handle x, Handle y) { throw null; }
-
-        public bool Equals(EntityHandle x, EntityHandle y) { throw null; }
-
-        public bool Equals(Handle x, Handle y) { throw null; }
-
-        public int GetHashCode(EntityHandle obj) { throw null; }
-
-        public int GetHashCode(Handle obj) { throw null; }
-    }
-
-    public enum HandleKind : byte
-    {
-        ModuleDefinition = 0,
-        TypeReference = 1,
-        TypeDefinition = 2,
-        FieldDefinition = 4,
-        MethodDefinition = 6,
-        Parameter = 8,
-        InterfaceImplementation = 9,
-        MemberReference = 10,
-        Constant = 11,
-        CustomAttribute = 12,
-        DeclarativeSecurityAttribute = 14,
-        StandaloneSignature = 17,
-        EventDefinition = 20,
-        PropertyDefinition = 23,
-        MethodImplementation = 25,
-        ModuleReference = 26,
-        TypeSpecification = 27,
-        AssemblyDefinition = 32,
-        AssemblyReference = 35,
-        AssemblyFile = 38,
-        ExportedType = 39,
-        ManifestResource = 40,
-        GenericParameter = 42,
-        MethodSpecification = 43,
-        GenericParameterConstraint = 44,
-        Document = 48,
-        MethodDebugInformation = 49,
-        LocalScope = 50,
-        LocalVariable = 51,
-        LocalConstant = 52,
-        ImportScope = 53,
-        CustomDebugInformation = 55,
-        UserString = 112,
-        Blob = 113,
-        Guid = 114,
-        String = 120,
-        NamespaceDefinition = 124
-    }
-
-    public partial interface IConstructedTypeProvider<TType> : ISZArrayTypeProvider<TType>
-    {
-        TType GetArrayType(TType elementType, ArrayShape shape);
-        TType GetByReferenceType(TType elementType);
-        TType GetGenericInstantiation(TType genericType, Collections.Immutable.ImmutableArray<TType> typeArguments);
-        TType GetPointerType(TType elementType);
-    }
-
-    public partial interface ICustomAttributeTypeProvider<TType> : ISimpleTypeProvider<TType>, ISZArrayTypeProvider<TType>
-    {
-        TType GetSystemType();
-        TType GetTypeFromSerializedName(string name);
-        PrimitiveTypeCode GetUnderlyingEnumType(TType type);
-        bool IsSystemType(TType type);
-    }
-
-    public enum ILOpCode : ushort
-    {
-        Nop = 0,
-        Break = 1,
-        Ldarg_0 = 2,
-        Ldarg_1 = 3,
-        Ldarg_2 = 4,
-        Ldarg_3 = 5,
-        Ldloc_0 = 6,
-        Ldloc_1 = 7,
-        Ldloc_2 = 8,
-        Ldloc_3 = 9,
-        Stloc_0 = 10,
-        Stloc_1 = 11,
-        Stloc_2 = 12,
-        Stloc_3 = 13,
-        Ldarg_s = 14,
-        Ldarga_s = 15,
-        Starg_s = 16,
-        Ldloc_s = 17,
-        Ldloca_s = 18,
-        Stloc_s = 19,
-        Ldnull = 20,
-        Ldc_i4_m1 = 21,
-        Ldc_i4_0 = 22,
-        Ldc_i4_1 = 23,
-        Ldc_i4_2 = 24,
-        Ldc_i4_3 = 25,
-        Ldc_i4_4 = 26,
-        Ldc_i4_5 = 27,
-        Ldc_i4_6 = 28,
-        Ldc_i4_7 = 29,
-        Ldc_i4_8 = 30,
-        Ldc_i4_s = 31,
-        Ldc_i4 = 32,
-        Ldc_i8 = 33,
-        Ldc_r4 = 34,
-        Ldc_r8 = 35,
-        Dup = 37,
-        Pop = 38,
-        Jmp = 39,
-        Call = 40,
-        Calli = 41,
-        Ret = 42,
-        Br_s = 43,
-        Brfalse_s = 44,
-        Brtrue_s = 45,
-        Beq_s = 46,
-        Bge_s = 47,
-        Bgt_s = 48,
-        Ble_s = 49,
-        Blt_s = 50,
-        Bne_un_s = 51,
-        Bge_un_s = 52,
-        Bgt_un_s = 53,
-        Ble_un_s = 54,
-        Blt_un_s = 55,
-        Br = 56,
-        Brfalse = 57,
-        Brtrue = 58,
-        Beq = 59,
-        Bge = 60,
-        Bgt = 61,
-        Ble = 62,
-        Blt = 63,
-        Bne_un = 64,
-        Bge_un = 65,
-        Bgt_un = 66,
-        Ble_un = 67,
-        Blt_un = 68,
-        Switch = 69,
-        Ldind_i1 = 70,
-        Ldind_u1 = 71,
-        Ldind_i2 = 72,
-        Ldind_u2 = 73,
-        Ldind_i4 = 74,
-        Ldind_u4 = 75,
-        Ldind_i8 = 76,
-        Ldind_i = 77,
-        Ldind_r4 = 78,
-        Ldind_r8 = 79,
-        Ldind_ref = 80,
-        Stind_ref = 81,
-        Stind_i1 = 82,
-        Stind_i2 = 83,
-        Stind_i4 = 84,
-        Stind_i8 = 85,
-        Stind_r4 = 86,
-        Stind_r8 = 87,
-        Add = 88,
-        Sub = 89,
-        Mul = 90,
-        Div = 91,
-        Div_un = 92,
-        Rem = 93,
-        Rem_un = 94,
-        And = 95,
-        Or = 96,
-        Xor = 97,
-        Shl = 98,
-        Shr = 99,
-        Shr_un = 100,
-        Neg = 101,
-        Not = 102,
-        Conv_i1 = 103,
-        Conv_i2 = 104,
-        Conv_i4 = 105,
-        Conv_i8 = 106,
-        Conv_r4 = 107,
-        Conv_r8 = 108,
-        Conv_u4 = 109,
-        Conv_u8 = 110,
-        Callvirt = 111,
-        Cpobj = 112,
-        Ldobj = 113,
-        Ldstr = 114,
-        Newobj = 115,
-        Castclass = 116,
-        Isinst = 117,
-        Conv_r_un = 118,
-        Unbox = 121,
-        Throw = 122,
-        Ldfld = 123,
-        Ldflda = 124,
-        Stfld = 125,
-        Ldsfld = 126,
-        Ldsflda = 127,
-        Stsfld = 128,
-        Stobj = 129,
-        Conv_ovf_i1_un = 130,
-        Conv_ovf_i2_un = 131,
-        Conv_ovf_i4_un = 132,
-        Conv_ovf_i8_un = 133,
-        Conv_ovf_u1_un = 134,
-        Conv_ovf_u2_un = 135,
-        Conv_ovf_u4_un = 136,
-        Conv_ovf_u8_un = 137,
-        Conv_ovf_i_un = 138,
-        Conv_ovf_u_un = 139,
-        Box = 140,
-        Newarr = 141,
-        Ldlen = 142,
-        Ldelema = 143,
-        Ldelem_i1 = 144,
-        Ldelem_u1 = 145,
-        Ldelem_i2 = 146,
-        Ldelem_u2 = 147,
-        Ldelem_i4 = 148,
-        Ldelem_u4 = 149,
-        Ldelem_i8 = 150,
-        Ldelem_i = 151,
-        Ldelem_r4 = 152,
-        Ldelem_r8 = 153,
-        Ldelem_ref = 154,
-        Stelem_i = 155,
-        Stelem_i1 = 156,
-        Stelem_i2 = 157,
-        Stelem_i4 = 158,
-        Stelem_i8 = 159,
-        Stelem_r4 = 160,
-        Stelem_r8 = 161,
-        Stelem_ref = 162,
-        Ldelem = 163,
-        Stelem = 164,
-        Unbox_any = 165,
-        Conv_ovf_i1 = 179,
-        Conv_ovf_u1 = 180,
-        Conv_ovf_i2 = 181,
-        Conv_ovf_u2 = 182,
-        Conv_ovf_i4 = 183,
-        Conv_ovf_u4 = 184,
-        Conv_ovf_i8 = 185,
-        Conv_ovf_u8 = 186,
-        Refanyval = 194,
-        Ckfinite = 195,
-        Mkrefany = 198,
-        Ldtoken = 208,
-        Conv_u2 = 209,
-        Conv_u1 = 210,
-        Conv_i = 211,
-        Conv_ovf_i = 212,
-        Conv_ovf_u = 213,
-        Add_ovf = 214,
-        Add_ovf_un = 215,
-        Mul_ovf = 216,
-        Mul_ovf_un = 217,
-        Sub_ovf = 218,
-        Sub_ovf_un = 219,
-        Endfinally = 220,
-        Leave = 221,
-        Leave_s = 222,
-        Stind_i = 223,
-        Conv_u = 224,
-        Arglist = 65024,
-        Ceq = 65025,
-        Cgt = 65026,
-        Cgt_un = 65027,
-        Clt = 65028,
-        Clt_un = 65029,
-        Ldftn = 65030,
-        Ldvirtftn = 65031,
-        Ldarg = 65033,
-        Ldarga = 65034,
-        Starg = 65035,
-        Ldloc = 65036,
-        Ldloca = 65037,
-        Stloc = 65038,
-        Localloc = 65039,
-        Endfilter = 65041,
-        Unaligned = 65042,
-        Volatile = 65043,
-        Tail = 65044,
-        Initobj = 65045,
-        Constrained = 65046,
-        Cpblk = 65047,
-        Initblk = 65048,
-        Rethrow = 65050,
-        Sizeof = 65052,
-        Refanytype = 65053,
-        Readonly = 65054
-    }
-
-    public static partial class ILOpCodeExtensions
-    {
-        public static int GetBranchOperandSize(this ILOpCode opCode) { throw null; }
-
-        public static ILOpCode GetLongBranch(this ILOpCode opCode) { throw null; }
-
-        public static ILOpCode GetShortBranch(this ILOpCode opCode) { throw null; }
-
-        public static bool IsBranch(this ILOpCode opCode) { throw null; }
-    }
-
-    public partial class ImageFormatLimitationException : Exception
-    {
-        public ImageFormatLimitationException() { }
-
-        public ImageFormatLimitationException(string? message, Exception? innerException) { }
-
-        public ImageFormatLimitationException(string? message) { }
-    }
-
-    public readonly partial struct ImportDefinition
-    {
-        private readonly int _dummyPrimitive;
-        public BlobHandle Alias { get { throw null; } }
-
-        public ImportDefinitionKind Kind { get { throw null; } }
-
-        public AssemblyReferenceHandle TargetAssembly { get { throw null; } }
-
-        public BlobHandle TargetNamespace { get { throw null; } }
-
-        public EntityHandle TargetType { get { throw null; } }
-    }
-
-    public readonly partial struct ImportDefinitionCollection : Collections.Generic.IEnumerable<ImportDefinition>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<ImportDefinition> Collections.Generic.IEnumerable<ImportDefinition>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<ImportDefinition>, Collections.IEnumerator, IDisposable
-        {
-            private int _dummyPrimitive;
-            public ImportDefinition Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            public void Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public enum ImportDefinitionKind
-    {
-        ImportNamespace = 1,
-        ImportAssemblyNamespace = 2,
-        ImportType = 3,
-        ImportXmlNamespace = 4,
-        ImportAssemblyReferenceAlias = 5,
-        AliasAssemblyReference = 6,
-        AliasNamespace = 7,
-        AliasAssemblyNamespace = 8,
-        AliasType = 9
-    }
-
-    public readonly partial struct ImportScope
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public BlobHandle ImportsBlob { get { throw null; } }
-
-        public ImportScopeHandle Parent { get { throw null; } }
-
-        public readonly ImportDefinitionCollection GetImports() { throw null; }
-    }
-
-    public readonly partial struct ImportScopeCollection : Collections.Generic.IReadOnlyCollection<ImportScopeHandle>, Collections.Generic.IEnumerable<ImportScopeHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<ImportScopeHandle> Collections.Generic.IEnumerable<ImportScopeHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<ImportScopeHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public ImportScopeHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct ImportScopeHandle : IEquatable<ImportScopeHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(ImportScopeHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(ImportScopeHandle left, ImportScopeHandle right) { throw null; }
-
-        public static explicit operator ImportScopeHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator ImportScopeHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(ImportScopeHandle handle) { throw null; }
-
-        public static implicit operator Handle(ImportScopeHandle handle) { throw null; }
-
-        public static bool operator !=(ImportScopeHandle left, ImportScopeHandle right) { throw null; }
-    }
-
-    public readonly partial struct InterfaceImplementation
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public EntityHandle Interface { get { throw null; } }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-    }
-
-    public readonly partial struct InterfaceImplementationHandle : IEquatable<InterfaceImplementationHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(InterfaceImplementationHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(InterfaceImplementationHandle left, InterfaceImplementationHandle right) { throw null; }
-
-        public static explicit operator InterfaceImplementationHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator InterfaceImplementationHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(InterfaceImplementationHandle handle) { throw null; }
-
-        public static implicit operator Handle(InterfaceImplementationHandle handle) { throw null; }
-
-        public static bool operator !=(InterfaceImplementationHandle left, InterfaceImplementationHandle right) { throw null; }
-    }
-
-    public readonly partial struct InterfaceImplementationHandleCollection : Collections.Generic.IReadOnlyCollection<InterfaceImplementationHandle>, Collections.Generic.IEnumerable<InterfaceImplementationHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<InterfaceImplementationHandle> Collections.Generic.IEnumerable<InterfaceImplementationHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<InterfaceImplementationHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public InterfaceImplementationHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public partial interface ISignatureTypeProvider<TType, TGenericContext> : ISimpleTypeProvider<TType>, IConstructedTypeProvider<TType>, ISZArrayTypeProvider<TType>
-    {
-        TType GetFunctionPointerType(MethodSignature<TType> signature);
-        TType GetGenericMethodParameter(TGenericContext genericContext, int index);
-        TType GetGenericTypeParameter(TGenericContext genericContext, int index);
-        TType GetModifiedType(TType modifier, TType unmodifiedType, bool isRequired);
-        TType GetPinnedType(TType elementType);
-        TType GetTypeFromSpecification(MetadataReader reader, TGenericContext genericContext, TypeSpecificationHandle handle, byte rawTypeKind);
-    }
-
-    public partial interface ISimpleTypeProvider<TType>
-    {
-        TType GetPrimitiveType(PrimitiveTypeCode typeCode);
-        TType GetTypeFromDefinition(MetadataReader reader, TypeDefinitionHandle handle, byte rawTypeKind);
-        TType GetTypeFromReference(MetadataReader reader, TypeReferenceHandle handle, byte rawTypeKind);
-    }
-
-    public partial interface ISZArrayTypeProvider<TType>
-    {
-        TType GetSZArrayType(TType elementType);
-    }
-
-    public readonly partial struct LocalConstant
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public StringHandle Name { get { throw null; } }
-
-        public BlobHandle Signature { get { throw null; } }
-    }
-
-    public readonly partial struct LocalConstantHandle : IEquatable<LocalConstantHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(LocalConstantHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(LocalConstantHandle left, LocalConstantHandle right) { throw null; }
-
-        public static explicit operator LocalConstantHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator LocalConstantHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(LocalConstantHandle handle) { throw null; }
-
-        public static implicit operator Handle(LocalConstantHandle handle) { throw null; }
-
-        public static bool operator !=(LocalConstantHandle left, LocalConstantHandle right) { throw null; }
-    }
-
-    public readonly partial struct LocalConstantHandleCollection : Collections.Generic.IReadOnlyCollection<LocalConstantHandle>, Collections.Generic.IEnumerable<LocalConstantHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<LocalConstantHandle> Collections.Generic.IEnumerable<LocalConstantHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<LocalConstantHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public LocalConstantHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct LocalScope
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int EndOffset { get { throw null; } }
-
-        public ImportScopeHandle ImportScope { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public MethodDefinitionHandle Method { get { throw null; } }
-
-        public int StartOffset { get { throw null; } }
-
-        public readonly LocalScopeHandleCollection.ChildrenEnumerator GetChildren() { throw null; }
-
-        public readonly LocalConstantHandleCollection GetLocalConstants() { throw null; }
-
-        public readonly LocalVariableHandleCollection GetLocalVariables() { throw null; }
-    }
-
-    public readonly partial struct LocalScopeHandle : IEquatable<LocalScopeHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(LocalScopeHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(LocalScopeHandle left, LocalScopeHandle right) { throw null; }
-
-        public static explicit operator LocalScopeHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator LocalScopeHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(LocalScopeHandle handle) { throw null; }
-
-        public static implicit operator Handle(LocalScopeHandle handle) { throw null; }
-
-        public static bool operator !=(LocalScopeHandle left, LocalScopeHandle right) { throw null; }
-    }
-
-    public readonly partial struct LocalScopeHandleCollection : Collections.Generic.IReadOnlyCollection<LocalScopeHandle>, Collections.Generic.IEnumerable<LocalScopeHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<LocalScopeHandle> Collections.Generic.IEnumerable<LocalScopeHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct ChildrenEnumerator : Collections.Generic.IEnumerator<LocalScopeHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public LocalScopeHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<LocalScopeHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public LocalScopeHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct LocalVariable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public LocalVariableAttributes Attributes { get { throw null; } }
-
-        public int Index { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-    }
-
-    [Flags]
-    public enum LocalVariableAttributes
-    {
-        None = 0,
-        DebuggerHidden = 1
-    }
-
-    public readonly partial struct LocalVariableHandle : IEquatable<LocalVariableHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(LocalVariableHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(LocalVariableHandle left, LocalVariableHandle right) { throw null; }
-
-        public static explicit operator LocalVariableHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator LocalVariableHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(LocalVariableHandle handle) { throw null; }
-
-        public static implicit operator Handle(LocalVariableHandle handle) { throw null; }
-
-        public static bool operator !=(LocalVariableHandle left, LocalVariableHandle right) { throw null; }
-    }
-
-    public readonly partial struct LocalVariableHandleCollection : Collections.Generic.IReadOnlyCollection<LocalVariableHandle>, Collections.Generic.IEnumerable<LocalVariableHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<LocalVariableHandle> Collections.Generic.IEnumerable<LocalVariableHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<LocalVariableHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public LocalVariableHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct ManifestResource
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public ManifestResourceAttributes Attributes { get { throw null; } }
-
-        public EntityHandle Implementation { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-
-        public long Offset { get { throw null; } }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-    }
-
-    public readonly partial struct ManifestResourceHandle : IEquatable<ManifestResourceHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(ManifestResourceHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(ManifestResourceHandle left, ManifestResourceHandle right) { throw null; }
-
-        public static explicit operator ManifestResourceHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator ManifestResourceHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(ManifestResourceHandle handle) { throw null; }
-
-        public static implicit operator Handle(ManifestResourceHandle handle) { throw null; }
-
-        public static bool operator !=(ManifestResourceHandle left, ManifestResourceHandle right) { throw null; }
-    }
-
-    public readonly partial struct ManifestResourceHandleCollection : Collections.Generic.IReadOnlyCollection<ManifestResourceHandle>, Collections.Generic.IEnumerable<ManifestResourceHandle>, Collections.IEnumerable
-    {
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<ManifestResourceHandle> Collections.Generic.IEnumerable<ManifestResourceHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<ManifestResourceHandle>, Collections.IEnumerator, IDisposable
-        {
-            private int _dummyPrimitive;
-            public ManifestResourceHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct MemberReference
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public StringHandle Name { get { throw null; } }
-
-        public EntityHandle Parent { get { throw null; } }
-
-        public BlobHandle Signature { get { throw null; } }
-
-        public readonly TType DecodeFieldSignature<TType, TGenericContext>(ISignatureTypeProvider<TType, TGenericContext> provider, TGenericContext genericContext) { throw null; }
-
-        public readonly MethodSignature<TType> DecodeMethodSignature<TType, TGenericContext>(ISignatureTypeProvider<TType, TGenericContext> provider, TGenericContext genericContext) { throw null; }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-
-        public readonly MemberReferenceKind GetKind() { throw null; }
-    }
-
-    public readonly partial struct MemberReferenceHandle : IEquatable<MemberReferenceHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(MemberReferenceHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(MemberReferenceHandle left, MemberReferenceHandle right) { throw null; }
-
-        public static explicit operator MemberReferenceHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator MemberReferenceHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(MemberReferenceHandle handle) { throw null; }
-
-        public static implicit operator Handle(MemberReferenceHandle handle) { throw null; }
-
-        public static bool operator !=(MemberReferenceHandle left, MemberReferenceHandle right) { throw null; }
-    }
-
-    public readonly partial struct MemberReferenceHandleCollection : Collections.Generic.IReadOnlyCollection<MemberReferenceHandle>, Collections.Generic.IEnumerable<MemberReferenceHandle>, Collections.IEnumerable
-    {
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<MemberReferenceHandle> Collections.Generic.IEnumerable<MemberReferenceHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<MemberReferenceHandle>, Collections.IEnumerator, IDisposable
-        {
-            private int _dummyPrimitive;
-            public MemberReferenceHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public enum MemberReferenceKind
-    {
-        Method = 0,
-        Field = 1
-    }
-
-    public enum MetadataKind
-    {
-        Ecma335 = 0,
-        WindowsMetadata = 1,
-        ManagedWindowsMetadata = 2
-    }
-
-    public sealed partial class MetadataReader
-    {
-        public unsafe MetadataReader(byte* metadata, int length, MetadataReaderOptions options, MetadataStringDecoder? utf8Decoder) { }
-
-        public unsafe MetadataReader(byte* metadata, int length, MetadataReaderOptions options) { }
-
-        public unsafe MetadataReader(byte* metadata, int length) { }
-
-        public AssemblyFileHandleCollection AssemblyFiles { get { throw null; } }
-
-        public AssemblyReferenceHandleCollection AssemblyReferences { get { throw null; } }
-
-        public CustomAttributeHandleCollection CustomAttributes { get { throw null; } }
-
-        public CustomDebugInformationHandleCollection CustomDebugInformation { get { throw null; } }
-
-        public DebugMetadataHeader? DebugMetadataHeader { get { throw null; } }
-
-        public DeclarativeSecurityAttributeHandleCollection DeclarativeSecurityAttributes { get { throw null; } }
-
-        public DocumentHandleCollection Documents { get { throw null; } }
-
-        public EventDefinitionHandleCollection EventDefinitions { get { throw null; } }
-
-        public ExportedTypeHandleCollection ExportedTypes { get { throw null; } }
-
-        public FieldDefinitionHandleCollection FieldDefinitions { get { throw null; } }
-
-        public ImportScopeCollection ImportScopes { get { throw null; } }
-
-        public bool IsAssembly { get { throw null; } }
-
-        public LocalConstantHandleCollection LocalConstants { get { throw null; } }
-
-        public LocalScopeHandleCollection LocalScopes { get { throw null; } }
-
-        public LocalVariableHandleCollection LocalVariables { get { throw null; } }
-
-        public ManifestResourceHandleCollection ManifestResources { get { throw null; } }
-
-        public MemberReferenceHandleCollection MemberReferences { get { throw null; } }
-
-        public MetadataKind MetadataKind { get { throw null; } }
-
-        public int MetadataLength { get { throw null; } }
-
-        public unsafe byte* MetadataPointer { get { throw null; } }
-
-        public string MetadataVersion { get { throw null; } }
-
-        public MethodDebugInformationHandleCollection MethodDebugInformation { get { throw null; } }
-
-        public MethodDefinitionHandleCollection MethodDefinitions { get { throw null; } }
-
-        public MetadataReaderOptions Options { get { throw null; } }
-
-        public PropertyDefinitionHandleCollection PropertyDefinitions { get { throw null; } }
-
-        public MetadataStringComparer StringComparer { get { throw null; } }
-
-        public TypeDefinitionHandleCollection TypeDefinitions { get { throw null; } }
-
-        public TypeReferenceHandleCollection TypeReferences { get { throw null; } }
-
-        public MetadataStringDecoder UTF8Decoder { get { throw null; } }
-
-        public AssemblyDefinition GetAssemblyDefinition() { throw null; }
-
-        public AssemblyFile GetAssemblyFile(AssemblyFileHandle handle) { throw null; }
-
-        public AssemblyReference GetAssemblyReference(AssemblyReferenceHandle handle) { throw null; }
-
-        public byte[] GetBlobBytes(BlobHandle handle) { throw null; }
-
-        public Collections.Immutable.ImmutableArray<byte> GetBlobContent(BlobHandle handle) { throw null; }
-
-        public BlobReader GetBlobReader(BlobHandle handle) { throw null; }
-
-        public BlobReader GetBlobReader(StringHandle handle) { throw null; }
-
-        public Constant GetConstant(ConstantHandle handle) { throw null; }
-
-        public CustomAttribute GetCustomAttribute(CustomAttributeHandle handle) { throw null; }
-
-        public CustomAttributeHandleCollection GetCustomAttributes(EntityHandle handle) { throw null; }
-
-        public CustomDebugInformation GetCustomDebugInformation(CustomDebugInformationHandle handle) { throw null; }
-
-        public CustomDebugInformationHandleCollection GetCustomDebugInformation(EntityHandle handle) { throw null; }
-
-        public DeclarativeSecurityAttribute GetDeclarativeSecurityAttribute(DeclarativeSecurityAttributeHandle handle) { throw null; }
-
-        public Document GetDocument(DocumentHandle handle) { throw null; }
-
-        public EventDefinition GetEventDefinition(EventDefinitionHandle handle) { throw null; }
-
-        public ExportedType GetExportedType(ExportedTypeHandle handle) { throw null; }
-
-        public FieldDefinition GetFieldDefinition(FieldDefinitionHandle handle) { throw null; }
-
-        public GenericParameter GetGenericParameter(GenericParameterHandle handle) { throw null; }
-
-        public GenericParameterConstraint GetGenericParameterConstraint(GenericParameterConstraintHandle handle) { throw null; }
-
-        public Guid GetGuid(GuidHandle handle) { throw null; }
-
-        public ImportScope GetImportScope(ImportScopeHandle handle) { throw null; }
-
-        public InterfaceImplementation GetInterfaceImplementation(InterfaceImplementationHandle handle) { throw null; }
-
-        public LocalConstant GetLocalConstant(LocalConstantHandle handle) { throw null; }
-
-        public LocalScope GetLocalScope(LocalScopeHandle handle) { throw null; }
-
-        public LocalScopeHandleCollection GetLocalScopes(MethodDebugInformationHandle handle) { throw null; }
-
-        public LocalScopeHandleCollection GetLocalScopes(MethodDefinitionHandle handle) { throw null; }
-
-        public LocalVariable GetLocalVariable(LocalVariableHandle handle) { throw null; }
-
-        public ManifestResource GetManifestResource(ManifestResourceHandle handle) { throw null; }
-
-        public MemberReference GetMemberReference(MemberReferenceHandle handle) { throw null; }
-
-        public MethodDebugInformation GetMethodDebugInformation(MethodDebugInformationHandle handle) { throw null; }
-
-        public MethodDebugInformation GetMethodDebugInformation(MethodDefinitionHandle handle) { throw null; }
-
-        public MethodDefinition GetMethodDefinition(MethodDefinitionHandle handle) { throw null; }
-
-        public MethodImplementation GetMethodImplementation(MethodImplementationHandle handle) { throw null; }
-
-        public MethodSpecification GetMethodSpecification(MethodSpecificationHandle handle) { throw null; }
-
-        public ModuleDefinition GetModuleDefinition() { throw null; }
-
-        public ModuleReference GetModuleReference(ModuleReferenceHandle handle) { throw null; }
-
-        public NamespaceDefinition GetNamespaceDefinition(NamespaceDefinitionHandle handle) { throw null; }
-
-        public NamespaceDefinition GetNamespaceDefinitionRoot() { throw null; }
-
-        public Parameter GetParameter(ParameterHandle handle) { throw null; }
-
-        public PropertyDefinition GetPropertyDefinition(PropertyDefinitionHandle handle) { throw null; }
-
-        public StandaloneSignature GetStandaloneSignature(StandaloneSignatureHandle handle) { throw null; }
-
-        public string GetString(DocumentNameBlobHandle handle) { throw null; }
-
-        public string GetString(NamespaceDefinitionHandle handle) { throw null; }
-
-        public string GetString(StringHandle handle) { throw null; }
-
-        public TypeDefinition GetTypeDefinition(TypeDefinitionHandle handle) { throw null; }
-
-        public TypeReference GetTypeReference(TypeReferenceHandle handle) { throw null; }
-
-        public TypeSpecification GetTypeSpecification(TypeSpecificationHandle handle) { throw null; }
-
-        public string GetUserString(UserStringHandle handle) { throw null; }
-    }
-
-    [Flags]
-    public enum MetadataReaderOptions
-    {
-        None = 0,
-        ApplyWindowsRuntimeProjections = 1,
-        Default = 1
-    }
-
-    public sealed partial class MetadataReaderProvider : IDisposable
-    {
-        internal MetadataReaderProvider() { }
-
-        public void Dispose() { }
-
-        public static unsafe MetadataReaderProvider FromMetadataImage(byte* start, int size) { throw null; }
-
-        public static MetadataReaderProvider FromMetadataImage(Collections.Immutable.ImmutableArray<byte> image) { throw null; }
-
-        public static MetadataReaderProvider FromMetadataStream(IO.Stream stream, MetadataStreamOptions options = MetadataStreamOptions.Default, int size = 0) { throw null; }
-
-        public static unsafe MetadataReaderProvider FromPortablePdbImage(byte* start, int size) { throw null; }
-
-        public static MetadataReaderProvider FromPortablePdbImage(Collections.Immutable.ImmutableArray<byte> image) { throw null; }
-
-        public static MetadataReaderProvider FromPortablePdbStream(IO.Stream stream, MetadataStreamOptions options = MetadataStreamOptions.Default, int size = 0) { throw null; }
-
-        public MetadataReader GetMetadataReader(MetadataReaderOptions options = MetadataReaderOptions.ApplyWindowsRuntimeProjections, MetadataStringDecoder? utf8Decoder = null) { throw null; }
-    }
-
-    [Flags]
-    public enum MetadataStreamOptions
-    {
-        Default = 0,
-        LeaveOpen = 1,
-        PrefetchMetadata = 2
-    }
-
-    public readonly partial struct MetadataStringComparer
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public readonly bool Equals(DocumentNameBlobHandle handle, string value, bool ignoreCase) { throw null; }
-
-        public readonly bool Equals(DocumentNameBlobHandle handle, string value) { throw null; }
-
-        public readonly bool Equals(NamespaceDefinitionHandle handle, string value, bool ignoreCase) { throw null; }
-
-        public readonly bool Equals(NamespaceDefinitionHandle handle, string value) { throw null; }
-
-        public readonly bool Equals(StringHandle handle, string value, bool ignoreCase) { throw null; }
-
-        public readonly bool Equals(StringHandle handle, string value) { throw null; }
-
-        public readonly bool StartsWith(StringHandle handle, string value, bool ignoreCase) { throw null; }
-
-        public readonly bool StartsWith(StringHandle handle, string value) { throw null; }
-    }
-
-    public partial class MetadataStringDecoder
-    {
-        public MetadataStringDecoder(Text.Encoding encoding) { }
-
-        public static MetadataStringDecoder DefaultUTF8 { get { throw null; } }
-
-        public Text.Encoding Encoding { get { throw null; } }
-
-        public virtual unsafe string GetString(byte* bytes, int byteCount) { throw null; }
-    }
-
-    public sealed partial class MethodBodyBlock
-    {
-        internal MethodBodyBlock() { }
-
-        public Collections.Immutable.ImmutableArray<ExceptionRegion> ExceptionRegions { get { throw null; } }
-
-        public StandaloneSignatureHandle LocalSignature { get { throw null; } }
-
-        public bool LocalVariablesInitialized { get { throw null; } }
-
-        public int MaxStack { get { throw null; } }
-
-        public int Size { get { throw null; } }
-
-        public static MethodBodyBlock Create(BlobReader reader) { throw null; }
-
-        public byte[]? GetILBytes() { throw null; }
-
-        public Collections.Immutable.ImmutableArray<byte> GetILContent() { throw null; }
-
-        public BlobReader GetILReader() { throw null; }
-    }
-
-    public readonly partial struct MethodDebugInformation
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public DocumentHandle Document { get { throw null; } }
-
-        public StandaloneSignatureHandle LocalSignature { get { throw null; } }
-
-        public BlobHandle SequencePointsBlob { get { throw null; } }
-
-        public readonly SequencePointCollection GetSequencePoints() { throw null; }
-
-        public readonly MethodDefinitionHandle GetStateMachineKickoffMethod() { throw null; }
-    }
-
-    public readonly partial struct MethodDebugInformationHandle : IEquatable<MethodDebugInformationHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(MethodDebugInformationHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(MethodDebugInformationHandle left, MethodDebugInformationHandle right) { throw null; }
-
-        public static explicit operator MethodDebugInformationHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator MethodDebugInformationHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(MethodDebugInformationHandle handle) { throw null; }
-
-        public static implicit operator Handle(MethodDebugInformationHandle handle) { throw null; }
-
-        public static bool operator !=(MethodDebugInformationHandle left, MethodDebugInformationHandle right) { throw null; }
-
-        public readonly MethodDefinitionHandle ToDefinitionHandle() { throw null; }
-    }
-
-    public readonly partial struct MethodDebugInformationHandleCollection : Collections.Generic.IReadOnlyCollection<MethodDebugInformationHandle>, Collections.Generic.IEnumerable<MethodDebugInformationHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<MethodDebugInformationHandle> Collections.Generic.IEnumerable<MethodDebugInformationHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<MethodDebugInformationHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public MethodDebugInformationHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct MethodDefinition
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public MethodAttributes Attributes { get { throw null; } }
-
-        public MethodImplAttributes ImplAttributes { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-
-        public int RelativeVirtualAddress { get { throw null; } }
-
-        public BlobHandle Signature { get { throw null; } }
-
-        public readonly MethodSignature<TType> DecodeSignature<TType, TGenericContext>(ISignatureTypeProvider<TType, TGenericContext> provider, TGenericContext genericContext) { throw null; }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-
-        public readonly DeclarativeSecurityAttributeHandleCollection GetDeclarativeSecurityAttributes() { throw null; }
-
-        public readonly TypeDefinitionHandle GetDeclaringType() { throw null; }
-
-        public readonly GenericParameterHandleCollection GetGenericParameters() { throw null; }
-
-        public readonly MethodImport GetImport() { throw null; }
-
-        public readonly ParameterHandleCollection GetParameters() { throw null; }
-    }
-
-    public readonly partial struct MethodDefinitionHandle : IEquatable<MethodDefinitionHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(MethodDefinitionHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(MethodDefinitionHandle left, MethodDefinitionHandle right) { throw null; }
-
-        public static explicit operator MethodDefinitionHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator MethodDefinitionHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(MethodDefinitionHandle handle) { throw null; }
-
-        public static implicit operator Handle(MethodDefinitionHandle handle) { throw null; }
-
-        public static bool operator !=(MethodDefinitionHandle left, MethodDefinitionHandle right) { throw null; }
-
-        public readonly MethodDebugInformationHandle ToDebugInformationHandle() { throw null; }
-    }
-
-    public readonly partial struct MethodDefinitionHandleCollection : Collections.Generic.IReadOnlyCollection<MethodDefinitionHandle>, Collections.Generic.IEnumerable<MethodDefinitionHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<MethodDefinitionHandle> Collections.Generic.IEnumerable<MethodDefinitionHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<MethodDefinitionHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public MethodDefinitionHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct MethodImplementation
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public EntityHandle MethodBody { get { throw null; } }
-
-        public EntityHandle MethodDeclaration { get { throw null; } }
-
-        public TypeDefinitionHandle Type { get { throw null; } }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-    }
-
-    public readonly partial struct MethodImplementationHandle : IEquatable<MethodImplementationHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(MethodImplementationHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(MethodImplementationHandle left, MethodImplementationHandle right) { throw null; }
-
-        public static explicit operator MethodImplementationHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator MethodImplementationHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(MethodImplementationHandle handle) { throw null; }
-
-        public static implicit operator Handle(MethodImplementationHandle handle) { throw null; }
-
-        public static bool operator !=(MethodImplementationHandle left, MethodImplementationHandle right) { throw null; }
-    }
-
-    public readonly partial struct MethodImplementationHandleCollection : Collections.Generic.IReadOnlyCollection<MethodImplementationHandle>, Collections.Generic.IEnumerable<MethodImplementationHandle>, Collections.IEnumerable
-    {
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<MethodImplementationHandle> Collections.Generic.IEnumerable<MethodImplementationHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<MethodImplementationHandle>, Collections.IEnumerator, IDisposable
-        {
-            private int _dummyPrimitive;
-            public MethodImplementationHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct MethodImport
-    {
-        private readonly int _dummyPrimitive;
-        public MethodImportAttributes Attributes { get { throw null; } }
-
-        public ModuleReferenceHandle Module { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-    }
-
-    public readonly partial struct MethodSignature<TType>
-    {
-        private readonly TType _ReturnType_k__BackingField;
-        private readonly Collections.Immutable.ImmutableArray<TType> _ParameterTypes_k__BackingField;
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public MethodSignature(SignatureHeader header, TType returnType, int requiredParameterCount, int genericParameterCount, Collections.Immutable.ImmutableArray<TType> parameterTypes) { }
-
-        public int GenericParameterCount { get { throw null; } }
-
-        public SignatureHeader Header { get { throw null; } }
-
-        public Collections.Immutable.ImmutableArray<TType> ParameterTypes { get { throw null; } }
-
-        public int RequiredParameterCount { get { throw null; } }
-
-        public TType ReturnType { get { throw null; } }
-    }
-
-    public readonly partial struct MethodSpecification
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public EntityHandle Method { get { throw null; } }
-
-        public BlobHandle Signature { get { throw null; } }
-
-        public readonly Collections.Immutable.ImmutableArray<TType> DecodeSignature<TType, TGenericContext>(ISignatureTypeProvider<TType, TGenericContext> provider, TGenericContext genericContext) { throw null; }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-    }
-
-    public readonly partial struct MethodSpecificationHandle : IEquatable<MethodSpecificationHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(MethodSpecificationHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(MethodSpecificationHandle left, MethodSpecificationHandle right) { throw null; }
-
-        public static explicit operator MethodSpecificationHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator MethodSpecificationHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(MethodSpecificationHandle handle) { throw null; }
-
-        public static implicit operator Handle(MethodSpecificationHandle handle) { throw null; }
-
-        public static bool operator !=(MethodSpecificationHandle left, MethodSpecificationHandle right) { throw null; }
-    }
-
-    public readonly partial struct ModuleDefinition
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public GuidHandle BaseGenerationId { get { throw null; } }
-
-        public int Generation { get { throw null; } }
-
-        public GuidHandle GenerationId { get { throw null; } }
-
-        public GuidHandle Mvid { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-    }
-
-    public readonly partial struct ModuleDefinitionHandle : IEquatable<ModuleDefinitionHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(ModuleDefinitionHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(ModuleDefinitionHandle left, ModuleDefinitionHandle right) { throw null; }
-
-        public static explicit operator ModuleDefinitionHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator ModuleDefinitionHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(ModuleDefinitionHandle handle) { throw null; }
-
-        public static implicit operator Handle(ModuleDefinitionHandle handle) { throw null; }
-
-        public static bool operator !=(ModuleDefinitionHandle left, ModuleDefinitionHandle right) { throw null; }
-    }
-
-    public readonly partial struct ModuleReference
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public StringHandle Name { get { throw null; } }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-    }
-
-    public readonly partial struct ModuleReferenceHandle : IEquatable<ModuleReferenceHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(ModuleReferenceHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(ModuleReferenceHandle left, ModuleReferenceHandle right) { throw null; }
-
-        public static explicit operator ModuleReferenceHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator ModuleReferenceHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(ModuleReferenceHandle handle) { throw null; }
-
-        public static implicit operator Handle(ModuleReferenceHandle handle) { throw null; }
-
-        public static bool operator !=(ModuleReferenceHandle left, ModuleReferenceHandle right) { throw null; }
-    }
-
-    public partial struct NamespaceDefinition
-    {
-        private object _dummy;
-        private int _dummyPrimitive;
-        public Collections.Immutable.ImmutableArray<ExportedTypeHandle> ExportedTypes { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-
-        public Collections.Immutable.ImmutableArray<NamespaceDefinitionHandle> NamespaceDefinitions { get { throw null; } }
-
-        public NamespaceDefinitionHandle Parent { get { throw null; } }
-
-        public Collections.Immutable.ImmutableArray<TypeDefinitionHandle> TypeDefinitions { get { throw null; } }
-    }
-
-    public readonly partial struct NamespaceDefinitionHandle : IEquatable<NamespaceDefinitionHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(NamespaceDefinitionHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(NamespaceDefinitionHandle left, NamespaceDefinitionHandle right) { throw null; }
-
-        public static explicit operator NamespaceDefinitionHandle(Handle handle) { throw null; }
-
-        public static implicit operator Handle(NamespaceDefinitionHandle handle) { throw null; }
-
-        public static bool operator !=(NamespaceDefinitionHandle left, NamespaceDefinitionHandle right) { throw null; }
-    }
-
-    public readonly partial struct Parameter
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public ParameterAttributes Attributes { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-
-        public int SequenceNumber { get { throw null; } }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-
-        public readonly ConstantHandle GetDefaultValue() { throw null; }
-
-        public readonly BlobHandle GetMarshallingDescriptor() { throw null; }
-    }
-
-    public readonly partial struct ParameterHandle : IEquatable<ParameterHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(ParameterHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(ParameterHandle left, ParameterHandle right) { throw null; }
-
-        public static explicit operator ParameterHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator ParameterHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(ParameterHandle handle) { throw null; }
-
-        public static implicit operator Handle(ParameterHandle handle) { throw null; }
-
-        public static bool operator !=(ParameterHandle left, ParameterHandle right) { throw null; }
-    }
-
-    public readonly partial struct ParameterHandleCollection : Collections.Generic.IReadOnlyCollection<ParameterHandle>, Collections.Generic.IEnumerable<ParameterHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<ParameterHandle> Collections.Generic.IEnumerable<ParameterHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<ParameterHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public ParameterHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public static partial class PEReaderExtensions
-    {
-        public static MetadataReader GetMetadataReader(this PortableExecutable.PEReader peReader, MetadataReaderOptions options, MetadataStringDecoder? utf8Decoder) { throw null; }
-
-        public static MetadataReader GetMetadataReader(this PortableExecutable.PEReader peReader, MetadataReaderOptions options) { throw null; }
-
-        public static MetadataReader GetMetadataReader(this PortableExecutable.PEReader peReader) { throw null; }
-
-        public static MethodBodyBlock GetMethodBody(this PortableExecutable.PEReader peReader, int relativeVirtualAddress) { throw null; }
-    }
-
-    public enum PrimitiveSerializationTypeCode : byte
-    {
-        Boolean = 2,
-        Char = 3,
-        SByte = 4,
-        Byte = 5,
-        Int16 = 6,
-        UInt16 = 7,
-        Int32 = 8,
-        UInt32 = 9,
-        Int64 = 10,
-        UInt64 = 11,
-        Single = 12,
-        Double = 13,
-        String = 14
-    }
-
-    public enum PrimitiveTypeCode : byte
-    {
-        Void = 1,
-        Boolean = 2,
-        Char = 3,
-        SByte = 4,
-        Byte = 5,
-        Int16 = 6,
-        UInt16 = 7,
-        Int32 = 8,
-        UInt32 = 9,
-        Int64 = 10,
-        UInt64 = 11,
-        Single = 12,
-        Double = 13,
-        String = 14,
-        TypedReference = 22,
-        IntPtr = 24,
-        UIntPtr = 25,
-        Object = 28
-    }
-
-    public readonly partial struct PropertyAccessors
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public MethodDefinitionHandle Getter { get { throw null; } }
-
-        public Collections.Immutable.ImmutableArray<MethodDefinitionHandle> Others { get { throw null; } }
-
-        public MethodDefinitionHandle Setter { get { throw null; } }
-    }
-
-    public readonly partial struct PropertyDefinition
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public PropertyAttributes Attributes { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-
-        public BlobHandle Signature { get { throw null; } }
-
-        public readonly MethodSignature<TType> DecodeSignature<TType, TGenericContext>(ISignatureTypeProvider<TType, TGenericContext> provider, TGenericContext genericContext) { throw null; }
-
-        public readonly PropertyAccessors GetAccessors() { throw null; }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-
-        public readonly ConstantHandle GetDefaultValue() { throw null; }
-    }
-
-    public readonly partial struct PropertyDefinitionHandle : IEquatable<PropertyDefinitionHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(PropertyDefinitionHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(PropertyDefinitionHandle left, PropertyDefinitionHandle right) { throw null; }
-
-        public static explicit operator PropertyDefinitionHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator PropertyDefinitionHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(PropertyDefinitionHandle handle) { throw null; }
-
-        public static implicit operator Handle(PropertyDefinitionHandle handle) { throw null; }
-
-        public static bool operator !=(PropertyDefinitionHandle left, PropertyDefinitionHandle right) { throw null; }
-    }
-
-    public readonly partial struct PropertyDefinitionHandleCollection : Collections.Generic.IReadOnlyCollection<PropertyDefinitionHandle>, Collections.Generic.IEnumerable<PropertyDefinitionHandle>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<PropertyDefinitionHandle> Collections.Generic.IEnumerable<PropertyDefinitionHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<PropertyDefinitionHandle>, Collections.IEnumerator, IDisposable
-        {
-            private object _dummy;
-            private int _dummyPrimitive;
-            public PropertyDefinitionHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct ReservedBlob<THandle>
-        where THandle : struct
-    {
-        private readonly THandle _Handle_k__BackingField;
-        public Blob Content { get { throw null; } }
-
-        public THandle Handle { get { throw null; } }
-
-        public readonly BlobWriter CreateWriter() { throw null; }
-    }
-
-    public readonly partial struct SequencePoint : IEquatable<SequencePoint>
-    {
-        private readonly int _dummyPrimitive;
-        public const int HiddenLine = 16707566;
-        public DocumentHandle Document { get { throw null; } }
-
-        public int EndColumn { get { throw null; } }
-
-        public int EndLine { get { throw null; } }
-
-        public bool IsHidden { get { throw null; } }
-
-        public int Offset { get { throw null; } }
-
-        public int StartColumn { get { throw null; } }
-
-        public int StartLine { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(SequencePoint other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-    }
-
-    public readonly partial struct SequencePointCollection : Collections.Generic.IEnumerable<SequencePoint>, Collections.IEnumerable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<SequencePoint> Collections.Generic.IEnumerable<SequencePoint>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<SequencePoint>, Collections.IEnumerator, IDisposable
-        {
-            private int _dummyPrimitive;
-            public SequencePoint Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            public void Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public enum SerializationTypeCode : byte
-    {
-        Invalid = 0,
-        Boolean = 2,
-        Char = 3,
-        SByte = 4,
-        Byte = 5,
-        Int16 = 6,
-        UInt16 = 7,
-        Int32 = 8,
-        UInt32 = 9,
-        Int64 = 10,
-        UInt64 = 11,
-        Single = 12,
-        Double = 13,
-        String = 14,
-        SZArray = 29,
-        Type = 80,
-        TaggedObject = 81,
-        Enum = 85
-    }
-
-    [Flags]
-    public enum SignatureAttributes : byte
-    {
-        None = 0,
-        Generic = 16,
-        Instance = 32,
-        ExplicitThis = 64
-    }
-
-    public enum SignatureCallingConvention : byte
-    {
-        Default = 0,
-        CDecl = 1,
-        StdCall = 2,
-        ThisCall = 3,
-        FastCall = 4,
-        VarArgs = 5,
-        Unmanaged = 9
-    }
-
-    public partial struct SignatureHeader : IEquatable<SignatureHeader>
-    {
-        private int _dummyPrimitive;
-        public const byte CallingConventionOrKindMask = 15;
-        public SignatureHeader(byte rawValue) { }
-
-        public SignatureHeader(SignatureKind kind, SignatureCallingConvention convention, SignatureAttributes attributes) { }
-
-        public SignatureAttributes Attributes { get { throw null; } }
-
-        public SignatureCallingConvention CallingConvention { get { throw null; } }
-
-        public bool HasExplicitThis { get { throw null; } }
-
-        public bool IsGeneric { get { throw null; } }
-
-        public bool IsInstance { get { throw null; } }
-
-        public SignatureKind Kind { get { throw null; } }
-
-        public byte RawValue { get { throw null; } }
-
-        public override bool Equals(object? obj) { throw null; }
-
-        public bool Equals(SignatureHeader other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(SignatureHeader left, SignatureHeader right) { throw null; }
-
-        public static bool operator !=(SignatureHeader left, SignatureHeader right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum SignatureKind : byte
-    {
-        Method = 0,
-        Field = 6,
-        LocalVariables = 7,
-        Property = 8,
-        MethodSpecification = 10
-    }
-
-    public enum SignatureTypeCode : byte
-    {
-        Invalid = 0,
-        Void = 1,
-        Boolean = 2,
-        Char = 3,
-        SByte = 4,
-        Byte = 5,
-        Int16 = 6,
-        UInt16 = 7,
-        Int32 = 8,
-        UInt32 = 9,
-        Int64 = 10,
-        UInt64 = 11,
-        Single = 12,
-        Double = 13,
-        String = 14,
-        Pointer = 15,
-        ByReference = 16,
-        GenericTypeParameter = 19,
-        Array = 20,
-        GenericTypeInstance = 21,
-        TypedReference = 22,
-        IntPtr = 24,
-        UIntPtr = 25,
-        FunctionPointer = 27,
-        Object = 28,
-        SZArray = 29,
-        GenericMethodParameter = 30,
-        RequiredModifier = 31,
-        OptionalModifier = 32,
-        TypeHandle = 64,
-        Sentinel = 65,
-        Pinned = 69
-    }
-
-    public enum SignatureTypeKind : byte
-    {
-        Unknown = 0,
-        ValueType = 17,
-        Class = 18
-    }
-
-    public readonly partial struct StandaloneSignature
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public BlobHandle Signature { get { throw null; } }
-
-        public readonly Collections.Immutable.ImmutableArray<TType> DecodeLocalSignature<TType, TGenericContext>(ISignatureTypeProvider<TType, TGenericContext> provider, TGenericContext genericContext) { throw null; }
-
-        public readonly MethodSignature<TType> DecodeMethodSignature<TType, TGenericContext>(ISignatureTypeProvider<TType, TGenericContext> provider, TGenericContext genericContext) { throw null; }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-
-        public readonly StandaloneSignatureKind GetKind() { throw null; }
-    }
-
-    public readonly partial struct StandaloneSignatureHandle : IEquatable<StandaloneSignatureHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(StandaloneSignatureHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(StandaloneSignatureHandle left, StandaloneSignatureHandle right) { throw null; }
-
-        public static explicit operator StandaloneSignatureHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator StandaloneSignatureHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(StandaloneSignatureHandle handle) { throw null; }
-
-        public static implicit operator Handle(StandaloneSignatureHandle handle) { throw null; }
-
-        public static bool operator !=(StandaloneSignatureHandle left, StandaloneSignatureHandle right) { throw null; }
-    }
-
-    public enum StandaloneSignatureKind
-    {
-        Method = 0,
-        LocalVariables = 1
-    }
-
-    public readonly partial struct StringHandle : IEquatable<StringHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(StringHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(StringHandle left, StringHandle right) { throw null; }
-
-        public static explicit operator StringHandle(Handle handle) { throw null; }
-
-        public static implicit operator Handle(StringHandle handle) { throw null; }
-
-        public static bool operator !=(StringHandle left, StringHandle right) { throw null; }
-    }
-
-    public readonly partial struct TypeDefinition
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public TypeAttributes Attributes { get { throw null; } }
-
-        public EntityHandle BaseType { get { throw null; } }
-
-        public bool IsNested { get { throw null; } }
-
-        public StringHandle Name { get { throw null; } }
-
-        public StringHandle Namespace { get { throw null; } }
-
-        public NamespaceDefinitionHandle NamespaceDefinition { get { throw null; } }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-
-        public readonly DeclarativeSecurityAttributeHandleCollection GetDeclarativeSecurityAttributes() { throw null; }
-
-        public readonly TypeDefinitionHandle GetDeclaringType() { throw null; }
-
-        public readonly EventDefinitionHandleCollection GetEvents() { throw null; }
-
-        public readonly FieldDefinitionHandleCollection GetFields() { throw null; }
-
-        public readonly GenericParameterHandleCollection GetGenericParameters() { throw null; }
-
-        public readonly InterfaceImplementationHandleCollection GetInterfaceImplementations() { throw null; }
-
-        public readonly TypeLayout GetLayout() { throw null; }
-
-        public readonly MethodImplementationHandleCollection GetMethodImplementations() { throw null; }
-
-        public readonly MethodDefinitionHandleCollection GetMethods() { throw null; }
-
-        public readonly Collections.Immutable.ImmutableArray<TypeDefinitionHandle> GetNestedTypes() { throw null; }
-
-        public readonly PropertyDefinitionHandleCollection GetProperties() { throw null; }
-    }
-
-    public readonly partial struct TypeDefinitionHandle : IEquatable<TypeDefinitionHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(TypeDefinitionHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(TypeDefinitionHandle left, TypeDefinitionHandle right) { throw null; }
-
-        public static explicit operator TypeDefinitionHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator TypeDefinitionHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(TypeDefinitionHandle handle) { throw null; }
-
-        public static implicit operator Handle(TypeDefinitionHandle handle) { throw null; }
-
-        public static bool operator !=(TypeDefinitionHandle left, TypeDefinitionHandle right) { throw null; }
-    }
-
-    public readonly partial struct TypeDefinitionHandleCollection : Collections.Generic.IReadOnlyCollection<TypeDefinitionHandle>, Collections.Generic.IEnumerable<TypeDefinitionHandle>, Collections.IEnumerable
-    {
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<TypeDefinitionHandle> Collections.Generic.IEnumerable<TypeDefinitionHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<TypeDefinitionHandle>, Collections.IEnumerator, IDisposable
-        {
-            private int _dummyPrimitive;
-            public TypeDefinitionHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct TypeLayout
-    {
-        private readonly int _dummyPrimitive;
-        public TypeLayout(int size, int packingSize) { }
-
-        public bool IsDefault { get { throw null; } }
-
-        public int PackingSize { get { throw null; } }
-
-        public int Size { get { throw null; } }
-    }
-
-    public readonly partial struct TypeReference
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public StringHandle Name { get { throw null; } }
-
-        public StringHandle Namespace { get { throw null; } }
-
-        public EntityHandle ResolutionScope { get { throw null; } }
-    }
-
-    public readonly partial struct TypeReferenceHandle : IEquatable<TypeReferenceHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(TypeReferenceHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(TypeReferenceHandle left, TypeReferenceHandle right) { throw null; }
-
-        public static explicit operator TypeReferenceHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator TypeReferenceHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(TypeReferenceHandle handle) { throw null; }
-
-        public static implicit operator Handle(TypeReferenceHandle handle) { throw null; }
-
-        public static bool operator !=(TypeReferenceHandle left, TypeReferenceHandle right) { throw null; }
-    }
-
-    public readonly partial struct TypeReferenceHandleCollection : Collections.Generic.IReadOnlyCollection<TypeReferenceHandle>, Collections.Generic.IEnumerable<TypeReferenceHandle>, Collections.IEnumerable
-    {
-        private readonly int _dummyPrimitive;
-        public int Count { get { throw null; } }
-
-        public readonly Enumerator GetEnumerator() { throw null; }
-
-        readonly Collections.Generic.IEnumerator<TypeReferenceHandle> Collections.Generic.IEnumerable<TypeReferenceHandle>.GetEnumerator() { throw null; }
-
-        readonly Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public partial struct Enumerator : Collections.Generic.IEnumerator<TypeReferenceHandle>, Collections.IEnumerator, IDisposable
-        {
-            private int _dummyPrimitive;
-            public TypeReferenceHandle Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-
-            void IDisposable.Dispose() { }
-        }
-    }
-
-    public readonly partial struct TypeSpecification
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public BlobHandle Signature { get { throw null; } }
-
-        public readonly TType DecodeSignature<TType, TGenericContext>(ISignatureTypeProvider<TType, TGenericContext> provider, TGenericContext genericContext) { throw null; }
-
-        public readonly CustomAttributeHandleCollection GetCustomAttributes() { throw null; }
-    }
-
-    public readonly partial struct TypeSpecificationHandle : IEquatable<TypeSpecificationHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(TypeSpecificationHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(TypeSpecificationHandle left, TypeSpecificationHandle right) { throw null; }
-
-        public static explicit operator TypeSpecificationHandle(EntityHandle handle) { throw null; }
-
-        public static explicit operator TypeSpecificationHandle(Handle handle) { throw null; }
-
-        public static implicit operator EntityHandle(TypeSpecificationHandle handle) { throw null; }
-
-        public static implicit operator Handle(TypeSpecificationHandle handle) { throw null; }
-
-        public static bool operator !=(TypeSpecificationHandle left, TypeSpecificationHandle right) { throw null; }
-    }
-
-    public readonly partial struct UserStringHandle : IEquatable<UserStringHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(UserStringHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(UserStringHandle left, UserStringHandle right) { throw null; }
-
-        public static explicit operator UserStringHandle(Handle handle) { throw null; }
-
-        public static implicit operator Handle(UserStringHandle handle) { throw null; }
-
-        public static bool operator !=(UserStringHandle left, UserStringHandle right) { throw null; }
-    }
-}
-
-namespace System.Reflection.Metadata.Ecma335
-{
-    public readonly partial struct ArrayShapeEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public ArrayShapeEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly void Shape(int rank, Collections.Immutable.ImmutableArray<int> sizes, Collections.Immutable.ImmutableArray<int> lowerBounds) { }
-    }
-
-    public readonly partial struct BlobEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public BlobEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly void CustomAttributeSignature(Action<FixedArgumentsEncoder> fixedArguments, Action<CustomAttributeNamedArgumentsEncoder> namedArguments) { }
-
-        public readonly void CustomAttributeSignature(out FixedArgumentsEncoder fixedArguments, out CustomAttributeNamedArgumentsEncoder namedArguments) { throw null; }
-
-        public readonly SignatureTypeEncoder FieldSignature() { throw null; }
-
-        public readonly LocalVariablesEncoder LocalVariableSignature(int variableCount) { throw null; }
-
-        public readonly MethodSignatureEncoder MethodSignature(SignatureCallingConvention convention = SignatureCallingConvention.Default, int genericParameterCount = 0, bool isInstanceMethod = false) { throw null; }
-
-        public readonly GenericTypeArgumentsEncoder MethodSpecificationSignature(int genericArgumentCount) { throw null; }
-
-        public readonly NamedArgumentsEncoder PermissionSetArguments(int argumentCount) { throw null; }
-
-        public readonly PermissionSetEncoder PermissionSetBlob(int attributeCount) { throw null; }
-
-        public readonly MethodSignatureEncoder PropertySignature(bool isInstanceProperty = false) { throw null; }
-
-        public readonly SignatureTypeEncoder TypeSpecificationSignature() { throw null; }
-    }
-
-    public static partial class CodedIndex
-    {
-        public static int CustomAttributeType(EntityHandle handle) { throw null; }
-
-        public static int HasConstant(EntityHandle handle) { throw null; }
-
-        public static int HasCustomAttribute(EntityHandle handle) { throw null; }
-
-        public static int HasCustomDebugInformation(EntityHandle handle) { throw null; }
-
-        public static int HasDeclSecurity(EntityHandle handle) { throw null; }
-
-        public static int HasFieldMarshal(EntityHandle handle) { throw null; }
-
-        public static int HasSemantics(EntityHandle handle) { throw null; }
-
-        public static int Implementation(EntityHandle handle) { throw null; }
-
-        public static int MemberForwarded(EntityHandle handle) { throw null; }
-
-        public static int MemberRefParent(EntityHandle handle) { throw null; }
-
-        public static int MethodDefOrRef(EntityHandle handle) { throw null; }
-
-        public static int ResolutionScope(EntityHandle handle) { throw null; }
-
-        public static int TypeDefOrRef(EntityHandle handle) { throw null; }
-
-        public static int TypeDefOrRefOrSpec(EntityHandle handle) { throw null; }
-
-        public static int TypeOrMethodDef(EntityHandle handle) { throw null; }
-    }
-
-    public sealed partial class ControlFlowBuilder
-    {
-        public void AddCatchRegion(LabelHandle tryStart, LabelHandle tryEnd, LabelHandle handlerStart, LabelHandle handlerEnd, EntityHandle catchType) { }
-
-        public void AddFaultRegion(LabelHandle tryStart, LabelHandle tryEnd, LabelHandle handlerStart, LabelHandle handlerEnd) { }
-
-        public void AddFilterRegion(LabelHandle tryStart, LabelHandle tryEnd, LabelHandle handlerStart, LabelHandle handlerEnd, LabelHandle filterStart) { }
-
-        public void AddFinallyRegion(LabelHandle tryStart, LabelHandle tryEnd, LabelHandle handlerStart, LabelHandle handlerEnd) { }
-    }
-
-    public readonly partial struct CustomAttributeArrayTypeEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public CustomAttributeArrayTypeEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly CustomAttributeElementTypeEncoder ElementType() { throw null; }
-
-        public readonly void ObjectArray() { }
-    }
-
-    public readonly partial struct CustomAttributeElementTypeEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public CustomAttributeElementTypeEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly void Boolean() { }
-
-        public readonly void Byte() { }
-
-        public readonly void Char() { }
-
-        public readonly void Double() { }
-
-        public readonly void Enum(string enumTypeName) { }
-
-        public readonly void Int16() { }
-
-        public readonly void Int32() { }
-
-        public readonly void Int64() { }
-
-        public readonly void PrimitiveType(PrimitiveSerializationTypeCode type) { }
-
-        public readonly void SByte() { }
-
-        public readonly void Single() { }
-
-        public readonly void String() { }
-
-        public readonly void SystemType() { }
-
-        public readonly void UInt16() { }
-
-        public readonly void UInt32() { }
-
-        public readonly void UInt64() { }
-    }
-
-    public readonly partial struct CustomAttributeNamedArgumentsEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public CustomAttributeNamedArgumentsEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly NamedArgumentsEncoder Count(int count) { throw null; }
-    }
-
-    public readonly partial struct CustomModifiersEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public CustomModifiersEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly CustomModifiersEncoder AddModifier(EntityHandle type, bool isOptional) { throw null; }
-    }
-
-    public readonly partial struct EditAndContinueLogEntry : IEquatable<EditAndContinueLogEntry>
-    {
-        private readonly int _dummyPrimitive;
-        public EditAndContinueLogEntry(EntityHandle handle, EditAndContinueOperation operation) { }
-
-        public EntityHandle Handle { get { throw null; } }
-
-        public EditAndContinueOperation Operation { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(EditAndContinueLogEntry other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-    }
-
-    public enum EditAndContinueOperation
-    {
-        Default = 0,
-        AddMethod = 1,
-        AddField = 2,
-        AddParameter = 3,
-        AddProperty = 4,
-        AddEvent = 5
-    }
-
-    public readonly partial struct ExceptionRegionEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public BlobBuilder Builder { get { throw null; } }
-
-        public bool HasSmallFormat { get { throw null; } }
-
-        public readonly ExceptionRegionEncoder Add(ExceptionRegionKind kind, int tryOffset, int tryLength, int handlerOffset, int handlerLength, EntityHandle catchType = default, int filterOffset = 0) { throw null; }
-
-        public readonly ExceptionRegionEncoder AddCatch(int tryOffset, int tryLength, int handlerOffset, int handlerLength, EntityHandle catchType) { throw null; }
-
-        public readonly ExceptionRegionEncoder AddFault(int tryOffset, int tryLength, int handlerOffset, int handlerLength) { throw null; }
-
-        public readonly ExceptionRegionEncoder AddFilter(int tryOffset, int tryLength, int handlerOffset, int handlerLength, int filterOffset) { throw null; }
-
-        public readonly ExceptionRegionEncoder AddFinally(int tryOffset, int tryLength, int handlerOffset, int handlerLength) { throw null; }
-
-        public static bool IsSmallExceptionRegion(int startOffset, int length) { throw null; }
-
-        public static bool IsSmallRegionCount(int exceptionRegionCount) { throw null; }
-    }
-
-    public static partial class ExportedTypeExtensions
-    {
-        public static int GetTypeDefinitionId(this ExportedType exportedType) { throw null; }
-    }
-
-    public readonly partial struct FixedArgumentsEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public FixedArgumentsEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly LiteralEncoder AddArgument() { throw null; }
-    }
-
-    public enum FunctionPointerAttributes
-    {
-        None = 0,
-        HasThis = 32,
-        HasExplicitThis = 96
-    }
-
-    public readonly partial struct GenericTypeArgumentsEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public GenericTypeArgumentsEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly SignatureTypeEncoder AddArgument() { throw null; }
-    }
-
-    public enum HeapIndex
-    {
-        UserString = 0,
-        String = 1,
-        Blob = 2,
-        Guid = 3
-    }
-
-    public readonly partial struct InstructionEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public InstructionEncoder(BlobBuilder codeBuilder, ControlFlowBuilder? controlFlowBuilder = null) { }
-
-        public BlobBuilder CodeBuilder { get { throw null; } }
-
-        public ControlFlowBuilder? ControlFlowBuilder { get { throw null; } }
-
-        public int Offset { get { throw null; } }
-
-        public readonly void Branch(ILOpCode code, LabelHandle label) { }
-
-        public readonly void Call(EntityHandle methodHandle) { }
-
-        public readonly void Call(MemberReferenceHandle methodHandle) { }
-
-        public readonly void Call(MethodDefinitionHandle methodHandle) { }
-
-        public readonly void Call(MethodSpecificationHandle methodHandle) { }
-
-        public readonly void CallIndirect(StandaloneSignatureHandle signature) { }
-
-        public readonly LabelHandle DefineLabel() { throw null; }
-
-        public readonly void LoadArgument(int argumentIndex) { }
-
-        public readonly void LoadArgumentAddress(int argumentIndex) { }
-
-        public readonly void LoadConstantI4(int value) { }
-
-        public readonly void LoadConstantI8(long value) { }
-
-        public readonly void LoadConstantR4(float value) { }
-
-        public readonly void LoadConstantR8(double value) { }
-
-        public readonly void LoadLocal(int slotIndex) { }
-
-        public readonly void LoadLocalAddress(int slotIndex) { }
-
-        public readonly void LoadString(UserStringHandle handle) { }
-
-        public readonly void MarkLabel(LabelHandle label) { }
-
-        public readonly void OpCode(ILOpCode code) { }
-
-        public readonly void StoreArgument(int argumentIndex) { }
-
-        public readonly void StoreLocal(int slotIndex) { }
-
-        public readonly void Token(int token) { }
-
-        public readonly void Token(EntityHandle handle) { }
-    }
-
-    public readonly partial struct LabelHandle : IEquatable<LabelHandle>
-    {
-        private readonly int _dummyPrimitive;
-        public int Id { get { throw null; } }
-
-        public bool IsNil { get { throw null; } }
-
-        public override readonly bool Equals(object? obj) { throw null; }
-
-        public readonly bool Equals(LabelHandle other) { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(LabelHandle left, LabelHandle right) { throw null; }
-
-        public static bool operator !=(LabelHandle left, LabelHandle right) { throw null; }
-    }
-
-    public readonly partial struct LiteralEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public LiteralEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly ScalarEncoder Scalar() { throw null; }
-
-        public readonly void TaggedScalar(Action<CustomAttributeElementTypeEncoder> type, Action<ScalarEncoder> scalar) { }
-
-        public readonly void TaggedScalar(out CustomAttributeElementTypeEncoder type, out ScalarEncoder scalar) { throw null; }
-
-        public readonly void TaggedVector(Action<CustomAttributeArrayTypeEncoder> arrayType, Action<VectorEncoder> vector) { }
-
-        public readonly void TaggedVector(out CustomAttributeArrayTypeEncoder arrayType, out VectorEncoder vector) { throw null; }
-
-        public readonly VectorEncoder Vector() { throw null; }
-    }
-
-    public readonly partial struct LiteralsEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public LiteralsEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly LiteralEncoder AddLiteral() { throw null; }
-    }
-
-    public readonly partial struct LocalVariablesEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public LocalVariablesEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly LocalVariableTypeEncoder AddVariable() { throw null; }
-    }
-
-    public readonly partial struct LocalVariableTypeEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public LocalVariableTypeEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly CustomModifiersEncoder CustomModifiers() { throw null; }
-
-        public readonly SignatureTypeEncoder Type(bool isByRef = false, bool isPinned = false) { throw null; }
-
-        public readonly void TypedReference() { }
-    }
-
-    public sealed partial class MetadataAggregator
-    {
-        public MetadataAggregator(Collections.Generic.IReadOnlyList<int>? baseTableRowCounts, Collections.Generic.IReadOnlyList<int>? baseHeapSizes, Collections.Generic.IReadOnlyList<MetadataReader>? deltaReaders) { }
-
-        public MetadataAggregator(MetadataReader baseReader, Collections.Generic.IReadOnlyList<MetadataReader> deltaReaders) { }
-
-        public Handle GetGenerationHandle(Handle handle, out int generation) { throw null; }
-    }
-
-    public sealed partial class MetadataBuilder
-    {
-        public MetadataBuilder(int userStringHeapStartOffset = 0, int stringHeapStartOffset = 0, int blobHeapStartOffset = 0, int guidHeapStartOffset = 0) { }
-
-        public AssemblyDefinitionHandle AddAssembly(StringHandle name, Version version, StringHandle culture, BlobHandle publicKey, AssemblyFlags flags, AssemblyHashAlgorithm hashAlgorithm) { throw null; }
-
-        public AssemblyFileHandle AddAssemblyFile(StringHandle name, BlobHandle hashValue, bool containsMetadata) { throw null; }
-
-        public AssemblyReferenceHandle AddAssemblyReference(StringHandle name, Version version, StringHandle culture, BlobHandle publicKeyOrToken, AssemblyFlags flags, BlobHandle hashValue) { throw null; }
-
-        public ConstantHandle AddConstant(EntityHandle parent, object? value) { throw null; }
-
-        public CustomAttributeHandle AddCustomAttribute(EntityHandle parent, EntityHandle constructor, BlobHandle value) { throw null; }
-
-        public CustomDebugInformationHandle AddCustomDebugInformation(EntityHandle parent, GuidHandle kind, BlobHandle value) { throw null; }
-
-        public DeclarativeSecurityAttributeHandle AddDeclarativeSecurityAttribute(EntityHandle parent, DeclarativeSecurityAction action, BlobHandle permissionSet) { throw null; }
-
-        public DocumentHandle AddDocument(BlobHandle name, GuidHandle hashAlgorithm, BlobHandle hash, GuidHandle language) { throw null; }
-
-        public void AddEncLogEntry(EntityHandle entity, EditAndContinueOperation code) { }
-
-        public void AddEncMapEntry(EntityHandle entity) { }
-
-        public EventDefinitionHandle AddEvent(EventAttributes attributes, StringHandle name, EntityHandle type) { throw null; }
-
-        public void AddEventMap(TypeDefinitionHandle declaringType, EventDefinitionHandle eventList) { }
-
-        public ExportedTypeHandle AddExportedType(TypeAttributes attributes, StringHandle @namespace, StringHandle name, EntityHandle implementation, int typeDefinitionId) { throw null; }
-
-        public FieldDefinitionHandle AddFieldDefinition(FieldAttributes attributes, StringHandle name, BlobHandle signature) { throw null; }
-
-        public void AddFieldLayout(FieldDefinitionHandle field, int offset) { }
-
-        public void AddFieldRelativeVirtualAddress(FieldDefinitionHandle field, int offset) { }
-
-        public GenericParameterHandle AddGenericParameter(EntityHandle parent, GenericParameterAttributes attributes, StringHandle name, int index) { throw null; }
-
-        public GenericParameterConstraintHandle AddGenericParameterConstraint(GenericParameterHandle genericParameter, EntityHandle constraint) { throw null; }
-
-        public ImportScopeHandle AddImportScope(ImportScopeHandle parentScope, BlobHandle imports) { throw null; }
-
-        public InterfaceImplementationHandle AddInterfaceImplementation(TypeDefinitionHandle type, EntityHandle implementedInterface) { throw null; }
-
-        public LocalConstantHandle AddLocalConstant(StringHandle name, BlobHandle signature) { throw null; }
-
-        public LocalScopeHandle AddLocalScope(MethodDefinitionHandle method, ImportScopeHandle importScope, LocalVariableHandle variableList, LocalConstantHandle constantList, int startOffset, int length) { throw null; }
-
-        public LocalVariableHandle AddLocalVariable(LocalVariableAttributes attributes, int index, StringHandle name) { throw null; }
-
-        public ManifestResourceHandle AddManifestResource(ManifestResourceAttributes attributes, StringHandle name, EntityHandle implementation, uint offset) { throw null; }
-
-        public void AddMarshallingDescriptor(EntityHandle parent, BlobHandle descriptor) { }
-
-        public MemberReferenceHandle AddMemberReference(EntityHandle parent, StringHandle name, BlobHandle signature) { throw null; }
-
-        public MethodDebugInformationHandle AddMethodDebugInformation(DocumentHandle document, BlobHandle sequencePoints) { throw null; }
-
-        public MethodDefinitionHandle AddMethodDefinition(MethodAttributes attributes, MethodImplAttributes implAttributes, StringHandle name, BlobHandle signature, int bodyOffset, ParameterHandle parameterList) { throw null; }
-
-        public MethodImplementationHandle AddMethodImplementation(TypeDefinitionHandle type, EntityHandle methodBody, EntityHandle methodDeclaration) { throw null; }
-
-        public void AddMethodImport(MethodDefinitionHandle method, MethodImportAttributes attributes, StringHandle name, ModuleReferenceHandle module) { }
-
-        public void AddMethodSemantics(EntityHandle association, MethodSemanticsAttributes semantics, MethodDefinitionHandle methodDefinition) { }
-
-        public MethodSpecificationHandle AddMethodSpecification(EntityHandle method, BlobHandle instantiation) { throw null; }
-
-        public ModuleDefinitionHandle AddModule(int generation, StringHandle moduleName, GuidHandle mvid, GuidHandle encId, GuidHandle encBaseId) { throw null; }
-
-        public ModuleReferenceHandle AddModuleReference(StringHandle moduleName) { throw null; }
-
-        public void AddNestedType(TypeDefinitionHandle type, TypeDefinitionHandle enclosingType) { }
-
-        public ParameterHandle AddParameter(ParameterAttributes attributes, StringHandle name, int sequenceNumber) { throw null; }
-
-        public PropertyDefinitionHandle AddProperty(PropertyAttributes attributes, StringHandle name, BlobHandle signature) { throw null; }
-
-        public void AddPropertyMap(TypeDefinitionHandle declaringType, PropertyDefinitionHandle propertyList) { }
-
-        public StandaloneSignatureHandle AddStandaloneSignature(BlobHandle signature) { throw null; }
-
-        public void AddStateMachineMethod(MethodDefinitionHandle moveNextMethod, MethodDefinitionHandle kickoffMethod) { }
-
-        public TypeDefinitionHandle AddTypeDefinition(TypeAttributes attributes, StringHandle @namespace, StringHandle name, EntityHandle baseType, FieldDefinitionHandle fieldList, MethodDefinitionHandle methodList) { throw null; }
-
-        public void AddTypeLayout(TypeDefinitionHandle type, ushort packingSize, uint size) { }
-
-        public TypeReferenceHandle AddTypeReference(EntityHandle resolutionScope, StringHandle @namespace, StringHandle name) { throw null; }
-
-        public TypeSpecificationHandle AddTypeSpecification(BlobHandle signature) { throw null; }
-
-        public BlobHandle GetOrAddBlob(byte[] value) { throw null; }
-
-        public BlobHandle GetOrAddBlob(Collections.Immutable.ImmutableArray<byte> value) { throw null; }
-
-        public BlobHandle GetOrAddBlob(BlobBuilder value) { throw null; }
-
-        public BlobHandle GetOrAddBlobUTF16(string value) { throw null; }
-
-        public BlobHandle GetOrAddBlobUTF8(string value, bool allowUnpairedSurrogates = true) { throw null; }
-
-        public BlobHandle GetOrAddConstantBlob(object? value) { throw null; }
-
-        public BlobHandle GetOrAddDocumentName(string value) { throw null; }
-
-        public GuidHandle GetOrAddGuid(Guid guid) { throw null; }
-
-        public StringHandle GetOrAddString(string value) { throw null; }
-
-        public UserStringHandle GetOrAddUserString(string value) { throw null; }
-
-        public int GetRowCount(TableIndex table) { throw null; }
-
-        public Collections.Immutable.ImmutableArray<int> GetRowCounts() { throw null; }
-
-        public ReservedBlob<GuidHandle> ReserveGuid() { throw null; }
-
-        public ReservedBlob<UserStringHandle> ReserveUserString(int length) { throw null; }
-
-        public void SetCapacity(HeapIndex heap, int byteCount) { }
-
-        public void SetCapacity(TableIndex table, int rowCount) { }
-    }
-
-    public static partial class MetadataReaderExtensions
-    {
-        public static Collections.Generic.IEnumerable<EditAndContinueLogEntry> GetEditAndContinueLogEntries(this MetadataReader reader) { throw null; }
-
-        public static Collections.Generic.IEnumerable<EntityHandle> GetEditAndContinueMapEntries(this MetadataReader reader) { throw null; }
-
-        public static int GetHeapMetadataOffset(this MetadataReader reader, HeapIndex heapIndex) { throw null; }
-
-        public static int GetHeapSize(this MetadataReader reader, HeapIndex heapIndex) { throw null; }
-
-        public static BlobHandle GetNextHandle(this MetadataReader reader, BlobHandle handle) { throw null; }
-
-        public static StringHandle GetNextHandle(this MetadataReader reader, StringHandle handle) { throw null; }
-
-        public static UserStringHandle GetNextHandle(this MetadataReader reader, UserStringHandle handle) { throw null; }
-
-        public static int GetTableMetadataOffset(this MetadataReader reader, TableIndex tableIndex) { throw null; }
-
-        public static int GetTableRowCount(this MetadataReader reader, TableIndex tableIndex) { throw null; }
-
-        public static int GetTableRowSize(this MetadataReader reader, TableIndex tableIndex) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TypeDefinitionHandle> GetTypesWithEvents(this MetadataReader reader) { throw null; }
-
-        public static Collections.Generic.IEnumerable<TypeDefinitionHandle> GetTypesWithProperties(this MetadataReader reader) { throw null; }
-
-        public static SignatureTypeKind ResolveSignatureTypeKind(this MetadataReader reader, EntityHandle typeHandle, byte rawTypeKind) { throw null; }
-    }
-
-    public sealed partial class MetadataRootBuilder
-    {
-        public MetadataRootBuilder(MetadataBuilder tablesAndHeaps, string? metadataVersion = null, bool suppressValidation = false) { }
-
-        public string MetadataVersion { get { throw null; } }
-
-        public MetadataSizes Sizes { get { throw null; } }
-
-        public bool SuppressValidation { get { throw null; } }
-
-        public void Serialize(BlobBuilder builder, int methodBodyStreamRva, int mappedFieldDataStreamRva) { }
-    }
-
-    public sealed partial class MetadataSizes
-    {
-        internal MetadataSizes() { }
-
-        public Collections.Immutable.ImmutableArray<int> ExternalRowCounts { get { throw null; } }
-
-        public Collections.Immutable.ImmutableArray<int> HeapSizes { get { throw null; } }
-
-        public Collections.Immutable.ImmutableArray<int> RowCounts { get { throw null; } }
-
-        public int GetAlignedHeapSize(HeapIndex index) { throw null; }
-    }
-
-    public static partial class MetadataTokens
-    {
-        public static readonly int HeapCount;
-        public static readonly int TableCount;
-        public static AssemblyFileHandle AssemblyFileHandle(int rowNumber) { throw null; }
-
-        public static AssemblyReferenceHandle AssemblyReferenceHandle(int rowNumber) { throw null; }
-
-        public static BlobHandle BlobHandle(int offset) { throw null; }
-
-        public static ConstantHandle ConstantHandle(int rowNumber) { throw null; }
-
-        public static CustomAttributeHandle CustomAttributeHandle(int rowNumber) { throw null; }
-
-        public static CustomDebugInformationHandle CustomDebugInformationHandle(int rowNumber) { throw null; }
-
-        public static DeclarativeSecurityAttributeHandle DeclarativeSecurityAttributeHandle(int rowNumber) { throw null; }
-
-        public static DocumentHandle DocumentHandle(int rowNumber) { throw null; }
-
-        public static DocumentNameBlobHandle DocumentNameBlobHandle(int offset) { throw null; }
-
-        public static EntityHandle EntityHandle(int token) { throw null; }
-
-        public static EntityHandle EntityHandle(TableIndex tableIndex, int rowNumber) { throw null; }
-
-        public static EventDefinitionHandle EventDefinitionHandle(int rowNumber) { throw null; }
-
-        public static ExportedTypeHandle ExportedTypeHandle(int rowNumber) { throw null; }
-
-        public static FieldDefinitionHandle FieldDefinitionHandle(int rowNumber) { throw null; }
-
-        public static GenericParameterConstraintHandle GenericParameterConstraintHandle(int rowNumber) { throw null; }
-
-        public static GenericParameterHandle GenericParameterHandle(int rowNumber) { throw null; }
-
-        public static int GetHeapOffset(BlobHandle handle) { throw null; }
-
-        public static int GetHeapOffset(GuidHandle handle) { throw null; }
-
-        public static int GetHeapOffset(Handle handle) { throw null; }
-
-        public static int GetHeapOffset(this MetadataReader reader, Handle handle) { throw null; }
-
-        public static int GetHeapOffset(StringHandle handle) { throw null; }
-
-        public static int GetHeapOffset(UserStringHandle handle) { throw null; }
-
-        public static int GetRowNumber(EntityHandle handle) { throw null; }
-
-        public static int GetRowNumber(this MetadataReader reader, EntityHandle handle) { throw null; }
-
-        public static int GetToken(EntityHandle handle) { throw null; }
-
-        public static int GetToken(Handle handle) { throw null; }
-
-        public static int GetToken(this MetadataReader reader, EntityHandle handle) { throw null; }
-
-        public static int GetToken(this MetadataReader reader, Handle handle) { throw null; }
-
-        public static GuidHandle GuidHandle(int offset) { throw null; }
-
-        public static Handle Handle(int token) { throw null; }
-
-        public static EntityHandle Handle(TableIndex tableIndex, int rowNumber) { throw null; }
-
-        public static ImportScopeHandle ImportScopeHandle(int rowNumber) { throw null; }
-
-        public static InterfaceImplementationHandle InterfaceImplementationHandle(int rowNumber) { throw null; }
-
-        public static LocalConstantHandle LocalConstantHandle(int rowNumber) { throw null; }
-
-        public static LocalScopeHandle LocalScopeHandle(int rowNumber) { throw null; }
-
-        public static LocalVariableHandle LocalVariableHandle(int rowNumber) { throw null; }
-
-        public static ManifestResourceHandle ManifestResourceHandle(int rowNumber) { throw null; }
-
-        public static MemberReferenceHandle MemberReferenceHandle(int rowNumber) { throw null; }
-
-        public static MethodDebugInformationHandle MethodDebugInformationHandle(int rowNumber) { throw null; }
-
-        public static MethodDefinitionHandle MethodDefinitionHandle(int rowNumber) { throw null; }
-
-        public static MethodImplementationHandle MethodImplementationHandle(int rowNumber) { throw null; }
-
-        public static MethodSpecificationHandle MethodSpecificationHandle(int rowNumber) { throw null; }
-
-        public static ModuleReferenceHandle ModuleReferenceHandle(int rowNumber) { throw null; }
-
-        public static ParameterHandle ParameterHandle(int rowNumber) { throw null; }
-
-        public static PropertyDefinitionHandle PropertyDefinitionHandle(int rowNumber) { throw null; }
-
-        public static StandaloneSignatureHandle StandaloneSignatureHandle(int rowNumber) { throw null; }
-
-        public static StringHandle StringHandle(int offset) { throw null; }
-
-        public static bool TryGetHeapIndex(HandleKind type, out HeapIndex index) { throw null; }
-
-        public static bool TryGetTableIndex(HandleKind type, out TableIndex index) { throw null; }
-
-        public static TypeDefinitionHandle TypeDefinitionHandle(int rowNumber) { throw null; }
-
-        public static TypeReferenceHandle TypeReferenceHandle(int rowNumber) { throw null; }
-
-        public static TypeSpecificationHandle TypeSpecificationHandle(int rowNumber) { throw null; }
-
-        public static UserStringHandle UserStringHandle(int offset) { throw null; }
-    }
-
-    [Flags]
-    public enum MethodBodyAttributes
-    {
-        None = 0,
-        InitLocals = 1
-    }
-
-    public readonly partial struct MethodBodyStreamEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public MethodBodyStreamEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly MethodBody AddMethodBody(int codeSize, int maxStack = 8, int exceptionRegionCount = 0, bool hasSmallExceptionRegions = true, StandaloneSignatureHandle localVariablesSignature = default, MethodBodyAttributes attributes = MethodBodyAttributes.InitLocals, bool hasDynamicStackAllocation = false) { throw null; }
-
-        public readonly MethodBody AddMethodBody(int codeSize, int maxStack, int exceptionRegionCount, bool hasSmallExceptionRegions, StandaloneSignatureHandle localVariablesSignature, MethodBodyAttributes attributes) { throw null; }
-
-        public readonly int AddMethodBody(InstructionEncoder instructionEncoder, int maxStack = 8, StandaloneSignatureHandle localVariablesSignature = default, MethodBodyAttributes attributes = MethodBodyAttributes.InitLocals, bool hasDynamicStackAllocation = false) { throw null; }
-
-        public readonly int AddMethodBody(InstructionEncoder instructionEncoder, int maxStack, StandaloneSignatureHandle localVariablesSignature, MethodBodyAttributes attributes) { throw null; }
-
-        public readonly partial struct MethodBody
-        {
-            private readonly int _dummyPrimitive;
-            public ExceptionRegionEncoder ExceptionRegions { get { throw null; } }
-
-            public Blob Instructions { get { throw null; } }
-
-            public int Offset { get { throw null; } }
-        }
-    }
-
-    public readonly partial struct MethodSignatureEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public MethodSignatureEncoder(BlobBuilder builder, bool hasVarArgs) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public bool HasVarArgs { get { throw null; } }
-
-        public readonly void Parameters(int parameterCount, Action<ReturnTypeEncoder> returnType, Action<ParametersEncoder> parameters) { }
-
-        public readonly void Parameters(int parameterCount, out ReturnTypeEncoder returnType, out ParametersEncoder parameters) { throw null; }
-    }
-
-    public readonly partial struct NamedArgumentsEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public NamedArgumentsEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly void AddArgument(bool isField, Action<NamedArgumentTypeEncoder> type, Action<NameEncoder> name, Action<LiteralEncoder> literal) { }
-
-        public readonly void AddArgument(bool isField, out NamedArgumentTypeEncoder type, out NameEncoder name, out LiteralEncoder literal) { throw null; }
-    }
-
-    public readonly partial struct NamedArgumentTypeEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public NamedArgumentTypeEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly void Object() { }
-
-        public readonly CustomAttributeElementTypeEncoder ScalarType() { throw null; }
-
-        public readonly CustomAttributeArrayTypeEncoder SZArray() { throw null; }
-    }
-
-    public readonly partial struct NameEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public NameEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly void Name(string name) { }
-    }
-
-    public readonly partial struct ParametersEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public ParametersEncoder(BlobBuilder builder, bool hasVarArgs = false) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public bool HasVarArgs { get { throw null; } }
-
-        public readonly ParameterTypeEncoder AddParameter() { throw null; }
-
-        public readonly ParametersEncoder StartVarArgs() { throw null; }
-    }
-
-    public readonly partial struct ParameterTypeEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public ParameterTypeEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly CustomModifiersEncoder CustomModifiers() { throw null; }
-
-        public readonly SignatureTypeEncoder Type(bool isByRef = false) { throw null; }
-
-        public readonly void TypedReference() { }
-    }
-
-    public readonly partial struct PermissionSetEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public PermissionSetEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly PermissionSetEncoder AddPermission(string typeName, Collections.Immutable.ImmutableArray<byte> encodedArguments) { throw null; }
-
-        public readonly PermissionSetEncoder AddPermission(string typeName, BlobBuilder encodedArguments) { throw null; }
-    }
-
-    public sealed partial class PortablePdbBuilder
-    {
-        public PortablePdbBuilder(MetadataBuilder tablesAndHeaps, Collections.Immutable.ImmutableArray<int> typeSystemRowCounts, MethodDefinitionHandle entryPoint, Func<Collections.Generic.IEnumerable<Blob>, BlobContentId>? idProvider = null) { }
-
-        public ushort FormatVersion { get { throw null; } }
-
-        public Func<Collections.Generic.IEnumerable<Blob>, BlobContentId> IdProvider { get { throw null; } }
-
-        public string MetadataVersion { get { throw null; } }
-
-        public BlobContentId Serialize(BlobBuilder builder) { throw null; }
-    }
-
-    public readonly partial struct ReturnTypeEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public ReturnTypeEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly CustomModifiersEncoder CustomModifiers() { throw null; }
-
-        public readonly SignatureTypeEncoder Type(bool isByRef = false) { throw null; }
-
-        public readonly void TypedReference() { }
-
-        public readonly void Void() { }
-    }
-
-    public readonly partial struct ScalarEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public ScalarEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly void Constant(object? value) { }
-
-        public readonly void NullArray() { }
-
-        public readonly void SystemType(string? serializedTypeName) { }
-    }
-
-    public readonly partial struct SignatureDecoder<TType, TGenericContext>
-    {
-        private readonly ISignatureTypeProvider<TType, TGenericContext> _provider;
-        private readonly TGenericContext _genericContext;
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public SignatureDecoder(ISignatureTypeProvider<TType, TGenericContext> provider, MetadataReader metadataReader, TGenericContext genericContext) { }
-
-        public readonly TType DecodeFieldSignature(ref BlobReader blobReader) { throw null; }
-
-        public readonly Collections.Immutable.ImmutableArray<TType> DecodeLocalSignature(ref BlobReader blobReader) { throw null; }
-
-        public readonly MethodSignature<TType> DecodeMethodSignature(ref BlobReader blobReader) { throw null; }
-
-        public readonly Collections.Immutable.ImmutableArray<TType> DecodeMethodSpecificationSignature(ref BlobReader blobReader) { throw null; }
-
-        public readonly TType DecodeType(ref BlobReader blobReader, bool allowTypeSpecifications = false) { throw null; }
-    }
-
-    public readonly partial struct SignatureTypeEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public SignatureTypeEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly void Array(Action<SignatureTypeEncoder> elementType, Action<ArrayShapeEncoder> arrayShape) { }
-
-        public readonly void Array(out SignatureTypeEncoder elementType, out ArrayShapeEncoder arrayShape) { throw null; }
-
-        public readonly void Boolean() { }
-
-        public readonly void Byte() { }
-
-        public readonly void Char() { }
-
-        public readonly CustomModifiersEncoder CustomModifiers() { throw null; }
-
-        public readonly void Double() { }
-
-        public readonly MethodSignatureEncoder FunctionPointer(SignatureCallingConvention convention = SignatureCallingConvention.Default, FunctionPointerAttributes attributes = FunctionPointerAttributes.None, int genericParameterCount = 0) { throw null; }
-
-        public readonly GenericTypeArgumentsEncoder GenericInstantiation(EntityHandle genericType, int genericArgumentCount, bool isValueType) { throw null; }
-
-        public readonly void GenericMethodTypeParameter(int parameterIndex) { }
-
-        public readonly void GenericTypeParameter(int parameterIndex) { }
-
-        public readonly void Int16() { }
-
-        public readonly void Int32() { }
-
-        public readonly void Int64() { }
-
-        public readonly void IntPtr() { }
-
-        public readonly void Object() { }
-
-        public readonly SignatureTypeEncoder Pointer() { throw null; }
-
-        public readonly void PrimitiveType(PrimitiveTypeCode type) { }
-
-        public readonly void SByte() { }
-
-        public readonly void Single() { }
-
-        public readonly void String() { }
-
-        public readonly SignatureTypeEncoder SZArray() { throw null; }
-
-        public readonly void Type(EntityHandle type, bool isValueType) { }
-
-        public readonly void UInt16() { }
-
-        public readonly void UInt32() { }
-
-        public readonly void UInt64() { }
-
-        public readonly void UIntPtr() { }
-
-        public readonly void VoidPointer() { }
-    }
-
-    public enum TableIndex : byte
-    {
-        Module = 0,
-        TypeRef = 1,
-        TypeDef = 2,
-        FieldPtr = 3,
-        Field = 4,
-        MethodPtr = 5,
-        MethodDef = 6,
-        ParamPtr = 7,
-        Param = 8,
-        InterfaceImpl = 9,
-        MemberRef = 10,
-        Constant = 11,
-        CustomAttribute = 12,
-        FieldMarshal = 13,
-        DeclSecurity = 14,
-        ClassLayout = 15,
-        FieldLayout = 16,
-        StandAloneSig = 17,
-        EventMap = 18,
-        EventPtr = 19,
-        Event = 20,
-        PropertyMap = 21,
-        PropertyPtr = 22,
-        Property = 23,
-        MethodSemantics = 24,
-        MethodImpl = 25,
-        ModuleRef = 26,
-        TypeSpec = 27,
-        ImplMap = 28,
-        FieldRva = 29,
-        EncLog = 30,
-        EncMap = 31,
-        Assembly = 32,
-        AssemblyProcessor = 33,
-        AssemblyOS = 34,
-        AssemblyRef = 35,
-        AssemblyRefProcessor = 36,
-        AssemblyRefOS = 37,
-        File = 38,
-        ExportedType = 39,
-        ManifestResource = 40,
-        NestedClass = 41,
-        GenericParam = 42,
-        MethodSpec = 43,
-        GenericParamConstraint = 44,
-        Document = 48,
-        MethodDebugInformation = 49,
-        LocalScope = 50,
-        LocalVariable = 51,
-        LocalConstant = 52,
-        ImportScope = 53,
-        StateMachineMethod = 54,
-        CustomDebugInformation = 55
-    }
-
-    public readonly partial struct VectorEncoder
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public VectorEncoder(BlobBuilder builder) { }
-
-        public BlobBuilder Builder { get { throw null; } }
-
-        public readonly LiteralsEncoder Count(int count) { throw null; }
-    }
-}
-
-namespace System.Reflection.PortableExecutable
-{
-    [Flags]
-    public enum Characteristics : ushort
-    {
-        RelocsStripped = 1,
-        ExecutableImage = 2,
-        LineNumsStripped = 4,
-        LocalSymsStripped = 8,
-        AggressiveWSTrim = 16,
-        LargeAddressAware = 32,
-        BytesReversedLo = 128,
-        Bit32Machine = 256,
-        DebugStripped = 512,
-        RemovableRunFromSwap = 1024,
-        NetRunFromSwap = 2048,
-        System = 4096,
-        Dll = 8192,
-        UpSystemOnly = 16384,
-        BytesReversedHi = 32768
-    }
-
-    public readonly partial struct CodeViewDebugDirectoryData
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Age { get { throw null; } }
-
-        public Guid Guid { get { throw null; } }
-
-        public string Path { get { throw null; } }
-    }
-
-    public sealed partial class CoffHeader
-    {
-        internal CoffHeader() { }
-
-        public Characteristics Characteristics { get { throw null; } }
-
-        public Machine Machine { get { throw null; } }
-
-        public short NumberOfSections { get { throw null; } }
-
-        public int NumberOfSymbols { get { throw null; } }
-
-        public int PointerToSymbolTable { get { throw null; } }
-
-        public short SizeOfOptionalHeader { get { throw null; } }
-
-        public int TimeDateStamp { get { throw null; } }
-    }
-
-    [Flags]
-    public enum CorFlags
-    {
-        ILOnly = 1,
-        Requires32Bit = 2,
-        ILLibrary = 4,
-        StrongNameSigned = 8,
-        NativeEntryPoint = 16,
-        TrackDebugData = 65536,
-        Prefers32Bit = 131072
-    }
-
-    public sealed partial class CorHeader
-    {
-        internal CorHeader() { }
-
-        public DirectoryEntry CodeManagerTableDirectory { get { throw null; } }
-
-        public int EntryPointTokenOrRelativeVirtualAddress { get { throw null; } }
-
-        public DirectoryEntry ExportAddressTableJumpsDirectory { get { throw null; } }
-
-        public CorFlags Flags { get { throw null; } }
-
-        public ushort MajorRuntimeVersion { get { throw null; } }
-
-        public DirectoryEntry ManagedNativeHeaderDirectory { get { throw null; } }
-
-        public DirectoryEntry MetadataDirectory { get { throw null; } }
-
-        public ushort MinorRuntimeVersion { get { throw null; } }
-
-        public DirectoryEntry ResourcesDirectory { get { throw null; } }
-
-        public DirectoryEntry StrongNameSignatureDirectory { get { throw null; } }
-
-        public DirectoryEntry VtableFixupsDirectory { get { throw null; } }
-    }
-
-    public sealed partial class DebugDirectoryBuilder
-    {
-        public void AddCodeViewEntry(string pdbPath, Metadata.BlobContentId pdbContentId, ushort portablePdbVersion) { }
-
-        public void AddEmbeddedPortablePdbEntry(Metadata.BlobBuilder debugMetadata, ushort portablePdbVersion) { }
-
-        public void AddEntry(DebugDirectoryEntryType type, uint version, uint stamp) { }
-
-        public void AddEntry<TData>(DebugDirectoryEntryType type, uint version, uint stamp, TData data, Action<Metadata.BlobBuilder, TData> dataSerializer) { }
-
-        public void AddPdbChecksumEntry(string algorithmName, Collections.Immutable.ImmutableArray<byte> checksum) { }
-
-        public void AddReproducibleEntry() { }
-    }
-
-    public readonly partial struct DebugDirectoryEntry
-    {
-        private readonly int _dummyPrimitive;
-        public DebugDirectoryEntry(uint stamp, ushort majorVersion, ushort minorVersion, DebugDirectoryEntryType type, int dataSize, int dataRelativeVirtualAddress, int dataPointer) { }
-
-        public int DataPointer { get { throw null; } }
-
-        public int DataRelativeVirtualAddress { get { throw null; } }
-
-        public int DataSize { get { throw null; } }
-
-        public bool IsPortableCodeView { get { throw null; } }
-
-        public ushort MajorVersion { get { throw null; } }
-
-        public ushort MinorVersion { get { throw null; } }
-
-        public uint Stamp { get { throw null; } }
-
-        public DebugDirectoryEntryType Type { get { throw null; } }
-    }
-
-    public enum DebugDirectoryEntryType
-    {
-        Unknown = 0,
-        Coff = 1,
-        CodeView = 2,
-        Reproducible = 16,
-        EmbeddedPortablePdb = 17,
-        PdbChecksum = 19
-    }
-
-    public readonly partial struct DirectoryEntry
-    {
-        public readonly int RelativeVirtualAddress;
-        public readonly int Size;
-        public DirectoryEntry(int relativeVirtualAddress, int size) { }
-    }
-
-    [Flags]
-    public enum DllCharacteristics : ushort
-    {
-        ProcessInit = 1,
-        ProcessTerm = 2,
-        ThreadInit = 4,
-        ThreadTerm = 8,
-        HighEntropyVirtualAddressSpace = 32,
-        DynamicBase = 64,
-        NxCompatible = 256,
-        NoIsolation = 512,
-        NoSeh = 1024,
-        NoBind = 2048,
-        AppContainer = 4096,
-        WdmDriver = 8192,
-        TerminalServerAware = 32768
-    }
-
-    public enum Machine : ushort
-    {
-        Unknown = 0,
-        I386 = 332,
-        WceMipsV2 = 361,
-        Alpha = 388,
-        SH3 = 418,
-        SH3Dsp = 419,
-        SH3E = 420,
-        SH4 = 422,
-        SH5 = 424,
-        Arm = 448,
-        Thumb = 450,
-        ArmThumb2 = 452,
-        AM33 = 467,
-        PowerPC = 496,
-        PowerPCFP = 497,
-        IA64 = 512,
-        MIPS16 = 614,
-        Alpha64 = 644,
-        MipsFpu = 870,
-        MipsFpu16 = 1126,
-        Tricore = 1312,
-        Ebc = 3772,
-        Amd64 = 34404,
-        M32R = 36929,
-        Arm64 = 43620
-    }
-
-    public partial class ManagedPEBuilder : PEBuilder
-    {
-        public const int ManagedResourcesDataAlignment = 8;
-        public const int MappedFieldDataAlignment = 8;
-        public ManagedPEBuilder(PEHeaderBuilder header, Metadata.Ecma335.MetadataRootBuilder metadataRootBuilder, Metadata.BlobBuilder ilStream, Metadata.BlobBuilder? mappedFieldData = null, Metadata.BlobBuilder? managedResources = null, ResourceSectionBuilder? nativeResources = null, DebugDirectoryBuilder? debugDirectoryBuilder = null, int strongNameSignatureSize = 128, Metadata.MethodDefinitionHandle entryPoint = default, CorFlags flags = CorFlags.ILOnly, Func<Collections.Generic.IEnumerable<Metadata.Blob>, Metadata.BlobContentId>? deterministicIdProvider = null) : base(default!, default) { }
-
-        protected override Collections.Immutable.ImmutableArray<Section> CreateSections() { throw null; }
-
-        protected internal override PEDirectoriesBuilder GetDirectories() { throw null; }
-
-        protected override Metadata.BlobBuilder SerializeSection(string name, SectionLocation location) { throw null; }
-
-        public void Sign(Metadata.BlobBuilder peImage, Func<Collections.Generic.IEnumerable<Metadata.Blob>, byte[]> signatureProvider) { }
-    }
-
-    public readonly partial struct PdbChecksumDebugDirectoryData
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public string AlgorithmName { get { throw null; } }
-
-        public Collections.Immutable.ImmutableArray<byte> Checksum { get { throw null; } }
-    }
-
-    public abstract partial class PEBuilder
-    {
-        protected PEBuilder(PEHeaderBuilder header, Func<Collections.Generic.IEnumerable<Metadata.Blob>, Metadata.BlobContentId>? deterministicIdProvider) { }
-
-        public PEHeaderBuilder Header { get { throw null; } }
-
-        public Func<Collections.Generic.IEnumerable<Metadata.Blob>, Metadata.BlobContentId> IdProvider { get { throw null; } }
-
-        public bool IsDeterministic { get { throw null; } }
-
-        protected abstract Collections.Immutable.ImmutableArray<Section> CreateSections();
-        protected internal abstract PEDirectoriesBuilder GetDirectories();
-        protected Collections.Immutable.ImmutableArray<Section> GetSections() { throw null; }
-
-        public Metadata.BlobContentId Serialize(Metadata.BlobBuilder builder) { throw null; }
-
-        protected abstract Metadata.BlobBuilder SerializeSection(string name, SectionLocation location);
-        protected readonly partial struct Section
-        {
-            public readonly SectionCharacteristics Characteristics;
-            public readonly string Name;
-            public Section(string name, SectionCharacteristics characteristics) { }
-        }
-    }
-
-    public sealed partial class PEDirectoriesBuilder
-    {
-        public int AddressOfEntryPoint { get { throw null; } set { } }
-
-        public DirectoryEntry BaseRelocationTable { get { throw null; } set { } }
-
-        public DirectoryEntry BoundImportTable { get { throw null; } set { } }
-
-        public DirectoryEntry CopyrightTable { get { throw null; } set { } }
-
-        public DirectoryEntry CorHeaderTable { get { throw null; } set { } }
-
-        public DirectoryEntry DebugTable { get { throw null; } set { } }
-
-        public DirectoryEntry DelayImportTable { get { throw null; } set { } }
-
-        public DirectoryEntry ExceptionTable { get { throw null; } set { } }
-
-        public DirectoryEntry ExportTable { get { throw null; } set { } }
-
-        public DirectoryEntry GlobalPointerTable { get { throw null; } set { } }
-
-        public DirectoryEntry ImportAddressTable { get { throw null; } set { } }
-
-        public DirectoryEntry ImportTable { get { throw null; } set { } }
-
-        public DirectoryEntry LoadConfigTable { get { throw null; } set { } }
-
-        public DirectoryEntry ResourceTable { get { throw null; } set { } }
-
-        public DirectoryEntry ThreadLocalStorageTable { get { throw null; } set { } }
-    }
-
-    public sealed partial class PEHeader
-    {
-        internal PEHeader() { }
-
-        public int AddressOfEntryPoint { get { throw null; } }
-
-        public int BaseOfCode { get { throw null; } }
-
-        public int BaseOfData { get { throw null; } }
-
-        public DirectoryEntry BaseRelocationTableDirectory { get { throw null; } }
-
-        public DirectoryEntry BoundImportTableDirectory { get { throw null; } }
-
-        public DirectoryEntry CertificateTableDirectory { get { throw null; } }
-
-        public uint CheckSum { get { throw null; } }
-
-        public DirectoryEntry CopyrightTableDirectory { get { throw null; } }
-
-        public DirectoryEntry CorHeaderTableDirectory { get { throw null; } }
-
-        public DirectoryEntry DebugTableDirectory { get { throw null; } }
-
-        public DirectoryEntry DelayImportTableDirectory { get { throw null; } }
-
-        public DllCharacteristics DllCharacteristics { get { throw null; } }
-
-        public DirectoryEntry ExceptionTableDirectory { get { throw null; } }
-
-        public DirectoryEntry ExportTableDirectory { get { throw null; } }
-
-        public int FileAlignment { get { throw null; } }
-
-        public DirectoryEntry GlobalPointerTableDirectory { get { throw null; } }
-
-        public ulong ImageBase { get { throw null; } }
-
-        public DirectoryEntry ImportAddressTableDirectory { get { throw null; } }
-
-        public DirectoryEntry ImportTableDirectory { get { throw null; } }
-
-        public DirectoryEntry LoadConfigTableDirectory { get { throw null; } }
-
-        public PEMagic Magic { get { throw null; } }
-
-        public ushort MajorImageVersion { get { throw null; } }
-
-        public byte MajorLinkerVersion { get { throw null; } }
-
-        public ushort MajorOperatingSystemVersion { get { throw null; } }
-
-        public ushort MajorSubsystemVersion { get { throw null; } }
-
-        public ushort MinorImageVersion { get { throw null; } }
-
-        public byte MinorLinkerVersion { get { throw null; } }
-
-        public ushort MinorOperatingSystemVersion { get { throw null; } }
-
-        public ushort MinorSubsystemVersion { get { throw null; } }
-
-        public int NumberOfRvaAndSizes { get { throw null; } }
-
-        public DirectoryEntry ResourceTableDirectory { get { throw null; } }
-
-        public int SectionAlignment { get { throw null; } }
-
-        public int SizeOfCode { get { throw null; } }
-
-        public int SizeOfHeaders { get { throw null; } }
-
-        public ulong SizeOfHeapCommit { get { throw null; } }
-
-        public ulong SizeOfHeapReserve { get { throw null; } }
-
-        public int SizeOfImage { get { throw null; } }
-
-        public int SizeOfInitializedData { get { throw null; } }
-
-        public ulong SizeOfStackCommit { get { throw null; } }
-
-        public ulong SizeOfStackReserve { get { throw null; } }
-
-        public int SizeOfUninitializedData { get { throw null; } }
-
-        public Subsystem Subsystem { get { throw null; } }
-
-        public DirectoryEntry ThreadLocalStorageTableDirectory { get { throw null; } }
-    }
-
-    public sealed partial class PEHeaderBuilder
-    {
-        public PEHeaderBuilder(Machine machine = Machine.Unknown, int sectionAlignment = 8192, int fileAlignment = 512, ulong imageBase = 4194304, byte majorLinkerVersion = 48, byte minorLinkerVersion = 0, ushort majorOperatingSystemVersion = 4, ushort minorOperatingSystemVersion = 0, ushort majorImageVersion = 0, ushort minorImageVersion = 0, ushort majorSubsystemVersion = 4, ushort minorSubsystemVersion = 0, Subsystem subsystem = Subsystem.WindowsCui, DllCharacteristics dllCharacteristics = DllCharacteristics.DynamicBase | DllCharacteristics.NxCompatible | DllCharacteristics.NoSeh | DllCharacteristics.TerminalServerAware, Characteristics imageCharacteristics = Characteristics.Dll, ulong sizeOfStackReserve = 1048576, ulong sizeOfStackCommit = 4096, ulong sizeOfHeapReserve = 1048576, ulong sizeOfHeapCommit = 4096) { }
-
-        public DllCharacteristics DllCharacteristics { get { throw null; } }
-
-        public int FileAlignment { get { throw null; } }
-
-        public ulong ImageBase { get { throw null; } }
-
-        public Characteristics ImageCharacteristics { get { throw null; } }
-
-        public Machine Machine { get { throw null; } }
-
-        public ushort MajorImageVersion { get { throw null; } }
-
-        public byte MajorLinkerVersion { get { throw null; } }
-
-        public ushort MajorOperatingSystemVersion { get { throw null; } }
-
-        public ushort MajorSubsystemVersion { get { throw null; } }
-
-        public ushort MinorImageVersion { get { throw null; } }
-
-        public byte MinorLinkerVersion { get { throw null; } }
-
-        public ushort MinorOperatingSystemVersion { get { throw null; } }
-
-        public ushort MinorSubsystemVersion { get { throw null; } }
-
-        public int SectionAlignment { get { throw null; } }
-
-        public ulong SizeOfHeapCommit { get { throw null; } }
-
-        public ulong SizeOfHeapReserve { get { throw null; } }
-
-        public ulong SizeOfStackCommit { get { throw null; } }
-
-        public ulong SizeOfStackReserve { get { throw null; } }
-
-        public Subsystem Subsystem { get { throw null; } }
-
-        public static PEHeaderBuilder CreateExecutableHeader() { throw null; }
-
-        public static PEHeaderBuilder CreateLibraryHeader() { throw null; }
-    }
-
-    public sealed partial class PEHeaders
-    {
-        public PEHeaders(IO.Stream peStream, int size, bool isLoadedImage) { }
-
-        public PEHeaders(IO.Stream peStream, int size) { }
-
-        public PEHeaders(IO.Stream peStream) { }
-
-        public CoffHeader CoffHeader { get { throw null; } }
-
-        public int CoffHeaderStartOffset { get { throw null; } }
-
-        public CorHeader? CorHeader { get { throw null; } }
-
-        public int CorHeaderStartOffset { get { throw null; } }
-
-        public bool IsCoffOnly { get { throw null; } }
-
-        public bool IsConsoleApplication { get { throw null; } }
-
-        public bool IsDll { get { throw null; } }
-
-        public bool IsExe { get { throw null; } }
-
-        public int MetadataSize { get { throw null; } }
-
-        public int MetadataStartOffset { get { throw null; } }
-
-        public PEHeader? PEHeader { get { throw null; } }
-
-        public int PEHeaderStartOffset { get { throw null; } }
-
-        public Collections.Immutable.ImmutableArray<SectionHeader> SectionHeaders { get { throw null; } }
-
-        public int GetContainingSectionIndex(int relativeVirtualAddress) { throw null; }
-
-        public bool TryGetDirectoryOffset(DirectoryEntry directory, out int offset) { throw null; }
-    }
-
-    public enum PEMagic : ushort
-    {
-        PE32 = 267,
-        PE32Plus = 523
-    }
-
-    public readonly partial struct PEMemoryBlock
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public int Length { get { throw null; } }
-
-        public unsafe byte* Pointer { get { throw null; } }
-
-        public readonly Collections.Immutable.ImmutableArray<byte> GetContent() { throw null; }
-
-        public readonly Collections.Immutable.ImmutableArray<byte> GetContent(int start, int length) { throw null; }
-
-        public readonly Metadata.BlobReader GetReader() { throw null; }
-
-        public readonly Metadata.BlobReader GetReader(int start, int length) { throw null; }
-    }
-
-    public sealed partial class PEReader : IDisposable
-    {
-        public unsafe PEReader(byte* peImage, int size, bool isLoadedImage) { }
-
-        public unsafe PEReader(byte* peImage, int size) { }
-
-        public PEReader(Collections.Immutable.ImmutableArray<byte> peImage) { }
-
-        public PEReader(IO.Stream peStream, PEStreamOptions options, int size) { }
-
-        public PEReader(IO.Stream peStream, PEStreamOptions options) { }
-
-        public PEReader(IO.Stream peStream) { }
-
-        public bool HasMetadata { get { throw null; } }
-
-        public bool IsEntireImageAvailable { get { throw null; } }
-
-        public bool IsLoadedImage { get { throw null; } }
-
-        public PEHeaders PEHeaders { get { throw null; } }
-
-        public void Dispose() { }
-
-        public PEMemoryBlock GetEntireImage() { throw null; }
-
-        public PEMemoryBlock GetMetadata() { throw null; }
-
-        public PEMemoryBlock GetSectionData(int relativeVirtualAddress) { throw null; }
-
-        public PEMemoryBlock GetSectionData(string sectionName) { throw null; }
-
-        public CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(DebugDirectoryEntry entry) { throw null; }
-
-        public Collections.Immutable.ImmutableArray<DebugDirectoryEntry> ReadDebugDirectory() { throw null; }
-
-        public Metadata.MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData(DebugDirectoryEntry entry) { throw null; }
-
-        public PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(DebugDirectoryEntry entry) { throw null; }
-
-        public bool TryOpenAssociatedPortablePdb(string peImagePath, Func<string, IO.Stream?> pdbFileStreamProvider, out Metadata.MetadataReaderProvider? pdbReaderProvider, out string? pdbPath) { throw null; }
-    }
-
-    [Flags]
-    public enum PEStreamOptions
-    {
-        Default = 0,
-        LeaveOpen = 1,
-        PrefetchMetadata = 2,
-        PrefetchEntireImage = 4,
-        IsLoadedImage = 8
-    }
-
-    public abstract partial class ResourceSectionBuilder
-    {
-        protected internal abstract void Serialize(Metadata.BlobBuilder builder, SectionLocation location);
-    }
-
-    [Flags]
-    public enum SectionCharacteristics : uint
-    {
-        MemWrite = 2147483648U,
-        TypeReg = 0U,
-        TypeDSect = 1U,
-        TypeNoLoad = 2U,
-        TypeGroup = 4U,
-        TypeNoPad = 8U,
-        TypeCopy = 16U,
-        ContainsCode = 32U,
-        ContainsInitializedData = 64U,
-        ContainsUninitializedData = 128U,
-        LinkerOther = 256U,
-        LinkerInfo = 512U,
-        TypeOver = 1024U,
-        LinkerRemove = 2048U,
-        LinkerComdat = 4096U,
-        MemProtected = 16384U,
-        NoDeferSpecExc = 16384U,
-        GPRel = 32768U,
-        MemFardata = 32768U,
-        MemSysheap = 65536U,
-        Mem16Bit = 131072U,
-        MemPurgeable = 131072U,
-        MemLocked = 262144U,
-        MemPreload = 524288U,
-        Align1Bytes = 1048576U,
-        Align2Bytes = 2097152U,
-        Align4Bytes = 3145728U,
-        Align8Bytes = 4194304U,
-        Align16Bytes = 5242880U,
-        Align32Bytes = 6291456U,
-        Align64Bytes = 7340032U,
-        Align128Bytes = 8388608U,
-        Align256Bytes = 9437184U,
-        Align512Bytes = 10485760U,
-        Align1024Bytes = 11534336U,
-        Align2048Bytes = 12582912U,
-        Align4096Bytes = 13631488U,
-        Align8192Bytes = 14680064U,
-        AlignMask = 15728640U,
-        LinkerNRelocOvfl = 16777216U,
-        MemDiscardable = 33554432U,
-        MemNotCached = 67108864U,
-        MemNotPaged = 134217728U,
-        MemShared = 268435456U,
-        MemExecute = 536870912U,
-        MemRead = 1073741824U
-    }
-
-    public readonly partial struct SectionHeader
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public string Name { get { throw null; } }
-
-        public ushort NumberOfLineNumbers { get { throw null; } }
-
-        public ushort NumberOfRelocations { get { throw null; } }
-
-        public int PointerToLineNumbers { get { throw null; } }
-
-        public int PointerToRawData { get { throw null; } }
-
-        public int PointerToRelocations { get { throw null; } }
-
-        public SectionCharacteristics SectionCharacteristics { get { throw null; } }
-
-        public int SizeOfRawData { get { throw null; } }
-
-        public int VirtualAddress { get { throw null; } }
-
-        public int VirtualSize { get { throw null; } }
-    }
-
-    public readonly partial struct SectionLocation
-    {
-        private readonly int _dummyPrimitive;
-        public SectionLocation(int relativeVirtualAddress, int pointerToRawData) { }
-
-        public int PointerToRawData { get { throw null; } }
-
-        public int RelativeVirtualAddress { get { throw null; } }
-    }
-
-    public enum Subsystem : ushort
-    {
-        Unknown = 0,
-        Native = 1,
-        WindowsGui = 2,
-        WindowsCui = 3,
-        OS2Cui = 5,
-        PosixCui = 7,
-        NativeWindows = 8,
-        WindowsCEGui = 9,
-        EfiApplication = 10,
-        EfiBootServiceDriver = 11,
-        EfiRuntimeDriver = 12,
-        EfiRom = 13,
-        Xbox = 14,
-        WindowsBootApplication = 16
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.metadata/5.0.0/system.reflection.metadata.nuspec b/src/referencePackages/src/system.reflection.metadata/5.0.0/system.reflection.metadata.nuspec
index cce5e97b..fd9ca4bf 100644
--- a/src/referencePackages/src/system.reflection.metadata/5.0.0/system.reflection.metadata.nuspec
+++ b/src/referencePackages/src/system.reflection.metadata/5.0.0/system.reflection.metadata.nuspec
@@ -26,11 +26,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <serviceable>true</serviceable>
     <repository type="git" url="git://github.com/dotnet/runtime" commit="cf258a14b70ad9069470a108f13765e0e5988f51" />
     <dependencies>
-      <group targetFramework=".NETCoreApp5.0" />
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-        <dependency id="System.Collections.Immutable" version="5.0.0" />
-      </group>
       <group targetFramework=".NETStandard2.0">
         <dependency id="System.Collections.Immutable" version="5.0.0" />
       </group>
diff --git a/src/referencePackages/src/system.reflection.primitives/4.3.0/System.Reflection.Primitives.4.3.0.csproj b/src/referencePackages/src/system.reflection.primitives/4.3.0/System.Reflection.Primitives.4.3.0.csproj
deleted file mode 100644
index 31a6a362..00000000
--- a/src/referencePackages/src/system.reflection.primitives/4.3.0/System.Reflection.Primitives.4.3.0.csproj
+++ /dev/null
@@ -1,14 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0</TargetFrameworks>
-    <AssemblyName>System.Reflection.Primitives</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.reflection.primitives/4.3.0/ref/netstandard1.0/System.Reflection.Primitives.cs b/src/referencePackages/src/system.reflection.primitives/4.3.0/ref/netstandard1.0/System.Reflection.Primitives.cs
deleted file mode 100644
index c5d9ea49..00000000
--- a/src/referencePackages/src/system.reflection.primitives/4.3.0/ref/netstandard1.0/System.Reflection.Primitives.cs
+++ /dev/null
@@ -1,540 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Reflection.Primitives")]
-[assembly: System.Reflection.AssemblyDescription("System.Reflection.Primitives")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Reflection.Primitives")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Reflection
-{
-    [Flags]
-    public enum CallingConventions
-    {
-        Standard = 1,
-        VarArgs = 2,
-        Any = 3,
-        HasThis = 32,
-        ExplicitThis = 64
-    }
-
-    [Flags]
-    public enum EventAttributes
-    {
-        None = 0,
-        SpecialName = 512,
-        RTSpecialName = 1024
-    }
-
-    [Flags]
-    public enum FieldAttributes
-    {
-        PrivateScope = 0,
-        Private = 1,
-        FamANDAssem = 2,
-        Assembly = 3,
-        Family = 4,
-        FamORAssem = 5,
-        Public = 6,
-        FieldAccessMask = 7,
-        Static = 16,
-        InitOnly = 32,
-        Literal = 64,
-        NotSerialized = 128,
-        HasFieldRVA = 256,
-        SpecialName = 512,
-        RTSpecialName = 1024,
-        HasFieldMarshal = 4096,
-        PinvokeImpl = 8192,
-        HasDefault = 32768
-    }
-
-    [Flags]
-    public enum GenericParameterAttributes
-    {
-        None = 0,
-        Covariant = 1,
-        Contravariant = 2,
-        VarianceMask = 3,
-        ReferenceTypeConstraint = 4,
-        NotNullableValueTypeConstraint = 8,
-        DefaultConstructorConstraint = 16,
-        SpecialConstraintMask = 28
-    }
-
-    [Flags]
-    public enum MethodAttributes
-    {
-        PrivateScope = 0,
-        ReuseSlot = 0,
-        Private = 1,
-        FamANDAssem = 2,
-        Assembly = 3,
-        Family = 4,
-        FamORAssem = 5,
-        Public = 6,
-        MemberAccessMask = 7,
-        UnmanagedExport = 8,
-        Static = 16,
-        Final = 32,
-        Virtual = 64,
-        HideBySig = 128,
-        NewSlot = 256,
-        VtableLayoutMask = 256,
-        CheckAccessOnOverride = 512,
-        Abstract = 1024,
-        SpecialName = 2048,
-        RTSpecialName = 4096,
-        PinvokeImpl = 8192,
-        HasSecurity = 16384,
-        RequireSecObject = 32768
-    }
-
-    public enum MethodImplAttributes
-    {
-        IL = 0,
-        Managed = 0,
-        Native = 1,
-        OPTIL = 2,
-        CodeTypeMask = 3,
-        Runtime = 3,
-        ManagedMask = 4,
-        Unmanaged = 4,
-        NoInlining = 8,
-        ForwardRef = 16,
-        Synchronized = 32,
-        NoOptimization = 64,
-        PreserveSig = 128,
-        AggressiveInlining = 256,
-        InternalCall = 4096
-    }
-
-    [Flags]
-    public enum ParameterAttributes
-    {
-        None = 0,
-        In = 1,
-        Out = 2,
-        Lcid = 4,
-        Retval = 8,
-        Optional = 16,
-        HasDefault = 4096,
-        HasFieldMarshal = 8192
-    }
-
-    [Flags]
-    public enum PropertyAttributes
-    {
-        None = 0,
-        SpecialName = 512,
-        RTSpecialName = 1024,
-        HasDefault = 4096
-    }
-
-    [Flags]
-    public enum TypeAttributes
-    {
-        AnsiClass = 0,
-        AutoLayout = 0,
-        Class = 0,
-        NotPublic = 0,
-        Public = 1,
-        NestedPublic = 2,
-        NestedPrivate = 3,
-        NestedFamily = 4,
-        NestedAssembly = 5,
-        NestedFamANDAssem = 6,
-        NestedFamORAssem = 7,
-        VisibilityMask = 7,
-        SequentialLayout = 8,
-        ExplicitLayout = 16,
-        LayoutMask = 24,
-        ClassSemanticsMask = 32,
-        Interface = 32,
-        Abstract = 128,
-        Sealed = 256,
-        SpecialName = 1024,
-        RTSpecialName = 2048,
-        Import = 4096,
-        Serializable = 8192,
-        WindowsRuntime = 16384,
-        UnicodeClass = 65536,
-        AutoClass = 131072,
-        CustomFormatClass = 196608,
-        StringFormatMask = 196608,
-        HasSecurity = 262144,
-        BeforeFieldInit = 1048576,
-        CustomFormatMask = 12582912
-    }
-}
-
-namespace System.Reflection.Emit
-{
-    public enum FlowControl
-    {
-        Branch = 0,
-        Break = 1,
-        Call = 2,
-        Cond_Branch = 3,
-        Meta = 4,
-        Next = 5,
-        Return = 7,
-        Throw = 8
-    }
-
-    public partial struct OpCode
-    {
-        public FlowControl FlowControl { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public OpCodeType OpCodeType { get { throw null; } }
-
-        public OperandType OperandType { get { throw null; } }
-
-        public int Size { get { throw null; } }
-
-        public StackBehaviour StackBehaviourPop { get { throw null; } }
-
-        public StackBehaviour StackBehaviourPush { get { throw null; } }
-
-        public short Value { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(OpCode obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(OpCode a, OpCode b) { throw null; }
-
-        public static bool operator !=(OpCode a, OpCode b) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class OpCodes
-    {
-        internal OpCodes() { }
-
-        public static readonly OpCode Add;
-        public static readonly OpCode Add_Ovf;
-        public static readonly OpCode Add_Ovf_Un;
-        public static readonly OpCode And;
-        public static readonly OpCode Arglist;
-        public static readonly OpCode Beq;
-        public static readonly OpCode Beq_S;
-        public static readonly OpCode Bge;
-        public static readonly OpCode Bge_S;
-        public static readonly OpCode Bge_Un;
-        public static readonly OpCode Bge_Un_S;
-        public static readonly OpCode Bgt;
-        public static readonly OpCode Bgt_S;
-        public static readonly OpCode Bgt_Un;
-        public static readonly OpCode Bgt_Un_S;
-        public static readonly OpCode Ble;
-        public static readonly OpCode Ble_S;
-        public static readonly OpCode Ble_Un;
-        public static readonly OpCode Ble_Un_S;
-        public static readonly OpCode Blt;
-        public static readonly OpCode Blt_S;
-        public static readonly OpCode Blt_Un;
-        public static readonly OpCode Blt_Un_S;
-        public static readonly OpCode Bne_Un;
-        public static readonly OpCode Bne_Un_S;
-        public static readonly OpCode Box;
-        public static readonly OpCode Br;
-        public static readonly OpCode Br_S;
-        public static readonly OpCode Break;
-        public static readonly OpCode Brfalse;
-        public static readonly OpCode Brfalse_S;
-        public static readonly OpCode Brtrue;
-        public static readonly OpCode Brtrue_S;
-        public static readonly OpCode Call;
-        public static readonly OpCode Calli;
-        public static readonly OpCode Callvirt;
-        public static readonly OpCode Castclass;
-        public static readonly OpCode Ceq;
-        public static readonly OpCode Cgt;
-        public static readonly OpCode Cgt_Un;
-        public static readonly OpCode Ckfinite;
-        public static readonly OpCode Clt;
-        public static readonly OpCode Clt_Un;
-        public static readonly OpCode Constrained;
-        public static readonly OpCode Conv_I;
-        public static readonly OpCode Conv_I1;
-        public static readonly OpCode Conv_I2;
-        public static readonly OpCode Conv_I4;
-        public static readonly OpCode Conv_I8;
-        public static readonly OpCode Conv_Ovf_I;
-        public static readonly OpCode Conv_Ovf_I_Un;
-        public static readonly OpCode Conv_Ovf_I1;
-        public static readonly OpCode Conv_Ovf_I1_Un;
-        public static readonly OpCode Conv_Ovf_I2;
-        public static readonly OpCode Conv_Ovf_I2_Un;
-        public static readonly OpCode Conv_Ovf_I4;
-        public static readonly OpCode Conv_Ovf_I4_Un;
-        public static readonly OpCode Conv_Ovf_I8;
-        public static readonly OpCode Conv_Ovf_I8_Un;
-        public static readonly OpCode Conv_Ovf_U;
-        public static readonly OpCode Conv_Ovf_U_Un;
-        public static readonly OpCode Conv_Ovf_U1;
-        public static readonly OpCode Conv_Ovf_U1_Un;
-        public static readonly OpCode Conv_Ovf_U2;
-        public static readonly OpCode Conv_Ovf_U2_Un;
-        public static readonly OpCode Conv_Ovf_U4;
-        public static readonly OpCode Conv_Ovf_U4_Un;
-        public static readonly OpCode Conv_Ovf_U8;
-        public static readonly OpCode Conv_Ovf_U8_Un;
-        public static readonly OpCode Conv_R_Un;
-        public static readonly OpCode Conv_R4;
-        public static readonly OpCode Conv_R8;
-        public static readonly OpCode Conv_U;
-        public static readonly OpCode Conv_U1;
-        public static readonly OpCode Conv_U2;
-        public static readonly OpCode Conv_U4;
-        public static readonly OpCode Conv_U8;
-        public static readonly OpCode Cpblk;
-        public static readonly OpCode Cpobj;
-        public static readonly OpCode Div;
-        public static readonly OpCode Div_Un;
-        public static readonly OpCode Dup;
-        public static readonly OpCode Endfilter;
-        public static readonly OpCode Endfinally;
-        public static readonly OpCode Initblk;
-        public static readonly OpCode Initobj;
-        public static readonly OpCode Isinst;
-        public static readonly OpCode Jmp;
-        public static readonly OpCode Ldarg;
-        public static readonly OpCode Ldarg_0;
-        public static readonly OpCode Ldarg_1;
-        public static readonly OpCode Ldarg_2;
-        public static readonly OpCode Ldarg_3;
-        public static readonly OpCode Ldarg_S;
-        public static readonly OpCode Ldarga;
-        public static readonly OpCode Ldarga_S;
-        public static readonly OpCode Ldc_I4;
-        public static readonly OpCode Ldc_I4_0;
-        public static readonly OpCode Ldc_I4_1;
-        public static readonly OpCode Ldc_I4_2;
-        public static readonly OpCode Ldc_I4_3;
-        public static readonly OpCode Ldc_I4_4;
-        public static readonly OpCode Ldc_I4_5;
-        public static readonly OpCode Ldc_I4_6;
-        public static readonly OpCode Ldc_I4_7;
-        public static readonly OpCode Ldc_I4_8;
-        public static readonly OpCode Ldc_I4_M1;
-        public static readonly OpCode Ldc_I4_S;
-        public static readonly OpCode Ldc_I8;
-        public static readonly OpCode Ldc_R4;
-        public static readonly OpCode Ldc_R8;
-        public static readonly OpCode Ldelem;
-        public static readonly OpCode Ldelem_I;
-        public static readonly OpCode Ldelem_I1;
-        public static readonly OpCode Ldelem_I2;
-        public static readonly OpCode Ldelem_I4;
-        public static readonly OpCode Ldelem_I8;
-        public static readonly OpCode Ldelem_R4;
-        public static readonly OpCode Ldelem_R8;
-        public static readonly OpCode Ldelem_Ref;
-        public static readonly OpCode Ldelem_U1;
-        public static readonly OpCode Ldelem_U2;
-        public static readonly OpCode Ldelem_U4;
-        public static readonly OpCode Ldelema;
-        public static readonly OpCode Ldfld;
-        public static readonly OpCode Ldflda;
-        public static readonly OpCode Ldftn;
-        public static readonly OpCode Ldind_I;
-        public static readonly OpCode Ldind_I1;
-        public static readonly OpCode Ldind_I2;
-        public static readonly OpCode Ldind_I4;
-        public static readonly OpCode Ldind_I8;
-        public static readonly OpCode Ldind_R4;
-        public static readonly OpCode Ldind_R8;
-        public static readonly OpCode Ldind_Ref;
-        public static readonly OpCode Ldind_U1;
-        public static readonly OpCode Ldind_U2;
-        public static readonly OpCode Ldind_U4;
-        public static readonly OpCode Ldlen;
-        public static readonly OpCode Ldloc;
-        public static readonly OpCode Ldloc_0;
-        public static readonly OpCode Ldloc_1;
-        public static readonly OpCode Ldloc_2;
-        public static readonly OpCode Ldloc_3;
-        public static readonly OpCode Ldloc_S;
-        public static readonly OpCode Ldloca;
-        public static readonly OpCode Ldloca_S;
-        public static readonly OpCode Ldnull;
-        public static readonly OpCode Ldobj;
-        public static readonly OpCode Ldsfld;
-        public static readonly OpCode Ldsflda;
-        public static readonly OpCode Ldstr;
-        public static readonly OpCode Ldtoken;
-        public static readonly OpCode Ldvirtftn;
-        public static readonly OpCode Leave;
-        public static readonly OpCode Leave_S;
-        public static readonly OpCode Localloc;
-        public static readonly OpCode Mkrefany;
-        public static readonly OpCode Mul;
-        public static readonly OpCode Mul_Ovf;
-        public static readonly OpCode Mul_Ovf_Un;
-        public static readonly OpCode Neg;
-        public static readonly OpCode Newarr;
-        public static readonly OpCode Newobj;
-        public static readonly OpCode Nop;
-        public static readonly OpCode Not;
-        public static readonly OpCode Or;
-        public static readonly OpCode Pop;
-        public static readonly OpCode Prefix1;
-        public static readonly OpCode Prefix2;
-        public static readonly OpCode Prefix3;
-        public static readonly OpCode Prefix4;
-        public static readonly OpCode Prefix5;
-        public static readonly OpCode Prefix6;
-        public static readonly OpCode Prefix7;
-        public static readonly OpCode Prefixref;
-        public static readonly OpCode Readonly;
-        public static readonly OpCode Refanytype;
-        public static readonly OpCode Refanyval;
-        public static readonly OpCode Rem;
-        public static readonly OpCode Rem_Un;
-        public static readonly OpCode Ret;
-        public static readonly OpCode Rethrow;
-        public static readonly OpCode Shl;
-        public static readonly OpCode Shr;
-        public static readonly OpCode Shr_Un;
-        public static readonly OpCode Sizeof;
-        public static readonly OpCode Starg;
-        public static readonly OpCode Starg_S;
-        public static readonly OpCode Stelem;
-        public static readonly OpCode Stelem_I;
-        public static readonly OpCode Stelem_I1;
-        public static readonly OpCode Stelem_I2;
-        public static readonly OpCode Stelem_I4;
-        public static readonly OpCode Stelem_I8;
-        public static readonly OpCode Stelem_R4;
-        public static readonly OpCode Stelem_R8;
-        public static readonly OpCode Stelem_Ref;
-        public static readonly OpCode Stfld;
-        public static readonly OpCode Stind_I;
-        public static readonly OpCode Stind_I1;
-        public static readonly OpCode Stind_I2;
-        public static readonly OpCode Stind_I4;
-        public static readonly OpCode Stind_I8;
-        public static readonly OpCode Stind_R4;
-        public static readonly OpCode Stind_R8;
-        public static readonly OpCode Stind_Ref;
-        public static readonly OpCode Stloc;
-        public static readonly OpCode Stloc_0;
-        public static readonly OpCode Stloc_1;
-        public static readonly OpCode Stloc_2;
-        public static readonly OpCode Stloc_3;
-        public static readonly OpCode Stloc_S;
-        public static readonly OpCode Stobj;
-        public static readonly OpCode Stsfld;
-        public static readonly OpCode Sub;
-        public static readonly OpCode Sub_Ovf;
-        public static readonly OpCode Sub_Ovf_Un;
-        public static readonly OpCode Switch;
-        public static readonly OpCode Tailcall;
-        public static readonly OpCode Throw;
-        public static readonly OpCode Unaligned;
-        public static readonly OpCode Unbox;
-        public static readonly OpCode Unbox_Any;
-        public static readonly OpCode Volatile;
-        public static readonly OpCode Xor;
-        public static bool TakesSingleByteArgument(OpCode inst) { throw null; }
-    }
-
-    public enum OpCodeType
-    {
-        Macro = 1,
-        Nternal = 2,
-        Objmodel = 3,
-        Prefix = 4,
-        Primitive = 5
-    }
-
-    public enum OperandType
-    {
-        InlineBrTarget = 0,
-        InlineField = 1,
-        InlineI = 2,
-        InlineI8 = 3,
-        InlineMethod = 4,
-        InlineNone = 5,
-        InlineR = 7,
-        InlineSig = 9,
-        InlineString = 10,
-        InlineSwitch = 11,
-        InlineTok = 12,
-        InlineType = 13,
-        InlineVar = 14,
-        ShortInlineBrTarget = 15,
-        ShortInlineI = 16,
-        ShortInlineR = 17,
-        ShortInlineVar = 18
-    }
-
-    public enum PackingSize
-    {
-        Unspecified = 0,
-        Size1 = 1,
-        Size2 = 2,
-        Size4 = 4,
-        Size8 = 8,
-        Size16 = 16,
-        Size32 = 32,
-        Size64 = 64,
-        Size128 = 128
-    }
-
-    public enum StackBehaviour
-    {
-        Pop0 = 0,
-        Pop1 = 1,
-        Pop1_pop1 = 2,
-        Popi = 3,
-        Popi_pop1 = 4,
-        Popi_popi = 5,
-        Popi_popi8 = 6,
-        Popi_popi_popi = 7,
-        Popi_popr4 = 8,
-        Popi_popr8 = 9,
-        Popref = 10,
-        Popref_pop1 = 11,
-        Popref_popi = 12,
-        Popref_popi_popi = 13,
-        Popref_popi_popi8 = 14,
-        Popref_popi_popr4 = 15,
-        Popref_popi_popr8 = 16,
-        Popref_popi_popref = 17,
-        Push0 = 18,
-        Push1 = 19,
-        Push1_push1 = 20,
-        Pushi = 21,
-        Pushi8 = 22,
-        Pushr4 = 23,
-        Pushr8 = 24,
-        Pushref = 25,
-        Varpop = 26,
-        Varpush = 27,
-        Popref_popi_pop1 = 28
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.primitives/4.3.0/system.reflection.primitives.nuspec b/src/referencePackages/src/system.reflection.primitives/4.3.0/system.reflection.primitives.nuspec
deleted file mode 100644
index e85dee2d..00000000
--- a/src/referencePackages/src/system.reflection.primitives/4.3.0/system.reflection.primitives.nuspec
+++ /dev/null
@@ -1,39 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Reflection.Primitives</id>
-    <version>4.3.0</version>
-    <title>System.Reflection.Primitives</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides common enumerations for reflection-based libraries.
-
-Commonly Used Types:
-System.Reflection.FieldAttributes
-System.Reflection.Emit.OpCode
-System.Reflection.TypeAttributes
-System.Reflection.MethodAttributes
-System.Reflection.CallingConventions
-System.Reflection.PropertyAttributes
-System.Reflection.EventAttributes
-System.Reflection.ParameterAttributes
-System.Reflection.GenericParameterAttributes
-System.Reflection.MethodImplAttributes
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.typeextensions/4.3.0/System.Reflection.TypeExtensions.4.3.0.csproj b/src/referencePackages/src/system.reflection.typeextensions/4.3.0/System.Reflection.TypeExtensions.4.3.0.csproj
deleted file mode 100644
index 02fa2311..00000000
--- a/src/referencePackages/src/system.reflection.typeextensions/4.3.0/System.Reflection.TypeExtensions.4.3.0.csproj
+++ /dev/null
@@ -1,18 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3;netstandard1.5</TargetFrameworks>
-    <AssemblyName>System.Reflection.TypeExtensions</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.5'">
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.reflection.typeextensions/4.3.0/ref/netstandard1.3/System.Reflection.TypeExtensions.cs b/src/referencePackages/src/system.reflection.typeextensions/4.3.0/ref/netstandard1.3/System.Reflection.TypeExtensions.cs
deleted file mode 100644
index 2e7dac36..00000000
--- a/src/referencePackages/src/system.reflection.typeextensions/4.3.0/ref/netstandard1.3/System.Reflection.TypeExtensions.cs
+++ /dev/null
@@ -1,150 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Reflection.TypeExtensions")]
-[assembly: System.Reflection.AssemblyDescription("System.Reflection.TypeExtensions")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Reflection.TypeExtensions")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.23123.00")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.23123.00 built by: PROJECTKREL")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata("", "")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Reflection
-{
-    public static partial class AssemblyExtensions
-    {
-        public static Type[] GetExportedTypes(this Assembly assembly) { throw null; }
-
-        public static Module[] GetModules(this Assembly assembly) { throw null; }
-
-        public static Type[] GetTypes(this Assembly assembly) { throw null; }
-    }
-
-    [Flags]
-    public enum BindingFlags
-    {
-        IgnoreCase = 1,
-        DeclaredOnly = 2,
-        Instance = 4,
-        Static = 8,
-        Public = 16,
-        NonPublic = 32,
-        FlattenHierarchy = 64
-    }
-
-    public static partial class EventInfoExtensions
-    {
-        public static MethodInfo GetAddMethod(this EventInfo eventInfo, bool nonPublic) { throw null; }
-
-        public static MethodInfo GetAddMethod(this EventInfo eventInfo) { throw null; }
-
-        public static MethodInfo GetRaiseMethod(this EventInfo eventInfo, bool nonPublic) { throw null; }
-
-        public static MethodInfo GetRaiseMethod(this EventInfo eventInfo) { throw null; }
-
-        public static MethodInfo GetRemoveMethod(this EventInfo eventInfo, bool nonPublic) { throw null; }
-
-        public static MethodInfo GetRemoveMethod(this EventInfo eventInfo) { throw null; }
-    }
-
-    public static partial class MethodInfoExtensions
-    {
-        public static MethodInfo GetBaseDefinition(this MethodInfo method) { throw null; }
-    }
-
-    public static partial class PropertyInfoExtensions
-    {
-        public static MethodInfo[] GetAccessors(this PropertyInfo property, bool nonPublic) { throw null; }
-
-        public static MethodInfo[] GetAccessors(this PropertyInfo property) { throw null; }
-
-        public static MethodInfo GetGetMethod(this PropertyInfo property, bool nonPublic) { throw null; }
-
-        public static MethodInfo GetGetMethod(this PropertyInfo property) { throw null; }
-
-        public static MethodInfo GetSetMethod(this PropertyInfo property, bool nonPublic) { throw null; }
-
-        public static MethodInfo GetSetMethod(this PropertyInfo property) { throw null; }
-    }
-
-    public static partial class TypeExtensions
-    {
-        public static ConstructorInfo GetConstructor(this Type type, Type[] types) { throw null; }
-
-        public static ConstructorInfo[] GetConstructors(this Type type, BindingFlags bindingAttr) { throw null; }
-
-        public static ConstructorInfo[] GetConstructors(this Type type) { throw null; }
-
-        public static MemberInfo[] GetDefaultMembers(this Type type) { throw null; }
-
-        public static EventInfo GetEvent(this Type type, string name, BindingFlags bindingAttr) { throw null; }
-
-        public static EventInfo GetEvent(this Type type, string name) { throw null; }
-
-        public static EventInfo[] GetEvents(this Type type, BindingFlags bindingAttr) { throw null; }
-
-        public static EventInfo[] GetEvents(this Type type) { throw null; }
-
-        public static FieldInfo GetField(this Type type, string name, BindingFlags bindingAttr) { throw null; }
-
-        public static FieldInfo GetField(this Type type, string name) { throw null; }
-
-        public static FieldInfo[] GetFields(this Type type, BindingFlags bindingAttr) { throw null; }
-
-        public static FieldInfo[] GetFields(this Type type) { throw null; }
-
-        public static Type[] GetGenericArguments(this Type type) { throw null; }
-
-        public static Type[] GetInterfaces(this Type type) { throw null; }
-
-        public static MemberInfo[] GetMember(this Type type, string name, BindingFlags bindingAttr) { throw null; }
-
-        public static MemberInfo[] GetMember(this Type type, string name) { throw null; }
-
-        public static MemberInfo[] GetMembers(this Type type, BindingFlags bindingAttr) { throw null; }
-
-        public static MemberInfo[] GetMembers(this Type type) { throw null; }
-
-        public static MethodInfo GetMethod(this Type type, string name, BindingFlags bindingAttr) { throw null; }
-
-        public static MethodInfo GetMethod(this Type type, string name, Type[] types) { throw null; }
-
-        public static MethodInfo GetMethod(this Type type, string name) { throw null; }
-
-        public static MethodInfo[] GetMethods(this Type type, BindingFlags bindingAttr) { throw null; }
-
-        public static MethodInfo[] GetMethods(this Type type) { throw null; }
-
-        public static Type GetNestedType(this Type type, string name, BindingFlags bindingAttr) { throw null; }
-
-        public static Type[] GetNestedTypes(this Type type, BindingFlags bindingAttr) { throw null; }
-
-        public static PropertyInfo[] GetProperties(this Type type, BindingFlags bindingAttr) { throw null; }
-
-        public static PropertyInfo[] GetProperties(this Type type) { throw null; }
-
-        public static PropertyInfo GetProperty(this Type type, string name, BindingFlags bindingAttr) { throw null; }
-
-        public static PropertyInfo GetProperty(this Type type, string name, Type returnType, Type[] types) { throw null; }
-
-        public static PropertyInfo GetProperty(this Type type, string name, Type returnType) { throw null; }
-
-        public static PropertyInfo GetProperty(this Type type, string name) { throw null; }
-
-        public static bool IsAssignableFrom(this Type type, Type c) { throw null; }
-
-        public static bool IsInstanceOfType(this Type type, object o) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.typeextensions/4.3.0/ref/netstandard1.5/System.Reflection.TypeExtensions.cs b/src/referencePackages/src/system.reflection.typeextensions/4.3.0/ref/netstandard1.5/System.Reflection.TypeExtensions.cs
deleted file mode 100644
index ef429884..00000000
--- a/src/referencePackages/src/system.reflection.typeextensions/4.3.0/ref/netstandard1.5/System.Reflection.TypeExtensions.cs
+++ /dev/null
@@ -1,154 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Reflection.TypeExtensions")]
-[assembly: System.Reflection.AssemblyDescription("System.Reflection.TypeExtensions")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Reflection.TypeExtensions")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-[assembly: System.Runtime.CompilerServices.TypeForwardedTo(typeof(System.Reflection.BindingFlags))]
-namespace System.Reflection
-{
-    public static partial class AssemblyExtensions
-    {
-        public static Type[] GetExportedTypes(this Assembly assembly) { throw null; }
-
-        public static Module[] GetModules(this Assembly assembly) { throw null; }
-
-        public static Type[] GetTypes(this Assembly assembly) { throw null; }
-    }
-
-    public static partial class EventInfoExtensions
-    {
-        public static MethodInfo GetAddMethod(this EventInfo eventInfo, bool nonPublic) { throw null; }
-
-        public static MethodInfo GetAddMethod(this EventInfo eventInfo) { throw null; }
-
-        public static MethodInfo GetRaiseMethod(this EventInfo eventInfo, bool nonPublic) { throw null; }
-
-        public static MethodInfo GetRaiseMethod(this EventInfo eventInfo) { throw null; }
-
-        public static MethodInfo GetRemoveMethod(this EventInfo eventInfo, bool nonPublic) { throw null; }
-
-        public static MethodInfo GetRemoveMethod(this EventInfo eventInfo) { throw null; }
-    }
-
-    public static partial class MemberInfoExtensions
-    {
-        public static int GetMetadataToken(this MemberInfo member) { throw null; }
-
-        public static bool HasMetadataToken(this MemberInfo member) { throw null; }
-    }
-
-    public static partial class MethodInfoExtensions
-    {
-        public static MethodInfo GetBaseDefinition(this MethodInfo method) { throw null; }
-    }
-
-    public static partial class ModuleExtensions
-    {
-        public static Guid GetModuleVersionId(this Module module) { throw null; }
-
-        public static bool HasModuleVersionId(this Module module) { throw null; }
-    }
-
-    public static partial class PropertyInfoExtensions
-    {
-        public static MethodInfo[] GetAccessors(this PropertyInfo property, bool nonPublic) { throw null; }
-
-        public static MethodInfo[] GetAccessors(this PropertyInfo property) { throw null; }
-
-        public static MethodInfo GetGetMethod(this PropertyInfo property, bool nonPublic) { throw null; }
-
-        public static MethodInfo GetGetMethod(this PropertyInfo property) { throw null; }
-
-        public static MethodInfo GetSetMethod(this PropertyInfo property, bool nonPublic) { throw null; }
-
-        public static MethodInfo GetSetMethod(this PropertyInfo property) { throw null; }
-    }
-
-    public static partial class TypeExtensions
-    {
-        public static ConstructorInfo GetConstructor(this Type type, Type[] types) { throw null; }
-
-        public static ConstructorInfo[] GetConstructors(this Type type, BindingFlags bindingAttr) { throw null; }
-
-        public static ConstructorInfo[] GetConstructors(this Type type) { throw null; }
-
-        public static MemberInfo[] GetDefaultMembers(this Type type) { throw null; }
-
-        public static EventInfo GetEvent(this Type type, string name, BindingFlags bindingAttr) { throw null; }
-
-        public static EventInfo GetEvent(this Type type, string name) { throw null; }
-
-        public static EventInfo[] GetEvents(this Type type, BindingFlags bindingAttr) { throw null; }
-
-        public static EventInfo[] GetEvents(this Type type) { throw null; }
-
-        public static FieldInfo GetField(this Type type, string name, BindingFlags bindingAttr) { throw null; }
-
-        public static FieldInfo GetField(this Type type, string name) { throw null; }
-
-        public static FieldInfo[] GetFields(this Type type, BindingFlags bindingAttr) { throw null; }
-
-        public static FieldInfo[] GetFields(this Type type) { throw null; }
-
-        public static Type[] GetGenericArguments(this Type type) { throw null; }
-
-        public static Type[] GetInterfaces(this Type type) { throw null; }
-
-        public static MemberInfo[] GetMember(this Type type, string name, BindingFlags bindingAttr) { throw null; }
-
-        public static MemberInfo[] GetMember(this Type type, string name) { throw null; }
-
-        public static MemberInfo[] GetMembers(this Type type, BindingFlags bindingAttr) { throw null; }
-
-        public static MemberInfo[] GetMembers(this Type type) { throw null; }
-
-        public static MethodInfo GetMethod(this Type type, string name, BindingFlags bindingAttr) { throw null; }
-
-        public static MethodInfo GetMethod(this Type type, string name, Type[] types) { throw null; }
-
-        public static MethodInfo GetMethod(this Type type, string name) { throw null; }
-
-        public static MethodInfo[] GetMethods(this Type type, BindingFlags bindingAttr) { throw null; }
-
-        public static MethodInfo[] GetMethods(this Type type) { throw null; }
-
-        public static Type GetNestedType(this Type type, string name, BindingFlags bindingAttr) { throw null; }
-
-        public static Type[] GetNestedTypes(this Type type, BindingFlags bindingAttr) { throw null; }
-
-        public static PropertyInfo[] GetProperties(this Type type, BindingFlags bindingAttr) { throw null; }
-
-        public static PropertyInfo[] GetProperties(this Type type) { throw null; }
-
-        public static PropertyInfo GetProperty(this Type type, string name, BindingFlags bindingAttr) { throw null; }
-
-        public static PropertyInfo GetProperty(this Type type, string name, Type returnType, Type[] types) { throw null; }
-
-        public static PropertyInfo GetProperty(this Type type, string name, Type returnType) { throw null; }
-
-        public static PropertyInfo GetProperty(this Type type, string name) { throw null; }
-
-        public static bool IsAssignableFrom(this Type type, Type c) { throw null; }
-
-        public static bool IsInstanceOfType(this Type type, object o) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection.typeextensions/4.3.0/system.reflection.typeextensions.nuspec b/src/referencePackages/src/system.reflection.typeextensions/4.3.0/system.reflection.typeextensions.nuspec
deleted file mode 100644
index 947699f5..00000000
--- a/src/referencePackages/src/system.reflection.typeextensions/4.3.0/system.reflection.typeextensions.nuspec
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Reflection.TypeExtensions</id>
-    <version>4.3.0</version>
-    <title>System.Reflection.TypeExtensions</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides extensions methods for System.Type that are designed to be source-compatible with older framework reflection-based APIs.
-
-Commonly Used Types:
-System.Reflection.TypeExtensions
-System.Reflection.BindingFlags
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.5">
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection/4.3.0/System.Reflection.4.3.0.csproj b/src/referencePackages/src/system.reflection/4.3.0/System.Reflection.4.3.0.csproj
deleted file mode 100644
index b1d6a785..00000000
--- a/src/referencePackages/src/system.reflection/4.3.0/System.Reflection.4.3.0.csproj
+++ /dev/null
@@ -1,32 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3;netstandard1.5</TargetFrameworks>
-    <AssemblyName>System.Reflection</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.5'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.reflection/4.3.0/ref/netstandard1.0/System.Reflection.cs b/src/referencePackages/src/system.reflection/4.3.0/ref/netstandard1.0/System.Reflection.cs
deleted file mode 100644
index ec667689..00000000
--- a/src/referencePackages/src/system.reflection/4.3.0/ref/netstandard1.0/System.Reflection.cs
+++ /dev/null
@@ -1,598 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Reflection.AssemblyDescription("System.Reflection.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Reflection.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyTitle("System.Reflection.dll")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Runtime.InteropServices, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Reflection.Emit, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Reflection.Emit.Lightweight, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Reflection
-{
-    public sealed partial class AmbiguousMatchException : Exception
-    {
-        public AmbiguousMatchException() { }
-
-        public AmbiguousMatchException(string message, Exception inner) { }
-
-        public AmbiguousMatchException(string message) { }
-    }
-
-    public abstract partial class Assembly
-    {
-        internal Assembly() { }
-
-        public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get { throw null; } }
-
-        public abstract Collections.Generic.IEnumerable<TypeInfo> DefinedTypes { get; }
-
-        public virtual Collections.Generic.IEnumerable<Type> ExportedTypes { get { throw null; } }
-
-        public virtual string FullName { get { throw null; } }
-
-        public virtual bool IsDynamic { get { throw null; } }
-
-        public virtual Module ManifestModule { get { throw null; } }
-
-        public abstract Collections.Generic.IEnumerable<Module> Modules { get; }
-
-        public override bool Equals(object o) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName) { throw null; }
-
-        public virtual string[] GetManifestResourceNames() { throw null; }
-
-        public virtual IO.Stream GetManifestResourceStream(string name) { throw null; }
-
-        public virtual AssemblyName GetName() { throw null; }
-
-        public virtual Type GetType(string name) { throw null; }
-
-        public static Assembly Load(AssemblyName assemblyRef) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum AssemblyContentType
-    {
-        Default = 0,
-        WindowsRuntime = 1
-    }
-
-    public sealed partial class AssemblyName
-    {
-        public AssemblyName() { }
-
-        public AssemblyName(string assemblyName) { }
-
-        public AssemblyContentType ContentType { get { throw null; } set { } }
-
-        public string CultureName { get { throw null; } }
-
-        public AssemblyNameFlags Flags { get { throw null; } set { } }
-
-        public string FullName { get { throw null; } }
-
-        public string Name { get { throw null; } set { } }
-
-        public Version Version { get { throw null; } set { } }
-
-        public byte[] GetPublicKey() { throw null; }
-
-        public byte[] GetPublicKeyToken() { throw null; }
-
-        public void SetPublicKey(byte[] publicKey) { }
-
-        public void SetPublicKeyToken(byte[] publicKeyToken) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    public abstract partial class ConstructorInfo : MethodBase
-    {
-        internal ConstructorInfo() { }
-
-        public static readonly string ConstructorName;
-        public static readonly string TypeConstructorName;
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public object Invoke(object[] parameters) { throw null; }
-    }
-
-    public partial class CustomAttributeData
-    {
-        internal CustomAttributeData() { }
-
-        public Type AttributeType { get { throw null; } }
-
-        public virtual Collections.Generic.IList<CustomAttributeTypedArgument> ConstructorArguments { get { throw null; } }
-
-        public virtual Collections.Generic.IList<CustomAttributeNamedArgument> NamedArguments { get { throw null; } }
-    }
-
-    public partial struct CustomAttributeNamedArgument
-    {
-        public bool IsField { get { throw null; } }
-
-        public string MemberName { get { throw null; } }
-
-        public CustomAttributeTypedArgument TypedValue { get { throw null; } }
-    }
-
-    public partial struct CustomAttributeTypedArgument
-    {
-        public Type ArgumentType { get { throw null; } }
-
-        public object Value { get { throw null; } }
-    }
-
-    public abstract partial class EventInfo : MemberInfo
-    {
-        internal EventInfo() { }
-
-        public virtual MethodInfo AddMethod { get { throw null; } }
-
-        public abstract EventAttributes Attributes { get; }
-
-        public virtual Type EventHandlerType { get { throw null; } }
-
-        public bool IsSpecialName { get { throw null; } }
-
-        public virtual MethodInfo RaiseMethod { get { throw null; } }
-
-        public virtual MethodInfo RemoveMethod { get { throw null; } }
-
-        public virtual void AddEventHandler(object target, Delegate handler) { }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual void RemoveEventHandler(object target, Delegate handler) { }
-    }
-
-    public abstract partial class FieldInfo : MemberInfo
-    {
-        internal FieldInfo() { }
-
-        public abstract FieldAttributes Attributes { get; }
-        public abstract Type FieldType { get; }
-
-        public bool IsAssembly { get { throw null; } }
-
-        public bool IsFamily { get { throw null; } }
-
-        public bool IsFamilyAndAssembly { get { throw null; } }
-
-        public bool IsFamilyOrAssembly { get { throw null; } }
-
-        public bool IsInitOnly { get { throw null; } }
-
-        public bool IsLiteral { get { throw null; } }
-
-        public bool IsPrivate { get { throw null; } }
-
-        public bool IsPublic { get { throw null; } }
-
-        public bool IsSpecialName { get { throw null; } }
-
-        public bool IsStatic { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType) { throw null; }
-
-        public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public abstract object GetValue(object obj);
-        public void SetValue(object obj, object value) { }
-    }
-
-    public static partial class IntrospectionExtensions
-    {
-        public static TypeInfo GetTypeInfo(this Type type) { throw null; }
-    }
-
-    public partial interface IReflectableType
-    {
-        TypeInfo GetTypeInfo();
-    }
-
-    public partial class LocalVariableInfo
-    {
-        protected LocalVariableInfo() { }
-
-        public virtual bool IsPinned { get { throw null; } }
-
-        public virtual int LocalIndex { get { throw null; } }
-
-        public virtual Type LocalType { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class ManifestResourceInfo
-    {
-        public ManifestResourceInfo(Assembly containingAssembly, string containingFileName, ResourceLocation resourceLocation) { }
-
-        public virtual string FileName { get { throw null; } }
-
-        public virtual Assembly ReferencedAssembly { get { throw null; } }
-
-        public virtual ResourceLocation ResourceLocation { get { throw null; } }
-    }
-
-    public abstract partial class MemberInfo
-    {
-        internal MemberInfo() { }
-
-        public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get { throw null; } }
-
-        public abstract Type DeclaringType { get; }
-
-        public virtual Module Module { get { throw null; } }
-
-        public abstract string Name { get; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-    }
-
-    public abstract partial class MethodBase : MemberInfo
-    {
-        internal MethodBase() { }
-
-        public abstract MethodAttributes Attributes { get; }
-
-        public virtual CallingConventions CallingConvention { get { throw null; } }
-
-        public virtual bool ContainsGenericParameters { get { throw null; } }
-
-        public bool IsAbstract { get { throw null; } }
-
-        public bool IsAssembly { get { throw null; } }
-
-        public bool IsConstructor { get { throw null; } }
-
-        public bool IsFamily { get { throw null; } }
-
-        public bool IsFamilyAndAssembly { get { throw null; } }
-
-        public bool IsFamilyOrAssembly { get { throw null; } }
-
-        public bool IsFinal { get { throw null; } }
-
-        public virtual bool IsGenericMethod { get { throw null; } }
-
-        public virtual bool IsGenericMethodDefinition { get { throw null; } }
-
-        public bool IsHideBySig { get { throw null; } }
-
-        public bool IsPrivate { get { throw null; } }
-
-        public bool IsPublic { get { throw null; } }
-
-        public bool IsSpecialName { get { throw null; } }
-
-        public bool IsStatic { get { throw null; } }
-
-        public bool IsVirtual { get { throw null; } }
-
-        public abstract MethodImplAttributes MethodImplementationFlags { get; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public virtual Type[] GetGenericArguments() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle, RuntimeTypeHandle declaringType) { throw null; }
-
-        public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle) { throw null; }
-
-        public abstract ParameterInfo[] GetParameters();
-        public object Invoke(object obj, object[] parameters) { throw null; }
-    }
-
-    public abstract partial class MethodInfo : MethodBase
-    {
-        internal MethodInfo() { }
-
-        public virtual ParameterInfo ReturnParameter { get { throw null; } }
-
-        public virtual Type ReturnType { get { throw null; } }
-
-        public virtual Delegate CreateDelegate(Type delegateType, object target) { throw null; }
-
-        public virtual Delegate CreateDelegate(Type delegateType) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override Type[] GetGenericArguments() { throw null; }
-
-        public virtual MethodInfo GetGenericMethodDefinition() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual MethodInfo MakeGenericMethod(params Type[] typeArguments) { throw null; }
-    }
-
-    public abstract partial class Module
-    {
-        internal Module() { }
-
-        public virtual Assembly Assembly { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get { throw null; } }
-
-        public virtual string FullyQualifiedName { get { throw null; } }
-
-        public virtual string Name { get { throw null; } }
-
-        public override bool Equals(object o) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class ParameterInfo
-    {
-        internal ParameterInfo() { }
-
-        public virtual ParameterAttributes Attributes { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get { throw null; } }
-
-        public virtual object DefaultValue { get { throw null; } }
-
-        public virtual bool HasDefaultValue { get { throw null; } }
-
-        public bool IsIn { get { throw null; } }
-
-        public bool IsOptional { get { throw null; } }
-
-        public bool IsOut { get { throw null; } }
-
-        public bool IsRetval { get { throw null; } }
-
-        public virtual MemberInfo Member { get { throw null; } }
-
-        public virtual string Name { get { throw null; } }
-
-        public virtual Type ParameterType { get { throw null; } }
-
-        public virtual int Position { get { throw null; } }
-    }
-
-    public abstract partial class PropertyInfo : MemberInfo
-    {
-        internal PropertyInfo() { }
-
-        public abstract PropertyAttributes Attributes { get; }
-        public abstract bool CanRead { get; }
-        public abstract bool CanWrite { get; }
-
-        public virtual MethodInfo GetMethod { get { throw null; } }
-
-        public bool IsSpecialName { get { throw null; } }
-
-        public abstract Type PropertyType { get; }
-
-        public virtual MethodInfo SetMethod { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public virtual object GetConstantValue() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public abstract ParameterInfo[] GetIndexParameters();
-        public virtual object GetValue(object obj, object[] index) { throw null; }
-
-        public object GetValue(object obj) { throw null; }
-
-        public virtual void SetValue(object obj, object value, object[] index) { }
-
-        public void SetValue(object obj, object value) { }
-    }
-
-    public abstract partial class ReflectionContext
-    {
-        public virtual TypeInfo GetTypeForObject(object value) { throw null; }
-
-        public abstract Assembly MapAssembly(Assembly assembly);
-        public abstract TypeInfo MapType(TypeInfo type);
-    }
-
-    public sealed partial class ReflectionTypeLoadException : Exception
-    {
-        public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions, string message) { }
-
-        public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions) { }
-
-        public Exception[] LoaderExceptions { get { throw null; } }
-
-        public Type[] Types { get { throw null; } }
-    }
-
-    [Flags]
-    public enum ResourceLocation
-    {
-        Embedded = 1,
-        ContainedInAnotherAssembly = 2,
-        ContainedInManifestFile = 4
-    }
-
-    public sealed partial class TargetInvocationException : Exception
-    {
-        public TargetInvocationException(Exception inner) { }
-
-        public TargetInvocationException(string message, Exception inner) { }
-    }
-
-    public sealed partial class TargetParameterCountException : Exception
-    {
-        public TargetParameterCountException() { }
-
-        public TargetParameterCountException(string message, Exception inner) { }
-
-        public TargetParameterCountException(string message) { }
-    }
-
-    public abstract partial class TypeInfo : MemberInfo, IReflectableType
-    {
-        internal TypeInfo() { }
-
-        public abstract Assembly Assembly { get; }
-        public abstract string AssemblyQualifiedName { get; }
-        public abstract TypeAttributes Attributes { get; }
-        public abstract Type BaseType { get; }
-        public abstract bool ContainsGenericParameters { get; }
-
-        public virtual Collections.Generic.IEnumerable<ConstructorInfo> DeclaredConstructors { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<EventInfo> DeclaredEvents { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<FieldInfo> DeclaredFields { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<MemberInfo> DeclaredMembers { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<MethodInfo> DeclaredMethods { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<TypeInfo> DeclaredNestedTypes { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<PropertyInfo> DeclaredProperties { get { throw null; } }
-
-        public abstract MethodBase DeclaringMethod { get; }
-        public abstract string FullName { get; }
-        public abstract GenericParameterAttributes GenericParameterAttributes { get; }
-        public abstract int GenericParameterPosition { get; }
-        public abstract Type[] GenericTypeArguments { get; }
-
-        public virtual Type[] GenericTypeParameters { get { throw null; } }
-
-        public abstract Guid GUID { get; }
-
-        public bool HasElementType { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<Type> ImplementedInterfaces { get { throw null; } }
-
-        public bool IsAbstract { get { throw null; } }
-
-        public bool IsAnsiClass { get { throw null; } }
-
-        public bool IsArray { get { throw null; } }
-
-        public bool IsAutoClass { get { throw null; } }
-
-        public bool IsAutoLayout { get { throw null; } }
-
-        public bool IsByRef { get { throw null; } }
-
-        public bool IsClass { get { throw null; } }
-
-        public abstract bool IsEnum { get; }
-
-        public bool IsExplicitLayout { get { throw null; } }
-
-        public abstract bool IsGenericParameter { get; }
-        public abstract bool IsGenericType { get; }
-        public abstract bool IsGenericTypeDefinition { get; }
-
-        public bool IsImport { get { throw null; } }
-
-        public bool IsInterface { get { throw null; } }
-
-        public bool IsLayoutSequential { get { throw null; } }
-
-        public bool IsMarshalByRef { get { throw null; } }
-
-        public bool IsNested { get { throw null; } }
-
-        public bool IsNestedAssembly { get { throw null; } }
-
-        public bool IsNestedFamANDAssem { get { throw null; } }
-
-        public bool IsNestedFamily { get { throw null; } }
-
-        public bool IsNestedFamORAssem { get { throw null; } }
-
-        public bool IsNestedPrivate { get { throw null; } }
-
-        public bool IsNestedPublic { get { throw null; } }
-
-        public bool IsNotPublic { get { throw null; } }
-
-        public bool IsPointer { get { throw null; } }
-
-        public bool IsPrimitive { get { throw null; } }
-
-        public bool IsPublic { get { throw null; } }
-
-        public bool IsSealed { get { throw null; } }
-
-        public abstract bool IsSerializable { get; }
-
-        public bool IsSpecialName { get { throw null; } }
-
-        public bool IsUnicodeClass { get { throw null; } }
-
-        public bool IsValueType { get { throw null; } }
-
-        public bool IsVisible { get { throw null; } }
-
-        public abstract string Namespace { get; }
-
-        public virtual Type AsType() { throw null; }
-
-        public abstract int GetArrayRank();
-        public virtual EventInfo GetDeclaredEvent(string name) { throw null; }
-
-        public virtual FieldInfo GetDeclaredField(string name) { throw null; }
-
-        public virtual MethodInfo GetDeclaredMethod(string name) { throw null; }
-
-        public virtual Collections.Generic.IEnumerable<MethodInfo> GetDeclaredMethods(string name) { throw null; }
-
-        public virtual TypeInfo GetDeclaredNestedType(string name) { throw null; }
-
-        public virtual PropertyInfo GetDeclaredProperty(string name) { throw null; }
-
-        public abstract Type GetElementType();
-        public abstract Type[] GetGenericParameterConstraints();
-        public abstract Type GetGenericTypeDefinition();
-        public virtual bool IsAssignableFrom(TypeInfo typeInfo) { throw null; }
-
-        public virtual bool IsSubclassOf(Type c) { throw null; }
-
-        public abstract Type MakeArrayType();
-        public abstract Type MakeArrayType(int rank);
-        public abstract Type MakeByRefType();
-        public abstract Type MakeGenericType(params Type[] typeArguments);
-        public abstract Type MakePointerType();
-        TypeInfo IReflectableType.GetTypeInfo() { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection/4.3.0/ref/netstandard1.3/System.Reflection.cs b/src/referencePackages/src/system.reflection/4.3.0/ref/netstandard1.3/System.Reflection.cs
deleted file mode 100644
index 23d492a9..00000000
--- a/src/referencePackages/src/system.reflection/4.3.0/ref/netstandard1.3/System.Reflection.cs
+++ /dev/null
@@ -1,607 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Runtime.InteropServices, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Reflection.Emit, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Reflection.Emit.Lightweight, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Private.Reflection.Extensibility, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Reflection")]
-[assembly: System.Reflection.AssemblyDescription("System.Reflection")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Reflection")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.23123.00")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.23123.00 built by: PROJECTKREL")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata("", "")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Reflection
-{
-    public sealed partial class AmbiguousMatchException : Exception
-    {
-        public AmbiguousMatchException() { }
-
-        public AmbiguousMatchException(string message, Exception inner) { }
-
-        public AmbiguousMatchException(string message) { }
-    }
-
-    public abstract partial class Assembly
-    {
-        internal Assembly() { }
-
-        public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get { throw null; } }
-
-        public abstract Collections.Generic.IEnumerable<TypeInfo> DefinedTypes { get; }
-
-        public virtual Collections.Generic.IEnumerable<Type> ExportedTypes { get { throw null; } }
-
-        public virtual string FullName { get { throw null; } }
-
-        public virtual bool IsDynamic { get { throw null; } }
-
-        public virtual Module ManifestModule { get { throw null; } }
-
-        public abstract Collections.Generic.IEnumerable<Module> Modules { get; }
-
-        public override bool Equals(object o) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName) { throw null; }
-
-        public virtual string[] GetManifestResourceNames() { throw null; }
-
-        public virtual IO.Stream GetManifestResourceStream(string name) { throw null; }
-
-        public virtual AssemblyName GetName() { throw null; }
-
-        public virtual Type GetType(string name, bool throwOnError, bool ignoreCase) { throw null; }
-
-        public virtual Type GetType(string name) { throw null; }
-
-        public static Assembly Load(AssemblyName assemblyRef) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum AssemblyContentType
-    {
-        Default = 0,
-        WindowsRuntime = 1
-    }
-
-    public sealed partial class AssemblyName
-    {
-        public AssemblyName() { }
-
-        public AssemblyName(string assemblyName) { }
-
-        public AssemblyContentType ContentType { get { throw null; } set { } }
-
-        public string CultureName { get { throw null; } set { } }
-
-        public AssemblyNameFlags Flags { get { throw null; } set { } }
-
-        public string FullName { get { throw null; } }
-
-        public string Name { get { throw null; } set { } }
-
-        public ProcessorArchitecture ProcessorArchitecture { get { throw null; } set { } }
-
-        public Version Version { get { throw null; } set { } }
-
-        public byte[] GetPublicKey() { throw null; }
-
-        public byte[] GetPublicKeyToken() { throw null; }
-
-        public void SetPublicKey(byte[] publicKey) { }
-
-        public void SetPublicKeyToken(byte[] publicKeyToken) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    public abstract partial class ConstructorInfo : MethodBase
-    {
-        internal ConstructorInfo() { }
-
-        public static readonly string ConstructorName;
-        public static readonly string TypeConstructorName;
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual object Invoke(object[] parameters) { throw null; }
-    }
-
-    public partial class CustomAttributeData
-    {
-        internal CustomAttributeData() { }
-
-        public virtual Type AttributeType { get { throw null; } }
-
-        public virtual Collections.Generic.IList<CustomAttributeTypedArgument> ConstructorArguments { get { throw null; } }
-
-        public virtual Collections.Generic.IList<CustomAttributeNamedArgument> NamedArguments { get { throw null; } }
-    }
-
-    public partial struct CustomAttributeNamedArgument
-    {
-        public bool IsField { get { throw null; } }
-
-        public string MemberName { get { throw null; } }
-
-        public CustomAttributeTypedArgument TypedValue { get { throw null; } }
-    }
-
-    public partial struct CustomAttributeTypedArgument
-    {
-        public Type ArgumentType { get { throw null; } }
-
-        public object Value { get { throw null; } }
-    }
-
-    public abstract partial class EventInfo : MemberInfo
-    {
-        internal EventInfo() { }
-
-        public virtual MethodInfo AddMethod { get { throw null; } }
-
-        public abstract EventAttributes Attributes { get; }
-
-        public virtual Type EventHandlerType { get { throw null; } }
-
-        public bool IsSpecialName { get { throw null; } }
-
-        public virtual MethodInfo RaiseMethod { get { throw null; } }
-
-        public virtual MethodInfo RemoveMethod { get { throw null; } }
-
-        public virtual void AddEventHandler(object target, Delegate handler) { }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual void RemoveEventHandler(object target, Delegate handler) { }
-    }
-
-    public abstract partial class FieldInfo : MemberInfo
-    {
-        internal FieldInfo() { }
-
-        public abstract FieldAttributes Attributes { get; }
-        public abstract Type FieldType { get; }
-
-        public bool IsAssembly { get { throw null; } }
-
-        public bool IsFamily { get { throw null; } }
-
-        public bool IsFamilyAndAssembly { get { throw null; } }
-
-        public bool IsFamilyOrAssembly { get { throw null; } }
-
-        public bool IsInitOnly { get { throw null; } }
-
-        public bool IsLiteral { get { throw null; } }
-
-        public bool IsPrivate { get { throw null; } }
-
-        public bool IsPublic { get { throw null; } }
-
-        public bool IsSpecialName { get { throw null; } }
-
-        public bool IsStatic { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType) { throw null; }
-
-        public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public abstract object GetValue(object obj);
-        public virtual void SetValue(object obj, object value) { }
-    }
-
-    public static partial class IntrospectionExtensions
-    {
-        public static TypeInfo GetTypeInfo(this Type type) { throw null; }
-    }
-
-    public partial interface IReflectableType
-    {
-        TypeInfo GetTypeInfo();
-    }
-
-    public partial class LocalVariableInfo
-    {
-        protected LocalVariableInfo() { }
-
-        public virtual bool IsPinned { get { throw null; } }
-
-        public virtual int LocalIndex { get { throw null; } }
-
-        public virtual Type LocalType { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class ManifestResourceInfo
-    {
-        public ManifestResourceInfo(Assembly containingAssembly, string containingFileName, ResourceLocation resourceLocation) { }
-
-        public virtual string FileName { get { throw null; } }
-
-        public virtual Assembly ReferencedAssembly { get { throw null; } }
-
-        public virtual ResourceLocation ResourceLocation { get { throw null; } }
-    }
-
-    public abstract partial class MemberInfo
-    {
-        internal MemberInfo() { }
-
-        public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get { throw null; } }
-
-        public abstract Type DeclaringType { get; }
-
-        public virtual Module Module { get { throw null; } }
-
-        public abstract string Name { get; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-    }
-
-    public abstract partial class MethodBase : MemberInfo
-    {
-        internal MethodBase() { }
-
-        public abstract MethodAttributes Attributes { get; }
-
-        public virtual CallingConventions CallingConvention { get { throw null; } }
-
-        public virtual bool ContainsGenericParameters { get { throw null; } }
-
-        public bool IsAbstract { get { throw null; } }
-
-        public bool IsAssembly { get { throw null; } }
-
-        public bool IsConstructor { get { throw null; } }
-
-        public bool IsFamily { get { throw null; } }
-
-        public bool IsFamilyAndAssembly { get { throw null; } }
-
-        public bool IsFamilyOrAssembly { get { throw null; } }
-
-        public bool IsFinal { get { throw null; } }
-
-        public virtual bool IsGenericMethod { get { throw null; } }
-
-        public virtual bool IsGenericMethodDefinition { get { throw null; } }
-
-        public bool IsHideBySig { get { throw null; } }
-
-        public bool IsPrivate { get { throw null; } }
-
-        public bool IsPublic { get { throw null; } }
-
-        public bool IsSpecialName { get { throw null; } }
-
-        public bool IsStatic { get { throw null; } }
-
-        public bool IsVirtual { get { throw null; } }
-
-        public abstract MethodImplAttributes MethodImplementationFlags { get; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public virtual Type[] GetGenericArguments() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle, RuntimeTypeHandle declaringType) { throw null; }
-
-        public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle) { throw null; }
-
-        public abstract ParameterInfo[] GetParameters();
-        public virtual object Invoke(object obj, object[] parameters) { throw null; }
-    }
-
-    public abstract partial class MethodInfo : MethodBase
-    {
-        internal MethodInfo() { }
-
-        public virtual ParameterInfo ReturnParameter { get { throw null; } }
-
-        public virtual Type ReturnType { get { throw null; } }
-
-        public virtual Delegate CreateDelegate(Type delegateType, object target) { throw null; }
-
-        public virtual Delegate CreateDelegate(Type delegateType) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override Type[] GetGenericArguments() { throw null; }
-
-        public virtual MethodInfo GetGenericMethodDefinition() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual MethodInfo MakeGenericMethod(params Type[] typeArguments) { throw null; }
-    }
-
-    public abstract partial class Module
-    {
-        internal Module() { }
-
-        public virtual Assembly Assembly { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get { throw null; } }
-
-        public virtual string FullyQualifiedName { get { throw null; } }
-
-        public virtual string Name { get { throw null; } }
-
-        public override bool Equals(object o) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual Type GetType(string className, bool throwOnError, bool ignoreCase) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class ParameterInfo
-    {
-        internal ParameterInfo() { }
-
-        public virtual ParameterAttributes Attributes { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get { throw null; } }
-
-        public virtual object DefaultValue { get { throw null; } }
-
-        public virtual bool HasDefaultValue { get { throw null; } }
-
-        public bool IsIn { get { throw null; } }
-
-        public bool IsOptional { get { throw null; } }
-
-        public bool IsOut { get { throw null; } }
-
-        public bool IsRetval { get { throw null; } }
-
-        public virtual MemberInfo Member { get { throw null; } }
-
-        public virtual string Name { get { throw null; } }
-
-        public virtual Type ParameterType { get { throw null; } }
-
-        public virtual int Position { get { throw null; } }
-    }
-
-    public abstract partial class PropertyInfo : MemberInfo
-    {
-        internal PropertyInfo() { }
-
-        public abstract PropertyAttributes Attributes { get; }
-        public abstract bool CanRead { get; }
-        public abstract bool CanWrite { get; }
-
-        public virtual MethodInfo GetMethod { get { throw null; } }
-
-        public bool IsSpecialName { get { throw null; } }
-
-        public abstract Type PropertyType { get; }
-
-        public virtual MethodInfo SetMethod { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public virtual object GetConstantValue() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public abstract ParameterInfo[] GetIndexParameters();
-        public virtual object GetValue(object obj, object[] index) { throw null; }
-
-        public object GetValue(object obj) { throw null; }
-
-        public virtual void SetValue(object obj, object value, object[] index) { }
-
-        public void SetValue(object obj, object value) { }
-    }
-
-    public abstract partial class ReflectionContext
-    {
-        public virtual TypeInfo GetTypeForObject(object value) { throw null; }
-
-        public abstract Assembly MapAssembly(Assembly assembly);
-        public abstract TypeInfo MapType(TypeInfo type);
-    }
-
-    public sealed partial class ReflectionTypeLoadException : Exception
-    {
-        public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions, string message) { }
-
-        public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions) { }
-
-        public Exception[] LoaderExceptions { get { throw null; } }
-
-        public Type[] Types { get { throw null; } }
-    }
-
-    [Flags]
-    public enum ResourceLocation
-    {
-        Embedded = 1,
-        ContainedInAnotherAssembly = 2,
-        ContainedInManifestFile = 4
-    }
-
-    public sealed partial class TargetInvocationException : Exception
-    {
-        public TargetInvocationException(Exception inner) { }
-
-        public TargetInvocationException(string message, Exception inner) { }
-    }
-
-    public sealed partial class TargetParameterCountException : Exception
-    {
-        public TargetParameterCountException() { }
-
-        public TargetParameterCountException(string message, Exception inner) { }
-
-        public TargetParameterCountException(string message) { }
-    }
-
-    public abstract partial class TypeInfo : MemberInfo, IReflectableType
-    {
-        internal TypeInfo() { }
-
-        public abstract Assembly Assembly { get; }
-        public abstract string AssemblyQualifiedName { get; }
-        public abstract TypeAttributes Attributes { get; }
-        public abstract Type BaseType { get; }
-        public abstract bool ContainsGenericParameters { get; }
-
-        public virtual Collections.Generic.IEnumerable<ConstructorInfo> DeclaredConstructors { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<EventInfo> DeclaredEvents { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<FieldInfo> DeclaredFields { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<MemberInfo> DeclaredMembers { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<MethodInfo> DeclaredMethods { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<TypeInfo> DeclaredNestedTypes { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<PropertyInfo> DeclaredProperties { get { throw null; } }
-
-        public abstract MethodBase DeclaringMethod { get; }
-        public abstract string FullName { get; }
-        public abstract GenericParameterAttributes GenericParameterAttributes { get; }
-        public abstract int GenericParameterPosition { get; }
-        public abstract Type[] GenericTypeArguments { get; }
-
-        public virtual Type[] GenericTypeParameters { get { throw null; } }
-
-        public abstract Guid GUID { get; }
-
-        public bool HasElementType { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<Type> ImplementedInterfaces { get { throw null; } }
-
-        public bool IsAbstract { get { throw null; } }
-
-        public bool IsAnsiClass { get { throw null; } }
-
-        public bool IsArray { get { throw null; } }
-
-        public bool IsAutoClass { get { throw null; } }
-
-        public bool IsAutoLayout { get { throw null; } }
-
-        public bool IsByRef { get { throw null; } }
-
-        public bool IsClass { get { throw null; } }
-
-        public abstract bool IsEnum { get; }
-
-        public bool IsExplicitLayout { get { throw null; } }
-
-        public abstract bool IsGenericParameter { get; }
-        public abstract bool IsGenericType { get; }
-        public abstract bool IsGenericTypeDefinition { get; }
-
-        public bool IsImport { get { throw null; } }
-
-        public bool IsInterface { get { throw null; } }
-
-        public bool IsLayoutSequential { get { throw null; } }
-
-        public bool IsMarshalByRef { get { throw null; } }
-
-        public bool IsNested { get { throw null; } }
-
-        public bool IsNestedAssembly { get { throw null; } }
-
-        public bool IsNestedFamANDAssem { get { throw null; } }
-
-        public bool IsNestedFamily { get { throw null; } }
-
-        public bool IsNestedFamORAssem { get { throw null; } }
-
-        public bool IsNestedPrivate { get { throw null; } }
-
-        public bool IsNestedPublic { get { throw null; } }
-
-        public bool IsNotPublic { get { throw null; } }
-
-        public bool IsPointer { get { throw null; } }
-
-        public virtual bool IsPrimitive { get { throw null; } }
-
-        public bool IsPublic { get { throw null; } }
-
-        public bool IsSealed { get { throw null; } }
-
-        public abstract bool IsSerializable { get; }
-
-        public bool IsSpecialName { get { throw null; } }
-
-        public bool IsUnicodeClass { get { throw null; } }
-
-        public virtual bool IsValueType { get { throw null; } }
-
-        public bool IsVisible { get { throw null; } }
-
-        public abstract string Namespace { get; }
-
-        public virtual Type AsType() { throw null; }
-
-        public abstract int GetArrayRank();
-        public virtual EventInfo GetDeclaredEvent(string name) { throw null; }
-
-        public virtual FieldInfo GetDeclaredField(string name) { throw null; }
-
-        public virtual MethodInfo GetDeclaredMethod(string name) { throw null; }
-
-        public virtual Collections.Generic.IEnumerable<MethodInfo> GetDeclaredMethods(string name) { throw null; }
-
-        public virtual TypeInfo GetDeclaredNestedType(string name) { throw null; }
-
-        public virtual PropertyInfo GetDeclaredProperty(string name) { throw null; }
-
-        public abstract Type GetElementType();
-        public abstract Type[] GetGenericParameterConstraints();
-        public abstract Type GetGenericTypeDefinition();
-        public virtual bool IsAssignableFrom(TypeInfo typeInfo) { throw null; }
-
-        public virtual bool IsSubclassOf(Type c) { throw null; }
-
-        public abstract Type MakeArrayType();
-        public abstract Type MakeArrayType(int rank);
-        public abstract Type MakeByRefType();
-        public abstract Type MakeGenericType(params Type[] typeArguments);
-        public abstract Type MakePointerType();
-        TypeInfo IReflectableType.GetTypeInfo() { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection/4.3.0/ref/netstandard1.5/System.Reflection.cs b/src/referencePackages/src/system.reflection/4.3.0/ref/netstandard1.5/System.Reflection.cs
deleted file mode 100644
index 45766b58..00000000
--- a/src/referencePackages/src/system.reflection/4.3.0/ref/netstandard1.5/System.Reflection.cs
+++ /dev/null
@@ -1,946 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Runtime.InteropServices, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Reflection.Emit, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Reflection.Emit.Lightweight, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("System.Private.Reflection.Extensibility, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Reflection")]
-[assembly: System.Reflection.AssemblyDescription("System.Reflection")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Reflection")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Reflection
-{
-    public sealed partial class AmbiguousMatchException : Exception
-    {
-        public AmbiguousMatchException() { }
-
-        public AmbiguousMatchException(string message, Exception inner) { }
-
-        public AmbiguousMatchException(string message) { }
-    }
-
-    public abstract partial class Assembly : ICustomAttributeProvider
-    {
-        internal Assembly() { }
-
-        public virtual string CodeBase { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get { throw null; } }
-
-        public abstract Collections.Generic.IEnumerable<TypeInfo> DefinedTypes { get; }
-
-        public virtual MethodInfo EntryPoint { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<Type> ExportedTypes { get { throw null; } }
-
-        public virtual string FullName { get { throw null; } }
-
-        public virtual string ImageRuntimeVersion { get { throw null; } }
-
-        public virtual bool IsDynamic { get { throw null; } }
-
-        public virtual string Location { get { throw null; } }
-
-        public virtual Module ManifestModule { get { throw null; } }
-
-        public abstract Collections.Generic.IEnumerable<Module> Modules { get; }
-
-        public object CreateInstance(string typeName, bool ignoreCase) { throw null; }
-
-        public object CreateInstance(string typeName) { throw null; }
-
-        public static string CreateQualifiedName(string assemblyName, string typeName) { throw null; }
-
-        public override bool Equals(object o) { throw null; }
-
-        public static Assembly GetEntryAssembly() { throw null; }
-
-        public virtual Type[] GetExportedTypes() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName) { throw null; }
-
-        public virtual string[] GetManifestResourceNames() { throw null; }
-
-        public virtual IO.Stream GetManifestResourceStream(string name) { throw null; }
-
-        public virtual AssemblyName GetName() { throw null; }
-
-        public virtual AssemblyName[] GetReferencedAssemblies() { throw null; }
-
-        public virtual Type GetType(string name, bool throwOnError, bool ignoreCase) { throw null; }
-
-        public virtual Type GetType(string name, bool throwOnError) { throw null; }
-
-        public virtual Type GetType(string name) { throw null; }
-
-        public virtual Type[] GetTypes() { throw null; }
-
-        public static Assembly Load(AssemblyName assemblyRef) { throw null; }
-
-        object[] ICustomAttributeProvider.GetCustomAttributes(bool inherit) { throw null; }
-
-        object[] ICustomAttributeProvider.GetCustomAttributes(Type attributeType, bool inherit) { throw null; }
-
-        bool ICustomAttributeProvider.IsDefined(Type attributeType, bool inherit) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum AssemblyContentType
-    {
-        Default = 0,
-        WindowsRuntime = 1
-    }
-
-    public sealed partial class AssemblyName
-    {
-        public AssemblyName() { }
-
-        public AssemblyName(string assemblyName) { }
-
-        public AssemblyContentType ContentType { get { throw null; } set { } }
-
-        public string CultureName { get { throw null; } set { } }
-
-        public AssemblyNameFlags Flags { get { throw null; } set { } }
-
-        public string FullName { get { throw null; } }
-
-        public string Name { get { throw null; } set { } }
-
-        public ProcessorArchitecture ProcessorArchitecture { get { throw null; } set { } }
-
-        public Version Version { get { throw null; } set { } }
-
-        public byte[] GetPublicKey() { throw null; }
-
-        public byte[] GetPublicKeyToken() { throw null; }
-
-        public void SetPublicKey(byte[] publicKey) { }
-
-        public void SetPublicKeyToken(byte[] publicKeyToken) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    [Flags]
-    public enum BindingFlags
-    {
-        Default = 0,
-        IgnoreCase = 1,
-        DeclaredOnly = 2,
-        Instance = 4,
-        Static = 8,
-        Public = 16,
-        NonPublic = 32,
-        FlattenHierarchy = 64,
-        InvokeMethod = 256,
-        CreateInstance = 512,
-        GetField = 1024,
-        SetField = 2048,
-        GetProperty = 4096,
-        SetProperty = 8192
-    }
-
-    public abstract partial class ConstructorInfo : MethodBase
-    {
-        internal ConstructorInfo() { }
-
-        public static readonly string ConstructorName;
-        public static readonly string TypeConstructorName;
-        public override MemberTypes MemberType { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual object Invoke(object[] parameters) { throw null; }
-    }
-
-    public partial class CustomAttributeData
-    {
-        internal CustomAttributeData() { }
-
-        public virtual Type AttributeType { get { throw null; } }
-
-        public virtual ConstructorInfo Constructor { get { throw null; } }
-
-        public virtual Collections.Generic.IList<CustomAttributeTypedArgument> ConstructorArguments { get { throw null; } }
-
-        public virtual Collections.Generic.IList<CustomAttributeNamedArgument> NamedArguments { get { throw null; } }
-
-        public static Collections.Generic.IList<CustomAttributeData> GetCustomAttributes(Assembly target) { throw null; }
-
-        public static Collections.Generic.IList<CustomAttributeData> GetCustomAttributes(MemberInfo target) { throw null; }
-
-        public static Collections.Generic.IList<CustomAttributeData> GetCustomAttributes(Module target) { throw null; }
-
-        public static Collections.Generic.IList<CustomAttributeData> GetCustomAttributes(ParameterInfo target) { throw null; }
-    }
-
-    public partial struct CustomAttributeNamedArgument
-    {
-        public bool IsField { get { throw null; } }
-
-        public string MemberName { get { throw null; } }
-
-        public CustomAttributeTypedArgument TypedValue { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CustomAttributeNamedArgument left, CustomAttributeNamedArgument right) { throw null; }
-
-        public static bool operator !=(CustomAttributeNamedArgument left, CustomAttributeNamedArgument right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial struct CustomAttributeTypedArgument
-    {
-        public Type ArgumentType { get { throw null; } }
-
-        public object Value { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CustomAttributeTypedArgument left, CustomAttributeTypedArgument right) { throw null; }
-
-        public static bool operator !=(CustomAttributeTypedArgument left, CustomAttributeTypedArgument right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public abstract partial class EventInfo : MemberInfo
-    {
-        internal EventInfo() { }
-
-        public virtual MethodInfo AddMethod { get { throw null; } }
-
-        public abstract EventAttributes Attributes { get; }
-
-        public virtual Type EventHandlerType { get { throw null; } }
-
-        public virtual bool IsMulticast { get { throw null; } }
-
-        public bool IsSpecialName { get { throw null; } }
-
-        public override MemberTypes MemberType { get { throw null; } }
-
-        public virtual MethodInfo RaiseMethod { get { throw null; } }
-
-        public virtual MethodInfo RemoveMethod { get { throw null; } }
-
-        public virtual void AddEventHandler(object target, Delegate handler) { }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public MethodInfo GetAddMethod() { throw null; }
-
-        public abstract MethodInfo GetAddMethod(bool nonPublic);
-        public override int GetHashCode() { throw null; }
-
-        public MethodInfo GetRaiseMethod() { throw null; }
-
-        public abstract MethodInfo GetRaiseMethod(bool nonPublic);
-        public MethodInfo GetRemoveMethod() { throw null; }
-
-        public abstract MethodInfo GetRemoveMethod(bool nonPublic);
-        public virtual void RemoveEventHandler(object target, Delegate handler) { }
-    }
-
-    public abstract partial class FieldInfo : MemberInfo
-    {
-        internal FieldInfo() { }
-
-        public abstract FieldAttributes Attributes { get; }
-        public abstract Type FieldType { get; }
-
-        public bool IsAssembly { get { throw null; } }
-
-        public bool IsFamily { get { throw null; } }
-
-        public bool IsFamilyAndAssembly { get { throw null; } }
-
-        public bool IsFamilyOrAssembly { get { throw null; } }
-
-        public bool IsInitOnly { get { throw null; } }
-
-        public bool IsLiteral { get { throw null; } }
-
-        public bool IsPrivate { get { throw null; } }
-
-        public bool IsPublic { get { throw null; } }
-
-        public bool IsSpecialName { get { throw null; } }
-
-        public bool IsStatic { get { throw null; } }
-
-        public override MemberTypes MemberType { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType) { throw null; }
-
-        public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual Type[] GetOptionalCustomModifiers() { throw null; }
-
-        public virtual object GetRawConstantValue() { throw null; }
-
-        public virtual Type[] GetRequiredCustomModifiers() { throw null; }
-
-        public abstract object GetValue(object obj);
-        public virtual void SetValue(object obj, object value) { }
-    }
-
-    public partial interface ICustomAttributeProvider
-    {
-        object[] GetCustomAttributes(bool inherit);
-        object[] GetCustomAttributes(Type attributeType, bool inherit);
-        bool IsDefined(Type attributeType, bool inherit);
-    }
-
-    public static partial class IntrospectionExtensions
-    {
-        public static TypeInfo GetTypeInfo(this Type type) { throw null; }
-    }
-
-    public partial class InvalidFilterCriteriaException : Exception
-    {
-        public InvalidFilterCriteriaException() { }
-
-        public InvalidFilterCriteriaException(string message, Exception inner) { }
-
-        public InvalidFilterCriteriaException(string message) { }
-    }
-
-    public partial interface IReflectableType
-    {
-        TypeInfo GetTypeInfo();
-    }
-
-    public partial class LocalVariableInfo
-    {
-        protected LocalVariableInfo() { }
-
-        public virtual bool IsPinned { get { throw null; } }
-
-        public virtual int LocalIndex { get { throw null; } }
-
-        public virtual Type LocalType { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class ManifestResourceInfo
-    {
-        public ManifestResourceInfo(Assembly containingAssembly, string containingFileName, ResourceLocation resourceLocation) { }
-
-        public virtual string FileName { get { throw null; } }
-
-        public virtual Assembly ReferencedAssembly { get { throw null; } }
-
-        public virtual ResourceLocation ResourceLocation { get { throw null; } }
-    }
-
-    public delegate bool MemberFilter(MemberInfo m, object filterCriteria);
-    public abstract partial class MemberInfo : ICustomAttributeProvider
-    {
-        internal MemberInfo() { }
-
-        public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get { throw null; } }
-
-        public abstract Type DeclaringType { get; }
-        public abstract MemberTypes MemberType { get; }
-
-        public virtual int MetadataToken { get { throw null; } }
-
-        public virtual Module Module { get { throw null; } }
-
-        public abstract string Name { get; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        object[] ICustomAttributeProvider.GetCustomAttributes(bool inherit) { throw null; }
-
-        object[] ICustomAttributeProvider.GetCustomAttributes(Type attributeType, bool inherit) { throw null; }
-
-        bool ICustomAttributeProvider.IsDefined(Type attributeType, bool inherit) { throw null; }
-    }
-
-    [Flags]
-    public enum MemberTypes
-    {
-        Constructor = 1,
-        Event = 2,
-        Field = 4,
-        Method = 8,
-        Property = 16,
-        TypeInfo = 32,
-        Custom = 64,
-        NestedType = 128,
-        All = 191
-    }
-
-    public abstract partial class MethodBase : MemberInfo
-    {
-        internal MethodBase() { }
-
-        public abstract MethodAttributes Attributes { get; }
-
-        public virtual CallingConventions CallingConvention { get { throw null; } }
-
-        public virtual bool ContainsGenericParameters { get { throw null; } }
-
-        public bool IsAbstract { get { throw null; } }
-
-        public bool IsAssembly { get { throw null; } }
-
-        public bool IsConstructor { get { throw null; } }
-
-        public bool IsFamily { get { throw null; } }
-
-        public bool IsFamilyAndAssembly { get { throw null; } }
-
-        public bool IsFamilyOrAssembly { get { throw null; } }
-
-        public bool IsFinal { get { throw null; } }
-
-        public virtual bool IsGenericMethod { get { throw null; } }
-
-        public virtual bool IsGenericMethodDefinition { get { throw null; } }
-
-        public bool IsHideBySig { get { throw null; } }
-
-        public bool IsPrivate { get { throw null; } }
-
-        public bool IsPublic { get { throw null; } }
-
-        public bool IsSpecialName { get { throw null; } }
-
-        public bool IsStatic { get { throw null; } }
-
-        public bool IsVirtual { get { throw null; } }
-
-        public abstract MethodImplAttributes MethodImplementationFlags { get; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public virtual Type[] GetGenericArguments() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle, RuntimeTypeHandle declaringType) { throw null; }
-
-        public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle) { throw null; }
-
-        public abstract MethodImplAttributes GetMethodImplementationFlags();
-        public abstract ParameterInfo[] GetParameters();
-        public virtual object Invoke(object obj, object[] parameters) { throw null; }
-    }
-
-    public abstract partial class MethodInfo : MethodBase
-    {
-        internal MethodInfo() { }
-
-        public override MemberTypes MemberType { get { throw null; } }
-
-        public virtual ParameterInfo ReturnParameter { get { throw null; } }
-
-        public virtual Type ReturnType { get { throw null; } }
-
-        public abstract ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
-
-        public virtual Delegate CreateDelegate(Type delegateType, object target) { throw null; }
-
-        public virtual Delegate CreateDelegate(Type delegateType) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public abstract MethodInfo GetBaseDefinition();
-        public override Type[] GetGenericArguments() { throw null; }
-
-        public virtual MethodInfo GetGenericMethodDefinition() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual MethodInfo MakeGenericMethod(params Type[] typeArguments) { throw null; }
-    }
-
-    public abstract partial class Module : ICustomAttributeProvider
-    {
-        internal Module() { }
-
-        public static readonly TypeFilter FilterTypeName;
-        public static readonly TypeFilter FilterTypeNameIgnoreCase;
-        public virtual Assembly Assembly { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get { throw null; } }
-
-        public virtual string FullyQualifiedName { get { throw null; } }
-
-        public virtual Guid ModuleVersionId { get { throw null; } }
-
-        public virtual string Name { get { throw null; } }
-
-        public virtual string ScopeName { get { throw null; } }
-
-        public override bool Equals(object o) { throw null; }
-
-        public virtual Type[] FindTypes(TypeFilter filter, object filterCriteria) { throw null; }
-
-        public virtual FieldInfo GetField(string name, BindingFlags bindingAttr) { throw null; }
-
-        public FieldInfo GetField(string name) { throw null; }
-
-        public FieldInfo[] GetFields() { throw null; }
-
-        public virtual FieldInfo[] GetFields(BindingFlags bindingFlags) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public MethodInfo GetMethod(string name, Type[] types) { throw null; }
-
-        public MethodInfo GetMethod(string name) { throw null; }
-
-        public MethodInfo[] GetMethods() { throw null; }
-
-        public virtual MethodInfo[] GetMethods(BindingFlags bindingFlags) { throw null; }
-
-        public virtual Type GetType(string className, bool throwOnError, bool ignoreCase) { throw null; }
-
-        public virtual Type GetType(string className, bool ignoreCase) { throw null; }
-
-        public virtual Type GetType(string className) { throw null; }
-
-        public virtual Type[] GetTypes() { throw null; }
-
-        object[] ICustomAttributeProvider.GetCustomAttributes(bool inherit) { throw null; }
-
-        object[] ICustomAttributeProvider.GetCustomAttributes(Type attributeType, bool inherit) { throw null; }
-
-        bool ICustomAttributeProvider.IsDefined(Type attributeType, bool inherit) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class ParameterInfo : ICustomAttributeProvider
-    {
-        internal ParameterInfo() { }
-
-        public virtual ParameterAttributes Attributes { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<CustomAttributeData> CustomAttributes { get { throw null; } }
-
-        public virtual object DefaultValue { get { throw null; } }
-
-        public virtual bool HasDefaultValue { get { throw null; } }
-
-        public bool IsIn { get { throw null; } }
-
-        public bool IsOptional { get { throw null; } }
-
-        public bool IsOut { get { throw null; } }
-
-        public bool IsRetval { get { throw null; } }
-
-        public virtual MemberInfo Member { get { throw null; } }
-
-        public virtual string Name { get { throw null; } }
-
-        public virtual Type ParameterType { get { throw null; } }
-
-        public virtual int Position { get { throw null; } }
-
-        public virtual object RawDefaultValue { get { throw null; } }
-
-        public virtual Type[] GetOptionalCustomModifiers() { throw null; }
-
-        public virtual Type[] GetRequiredCustomModifiers() { throw null; }
-
-        object[] ICustomAttributeProvider.GetCustomAttributes(bool inherit) { throw null; }
-
-        object[] ICustomAttributeProvider.GetCustomAttributes(Type attributeType, bool inherit) { throw null; }
-
-        bool ICustomAttributeProvider.IsDefined(Type attributeType, bool inherit) { throw null; }
-    }
-
-    public partial struct ParameterModifier
-    {
-        public ParameterModifier(int parameterCount) { }
-
-        public bool this[int index] { get { throw null; } set { } }
-    }
-
-    public abstract partial class PropertyInfo : MemberInfo
-    {
-        internal PropertyInfo() { }
-
-        public abstract PropertyAttributes Attributes { get; }
-        public abstract bool CanRead { get; }
-        public abstract bool CanWrite { get; }
-
-        public virtual MethodInfo GetMethod { get { throw null; } }
-
-        public bool IsSpecialName { get { throw null; } }
-
-        public override MemberTypes MemberType { get { throw null; } }
-
-        public abstract Type PropertyType { get; }
-
-        public virtual MethodInfo SetMethod { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public MethodInfo[] GetAccessors() { throw null; }
-
-        public abstract MethodInfo[] GetAccessors(bool nonPublic);
-        public virtual object GetConstantValue() { throw null; }
-
-        public MethodInfo GetGetMethod() { throw null; }
-
-        public abstract MethodInfo GetGetMethod(bool nonPublic);
-        public override int GetHashCode() { throw null; }
-
-        public abstract ParameterInfo[] GetIndexParameters();
-        public virtual Type[] GetOptionalCustomModifiers() { throw null; }
-
-        public virtual object GetRawConstantValue() { throw null; }
-
-        public virtual Type[] GetRequiredCustomModifiers() { throw null; }
-
-        public MethodInfo GetSetMethod() { throw null; }
-
-        public abstract MethodInfo GetSetMethod(bool nonPublic);
-        public virtual object GetValue(object obj, object[] index) { throw null; }
-
-        public object GetValue(object obj) { throw null; }
-
-        public virtual void SetValue(object obj, object value, object[] index) { }
-
-        public void SetValue(object obj, object value) { }
-    }
-
-    public abstract partial class ReflectionContext
-    {
-        public virtual TypeInfo GetTypeForObject(object value) { throw null; }
-
-        public abstract Assembly MapAssembly(Assembly assembly);
-        public abstract TypeInfo MapType(TypeInfo type);
-    }
-
-    public sealed partial class ReflectionTypeLoadException : Exception
-    {
-        public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions, string message) { }
-
-        public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions) { }
-
-        public Exception[] LoaderExceptions { get { throw null; } }
-
-        public Type[] Types { get { throw null; } }
-    }
-
-    [Flags]
-    public enum ResourceLocation
-    {
-        Embedded = 1,
-        ContainedInAnotherAssembly = 2,
-        ContainedInManifestFile = 4
-    }
-
-    public partial class TargetException : Exception
-    {
-        public TargetException() { }
-
-        public TargetException(string message, Exception inner) { }
-
-        public TargetException(string message) { }
-    }
-
-    public sealed partial class TargetInvocationException : Exception
-    {
-        public TargetInvocationException(Exception inner) { }
-
-        public TargetInvocationException(string message, Exception inner) { }
-    }
-
-    public sealed partial class TargetParameterCountException : Exception
-    {
-        public TargetParameterCountException() { }
-
-        public TargetParameterCountException(string message, Exception inner) { }
-
-        public TargetParameterCountException(string message) { }
-    }
-
-    public delegate bool TypeFilter(Type m, object filterCriteria);
-    public abstract partial class TypeInfo : MemberInfo, IReflectableType
-    {
-        internal TypeInfo() { }
-
-        public abstract Assembly Assembly { get; }
-        public abstract string AssemblyQualifiedName { get; }
-        public abstract TypeAttributes Attributes { get; }
-        public abstract Type BaseType { get; }
-        public abstract bool ContainsGenericParameters { get; }
-
-        public virtual Collections.Generic.IEnumerable<ConstructorInfo> DeclaredConstructors { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<EventInfo> DeclaredEvents { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<FieldInfo> DeclaredFields { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<MemberInfo> DeclaredMembers { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<MethodInfo> DeclaredMethods { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<TypeInfo> DeclaredNestedTypes { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<PropertyInfo> DeclaredProperties { get { throw null; } }
-
-        public abstract MethodBase DeclaringMethod { get; }
-        public abstract string FullName { get; }
-        public abstract GenericParameterAttributes GenericParameterAttributes { get; }
-        public abstract int GenericParameterPosition { get; }
-        public abstract Type[] GenericTypeArguments { get; }
-
-        public virtual Type[] GenericTypeParameters { get { throw null; } }
-
-        public abstract Guid GUID { get; }
-
-        public bool HasElementType { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<Type> ImplementedInterfaces { get { throw null; } }
-
-        public bool IsAbstract { get { throw null; } }
-
-        public bool IsAnsiClass { get { throw null; } }
-
-        public bool IsArray { get { throw null; } }
-
-        public bool IsAutoClass { get { throw null; } }
-
-        public bool IsAutoLayout { get { throw null; } }
-
-        public bool IsByRef { get { throw null; } }
-
-        public bool IsClass { get { throw null; } }
-
-        public virtual bool IsCOMObject { get { throw null; } }
-
-        public abstract bool IsEnum { get; }
-
-        public bool IsExplicitLayout { get { throw null; } }
-
-        public abstract bool IsGenericParameter { get; }
-        public abstract bool IsGenericType { get; }
-        public abstract bool IsGenericTypeDefinition { get; }
-
-        public bool IsImport { get { throw null; } }
-
-        public bool IsInterface { get { throw null; } }
-
-        public bool IsLayoutSequential { get { throw null; } }
-
-        public bool IsMarshalByRef { get { throw null; } }
-
-        public bool IsNested { get { throw null; } }
-
-        public bool IsNestedAssembly { get { throw null; } }
-
-        public bool IsNestedFamANDAssem { get { throw null; } }
-
-        public bool IsNestedFamily { get { throw null; } }
-
-        public bool IsNestedFamORAssem { get { throw null; } }
-
-        public bool IsNestedPrivate { get { throw null; } }
-
-        public bool IsNestedPublic { get { throw null; } }
-
-        public bool IsNotPublic { get { throw null; } }
-
-        public bool IsPointer { get { throw null; } }
-
-        public virtual bool IsPrimitive { get { throw null; } }
-
-        public bool IsPublic { get { throw null; } }
-
-        public bool IsSealed { get { throw null; } }
-
-        public abstract bool IsSerializable { get; }
-
-        public bool IsSpecialName { get { throw null; } }
-
-        public bool IsUnicodeClass { get { throw null; } }
-
-        public virtual bool IsValueType { get { throw null; } }
-
-        public bool IsVisible { get { throw null; } }
-
-        public override MemberTypes MemberType { get { throw null; } }
-
-        public abstract string Namespace { get; }
-
-        public virtual Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute { get { throw null; } }
-
-        public ConstructorInfo TypeInitializer { get { throw null; } }
-
-        public virtual Type UnderlyingSystemType { get { throw null; } }
-
-        public virtual Type AsType() { throw null; }
-
-        public virtual Type[] FindInterfaces(TypeFilter filter, object filterCriteria) { throw null; }
-
-        public virtual MemberInfo[] FindMembers(MemberTypes memberType, BindingFlags bindingAttr, MemberFilter filter, object filterCriteria) { throw null; }
-
-        public abstract int GetArrayRank();
-        public ConstructorInfo GetConstructor(Type[] types) { throw null; }
-
-        public ConstructorInfo[] GetConstructors() { throw null; }
-
-        public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { throw null; }
-
-        public virtual EventInfo GetDeclaredEvent(string name) { throw null; }
-
-        public virtual FieldInfo GetDeclaredField(string name) { throw null; }
-
-        public virtual MethodInfo GetDeclaredMethod(string name) { throw null; }
-
-        public virtual Collections.Generic.IEnumerable<MethodInfo> GetDeclaredMethods(string name) { throw null; }
-
-        public virtual TypeInfo GetDeclaredNestedType(string name) { throw null; }
-
-        public virtual PropertyInfo GetDeclaredProperty(string name) { throw null; }
-
-        public virtual MemberInfo[] GetDefaultMembers() { throw null; }
-
-        public abstract Type GetElementType();
-        public virtual string GetEnumName(object value) { throw null; }
-
-        public virtual string[] GetEnumNames() { throw null; }
-
-        public virtual Type GetEnumUnderlyingType() { throw null; }
-
-        public virtual Array GetEnumValues() { throw null; }
-
-        public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr) { throw null; }
-
-        public EventInfo GetEvent(string name) { throw null; }
-
-        public virtual EventInfo[] GetEvents() { throw null; }
-
-        public virtual EventInfo[] GetEvents(BindingFlags bindingAttr) { throw null; }
-
-        public virtual FieldInfo GetField(string name, BindingFlags bindingAttr) { throw null; }
-
-        public FieldInfo GetField(string name) { throw null; }
-
-        public FieldInfo[] GetFields() { throw null; }
-
-        public virtual FieldInfo[] GetFields(BindingFlags bindingAttr) { throw null; }
-
-        public virtual Type[] GetGenericArguments() { throw null; }
-
-        public abstract Type[] GetGenericParameterConstraints();
-        public abstract Type GetGenericTypeDefinition();
-        public virtual Type GetInterface(string name, bool ignoreCase) { throw null; }
-
-        public Type GetInterface(string name) { throw null; }
-
-        public virtual Type[] GetInterfaces() { throw null; }
-
-        public virtual MemberInfo[] GetMember(string name, BindingFlags bindingAttr) { throw null; }
-
-        public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr) { throw null; }
-
-        public MemberInfo[] GetMember(string name) { throw null; }
-
-        public MemberInfo[] GetMembers() { throw null; }
-
-        public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr) { throw null; }
-
-        public MethodInfo GetMethod(string name, BindingFlags bindingAttr) { throw null; }
-
-        public MethodInfo GetMethod(string name, Type[] types, ParameterModifier[] modifiers) { throw null; }
-
-        public MethodInfo GetMethod(string name, Type[] types) { throw null; }
-
-        public MethodInfo GetMethod(string name) { throw null; }
-
-        public MethodInfo[] GetMethods() { throw null; }
-
-        public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr) { throw null; }
-
-        public virtual Type GetNestedType(string name, BindingFlags bindingAttr) { throw null; }
-
-        public Type GetNestedType(string name) { throw null; }
-
-        public Type[] GetNestedTypes() { throw null; }
-
-        public virtual Type[] GetNestedTypes(BindingFlags bindingAttr) { throw null; }
-
-        public PropertyInfo[] GetProperties() { throw null; }
-
-        public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr) { throw null; }
-
-        public PropertyInfo GetProperty(string name, BindingFlags bindingAttr) { throw null; }
-
-        public PropertyInfo GetProperty(string name, Type returnType, Type[] types, ParameterModifier[] modifiers) { throw null; }
-
-        public PropertyInfo GetProperty(string name, Type returnType, Type[] types) { throw null; }
-
-        public PropertyInfo GetProperty(string name, Type returnType) { throw null; }
-
-        public PropertyInfo GetProperty(string name, Type[] types) { throw null; }
-
-        public PropertyInfo GetProperty(string name) { throw null; }
-
-        public virtual bool IsAssignableFrom(TypeInfo typeInfo) { throw null; }
-
-        public virtual bool IsAssignableFrom(Type c) { throw null; }
-
-        public virtual bool IsEnumDefined(object value) { throw null; }
-
-        public virtual bool IsEquivalentTo(Type other) { throw null; }
-
-        public virtual bool IsInstanceOfType(object o) { throw null; }
-
-        public virtual bool IsSubclassOf(Type c) { throw null; }
-
-        public abstract Type MakeArrayType();
-        public abstract Type MakeArrayType(int rank);
-        public abstract Type MakeByRefType();
-        public abstract Type MakeGenericType(params Type[] typeArguments);
-        public abstract Type MakePointerType();
-        TypeInfo IReflectableType.GetTypeInfo() { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.reflection/4.3.0/system.reflection.nuspec b/src/referencePackages/src/system.reflection/4.3.0/system.reflection.nuspec
deleted file mode 100644
index 2c691445..00000000
--- a/src/referencePackages/src/system.reflection/4.3.0/system.reflection.nuspec
+++ /dev/null
@@ -1,54 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Reflection</id>
-    <version>4.3.0</version>
-    <title>System.Reflection</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides types that retrieve information about assemblies, modules, members, parameters, and other entities in managed code by examining their metadata. These types also can be used to manipulate instances of loaded types, for example to hook up events or to invoke methods.
-
-Commonly Used Types:
-System.Reflection.MethodInfo
-System.Reflection.PropertyInfo
-System.Reflection.ParameterInfo
-System.Reflection.FieldInfo
-System.Reflection.ConstructorInfo
-System.Reflection.Assembly
-System.Reflection.MemberInfo
-System.Reflection.EventInfo
-System.Reflection.Module
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Reflection.Primitives" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Reflection.Primitives" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.5">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Reflection.Primitives" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.resources.resourcemanager/4.3.0/System.Resources.ResourceManager.4.3.0.csproj b/src/referencePackages/src/system.resources.resourcemanager/4.3.0/System.Resources.ResourceManager.4.3.0.csproj
deleted file mode 100644
index d88e67ed..00000000
--- a/src/referencePackages/src/system.resources.resourcemanager/4.3.0/System.Resources.ResourceManager.4.3.0.csproj
+++ /dev/null
@@ -1,16 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0</TargetFrameworks>
-    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Globalization" Version="4.3.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.resources.resourcemanager/4.3.0/ref/netstandard1.0/System.Resources.ResourceManager.cs b/src/referencePackages/src/system.resources.resourcemanager/4.3.0/ref/netstandard1.0/System.Resources.ResourceManager.cs
deleted file mode 100644
index 14a76f9b..00000000
--- a/src/referencePackages/src/system.resources.resourcemanager/4.3.0/ref/netstandard1.0/System.Resources.ResourceManager.cs
+++ /dev/null
@@ -1,62 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Resources.ResourceManager")]
-[assembly: System.Reflection.AssemblyDescription("System.Resources.ResourceManager")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Resources.ResourceManager")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Resources
-{
-    public partial class MissingManifestResourceException : Exception
-    {
-        public MissingManifestResourceException() { }
-
-        public MissingManifestResourceException(string message, Exception inner) { }
-
-        public MissingManifestResourceException(string message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false)]
-    public sealed partial class NeutralResourcesLanguageAttribute : Attribute
-    {
-        public NeutralResourcesLanguageAttribute(string cultureName) { }
-
-        public string CultureName { get { throw null; } }
-    }
-
-    public partial class ResourceManager
-    {
-        public ResourceManager(string baseName, Reflection.Assembly assembly) { }
-
-        public ResourceManager(Type resourceSource) { }
-
-        public virtual string GetString(string name, Globalization.CultureInfo culture) { throw null; }
-
-        public string GetString(string name) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false)]
-    public sealed partial class SatelliteContractVersionAttribute : Attribute
-    {
-        public SatelliteContractVersionAttribute(string version) { }
-
-        public string Version { get { throw null; } }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.resources.resourcemanager/4.3.0/system.resources.resourcemanager.nuspec b/src/referencePackages/src/system.resources.resourcemanager/4.3.0/system.resources.resourcemanager.nuspec
deleted file mode 100644
index 13111885..00000000
--- a/src/referencePackages/src/system.resources.resourcemanager/4.3.0/system.resources.resourcemanager.nuspec
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Resources.ResourceManager</id>
-    <version>4.3.0</version>
-    <title>System.Resources.ResourceManager</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides classes and attributes that allow developers to create, store, and manage various culture-specific resources used in an application.
-
-Commonly Used Types:
-System.Resources.ResourceManager
-System.Resources.NeutralResourcesLanguageAttribute
-System.Resources.SatelliteContractVersionAttribute
-System.Resources.MissingManifestResourceException
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Globalization" version="4.3.0" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.2/System.Runtime.CompilerServices.Unsafe.4.5.2.csproj b/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.2/System.Runtime.CompilerServices.Unsafe.4.5.2.csproj
index 7c5ca523..8f5c515f 100644
--- a/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.2/System.Runtime.CompilerServices.Unsafe.4.5.2.csproj
+++ b/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.2/System.Runtime.CompilerServices.Unsafe.4.5.2.csproj
@@ -1,12 +1,8 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
 </Project>
diff --git a/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.2/ref/netstandard1.0/System.Runtime.CompilerServices.Unsafe.cs b/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.2/ref/netstandard1.0/System.Runtime.CompilerServices.Unsafe.cs
deleted file mode 100644
index 14563cd9..00000000
--- a/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.2/ref/netstandard1.0/System.Runtime.CompilerServices.Unsafe.cs
+++ /dev/null
@@ -1,98 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Runtime.CompilerServices.Unsafe")]
-[assembly: System.Reflection.AssemblyDescription("System.Runtime.CompilerServices.Unsafe")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Runtime.CompilerServices.Unsafe")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.26919.02")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.26919.02 @BuiltBy: dlab14-DDVSOWINAGE075 @Branch: release/2.1 @SrcCode: https://github.com/dotnet/corefx/tree/02b11eeee1fbc5f3ef43a1452fe07efd25fa1715")]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyMetadata("PreferInbox", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.4.1")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Runtime.CompilerServices
-{
-    public static partial class Unsafe
-    {
-        public static ref T Add<T>(ref T source, int elementOffset) { throw null; }
-
-        public static ref T Add<T>(ref T source, IntPtr elementOffset) { throw null; }
-
-        public static unsafe void* Add<T>(void* source, int elementOffset) { throw null; }
-
-        public static ref T AddByteOffset<T>(ref T source, IntPtr byteOffset) { throw null; }
-
-        public static bool AreSame<T>(ref T left, ref T right) { throw null; }
-
-        public static T As<T>(object o)
-            where T : class { throw null; }
-
-        public static ref TTo As<TFrom, TTo>(ref TFrom source) { throw null; }
-
-        public static unsafe void* AsPointer<T>(ref T value) { throw null; }
-
-        public static ref T AsRef<T>(in T source) { throw null; }
-
-        public static unsafe ref T AsRef<T>(void* source) { throw null; }
-
-        public static IntPtr ByteOffset<T>(ref T origin, ref T target) { throw null; }
-
-        public static unsafe void Copy<T>(ref T destination, void* source) { }
-
-        public static unsafe void Copy<T>(void* destination, ref T source) { }
-
-        public static void CopyBlock(ref byte destination, ref byte source, uint byteCount) { }
-
-        public static unsafe void CopyBlock(void* destination, void* source, uint byteCount) { }
-
-        public static void CopyBlockUnaligned(ref byte destination, ref byte source, uint byteCount) { }
-
-        public static unsafe void CopyBlockUnaligned(void* destination, void* source, uint byteCount) { }
-
-        public static void InitBlock(ref byte startAddress, byte value, uint byteCount) { }
-
-        public static unsafe void InitBlock(void* startAddress, byte value, uint byteCount) { }
-
-        public static void InitBlockUnaligned(ref byte startAddress, byte value, uint byteCount) { }
-
-        public static unsafe void InitBlockUnaligned(void* startAddress, byte value, uint byteCount) { }
-
-        public static bool IsAddressGreaterThan<T>(ref T left, ref T right) { throw null; }
-
-        public static bool IsAddressLessThan<T>(ref T left, ref T right) { throw null; }
-
-        public static unsafe T Read<T>(void* source) { throw null; }
-
-        public static T ReadUnaligned<T>(ref byte source) { throw null; }
-
-        public static unsafe T ReadUnaligned<T>(void* source) { throw null; }
-
-        public static int SizeOf<T>() { throw null; }
-
-        public static ref T Subtract<T>(ref T source, int elementOffset) { throw null; }
-
-        public static ref T Subtract<T>(ref T source, IntPtr elementOffset) { throw null; }
-
-        public static unsafe void* Subtract<T>(void* source, int elementOffset) { throw null; }
-
-        public static ref T SubtractByteOffset<T>(ref T source, IntPtr byteOffset) { throw null; }
-
-        public static unsafe void Write<T>(void* destination, T value) { }
-
-        public static void WriteUnaligned<T>(ref byte destination, T value) { }
-
-        public static unsafe void WriteUnaligned<T>(void* destination, T value) { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.2/system.runtime.compilerservices.unsafe.nuspec b/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.2/system.runtime.compilerservices.unsafe.nuspec
index 20cfc4d0..0c942386 100644
--- a/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.2/system.runtime.compilerservices.unsafe.nuspec
+++ b/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.2/system.runtime.compilerservices.unsafe.nuspec
@@ -21,9 +21,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <copyright>© Microsoft Corporation. All rights reserved.</copyright>
     <serviceable>true</serviceable>
     <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
       <group targetFramework=".NETStandard2.0" />
     </dependencies>
   </metadata>
diff --git a/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.3/System.Runtime.CompilerServices.Unsafe.4.5.3.csproj b/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.3/System.Runtime.CompilerServices.Unsafe.4.5.3.csproj
index 7c5ca523..8f5c515f 100644
--- a/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.3/System.Runtime.CompilerServices.Unsafe.4.5.3.csproj
+++ b/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.3/System.Runtime.CompilerServices.Unsafe.4.5.3.csproj
@@ -1,12 +1,8 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
 </Project>
diff --git a/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.3/ref/netstandard1.0/System.Runtime.CompilerServices.Unsafe.cs b/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.3/ref/netstandard1.0/System.Runtime.CompilerServices.Unsafe.cs
deleted file mode 100644
index 9da683a5..00000000
--- a/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.3/ref/netstandard1.0/System.Runtime.CompilerServices.Unsafe.cs
+++ /dev/null
@@ -1,98 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Runtime.CompilerServices.Unsafe")]
-[assembly: System.Reflection.AssemblyDescription("System.Runtime.CompilerServices.Unsafe")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Runtime.CompilerServices.Unsafe")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.28619.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.28619.01 @BuiltBy: dlab14-DDVSOWINAGE069 @Branch: release/2.1 @SrcCode: https://github.com/dotnet/corefx/tree/7601f4f6225089ffb291dc7d58293c7bbf5c5d4f")]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyMetadata("PreferInbox", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.4.1")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Runtime.CompilerServices
-{
-    public static partial class Unsafe
-    {
-        public static ref T Add<T>(ref T source, int elementOffset) { throw null; }
-
-        public static ref T Add<T>(ref T source, IntPtr elementOffset) { throw null; }
-
-        public static unsafe void* Add<T>(void* source, int elementOffset) { throw null; }
-
-        public static ref T AddByteOffset<T>(ref T source, IntPtr byteOffset) { throw null; }
-
-        public static bool AreSame<T>(ref T left, ref T right) { throw null; }
-
-        public static T As<T>(object o)
-            where T : class { throw null; }
-
-        public static ref TTo As<TFrom, TTo>(ref TFrom source) { throw null; }
-
-        public static unsafe void* AsPointer<T>(ref T value) { throw null; }
-
-        public static ref T AsRef<T>(in T source) { throw null; }
-
-        public static unsafe ref T AsRef<T>(void* source) { throw null; }
-
-        public static IntPtr ByteOffset<T>(ref T origin, ref T target) { throw null; }
-
-        public static unsafe void Copy<T>(ref T destination, void* source) { }
-
-        public static unsafe void Copy<T>(void* destination, ref T source) { }
-
-        public static void CopyBlock(ref byte destination, ref byte source, uint byteCount) { }
-
-        public static unsafe void CopyBlock(void* destination, void* source, uint byteCount) { }
-
-        public static void CopyBlockUnaligned(ref byte destination, ref byte source, uint byteCount) { }
-
-        public static unsafe void CopyBlockUnaligned(void* destination, void* source, uint byteCount) { }
-
-        public static void InitBlock(ref byte startAddress, byte value, uint byteCount) { }
-
-        public static unsafe void InitBlock(void* startAddress, byte value, uint byteCount) { }
-
-        public static void InitBlockUnaligned(ref byte startAddress, byte value, uint byteCount) { }
-
-        public static unsafe void InitBlockUnaligned(void* startAddress, byte value, uint byteCount) { }
-
-        public static bool IsAddressGreaterThan<T>(ref T left, ref T right) { throw null; }
-
-        public static bool IsAddressLessThan<T>(ref T left, ref T right) { throw null; }
-
-        public static unsafe T Read<T>(void* source) { throw null; }
-
-        public static T ReadUnaligned<T>(ref byte source) { throw null; }
-
-        public static unsafe T ReadUnaligned<T>(void* source) { throw null; }
-
-        public static int SizeOf<T>() { throw null; }
-
-        public static ref T Subtract<T>(ref T source, int elementOffset) { throw null; }
-
-        public static ref T Subtract<T>(ref T source, IntPtr elementOffset) { throw null; }
-
-        public static unsafe void* Subtract<T>(void* source, int elementOffset) { throw null; }
-
-        public static ref T SubtractByteOffset<T>(ref T source, IntPtr byteOffset) { throw null; }
-
-        public static unsafe void Write<T>(void* destination, T value) { }
-
-        public static void WriteUnaligned<T>(ref byte destination, T value) { }
-
-        public static unsafe void WriteUnaligned<T>(void* destination, T value) { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.3/system.runtime.compilerservices.unsafe.nuspec b/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.3/system.runtime.compilerservices.unsafe.nuspec
index 83c8e390..4bee8eda 100644
--- a/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.3/system.runtime.compilerservices.unsafe.nuspec
+++ b/src/referencePackages/src/system.runtime.compilerservices.unsafe/4.5.3/system.runtime.compilerservices.unsafe.nuspec
@@ -21,9 +21,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <copyright>© Microsoft Corporation. All rights reserved.</copyright>
     <serviceable>true</serviceable>
     <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
       <group targetFramework=".NETStandard2.0" />
     </dependencies>
   </metadata>
diff --git a/src/referencePackages/src/system.runtime.compilerservices.unsafe/5.0.0/System.Runtime.CompilerServices.Unsafe.5.0.0.csproj b/src/referencePackages/src/system.runtime.compilerservices.unsafe/5.0.0/System.Runtime.CompilerServices.Unsafe.5.0.0.csproj
index 7cb6cf69..79bcc0e3 100644
--- a/src/referencePackages/src/system.runtime.compilerservices.unsafe/5.0.0/System.Runtime.CompilerServices.Unsafe.5.0.0.csproj
+++ b/src/referencePackages/src/system.runtime.compilerservices.unsafe/5.0.0/System.Runtime.CompilerServices.Unsafe.5.0.0.csproj
@@ -1,12 +1,8 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard2.0;netstandard2.1</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0;netstandard2.1</TargetFrameworks>
     <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
 </Project>
diff --git a/src/referencePackages/src/system.runtime.compilerservices.unsafe/5.0.0/ref/netstandard1.0/System.Runtime.CompilerServices.Unsafe.cs b/src/referencePackages/src/system.runtime.compilerservices.unsafe/5.0.0/ref/netstandard1.0/System.Runtime.CompilerServices.Unsafe.cs
deleted file mode 100644
index 44a3660c..00000000
--- a/src/referencePackages/src/system.runtime.compilerservices.unsafe/5.0.0/ref/netstandard1.0/System.Runtime.CompilerServices.Unsafe.cs
+++ /dev/null
@@ -1,108 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v1.0", FrameworkDisplayName = "")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Runtime.CompilerServices.Unsafe")]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyMetadata("PreferInbox", "True")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")]
-[assembly: System.Reflection.AssemblyDescription("System.Runtime.CompilerServices.Unsafe")]
-[assembly: System.Reflection.AssemblyFileVersion("5.0.20.51904")]
-[assembly: System.Reflection.AssemblyInformationalVersion("5.0.0+cf258a14b70ad9069470a108f13765e0e5988f51")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET")]
-[assembly: System.Reflection.AssemblyTitle("System.Runtime.CompilerServices.Unsafe")]
-[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "git://github.com/dotnet/runtime")]
-[assembly: System.Reflection.AssemblyVersionAttribute("5.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Runtime.CompilerServices
-{
-    public static partial class Unsafe
-    {
-        public static ref T Add<T>(ref T source, int elementOffset) { throw null; }
-
-        public static ref T Add<T>(ref T source, IntPtr elementOffset) { throw null; }
-
-        public static unsafe void* Add<T>(void* source, int elementOffset) { throw null; }
-
-        public static ref T AddByteOffset<T>(ref T source, IntPtr byteOffset) { throw null; }
-
-        public static bool AreSame<T>(ref T left, ref T right) { throw null; }
-
-        public static T? As<T>(object? o)
-            where T : class { throw null; }
-
-        public static ref TTo As<TFrom, TTo>(ref TFrom source) { throw null; }
-
-        public static unsafe void* AsPointer<T>(ref T value) { throw null; }
-
-        public static ref T AsRef<T>(in T source) { throw null; }
-
-        public static unsafe ref T AsRef<T>(void* source) { throw null; }
-
-        public static IntPtr ByteOffset<T>(ref T origin, ref T target) { throw null; }
-
-        public static unsafe void Copy<T>(ref T destination, void* source) { }
-
-        public static unsafe void Copy<T>(void* destination, ref T source) { }
-
-        public static void CopyBlock(ref byte destination, ref byte source, uint byteCount) { }
-
-        public static unsafe void CopyBlock(void* destination, void* source, uint byteCount) { }
-
-        public static void CopyBlockUnaligned(ref byte destination, ref byte source, uint byteCount) { }
-
-        public static unsafe void CopyBlockUnaligned(void* destination, void* source, uint byteCount) { }
-
-        public static void InitBlock(ref byte startAddress, byte value, uint byteCount) { }
-
-        public static unsafe void InitBlock(void* startAddress, byte value, uint byteCount) { }
-
-        public static void InitBlockUnaligned(ref byte startAddress, byte value, uint byteCount) { }
-
-        public static unsafe void InitBlockUnaligned(void* startAddress, byte value, uint byteCount) { }
-
-        public static bool IsAddressGreaterThan<T>(ref T left, ref T right) { throw null; }
-
-        public static bool IsAddressLessThan<T>(ref T left, ref T right) { throw null; }
-
-        public static bool IsNullRef<T>(ref T source) { throw null; }
-
-        public static ref T NullRef<T>() { throw null; }
-
-        public static unsafe T Read<T>(void* source) { throw null; }
-
-        public static T ReadUnaligned<T>(ref byte source) { throw null; }
-
-        public static unsafe T ReadUnaligned<T>(void* source) { throw null; }
-
-        public static int SizeOf<T>() { throw null; }
-
-        public static void SkipInit<T>(out T value) { throw null; }
-
-        public static ref T Subtract<T>(ref T source, int elementOffset) { throw null; }
-
-        public static ref T Subtract<T>(ref T source, IntPtr elementOffset) { throw null; }
-
-        public static unsafe void* Subtract<T>(void* source, int elementOffset) { throw null; }
-
-        public static ref T SubtractByteOffset<T>(ref T source, IntPtr byteOffset) { throw null; }
-
-        public static ref T Unbox<T>(object box)
-            where T : struct { throw null; }
-
-        public static unsafe void Write<T>(void* destination, T value) { }
-
-        public static void WriteUnaligned<T>(ref byte destination, T value) { }
-
-        public static unsafe void WriteUnaligned<T>(void* destination, T value) { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.compilerservices.unsafe/5.0.0/system.runtime.compilerservices.unsafe.nuspec b/src/referencePackages/src/system.runtime.compilerservices.unsafe/5.0.0/system.runtime.compilerservices.unsafe.nuspec
index c1b51f6e..32d2ef01 100644
--- a/src/referencePackages/src/system.runtime.compilerservices.unsafe/5.0.0/system.runtime.compilerservices.unsafe.nuspec
+++ b/src/referencePackages/src/system.runtime.compilerservices.unsafe/5.0.0/system.runtime.compilerservices.unsafe.nuspec
@@ -22,9 +22,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <serviceable>true</serviceable>
     <repository type="git" url="git://github.com/dotnet/runtime" commit="cf258a14b70ad9069470a108f13765e0e5988f51" />
     <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
       <group targetFramework=".NETStandard2.0" />
       <group targetFramework=".NETStandard2.1" />
     </dependencies>
diff --git a/src/referencePackages/src/system.runtime.extensions/4.3.0/System.Runtime.Extensions.4.3.0.csproj b/src/referencePackages/src/system.runtime.extensions/4.3.0/System.Runtime.Extensions.4.3.0.csproj
deleted file mode 100644
index 5d9dd4e7..00000000
--- a/src/referencePackages/src/system.runtime.extensions/4.3.0/System.Runtime.Extensions.4.3.0.csproj
+++ /dev/null
@@ -1,26 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3;netstandard1.5</TargetFrameworks>
-    <AssemblyName>System.Runtime.Extensions</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.5'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.runtime.extensions/4.3.0/ref/netstandard1.0/System.Runtime.Extensions.cs b/src/referencePackages/src/system.runtime.extensions/4.3.0/ref/netstandard1.0/System.Runtime.Extensions.cs
deleted file mode 100644
index ed55501b..00000000
--- a/src/referencePackages/src/system.runtime.extensions/4.3.0/ref/netstandard1.0/System.Runtime.Extensions.cs
+++ /dev/null
@@ -1,1073 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyTitle("System.Runtime.Extensions.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.Runtime.Extensions.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Runtime.Extensions.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public static partial class BitConverter
-    {
-        public static readonly bool IsLittleEndian;
-        public static long DoubleToInt64Bits(double value) { throw null; }
-
-        public static byte[] GetBytes(bool value) { throw null; }
-
-        public static byte[] GetBytes(char value) { throw null; }
-
-        public static byte[] GetBytes(double value) { throw null; }
-
-        public static byte[] GetBytes(short value) { throw null; }
-
-        public static byte[] GetBytes(int value) { throw null; }
-
-        public static byte[] GetBytes(long value) { throw null; }
-
-        public static byte[] GetBytes(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte[] GetBytes(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte[] GetBytes(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte[] GetBytes(ulong value) { throw null; }
-
-        public static double Int64BitsToDouble(long value) { throw null; }
-
-        public static bool ToBoolean(byte[] value, int startIndex) { throw null; }
-
-        public static char ToChar(byte[] value, int startIndex) { throw null; }
-
-        public static double ToDouble(byte[] value, int startIndex) { throw null; }
-
-        public static short ToInt16(byte[] value, int startIndex) { throw null; }
-
-        public static int ToInt32(byte[] value, int startIndex) { throw null; }
-
-        public static long ToInt64(byte[] value, int startIndex) { throw null; }
-
-        public static float ToSingle(byte[] value, int startIndex) { throw null; }
-
-        public static string ToString(byte[] value, int startIndex, int length) { throw null; }
-
-        public static string ToString(byte[] value, int startIndex) { throw null; }
-
-        public static string ToString(byte[] value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(byte[] value, int startIndex) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(byte[] value, int startIndex) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(byte[] value, int startIndex) { throw null; }
-    }
-
-    public static partial class Convert
-    {
-        public static object ChangeType(object value, Type conversionType, IFormatProvider provider) { throw null; }
-
-        public static object ChangeType(object value, Type conversionType) { throw null; }
-
-        public static byte[] FromBase64CharArray(char[] inArray, int offset, int length) { throw null; }
-
-        public static byte[] FromBase64String(string s) { throw null; }
-
-        public static int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut) { throw null; }
-
-        public static string ToBase64String(byte[] inArray, int offset, int length) { throw null; }
-
-        public static string ToBase64String(byte[] inArray) { throw null; }
-
-        public static bool ToBoolean(bool value) { throw null; }
-
-        public static bool ToBoolean(byte value) { throw null; }
-
-        public static bool ToBoolean(decimal value) { throw null; }
-
-        public static bool ToBoolean(double value) { throw null; }
-
-        public static bool ToBoolean(short value) { throw null; }
-
-        public static bool ToBoolean(int value) { throw null; }
-
-        public static bool ToBoolean(long value) { throw null; }
-
-        public static bool ToBoolean(object value, IFormatProvider provider) { throw null; }
-
-        public static bool ToBoolean(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool ToBoolean(sbyte value) { throw null; }
-
-        public static bool ToBoolean(float value) { throw null; }
-
-        public static bool ToBoolean(string value, IFormatProvider provider) { throw null; }
-
-        public static bool ToBoolean(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool ToBoolean(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool ToBoolean(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool ToBoolean(ulong value) { throw null; }
-
-        public static byte ToByte(bool value) { throw null; }
-
-        public static byte ToByte(byte value) { throw null; }
-
-        public static byte ToByte(char value) { throw null; }
-
-        public static byte ToByte(decimal value) { throw null; }
-
-        public static byte ToByte(double value) { throw null; }
-
-        public static byte ToByte(short value) { throw null; }
-
-        public static byte ToByte(int value) { throw null; }
-
-        public static byte ToByte(long value) { throw null; }
-
-        public static byte ToByte(object value, IFormatProvider provider) { throw null; }
-
-        public static byte ToByte(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte ToByte(sbyte value) { throw null; }
-
-        public static byte ToByte(float value) { throw null; }
-
-        public static byte ToByte(string value, IFormatProvider provider) { throw null; }
-
-        public static byte ToByte(string value, int fromBase) { throw null; }
-
-        public static byte ToByte(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte ToByte(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte ToByte(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte ToByte(ulong value) { throw null; }
-
-        public static char ToChar(byte value) { throw null; }
-
-        public static char ToChar(short value) { throw null; }
-
-        public static char ToChar(int value) { throw null; }
-
-        public static char ToChar(long value) { throw null; }
-
-        public static char ToChar(object value, IFormatProvider provider) { throw null; }
-
-        public static char ToChar(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static char ToChar(sbyte value) { throw null; }
-
-        public static char ToChar(string value, IFormatProvider provider) { throw null; }
-
-        public static char ToChar(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static char ToChar(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static char ToChar(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static char ToChar(ulong value) { throw null; }
-
-        public static DateTime ToDateTime(object value, IFormatProvider provider) { throw null; }
-
-        public static DateTime ToDateTime(object value) { throw null; }
-
-        public static DateTime ToDateTime(string value, IFormatProvider provider) { throw null; }
-
-        public static DateTime ToDateTime(string value) { throw null; }
-
-        public static decimal ToDecimal(bool value) { throw null; }
-
-        public static decimal ToDecimal(byte value) { throw null; }
-
-        public static decimal ToDecimal(decimal value) { throw null; }
-
-        public static decimal ToDecimal(double value) { throw null; }
-
-        public static decimal ToDecimal(short value) { throw null; }
-
-        public static decimal ToDecimal(int value) { throw null; }
-
-        public static decimal ToDecimal(long value) { throw null; }
-
-        public static decimal ToDecimal(object value, IFormatProvider provider) { throw null; }
-
-        public static decimal ToDecimal(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static decimal ToDecimal(sbyte value) { throw null; }
-
-        public static decimal ToDecimal(float value) { throw null; }
-
-        public static decimal ToDecimal(string value, IFormatProvider provider) { throw null; }
-
-        public static decimal ToDecimal(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static decimal ToDecimal(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static decimal ToDecimal(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static decimal ToDecimal(ulong value) { throw null; }
-
-        public static double ToDouble(bool value) { throw null; }
-
-        public static double ToDouble(byte value) { throw null; }
-
-        public static double ToDouble(decimal value) { throw null; }
-
-        public static double ToDouble(double value) { throw null; }
-
-        public static double ToDouble(short value) { throw null; }
-
-        public static double ToDouble(int value) { throw null; }
-
-        public static double ToDouble(long value) { throw null; }
-
-        public static double ToDouble(object value, IFormatProvider provider) { throw null; }
-
-        public static double ToDouble(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static double ToDouble(sbyte value) { throw null; }
-
-        public static double ToDouble(float value) { throw null; }
-
-        public static double ToDouble(string value, IFormatProvider provider) { throw null; }
-
-        public static double ToDouble(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static double ToDouble(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static double ToDouble(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static double ToDouble(ulong value) { throw null; }
-
-        public static short ToInt16(bool value) { throw null; }
-
-        public static short ToInt16(byte value) { throw null; }
-
-        public static short ToInt16(char value) { throw null; }
-
-        public static short ToInt16(decimal value) { throw null; }
-
-        public static short ToInt16(double value) { throw null; }
-
-        public static short ToInt16(short value) { throw null; }
-
-        public static short ToInt16(int value) { throw null; }
-
-        public static short ToInt16(long value) { throw null; }
-
-        public static short ToInt16(object value, IFormatProvider provider) { throw null; }
-
-        public static short ToInt16(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static short ToInt16(sbyte value) { throw null; }
-
-        public static short ToInt16(float value) { throw null; }
-
-        public static short ToInt16(string value, IFormatProvider provider) { throw null; }
-
-        public static short ToInt16(string value, int fromBase) { throw null; }
-
-        public static short ToInt16(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static short ToInt16(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static short ToInt16(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static short ToInt16(ulong value) { throw null; }
-
-        public static int ToInt32(bool value) { throw null; }
-
-        public static int ToInt32(byte value) { throw null; }
-
-        public static int ToInt32(char value) { throw null; }
-
-        public static int ToInt32(decimal value) { throw null; }
-
-        public static int ToInt32(double value) { throw null; }
-
-        public static int ToInt32(short value) { throw null; }
-
-        public static int ToInt32(int value) { throw null; }
-
-        public static int ToInt32(long value) { throw null; }
-
-        public static int ToInt32(object value, IFormatProvider provider) { throw null; }
-
-        public static int ToInt32(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static int ToInt32(sbyte value) { throw null; }
-
-        public static int ToInt32(float value) { throw null; }
-
-        public static int ToInt32(string value, IFormatProvider provider) { throw null; }
-
-        public static int ToInt32(string value, int fromBase) { throw null; }
-
-        public static int ToInt32(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static int ToInt32(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static int ToInt32(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static int ToInt32(ulong value) { throw null; }
-
-        public static long ToInt64(bool value) { throw null; }
-
-        public static long ToInt64(byte value) { throw null; }
-
-        public static long ToInt64(char value) { throw null; }
-
-        public static long ToInt64(decimal value) { throw null; }
-
-        public static long ToInt64(double value) { throw null; }
-
-        public static long ToInt64(short value) { throw null; }
-
-        public static long ToInt64(int value) { throw null; }
-
-        public static long ToInt64(long value) { throw null; }
-
-        public static long ToInt64(object value, IFormatProvider provider) { throw null; }
-
-        public static long ToInt64(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static long ToInt64(sbyte value) { throw null; }
-
-        public static long ToInt64(float value) { throw null; }
-
-        public static long ToInt64(string value, IFormatProvider provider) { throw null; }
-
-        public static long ToInt64(string value, int fromBase) { throw null; }
-
-        public static long ToInt64(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static long ToInt64(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static long ToInt64(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static long ToInt64(ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(bool value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(byte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(char value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(double value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(short value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(int value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(object value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(sbyte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(string value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(string value, int fromBase) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(ulong value) { throw null; }
-
-        public static float ToSingle(bool value) { throw null; }
-
-        public static float ToSingle(byte value) { throw null; }
-
-        public static float ToSingle(decimal value) { throw null; }
-
-        public static float ToSingle(double value) { throw null; }
-
-        public static float ToSingle(short value) { throw null; }
-
-        public static float ToSingle(int value) { throw null; }
-
-        public static float ToSingle(long value) { throw null; }
-
-        public static float ToSingle(object value, IFormatProvider provider) { throw null; }
-
-        public static float ToSingle(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static float ToSingle(sbyte value) { throw null; }
-
-        public static float ToSingle(float value) { throw null; }
-
-        public static float ToSingle(string value, IFormatProvider provider) { throw null; }
-
-        public static float ToSingle(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static float ToSingle(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static float ToSingle(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static float ToSingle(ulong value) { throw null; }
-
-        public static string ToString(bool value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(bool value) { throw null; }
-
-        public static string ToString(byte value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(byte value, int toBase) { throw null; }
-
-        public static string ToString(byte value) { throw null; }
-
-        public static string ToString(char value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(char value) { throw null; }
-
-        public static string ToString(DateTime value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(DateTime value) { throw null; }
-
-        public static string ToString(decimal value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(decimal value) { throw null; }
-
-        public static string ToString(double value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(double value) { throw null; }
-
-        public static string ToString(short value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(short value, int toBase) { throw null; }
-
-        public static string ToString(short value) { throw null; }
-
-        public static string ToString(int value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(int value, int toBase) { throw null; }
-
-        public static string ToString(int value) { throw null; }
-
-        public static string ToString(long value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(long value, int toBase) { throw null; }
-
-        public static string ToString(long value) { throw null; }
-
-        public static string ToString(object value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(sbyte value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(sbyte value) { throw null; }
-
-        public static string ToString(float value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(ushort value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(uint value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(ulong value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(bool value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(byte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(char value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(double value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(short value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(int value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(object value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(sbyte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(string value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(string value, int fromBase) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(bool value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(byte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(char value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(double value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(short value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(int value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(object value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(sbyte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(string value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(string value, int fromBase) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(bool value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(byte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(char value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(double value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(short value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(int value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(object value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(sbyte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(string value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(string value, int fromBase) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(ulong value) { throw null; }
-    }
-
-    public static partial class Environment
-    {
-        public static int CurrentManagedThreadId { get { throw null; } }
-
-        public static bool HasShutdownStarted { get { throw null; } }
-
-        public static string NewLine { get { throw null; } }
-
-        public static int ProcessorCount { get { throw null; } }
-
-        public static int TickCount { get { throw null; } }
-
-        public static void FailFast(string message, Exception exception) { }
-
-        public static void FailFast(string message) { }
-    }
-
-    public static partial class Math
-    {
-        public const double E = 2.718281828459045D;
-        public const double PI = 3.141592653589793D;
-        public static decimal Abs(decimal value) { throw null; }
-
-        public static double Abs(double value) { throw null; }
-
-        public static short Abs(short value) { throw null; }
-
-        public static int Abs(int value) { throw null; }
-
-        public static long Abs(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte Abs(sbyte value) { throw null; }
-
-        public static float Abs(float value) { throw null; }
-
-        public static double Acos(double d) { throw null; }
-
-        public static double Asin(double d) { throw null; }
-
-        public static double Atan(double d) { throw null; }
-
-        public static double Atan2(double y, double x) { throw null; }
-
-        public static decimal Ceiling(decimal d) { throw null; }
-
-        public static double Ceiling(double a) { throw null; }
-
-        public static double Cos(double d) { throw null; }
-
-        public static double Cosh(double value) { throw null; }
-
-        public static double Exp(double d) { throw null; }
-
-        public static decimal Floor(decimal d) { throw null; }
-
-        public static double Floor(double d) { throw null; }
-
-        public static double IEEERemainder(double x, double y) { throw null; }
-
-        public static double Log(double a, double newBase) { throw null; }
-
-        public static double Log(double d) { throw null; }
-
-        public static double Log10(double d) { throw null; }
-
-        public static byte Max(byte val1, byte val2) { throw null; }
-
-        public static decimal Max(decimal val1, decimal val2) { throw null; }
-
-        public static double Max(double val1, double val2) { throw null; }
-
-        public static short Max(short val1, short val2) { throw null; }
-
-        public static int Max(int val1, int val2) { throw null; }
-
-        public static long Max(long val1, long val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte Max(sbyte val1, sbyte val2) { throw null; }
-
-        public static float Max(float val1, float val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort Max(ushort val1, ushort val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint Max(uint val1, uint val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong Max(ulong val1, ulong val2) { throw null; }
-
-        public static byte Min(byte val1, byte val2) { throw null; }
-
-        public static decimal Min(decimal val1, decimal val2) { throw null; }
-
-        public static double Min(double val1, double val2) { throw null; }
-
-        public static short Min(short val1, short val2) { throw null; }
-
-        public static int Min(int val1, int val2) { throw null; }
-
-        public static long Min(long val1, long val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte Min(sbyte val1, sbyte val2) { throw null; }
-
-        public static float Min(float val1, float val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort Min(ushort val1, ushort val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint Min(uint val1, uint val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong Min(ulong val1, ulong val2) { throw null; }
-
-        public static double Pow(double x, double y) { throw null; }
-
-        public static decimal Round(decimal d, int decimals, MidpointRounding mode) { throw null; }
-
-        public static decimal Round(decimal d, int decimals) { throw null; }
-
-        public static decimal Round(decimal d, MidpointRounding mode) { throw null; }
-
-        public static decimal Round(decimal d) { throw null; }
-
-        public static double Round(double value, int digits, MidpointRounding mode) { throw null; }
-
-        public static double Round(double value, int digits) { throw null; }
-
-        public static double Round(double value, MidpointRounding mode) { throw null; }
-
-        public static double Round(double a) { throw null; }
-
-        public static int Sign(decimal value) { throw null; }
-
-        public static int Sign(double value) { throw null; }
-
-        public static int Sign(short value) { throw null; }
-
-        public static int Sign(int value) { throw null; }
-
-        public static int Sign(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static int Sign(sbyte value) { throw null; }
-
-        public static int Sign(float value) { throw null; }
-
-        public static double Sin(double a) { throw null; }
-
-        public static double Sinh(double value) { throw null; }
-
-        public static double Sqrt(double d) { throw null; }
-
-        public static double Tan(double a) { throw null; }
-
-        public static double Tanh(double value) { throw null; }
-
-        public static decimal Truncate(decimal d) { throw null; }
-
-        public static double Truncate(double d) { throw null; }
-    }
-
-    public enum MidpointRounding
-    {
-        ToEven = 0,
-        AwayFromZero = 1
-    }
-
-    public partial class Progress<T> : IProgress<T>
-    {
-        public Progress() { }
-
-        public Progress(Action<T> handler) { }
-
-        public event EventHandler<T> ProgressChanged { add { } remove { } }
-
-        protected virtual void OnReport(T value) { }
-
-        void IProgress<T>.Report(T value) { }
-    }
-
-    public partial class Random
-    {
-        public Random() { }
-
-        public Random(int Seed) { }
-
-        public virtual int Next() { throw null; }
-
-        public virtual int Next(int minValue, int maxValue) { throw null; }
-
-        public virtual int Next(int maxValue) { throw null; }
-
-        public virtual void NextBytes(byte[] buffer) { }
-
-        public virtual double NextDouble() { throw null; }
-
-        protected virtual double Sample() { throw null; }
-    }
-
-    public abstract partial class StringComparer : Collections.Generic.IComparer<string>, Collections.Generic.IEqualityComparer<string>, Collections.IComparer, Collections.IEqualityComparer
-    {
-        public static StringComparer CurrentCulture { get { throw null; } }
-
-        public static StringComparer CurrentCultureIgnoreCase { get { throw null; } }
-
-        public static StringComparer Ordinal { get { throw null; } }
-
-        public static StringComparer OrdinalIgnoreCase { get { throw null; } }
-
-        public abstract int Compare(string x, string y);
-        public abstract bool Equals(string x, string y);
-        public abstract int GetHashCode(string obj);
-        int Collections.IComparer.Compare(object x, object y) { throw null; }
-
-        bool Collections.IEqualityComparer.Equals(object x, object y) { throw null; }
-
-        int Collections.IEqualityComparer.GetHashCode(object obj) { throw null; }
-    }
-
-    public partial class UriBuilder
-    {
-        public UriBuilder() { }
-
-        public UriBuilder(string scheme, string host, int port, string path, string extraValue) { }
-
-        public UriBuilder(string scheme, string host, int port, string pathValue) { }
-
-        public UriBuilder(string scheme, string host, int portNumber) { }
-
-        public UriBuilder(string schemeName, string hostName) { }
-
-        public UriBuilder(string uri) { }
-
-        public UriBuilder(Uri uri) { }
-
-        public string Fragment { get { throw null; } set { } }
-
-        public string Host { get { throw null; } set { } }
-
-        public string Password { get { throw null; } set { } }
-
-        public string Path { get { throw null; } set { } }
-
-        public int Port { get { throw null; } set { } }
-
-        public string Query { get { throw null; } set { } }
-
-        public string Scheme { get { throw null; } set { } }
-
-        public Uri Uri { get { throw null; } }
-
-        public string UserName { get { throw null; } set { } }
-
-        public override bool Equals(object rparam) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-}
-
-namespace System.Diagnostics
-{
-    public partial class Stopwatch
-    {
-        public static readonly long Frequency;
-        public static readonly bool IsHighResolution;
-        public TimeSpan Elapsed { get { throw null; } }
-
-        public long ElapsedMilliseconds { get { throw null; } }
-
-        public long ElapsedTicks { get { throw null; } }
-
-        public bool IsRunning { get { throw null; } }
-
-        public static long GetTimestamp() { throw null; }
-
-        public void Reset() { }
-
-        public void Restart() { }
-
-        public void Start() { }
-
-        public static Stopwatch StartNew() { throw null; }
-
-        public void Stop() { }
-    }
-}
-
-namespace System.IO
-{
-    public static partial class Path
-    {
-        public static string ChangeExtension(string path, string extension) { throw null; }
-
-        public static string Combine(params string[] paths) { throw null; }
-
-        public static string GetDirectoryName(string path) { throw null; }
-
-        public static string GetExtension(string path) { throw null; }
-
-        public static string GetFileName(string path) { throw null; }
-
-        public static string GetFileNameWithoutExtension(string path) { throw null; }
-
-        public static char[] GetInvalidFileNameChars() { throw null; }
-
-        public static char[] GetInvalidPathChars() { throw null; }
-
-        public static string GetPathRoot(string path) { throw null; }
-
-        public static string GetRandomFileName() { throw null; }
-
-        public static bool HasExtension(string path) { throw null; }
-
-        public static bool IsPathRooted(string path) { throw null; }
-    }
-}
-
-namespace System.Net
-{
-    public static partial class WebUtility
-    {
-        public static string HtmlDecode(string value) { throw null; }
-
-        public static string HtmlEncode(string value) { throw null; }
-
-        public static string UrlDecode(string encodedValue) { throw null; }
-
-        public static byte[] UrlDecodeToBytes(byte[] encodedValue, int offset, int count) { throw null; }
-
-        public static string UrlEncode(string value) { throw null; }
-
-        public static byte[] UrlEncodeToBytes(byte[] value, int offset, int count) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.extensions/4.3.0/ref/netstandard1.3/System.Runtime.Extensions.cs b/src/referencePackages/src/system.runtime.extensions/4.3.0/ref/netstandard1.3/System.Runtime.Extensions.cs
deleted file mode 100644
index 41a3c691..00000000
--- a/src/referencePackages/src/system.runtime.extensions/4.3.0/ref/netstandard1.3/System.Runtime.Extensions.cs
+++ /dev/null
@@ -1,1135 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Runtime.Extensions")]
-[assembly: System.Reflection.AssemblyDescription("System.Runtime.Extensions")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Runtime.Extensions")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.23123.00")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.23123.00 built by: PROJECTKREL")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata("", "")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public static partial class BitConverter
-    {
-        public static readonly bool IsLittleEndian;
-        public static long DoubleToInt64Bits(double value) { throw null; }
-
-        public static byte[] GetBytes(bool value) { throw null; }
-
-        public static byte[] GetBytes(char value) { throw null; }
-
-        public static byte[] GetBytes(double value) { throw null; }
-
-        public static byte[] GetBytes(short value) { throw null; }
-
-        public static byte[] GetBytes(int value) { throw null; }
-
-        public static byte[] GetBytes(long value) { throw null; }
-
-        public static byte[] GetBytes(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte[] GetBytes(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte[] GetBytes(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte[] GetBytes(ulong value) { throw null; }
-
-        public static double Int64BitsToDouble(long value) { throw null; }
-
-        public static bool ToBoolean(byte[] value, int startIndex) { throw null; }
-
-        public static char ToChar(byte[] value, int startIndex) { throw null; }
-
-        public static double ToDouble(byte[] value, int startIndex) { throw null; }
-
-        public static short ToInt16(byte[] value, int startIndex) { throw null; }
-
-        public static int ToInt32(byte[] value, int startIndex) { throw null; }
-
-        public static long ToInt64(byte[] value, int startIndex) { throw null; }
-
-        public static float ToSingle(byte[] value, int startIndex) { throw null; }
-
-        public static string ToString(byte[] value, int startIndex, int length) { throw null; }
-
-        public static string ToString(byte[] value, int startIndex) { throw null; }
-
-        public static string ToString(byte[] value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(byte[] value, int startIndex) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(byte[] value, int startIndex) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(byte[] value, int startIndex) { throw null; }
-    }
-
-    public static partial class Convert
-    {
-        public static object ChangeType(object value, Type conversionType, IFormatProvider provider) { throw null; }
-
-        public static object ChangeType(object value, Type conversionType) { throw null; }
-
-        public static object ChangeType(object value, TypeCode typeCode, IFormatProvider provider) { throw null; }
-
-        public static byte[] FromBase64CharArray(char[] inArray, int offset, int length) { throw null; }
-
-        public static byte[] FromBase64String(string s) { throw null; }
-
-        public static TypeCode GetTypeCode(object value) { throw null; }
-
-        public static int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut) { throw null; }
-
-        public static string ToBase64String(byte[] inArray, int offset, int length) { throw null; }
-
-        public static string ToBase64String(byte[] inArray) { throw null; }
-
-        public static bool ToBoolean(bool value) { throw null; }
-
-        public static bool ToBoolean(byte value) { throw null; }
-
-        public static bool ToBoolean(decimal value) { throw null; }
-
-        public static bool ToBoolean(double value) { throw null; }
-
-        public static bool ToBoolean(short value) { throw null; }
-
-        public static bool ToBoolean(int value) { throw null; }
-
-        public static bool ToBoolean(long value) { throw null; }
-
-        public static bool ToBoolean(object value, IFormatProvider provider) { throw null; }
-
-        public static bool ToBoolean(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool ToBoolean(sbyte value) { throw null; }
-
-        public static bool ToBoolean(float value) { throw null; }
-
-        public static bool ToBoolean(string value, IFormatProvider provider) { throw null; }
-
-        public static bool ToBoolean(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool ToBoolean(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool ToBoolean(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool ToBoolean(ulong value) { throw null; }
-
-        public static byte ToByte(bool value) { throw null; }
-
-        public static byte ToByte(byte value) { throw null; }
-
-        public static byte ToByte(char value) { throw null; }
-
-        public static byte ToByte(decimal value) { throw null; }
-
-        public static byte ToByte(double value) { throw null; }
-
-        public static byte ToByte(short value) { throw null; }
-
-        public static byte ToByte(int value) { throw null; }
-
-        public static byte ToByte(long value) { throw null; }
-
-        public static byte ToByte(object value, IFormatProvider provider) { throw null; }
-
-        public static byte ToByte(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte ToByte(sbyte value) { throw null; }
-
-        public static byte ToByte(float value) { throw null; }
-
-        public static byte ToByte(string value, IFormatProvider provider) { throw null; }
-
-        public static byte ToByte(string value, int fromBase) { throw null; }
-
-        public static byte ToByte(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte ToByte(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte ToByte(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte ToByte(ulong value) { throw null; }
-
-        public static char ToChar(byte value) { throw null; }
-
-        public static char ToChar(short value) { throw null; }
-
-        public static char ToChar(int value) { throw null; }
-
-        public static char ToChar(long value) { throw null; }
-
-        public static char ToChar(object value, IFormatProvider provider) { throw null; }
-
-        public static char ToChar(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static char ToChar(sbyte value) { throw null; }
-
-        public static char ToChar(string value, IFormatProvider provider) { throw null; }
-
-        public static char ToChar(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static char ToChar(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static char ToChar(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static char ToChar(ulong value) { throw null; }
-
-        public static DateTime ToDateTime(object value, IFormatProvider provider) { throw null; }
-
-        public static DateTime ToDateTime(object value) { throw null; }
-
-        public static DateTime ToDateTime(string value, IFormatProvider provider) { throw null; }
-
-        public static DateTime ToDateTime(string value) { throw null; }
-
-        public static decimal ToDecimal(bool value) { throw null; }
-
-        public static decimal ToDecimal(byte value) { throw null; }
-
-        public static decimal ToDecimal(decimal value) { throw null; }
-
-        public static decimal ToDecimal(double value) { throw null; }
-
-        public static decimal ToDecimal(short value) { throw null; }
-
-        public static decimal ToDecimal(int value) { throw null; }
-
-        public static decimal ToDecimal(long value) { throw null; }
-
-        public static decimal ToDecimal(object value, IFormatProvider provider) { throw null; }
-
-        public static decimal ToDecimal(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static decimal ToDecimal(sbyte value) { throw null; }
-
-        public static decimal ToDecimal(float value) { throw null; }
-
-        public static decimal ToDecimal(string value, IFormatProvider provider) { throw null; }
-
-        public static decimal ToDecimal(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static decimal ToDecimal(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static decimal ToDecimal(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static decimal ToDecimal(ulong value) { throw null; }
-
-        public static double ToDouble(bool value) { throw null; }
-
-        public static double ToDouble(byte value) { throw null; }
-
-        public static double ToDouble(decimal value) { throw null; }
-
-        public static double ToDouble(double value) { throw null; }
-
-        public static double ToDouble(short value) { throw null; }
-
-        public static double ToDouble(int value) { throw null; }
-
-        public static double ToDouble(long value) { throw null; }
-
-        public static double ToDouble(object value, IFormatProvider provider) { throw null; }
-
-        public static double ToDouble(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static double ToDouble(sbyte value) { throw null; }
-
-        public static double ToDouble(float value) { throw null; }
-
-        public static double ToDouble(string value, IFormatProvider provider) { throw null; }
-
-        public static double ToDouble(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static double ToDouble(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static double ToDouble(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static double ToDouble(ulong value) { throw null; }
-
-        public static short ToInt16(bool value) { throw null; }
-
-        public static short ToInt16(byte value) { throw null; }
-
-        public static short ToInt16(char value) { throw null; }
-
-        public static short ToInt16(decimal value) { throw null; }
-
-        public static short ToInt16(double value) { throw null; }
-
-        public static short ToInt16(short value) { throw null; }
-
-        public static short ToInt16(int value) { throw null; }
-
-        public static short ToInt16(long value) { throw null; }
-
-        public static short ToInt16(object value, IFormatProvider provider) { throw null; }
-
-        public static short ToInt16(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static short ToInt16(sbyte value) { throw null; }
-
-        public static short ToInt16(float value) { throw null; }
-
-        public static short ToInt16(string value, IFormatProvider provider) { throw null; }
-
-        public static short ToInt16(string value, int fromBase) { throw null; }
-
-        public static short ToInt16(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static short ToInt16(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static short ToInt16(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static short ToInt16(ulong value) { throw null; }
-
-        public static int ToInt32(bool value) { throw null; }
-
-        public static int ToInt32(byte value) { throw null; }
-
-        public static int ToInt32(char value) { throw null; }
-
-        public static int ToInt32(decimal value) { throw null; }
-
-        public static int ToInt32(double value) { throw null; }
-
-        public static int ToInt32(short value) { throw null; }
-
-        public static int ToInt32(int value) { throw null; }
-
-        public static int ToInt32(long value) { throw null; }
-
-        public static int ToInt32(object value, IFormatProvider provider) { throw null; }
-
-        public static int ToInt32(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static int ToInt32(sbyte value) { throw null; }
-
-        public static int ToInt32(float value) { throw null; }
-
-        public static int ToInt32(string value, IFormatProvider provider) { throw null; }
-
-        public static int ToInt32(string value, int fromBase) { throw null; }
-
-        public static int ToInt32(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static int ToInt32(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static int ToInt32(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static int ToInt32(ulong value) { throw null; }
-
-        public static long ToInt64(bool value) { throw null; }
-
-        public static long ToInt64(byte value) { throw null; }
-
-        public static long ToInt64(char value) { throw null; }
-
-        public static long ToInt64(decimal value) { throw null; }
-
-        public static long ToInt64(double value) { throw null; }
-
-        public static long ToInt64(short value) { throw null; }
-
-        public static long ToInt64(int value) { throw null; }
-
-        public static long ToInt64(long value) { throw null; }
-
-        public static long ToInt64(object value, IFormatProvider provider) { throw null; }
-
-        public static long ToInt64(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static long ToInt64(sbyte value) { throw null; }
-
-        public static long ToInt64(float value) { throw null; }
-
-        public static long ToInt64(string value, IFormatProvider provider) { throw null; }
-
-        public static long ToInt64(string value, int fromBase) { throw null; }
-
-        public static long ToInt64(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static long ToInt64(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static long ToInt64(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static long ToInt64(ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(bool value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(byte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(char value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(double value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(short value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(int value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(object value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(sbyte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(string value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(string value, int fromBase) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(ulong value) { throw null; }
-
-        public static float ToSingle(bool value) { throw null; }
-
-        public static float ToSingle(byte value) { throw null; }
-
-        public static float ToSingle(decimal value) { throw null; }
-
-        public static float ToSingle(double value) { throw null; }
-
-        public static float ToSingle(short value) { throw null; }
-
-        public static float ToSingle(int value) { throw null; }
-
-        public static float ToSingle(long value) { throw null; }
-
-        public static float ToSingle(object value, IFormatProvider provider) { throw null; }
-
-        public static float ToSingle(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static float ToSingle(sbyte value) { throw null; }
-
-        public static float ToSingle(float value) { throw null; }
-
-        public static float ToSingle(string value, IFormatProvider provider) { throw null; }
-
-        public static float ToSingle(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static float ToSingle(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static float ToSingle(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static float ToSingle(ulong value) { throw null; }
-
-        public static string ToString(bool value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(bool value) { throw null; }
-
-        public static string ToString(byte value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(byte value, int toBase) { throw null; }
-
-        public static string ToString(byte value) { throw null; }
-
-        public static string ToString(char value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(char value) { throw null; }
-
-        public static string ToString(DateTime value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(DateTime value) { throw null; }
-
-        public static string ToString(decimal value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(decimal value) { throw null; }
-
-        public static string ToString(double value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(double value) { throw null; }
-
-        public static string ToString(short value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(short value, int toBase) { throw null; }
-
-        public static string ToString(short value) { throw null; }
-
-        public static string ToString(int value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(int value, int toBase) { throw null; }
-
-        public static string ToString(int value) { throw null; }
-
-        public static string ToString(long value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(long value, int toBase) { throw null; }
-
-        public static string ToString(long value) { throw null; }
-
-        public static string ToString(object value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(sbyte value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(sbyte value) { throw null; }
-
-        public static string ToString(float value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(ushort value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(uint value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(ulong value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(bool value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(byte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(char value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(double value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(short value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(int value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(object value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(sbyte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(string value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(string value, int fromBase) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(bool value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(byte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(char value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(double value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(short value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(int value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(object value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(sbyte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(string value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(string value, int fromBase) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(bool value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(byte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(char value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(double value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(short value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(int value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(object value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(sbyte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(string value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(string value, int fromBase) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(ulong value) { throw null; }
-    }
-
-    public static partial class Environment
-    {
-        public static int CurrentManagedThreadId { get { throw null; } }
-
-        public static bool HasShutdownStarted { get { throw null; } }
-
-        public static string NewLine { get { throw null; } }
-
-        public static int ProcessorCount { get { throw null; } }
-
-        public static string StackTrace { get { throw null; } }
-
-        public static int TickCount { get { throw null; } }
-
-        public static string ExpandEnvironmentVariables(string name) { throw null; }
-
-        public static void FailFast(string message, Exception exception) { }
-
-        public static void FailFast(string message) { }
-
-        public static string GetEnvironmentVariable(string variable) { throw null; }
-
-        public static Collections.IDictionary GetEnvironmentVariables() { throw null; }
-
-        public static void SetEnvironmentVariable(string variable, string value) { }
-    }
-
-    public static partial class Math
-    {
-        public const double E = 2.718281828459045D;
-        public const double PI = 3.141592653589793D;
-        public static decimal Abs(decimal value) { throw null; }
-
-        public static double Abs(double value) { throw null; }
-
-        public static short Abs(short value) { throw null; }
-
-        public static int Abs(int value) { throw null; }
-
-        public static long Abs(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte Abs(sbyte value) { throw null; }
-
-        public static float Abs(float value) { throw null; }
-
-        public static double Acos(double d) { throw null; }
-
-        public static double Asin(double d) { throw null; }
-
-        public static double Atan(double d) { throw null; }
-
-        public static double Atan2(double y, double x) { throw null; }
-
-        public static decimal Ceiling(decimal d) { throw null; }
-
-        public static double Ceiling(double a) { throw null; }
-
-        public static double Cos(double d) { throw null; }
-
-        public static double Cosh(double value) { throw null; }
-
-        public static double Exp(double d) { throw null; }
-
-        public static decimal Floor(decimal d) { throw null; }
-
-        public static double Floor(double d) { throw null; }
-
-        public static double IEEERemainder(double x, double y) { throw null; }
-
-        public static double Log(double a, double newBase) { throw null; }
-
-        public static double Log(double d) { throw null; }
-
-        public static double Log10(double d) { throw null; }
-
-        public static byte Max(byte val1, byte val2) { throw null; }
-
-        public static decimal Max(decimal val1, decimal val2) { throw null; }
-
-        public static double Max(double val1, double val2) { throw null; }
-
-        public static short Max(short val1, short val2) { throw null; }
-
-        public static int Max(int val1, int val2) { throw null; }
-
-        public static long Max(long val1, long val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte Max(sbyte val1, sbyte val2) { throw null; }
-
-        public static float Max(float val1, float val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort Max(ushort val1, ushort val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint Max(uint val1, uint val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong Max(ulong val1, ulong val2) { throw null; }
-
-        public static byte Min(byte val1, byte val2) { throw null; }
-
-        public static decimal Min(decimal val1, decimal val2) { throw null; }
-
-        public static double Min(double val1, double val2) { throw null; }
-
-        public static short Min(short val1, short val2) { throw null; }
-
-        public static int Min(int val1, int val2) { throw null; }
-
-        public static long Min(long val1, long val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte Min(sbyte val1, sbyte val2) { throw null; }
-
-        public static float Min(float val1, float val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort Min(ushort val1, ushort val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint Min(uint val1, uint val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong Min(ulong val1, ulong val2) { throw null; }
-
-        public static double Pow(double x, double y) { throw null; }
-
-        public static decimal Round(decimal d, int decimals, MidpointRounding mode) { throw null; }
-
-        public static decimal Round(decimal d, int decimals) { throw null; }
-
-        public static decimal Round(decimal d, MidpointRounding mode) { throw null; }
-
-        public static decimal Round(decimal d) { throw null; }
-
-        public static double Round(double value, int digits, MidpointRounding mode) { throw null; }
-
-        public static double Round(double value, int digits) { throw null; }
-
-        public static double Round(double value, MidpointRounding mode) { throw null; }
-
-        public static double Round(double a) { throw null; }
-
-        public static int Sign(decimal value) { throw null; }
-
-        public static int Sign(double value) { throw null; }
-
-        public static int Sign(short value) { throw null; }
-
-        public static int Sign(int value) { throw null; }
-
-        public static int Sign(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static int Sign(sbyte value) { throw null; }
-
-        public static int Sign(float value) { throw null; }
-
-        public static double Sin(double a) { throw null; }
-
-        public static double Sinh(double value) { throw null; }
-
-        public static double Sqrt(double d) { throw null; }
-
-        public static double Tan(double a) { throw null; }
-
-        public static double Tanh(double value) { throw null; }
-
-        public static decimal Truncate(decimal d) { throw null; }
-
-        public static double Truncate(double d) { throw null; }
-    }
-
-    public enum MidpointRounding
-    {
-        ToEven = 0,
-        AwayFromZero = 1
-    }
-
-    public partial class Progress<T> : IProgress<T>
-    {
-        public Progress() { }
-
-        public Progress(Action<T> handler) { }
-
-        public event EventHandler<T> ProgressChanged { add { } remove { } }
-
-        protected virtual void OnReport(T value) { }
-
-        void IProgress<T>.Report(T value) { }
-    }
-
-    public partial class Random
-    {
-        public Random() { }
-
-        public Random(int Seed) { }
-
-        public virtual int Next() { throw null; }
-
-        public virtual int Next(int minValue, int maxValue) { throw null; }
-
-        public virtual int Next(int maxValue) { throw null; }
-
-        public virtual void NextBytes(byte[] buffer) { }
-
-        public virtual double NextDouble() { throw null; }
-
-        protected virtual double Sample() { throw null; }
-    }
-
-    public abstract partial class StringComparer : Collections.Generic.IComparer<string>, Collections.Generic.IEqualityComparer<string>, Collections.IComparer, Collections.IEqualityComparer
-    {
-        public static StringComparer CurrentCulture { get { throw null; } }
-
-        public static StringComparer CurrentCultureIgnoreCase { get { throw null; } }
-
-        public static StringComparer Ordinal { get { throw null; } }
-
-        public static StringComparer OrdinalIgnoreCase { get { throw null; } }
-
-        public abstract int Compare(string x, string y);
-        public abstract bool Equals(string x, string y);
-        public abstract int GetHashCode(string obj);
-        int Collections.IComparer.Compare(object x, object y) { throw null; }
-
-        bool Collections.IEqualityComparer.Equals(object x, object y) { throw null; }
-
-        int Collections.IEqualityComparer.GetHashCode(object obj) { throw null; }
-    }
-
-    public partial class UriBuilder
-    {
-        public UriBuilder() { }
-
-        public UriBuilder(string scheme, string host, int port, string path, string extraValue) { }
-
-        public UriBuilder(string scheme, string host, int port, string pathValue) { }
-
-        public UriBuilder(string scheme, string host, int portNumber) { }
-
-        public UriBuilder(string schemeName, string hostName) { }
-
-        public UriBuilder(string uri) { }
-
-        public UriBuilder(Uri uri) { }
-
-        public string Fragment { get { throw null; } set { } }
-
-        public string Host { get { throw null; } set { } }
-
-        public string Password { get { throw null; } set { } }
-
-        public string Path { get { throw null; } set { } }
-
-        public int Port { get { throw null; } set { } }
-
-        public string Query { get { throw null; } set { } }
-
-        public string Scheme { get { throw null; } set { } }
-
-        public Uri Uri { get { throw null; } }
-
-        public string UserName { get { throw null; } set { } }
-
-        public override bool Equals(object rparam) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-}
-
-namespace System.Diagnostics
-{
-    public partial class Stopwatch
-    {
-        public static readonly long Frequency;
-        public static readonly bool IsHighResolution;
-        public TimeSpan Elapsed { get { throw null; } }
-
-        public long ElapsedMilliseconds { get { throw null; } }
-
-        public long ElapsedTicks { get { throw null; } }
-
-        public bool IsRunning { get { throw null; } }
-
-        public static long GetTimestamp() { throw null; }
-
-        public void Reset() { }
-
-        public void Restart() { }
-
-        public void Start() { }
-
-        public static Stopwatch StartNew() { throw null; }
-
-        public void Stop() { }
-    }
-}
-
-namespace System.IO
-{
-    public static partial class Path
-    {
-        public static readonly char AltDirectorySeparatorChar;
-        public static readonly char DirectorySeparatorChar;
-        public static readonly char PathSeparator;
-        public static readonly char VolumeSeparatorChar;
-        public static string ChangeExtension(string path, string extension) { throw null; }
-
-        public static string Combine(string path1, string path2, string path3) { throw null; }
-
-        public static string Combine(string path1, string path2) { throw null; }
-
-        public static string Combine(params string[] paths) { throw null; }
-
-        public static string GetDirectoryName(string path) { throw null; }
-
-        public static string GetExtension(string path) { throw null; }
-
-        public static string GetFileName(string path) { throw null; }
-
-        public static string GetFileNameWithoutExtension(string path) { throw null; }
-
-        public static string GetFullPath(string path) { throw null; }
-
-        public static char[] GetInvalidFileNameChars() { throw null; }
-
-        public static char[] GetInvalidPathChars() { throw null; }
-
-        public static string GetPathRoot(string path) { throw null; }
-
-        public static string GetRandomFileName() { throw null; }
-
-        public static string GetTempFileName() { throw null; }
-
-        public static string GetTempPath() { throw null; }
-
-        public static bool HasExtension(string path) { throw null; }
-
-        public static bool IsPathRooted(string path) { throw null; }
-    }
-}
-
-namespace System.Net
-{
-    public static partial class WebUtility
-    {
-        public static string HtmlDecode(string value) { throw null; }
-
-        public static string HtmlEncode(string value) { throw null; }
-
-        public static string UrlDecode(string encodedValue) { throw null; }
-
-        public static byte[] UrlDecodeToBytes(byte[] encodedValue, int offset, int count) { throw null; }
-
-        public static string UrlEncode(string value) { throw null; }
-
-        public static byte[] UrlEncodeToBytes(byte[] value, int offset, int count) { throw null; }
-    }
-}
-
-namespace System.Runtime.Versioning
-{
-    public sealed partial class FrameworkName : IEquatable<FrameworkName>
-    {
-        public FrameworkName(string identifier, Version version, string profile) { }
-
-        public FrameworkName(string identifier, Version version) { }
-
-        public FrameworkName(string frameworkName) { }
-
-        public string FullName { get { throw null; } }
-
-        public string Identifier { get { throw null; } }
-
-        public string Profile { get { throw null; } }
-
-        public Version Version { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(FrameworkName other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(FrameworkName left, FrameworkName right) { throw null; }
-
-        public static bool operator !=(FrameworkName left, FrameworkName right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.extensions/4.3.0/ref/netstandard1.5/System.Runtime.Extensions.cs b/src/referencePackages/src/system.runtime.extensions/4.3.0/ref/netstandard1.5/System.Runtime.Extensions.cs
deleted file mode 100644
index 6ac65c05..00000000
--- a/src/referencePackages/src/system.runtime.extensions/4.3.0/ref/netstandard1.5/System.Runtime.Extensions.cs
+++ /dev/null
@@ -1,1142 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Runtime.Extensions")]
-[assembly: System.Reflection.AssemblyDescription("System.Runtime.Extensions")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Runtime.Extensions")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public static partial class BitConverter
-    {
-        public static readonly bool IsLittleEndian;
-        public static long DoubleToInt64Bits(double value) { throw null; }
-
-        public static byte[] GetBytes(bool value) { throw null; }
-
-        public static byte[] GetBytes(char value) { throw null; }
-
-        public static byte[] GetBytes(double value) { throw null; }
-
-        public static byte[] GetBytes(short value) { throw null; }
-
-        public static byte[] GetBytes(int value) { throw null; }
-
-        public static byte[] GetBytes(long value) { throw null; }
-
-        public static byte[] GetBytes(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte[] GetBytes(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte[] GetBytes(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte[] GetBytes(ulong value) { throw null; }
-
-        public static double Int64BitsToDouble(long value) { throw null; }
-
-        public static bool ToBoolean(byte[] value, int startIndex) { throw null; }
-
-        public static char ToChar(byte[] value, int startIndex) { throw null; }
-
-        public static double ToDouble(byte[] value, int startIndex) { throw null; }
-
-        public static short ToInt16(byte[] value, int startIndex) { throw null; }
-
-        public static int ToInt32(byte[] value, int startIndex) { throw null; }
-
-        public static long ToInt64(byte[] value, int startIndex) { throw null; }
-
-        public static float ToSingle(byte[] value, int startIndex) { throw null; }
-
-        public static string ToString(byte[] value, int startIndex, int length) { throw null; }
-
-        public static string ToString(byte[] value, int startIndex) { throw null; }
-
-        public static string ToString(byte[] value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(byte[] value, int startIndex) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(byte[] value, int startIndex) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(byte[] value, int startIndex) { throw null; }
-    }
-
-    public static partial class Convert
-    {
-        public static object ChangeType(object value, Type conversionType, IFormatProvider provider) { throw null; }
-
-        public static object ChangeType(object value, Type conversionType) { throw null; }
-
-        public static object ChangeType(object value, TypeCode typeCode, IFormatProvider provider) { throw null; }
-
-        public static byte[] FromBase64CharArray(char[] inArray, int offset, int length) { throw null; }
-
-        public static byte[] FromBase64String(string s) { throw null; }
-
-        public static TypeCode GetTypeCode(object value) { throw null; }
-
-        public static int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut) { throw null; }
-
-        public static string ToBase64String(byte[] inArray, int offset, int length) { throw null; }
-
-        public static string ToBase64String(byte[] inArray) { throw null; }
-
-        public static bool ToBoolean(bool value) { throw null; }
-
-        public static bool ToBoolean(byte value) { throw null; }
-
-        public static bool ToBoolean(decimal value) { throw null; }
-
-        public static bool ToBoolean(double value) { throw null; }
-
-        public static bool ToBoolean(short value) { throw null; }
-
-        public static bool ToBoolean(int value) { throw null; }
-
-        public static bool ToBoolean(long value) { throw null; }
-
-        public static bool ToBoolean(object value, IFormatProvider provider) { throw null; }
-
-        public static bool ToBoolean(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool ToBoolean(sbyte value) { throw null; }
-
-        public static bool ToBoolean(float value) { throw null; }
-
-        public static bool ToBoolean(string value, IFormatProvider provider) { throw null; }
-
-        public static bool ToBoolean(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool ToBoolean(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool ToBoolean(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool ToBoolean(ulong value) { throw null; }
-
-        public static byte ToByte(bool value) { throw null; }
-
-        public static byte ToByte(byte value) { throw null; }
-
-        public static byte ToByte(char value) { throw null; }
-
-        public static byte ToByte(decimal value) { throw null; }
-
-        public static byte ToByte(double value) { throw null; }
-
-        public static byte ToByte(short value) { throw null; }
-
-        public static byte ToByte(int value) { throw null; }
-
-        public static byte ToByte(long value) { throw null; }
-
-        public static byte ToByte(object value, IFormatProvider provider) { throw null; }
-
-        public static byte ToByte(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte ToByte(sbyte value) { throw null; }
-
-        public static byte ToByte(float value) { throw null; }
-
-        public static byte ToByte(string value, IFormatProvider provider) { throw null; }
-
-        public static byte ToByte(string value, int fromBase) { throw null; }
-
-        public static byte ToByte(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte ToByte(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte ToByte(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static byte ToByte(ulong value) { throw null; }
-
-        public static char ToChar(byte value) { throw null; }
-
-        public static char ToChar(short value) { throw null; }
-
-        public static char ToChar(int value) { throw null; }
-
-        public static char ToChar(long value) { throw null; }
-
-        public static char ToChar(object value, IFormatProvider provider) { throw null; }
-
-        public static char ToChar(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static char ToChar(sbyte value) { throw null; }
-
-        public static char ToChar(string value, IFormatProvider provider) { throw null; }
-
-        public static char ToChar(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static char ToChar(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static char ToChar(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static char ToChar(ulong value) { throw null; }
-
-        public static DateTime ToDateTime(object value, IFormatProvider provider) { throw null; }
-
-        public static DateTime ToDateTime(object value) { throw null; }
-
-        public static DateTime ToDateTime(string value, IFormatProvider provider) { throw null; }
-
-        public static DateTime ToDateTime(string value) { throw null; }
-
-        public static decimal ToDecimal(bool value) { throw null; }
-
-        public static decimal ToDecimal(byte value) { throw null; }
-
-        public static decimal ToDecimal(decimal value) { throw null; }
-
-        public static decimal ToDecimal(double value) { throw null; }
-
-        public static decimal ToDecimal(short value) { throw null; }
-
-        public static decimal ToDecimal(int value) { throw null; }
-
-        public static decimal ToDecimal(long value) { throw null; }
-
-        public static decimal ToDecimal(object value, IFormatProvider provider) { throw null; }
-
-        public static decimal ToDecimal(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static decimal ToDecimal(sbyte value) { throw null; }
-
-        public static decimal ToDecimal(float value) { throw null; }
-
-        public static decimal ToDecimal(string value, IFormatProvider provider) { throw null; }
-
-        public static decimal ToDecimal(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static decimal ToDecimal(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static decimal ToDecimal(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static decimal ToDecimal(ulong value) { throw null; }
-
-        public static double ToDouble(bool value) { throw null; }
-
-        public static double ToDouble(byte value) { throw null; }
-
-        public static double ToDouble(decimal value) { throw null; }
-
-        public static double ToDouble(double value) { throw null; }
-
-        public static double ToDouble(short value) { throw null; }
-
-        public static double ToDouble(int value) { throw null; }
-
-        public static double ToDouble(long value) { throw null; }
-
-        public static double ToDouble(object value, IFormatProvider provider) { throw null; }
-
-        public static double ToDouble(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static double ToDouble(sbyte value) { throw null; }
-
-        public static double ToDouble(float value) { throw null; }
-
-        public static double ToDouble(string value, IFormatProvider provider) { throw null; }
-
-        public static double ToDouble(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static double ToDouble(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static double ToDouble(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static double ToDouble(ulong value) { throw null; }
-
-        public static short ToInt16(bool value) { throw null; }
-
-        public static short ToInt16(byte value) { throw null; }
-
-        public static short ToInt16(char value) { throw null; }
-
-        public static short ToInt16(decimal value) { throw null; }
-
-        public static short ToInt16(double value) { throw null; }
-
-        public static short ToInt16(short value) { throw null; }
-
-        public static short ToInt16(int value) { throw null; }
-
-        public static short ToInt16(long value) { throw null; }
-
-        public static short ToInt16(object value, IFormatProvider provider) { throw null; }
-
-        public static short ToInt16(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static short ToInt16(sbyte value) { throw null; }
-
-        public static short ToInt16(float value) { throw null; }
-
-        public static short ToInt16(string value, IFormatProvider provider) { throw null; }
-
-        public static short ToInt16(string value, int fromBase) { throw null; }
-
-        public static short ToInt16(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static short ToInt16(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static short ToInt16(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static short ToInt16(ulong value) { throw null; }
-
-        public static int ToInt32(bool value) { throw null; }
-
-        public static int ToInt32(byte value) { throw null; }
-
-        public static int ToInt32(char value) { throw null; }
-
-        public static int ToInt32(decimal value) { throw null; }
-
-        public static int ToInt32(double value) { throw null; }
-
-        public static int ToInt32(short value) { throw null; }
-
-        public static int ToInt32(int value) { throw null; }
-
-        public static int ToInt32(long value) { throw null; }
-
-        public static int ToInt32(object value, IFormatProvider provider) { throw null; }
-
-        public static int ToInt32(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static int ToInt32(sbyte value) { throw null; }
-
-        public static int ToInt32(float value) { throw null; }
-
-        public static int ToInt32(string value, IFormatProvider provider) { throw null; }
-
-        public static int ToInt32(string value, int fromBase) { throw null; }
-
-        public static int ToInt32(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static int ToInt32(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static int ToInt32(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static int ToInt32(ulong value) { throw null; }
-
-        public static long ToInt64(bool value) { throw null; }
-
-        public static long ToInt64(byte value) { throw null; }
-
-        public static long ToInt64(char value) { throw null; }
-
-        public static long ToInt64(decimal value) { throw null; }
-
-        public static long ToInt64(double value) { throw null; }
-
-        public static long ToInt64(short value) { throw null; }
-
-        public static long ToInt64(int value) { throw null; }
-
-        public static long ToInt64(long value) { throw null; }
-
-        public static long ToInt64(object value, IFormatProvider provider) { throw null; }
-
-        public static long ToInt64(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static long ToInt64(sbyte value) { throw null; }
-
-        public static long ToInt64(float value) { throw null; }
-
-        public static long ToInt64(string value, IFormatProvider provider) { throw null; }
-
-        public static long ToInt64(string value, int fromBase) { throw null; }
-
-        public static long ToInt64(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static long ToInt64(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static long ToInt64(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static long ToInt64(ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(bool value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(byte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(char value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(double value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(short value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(int value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(object value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(sbyte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(string value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(string value, int fromBase) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(ulong value) { throw null; }
-
-        public static float ToSingle(bool value) { throw null; }
-
-        public static float ToSingle(byte value) { throw null; }
-
-        public static float ToSingle(decimal value) { throw null; }
-
-        public static float ToSingle(double value) { throw null; }
-
-        public static float ToSingle(short value) { throw null; }
-
-        public static float ToSingle(int value) { throw null; }
-
-        public static float ToSingle(long value) { throw null; }
-
-        public static float ToSingle(object value, IFormatProvider provider) { throw null; }
-
-        public static float ToSingle(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static float ToSingle(sbyte value) { throw null; }
-
-        public static float ToSingle(float value) { throw null; }
-
-        public static float ToSingle(string value, IFormatProvider provider) { throw null; }
-
-        public static float ToSingle(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static float ToSingle(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static float ToSingle(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static float ToSingle(ulong value) { throw null; }
-
-        public static string ToString(bool value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(bool value) { throw null; }
-
-        public static string ToString(byte value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(byte value, int toBase) { throw null; }
-
-        public static string ToString(byte value) { throw null; }
-
-        public static string ToString(char value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(char value) { throw null; }
-
-        public static string ToString(DateTime value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(DateTime value) { throw null; }
-
-        public static string ToString(decimal value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(decimal value) { throw null; }
-
-        public static string ToString(double value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(double value) { throw null; }
-
-        public static string ToString(short value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(short value, int toBase) { throw null; }
-
-        public static string ToString(short value) { throw null; }
-
-        public static string ToString(int value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(int value, int toBase) { throw null; }
-
-        public static string ToString(int value) { throw null; }
-
-        public static string ToString(long value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(long value, int toBase) { throw null; }
-
-        public static string ToString(long value) { throw null; }
-
-        public static string ToString(object value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(sbyte value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(sbyte value) { throw null; }
-
-        public static string ToString(float value, IFormatProvider provider) { throw null; }
-
-        public static string ToString(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(ushort value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(uint value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(ulong value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(bool value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(byte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(char value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(double value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(short value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(int value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(object value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(sbyte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(string value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(string value, int fromBase) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(bool value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(byte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(char value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(double value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(short value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(int value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(object value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(sbyte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(string value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(string value, int fromBase) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(ulong value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(bool value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(byte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(char value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(double value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(short value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(int value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(object value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(sbyte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(string value, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(string value, int fromBase) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(string value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(ulong value) { throw null; }
-    }
-
-    public static partial class Environment
-    {
-        public static int CurrentManagedThreadId { get { throw null; } }
-
-        public static bool HasShutdownStarted { get { throw null; } }
-
-        public static string MachineName { get { throw null; } }
-
-        public static string NewLine { get { throw null; } }
-
-        public static int ProcessorCount { get { throw null; } }
-
-        public static string StackTrace { get { throw null; } }
-
-        public static int TickCount { get { throw null; } }
-
-        public static void Exit(int exitCode) { }
-
-        public static string ExpandEnvironmentVariables(string name) { throw null; }
-
-        public static void FailFast(string message, Exception exception) { }
-
-        public static void FailFast(string message) { }
-
-        public static string[] GetCommandLineArgs() { throw null; }
-
-        public static string GetEnvironmentVariable(string variable) { throw null; }
-
-        public static Collections.IDictionary GetEnvironmentVariables() { throw null; }
-
-        public static void SetEnvironmentVariable(string variable, string value) { }
-    }
-
-    public static partial class Math
-    {
-        public const double E = 2.718281828459045D;
-        public const double PI = 3.141592653589793D;
-        public static decimal Abs(decimal value) { throw null; }
-
-        public static double Abs(double value) { throw null; }
-
-        public static short Abs(short value) { throw null; }
-
-        public static int Abs(int value) { throw null; }
-
-        public static long Abs(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte Abs(sbyte value) { throw null; }
-
-        public static float Abs(float value) { throw null; }
-
-        public static double Acos(double d) { throw null; }
-
-        public static double Asin(double d) { throw null; }
-
-        public static double Atan(double d) { throw null; }
-
-        public static double Atan2(double y, double x) { throw null; }
-
-        public static decimal Ceiling(decimal d) { throw null; }
-
-        public static double Ceiling(double a) { throw null; }
-
-        public static double Cos(double d) { throw null; }
-
-        public static double Cosh(double value) { throw null; }
-
-        public static double Exp(double d) { throw null; }
-
-        public static decimal Floor(decimal d) { throw null; }
-
-        public static double Floor(double d) { throw null; }
-
-        public static double IEEERemainder(double x, double y) { throw null; }
-
-        public static double Log(double a, double newBase) { throw null; }
-
-        public static double Log(double d) { throw null; }
-
-        public static double Log10(double d) { throw null; }
-
-        public static byte Max(byte val1, byte val2) { throw null; }
-
-        public static decimal Max(decimal val1, decimal val2) { throw null; }
-
-        public static double Max(double val1, double val2) { throw null; }
-
-        public static short Max(short val1, short val2) { throw null; }
-
-        public static int Max(int val1, int val2) { throw null; }
-
-        public static long Max(long val1, long val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte Max(sbyte val1, sbyte val2) { throw null; }
-
-        public static float Max(float val1, float val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort Max(ushort val1, ushort val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint Max(uint val1, uint val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong Max(ulong val1, ulong val2) { throw null; }
-
-        public static byte Min(byte val1, byte val2) { throw null; }
-
-        public static decimal Min(decimal val1, decimal val2) { throw null; }
-
-        public static double Min(double val1, double val2) { throw null; }
-
-        public static short Min(short val1, short val2) { throw null; }
-
-        public static int Min(int val1, int val2) { throw null; }
-
-        public static long Min(long val1, long val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte Min(sbyte val1, sbyte val2) { throw null; }
-
-        public static float Min(float val1, float val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort Min(ushort val1, ushort val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint Min(uint val1, uint val2) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong Min(ulong val1, ulong val2) { throw null; }
-
-        public static double Pow(double x, double y) { throw null; }
-
-        public static decimal Round(decimal d, int decimals, MidpointRounding mode) { throw null; }
-
-        public static decimal Round(decimal d, int decimals) { throw null; }
-
-        public static decimal Round(decimal d, MidpointRounding mode) { throw null; }
-
-        public static decimal Round(decimal d) { throw null; }
-
-        public static double Round(double value, int digits, MidpointRounding mode) { throw null; }
-
-        public static double Round(double value, int digits) { throw null; }
-
-        public static double Round(double value, MidpointRounding mode) { throw null; }
-
-        public static double Round(double a) { throw null; }
-
-        public static int Sign(decimal value) { throw null; }
-
-        public static int Sign(double value) { throw null; }
-
-        public static int Sign(short value) { throw null; }
-
-        public static int Sign(int value) { throw null; }
-
-        public static int Sign(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static int Sign(sbyte value) { throw null; }
-
-        public static int Sign(float value) { throw null; }
-
-        public static double Sin(double a) { throw null; }
-
-        public static double Sinh(double value) { throw null; }
-
-        public static double Sqrt(double d) { throw null; }
-
-        public static double Tan(double a) { throw null; }
-
-        public static double Tanh(double value) { throw null; }
-
-        public static decimal Truncate(decimal d) { throw null; }
-
-        public static double Truncate(double d) { throw null; }
-    }
-
-    public enum MidpointRounding
-    {
-        ToEven = 0,
-        AwayFromZero = 1
-    }
-
-    public partial class Progress<T> : IProgress<T>
-    {
-        public Progress() { }
-
-        public Progress(Action<T> handler) { }
-
-        public event EventHandler<T> ProgressChanged { add { } remove { } }
-
-        protected virtual void OnReport(T value) { }
-
-        void IProgress<T>.Report(T value) { }
-    }
-
-    public partial class Random
-    {
-        public Random() { }
-
-        public Random(int Seed) { }
-
-        public virtual int Next() { throw null; }
-
-        public virtual int Next(int minValue, int maxValue) { throw null; }
-
-        public virtual int Next(int maxValue) { throw null; }
-
-        public virtual void NextBytes(byte[] buffer) { }
-
-        public virtual double NextDouble() { throw null; }
-
-        protected virtual double Sample() { throw null; }
-    }
-
-    public abstract partial class StringComparer : Collections.Generic.IComparer<string>, Collections.Generic.IEqualityComparer<string>, Collections.IComparer, Collections.IEqualityComparer
-    {
-        public static StringComparer CurrentCulture { get { throw null; } }
-
-        public static StringComparer CurrentCultureIgnoreCase { get { throw null; } }
-
-        public static StringComparer Ordinal { get { throw null; } }
-
-        public static StringComparer OrdinalIgnoreCase { get { throw null; } }
-
-        public abstract int Compare(string x, string y);
-        public abstract bool Equals(string x, string y);
-        public abstract int GetHashCode(string obj);
-        int Collections.IComparer.Compare(object x, object y) { throw null; }
-
-        bool Collections.IEqualityComparer.Equals(object x, object y) { throw null; }
-
-        int Collections.IEqualityComparer.GetHashCode(object obj) { throw null; }
-    }
-
-    public partial class UriBuilder
-    {
-        public UriBuilder() { }
-
-        public UriBuilder(string scheme, string host, int port, string path, string extraValue) { }
-
-        public UriBuilder(string scheme, string host, int port, string pathValue) { }
-
-        public UriBuilder(string scheme, string host, int portNumber) { }
-
-        public UriBuilder(string schemeName, string hostName) { }
-
-        public UriBuilder(string uri) { }
-
-        public UriBuilder(Uri uri) { }
-
-        public string Fragment { get { throw null; } set { } }
-
-        public string Host { get { throw null; } set { } }
-
-        public string Password { get { throw null; } set { } }
-
-        public string Path { get { throw null; } set { } }
-
-        public int Port { get { throw null; } set { } }
-
-        public string Query { get { throw null; } set { } }
-
-        public string Scheme { get { throw null; } set { } }
-
-        public Uri Uri { get { throw null; } }
-
-        public string UserName { get { throw null; } set { } }
-
-        public override bool Equals(object rparam) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-}
-
-namespace System.Diagnostics
-{
-    public partial class Stopwatch
-    {
-        public static readonly long Frequency;
-        public static readonly bool IsHighResolution;
-        public TimeSpan Elapsed { get { throw null; } }
-
-        public long ElapsedMilliseconds { get { throw null; } }
-
-        public long ElapsedTicks { get { throw null; } }
-
-        public bool IsRunning { get { throw null; } }
-
-        public static long GetTimestamp() { throw null; }
-
-        public void Reset() { }
-
-        public void Restart() { }
-
-        public void Start() { }
-
-        public static Stopwatch StartNew() { throw null; }
-
-        public void Stop() { }
-    }
-}
-
-namespace System.IO
-{
-    public static partial class Path
-    {
-        public static readonly char AltDirectorySeparatorChar;
-        public static readonly char DirectorySeparatorChar;
-        public static readonly char PathSeparator;
-        public static readonly char VolumeSeparatorChar;
-        public static string ChangeExtension(string path, string extension) { throw null; }
-
-        public static string Combine(string path1, string path2, string path3) { throw null; }
-
-        public static string Combine(string path1, string path2) { throw null; }
-
-        public static string Combine(params string[] paths) { throw null; }
-
-        public static string GetDirectoryName(string path) { throw null; }
-
-        public static string GetExtension(string path) { throw null; }
-
-        public static string GetFileName(string path) { throw null; }
-
-        public static string GetFileNameWithoutExtension(string path) { throw null; }
-
-        public static string GetFullPath(string path) { throw null; }
-
-        public static char[] GetInvalidFileNameChars() { throw null; }
-
-        public static char[] GetInvalidPathChars() { throw null; }
-
-        public static string GetPathRoot(string path) { throw null; }
-
-        public static string GetRandomFileName() { throw null; }
-
-        public static string GetTempFileName() { throw null; }
-
-        public static string GetTempPath() { throw null; }
-
-        public static bool HasExtension(string path) { throw null; }
-
-        public static bool IsPathRooted(string path) { throw null; }
-    }
-}
-
-namespace System.Net
-{
-    public static partial class WebUtility
-    {
-        public static string HtmlDecode(string value) { throw null; }
-
-        public static string HtmlEncode(string value) { throw null; }
-
-        public static string UrlDecode(string encodedValue) { throw null; }
-
-        public static byte[] UrlDecodeToBytes(byte[] encodedValue, int offset, int count) { throw null; }
-
-        public static string UrlEncode(string value) { throw null; }
-
-        public static byte[] UrlEncodeToBytes(byte[] value, int offset, int count) { throw null; }
-    }
-}
-
-namespace System.Runtime.Versioning
-{
-    public sealed partial class FrameworkName : IEquatable<FrameworkName>
-    {
-        public FrameworkName(string identifier, Version version, string profile) { }
-
-        public FrameworkName(string identifier, Version version) { }
-
-        public FrameworkName(string frameworkName) { }
-
-        public string FullName { get { throw null; } }
-
-        public string Identifier { get { throw null; } }
-
-        public string Profile { get { throw null; } }
-
-        public Version Version { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(FrameworkName other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(FrameworkName left, FrameworkName right) { throw null; }
-
-        public static bool operator !=(FrameworkName left, FrameworkName right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.extensions/4.3.0/system.runtime.extensions.nuspec b/src/referencePackages/src/system.runtime.extensions/4.3.0/system.runtime.extensions.nuspec
deleted file mode 100644
index dd4221be..00000000
--- a/src/referencePackages/src/system.runtime.extensions/4.3.0/system.runtime.extensions.nuspec
+++ /dev/null
@@ -1,48 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Runtime.Extensions</id>
-    <version>4.3.0</version>
-    <title>System.Runtime.Extensions</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides commonly-used classes for performing mathematical functions, conversions, string comparisons and querying environment information.
-
-Commonly Used Types:
-System.Math
-System.Environment
-System.Random
-System.Progress&lt;T&gt;
-System.Convert
-System.Diagnostics.Stopwatch
-System.Runtime.Versioning.FrameworkName
-System.StringComparer
-System.IO.Path
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.5">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.handles/4.3.0/System.Runtime.Handles.4.3.0.csproj b/src/referencePackages/src/system.runtime.handles/4.3.0/System.Runtime.Handles.4.3.0.csproj
deleted file mode 100644
index 6ca070d3..00000000
--- a/src/referencePackages/src/system.runtime.handles/4.3.0/System.Runtime.Handles.4.3.0.csproj
+++ /dev/null
@@ -1,14 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Runtime.Handles</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.runtime.handles/4.3.0/ref/netstandard1.3/System.Runtime.Handles.cs b/src/referencePackages/src/system.runtime.handles/4.3.0/ref/netstandard1.3/System.Runtime.Handles.cs
deleted file mode 100644
index 4d2f7946..00000000
--- a/src/referencePackages/src/system.runtime.handles/4.3.0/ref/netstandard1.3/System.Runtime.Handles.cs
+++ /dev/null
@@ -1,107 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Runtime.Handles")]
-[assembly: System.Reflection.AssemblyDescription("System.Runtime.Handles")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Runtime.Handles")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace Microsoft.Win32.SafeHandles
-{
-    public sealed partial class SafeWaitHandle : System.Runtime.InteropServices.SafeHandle
-    {
-        public SafeWaitHandle(System.IntPtr existingHandle, bool ownsHandle) : base(default, default) { }
-
-        public override bool IsInvalid { get { throw null; } }
-
-        protected override bool ReleaseHandle() { throw null; }
-    }
-}
-
-namespace System.IO
-{
-    public enum HandleInheritability
-    {
-        None = 0,
-        Inheritable = 1
-    }
-}
-
-namespace System.Runtime.InteropServices
-{
-    public abstract partial class CriticalHandle : IDisposable
-    {
-        protected IntPtr handle;
-        protected CriticalHandle(IntPtr invalidHandleValue) { }
-
-        public bool IsClosed { get { throw null; } }
-
-        public abstract bool IsInvalid { get; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        ~CriticalHandle() {
-        }
-
-        protected abstract bool ReleaseHandle();
-        protected void SetHandle(IntPtr handle) { }
-
-        public void SetHandleAsInvalid() { }
-    }
-
-    public abstract partial class SafeHandle : IDisposable
-    {
-        protected IntPtr handle;
-        protected SafeHandle(IntPtr invalidHandleValue, bool ownsHandle) { }
-
-        public bool IsClosed { get { throw null; } }
-
-        public abstract bool IsInvalid { get; }
-
-        public void DangerousAddRef(ref bool success) { }
-
-        public IntPtr DangerousGetHandle() { throw null; }
-
-        public void DangerousRelease() { }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        ~SafeHandle() {
-        }
-
-        protected abstract bool ReleaseHandle();
-        protected void SetHandle(IntPtr handle) { }
-
-        public void SetHandleAsInvalid() { }
-    }
-}
-
-namespace System.Threading
-{
-    public static partial class WaitHandleExtensions
-    {
-        public static Microsoft.Win32.SafeHandles.SafeWaitHandle GetSafeWaitHandle(this WaitHandle waitHandle) { throw null; }
-
-        public static void SetSafeWaitHandle(this WaitHandle waitHandle, Microsoft.Win32.SafeHandles.SafeWaitHandle value) { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.handles/4.3.0/system.runtime.handles.nuspec b/src/referencePackages/src/system.runtime.handles/4.3.0/system.runtime.handles.nuspec
deleted file mode 100644
index e1fa100a..00000000
--- a/src/referencePackages/src/system.runtime.handles/4.3.0/system.runtime.handles.nuspec
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Runtime.Handles</id>
-    <version>4.3.0</version>
-    <title>System.Runtime.Handles</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides base classes, including System.Runtime.InteropServices.CriticalHandle and System.Runtime.InteropServices.SafeHandle, for types that represent operating system handles.
-
-Commonly Used Types:
-System.Runtime.InteropServices.SafeHandle
-Microsoft.Win32.SafeHandles.SafeWaitHandle
-System.Runtime.InteropServices.CriticalHandle
-System.Threading.WaitHandleExtensions
-System.IO.HandleInheritability
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.interopservices.runtimeinformation/4.3.0/System.Runtime.InteropServices.RuntimeInformation.4.3.0.csproj b/src/referencePackages/src/system.runtime.interopservices.runtimeinformation/4.3.0/System.Runtime.InteropServices.RuntimeInformation.4.3.0.csproj
deleted file mode 100644
index 429d91e2..00000000
--- a/src/referencePackages/src/system.runtime.interopservices.runtimeinformation/4.3.0/System.Runtime.InteropServices.RuntimeInformation.4.3.0.csproj
+++ /dev/null
@@ -1,17 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.1</TargetFrameworks>
-    <AssemblyName>System.Runtime.InteropServices.RuntimeInformation</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
-    <PackageReference Include="System.Threading" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.runtime.interopservices.runtimeinformation/4.3.0/ref/netstandard1.1/System.Runtime.InteropServices.RuntimeInformation.cs b/src/referencePackages/src/system.runtime.interopservices.runtimeinformation/4.3.0/ref/netstandard1.1/System.Runtime.InteropServices.RuntimeInformation.cs
deleted file mode 100644
index e1d8b4f4..00000000
--- a/src/referencePackages/src/system.runtime.interopservices.runtimeinformation/4.3.0/ref/netstandard1.1/System.Runtime.InteropServices.RuntimeInformation.cs
+++ /dev/null
@@ -1,70 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Runtime.InteropServices.RuntimeInformation")]
-[assembly: System.Reflection.AssemblyDescription("System.Runtime.InteropServices.RuntimeInformation")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Runtime.InteropServices.RuntimeInformation")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.24705.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.24705.01. Commit Hash: 4d1af962ca0fede10beb01d197367c2f90e92c97")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.1.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Runtime.InteropServices
-{
-    public enum Architecture
-    {
-        X86 = 0,
-        X64 = 1,
-        Arm = 2,
-        Arm64 = 3
-    }
-
-    public partial struct OSPlatform : IEquatable<OSPlatform>
-    {
-        public static OSPlatform Linux { get { throw null; } }
-
-        public static OSPlatform OSX { get { throw null; } }
-
-        public static OSPlatform Windows { get { throw null; } }
-
-        public static OSPlatform Create(string osPlatform) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(OSPlatform other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(OSPlatform left, OSPlatform right) { throw null; }
-
-        public static bool operator !=(OSPlatform left, OSPlatform right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public static partial class RuntimeInformation
-    {
-        public static string FrameworkDescription { get { throw null; } }
-
-        public static Architecture OSArchitecture { get { throw null; } }
-
-        public static string OSDescription { get { throw null; } }
-
-        public static Architecture ProcessArchitecture { get { throw null; } }
-
-        public static bool IsOSPlatform(OSPlatform osPlatform) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.interopservices.runtimeinformation/4.3.0/system.runtime.interopservices.runtimeinformation.nuspec b/src/referencePackages/src/system.runtime.interopservices.runtimeinformation/4.3.0/system.runtime.interopservices.runtimeinformation.nuspec
deleted file mode 100644
index 56c860bb..00000000
--- a/src/referencePackages/src/system.runtime.interopservices.runtimeinformation/4.3.0/system.runtime.interopservices.runtimeinformation.nuspec
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Runtime.InteropServices.RuntimeInformation</id>
-    <version>4.3.0</version>
-    <title>System.Runtime.InteropServices.RuntimeInformation</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides APIs to query about runtime and OS information.
-
-Commonly Used Types:
-System.Runtime.InteropServices.RuntimeInformation
-System.Runtime.InteropServices.OSPlatform
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="System.Reflection" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Reflection.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Threading" version="4.3.0" exclude="Compile" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.interopservices/4.3.0/Customizations.cs b/src/referencePackages/src/system.runtime.interopservices/4.3.0/Customizations.cs
deleted file mode 100644
index 9f821ee5..00000000
--- a/src/referencePackages/src/system.runtime.interopservices/4.3.0/Customizations.cs
+++ /dev/null
@@ -1,24 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-
-// See https://github.com/dotnet/source-build/issues/4000 for why this is necessary.
-
-#if NETCOREAPP1_1 || NETSTANDARD1_5
-
-namespace System.Runtime.InteropServices
-{
-    public partial class ComAwareEventInfo : Reflection.EventInfo
-    {
-        public override Reflection.MethodInfo GetAddMethod(bool nonPublic) { throw null; }
-
-        public override Reflection.MethodInfo GetRaiseMethod(bool nonPublic) { throw null; }
-
-        public override Reflection.MethodInfo GetRemoveMethod(bool nonPublic) { throw null; }
-    }
-}
-
-#endif
diff --git a/src/referencePackages/src/system.runtime.interopservices/4.3.0/System.Runtime.InteropServices.4.3.0.csproj b/src/referencePackages/src/system.runtime.interopservices/4.3.0/System.Runtime.InteropServices.4.3.0.csproj
deleted file mode 100644
index dab12ecd..00000000
--- a/src/referencePackages/src/system.runtime.interopservices/4.3.0/System.Runtime.InteropServices.4.3.0.csproj
+++ /dev/null
@@ -1,51 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netcoreapp1.1;netstandard1.1;netstandard1.2;netstandard1.3;netstandard1.5</TargetFrameworks>
-    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netcoreapp1.1'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.2'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.5'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Reflection.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netcoreapp1.1/System.Runtime.InteropServices.cs b/src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netcoreapp1.1/System.Runtime.InteropServices.cs
deleted file mode 100644
index d9c53c84..00000000
--- a/src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netcoreapp1.1/System.Runtime.InteropServices.cs
+++ /dev/null
@@ -1,1594 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Runtime.InteropServices")]
-[assembly: System.Reflection.AssemblyDescription("System.Runtime.InteropServices")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Runtime.InteropServices")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.24705.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.24705.01. Commit Hash: 4d1af962ca0fede10beb01d197367c2f90e92c97")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.1.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-[assembly: System.Runtime.CompilerServices.TypeForwardedTo(typeof(System.Runtime.InteropServices.CriticalHandle))]
-[assembly: System.Runtime.CompilerServices.TypeForwardedTo(typeof(System.Runtime.InteropServices.SafeHandle))]
-namespace System
-{
-    public sealed partial class DataMisalignedException : Exception
-    {
-        public DataMisalignedException() { }
-
-        public DataMisalignedException(string message, Exception innerException) { }
-
-        public DataMisalignedException(string message) { }
-    }
-
-    public partial class DllNotFoundException : TypeLoadException
-    {
-        public DllNotFoundException() { }
-
-        public DllNotFoundException(string message, Exception inner) { }
-
-        public DllNotFoundException(string message) { }
-    }
-}
-
-namespace System.Reflection
-{
-    public sealed partial class Missing
-    {
-        internal Missing() { }
-
-        public static readonly Missing Value;
-    }
-}
-
-namespace System.Runtime.InteropServices
-{
-    public partial struct ArrayWithOffset
-    {
-        public ArrayWithOffset(object array, int offset) { }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(ArrayWithOffset obj) { throw null; }
-
-        public object GetArray() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public int GetOffset() { throw null; }
-
-        public static bool operator ==(ArrayWithOffset a, ArrayWithOffset b) { throw null; }
-
-        public static bool operator !=(ArrayWithOffset a, ArrayWithOffset b) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class BestFitMappingAttribute : Attribute
-    {
-        public bool ThrowOnUnmappableChar;
-        public BestFitMappingAttribute(bool BestFitMapping) { }
-
-        public bool BestFitMapping { get { throw null; } }
-    }
-
-    [Obsolete("BStrWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class BStrWrapper
-    {
-        public BStrWrapper(object value) { }
-
-        public BStrWrapper(string value) { }
-
-        public string WrappedObject { get { throw null; } }
-    }
-
-    public enum CallingConvention
-    {
-        Winapi = 1,
-        Cdecl = 2,
-        StdCall = 3,
-        ThisCall = 4
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, Inherited = false)]
-    public sealed partial class ClassInterfaceAttribute : Attribute
-    {
-        public ClassInterfaceAttribute(short classInterfaceType) { }
-
-        public ClassInterfaceAttribute(ClassInterfaceType classInterfaceType) { }
-
-        public ClassInterfaceType Value { get { throw null; } }
-    }
-
-    public enum ClassInterfaceType
-    {
-        None = 0,
-        AutoDispatch = 1,
-        AutoDual = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class CoClassAttribute : Attribute
-    {
-        public CoClassAttribute(Type coClass) { }
-
-        public Type CoClass { get { throw null; } }
-    }
-
-    [Obsolete("ComAwareEventInfo may be unavailable in future releases.")]
-    public partial class ComAwareEventInfo : Reflection.EventInfo
-    {
-        public ComAwareEventInfo(Type type, string eventName) { }
-
-        public override Reflection.EventAttributes Attributes { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override void AddEventHandler(object target, Delegate handler) { }
-
-        public override void RemoveEventHandler(object target, Delegate handler) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = false)]
-    public sealed partial class ComDefaultInterfaceAttribute : Attribute
-    {
-        public ComDefaultInterfaceAttribute(Type defaultInterface) { }
-
-        public Type Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Interface, Inherited = false)]
-    [Obsolete("ComEventInterfaceAttribute may be unavailable in future releases.")]
-    public sealed partial class ComEventInterfaceAttribute : Attribute
-    {
-        public ComEventInterfaceAttribute(Type SourceInterface, Type EventProvider) { }
-
-        public Type EventProvider { get { throw null; } }
-
-        public Type SourceInterface { get { throw null; } }
-    }
-
-    [Obsolete("ComEventsHelper may be unavailable in future releases.")]
-    public static partial class ComEventsHelper
-    {
-        public static void Combine(object rcw, Guid iid, int dispid, Delegate d) { }
-
-        public static Delegate Remove(object rcw, Guid iid, int dispid, Delegate d) { throw null; }
-    }
-
-    public partial class COMException : Exception
-    {
-        public COMException() { }
-
-        public COMException(string message, Exception inner) { }
-
-        public COMException(string message, int errorCode) { }
-
-        public COMException(string message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class ComImportAttribute : Attribute
-    {
-    }
-
-    public enum ComInterfaceType
-    {
-        InterfaceIsDual = 0,
-        InterfaceIsIUnknown = 1,
-        InterfaceIsIDispatch = 2,
-        InterfaceIsIInspectable = 3
-    }
-
-    public enum ComMemberType
-    {
-        Method = 0,
-        PropGet = 1,
-        PropSet = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = true)]
-    [Obsolete("ComSourceInterfacesAttribute may be unavailable in future releases.")]
-    public sealed partial class ComSourceInterfacesAttribute : Attribute
-    {
-        public ComSourceInterfacesAttribute(string sourceInterfaces) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3, Type sourceInterface4) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface) { }
-
-        public string Value { get { throw null; } }
-    }
-
-    [Obsolete("CurrencyWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class CurrencyWrapper
-    {
-        public CurrencyWrapper(decimal obj) { }
-
-        public CurrencyWrapper(object obj) { }
-
-        public decimal WrappedObject { get { throw null; } }
-    }
-
-    [Obsolete("CustomQueryInterfaceMode and support for ICustomQueryInterface may be unavailable in future releases.")]
-    public enum CustomQueryInterfaceMode
-    {
-        Ignore = 0,
-        Allow = 1
-    }
-
-    [Obsolete("CustomQueryInterfaceResult and support for ICustomQueryInterface may be unavailable in future releases.")]
-    public enum CustomQueryInterfaceResult
-    {
-        Handled = 0,
-        NotHandled = 1,
-        Failed = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Module, Inherited = false)]
-    public sealed partial class DefaultCharSetAttribute : Attribute
-    {
-        public DefaultCharSetAttribute(CharSet charSet) { }
-
-        public CharSet CharSet { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Method, AllowMultiple = false)]
-    public sealed partial class DefaultDllImportSearchPathsAttribute : Attribute
-    {
-        public DefaultDllImportSearchPathsAttribute(DllImportSearchPath paths) { }
-
-        public DllImportSearchPath Paths { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter)]
-    public sealed partial class DefaultParameterValueAttribute : Attribute
-    {
-        public DefaultParameterValueAttribute(object value) { }
-
-        public object Value { get { throw null; } }
-    }
-
-    [Obsolete("DispatchWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class DispatchWrapper
-    {
-        public DispatchWrapper(object obj) { }
-
-        public object WrappedObject { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event, Inherited = false)]
-    public sealed partial class DispIdAttribute : Attribute
-    {
-        public DispIdAttribute(int dispId) { }
-
-        public int Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false)]
-    public sealed partial class DllImportAttribute : Attribute
-    {
-        public bool BestFitMapping;
-        public CallingConvention CallingConvention;
-        public CharSet CharSet;
-        public string EntryPoint;
-        public bool ExactSpelling;
-        public bool PreserveSig;
-        public bool SetLastError;
-        public bool ThrowOnUnmappableChar;
-        public DllImportAttribute(string dllName) { }
-
-        public string Value { get { throw null; } }
-    }
-
-    [Flags]
-    public enum DllImportSearchPath
-    {
-        LegacyBehavior = 0,
-        AssemblyDirectory = 2,
-        UseDllDirectoryForDependencies = 256,
-        ApplicationDirectory = 512,
-        UserDirectories = 1024,
-        System32 = 2048,
-        SafeDirectories = 4096
-    }
-
-    [Obsolete("ErrorWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class ErrorWrapper
-    {
-        public ErrorWrapper(Exception e) { }
-
-        public ErrorWrapper(int errorCode) { }
-
-        public ErrorWrapper(object errorCode) { }
-
-        public int ErrorCode { get { throw null; } }
-    }
-
-    public partial struct GCHandle
-    {
-        public bool IsAllocated { get { throw null; } }
-
-        public object Target { get { throw null; } set { } }
-
-        public IntPtr AddrOfPinnedObject() { throw null; }
-
-        public static GCHandle Alloc(object value, GCHandleType type) { throw null; }
-
-        public static GCHandle Alloc(object value) { throw null; }
-
-        public override bool Equals(object o) { throw null; }
-
-        public void Free() { }
-
-        public static GCHandle FromIntPtr(IntPtr value) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(GCHandle a, GCHandle b) { throw null; }
-
-        public static explicit operator GCHandle(IntPtr value) { throw null; }
-
-        public static explicit operator IntPtr(GCHandle value) { throw null; }
-
-        public static bool operator !=(GCHandle a, GCHandle b) { throw null; }
-
-        public static IntPtr ToIntPtr(GCHandle value) { throw null; }
-    }
-
-    public enum GCHandleType
-    {
-        Weak = 0,
-        WeakTrackResurrection = 1,
-        Normal = 2,
-        Pinned = 3
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)]
-    public sealed partial class GuidAttribute : Attribute
-    {
-        public GuidAttribute(string guid) { }
-
-        public string Value { get { throw null; } }
-    }
-
-    public sealed partial class HandleCollector
-    {
-        public HandleCollector(string name, int initialThreshold, int maximumThreshold) { }
-
-        public HandleCollector(string name, int initialThreshold) { }
-
-        public int Count { get { throw null; } }
-
-        public int InitialThreshold { get { throw null; } }
-
-        public int MaximumThreshold { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public void Add() { }
-
-        public void Remove() { }
-    }
-
-    [Obsolete("ICustomAdapter may be unavailable in future releases.")]
-    public partial interface ICustomAdapter
-    {
-        object GetUnderlyingObject();
-    }
-
-    [Obsolete("ICustomQueryInterface may be unavailable in future releases.")]
-    public partial interface ICustomQueryInterface
-    {
-        CustomQueryInterfaceResult GetInterface(ref Guid iid, out IntPtr ppv);
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class InAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class InterfaceTypeAttribute : Attribute
-    {
-        public InterfaceTypeAttribute(short interfaceType) { }
-
-        public InterfaceTypeAttribute(ComInterfaceType interfaceType) { }
-
-        public ComInterfaceType Value { get { throw null; } }
-    }
-
-    public partial class InvalidComObjectException : Exception
-    {
-        public InvalidComObjectException() { }
-
-        public InvalidComObjectException(string message, Exception inner) { }
-
-        public InvalidComObjectException(string message) { }
-    }
-
-    public partial class InvalidOleVariantTypeException : Exception
-    {
-        public InvalidOleVariantTypeException() { }
-
-        public InvalidOleVariantTypeException(string message, Exception inner) { }
-
-        public InvalidOleVariantTypeException(string message) { }
-    }
-
-    public static partial class Marshal
-    {
-        public static readonly int SystemDefaultCharSize;
-        public static readonly int SystemMaxDBCSCharSize;
-        public static int AddRef(IntPtr pUnk) { throw null; }
-
-        public static IntPtr AllocCoTaskMem(int cb) { throw null; }
-
-        public static IntPtr AllocHGlobal(int cb) { throw null; }
-
-        public static IntPtr AllocHGlobal(IntPtr cb) { throw null; }
-
-        public static bool AreComObjectsAvailableForCleanup() { throw null; }
-
-        public static void Copy(byte[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(char[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(double[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(short[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(int[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(long[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(IntPtr source, byte[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, char[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, double[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, short[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, int[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, long[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, IntPtr[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, float[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(float[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static IntPtr CreateAggregatedObject(IntPtr pOuter, object o) { throw null; }
-
-        public static IntPtr CreateAggregatedObject<T>(IntPtr pOuter, T o) { throw null; }
-
-        public static object CreateWrapperOfType(object o, Type t) { throw null; }
-
-        public static TWrapper CreateWrapperOfType<T, TWrapper>(T o) { throw null; }
-
-        public static void DestroyStructure(IntPtr ptr, Type structuretype) { }
-
-        public static void DestroyStructure<T>(IntPtr ptr) { }
-
-        public static int FinalReleaseComObject(object o) { throw null; }
-
-        public static void FreeBSTR(IntPtr ptr) { }
-
-        public static void FreeCoTaskMem(IntPtr ptr) { }
-
-        public static void FreeHGlobal(IntPtr hglobal) { }
-
-        public static IntPtr GetComInterfaceForObject(object o, Type T, CustomQueryInterfaceMode mode) { throw null; }
-
-        public static IntPtr GetComInterfaceForObject(object o, Type T) { throw null; }
-
-        public static IntPtr GetComInterfaceForObject<T, TInterface>(T o) { throw null; }
-
-        public static Delegate GetDelegateForFunctionPointer(IntPtr ptr, Type t) { throw null; }
-
-        public static TDelegate GetDelegateForFunctionPointer<TDelegate>(IntPtr ptr) { throw null; }
-
-        [Obsolete("GetExceptionCode() may be unavailable in future releases.")]
-        public static int GetExceptionCode() { throw null; }
-
-        public static Exception GetExceptionForHR(int errorCode, IntPtr errorInfo) { throw null; }
-
-        public static Exception GetExceptionForHR(int errorCode) { throw null; }
-
-        public static IntPtr GetFunctionPointerForDelegate(Delegate d) { throw null; }
-
-        public static IntPtr GetFunctionPointerForDelegate<TDelegate>(TDelegate d) { throw null; }
-
-        public static int GetHRForException(Exception e) { throw null; }
-
-        public static int GetHRForLastWin32Error() { throw null; }
-
-        public static IntPtr GetIUnknownForObject(object o) { throw null; }
-
-        public static int GetLastWin32Error() { throw null; }
-
-        [Obsolete("GetNativeVariantForObject(Object, IntPtr) may be unavailable in future releases.")]
-        public static void GetNativeVariantForObject(object obj, IntPtr pDstNativeVariant) { }
-
-        [Obsolete("GetNativeVariantForObject<T>(T, IntPtr) may be unavailable in future releases.")]
-        public static void GetNativeVariantForObject<T>(T obj, IntPtr pDstNativeVariant) { }
-
-        public static object GetObjectForIUnknown(IntPtr pUnk) { throw null; }
-
-        [Obsolete("GetObjectForNativeVariant(IntPtr) may be unavailable in future releases.")]
-        public static object GetObjectForNativeVariant(IntPtr pSrcNativeVariant) { throw null; }
-
-        [Obsolete("GetObjectForNativeVariant<T>(IntPtr) may be unavailable in future releases.")]
-        public static T GetObjectForNativeVariant<T>(IntPtr pSrcNativeVariant) { throw null; }
-
-        [Obsolete("GetObjectsForNativeVariants(IntPtr, Int32) may be unavailable in future releases.")]
-        public static object[] GetObjectsForNativeVariants(IntPtr aSrcNativeVariant, int cVars) { throw null; }
-
-        [Obsolete("GetObjectsForNativeVariants<T>(IntPtr, Int32) may be unavailable in future releases.")]
-        public static T[] GetObjectsForNativeVariants<T>(IntPtr aSrcNativeVariant, int cVars) { throw null; }
-
-        public static int GetStartComSlot(Type t) { throw null; }
-
-        public static Type GetTypeFromCLSID(Guid clsid) { throw null; }
-
-        public static string GetTypeInfoName(ComTypes.ITypeInfo typeInfo) { throw null; }
-
-        public static object GetUniqueObjectForIUnknown(IntPtr unknown) { throw null; }
-
-        public static bool IsComObject(object o) { throw null; }
-
-        public static IntPtr OffsetOf(Type t, string fieldName) { throw null; }
-
-        public static IntPtr OffsetOf<T>(string fieldName) { throw null; }
-
-        public static string PtrToStringAnsi(IntPtr ptr, int len) { throw null; }
-
-        public static string PtrToStringAnsi(IntPtr ptr) { throw null; }
-
-        public static string PtrToStringBSTR(IntPtr ptr) { throw null; }
-
-        public static string PtrToStringUni(IntPtr ptr, int len) { throw null; }
-
-        public static string PtrToStringUni(IntPtr ptr) { throw null; }
-
-        public static string PtrToStringUTF8(IntPtr ptr, int byteLen) { throw null; }
-
-        public static string PtrToStringUTF8(IntPtr ptr) { throw null; }
-
-        public static void PtrToStructure(IntPtr ptr, object structure) { }
-
-        public static object PtrToStructure(IntPtr ptr, Type structureType) { throw null; }
-
-        public static void PtrToStructure<T>(IntPtr ptr, T structure) { }
-
-        public static T PtrToStructure<T>(IntPtr ptr) { throw null; }
-
-        public static int QueryInterface(IntPtr pUnk, ref Guid iid, out IntPtr ppv) { throw null; }
-
-        public static byte ReadByte(IntPtr ptr, int ofs) { throw null; }
-
-        public static byte ReadByte(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadByte(Object, Int32) may be unavailable in future releases.")]
-        public static byte ReadByte(object ptr, int ofs) { throw null; }
-
-        public static short ReadInt16(IntPtr ptr, int ofs) { throw null; }
-
-        public static short ReadInt16(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadInt16(Object, Int32) may be unavailable in future releases.")]
-        public static short ReadInt16(object ptr, int ofs) { throw null; }
-
-        public static int ReadInt32(IntPtr ptr, int ofs) { throw null; }
-
-        public static int ReadInt32(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadInt32(Object, Int32) may be unavailable in future releases.")]
-        public static int ReadInt32(object ptr, int ofs) { throw null; }
-
-        public static long ReadInt64(IntPtr ptr, int ofs) { throw null; }
-
-        public static long ReadInt64(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadInt64(Object, Int32) may be unavailable in future releases.")]
-        public static long ReadInt64(object ptr, int ofs) { throw null; }
-
-        public static IntPtr ReadIntPtr(IntPtr ptr, int ofs) { throw null; }
-
-        public static IntPtr ReadIntPtr(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadIntPtr(Object, Int32) may be unavailable in future releases.")]
-        public static IntPtr ReadIntPtr(object ptr, int ofs) { throw null; }
-
-        public static IntPtr ReAllocCoTaskMem(IntPtr pv, int cb) { throw null; }
-
-        public static IntPtr ReAllocHGlobal(IntPtr pv, IntPtr cb) { throw null; }
-
-        public static int Release(IntPtr pUnk) { throw null; }
-
-        public static int ReleaseComObject(object o) { throw null; }
-
-        public static int SizeOf(object structure) { throw null; }
-
-        public static int SizeOf(Type t) { throw null; }
-
-        public static int SizeOf<T>() { throw null; }
-
-        public static int SizeOf<T>(T structure) { throw null; }
-
-        public static IntPtr StringToBSTR(string s) { throw null; }
-
-        public static IntPtr StringToCoTaskMemAnsi(string s) { throw null; }
-
-        public static IntPtr StringToCoTaskMemUni(string s) { throw null; }
-
-        public static IntPtr StringToCoTaskMemUTF8(string s) { throw null; }
-
-        public static IntPtr StringToHGlobalAnsi(string s) { throw null; }
-
-        public static IntPtr StringToHGlobalUni(string s) { throw null; }
-
-        public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld) { }
-
-        public static void StructureToPtr<T>(T structure, IntPtr ptr, bool fDeleteOld) { }
-
-        public static void ThrowExceptionForHR(int errorCode, IntPtr errorInfo) { }
-
-        public static void ThrowExceptionForHR(int errorCode) { }
-
-        public static IntPtr UnsafeAddrOfPinnedArrayElement(Array arr, int index) { throw null; }
-
-        public static IntPtr UnsafeAddrOfPinnedArrayElement<T>(T[] arr, int index) { throw null; }
-
-        public static void WriteByte(IntPtr ptr, byte val) { }
-
-        public static void WriteByte(IntPtr ptr, int ofs, byte val) { }
-
-        [Obsolete("WriteByte(Object, Int32, Byte) may be unavailable in future releases.")]
-        public static void WriteByte(object ptr, int ofs, byte val) { }
-
-        public static void WriteInt16(IntPtr ptr, char val) { }
-
-        public static void WriteInt16(IntPtr ptr, short val) { }
-
-        public static void WriteInt16(IntPtr ptr, int ofs, char val) { }
-
-        public static void WriteInt16(IntPtr ptr, int ofs, short val) { }
-
-        [Obsolete("WriteInt16(Object, Int32, Char) may be unavailable in future releases.")]
-        public static void WriteInt16(object ptr, int ofs, char val) { }
-
-        [Obsolete("WriteInt16(Object, Int32, Int16) may be unavailable in future releases.")]
-        public static void WriteInt16(object ptr, int ofs, short val) { }
-
-        public static void WriteInt32(IntPtr ptr, int ofs, int val) { }
-
-        public static void WriteInt32(IntPtr ptr, int val) { }
-
-        [Obsolete("WriteInt32(Object, Int32, Int32) may be unavailable in future releases.")]
-        public static void WriteInt32(object ptr, int ofs, int val) { }
-
-        public static void WriteInt64(IntPtr ptr, int ofs, long val) { }
-
-        public static void WriteInt64(IntPtr ptr, long val) { }
-
-        [Obsolete("WriteInt64(Object, Int32, Int64) may be unavailable in future releases.")]
-        public static void WriteInt64(object ptr, int ofs, long val) { }
-
-        public static void WriteIntPtr(IntPtr ptr, int ofs, IntPtr val) { }
-
-        public static void WriteIntPtr(IntPtr ptr, IntPtr val) { }
-
-        [Obsolete("WriteIntPtr(Object, Int32, IntPtr) may be unavailable in future releases.")]
-        public static void WriteIntPtr(object ptr, int ofs, IntPtr val) { }
-
-        public static void ZeroFreeBSTR(IntPtr s) { }
-
-        public static void ZeroFreeCoTaskMemAnsi(IntPtr s) { }
-
-        public static void ZeroFreeCoTaskMemUnicode(IntPtr s) { }
-
-        public static void ZeroFreeCoTaskMemUTF8(IntPtr s) { }
-
-        public static void ZeroFreeGlobalAllocAnsi(IntPtr s) { }
-
-        public static void ZeroFreeGlobalAllocUnicode(IntPtr s) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.ReturnValue, Inherited = false)]
-    public sealed partial class MarshalAsAttribute : Attribute
-    {
-        public UnmanagedType ArraySubType;
-        public int IidParameterIndex;
-        public string MarshalCookie;
-        public string MarshalType;
-        public Type MarshalTypeRef;
-        public VarEnum SafeArraySubType;
-        public Type SafeArrayUserDefinedSubType;
-        public int SizeConst;
-        public short SizeParamIndex;
-        public MarshalAsAttribute(short unmanagedType) { }
-
-        public MarshalAsAttribute(UnmanagedType unmanagedType) { }
-
-        public UnmanagedType Value { get { throw null; } }
-    }
-
-    public partial class MarshalDirectiveException : Exception
-    {
-        public MarshalDirectiveException() { }
-
-        public MarshalDirectiveException(string message, Exception inner) { }
-
-        public MarshalDirectiveException(string message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class OptionalAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false)]
-    public sealed partial class PreserveSigAttribute : Attribute
-    {
-    }
-
-    public partial class SafeArrayRankMismatchException : Exception
-    {
-        public SafeArrayRankMismatchException() { }
-
-        public SafeArrayRankMismatchException(string message, Exception inner) { }
-
-        public SafeArrayRankMismatchException(string message) { }
-    }
-
-    public partial class SafeArrayTypeMismatchException : Exception
-    {
-        public SafeArrayTypeMismatchException() { }
-
-        public SafeArrayTypeMismatchException(string message, Exception inner) { }
-
-        public SafeArrayTypeMismatchException(string message) { }
-    }
-
-    public abstract partial class SafeBuffer : SafeHandle
-    {
-        protected SafeBuffer(bool ownsHandle) : base(default, default) { }
-
-        [CLSCompliant(false)]
-        public ulong ByteLength { get { throw null; } }
-
-        public override bool IsInvalid { get { throw null; } }
-
-        [CLSCompliant(false)]
-        public unsafe void AcquirePointer(ref byte* pointer) { }
-
-        [CLSCompliant(false)]
-        public void Initialize(uint numElements, uint sizeOfEachElement) { }
-
-        [CLSCompliant(false)]
-        public void Initialize(ulong numBytes) { }
-
-        [CLSCompliant(false)]
-        public void Initialize<T>(uint numElements)
-            where T : struct { }
-
-        [CLSCompliant(false)]
-        public T Read<T>(ulong byteOffset)
-            where T : struct { throw null; }
-
-        [CLSCompliant(false)]
-        public void ReadArray<T>(ulong byteOffset, T[] array, int index, int count)
-            where T : struct { }
-
-        public void ReleasePointer() { }
-
-        [CLSCompliant(false)]
-        public void Write<T>(ulong byteOffset, T value)
-            where T : struct { }
-
-        [CLSCompliant(false)]
-        public void WriteArray<T>(ulong byteOffset, T[] array, int index, int count)
-            where T : struct { }
-    }
-
-    public partial class SEHException : Exception
-    {
-        public SEHException() { }
-
-        public SEHException(string message, Exception inner) { }
-
-        public SEHException(string message) { }
-
-        public virtual bool CanResume() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class TypeIdentifierAttribute : Attribute
-    {
-        public TypeIdentifierAttribute() { }
-
-        public TypeIdentifierAttribute(string scope, string identifier) { }
-
-        public string Identifier { get { throw null; } }
-
-        public string Scope { get { throw null; } }
-    }
-
-    [Obsolete("UnknownWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class UnknownWrapper
-    {
-        public UnknownWrapper(object obj) { }
-
-        public object WrappedObject { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class UnmanagedFunctionPointerAttribute : Attribute
-    {
-        public bool BestFitMapping;
-        public CharSet CharSet;
-        public bool SetLastError;
-        public bool ThrowOnUnmappableChar;
-        public UnmanagedFunctionPointerAttribute(CallingConvention callingConvention) { }
-
-        public CallingConvention CallingConvention { get { throw null; } }
-    }
-
-    public enum UnmanagedType
-    {
-        Bool = 2,
-        I1 = 3,
-        U1 = 4,
-        I2 = 5,
-        U2 = 6,
-        I4 = 7,
-        U4 = 8,
-        I8 = 9,
-        U8 = 10,
-        R4 = 11,
-        R8 = 12,
-        Currency = 15,
-        BStr = 19,
-        LPStr = 20,
-        LPWStr = 21,
-        LPTStr = 22,
-        ByValTStr = 23,
-        IUnknown = 25,
-        IDispatch = 26,
-        Struct = 27,
-        Interface = 28,
-        SafeArray = 29,
-        ByValArray = 30,
-        SysInt = 31,
-        SysUInt = 32,
-        VBByRefStr = 34,
-        AnsiBStr = 35,
-        TBStr = 36,
-        VariantBool = 37,
-        FunctionPtr = 38,
-        AsAny = 40,
-        LPArray = 42,
-        LPStruct = 43,
-        Error = 45,
-        IInspectable = 46,
-        HString = 47,
-        LPUTF8Str = 48
-    }
-
-    [Obsolete("Marshalling VARIANTs may be unavailable in future releases.")]
-    public enum VarEnum
-    {
-        VT_EMPTY = 0,
-        VT_NULL = 1,
-        VT_I2 = 2,
-        VT_I4 = 3,
-        VT_R4 = 4,
-        VT_R8 = 5,
-        VT_CY = 6,
-        VT_DATE = 7,
-        VT_BSTR = 8,
-        VT_DISPATCH = 9,
-        VT_ERROR = 10,
-        VT_BOOL = 11,
-        VT_VARIANT = 12,
-        VT_UNKNOWN = 13,
-        VT_DECIMAL = 14,
-        VT_I1 = 16,
-        VT_UI1 = 17,
-        VT_UI2 = 18,
-        VT_UI4 = 19,
-        VT_I8 = 20,
-        VT_UI8 = 21,
-        VT_INT = 22,
-        VT_UINT = 23,
-        VT_VOID = 24,
-        VT_HRESULT = 25,
-        VT_PTR = 26,
-        VT_SAFEARRAY = 27,
-        VT_CARRAY = 28,
-        VT_USERDEFINED = 29,
-        VT_LPSTR = 30,
-        VT_LPWSTR = 31,
-        VT_RECORD = 36,
-        VT_FILETIME = 64,
-        VT_BLOB = 65,
-        VT_STREAM = 66,
-        VT_STORAGE = 67,
-        VT_STREAMED_OBJECT = 68,
-        VT_STORED_OBJECT = 69,
-        VT_BLOB_OBJECT = 70,
-        VT_CF = 71,
-        VT_CLSID = 72,
-        VT_VECTOR = 4096,
-        VT_ARRAY = 8192,
-        VT_BYREF = 16384
-    }
-
-    [Obsolete("VariantWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class VariantWrapper
-    {
-        public VariantWrapper(object obj) { }
-
-        public object WrappedObject { get { throw null; } }
-    }
-}
-
-namespace System.Runtime.InteropServices.ComTypes
-{
-    [Flags]
-    public enum ADVF
-    {
-        ADVF_NODATA = 1,
-        ADVF_PRIMEFIRST = 2,
-        ADVF_ONLYONCE = 4,
-        ADVFCACHE_NOHANDLER = 8,
-        ADVFCACHE_FORCEBUILTIN = 16,
-        ADVFCACHE_ONSAVE = 32,
-        ADVF_DATAONSTOP = 64
-    }
-
-    public partial struct BINDPTR
-    {
-        public IntPtr lpfuncdesc;
-        public IntPtr lptcomp;
-        public IntPtr lpvardesc;
-    }
-
-    public partial struct BIND_OPTS
-    {
-        public int cbStruct;
-        public int dwTickCountDeadline;
-        public int grfFlags;
-        public int grfMode;
-    }
-
-    public enum CALLCONV
-    {
-        CC_CDECL = 1,
-        CC_MSCPASCAL = 2,
-        CC_PASCAL = 2,
-        CC_MACPASCAL = 3,
-        CC_STDCALL = 4,
-        CC_RESERVED = 5,
-        CC_SYSCALL = 6,
-        CC_MPWCDECL = 7,
-        CC_MPWPASCAL = 8,
-        CC_MAX = 9
-    }
-
-    public partial struct CONNECTDATA
-    {
-        public int dwCookie;
-        public object pUnk;
-    }
-
-    public enum DATADIR
-    {
-        DATADIR_GET = 1,
-        DATADIR_SET = 2
-    }
-
-    public enum DESCKIND
-    {
-        DESCKIND_NONE = 0,
-        DESCKIND_FUNCDESC = 1,
-        DESCKIND_VARDESC = 2,
-        DESCKIND_TYPECOMP = 3,
-        DESCKIND_IMPLICITAPPOBJ = 4,
-        DESCKIND_MAX = 5
-    }
-
-    public partial struct DISPPARAMS
-    {
-        public int cArgs;
-        public int cNamedArgs;
-        public IntPtr rgdispidNamedArgs;
-        public IntPtr rgvarg;
-    }
-
-    [Flags]
-    public enum DVASPECT
-    {
-        DVASPECT_CONTENT = 1,
-        DVASPECT_THUMBNAIL = 2,
-        DVASPECT_ICON = 4,
-        DVASPECT_DOCPRINT = 8
-    }
-
-    public partial struct ELEMDESC
-    {
-        public DESCUNION desc;
-        public TYPEDESC tdesc;
-        public partial struct DESCUNION
-        {
-            public IDLDESC idldesc;
-            public PARAMDESC paramdesc;
-        }
-    }
-
-    public partial struct EXCEPINFO
-    {
-        public string bstrDescription;
-        public string bstrHelpFile;
-        public string bstrSource;
-        public int dwHelpContext;
-        public IntPtr pfnDeferredFillIn;
-        public IntPtr pvReserved;
-        public int scode;
-        public short wCode;
-        public short wReserved;
-    }
-
-    public partial struct FILETIME
-    {
-        public int dwHighDateTime;
-        public int dwLowDateTime;
-    }
-
-    public partial struct FORMATETC
-    {
-        public short cfFormat;
-        public DVASPECT dwAspect;
-        public int lindex;
-        public IntPtr ptd;
-        public TYMED tymed;
-    }
-
-    public partial struct FUNCDESC
-    {
-        public CALLCONV callconv;
-        public short cParams;
-        public short cParamsOpt;
-        public short cScodes;
-        public ELEMDESC elemdescFunc;
-        public FUNCKIND funckind;
-        public INVOKEKIND invkind;
-        public IntPtr lprgelemdescParam;
-        public IntPtr lprgscode;
-        public int memid;
-        public short oVft;
-        public short wFuncFlags;
-    }
-
-    [Flags]
-    public enum FUNCFLAGS : short
-    {
-        FUNCFLAG_FRESTRICTED = 1,
-        FUNCFLAG_FSOURCE = 2,
-        FUNCFLAG_FBINDABLE = 4,
-        FUNCFLAG_FREQUESTEDIT = 8,
-        FUNCFLAG_FDISPLAYBIND = 16,
-        FUNCFLAG_FDEFAULTBIND = 32,
-        FUNCFLAG_FHIDDEN = 64,
-        FUNCFLAG_FUSESGETLASTERROR = 128,
-        FUNCFLAG_FDEFAULTCOLLELEM = 256,
-        FUNCFLAG_FUIDEFAULT = 512,
-        FUNCFLAG_FNONBROWSABLE = 1024,
-        FUNCFLAG_FREPLACEABLE = 2048,
-        FUNCFLAG_FIMMEDIATEBIND = 4096
-    }
-
-    public enum FUNCKIND
-    {
-        FUNC_VIRTUAL = 0,
-        FUNC_PUREVIRTUAL = 1,
-        FUNC_NONVIRTUAL = 2,
-        FUNC_STATIC = 3,
-        FUNC_DISPATCH = 4
-    }
-
-    public partial interface IAdviseSink
-    {
-        void OnClose();
-        void OnDataChange(ref FORMATETC format, ref STGMEDIUM stgmedium);
-        void OnRename(IMoniker moniker);
-        void OnSave();
-        void OnViewChange(int aspect, int index);
-    }
-
-    public partial interface IBindCtx
-    {
-        void EnumObjectParam(out IEnumString ppenum);
-        void GetBindOptions(ref BIND_OPTS pbindopts);
-        void GetObjectParam(string pszKey, out object ppunk);
-        void GetRunningObjectTable(out IRunningObjectTable pprot);
-        void RegisterObjectBound(object punk);
-        void RegisterObjectParam(string pszKey, object punk);
-        void ReleaseBoundObjects();
-        void RevokeObjectBound(object punk);
-        int RevokeObjectParam(string pszKey);
-        void SetBindOptions(ref BIND_OPTS pbindopts);
-    }
-
-    public partial interface IConnectionPoint
-    {
-        void Advise(object pUnkSink, out int pdwCookie);
-        void EnumConnections(out IEnumConnections ppEnum);
-        void GetConnectionInterface(out Guid pIID);
-        void GetConnectionPointContainer(out IConnectionPointContainer ppCPC);
-        void Unadvise(int dwCookie);
-    }
-
-    public partial interface IConnectionPointContainer
-    {
-        void EnumConnectionPoints(out IEnumConnectionPoints ppEnum);
-        void FindConnectionPoint(ref Guid riid, out IConnectionPoint ppCP);
-    }
-
-    public partial struct IDLDESC
-    {
-        public IntPtr dwReserved;
-        public IDLFLAG wIDLFlags;
-    }
-
-    [Flags]
-    public enum IDLFLAG : short
-    {
-        IDLFLAG_NONE = 0,
-        IDLFLAG_FIN = 1,
-        IDLFLAG_FOUT = 2,
-        IDLFLAG_FLCID = 4,
-        IDLFLAG_FRETVAL = 8
-    }
-
-    public partial interface IEnumConnectionPoints
-    {
-        void Clone(out IEnumConnectionPoints ppenum);
-        int Next(int celt, IConnectionPoint[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumConnections
-    {
-        void Clone(out IEnumConnections ppenum);
-        int Next(int celt, CONNECTDATA[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumFORMATETC
-    {
-        void Clone(out IEnumFORMATETC newEnum);
-        int Next(int celt, FORMATETC[] rgelt, int[] pceltFetched);
-        int Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumMoniker
-    {
-        void Clone(out IEnumMoniker ppenum);
-        int Next(int celt, IMoniker[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumString
-    {
-        void Clone(out IEnumString ppenum);
-        int Next(int celt, string[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumVARIANT
-    {
-        IEnumVARIANT Clone();
-        int Next(int celt, object[] rgVar, IntPtr pceltFetched);
-        int Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IMoniker
-    {
-        void BindToObject(IBindCtx pbc, IMoniker pmkToLeft, ref Guid riidResult, out object ppvResult);
-        void BindToStorage(IBindCtx pbc, IMoniker pmkToLeft, ref Guid riid, out object ppvObj);
-        void CommonPrefixWith(IMoniker pmkOther, out IMoniker ppmkPrefix);
-        void ComposeWith(IMoniker pmkRight, bool fOnlyIfNotGeneric, out IMoniker ppmkComposite);
-        void Enum(bool fForward, out IEnumMoniker ppenumMoniker);
-        void GetClassID(out Guid pClassID);
-        void GetDisplayName(IBindCtx pbc, IMoniker pmkToLeft, out string ppszDisplayName);
-        void GetSizeMax(out long pcbSize);
-        void GetTimeOfLastChange(IBindCtx pbc, IMoniker pmkToLeft, out FILETIME pFileTime);
-        void Hash(out int pdwHash);
-        void Inverse(out IMoniker ppmk);
-        int IsDirty();
-        int IsEqual(IMoniker pmkOtherMoniker);
-        int IsRunning(IBindCtx pbc, IMoniker pmkToLeft, IMoniker pmkNewlyRunning);
-        int IsSystemMoniker(out int pdwMksys);
-        void Load(IStream pStm);
-        void ParseDisplayName(IBindCtx pbc, IMoniker pmkToLeft, string pszDisplayName, out int pchEaten, out IMoniker ppmkOut);
-        void Reduce(IBindCtx pbc, int dwReduceHowFar, ref IMoniker ppmkToLeft, out IMoniker ppmkReduced);
-        void RelativePathTo(IMoniker pmkOther, out IMoniker ppmkRelPath);
-        void Save(IStream pStm, bool fClearDirty);
-    }
-
-    [Flags]
-    public enum IMPLTYPEFLAGS
-    {
-        IMPLTYPEFLAG_FDEFAULT = 1,
-        IMPLTYPEFLAG_FSOURCE = 2,
-        IMPLTYPEFLAG_FRESTRICTED = 4,
-        IMPLTYPEFLAG_FDEFAULTVTABLE = 8
-    }
-
-    [Flags]
-    public enum INVOKEKIND
-    {
-        INVOKE_FUNC = 1,
-        INVOKE_PROPERTYGET = 2,
-        INVOKE_PROPERTYPUT = 4,
-        INVOKE_PROPERTYPUTREF = 8
-    }
-
-    public partial interface IPersistFile
-    {
-        void GetClassID(out Guid pClassID);
-        void GetCurFile(out string ppszFileName);
-        int IsDirty();
-        void Load(string pszFileName, int dwMode);
-        void Save(string pszFileName, bool fRemember);
-        void SaveCompleted(string pszFileName);
-    }
-
-    public partial interface IRunningObjectTable
-    {
-        void EnumRunning(out IEnumMoniker ppenumMoniker);
-        int GetObject(IMoniker pmkObjectName, out object ppunkObject);
-        int GetTimeOfLastChange(IMoniker pmkObjectName, out FILETIME pfiletime);
-        int IsRunning(IMoniker pmkObjectName);
-        void NoteChangeTime(int dwRegister, ref FILETIME pfiletime);
-        int Register(int grfFlags, object punkObject, IMoniker pmkObjectName);
-        void Revoke(int dwRegister);
-    }
-
-    public partial interface IStream
-    {
-        void Clone(out IStream ppstm);
-        void Commit(int grfCommitFlags);
-        void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);
-        void LockRegion(long libOffset, long cb, int dwLockType);
-        void Read(byte[] pv, int cb, IntPtr pcbRead);
-        void Revert();
-        void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition);
-        void SetSize(long libNewSize);
-        void Stat(out STATSTG pstatstg, int grfStatFlag);
-        void UnlockRegion(long libOffset, long cb, int dwLockType);
-        void Write(byte[] pv, int cb, IntPtr pcbWritten);
-    }
-
-    public partial interface ITypeComp
-    {
-        void Bind(string szName, int lHashVal, short wFlags, out ITypeInfo ppTInfo, out DESCKIND pDescKind, out BINDPTR pBindPtr);
-        void BindType(string szName, int lHashVal, out ITypeInfo ppTInfo, out ITypeComp ppTComp);
-    }
-
-    public partial interface ITypeInfo
-    {
-        void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv);
-        void CreateInstance(object pUnkOuter, ref Guid riid, out object ppvObj);
-        void GetContainingTypeLib(out ITypeLib ppTLB, out int pIndex);
-        void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetFuncDesc(int index, out IntPtr ppFuncDesc);
-        void GetIDsOfNames(string[] rgszNames, int cNames, int[] pMemId);
-        void GetImplTypeFlags(int index, out IMPLTYPEFLAGS pImplTypeFlags);
-        void GetMops(int memid, out string pBstrMops);
-        void GetNames(int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);
-        void GetRefTypeInfo(int hRef, out ITypeInfo ppTI);
-        void GetRefTypeOfImplType(int index, out int href);
-        void GetTypeAttr(out IntPtr ppTypeAttr);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetVarDesc(int index, out IntPtr ppVarDesc);
-        void Invoke(object pvInstance, int memid, short wFlags, ref DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr);
-        void ReleaseFuncDesc(IntPtr pFuncDesc);
-        void ReleaseTypeAttr(IntPtr pTypeAttr);
-        void ReleaseVarDesc(IntPtr pVarDesc);
-    }
-
-    public partial interface ITypeInfo2 : ITypeInfo
-    {
-        void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv);
-        void CreateInstance(object pUnkOuter, ref Guid riid, out object ppvObj);
-        void GetAllCustData(IntPtr pCustData);
-        void GetAllFuncCustData(int index, IntPtr pCustData);
-        void GetAllImplTypeCustData(int index, IntPtr pCustData);
-        void GetAllParamCustData(int indexFunc, int indexParam, IntPtr pCustData);
-        void GetAllVarCustData(int index, IntPtr pCustData);
-        void GetContainingTypeLib(out ITypeLib ppTLB, out int pIndex);
-        void GetCustData(ref Guid guid, out object pVarVal);
-        void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetDocumentation2(int memid, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll);
-        void GetFuncCustData(int index, ref Guid guid, out object pVarVal);
-        void GetFuncDesc(int index, out IntPtr ppFuncDesc);
-        void GetFuncIndexOfMemId(int memid, INVOKEKIND invKind, out int pFuncIndex);
-        void GetIDsOfNames(string[] rgszNames, int cNames, int[] pMemId);
-        void GetImplTypeCustData(int index, ref Guid guid, out object pVarVal);
-        void GetImplTypeFlags(int index, out IMPLTYPEFLAGS pImplTypeFlags);
-        void GetMops(int memid, out string pBstrMops);
-        void GetNames(int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);
-        void GetParamCustData(int indexFunc, int indexParam, ref Guid guid, out object pVarVal);
-        void GetRefTypeInfo(int hRef, out ITypeInfo ppTI);
-        void GetRefTypeOfImplType(int index, out int href);
-        void GetTypeAttr(out IntPtr ppTypeAttr);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetTypeFlags(out int pTypeFlags);
-        void GetTypeKind(out TYPEKIND pTypeKind);
-        void GetVarCustData(int index, ref Guid guid, out object pVarVal);
-        void GetVarDesc(int index, out IntPtr ppVarDesc);
-        void GetVarIndexOfMemId(int memid, out int pVarIndex);
-        void Invoke(object pvInstance, int memid, short wFlags, ref DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr);
-        void ReleaseFuncDesc(IntPtr pFuncDesc);
-        void ReleaseTypeAttr(IntPtr pTypeAttr);
-        void ReleaseVarDesc(IntPtr pVarDesc);
-    }
-
-    public partial interface ITypeLib
-    {
-        void FindName(string szNameBuf, int lHashVal, ITypeInfo[] ppTInfo, int[] rgMemId, ref short pcFound);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetLibAttr(out IntPtr ppTLibAttr);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetTypeInfo(int index, out ITypeInfo ppTI);
-        int GetTypeInfoCount();
-        void GetTypeInfoOfGuid(ref Guid guid, out ITypeInfo ppTInfo);
-        void GetTypeInfoType(int index, out TYPEKIND pTKind);
-        bool IsName(string szNameBuf, int lHashVal);
-        void ReleaseTLibAttr(IntPtr pTLibAttr);
-    }
-
-    public partial interface ITypeLib2 : ITypeLib
-    {
-        void FindName(string szNameBuf, int lHashVal, ITypeInfo[] ppTInfo, int[] rgMemId, ref short pcFound);
-        void GetAllCustData(IntPtr pCustData);
-        void GetCustData(ref Guid guid, out object pVarVal);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetDocumentation2(int index, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll);
-        void GetLibAttr(out IntPtr ppTLibAttr);
-        void GetLibStatistics(IntPtr pcUniqueNames, out int pcchUniqueNames);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetTypeInfo(int index, out ITypeInfo ppTI);
-        int GetTypeInfoCount();
-        void GetTypeInfoOfGuid(ref Guid guid, out ITypeInfo ppTInfo);
-        void GetTypeInfoType(int index, out TYPEKIND pTKind);
-        bool IsName(string szNameBuf, int lHashVal);
-        void ReleaseTLibAttr(IntPtr pTLibAttr);
-    }
-
-    [Flags]
-    public enum LIBFLAGS : short
-    {
-        LIBFLAG_FRESTRICTED = 1,
-        LIBFLAG_FCONTROL = 2,
-        LIBFLAG_FHIDDEN = 4,
-        LIBFLAG_FHASDISKIMAGE = 8
-    }
-
-    public partial struct PARAMDESC
-    {
-        public IntPtr lpVarValue;
-        public PARAMFLAG wParamFlags;
-    }
-
-    [Flags]
-    public enum PARAMFLAG : short
-    {
-        PARAMFLAG_NONE = 0,
-        PARAMFLAG_FIN = 1,
-        PARAMFLAG_FOUT = 2,
-        PARAMFLAG_FLCID = 4,
-        PARAMFLAG_FRETVAL = 8,
-        PARAMFLAG_FOPT = 16,
-        PARAMFLAG_FHASDEFAULT = 32,
-        PARAMFLAG_FHASCUSTDATA = 64
-    }
-
-    public partial struct STATDATA
-    {
-        public ADVF advf;
-        public IAdviseSink advSink;
-        public int connection;
-        public FORMATETC formatetc;
-    }
-
-    public partial struct STATSTG
-    {
-        public FILETIME atime;
-        public long cbSize;
-        public Guid clsid;
-        public FILETIME ctime;
-        public int grfLocksSupported;
-        public int grfMode;
-        public int grfStateBits;
-        public FILETIME mtime;
-        public string pwcsName;
-        public int reserved;
-        public int type;
-    }
-
-    public partial struct STGMEDIUM
-    {
-        public object pUnkForRelease;
-        public TYMED tymed;
-        public IntPtr unionmember;
-    }
-
-    public enum SYSKIND
-    {
-        SYS_WIN16 = 0,
-        SYS_WIN32 = 1,
-        SYS_MAC = 2,
-        SYS_WIN64 = 3
-    }
-
-    [Flags]
-    public enum TYMED
-    {
-        TYMED_NULL = 0,
-        TYMED_HGLOBAL = 1,
-        TYMED_FILE = 2,
-        TYMED_ISTREAM = 4,
-        TYMED_ISTORAGE = 8,
-        TYMED_GDI = 16,
-        TYMED_MFPICT = 32,
-        TYMED_ENHMF = 64
-    }
-
-    public partial struct TYPEATTR
-    {
-        public short cbAlignment;
-        public int cbSizeInstance;
-        public short cbSizeVft;
-        public short cFuncs;
-        public short cImplTypes;
-        public short cVars;
-        public int dwReserved;
-        public Guid guid;
-        public IDLDESC idldescType;
-        public int lcid;
-        public IntPtr lpstrSchema;
-        public const int MEMBER_ID_NIL = -1;
-        public int memidConstructor;
-        public int memidDestructor;
-        public TYPEDESC tdescAlias;
-        public TYPEKIND typekind;
-        public short wMajorVerNum;
-        public short wMinorVerNum;
-        public TYPEFLAGS wTypeFlags;
-    }
-
-    public partial struct TYPEDESC
-    {
-        public IntPtr lpValue;
-        public short vt;
-    }
-
-    [Flags]
-    public enum TYPEFLAGS : short
-    {
-        TYPEFLAG_FAPPOBJECT = 1,
-        TYPEFLAG_FCANCREATE = 2,
-        TYPEFLAG_FLICENSED = 4,
-        TYPEFLAG_FPREDECLID = 8,
-        TYPEFLAG_FHIDDEN = 16,
-        TYPEFLAG_FCONTROL = 32,
-        TYPEFLAG_FDUAL = 64,
-        TYPEFLAG_FNONEXTENSIBLE = 128,
-        TYPEFLAG_FOLEAUTOMATION = 256,
-        TYPEFLAG_FRESTRICTED = 512,
-        TYPEFLAG_FAGGREGATABLE = 1024,
-        TYPEFLAG_FREPLACEABLE = 2048,
-        TYPEFLAG_FDISPATCHABLE = 4096,
-        TYPEFLAG_FREVERSEBIND = 8192,
-        TYPEFLAG_FPROXY = 16384
-    }
-
-    public enum TYPEKIND
-    {
-        TKIND_ENUM = 0,
-        TKIND_RECORD = 1,
-        TKIND_MODULE = 2,
-        TKIND_INTERFACE = 3,
-        TKIND_DISPATCH = 4,
-        TKIND_COCLASS = 5,
-        TKIND_ALIAS = 6,
-        TKIND_UNION = 7,
-        TKIND_MAX = 8
-    }
-
-    public partial struct TYPELIBATTR
-    {
-        public Guid guid;
-        public int lcid;
-        public SYSKIND syskind;
-        public LIBFLAGS wLibFlags;
-        public short wMajorVerNum;
-        public short wMinorVerNum;
-    }
-
-    public partial struct VARDESC
-    {
-        public DESCUNION desc;
-        public ELEMDESC elemdescVar;
-        public string lpstrSchema;
-        public int memid;
-        public VARKIND varkind;
-        public short wVarFlags;
-        public partial struct DESCUNION
-        {
-            public IntPtr lpvarValue;
-            public int oInst;
-        }
-    }
-
-    [Flags]
-    public enum VARFLAGS : short
-    {
-        VARFLAG_FREADONLY = 1,
-        VARFLAG_FSOURCE = 2,
-        VARFLAG_FBINDABLE = 4,
-        VARFLAG_FREQUESTEDIT = 8,
-        VARFLAG_FDISPLAYBIND = 16,
-        VARFLAG_FDEFAULTBIND = 32,
-        VARFLAG_FHIDDEN = 64,
-        VARFLAG_FRESTRICTED = 128,
-        VARFLAG_FDEFAULTCOLLELEM = 256,
-        VARFLAG_FUIDEFAULT = 512,
-        VARFLAG_FNONBROWSABLE = 1024,
-        VARFLAG_FREPLACEABLE = 2048,
-        VARFLAG_FIMMEDIATEBIND = 4096
-    }
-
-    public enum VARKIND
-    {
-        VAR_PERINSTANCE = 0,
-        VAR_STATIC = 1,
-        VAR_CONST = 2,
-        VAR_DISPATCH = 3
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.1/System.Runtime.InteropServices.cs b/src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.1/System.Runtime.InteropServices.cs
deleted file mode 100644
index a4e399db..00000000
--- a/src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.1/System.Runtime.InteropServices.cs
+++ /dev/null
@@ -1,1565 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyDescription("System.Runtime.InteropServices.dll")]
-[assembly: System.Reflection.AssemblyTitle("System.Runtime.InteropServices.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Runtime.InteropServices.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public sealed partial class DataMisalignedException : Exception
-    {
-        public DataMisalignedException() { }
-
-        public DataMisalignedException(string message, Exception innerException) { }
-
-        public DataMisalignedException(string message) { }
-    }
-
-    public partial class DllNotFoundException : TypeLoadException
-    {
-        public DllNotFoundException() { }
-
-        public DllNotFoundException(string message, Exception inner) { }
-
-        public DllNotFoundException(string message) { }
-    }
-}
-
-namespace System.Reflection
-{
-    public sealed partial class Missing
-    {
-        internal Missing() { }
-
-        public static readonly Missing Value;
-    }
-}
-
-namespace System.Runtime.InteropServices
-{
-    public partial struct ArrayWithOffset
-    {
-        public ArrayWithOffset(object array, int offset) { }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(ArrayWithOffset obj) { throw null; }
-
-        public object GetArray() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public int GetOffset() { throw null; }
-
-        public static bool operator ==(ArrayWithOffset a, ArrayWithOffset b) { throw null; }
-
-        public static bool operator !=(ArrayWithOffset a, ArrayWithOffset b) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class BestFitMappingAttribute : Attribute
-    {
-        public bool ThrowOnUnmappableChar;
-        public BestFitMappingAttribute(bool BestFitMapping) { }
-
-        public bool BestFitMapping { get { throw null; } }
-    }
-
-    public sealed partial class BStrWrapper
-    {
-        public BStrWrapper(object value) { }
-
-        public BStrWrapper(string value) { }
-
-        public string WrappedObject { get { throw null; } }
-    }
-
-    public enum CallingConvention
-    {
-        Winapi = 1,
-        Cdecl = 2,
-        StdCall = 3,
-        ThisCall = 4
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, Inherited = false)]
-    public sealed partial class ClassInterfaceAttribute : Attribute
-    {
-        public ClassInterfaceAttribute(short classInterfaceType) { }
-
-        public ClassInterfaceAttribute(ClassInterfaceType classInterfaceType) { }
-
-        public ClassInterfaceType Value { get { throw null; } }
-    }
-
-    public enum ClassInterfaceType
-    {
-        None = 0,
-        AutoDispatch = 1,
-        AutoDual = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class CoClassAttribute : Attribute
-    {
-        public CoClassAttribute(Type coClass) { }
-
-        public Type CoClass { get { throw null; } }
-    }
-
-    public partial class ComAwareEventInfo : Reflection.EventInfo
-    {
-        public ComAwareEventInfo(Type type, string eventName) { }
-
-        public override Reflection.EventAttributes Attributes { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override void AddEventHandler(object target, Delegate handler) { }
-
-        public override void RemoveEventHandler(object target, Delegate handler) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = false)]
-    public sealed partial class ComDefaultInterfaceAttribute : Attribute
-    {
-        public ComDefaultInterfaceAttribute(Type defaultInterface) { }
-
-        public Type Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class ComEventInterfaceAttribute : Attribute
-    {
-        public ComEventInterfaceAttribute(Type SourceInterface, Type EventProvider) { }
-
-        public Type EventProvider { get { throw null; } }
-
-        public Type SourceInterface { get { throw null; } }
-    }
-
-    public static partial class ComEventsHelper
-    {
-        public static void Combine(object rcw, Guid iid, int dispid, Delegate d) { }
-
-        public static Delegate Remove(object rcw, Guid iid, int dispid, Delegate d) { throw null; }
-    }
-
-    public partial class COMException : Exception
-    {
-        public COMException() { }
-
-        public COMException(string message, Exception inner) { }
-
-        public COMException(string message, int errorCode) { }
-
-        public COMException(string message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class ComImportAttribute : Attribute
-    {
-    }
-
-    public enum ComInterfaceType
-    {
-        InterfaceIsDual = 0,
-        InterfaceIsIUnknown = 1,
-        InterfaceIsIDispatch = 2,
-        InterfaceIsIInspectable = 3
-    }
-
-    public enum ComMemberType
-    {
-        Method = 0,
-        PropGet = 1,
-        PropSet = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = true)]
-    public sealed partial class ComSourceInterfacesAttribute : Attribute
-    {
-        public ComSourceInterfacesAttribute(string sourceInterfaces) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3, Type sourceInterface4) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface) { }
-
-        public string Value { get { throw null; } }
-    }
-
-    public abstract partial class CriticalHandle : IDisposable
-    {
-        protected IntPtr handle;
-        protected CriticalHandle(IntPtr invalidHandleValue) { }
-
-        public bool IsClosed { get { throw null; } }
-
-        public abstract bool IsInvalid { get; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        ~CriticalHandle() {
-        }
-
-        protected abstract bool ReleaseHandle();
-        protected void SetHandle(IntPtr handle) { }
-
-        public void SetHandleAsInvalid() { }
-    }
-
-    public sealed partial class CurrencyWrapper
-    {
-        public CurrencyWrapper(decimal obj) { }
-
-        public CurrencyWrapper(object obj) { }
-
-        public decimal WrappedObject { get { throw null; } }
-    }
-
-    public enum CustomQueryInterfaceMode
-    {
-        Ignore = 0,
-        Allow = 1
-    }
-
-    public enum CustomQueryInterfaceResult
-    {
-        Handled = 0,
-        NotHandled = 1,
-        Failed = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Module, Inherited = false)]
-    public sealed partial class DefaultCharSetAttribute : Attribute
-    {
-        public DefaultCharSetAttribute(CharSet charSet) { }
-
-        public CharSet CharSet { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Method, AllowMultiple = false)]
-    public sealed partial class DefaultDllImportSearchPathsAttribute : Attribute
-    {
-        public DefaultDllImportSearchPathsAttribute(DllImportSearchPath paths) { }
-
-        public DllImportSearchPath Paths { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter)]
-    public sealed partial class DefaultParameterValueAttribute : Attribute
-    {
-        public DefaultParameterValueAttribute(object value) { }
-
-        public object Value { get { throw null; } }
-    }
-
-    public sealed partial class DispatchWrapper
-    {
-        public DispatchWrapper(object obj) { }
-
-        public object WrappedObject { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event, Inherited = false)]
-    public sealed partial class DispIdAttribute : Attribute
-    {
-        public DispIdAttribute(int dispId) { }
-
-        public int Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false)]
-    public sealed partial class DllImportAttribute : Attribute
-    {
-        public bool BestFitMapping;
-        public CallingConvention CallingConvention;
-        public CharSet CharSet;
-        public string EntryPoint;
-        public bool ExactSpelling;
-        public bool PreserveSig;
-        public bool SetLastError;
-        public bool ThrowOnUnmappableChar;
-        public DllImportAttribute(string dllName) { }
-
-        public string Value { get { throw null; } }
-    }
-
-    [Flags]
-    public enum DllImportSearchPath
-    {
-        LegacyBehavior = 0,
-        AssemblyDirectory = 2,
-        UseDllDirectoryForDependencies = 256,
-        ApplicationDirectory = 512,
-        UserDirectories = 1024,
-        System32 = 2048,
-        SafeDirectories = 4096
-    }
-
-    public sealed partial class ErrorWrapper
-    {
-        public ErrorWrapper(Exception e) { }
-
-        public ErrorWrapper(int errorCode) { }
-
-        public ErrorWrapper(object errorCode) { }
-
-        public int ErrorCode { get { throw null; } }
-    }
-
-    public partial struct GCHandle
-    {
-        public bool IsAllocated { get { throw null; } }
-
-        public object Target { get { throw null; } set { } }
-
-        public IntPtr AddrOfPinnedObject() { throw null; }
-
-        public static GCHandle Alloc(object value, GCHandleType type) { throw null; }
-
-        public static GCHandle Alloc(object value) { throw null; }
-
-        public override bool Equals(object o) { throw null; }
-
-        public void Free() { }
-
-        public static GCHandle FromIntPtr(IntPtr value) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(GCHandle a, GCHandle b) { throw null; }
-
-        public static explicit operator GCHandle(IntPtr value) { throw null; }
-
-        public static explicit operator IntPtr(GCHandle value) { throw null; }
-
-        public static bool operator !=(GCHandle a, GCHandle b) { throw null; }
-
-        public static IntPtr ToIntPtr(GCHandle value) { throw null; }
-    }
-
-    public enum GCHandleType
-    {
-        Weak = 0,
-        WeakTrackResurrection = 1,
-        Normal = 2,
-        Pinned = 3
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)]
-    public sealed partial class GuidAttribute : Attribute
-    {
-        public GuidAttribute(string guid) { }
-
-        public string Value { get { throw null; } }
-    }
-
-    public sealed partial class HandleCollector
-    {
-        public HandleCollector(string name, int initialThreshold, int maximumThreshold) { }
-
-        public HandleCollector(string name, int initialThreshold) { }
-
-        public int Count { get { throw null; } }
-
-        public int InitialThreshold { get { throw null; } }
-
-        public int MaximumThreshold { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public void Add() { }
-
-        public void Remove() { }
-    }
-
-    public partial interface ICustomAdapter
-    {
-        object GetUnderlyingObject();
-    }
-
-    public partial interface ICustomQueryInterface
-    {
-        CustomQueryInterfaceResult GetInterface(ref Guid iid, out IntPtr ppv);
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class InAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class InterfaceTypeAttribute : Attribute
-    {
-        public InterfaceTypeAttribute(short interfaceType) { }
-
-        public InterfaceTypeAttribute(ComInterfaceType interfaceType) { }
-
-        public ComInterfaceType Value { get { throw null; } }
-    }
-
-    public partial class InvalidComObjectException : Exception
-    {
-        public InvalidComObjectException() { }
-
-        public InvalidComObjectException(string message, Exception inner) { }
-
-        public InvalidComObjectException(string message) { }
-    }
-
-    public partial class InvalidOleVariantTypeException : Exception
-    {
-        public InvalidOleVariantTypeException() { }
-
-        public InvalidOleVariantTypeException(string message, Exception inner) { }
-
-        public InvalidOleVariantTypeException(string message) { }
-    }
-
-    public static partial class Marshal
-    {
-        public static readonly int SystemDefaultCharSize;
-        public static readonly int SystemMaxDBCSCharSize;
-        public static int AddRef(IntPtr pUnk) { throw null; }
-
-        public static IntPtr AllocCoTaskMem(int cb) { throw null; }
-
-        public static IntPtr AllocHGlobal(int cb) { throw null; }
-
-        public static IntPtr AllocHGlobal(IntPtr cb) { throw null; }
-
-        public static bool AreComObjectsAvailableForCleanup() { throw null; }
-
-        public static void Copy(byte[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(char[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(double[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(short[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(int[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(long[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(IntPtr source, byte[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, char[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, double[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, short[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, int[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, long[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, IntPtr[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, float[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(float[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static IntPtr CreateAggregatedObject(IntPtr pOuter, object o) { throw null; }
-
-        public static object CreateWrapperOfType(object o, Type t) { throw null; }
-
-        public static void DestroyStructure(IntPtr ptr, Type structuretype) { }
-
-        public static int FinalReleaseComObject(object o) { throw null; }
-
-        public static void FreeBSTR(IntPtr ptr) { }
-
-        public static void FreeCoTaskMem(IntPtr ptr) { }
-
-        public static void FreeHGlobal(IntPtr hglobal) { }
-
-        public static IntPtr GetComInterfaceForObject(object o, Type T, CustomQueryInterfaceMode mode) { throw null; }
-
-        public static IntPtr GetComInterfaceForObject(object o, Type T) { throw null; }
-
-        public static Delegate GetDelegateForFunctionPointer(IntPtr ptr, Type t) { throw null; }
-
-        public static int GetExceptionCode() { throw null; }
-
-        public static Exception GetExceptionForHR(int errorCode, IntPtr errorInfo) { throw null; }
-
-        public static Exception GetExceptionForHR(int errorCode) { throw null; }
-
-        public static IntPtr GetFunctionPointerForDelegate(Delegate d) { throw null; }
-
-        public static int GetHRForException(Exception e) { throw null; }
-
-        public static int GetHRForLastWin32Error() { throw null; }
-
-        public static IntPtr GetIUnknownForObject(object o) { throw null; }
-
-        public static int GetLastWin32Error() { throw null; }
-
-        public static void GetNativeVariantForObject(object obj, IntPtr pDstNativeVariant) { }
-
-        public static object GetObjectForIUnknown(IntPtr pUnk) { throw null; }
-
-        public static object GetObjectForNativeVariant(IntPtr pSrcNativeVariant) { throw null; }
-
-        public static object[] GetObjectsForNativeVariants(IntPtr aSrcNativeVariant, int cVars) { throw null; }
-
-        public static int GetStartComSlot(Type t) { throw null; }
-
-        public static Type GetTypeFromCLSID(Guid clsid) { throw null; }
-
-        public static string GetTypeInfoName(ComTypes.ITypeInfo typeInfo) { throw null; }
-
-        public static object GetUniqueObjectForIUnknown(IntPtr unknown) { throw null; }
-
-        public static bool IsComObject(object o) { throw null; }
-
-        public static IntPtr OffsetOf(Type t, string fieldName) { throw null; }
-
-        public static string PtrToStringAnsi(IntPtr ptr, int len) { throw null; }
-
-        public static string PtrToStringAnsi(IntPtr ptr) { throw null; }
-
-        public static string PtrToStringBSTR(IntPtr ptr) { throw null; }
-
-        public static string PtrToStringUni(IntPtr ptr, int len) { throw null; }
-
-        public static string PtrToStringUni(IntPtr ptr) { throw null; }
-
-        public static void PtrToStructure(IntPtr ptr, object structure) { }
-
-        public static object PtrToStructure(IntPtr ptr, Type structureType) { throw null; }
-
-        public static int QueryInterface(IntPtr pUnk, ref Guid iid, out IntPtr ppv) { throw null; }
-
-        public static byte ReadByte(IntPtr ptr, int ofs) { throw null; }
-
-        public static byte ReadByte(IntPtr ptr) { throw null; }
-
-        public static byte ReadByte(object ptr, int ofs) { throw null; }
-
-        public static short ReadInt16(IntPtr ptr, int ofs) { throw null; }
-
-        public static short ReadInt16(IntPtr ptr) { throw null; }
-
-        public static short ReadInt16(object ptr, int ofs) { throw null; }
-
-        public static int ReadInt32(IntPtr ptr, int ofs) { throw null; }
-
-        public static int ReadInt32(IntPtr ptr) { throw null; }
-
-        public static int ReadInt32(object ptr, int ofs) { throw null; }
-
-        public static long ReadInt64(IntPtr ptr, int ofs) { throw null; }
-
-        public static long ReadInt64(IntPtr ptr) { throw null; }
-
-        public static long ReadInt64(object ptr, int ofs) { throw null; }
-
-        public static IntPtr ReadIntPtr(IntPtr ptr, int ofs) { throw null; }
-
-        public static IntPtr ReadIntPtr(IntPtr ptr) { throw null; }
-
-        public static IntPtr ReadIntPtr(object ptr, int ofs) { throw null; }
-
-        public static IntPtr ReAllocCoTaskMem(IntPtr pv, int cb) { throw null; }
-
-        public static IntPtr ReAllocHGlobal(IntPtr pv, IntPtr cb) { throw null; }
-
-        public static int Release(IntPtr pUnk) { throw null; }
-
-        public static int ReleaseComObject(object o) { throw null; }
-
-        public static int SizeOf(object structure) { throw null; }
-
-        public static int SizeOf(Type t) { throw null; }
-
-        public static IntPtr StringToBSTR(string s) { throw null; }
-
-        public static IntPtr StringToCoTaskMemAnsi(string s) { throw null; }
-
-        public static IntPtr StringToCoTaskMemUni(string s) { throw null; }
-
-        public static IntPtr StringToHGlobalAnsi(string s) { throw null; }
-
-        public static IntPtr StringToHGlobalUni(string s) { throw null; }
-
-        public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld) { }
-
-        public static void ThrowExceptionForHR(int errorCode, IntPtr errorInfo) { }
-
-        public static void ThrowExceptionForHR(int errorCode) { }
-
-        public static IntPtr UnsafeAddrOfPinnedArrayElement(Array arr, int index) { throw null; }
-
-        public static void WriteByte(IntPtr ptr, byte val) { }
-
-        public static void WriteByte(IntPtr ptr, int ofs, byte val) { }
-
-        public static void WriteByte(object ptr, int ofs, byte val) { }
-
-        public static void WriteInt16(IntPtr ptr, char val) { }
-
-        public static void WriteInt16(IntPtr ptr, short val) { }
-
-        public static void WriteInt16(IntPtr ptr, int ofs, char val) { }
-
-        public static void WriteInt16(IntPtr ptr, int ofs, short val) { }
-
-        public static void WriteInt16(object ptr, int ofs, char val) { }
-
-        public static void WriteInt16(object ptr, int ofs, short val) { }
-
-        public static void WriteInt32(IntPtr ptr, int ofs, int val) { }
-
-        public static void WriteInt32(IntPtr ptr, int val) { }
-
-        public static void WriteInt32(object ptr, int ofs, int val) { }
-
-        public static void WriteInt64(IntPtr ptr, int ofs, long val) { }
-
-        public static void WriteInt64(IntPtr ptr, long val) { }
-
-        public static void WriteInt64(object ptr, int ofs, long val) { }
-
-        public static void WriteIntPtr(IntPtr ptr, int ofs, IntPtr val) { }
-
-        public static void WriteIntPtr(IntPtr ptr, IntPtr val) { }
-
-        public static void WriteIntPtr(object ptr, int ofs, IntPtr val) { }
-
-        public static void ZeroFreeBSTR(IntPtr s) { }
-
-        public static void ZeroFreeCoTaskMemAnsi(IntPtr s) { }
-
-        public static void ZeroFreeCoTaskMemUnicode(IntPtr s) { }
-
-        public static void ZeroFreeGlobalAllocAnsi(IntPtr s) { }
-
-        public static void ZeroFreeGlobalAllocUnicode(IntPtr s) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.ReturnValue, Inherited = false)]
-    public sealed partial class MarshalAsAttribute : Attribute
-    {
-        public UnmanagedType ArraySubType;
-        public int IidParameterIndex;
-        public string MarshalCookie;
-        public string MarshalType;
-        public Type MarshalTypeRef;
-        public VarEnum SafeArraySubType;
-        public Type SafeArrayUserDefinedSubType;
-        public int SizeConst;
-        public short SizeParamIndex;
-        public MarshalAsAttribute(short unmanagedType) { }
-
-        public MarshalAsAttribute(UnmanagedType unmanagedType) { }
-
-        public UnmanagedType Value { get { throw null; } }
-    }
-
-    public partial class MarshalDirectiveException : Exception
-    {
-        public MarshalDirectiveException() { }
-
-        public MarshalDirectiveException(string message, Exception inner) { }
-
-        public MarshalDirectiveException(string message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class OptionalAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false)]
-    public sealed partial class PreserveSigAttribute : Attribute
-    {
-    }
-
-    public partial class SafeArrayRankMismatchException : Exception
-    {
-        public SafeArrayRankMismatchException() { }
-
-        public SafeArrayRankMismatchException(string message, Exception inner) { }
-
-        public SafeArrayRankMismatchException(string message) { }
-    }
-
-    public partial class SafeArrayTypeMismatchException : Exception
-    {
-        public SafeArrayTypeMismatchException() { }
-
-        public SafeArrayTypeMismatchException(string message, Exception inner) { }
-
-        public SafeArrayTypeMismatchException(string message) { }
-    }
-
-    public abstract partial class SafeBuffer : SafeHandle
-    {
-        protected SafeBuffer(bool ownsHandle) : base(default, default) { }
-
-        [CLSCompliant(false)]
-        public ulong ByteLength { get { throw null; } }
-
-        public override bool IsInvalid { get { throw null; } }
-
-        [CLSCompliant(false)]
-        public unsafe void AcquirePointer(ref byte* pointer) { }
-
-        [CLSCompliant(false)]
-        public void Initialize(uint numElements, uint sizeOfEachElement) { }
-
-        [CLSCompliant(false)]
-        public void Initialize(ulong numBytes) { }
-
-        [CLSCompliant(false)]
-        public void Initialize<T>(uint numElements)
-            where T : struct { }
-
-        [CLSCompliant(false)]
-        public T Read<T>(ulong byteOffset)
-            where T : struct { throw null; }
-
-        [CLSCompliant(false)]
-        public void ReadArray<T>(ulong byteOffset, T[] array, int index, int count)
-            where T : struct { }
-
-        public void ReleasePointer() { }
-
-        [CLSCompliant(false)]
-        public void Write<T>(ulong byteOffset, T value)
-            where T : struct { }
-
-        [CLSCompliant(false)]
-        public void WriteArray<T>(ulong byteOffset, T[] array, int index, int count)
-            where T : struct { }
-    }
-
-    public abstract partial class SafeHandle : IDisposable
-    {
-        protected IntPtr handle;
-        protected SafeHandle(IntPtr invalidHandleValue, bool ownsHandle) { }
-
-        public bool IsClosed { get { throw null; } }
-
-        public abstract bool IsInvalid { get; }
-
-        public void DangerousAddRef(ref bool success) { }
-
-        public IntPtr DangerousGetHandle() { throw null; }
-
-        public void DangerousRelease() { }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        ~SafeHandle() {
-        }
-
-        protected abstract bool ReleaseHandle();
-        protected void SetHandle(IntPtr handle) { }
-
-        public void SetHandleAsInvalid() { }
-    }
-
-    public partial class SEHException : Exception
-    {
-        public SEHException() { }
-
-        public SEHException(string message, Exception inner) { }
-
-        public SEHException(string message) { }
-
-        public virtual bool CanResume() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class TypeIdentifierAttribute : Attribute
-    {
-        public TypeIdentifierAttribute() { }
-
-        public TypeIdentifierAttribute(string scope, string identifier) { }
-
-        public string Identifier { get { throw null; } }
-
-        public string Scope { get { throw null; } }
-    }
-
-    public sealed partial class UnknownWrapper
-    {
-        public UnknownWrapper(object obj) { }
-
-        public object WrappedObject { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class UnmanagedFunctionPointerAttribute : Attribute
-    {
-        public bool BestFitMapping;
-        public CharSet CharSet;
-        public bool SetLastError;
-        public bool ThrowOnUnmappableChar;
-        public UnmanagedFunctionPointerAttribute(CallingConvention callingConvention) { }
-
-        public CallingConvention CallingConvention { get { throw null; } }
-    }
-
-    public enum UnmanagedType
-    {
-        Bool = 2,
-        I1 = 3,
-        U1 = 4,
-        I2 = 5,
-        U2 = 6,
-        I4 = 7,
-        U4 = 8,
-        I8 = 9,
-        U8 = 10,
-        R4 = 11,
-        R8 = 12,
-        Currency = 15,
-        BStr = 19,
-        LPStr = 20,
-        LPWStr = 21,
-        LPTStr = 22,
-        ByValTStr = 23,
-        IUnknown = 25,
-        IDispatch = 26,
-        Struct = 27,
-        Interface = 28,
-        SafeArray = 29,
-        ByValArray = 30,
-        SysInt = 31,
-        SysUInt = 32,
-        VBByRefStr = 34,
-        AnsiBStr = 35,
-        TBStr = 36,
-        VariantBool = 37,
-        FunctionPtr = 38,
-        AsAny = 40,
-        LPArray = 42,
-        LPStruct = 43,
-        Error = 45,
-        IInspectable = 46,
-        HString = 47
-    }
-
-    public enum VarEnum
-    {
-        VT_EMPTY = 0,
-        VT_NULL = 1,
-        VT_I2 = 2,
-        VT_I4 = 3,
-        VT_R4 = 4,
-        VT_R8 = 5,
-        VT_CY = 6,
-        VT_DATE = 7,
-        VT_BSTR = 8,
-        VT_DISPATCH = 9,
-        VT_ERROR = 10,
-        VT_BOOL = 11,
-        VT_VARIANT = 12,
-        VT_UNKNOWN = 13,
-        VT_DECIMAL = 14,
-        VT_I1 = 16,
-        VT_UI1 = 17,
-        VT_UI2 = 18,
-        VT_UI4 = 19,
-        VT_I8 = 20,
-        VT_UI8 = 21,
-        VT_INT = 22,
-        VT_UINT = 23,
-        VT_VOID = 24,
-        VT_HRESULT = 25,
-        VT_PTR = 26,
-        VT_SAFEARRAY = 27,
-        VT_CARRAY = 28,
-        VT_USERDEFINED = 29,
-        VT_LPSTR = 30,
-        VT_LPWSTR = 31,
-        VT_RECORD = 36,
-        VT_FILETIME = 64,
-        VT_BLOB = 65,
-        VT_STREAM = 66,
-        VT_STORAGE = 67,
-        VT_STREAMED_OBJECT = 68,
-        VT_STORED_OBJECT = 69,
-        VT_BLOB_OBJECT = 70,
-        VT_CF = 71,
-        VT_CLSID = 72,
-        VT_VECTOR = 4096,
-        VT_ARRAY = 8192,
-        VT_BYREF = 16384
-    }
-
-    public sealed partial class VariantWrapper
-    {
-        public VariantWrapper(object obj) { }
-
-        public object WrappedObject { get { throw null; } }
-    }
-}
-
-namespace System.Runtime.InteropServices.ComTypes
-{
-    [Flags]
-    public enum ADVF
-    {
-        ADVF_NODATA = 1,
-        ADVF_PRIMEFIRST = 2,
-        ADVF_ONLYONCE = 4,
-        ADVFCACHE_NOHANDLER = 8,
-        ADVFCACHE_FORCEBUILTIN = 16,
-        ADVFCACHE_ONSAVE = 32,
-        ADVF_DATAONSTOP = 64
-    }
-
-    public partial struct BINDPTR
-    {
-        public IntPtr lpfuncdesc;
-        public IntPtr lptcomp;
-        public IntPtr lpvardesc;
-    }
-
-    public partial struct BIND_OPTS
-    {
-        public int cbStruct;
-        public int dwTickCountDeadline;
-        public int grfFlags;
-        public int grfMode;
-    }
-
-    public enum CALLCONV
-    {
-        CC_CDECL = 1,
-        CC_MSCPASCAL = 2,
-        CC_PASCAL = 2,
-        CC_MACPASCAL = 3,
-        CC_STDCALL = 4,
-        CC_RESERVED = 5,
-        CC_SYSCALL = 6,
-        CC_MPWCDECL = 7,
-        CC_MPWPASCAL = 8,
-        CC_MAX = 9
-    }
-
-    public partial struct CONNECTDATA
-    {
-        public int dwCookie;
-        public object pUnk;
-    }
-
-    public enum DATADIR
-    {
-        DATADIR_GET = 1,
-        DATADIR_SET = 2
-    }
-
-    public enum DESCKIND
-    {
-        DESCKIND_NONE = 0,
-        DESCKIND_FUNCDESC = 1,
-        DESCKIND_VARDESC = 2,
-        DESCKIND_TYPECOMP = 3,
-        DESCKIND_IMPLICITAPPOBJ = 4,
-        DESCKIND_MAX = 5
-    }
-
-    public partial struct DISPPARAMS
-    {
-        public int cArgs;
-        public int cNamedArgs;
-        public IntPtr rgdispidNamedArgs;
-        public IntPtr rgvarg;
-    }
-
-    [Flags]
-    public enum DVASPECT
-    {
-        DVASPECT_CONTENT = 1,
-        DVASPECT_THUMBNAIL = 2,
-        DVASPECT_ICON = 4,
-        DVASPECT_DOCPRINT = 8
-    }
-
-    public partial struct ELEMDESC
-    {
-        public DESCUNION desc;
-        public TYPEDESC tdesc;
-        public partial struct DESCUNION
-        {
-            public IDLDESC idldesc;
-            public PARAMDESC paramdesc;
-        }
-    }
-
-    public partial struct EXCEPINFO
-    {
-        public string bstrDescription;
-        public string bstrHelpFile;
-        public string bstrSource;
-        public int dwHelpContext;
-        public IntPtr pfnDeferredFillIn;
-        public IntPtr pvReserved;
-        public int scode;
-        public short wCode;
-        public short wReserved;
-    }
-
-    public partial struct FILETIME
-    {
-        public int dwHighDateTime;
-        public int dwLowDateTime;
-    }
-
-    public partial struct FORMATETC
-    {
-        public short cfFormat;
-        public DVASPECT dwAspect;
-        public int lindex;
-        public IntPtr ptd;
-        public TYMED tymed;
-    }
-
-    public partial struct FUNCDESC
-    {
-        public CALLCONV callconv;
-        public short cParams;
-        public short cParamsOpt;
-        public short cScodes;
-        public ELEMDESC elemdescFunc;
-        public FUNCKIND funckind;
-        public INVOKEKIND invkind;
-        public IntPtr lprgelemdescParam;
-        public IntPtr lprgscode;
-        public int memid;
-        public short oVft;
-        public short wFuncFlags;
-    }
-
-    [Flags]
-    public enum FUNCFLAGS : short
-    {
-        FUNCFLAG_FRESTRICTED = 1,
-        FUNCFLAG_FSOURCE = 2,
-        FUNCFLAG_FBINDABLE = 4,
-        FUNCFLAG_FREQUESTEDIT = 8,
-        FUNCFLAG_FDISPLAYBIND = 16,
-        FUNCFLAG_FDEFAULTBIND = 32,
-        FUNCFLAG_FHIDDEN = 64,
-        FUNCFLAG_FUSESGETLASTERROR = 128,
-        FUNCFLAG_FDEFAULTCOLLELEM = 256,
-        FUNCFLAG_FUIDEFAULT = 512,
-        FUNCFLAG_FNONBROWSABLE = 1024,
-        FUNCFLAG_FREPLACEABLE = 2048,
-        FUNCFLAG_FIMMEDIATEBIND = 4096
-    }
-
-    public enum FUNCKIND
-    {
-        FUNC_VIRTUAL = 0,
-        FUNC_PUREVIRTUAL = 1,
-        FUNC_NONVIRTUAL = 2,
-        FUNC_STATIC = 3,
-        FUNC_DISPATCH = 4
-    }
-
-    public partial interface IAdviseSink
-    {
-        void OnClose();
-        void OnDataChange(ref FORMATETC format, ref STGMEDIUM stgmedium);
-        void OnRename(IMoniker moniker);
-        void OnSave();
-        void OnViewChange(int aspect, int index);
-    }
-
-    public partial interface IBindCtx
-    {
-        void EnumObjectParam(out IEnumString ppenum);
-        void GetBindOptions(ref BIND_OPTS pbindopts);
-        void GetObjectParam(string pszKey, out object ppunk);
-        void GetRunningObjectTable(out IRunningObjectTable pprot);
-        void RegisterObjectBound(object punk);
-        void RegisterObjectParam(string pszKey, object punk);
-        void ReleaseBoundObjects();
-        void RevokeObjectBound(object punk);
-        int RevokeObjectParam(string pszKey);
-        void SetBindOptions(ref BIND_OPTS pbindopts);
-    }
-
-    public partial interface IConnectionPoint
-    {
-        void Advise(object pUnkSink, out int pdwCookie);
-        void EnumConnections(out IEnumConnections ppEnum);
-        void GetConnectionInterface(out Guid pIID);
-        void GetConnectionPointContainer(out IConnectionPointContainer ppCPC);
-        void Unadvise(int dwCookie);
-    }
-
-    public partial interface IConnectionPointContainer
-    {
-        void EnumConnectionPoints(out IEnumConnectionPoints ppEnum);
-        void FindConnectionPoint(ref Guid riid, out IConnectionPoint ppCP);
-    }
-
-    public partial struct IDLDESC
-    {
-        public IntPtr dwReserved;
-        public IDLFLAG wIDLFlags;
-    }
-
-    [Flags]
-    public enum IDLFLAG : short
-    {
-        IDLFLAG_NONE = 0,
-        IDLFLAG_FIN = 1,
-        IDLFLAG_FOUT = 2,
-        IDLFLAG_FLCID = 4,
-        IDLFLAG_FRETVAL = 8
-    }
-
-    public partial interface IEnumConnectionPoints
-    {
-        void Clone(out IEnumConnectionPoints ppenum);
-        int Next(int celt, IConnectionPoint[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumConnections
-    {
-        void Clone(out IEnumConnections ppenum);
-        int Next(int celt, CONNECTDATA[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumFORMATETC
-    {
-        void Clone(out IEnumFORMATETC newEnum);
-        int Next(int celt, FORMATETC[] rgelt, int[] pceltFetched);
-        int Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumMoniker
-    {
-        void Clone(out IEnumMoniker ppenum);
-        int Next(int celt, IMoniker[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumString
-    {
-        void Clone(out IEnumString ppenum);
-        int Next(int celt, string[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumVARIANT
-    {
-        IEnumVARIANT Clone();
-        int Next(int celt, object[] rgVar, IntPtr pceltFetched);
-        int Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IMoniker
-    {
-        void BindToObject(IBindCtx pbc, IMoniker pmkToLeft, ref Guid riidResult, out object ppvResult);
-        void BindToStorage(IBindCtx pbc, IMoniker pmkToLeft, ref Guid riid, out object ppvObj);
-        void CommonPrefixWith(IMoniker pmkOther, out IMoniker ppmkPrefix);
-        void ComposeWith(IMoniker pmkRight, bool fOnlyIfNotGeneric, out IMoniker ppmkComposite);
-        void Enum(bool fForward, out IEnumMoniker ppenumMoniker);
-        void GetClassID(out Guid pClassID);
-        void GetDisplayName(IBindCtx pbc, IMoniker pmkToLeft, out string ppszDisplayName);
-        void GetSizeMax(out long pcbSize);
-        void GetTimeOfLastChange(IBindCtx pbc, IMoniker pmkToLeft, out FILETIME pFileTime);
-        void Hash(out int pdwHash);
-        void Inverse(out IMoniker ppmk);
-        int IsDirty();
-        int IsEqual(IMoniker pmkOtherMoniker);
-        int IsRunning(IBindCtx pbc, IMoniker pmkToLeft, IMoniker pmkNewlyRunning);
-        int IsSystemMoniker(out int pdwMksys);
-        void Load(IStream pStm);
-        void ParseDisplayName(IBindCtx pbc, IMoniker pmkToLeft, string pszDisplayName, out int pchEaten, out IMoniker ppmkOut);
-        void Reduce(IBindCtx pbc, int dwReduceHowFar, ref IMoniker ppmkToLeft, out IMoniker ppmkReduced);
-        void RelativePathTo(IMoniker pmkOther, out IMoniker ppmkRelPath);
-        void Save(IStream pStm, bool fClearDirty);
-    }
-
-    [Flags]
-    public enum IMPLTYPEFLAGS
-    {
-        IMPLTYPEFLAG_FDEFAULT = 1,
-        IMPLTYPEFLAG_FSOURCE = 2,
-        IMPLTYPEFLAG_FRESTRICTED = 4,
-        IMPLTYPEFLAG_FDEFAULTVTABLE = 8
-    }
-
-    [Flags]
-    public enum INVOKEKIND
-    {
-        INVOKE_FUNC = 1,
-        INVOKE_PROPERTYGET = 2,
-        INVOKE_PROPERTYPUT = 4,
-        INVOKE_PROPERTYPUTREF = 8
-    }
-
-    public partial interface IPersistFile
-    {
-        void GetClassID(out Guid pClassID);
-        void GetCurFile(out string ppszFileName);
-        int IsDirty();
-        void Load(string pszFileName, int dwMode);
-        void Save(string pszFileName, bool fRemember);
-        void SaveCompleted(string pszFileName);
-    }
-
-    public partial interface IRunningObjectTable
-    {
-        void EnumRunning(out IEnumMoniker ppenumMoniker);
-        int GetObject(IMoniker pmkObjectName, out object ppunkObject);
-        int GetTimeOfLastChange(IMoniker pmkObjectName, out FILETIME pfiletime);
-        int IsRunning(IMoniker pmkObjectName);
-        void NoteChangeTime(int dwRegister, ref FILETIME pfiletime);
-        int Register(int grfFlags, object punkObject, IMoniker pmkObjectName);
-        void Revoke(int dwRegister);
-    }
-
-    public partial interface IStream
-    {
-        void Clone(out IStream ppstm);
-        void Commit(int grfCommitFlags);
-        void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);
-        void LockRegion(long libOffset, long cb, int dwLockType);
-        void Read(byte[] pv, int cb, IntPtr pcbRead);
-        void Revert();
-        void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition);
-        void SetSize(long libNewSize);
-        void Stat(out STATSTG pstatstg, int grfStatFlag);
-        void UnlockRegion(long libOffset, long cb, int dwLockType);
-        void Write(byte[] pv, int cb, IntPtr pcbWritten);
-    }
-
-    public partial interface ITypeComp
-    {
-        void Bind(string szName, int lHashVal, short wFlags, out ITypeInfo ppTInfo, out DESCKIND pDescKind, out BINDPTR pBindPtr);
-        void BindType(string szName, int lHashVal, out ITypeInfo ppTInfo, out ITypeComp ppTComp);
-    }
-
-    public partial interface ITypeInfo
-    {
-        void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv);
-        void CreateInstance(object pUnkOuter, ref Guid riid, out object ppvObj);
-        void GetContainingTypeLib(out ITypeLib ppTLB, out int pIndex);
-        void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetFuncDesc(int index, out IntPtr ppFuncDesc);
-        void GetIDsOfNames(string[] rgszNames, int cNames, int[] pMemId);
-        void GetImplTypeFlags(int index, out IMPLTYPEFLAGS pImplTypeFlags);
-        void GetMops(int memid, out string pBstrMops);
-        void GetNames(int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);
-        void GetRefTypeInfo(int hRef, out ITypeInfo ppTI);
-        void GetRefTypeOfImplType(int index, out int href);
-        void GetTypeAttr(out IntPtr ppTypeAttr);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetVarDesc(int index, out IntPtr ppVarDesc);
-        void Invoke(object pvInstance, int memid, short wFlags, ref DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr);
-        void ReleaseFuncDesc(IntPtr pFuncDesc);
-        void ReleaseTypeAttr(IntPtr pTypeAttr);
-        void ReleaseVarDesc(IntPtr pVarDesc);
-    }
-
-    public partial interface ITypeInfo2 : ITypeInfo
-    {
-        void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv);
-        void CreateInstance(object pUnkOuter, ref Guid riid, out object ppvObj);
-        void GetAllCustData(IntPtr pCustData);
-        void GetAllFuncCustData(int index, IntPtr pCustData);
-        void GetAllImplTypeCustData(int index, IntPtr pCustData);
-        void GetAllParamCustData(int indexFunc, int indexParam, IntPtr pCustData);
-        void GetAllVarCustData(int index, IntPtr pCustData);
-        void GetContainingTypeLib(out ITypeLib ppTLB, out int pIndex);
-        void GetCustData(ref Guid guid, out object pVarVal);
-        void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetDocumentation2(int memid, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll);
-        void GetFuncCustData(int index, ref Guid guid, out object pVarVal);
-        void GetFuncDesc(int index, out IntPtr ppFuncDesc);
-        void GetFuncIndexOfMemId(int memid, INVOKEKIND invKind, out int pFuncIndex);
-        void GetIDsOfNames(string[] rgszNames, int cNames, int[] pMemId);
-        void GetImplTypeCustData(int index, ref Guid guid, out object pVarVal);
-        void GetImplTypeFlags(int index, out IMPLTYPEFLAGS pImplTypeFlags);
-        void GetMops(int memid, out string pBstrMops);
-        void GetNames(int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);
-        void GetParamCustData(int indexFunc, int indexParam, ref Guid guid, out object pVarVal);
-        void GetRefTypeInfo(int hRef, out ITypeInfo ppTI);
-        void GetRefTypeOfImplType(int index, out int href);
-        void GetTypeAttr(out IntPtr ppTypeAttr);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetTypeFlags(out int pTypeFlags);
-        void GetTypeKind(out TYPEKIND pTypeKind);
-        void GetVarCustData(int index, ref Guid guid, out object pVarVal);
-        void GetVarDesc(int index, out IntPtr ppVarDesc);
-        void GetVarIndexOfMemId(int memid, out int pVarIndex);
-        void Invoke(object pvInstance, int memid, short wFlags, ref DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr);
-        void ReleaseFuncDesc(IntPtr pFuncDesc);
-        void ReleaseTypeAttr(IntPtr pTypeAttr);
-        void ReleaseVarDesc(IntPtr pVarDesc);
-    }
-
-    public partial interface ITypeLib
-    {
-        void FindName(string szNameBuf, int lHashVal, ITypeInfo[] ppTInfo, int[] rgMemId, ref short pcFound);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetLibAttr(out IntPtr ppTLibAttr);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetTypeInfo(int index, out ITypeInfo ppTI);
-        int GetTypeInfoCount();
-        void GetTypeInfoOfGuid(ref Guid guid, out ITypeInfo ppTInfo);
-        void GetTypeInfoType(int index, out TYPEKIND pTKind);
-        bool IsName(string szNameBuf, int lHashVal);
-        void ReleaseTLibAttr(IntPtr pTLibAttr);
-    }
-
-    public partial interface ITypeLib2 : ITypeLib
-    {
-        void FindName(string szNameBuf, int lHashVal, ITypeInfo[] ppTInfo, int[] rgMemId, ref short pcFound);
-        void GetAllCustData(IntPtr pCustData);
-        void GetCustData(ref Guid guid, out object pVarVal);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetDocumentation2(int index, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll);
-        void GetLibAttr(out IntPtr ppTLibAttr);
-        void GetLibStatistics(IntPtr pcUniqueNames, out int pcchUniqueNames);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetTypeInfo(int index, out ITypeInfo ppTI);
-        int GetTypeInfoCount();
-        void GetTypeInfoOfGuid(ref Guid guid, out ITypeInfo ppTInfo);
-        void GetTypeInfoType(int index, out TYPEKIND pTKind);
-        bool IsName(string szNameBuf, int lHashVal);
-        void ReleaseTLibAttr(IntPtr pTLibAttr);
-    }
-
-    [Flags]
-    public enum LIBFLAGS : short
-    {
-        LIBFLAG_FRESTRICTED = 1,
-        LIBFLAG_FCONTROL = 2,
-        LIBFLAG_FHIDDEN = 4,
-        LIBFLAG_FHASDISKIMAGE = 8
-    }
-
-    public partial struct PARAMDESC
-    {
-        public IntPtr lpVarValue;
-        public PARAMFLAG wParamFlags;
-    }
-
-    [Flags]
-    public enum PARAMFLAG : short
-    {
-        PARAMFLAG_NONE = 0,
-        PARAMFLAG_FIN = 1,
-        PARAMFLAG_FOUT = 2,
-        PARAMFLAG_FLCID = 4,
-        PARAMFLAG_FRETVAL = 8,
-        PARAMFLAG_FOPT = 16,
-        PARAMFLAG_FHASDEFAULT = 32,
-        PARAMFLAG_FHASCUSTDATA = 64
-    }
-
-    public partial struct STATDATA
-    {
-        public ADVF advf;
-        public IAdviseSink advSink;
-        public int connection;
-        public FORMATETC formatetc;
-    }
-
-    public partial struct STATSTG
-    {
-        public FILETIME atime;
-        public long cbSize;
-        public Guid clsid;
-        public FILETIME ctime;
-        public int grfLocksSupported;
-        public int grfMode;
-        public int grfStateBits;
-        public FILETIME mtime;
-        public string pwcsName;
-        public int reserved;
-        public int type;
-    }
-
-    public partial struct STGMEDIUM
-    {
-        public object pUnkForRelease;
-        public TYMED tymed;
-        public IntPtr unionmember;
-    }
-
-    public enum SYSKIND
-    {
-        SYS_WIN16 = 0,
-        SYS_WIN32 = 1,
-        SYS_MAC = 2,
-        SYS_WIN64 = 3
-    }
-
-    [Flags]
-    public enum TYMED
-    {
-        TYMED_NULL = 0,
-        TYMED_HGLOBAL = 1,
-        TYMED_FILE = 2,
-        TYMED_ISTREAM = 4,
-        TYMED_ISTORAGE = 8,
-        TYMED_GDI = 16,
-        TYMED_MFPICT = 32,
-        TYMED_ENHMF = 64
-    }
-
-    public partial struct TYPEATTR
-    {
-        public short cbAlignment;
-        public int cbSizeInstance;
-        public short cbSizeVft;
-        public short cFuncs;
-        public short cImplTypes;
-        public short cVars;
-        public int dwReserved;
-        public Guid guid;
-        public IDLDESC idldescType;
-        public int lcid;
-        public IntPtr lpstrSchema;
-        public const int MEMBER_ID_NIL = -1;
-        public int memidConstructor;
-        public int memidDestructor;
-        public TYPEDESC tdescAlias;
-        public TYPEKIND typekind;
-        public short wMajorVerNum;
-        public short wMinorVerNum;
-        public TYPEFLAGS wTypeFlags;
-    }
-
-    public partial struct TYPEDESC
-    {
-        public IntPtr lpValue;
-        public short vt;
-    }
-
-    [Flags]
-    public enum TYPEFLAGS : short
-    {
-        TYPEFLAG_FAPPOBJECT = 1,
-        TYPEFLAG_FCANCREATE = 2,
-        TYPEFLAG_FLICENSED = 4,
-        TYPEFLAG_FPREDECLID = 8,
-        TYPEFLAG_FHIDDEN = 16,
-        TYPEFLAG_FCONTROL = 32,
-        TYPEFLAG_FDUAL = 64,
-        TYPEFLAG_FNONEXTENSIBLE = 128,
-        TYPEFLAG_FOLEAUTOMATION = 256,
-        TYPEFLAG_FRESTRICTED = 512,
-        TYPEFLAG_FAGGREGATABLE = 1024,
-        TYPEFLAG_FREPLACEABLE = 2048,
-        TYPEFLAG_FDISPATCHABLE = 4096,
-        TYPEFLAG_FREVERSEBIND = 8192,
-        TYPEFLAG_FPROXY = 16384
-    }
-
-    public enum TYPEKIND
-    {
-        TKIND_ENUM = 0,
-        TKIND_RECORD = 1,
-        TKIND_MODULE = 2,
-        TKIND_INTERFACE = 3,
-        TKIND_DISPATCH = 4,
-        TKIND_COCLASS = 5,
-        TKIND_ALIAS = 6,
-        TKIND_UNION = 7,
-        TKIND_MAX = 8
-    }
-
-    public partial struct TYPELIBATTR
-    {
-        public Guid guid;
-        public int lcid;
-        public SYSKIND syskind;
-        public LIBFLAGS wLibFlags;
-        public short wMajorVerNum;
-        public short wMinorVerNum;
-    }
-
-    public partial struct VARDESC
-    {
-        public DESCUNION desc;
-        public ELEMDESC elemdescVar;
-        public string lpstrSchema;
-        public int memid;
-        public VARKIND varkind;
-        public short wVarFlags;
-        public partial struct DESCUNION
-        {
-            public IntPtr lpvarValue;
-            public int oInst;
-        }
-    }
-
-    [Flags]
-    public enum VARFLAGS : short
-    {
-        VARFLAG_FREADONLY = 1,
-        VARFLAG_FSOURCE = 2,
-        VARFLAG_FBINDABLE = 4,
-        VARFLAG_FREQUESTEDIT = 8,
-        VARFLAG_FDISPLAYBIND = 16,
-        VARFLAG_FDEFAULTBIND = 32,
-        VARFLAG_FHIDDEN = 64,
-        VARFLAG_FRESTRICTED = 128,
-        VARFLAG_FDEFAULTCOLLELEM = 256,
-        VARFLAG_FUIDEFAULT = 512,
-        VARFLAG_FNONBROWSABLE = 1024,
-        VARFLAG_FREPLACEABLE = 2048,
-        VARFLAG_FIMMEDIATEBIND = 4096
-    }
-
-    public enum VARKIND
-    {
-        VAR_PERINSTANCE = 0,
-        VAR_STATIC = 1,
-        VAR_CONST = 2,
-        VAR_DISPATCH = 3
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.2/System.Runtime.InteropServices.cs b/src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.2/System.Runtime.InteropServices.cs
deleted file mode 100644
index 0396a0cc..00000000
--- a/src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.2/System.Runtime.InteropServices.cs
+++ /dev/null
@@ -1,1647 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyMetadata("BuildBranch", "Release\\ReferenceAssemblies\\1.0")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata("BuildLabel", "130703.2")]
-[assembly: System.Reflection.AssemblyTitle("System.Runtime.InteropServices.dll")]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.40013.0")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Runtime.InteropServices.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.Runtime.InteropServices.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.40013.0")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public sealed partial class DataMisalignedException : Exception
-    {
-        public DataMisalignedException() { }
-
-        public DataMisalignedException(string message, Exception innerException) { }
-
-        public DataMisalignedException(string message) { }
-    }
-
-    public partial class DllNotFoundException : TypeLoadException
-    {
-        public DllNotFoundException() { }
-
-        public DllNotFoundException(string message, Exception inner) { }
-
-        public DllNotFoundException(string message) { }
-    }
-}
-
-namespace System.Reflection
-{
-    public sealed partial class Missing
-    {
-        internal Missing() { }
-
-        public static readonly Missing Value;
-    }
-}
-
-namespace System.Runtime.InteropServices
-{
-    public partial struct ArrayWithOffset
-    {
-        public ArrayWithOffset(object array, int offset) { }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(ArrayWithOffset obj) { throw null; }
-
-        public object GetArray() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public int GetOffset() { throw null; }
-
-        public static bool operator ==(ArrayWithOffset a, ArrayWithOffset b) { throw null; }
-
-        public static bool operator !=(ArrayWithOffset a, ArrayWithOffset b) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class BestFitMappingAttribute : Attribute
-    {
-        public bool ThrowOnUnmappableChar;
-        public BestFitMappingAttribute(bool BestFitMapping) { }
-
-        public bool BestFitMapping { get { throw null; } }
-    }
-
-    [Obsolete("BStrWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class BStrWrapper
-    {
-        public BStrWrapper(object value) { }
-
-        public BStrWrapper(string value) { }
-
-        public string WrappedObject { get { throw null; } }
-    }
-
-    public enum CallingConvention
-    {
-        Winapi = 1,
-        Cdecl = 2,
-        StdCall = 3,
-        ThisCall = 4
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, Inherited = false)]
-    public sealed partial class ClassInterfaceAttribute : Attribute
-    {
-        public ClassInterfaceAttribute(short classInterfaceType) { }
-
-        public ClassInterfaceAttribute(ClassInterfaceType classInterfaceType) { }
-
-        public ClassInterfaceType Value { get { throw null; } }
-    }
-
-    public enum ClassInterfaceType
-    {
-        None = 0,
-        AutoDispatch = 1,
-        AutoDual = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class CoClassAttribute : Attribute
-    {
-        public CoClassAttribute(Type coClass) { }
-
-        public Type CoClass { get { throw null; } }
-    }
-
-    [Obsolete("ComAwareEventInfo may be unavailable in future releases.")]
-    public partial class ComAwareEventInfo : Reflection.EventInfo
-    {
-        public ComAwareEventInfo(Type type, string eventName) { }
-
-        public override Reflection.EventAttributes Attributes { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override void AddEventHandler(object target, Delegate handler) { }
-
-        public override void RemoveEventHandler(object target, Delegate handler) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = false)]
-    public sealed partial class ComDefaultInterfaceAttribute : Attribute
-    {
-        public ComDefaultInterfaceAttribute(Type defaultInterface) { }
-
-        public Type Value { get { throw null; } }
-    }
-
-    [Obsolete("ComEventInterfaceAttribute may be unavailable in future releases.")]
-    [AttributeUsage(AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class ComEventInterfaceAttribute : Attribute
-    {
-        public ComEventInterfaceAttribute(Type SourceInterface, Type EventProvider) { }
-
-        public Type EventProvider { get { throw null; } }
-
-        public Type SourceInterface { get { throw null; } }
-    }
-
-    [Obsolete("ComEventsHelper may be unavailable in future releases.")]
-    public static partial class ComEventsHelper
-    {
-        public static void Combine(object rcw, Guid iid, int dispid, Delegate d) { }
-
-        public static Delegate Remove(object rcw, Guid iid, int dispid, Delegate d) { throw null; }
-    }
-
-    public partial class COMException : Exception
-    {
-        public COMException() { }
-
-        public COMException(string message, Exception inner) { }
-
-        public COMException(string message, int errorCode) { }
-
-        public COMException(string message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class ComImportAttribute : Attribute
-    {
-    }
-
-    public enum ComInterfaceType
-    {
-        InterfaceIsDual = 0,
-        InterfaceIsIUnknown = 1,
-        InterfaceIsIDispatch = 2,
-        InterfaceIsIInspectable = 3
-    }
-
-    public enum ComMemberType
-    {
-        Method = 0,
-        PropGet = 1,
-        PropSet = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = true)]
-    [Obsolete("ComSourceInterfacesAttribute may be unavailable in future releases.")]
-    public sealed partial class ComSourceInterfacesAttribute : Attribute
-    {
-        public ComSourceInterfacesAttribute(string sourceInterfaces) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3, Type sourceInterface4) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface) { }
-
-        public string Value { get { throw null; } }
-    }
-
-    public abstract partial class CriticalHandle : IDisposable
-    {
-        protected IntPtr handle;
-        protected CriticalHandle(IntPtr invalidHandleValue) { }
-
-        public bool IsClosed { get { throw null; } }
-
-        public abstract bool IsInvalid { get; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        ~CriticalHandle() {
-        }
-
-        protected abstract bool ReleaseHandle();
-        protected void SetHandle(IntPtr handle) { }
-
-        public void SetHandleAsInvalid() { }
-    }
-
-    [Obsolete("CurrencyWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class CurrencyWrapper
-    {
-        public CurrencyWrapper(decimal obj) { }
-
-        public CurrencyWrapper(object obj) { }
-
-        public decimal WrappedObject { get { throw null; } }
-    }
-
-    [Obsolete("CustomQueryInterfaceMode and support for ICustomQueryInterface may be unavailable in future releases.")]
-    public enum CustomQueryInterfaceMode
-    {
-        Ignore = 0,
-        Allow = 1
-    }
-
-    [Obsolete("CustomQueryInterfaceResult and support for ICustomQueryInterface may be unavailable in future releases.")]
-    public enum CustomQueryInterfaceResult
-    {
-        Handled = 0,
-        NotHandled = 1,
-        Failed = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Module, Inherited = false)]
-    public sealed partial class DefaultCharSetAttribute : Attribute
-    {
-        public DefaultCharSetAttribute(CharSet charSet) { }
-
-        public CharSet CharSet { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Method, AllowMultiple = false)]
-    public sealed partial class DefaultDllImportSearchPathsAttribute : Attribute
-    {
-        public DefaultDllImportSearchPathsAttribute(DllImportSearchPath paths) { }
-
-        public DllImportSearchPath Paths { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter)]
-    public sealed partial class DefaultParameterValueAttribute : Attribute
-    {
-        public DefaultParameterValueAttribute(object value) { }
-
-        public object Value { get { throw null; } }
-    }
-
-    [Obsolete("DispatchWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class DispatchWrapper
-    {
-        public DispatchWrapper(object obj) { }
-
-        public object WrappedObject { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event, Inherited = false)]
-    public sealed partial class DispIdAttribute : Attribute
-    {
-        public DispIdAttribute(int dispId) { }
-
-        public int Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false)]
-    public sealed partial class DllImportAttribute : Attribute
-    {
-        public bool BestFitMapping;
-        public CallingConvention CallingConvention;
-        public CharSet CharSet;
-        public string EntryPoint;
-        public bool ExactSpelling;
-        public bool PreserveSig;
-        public bool SetLastError;
-        public bool ThrowOnUnmappableChar;
-        public DllImportAttribute(string dllName) { }
-
-        public string Value { get { throw null; } }
-    }
-
-    [Flags]
-    public enum DllImportSearchPath
-    {
-        LegacyBehavior = 0,
-        AssemblyDirectory = 2,
-        UseDllDirectoryForDependencies = 256,
-        ApplicationDirectory = 512,
-        UserDirectories = 1024,
-        System32 = 2048,
-        SafeDirectories = 4096
-    }
-
-    [Obsolete("ErrorWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class ErrorWrapper
-    {
-        public ErrorWrapper(Exception e) { }
-
-        public ErrorWrapper(int errorCode) { }
-
-        public ErrorWrapper(object errorCode) { }
-
-        public int ErrorCode { get { throw null; } }
-    }
-
-    public partial struct GCHandle
-    {
-        public bool IsAllocated { get { throw null; } }
-
-        public object Target { get { throw null; } set { } }
-
-        public IntPtr AddrOfPinnedObject() { throw null; }
-
-        public static GCHandle Alloc(object value, GCHandleType type) { throw null; }
-
-        public static GCHandle Alloc(object value) { throw null; }
-
-        public override bool Equals(object o) { throw null; }
-
-        public void Free() { }
-
-        public static GCHandle FromIntPtr(IntPtr value) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(GCHandle a, GCHandle b) { throw null; }
-
-        public static explicit operator GCHandle(IntPtr value) { throw null; }
-
-        public static explicit operator IntPtr(GCHandle value) { throw null; }
-
-        public static bool operator !=(GCHandle a, GCHandle b) { throw null; }
-
-        public static IntPtr ToIntPtr(GCHandle value) { throw null; }
-    }
-
-    public enum GCHandleType
-    {
-        Weak = 0,
-        WeakTrackResurrection = 1,
-        Normal = 2,
-        Pinned = 3
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)]
-    public sealed partial class GuidAttribute : Attribute
-    {
-        public GuidAttribute(string guid) { }
-
-        public string Value { get { throw null; } }
-    }
-
-    public sealed partial class HandleCollector
-    {
-        public HandleCollector(string name, int initialThreshold, int maximumThreshold) { }
-
-        public HandleCollector(string name, int initialThreshold) { }
-
-        public int Count { get { throw null; } }
-
-        public int InitialThreshold { get { throw null; } }
-
-        public int MaximumThreshold { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public void Add() { }
-
-        public void Remove() { }
-    }
-
-    [Obsolete("ICustomAdapter may be unavailable in future releases.")]
-    public partial interface ICustomAdapter
-    {
-        object GetUnderlyingObject();
-    }
-
-    [Obsolete("ICustomQueryInterface may be unavailable in future releases.")]
-    public partial interface ICustomQueryInterface
-    {
-        CustomQueryInterfaceResult GetInterface(ref Guid iid, out IntPtr ppv);
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class InAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class InterfaceTypeAttribute : Attribute
-    {
-        public InterfaceTypeAttribute(short interfaceType) { }
-
-        public InterfaceTypeAttribute(ComInterfaceType interfaceType) { }
-
-        public ComInterfaceType Value { get { throw null; } }
-    }
-
-    public partial class InvalidComObjectException : Exception
-    {
-        public InvalidComObjectException() { }
-
-        public InvalidComObjectException(string message, Exception inner) { }
-
-        public InvalidComObjectException(string message) { }
-    }
-
-    public partial class InvalidOleVariantTypeException : Exception
-    {
-        public InvalidOleVariantTypeException() { }
-
-        public InvalidOleVariantTypeException(string message, Exception inner) { }
-
-        public InvalidOleVariantTypeException(string message) { }
-    }
-
-    public static partial class Marshal
-    {
-        public static readonly int SystemDefaultCharSize;
-        public static readonly int SystemMaxDBCSCharSize;
-        public static int AddRef(IntPtr pUnk) { throw null; }
-
-        public static IntPtr AllocCoTaskMem(int cb) { throw null; }
-
-        public static IntPtr AllocHGlobal(int cb) { throw null; }
-
-        public static IntPtr AllocHGlobal(IntPtr cb) { throw null; }
-
-        public static bool AreComObjectsAvailableForCleanup() { throw null; }
-
-        public static void Copy(byte[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(char[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(double[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(short[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(int[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(long[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(IntPtr source, byte[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, char[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, double[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, short[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, int[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, long[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, IntPtr[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, float[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(float[] source, int startIndex, IntPtr destination, int length) { }
-
-        [Obsolete("CreateAggregatedObject(IntPtr, Object) may be unavailable in future releases. Instead, use CreateAggregatedObject<T>(IntPtr, T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296518")]
-        public static IntPtr CreateAggregatedObject(IntPtr pOuter, object o) { throw null; }
-
-        public static IntPtr CreateAggregatedObject<T>(IntPtr pOuter, T o) { throw null; }
-
-        [Obsolete("CreateWrapperOfType(Object, Type) may be unavailable in future releases. Instead, use CreateWrapperOfType<T,T2>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296519")]
-        public static object CreateWrapperOfType(object o, Type t) { throw null; }
-
-        public static TWrapper CreateWrapperOfType<T, TWrapper>(T o) { throw null; }
-
-        [Obsolete("DestroyStructure(IntPtr, Type) may be unavailable in future releases. Instead, use DestroyStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296520")]
-        public static void DestroyStructure(IntPtr ptr, Type structuretype) { }
-
-        public static void DestroyStructure<T>(IntPtr ptr) { }
-
-        public static int FinalReleaseComObject(object o) { throw null; }
-
-        public static void FreeBSTR(IntPtr ptr) { }
-
-        public static void FreeCoTaskMem(IntPtr ptr) { }
-
-        public static void FreeHGlobal(IntPtr hglobal) { }
-
-        [Obsolete("GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode) and support for ICustomQueryInterface may be unavailable in future releases.")]
-        public static IntPtr GetComInterfaceForObject(object o, Type T, CustomQueryInterfaceMode mode) { throw null; }
-
-        [Obsolete("GetComInterfaceForObject(Object, Type) may be unavailable in future releases. Instead, use GetComInterfaceForObject<T,T2>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296509")]
-        public static IntPtr GetComInterfaceForObject(object o, Type T) { throw null; }
-
-        public static IntPtr GetComInterfaceForObject<T, TInterface>(T o) { throw null; }
-
-        [Obsolete("GetDelegateForFunctionPointer(IntPtr, Type) may be unavailable in future releases. Instead, use GetDelegateForFunctionPointer<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296521")]
-        public static Delegate GetDelegateForFunctionPointer(IntPtr ptr, Type t) { throw null; }
-
-        public static TDelegate GetDelegateForFunctionPointer<TDelegate>(IntPtr ptr) { throw null; }
-
-        [Obsolete("GetExceptionCode() may be unavailable in future releases.")]
-        public static int GetExceptionCode() { throw null; }
-
-        public static Exception GetExceptionForHR(int errorCode, IntPtr errorInfo) { throw null; }
-
-        public static Exception GetExceptionForHR(int errorCode) { throw null; }
-
-        [Obsolete("GetFunctionPointerForDelegate(Delegate) may be unavailable in future releases. Instead, use GetFunctionPointerForDelegate<T>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296522")]
-        public static IntPtr GetFunctionPointerForDelegate(Delegate d) { throw null; }
-
-        public static IntPtr GetFunctionPointerForDelegate<TDelegate>(TDelegate d) { throw null; }
-
-        public static int GetHRForException(Exception e) { throw null; }
-
-        public static int GetHRForLastWin32Error() { throw null; }
-
-        public static IntPtr GetIUnknownForObject(object o) { throw null; }
-
-        public static int GetLastWin32Error() { throw null; }
-
-        [Obsolete("GetNativeVariantForObject(Object, IntPtr) may be unavailable in future releases.")]
-        public static void GetNativeVariantForObject(object obj, IntPtr pDstNativeVariant) { }
-
-        [Obsolete("GetNativeVariantForObject<T>(T, IntPtr) may be unavailable in future releases.")]
-        public static void GetNativeVariantForObject<T>(T obj, IntPtr pDstNativeVariant) { }
-
-        public static object GetObjectForIUnknown(IntPtr pUnk) { throw null; }
-
-        [Obsolete("GetObjectForNativeVariant(IntPtr) may be unavailable in future releases.")]
-        public static object GetObjectForNativeVariant(IntPtr pSrcNativeVariant) { throw null; }
-
-        [Obsolete("GetObjectForNativeVariant<T>(IntPtr) may be unavailable in future releases.")]
-        public static T GetObjectForNativeVariant<T>(IntPtr pSrcNativeVariant) { throw null; }
-
-        [Obsolete("GetObjectsForNativeVariants(IntPtr, Int32) may be unavailable in future releases.")]
-        public static object[] GetObjectsForNativeVariants(IntPtr aSrcNativeVariant, int cVars) { throw null; }
-
-        [Obsolete("GetObjectsForNativeVariants<T>(IntPtr, Int32) may be unavailable in future releases.")]
-        public static T[] GetObjectsForNativeVariants<T>(IntPtr aSrcNativeVariant, int cVars) { throw null; }
-
-        public static int GetStartComSlot(Type t) { throw null; }
-
-        public static Type GetTypeFromCLSID(Guid clsid) { throw null; }
-
-        public static string GetTypeInfoName(ComTypes.ITypeInfo typeInfo) { throw null; }
-
-        public static object GetUniqueObjectForIUnknown(IntPtr unknown) { throw null; }
-
-        public static bool IsComObject(object o) { throw null; }
-
-        [Obsolete("OffsetOf(Type, string) may be unavailable in future releases. Instead, use OffsetOf<T>(string). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296511")]
-        public static IntPtr OffsetOf(Type t, string fieldName) { throw null; }
-
-        public static IntPtr OffsetOf<T>(string fieldName) { throw null; }
-
-        public static string PtrToStringAnsi(IntPtr ptr, int len) { throw null; }
-
-        public static string PtrToStringAnsi(IntPtr ptr) { throw null; }
-
-        public static string PtrToStringBSTR(IntPtr ptr) { throw null; }
-
-        public static string PtrToStringUni(IntPtr ptr, int len) { throw null; }
-
-        public static string PtrToStringUni(IntPtr ptr) { throw null; }
-
-        [Obsolete("PtrToStructure(IntPtr, Object) may be unavailable in future releases. Instead, use PtrToStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296512")]
-        public static void PtrToStructure(IntPtr ptr, object structure) { }
-
-        [Obsolete("PtrToStructure(IntPtr, Type) may be unavailable in future releases. Instead, use PtrToStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296513")]
-        public static object PtrToStructure(IntPtr ptr, Type structureType) { throw null; }
-
-        public static void PtrToStructure<T>(IntPtr ptr, T structure) { }
-
-        public static T PtrToStructure<T>(IntPtr ptr) { throw null; }
-
-        public static int QueryInterface(IntPtr pUnk, ref Guid iid, out IntPtr ppv) { throw null; }
-
-        public static byte ReadByte(IntPtr ptr, int ofs) { throw null; }
-
-        public static byte ReadByte(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadByte(Object, Int32) may be unavailable in future releases.")]
-        public static byte ReadByte(object ptr, int ofs) { throw null; }
-
-        public static short ReadInt16(IntPtr ptr, int ofs) { throw null; }
-
-        public static short ReadInt16(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadInt16(Object, Int32) may be unavailable in future releases.")]
-        public static short ReadInt16(object ptr, int ofs) { throw null; }
-
-        public static int ReadInt32(IntPtr ptr, int ofs) { throw null; }
-
-        public static int ReadInt32(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadInt32(Object, Int32) may be unavailable in future releases.")]
-        public static int ReadInt32(object ptr, int ofs) { throw null; }
-
-        public static long ReadInt64(IntPtr ptr, int ofs) { throw null; }
-
-        public static long ReadInt64(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadInt64(Object, Int32) may be unavailable in future releases.")]
-        public static long ReadInt64(object ptr, int ofs) { throw null; }
-
-        public static IntPtr ReadIntPtr(IntPtr ptr, int ofs) { throw null; }
-
-        public static IntPtr ReadIntPtr(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadIntPtr(Object, Int32) may be unavailable in future releases.")]
-        public static IntPtr ReadIntPtr(object ptr, int ofs) { throw null; }
-
-        public static IntPtr ReAllocCoTaskMem(IntPtr pv, int cb) { throw null; }
-
-        public static IntPtr ReAllocHGlobal(IntPtr pv, IntPtr cb) { throw null; }
-
-        public static int Release(IntPtr pUnk) { throw null; }
-
-        public static int ReleaseComObject(object o) { throw null; }
-
-        [Obsolete("SizeOf(Object) may be unavailable in future releases. Instead, use SizeOf<T>(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296514")]
-        public static int SizeOf(object structure) { throw null; }
-
-        [Obsolete("SizeOf(Type) may be unavailable in future releases. Instead, use SizeOf<T>(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296515")]
-        public static int SizeOf(Type t) { throw null; }
-
-        public static int SizeOf<T>() { throw null; }
-
-        public static int SizeOf<T>(T structure) { throw null; }
-
-        public static IntPtr StringToBSTR(string s) { throw null; }
-
-        public static IntPtr StringToCoTaskMemAnsi(string s) { throw null; }
-
-        public static IntPtr StringToCoTaskMemUni(string s) { throw null; }
-
-        public static IntPtr StringToHGlobalAnsi(string s) { throw null; }
-
-        public static IntPtr StringToHGlobalUni(string s) { throw null; }
-
-        [Obsolete("StructureToPtr(Object, IntPtr, Boolean) may be unavailable in future releases. Instead, use StructureToPtr<T>(T, IntPtr, Boolean). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296516")]
-        public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld) { }
-
-        public static void StructureToPtr<T>(T structure, IntPtr ptr, bool fDeleteOld) { }
-
-        public static void ThrowExceptionForHR(int errorCode, IntPtr errorInfo) { }
-
-        public static void ThrowExceptionForHR(int errorCode) { }
-
-        [Obsolete("UnsafeAddrOfPinnedArrayElement(Array, Int32) may be unavailable in future releases. Instead, use UnsafeAddrOfPinnedArrayElement<T>(T[], Int32). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296517")]
-        public static IntPtr UnsafeAddrOfPinnedArrayElement(Array arr, int index) { throw null; }
-
-        public static IntPtr UnsafeAddrOfPinnedArrayElement<T>(T[] arr, int index) { throw null; }
-
-        public static void WriteByte(IntPtr ptr, byte val) { }
-
-        public static void WriteByte(IntPtr ptr, int ofs, byte val) { }
-
-        [Obsolete("WriteByte(Object, Int32, Byte) may be unavailable in future releases.")]
-        public static void WriteByte(object ptr, int ofs, byte val) { }
-
-        public static void WriteInt16(IntPtr ptr, char val) { }
-
-        public static void WriteInt16(IntPtr ptr, short val) { }
-
-        public static void WriteInt16(IntPtr ptr, int ofs, char val) { }
-
-        public static void WriteInt16(IntPtr ptr, int ofs, short val) { }
-
-        [Obsolete("WriteInt16(Object, Int32, Char) may be unavailable in future releases.")]
-        public static void WriteInt16(object ptr, int ofs, char val) { }
-
-        [Obsolete("WriteInt16(Object, Int32, Int16) may be unavailable in future releases.")]
-        public static void WriteInt16(object ptr, int ofs, short val) { }
-
-        public static void WriteInt32(IntPtr ptr, int ofs, int val) { }
-
-        public static void WriteInt32(IntPtr ptr, int val) { }
-
-        [Obsolete("WriteInt32(Object, Int32, Int32) may be unavailable in future releases.")]
-        public static void WriteInt32(object ptr, int ofs, int val) { }
-
-        public static void WriteInt64(IntPtr ptr, int ofs, long val) { }
-
-        public static void WriteInt64(IntPtr ptr, long val) { }
-
-        [Obsolete("WriteInt64(Object, Int32, Int64) may be unavailable in future releases.")]
-        public static void WriteInt64(object ptr, int ofs, long val) { }
-
-        public static void WriteIntPtr(IntPtr ptr, int ofs, IntPtr val) { }
-
-        public static void WriteIntPtr(IntPtr ptr, IntPtr val) { }
-
-        [Obsolete("WriteIntPtr(Object, Int32, IntPtr) may be unavailable in future releases.")]
-        public static void WriteIntPtr(object ptr, int ofs, IntPtr val) { }
-
-        public static void ZeroFreeBSTR(IntPtr s) { }
-
-        public static void ZeroFreeCoTaskMemAnsi(IntPtr s) { }
-
-        public static void ZeroFreeCoTaskMemUnicode(IntPtr s) { }
-
-        public static void ZeroFreeGlobalAllocAnsi(IntPtr s) { }
-
-        public static void ZeroFreeGlobalAllocUnicode(IntPtr s) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.ReturnValue, Inherited = false)]
-    public sealed partial class MarshalAsAttribute : Attribute
-    {
-        public UnmanagedType ArraySubType;
-        public int IidParameterIndex;
-        public string MarshalCookie;
-        public string MarshalType;
-        public Type MarshalTypeRef;
-        public VarEnum SafeArraySubType;
-        public Type SafeArrayUserDefinedSubType;
-        public int SizeConst;
-        public short SizeParamIndex;
-        public MarshalAsAttribute(short unmanagedType) { }
-
-        public MarshalAsAttribute(UnmanagedType unmanagedType) { }
-
-        public UnmanagedType Value { get { throw null; } }
-    }
-
-    public partial class MarshalDirectiveException : Exception
-    {
-        public MarshalDirectiveException() { }
-
-        public MarshalDirectiveException(string message, Exception inner) { }
-
-        public MarshalDirectiveException(string message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class OptionalAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false)]
-    public sealed partial class PreserveSigAttribute : Attribute
-    {
-    }
-
-    public partial class SafeArrayRankMismatchException : Exception
-    {
-        public SafeArrayRankMismatchException() { }
-
-        public SafeArrayRankMismatchException(string message, Exception inner) { }
-
-        public SafeArrayRankMismatchException(string message) { }
-    }
-
-    public partial class SafeArrayTypeMismatchException : Exception
-    {
-        public SafeArrayTypeMismatchException() { }
-
-        public SafeArrayTypeMismatchException(string message, Exception inner) { }
-
-        public SafeArrayTypeMismatchException(string message) { }
-    }
-
-    [Obsolete("SafeBuffer may be unavailable in future releases.")]
-    public abstract partial class SafeBuffer : SafeHandle
-    {
-        protected SafeBuffer(bool ownsHandle) : base(default, default) { }
-
-        [CLSCompliant(false)]
-        public ulong ByteLength { get { throw null; } }
-
-        public override bool IsInvalid { get { throw null; } }
-
-        [CLSCompliant(false)]
-        public unsafe void AcquirePointer(ref byte* pointer) { }
-
-        [CLSCompliant(false)]
-        public void Initialize(uint numElements, uint sizeOfEachElement) { }
-
-        [CLSCompliant(false)]
-        public void Initialize(ulong numBytes) { }
-
-        [CLSCompliant(false)]
-        public void Initialize<T>(uint numElements)
-            where T : struct { }
-
-        [CLSCompliant(false)]
-        public T Read<T>(ulong byteOffset)
-            where T : struct { throw null; }
-
-        [CLSCompliant(false)]
-        public void ReadArray<T>(ulong byteOffset, T[] array, int index, int count)
-            where T : struct { }
-
-        public void ReleasePointer() { }
-
-        [CLSCompliant(false)]
-        public void Write<T>(ulong byteOffset, T value)
-            where T : struct { }
-
-        [CLSCompliant(false)]
-        public void WriteArray<T>(ulong byteOffset, T[] array, int index, int count)
-            where T : struct { }
-    }
-
-    public abstract partial class SafeHandle : IDisposable
-    {
-        protected IntPtr handle;
-        protected SafeHandle(IntPtr invalidHandleValue, bool ownsHandle) { }
-
-        public bool IsClosed { get { throw null; } }
-
-        public abstract bool IsInvalid { get; }
-
-        public void DangerousAddRef(ref bool success) { }
-
-        public IntPtr DangerousGetHandle() { throw null; }
-
-        public void DangerousRelease() { }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        ~SafeHandle() {
-        }
-
-        protected abstract bool ReleaseHandle();
-        protected void SetHandle(IntPtr handle) { }
-
-        public void SetHandleAsInvalid() { }
-    }
-
-    public partial class SEHException : Exception
-    {
-        public SEHException() { }
-
-        public SEHException(string message, Exception inner) { }
-
-        public SEHException(string message) { }
-
-        public virtual bool CanResume() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class TypeIdentifierAttribute : Attribute
-    {
-        public TypeIdentifierAttribute() { }
-
-        public TypeIdentifierAttribute(string scope, string identifier) { }
-
-        public string Identifier { get { throw null; } }
-
-        public string Scope { get { throw null; } }
-    }
-
-    [Obsolete("UnknownWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class UnknownWrapper
-    {
-        public UnknownWrapper(object obj) { }
-
-        public object WrappedObject { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class UnmanagedFunctionPointerAttribute : Attribute
-    {
-        public bool BestFitMapping;
-        public CharSet CharSet;
-        public bool SetLastError;
-        public bool ThrowOnUnmappableChar;
-        public UnmanagedFunctionPointerAttribute(CallingConvention callingConvention) { }
-
-        public CallingConvention CallingConvention { get { throw null; } }
-    }
-
-    public enum UnmanagedType
-    {
-        Bool = 2,
-        I1 = 3,
-        U1 = 4,
-        I2 = 5,
-        U2 = 6,
-        I4 = 7,
-        U4 = 8,
-        I8 = 9,
-        U8 = 10,
-        R4 = 11,
-        R8 = 12,
-        Currency = 15,
-        BStr = 19,
-        LPStr = 20,
-        LPWStr = 21,
-        LPTStr = 22,
-        ByValTStr = 23,
-        IUnknown = 25,
-        IDispatch = 26,
-        Struct = 27,
-        Interface = 28,
-        SafeArray = 29,
-        ByValArray = 30,
-        SysInt = 31,
-        SysUInt = 32,
-        VBByRefStr = 34,
-        AnsiBStr = 35,
-        TBStr = 36,
-        VariantBool = 37,
-        FunctionPtr = 38,
-        AsAny = 40,
-        LPArray = 42,
-        LPStruct = 43,
-        Error = 45,
-        IInspectable = 46,
-        HString = 47
-    }
-
-    [Obsolete("Marshalling VARIANTs may be unavailable in future releases.")]
-    public enum VarEnum
-    {
-        VT_EMPTY = 0,
-        VT_NULL = 1,
-        VT_I2 = 2,
-        VT_I4 = 3,
-        VT_R4 = 4,
-        VT_R8 = 5,
-        VT_CY = 6,
-        VT_DATE = 7,
-        VT_BSTR = 8,
-        VT_DISPATCH = 9,
-        VT_ERROR = 10,
-        VT_BOOL = 11,
-        VT_VARIANT = 12,
-        VT_UNKNOWN = 13,
-        VT_DECIMAL = 14,
-        VT_I1 = 16,
-        VT_UI1 = 17,
-        VT_UI2 = 18,
-        VT_UI4 = 19,
-        VT_I8 = 20,
-        VT_UI8 = 21,
-        VT_INT = 22,
-        VT_UINT = 23,
-        VT_VOID = 24,
-        VT_HRESULT = 25,
-        VT_PTR = 26,
-        VT_SAFEARRAY = 27,
-        VT_CARRAY = 28,
-        VT_USERDEFINED = 29,
-        VT_LPSTR = 30,
-        VT_LPWSTR = 31,
-        VT_RECORD = 36,
-        VT_FILETIME = 64,
-        VT_BLOB = 65,
-        VT_STREAM = 66,
-        VT_STORAGE = 67,
-        VT_STREAMED_OBJECT = 68,
-        VT_STORED_OBJECT = 69,
-        VT_BLOB_OBJECT = 70,
-        VT_CF = 71,
-        VT_CLSID = 72,
-        VT_VECTOR = 4096,
-        VT_ARRAY = 8192,
-        VT_BYREF = 16384
-    }
-
-    [Obsolete("VariantWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class VariantWrapper
-    {
-        public VariantWrapper(object obj) { }
-
-        public object WrappedObject { get { throw null; } }
-    }
-}
-
-namespace System.Runtime.InteropServices.ComTypes
-{
-    [Flags]
-    public enum ADVF
-    {
-        ADVF_NODATA = 1,
-        ADVF_PRIMEFIRST = 2,
-        ADVF_ONLYONCE = 4,
-        ADVFCACHE_NOHANDLER = 8,
-        ADVFCACHE_FORCEBUILTIN = 16,
-        ADVFCACHE_ONSAVE = 32,
-        ADVF_DATAONSTOP = 64
-    }
-
-    public partial struct BINDPTR
-    {
-        public IntPtr lpfuncdesc;
-        public IntPtr lptcomp;
-        public IntPtr lpvardesc;
-    }
-
-    public partial struct BIND_OPTS
-    {
-        public int cbStruct;
-        public int dwTickCountDeadline;
-        public int grfFlags;
-        public int grfMode;
-    }
-
-    public enum CALLCONV
-    {
-        CC_CDECL = 1,
-        CC_MSCPASCAL = 2,
-        CC_PASCAL = 2,
-        CC_MACPASCAL = 3,
-        CC_STDCALL = 4,
-        CC_RESERVED = 5,
-        CC_SYSCALL = 6,
-        CC_MPWCDECL = 7,
-        CC_MPWPASCAL = 8,
-        CC_MAX = 9
-    }
-
-    public partial struct CONNECTDATA
-    {
-        public int dwCookie;
-        public object pUnk;
-    }
-
-    public enum DATADIR
-    {
-        DATADIR_GET = 1,
-        DATADIR_SET = 2
-    }
-
-    public enum DESCKIND
-    {
-        DESCKIND_NONE = 0,
-        DESCKIND_FUNCDESC = 1,
-        DESCKIND_VARDESC = 2,
-        DESCKIND_TYPECOMP = 3,
-        DESCKIND_IMPLICITAPPOBJ = 4,
-        DESCKIND_MAX = 5
-    }
-
-    public partial struct DISPPARAMS
-    {
-        public int cArgs;
-        public int cNamedArgs;
-        public IntPtr rgdispidNamedArgs;
-        public IntPtr rgvarg;
-    }
-
-    [Flags]
-    public enum DVASPECT
-    {
-        DVASPECT_CONTENT = 1,
-        DVASPECT_THUMBNAIL = 2,
-        DVASPECT_ICON = 4,
-        DVASPECT_DOCPRINT = 8
-    }
-
-    public partial struct ELEMDESC
-    {
-        public DESCUNION desc;
-        public TYPEDESC tdesc;
-        public partial struct DESCUNION
-        {
-            public IDLDESC idldesc;
-            public PARAMDESC paramdesc;
-        }
-    }
-
-    public partial struct EXCEPINFO
-    {
-        public string bstrDescription;
-        public string bstrHelpFile;
-        public string bstrSource;
-        public int dwHelpContext;
-        public IntPtr pfnDeferredFillIn;
-        public IntPtr pvReserved;
-        public int scode;
-        public short wCode;
-        public short wReserved;
-    }
-
-    public partial struct FILETIME
-    {
-        public int dwHighDateTime;
-        public int dwLowDateTime;
-    }
-
-    public partial struct FORMATETC
-    {
-        public short cfFormat;
-        public DVASPECT dwAspect;
-        public int lindex;
-        public IntPtr ptd;
-        public TYMED tymed;
-    }
-
-    public partial struct FUNCDESC
-    {
-        public CALLCONV callconv;
-        public short cParams;
-        public short cParamsOpt;
-        public short cScodes;
-        public ELEMDESC elemdescFunc;
-        public FUNCKIND funckind;
-        public INVOKEKIND invkind;
-        public IntPtr lprgelemdescParam;
-        public IntPtr lprgscode;
-        public int memid;
-        public short oVft;
-        public short wFuncFlags;
-    }
-
-    [Flags]
-    public enum FUNCFLAGS : short
-    {
-        FUNCFLAG_FRESTRICTED = 1,
-        FUNCFLAG_FSOURCE = 2,
-        FUNCFLAG_FBINDABLE = 4,
-        FUNCFLAG_FREQUESTEDIT = 8,
-        FUNCFLAG_FDISPLAYBIND = 16,
-        FUNCFLAG_FDEFAULTBIND = 32,
-        FUNCFLAG_FHIDDEN = 64,
-        FUNCFLAG_FUSESGETLASTERROR = 128,
-        FUNCFLAG_FDEFAULTCOLLELEM = 256,
-        FUNCFLAG_FUIDEFAULT = 512,
-        FUNCFLAG_FNONBROWSABLE = 1024,
-        FUNCFLAG_FREPLACEABLE = 2048,
-        FUNCFLAG_FIMMEDIATEBIND = 4096
-    }
-
-    public enum FUNCKIND
-    {
-        FUNC_VIRTUAL = 0,
-        FUNC_PUREVIRTUAL = 1,
-        FUNC_NONVIRTUAL = 2,
-        FUNC_STATIC = 3,
-        FUNC_DISPATCH = 4
-    }
-
-    public partial interface IAdviseSink
-    {
-        void OnClose();
-        void OnDataChange(ref FORMATETC format, ref STGMEDIUM stgmedium);
-        void OnRename(IMoniker moniker);
-        void OnSave();
-        void OnViewChange(int aspect, int index);
-    }
-
-    public partial interface IBindCtx
-    {
-        void EnumObjectParam(out IEnumString ppenum);
-        void GetBindOptions(ref BIND_OPTS pbindopts);
-        void GetObjectParam(string pszKey, out object ppunk);
-        void GetRunningObjectTable(out IRunningObjectTable pprot);
-        void RegisterObjectBound(object punk);
-        void RegisterObjectParam(string pszKey, object punk);
-        void ReleaseBoundObjects();
-        void RevokeObjectBound(object punk);
-        int RevokeObjectParam(string pszKey);
-        void SetBindOptions(ref BIND_OPTS pbindopts);
-    }
-
-    public partial interface IConnectionPoint
-    {
-        void Advise(object pUnkSink, out int pdwCookie);
-        void EnumConnections(out IEnumConnections ppEnum);
-        void GetConnectionInterface(out Guid pIID);
-        void GetConnectionPointContainer(out IConnectionPointContainer ppCPC);
-        void Unadvise(int dwCookie);
-    }
-
-    public partial interface IConnectionPointContainer
-    {
-        void EnumConnectionPoints(out IEnumConnectionPoints ppEnum);
-        void FindConnectionPoint(ref Guid riid, out IConnectionPoint ppCP);
-    }
-
-    public partial struct IDLDESC
-    {
-        public IntPtr dwReserved;
-        public IDLFLAG wIDLFlags;
-    }
-
-    [Flags]
-    public enum IDLFLAG : short
-    {
-        IDLFLAG_NONE = 0,
-        IDLFLAG_FIN = 1,
-        IDLFLAG_FOUT = 2,
-        IDLFLAG_FLCID = 4,
-        IDLFLAG_FRETVAL = 8
-    }
-
-    public partial interface IEnumConnectionPoints
-    {
-        void Clone(out IEnumConnectionPoints ppenum);
-        int Next(int celt, IConnectionPoint[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumConnections
-    {
-        void Clone(out IEnumConnections ppenum);
-        int Next(int celt, CONNECTDATA[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumFORMATETC
-    {
-        void Clone(out IEnumFORMATETC newEnum);
-        int Next(int celt, FORMATETC[] rgelt, int[] pceltFetched);
-        int Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumMoniker
-    {
-        void Clone(out IEnumMoniker ppenum);
-        int Next(int celt, IMoniker[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumString
-    {
-        void Clone(out IEnumString ppenum);
-        int Next(int celt, string[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumVARIANT
-    {
-        IEnumVARIANT Clone();
-        int Next(int celt, object[] rgVar, IntPtr pceltFetched);
-        int Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IMoniker
-    {
-        void BindToObject(IBindCtx pbc, IMoniker pmkToLeft, ref Guid riidResult, out object ppvResult);
-        void BindToStorage(IBindCtx pbc, IMoniker pmkToLeft, ref Guid riid, out object ppvObj);
-        void CommonPrefixWith(IMoniker pmkOther, out IMoniker ppmkPrefix);
-        void ComposeWith(IMoniker pmkRight, bool fOnlyIfNotGeneric, out IMoniker ppmkComposite);
-        void Enum(bool fForward, out IEnumMoniker ppenumMoniker);
-        void GetClassID(out Guid pClassID);
-        void GetDisplayName(IBindCtx pbc, IMoniker pmkToLeft, out string ppszDisplayName);
-        void GetSizeMax(out long pcbSize);
-        void GetTimeOfLastChange(IBindCtx pbc, IMoniker pmkToLeft, out FILETIME pFileTime);
-        void Hash(out int pdwHash);
-        void Inverse(out IMoniker ppmk);
-        int IsDirty();
-        int IsEqual(IMoniker pmkOtherMoniker);
-        int IsRunning(IBindCtx pbc, IMoniker pmkToLeft, IMoniker pmkNewlyRunning);
-        int IsSystemMoniker(out int pdwMksys);
-        void Load(IStream pStm);
-        void ParseDisplayName(IBindCtx pbc, IMoniker pmkToLeft, string pszDisplayName, out int pchEaten, out IMoniker ppmkOut);
-        void Reduce(IBindCtx pbc, int dwReduceHowFar, ref IMoniker ppmkToLeft, out IMoniker ppmkReduced);
-        void RelativePathTo(IMoniker pmkOther, out IMoniker ppmkRelPath);
-        void Save(IStream pStm, bool fClearDirty);
-    }
-
-    [Flags]
-    public enum IMPLTYPEFLAGS
-    {
-        IMPLTYPEFLAG_FDEFAULT = 1,
-        IMPLTYPEFLAG_FSOURCE = 2,
-        IMPLTYPEFLAG_FRESTRICTED = 4,
-        IMPLTYPEFLAG_FDEFAULTVTABLE = 8
-    }
-
-    [Flags]
-    public enum INVOKEKIND
-    {
-        INVOKE_FUNC = 1,
-        INVOKE_PROPERTYGET = 2,
-        INVOKE_PROPERTYPUT = 4,
-        INVOKE_PROPERTYPUTREF = 8
-    }
-
-    public partial interface IPersistFile
-    {
-        void GetClassID(out Guid pClassID);
-        void GetCurFile(out string ppszFileName);
-        int IsDirty();
-        void Load(string pszFileName, int dwMode);
-        void Save(string pszFileName, bool fRemember);
-        void SaveCompleted(string pszFileName);
-    }
-
-    public partial interface IRunningObjectTable
-    {
-        void EnumRunning(out IEnumMoniker ppenumMoniker);
-        int GetObject(IMoniker pmkObjectName, out object ppunkObject);
-        int GetTimeOfLastChange(IMoniker pmkObjectName, out FILETIME pfiletime);
-        int IsRunning(IMoniker pmkObjectName);
-        void NoteChangeTime(int dwRegister, ref FILETIME pfiletime);
-        int Register(int grfFlags, object punkObject, IMoniker pmkObjectName);
-        void Revoke(int dwRegister);
-    }
-
-    public partial interface IStream
-    {
-        void Clone(out IStream ppstm);
-        void Commit(int grfCommitFlags);
-        void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);
-        void LockRegion(long libOffset, long cb, int dwLockType);
-        void Read(byte[] pv, int cb, IntPtr pcbRead);
-        void Revert();
-        void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition);
-        void SetSize(long libNewSize);
-        void Stat(out STATSTG pstatstg, int grfStatFlag);
-        void UnlockRegion(long libOffset, long cb, int dwLockType);
-        void Write(byte[] pv, int cb, IntPtr pcbWritten);
-    }
-
-    public partial interface ITypeComp
-    {
-        void Bind(string szName, int lHashVal, short wFlags, out ITypeInfo ppTInfo, out DESCKIND pDescKind, out BINDPTR pBindPtr);
-        void BindType(string szName, int lHashVal, out ITypeInfo ppTInfo, out ITypeComp ppTComp);
-    }
-
-    public partial interface ITypeInfo
-    {
-        void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv);
-        void CreateInstance(object pUnkOuter, ref Guid riid, out object ppvObj);
-        void GetContainingTypeLib(out ITypeLib ppTLB, out int pIndex);
-        void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetFuncDesc(int index, out IntPtr ppFuncDesc);
-        void GetIDsOfNames(string[] rgszNames, int cNames, int[] pMemId);
-        void GetImplTypeFlags(int index, out IMPLTYPEFLAGS pImplTypeFlags);
-        void GetMops(int memid, out string pBstrMops);
-        void GetNames(int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);
-        void GetRefTypeInfo(int hRef, out ITypeInfo ppTI);
-        void GetRefTypeOfImplType(int index, out int href);
-        void GetTypeAttr(out IntPtr ppTypeAttr);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetVarDesc(int index, out IntPtr ppVarDesc);
-        void Invoke(object pvInstance, int memid, short wFlags, ref DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr);
-        void ReleaseFuncDesc(IntPtr pFuncDesc);
-        void ReleaseTypeAttr(IntPtr pTypeAttr);
-        void ReleaseVarDesc(IntPtr pVarDesc);
-    }
-
-    public partial interface ITypeInfo2 : ITypeInfo
-    {
-        void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv);
-        void CreateInstance(object pUnkOuter, ref Guid riid, out object ppvObj);
-        void GetAllCustData(IntPtr pCustData);
-        void GetAllFuncCustData(int index, IntPtr pCustData);
-        void GetAllImplTypeCustData(int index, IntPtr pCustData);
-        void GetAllParamCustData(int indexFunc, int indexParam, IntPtr pCustData);
-        void GetAllVarCustData(int index, IntPtr pCustData);
-        void GetContainingTypeLib(out ITypeLib ppTLB, out int pIndex);
-        void GetCustData(ref Guid guid, out object pVarVal);
-        void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetDocumentation2(int memid, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll);
-        void GetFuncCustData(int index, ref Guid guid, out object pVarVal);
-        void GetFuncDesc(int index, out IntPtr ppFuncDesc);
-        void GetFuncIndexOfMemId(int memid, INVOKEKIND invKind, out int pFuncIndex);
-        void GetIDsOfNames(string[] rgszNames, int cNames, int[] pMemId);
-        void GetImplTypeCustData(int index, ref Guid guid, out object pVarVal);
-        void GetImplTypeFlags(int index, out IMPLTYPEFLAGS pImplTypeFlags);
-        void GetMops(int memid, out string pBstrMops);
-        void GetNames(int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);
-        void GetParamCustData(int indexFunc, int indexParam, ref Guid guid, out object pVarVal);
-        void GetRefTypeInfo(int hRef, out ITypeInfo ppTI);
-        void GetRefTypeOfImplType(int index, out int href);
-        void GetTypeAttr(out IntPtr ppTypeAttr);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetTypeFlags(out int pTypeFlags);
-        void GetTypeKind(out TYPEKIND pTypeKind);
-        void GetVarCustData(int index, ref Guid guid, out object pVarVal);
-        void GetVarDesc(int index, out IntPtr ppVarDesc);
-        void GetVarIndexOfMemId(int memid, out int pVarIndex);
-        void Invoke(object pvInstance, int memid, short wFlags, ref DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr);
-        void ReleaseFuncDesc(IntPtr pFuncDesc);
-        void ReleaseTypeAttr(IntPtr pTypeAttr);
-        void ReleaseVarDesc(IntPtr pVarDesc);
-    }
-
-    public partial interface ITypeLib
-    {
-        void FindName(string szNameBuf, int lHashVal, ITypeInfo[] ppTInfo, int[] rgMemId, ref short pcFound);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetLibAttr(out IntPtr ppTLibAttr);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetTypeInfo(int index, out ITypeInfo ppTI);
-        int GetTypeInfoCount();
-        void GetTypeInfoOfGuid(ref Guid guid, out ITypeInfo ppTInfo);
-        void GetTypeInfoType(int index, out TYPEKIND pTKind);
-        bool IsName(string szNameBuf, int lHashVal);
-        void ReleaseTLibAttr(IntPtr pTLibAttr);
-    }
-
-    public partial interface ITypeLib2 : ITypeLib
-    {
-        void FindName(string szNameBuf, int lHashVal, ITypeInfo[] ppTInfo, int[] rgMemId, ref short pcFound);
-        void GetAllCustData(IntPtr pCustData);
-        void GetCustData(ref Guid guid, out object pVarVal);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetDocumentation2(int index, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll);
-        void GetLibAttr(out IntPtr ppTLibAttr);
-        void GetLibStatistics(IntPtr pcUniqueNames, out int pcchUniqueNames);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetTypeInfo(int index, out ITypeInfo ppTI);
-        int GetTypeInfoCount();
-        void GetTypeInfoOfGuid(ref Guid guid, out ITypeInfo ppTInfo);
-        void GetTypeInfoType(int index, out TYPEKIND pTKind);
-        bool IsName(string szNameBuf, int lHashVal);
-        void ReleaseTLibAttr(IntPtr pTLibAttr);
-    }
-
-    [Flags]
-    public enum LIBFLAGS : short
-    {
-        LIBFLAG_FRESTRICTED = 1,
-        LIBFLAG_FCONTROL = 2,
-        LIBFLAG_FHIDDEN = 4,
-        LIBFLAG_FHASDISKIMAGE = 8
-    }
-
-    public partial struct PARAMDESC
-    {
-        public IntPtr lpVarValue;
-        public PARAMFLAG wParamFlags;
-    }
-
-    [Flags]
-    public enum PARAMFLAG : short
-    {
-        PARAMFLAG_NONE = 0,
-        PARAMFLAG_FIN = 1,
-        PARAMFLAG_FOUT = 2,
-        PARAMFLAG_FLCID = 4,
-        PARAMFLAG_FRETVAL = 8,
-        PARAMFLAG_FOPT = 16,
-        PARAMFLAG_FHASDEFAULT = 32,
-        PARAMFLAG_FHASCUSTDATA = 64
-    }
-
-    public partial struct STATDATA
-    {
-        public ADVF advf;
-        public IAdviseSink advSink;
-        public int connection;
-        public FORMATETC formatetc;
-    }
-
-    public partial struct STATSTG
-    {
-        public FILETIME atime;
-        public long cbSize;
-        public Guid clsid;
-        public FILETIME ctime;
-        public int grfLocksSupported;
-        public int grfMode;
-        public int grfStateBits;
-        public FILETIME mtime;
-        public string pwcsName;
-        public int reserved;
-        public int type;
-    }
-
-    public partial struct STGMEDIUM
-    {
-        public object pUnkForRelease;
-        public TYMED tymed;
-        public IntPtr unionmember;
-    }
-
-    public enum SYSKIND
-    {
-        SYS_WIN16 = 0,
-        SYS_WIN32 = 1,
-        SYS_MAC = 2,
-        SYS_WIN64 = 3
-    }
-
-    [Flags]
-    public enum TYMED
-    {
-        TYMED_NULL = 0,
-        TYMED_HGLOBAL = 1,
-        TYMED_FILE = 2,
-        TYMED_ISTREAM = 4,
-        TYMED_ISTORAGE = 8,
-        TYMED_GDI = 16,
-        TYMED_MFPICT = 32,
-        TYMED_ENHMF = 64
-    }
-
-    public partial struct TYPEATTR
-    {
-        public short cbAlignment;
-        public int cbSizeInstance;
-        public short cbSizeVft;
-        public short cFuncs;
-        public short cImplTypes;
-        public short cVars;
-        public int dwReserved;
-        public Guid guid;
-        public IDLDESC idldescType;
-        public int lcid;
-        public IntPtr lpstrSchema;
-        public const int MEMBER_ID_NIL = -1;
-        public int memidConstructor;
-        public int memidDestructor;
-        public TYPEDESC tdescAlias;
-        public TYPEKIND typekind;
-        public short wMajorVerNum;
-        public short wMinorVerNum;
-        public TYPEFLAGS wTypeFlags;
-    }
-
-    public partial struct TYPEDESC
-    {
-        public IntPtr lpValue;
-        public short vt;
-    }
-
-    [Flags]
-    public enum TYPEFLAGS : short
-    {
-        TYPEFLAG_FAPPOBJECT = 1,
-        TYPEFLAG_FCANCREATE = 2,
-        TYPEFLAG_FLICENSED = 4,
-        TYPEFLAG_FPREDECLID = 8,
-        TYPEFLAG_FHIDDEN = 16,
-        TYPEFLAG_FCONTROL = 32,
-        TYPEFLAG_FDUAL = 64,
-        TYPEFLAG_FNONEXTENSIBLE = 128,
-        TYPEFLAG_FOLEAUTOMATION = 256,
-        TYPEFLAG_FRESTRICTED = 512,
-        TYPEFLAG_FAGGREGATABLE = 1024,
-        TYPEFLAG_FREPLACEABLE = 2048,
-        TYPEFLAG_FDISPATCHABLE = 4096,
-        TYPEFLAG_FREVERSEBIND = 8192,
-        TYPEFLAG_FPROXY = 16384
-    }
-
-    public enum TYPEKIND
-    {
-        TKIND_ENUM = 0,
-        TKIND_RECORD = 1,
-        TKIND_MODULE = 2,
-        TKIND_INTERFACE = 3,
-        TKIND_DISPATCH = 4,
-        TKIND_COCLASS = 5,
-        TKIND_ALIAS = 6,
-        TKIND_UNION = 7,
-        TKIND_MAX = 8
-    }
-
-    public partial struct TYPELIBATTR
-    {
-        public Guid guid;
-        public int lcid;
-        public SYSKIND syskind;
-        public LIBFLAGS wLibFlags;
-        public short wMajorVerNum;
-        public short wMinorVerNum;
-    }
-
-    public partial struct VARDESC
-    {
-        public DESCUNION desc;
-        public ELEMDESC elemdescVar;
-        public string lpstrSchema;
-        public int memid;
-        public VARKIND varkind;
-        public short wVarFlags;
-        public partial struct DESCUNION
-        {
-            public IntPtr lpvarValue;
-            public int oInst;
-        }
-    }
-
-    [Flags]
-    public enum VARFLAGS : short
-    {
-        VARFLAG_FREADONLY = 1,
-        VARFLAG_FSOURCE = 2,
-        VARFLAG_FBINDABLE = 4,
-        VARFLAG_FREQUESTEDIT = 8,
-        VARFLAG_FDISPLAYBIND = 16,
-        VARFLAG_FDEFAULTBIND = 32,
-        VARFLAG_FHIDDEN = 64,
-        VARFLAG_FRESTRICTED = 128,
-        VARFLAG_FDEFAULTCOLLELEM = 256,
-        VARFLAG_FUIDEFAULT = 512,
-        VARFLAG_FNONBROWSABLE = 1024,
-        VARFLAG_FREPLACEABLE = 2048,
-        VARFLAG_FIMMEDIATEBIND = 4096
-    }
-
-    public enum VARKIND
-    {
-        VAR_PERINSTANCE = 0,
-        VAR_STATIC = 1,
-        VAR_CONST = 2,
-        VAR_DISPATCH = 3
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.3/System.Runtime.InteropServices.cs b/src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.3/System.Runtime.InteropServices.cs
deleted file mode 100644
index e1f9468b..00000000
--- a/src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.3/System.Runtime.InteropServices.cs
+++ /dev/null
@@ -1,1598 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Runtime.InteropServices")]
-[assembly: System.Reflection.AssemblyDescription("System.Runtime.InteropServices")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Runtime.InteropServices")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.23123.00")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.23123.00 built by: PROJECTKREL")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata("", "")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.20.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-[assembly: System.Runtime.CompilerServices.TypeForwardedTo(typeof(System.Runtime.InteropServices.CriticalHandle))]
-[assembly: System.Runtime.CompilerServices.TypeForwardedTo(typeof(System.Runtime.InteropServices.SafeHandle))]
-namespace System
-{
-    public sealed partial class DataMisalignedException : Exception
-    {
-        public DataMisalignedException() { }
-
-        public DataMisalignedException(string message, Exception innerException) { }
-
-        public DataMisalignedException(string message) { }
-    }
-
-    public partial class DllNotFoundException : TypeLoadException
-    {
-        public DllNotFoundException() { }
-
-        public DllNotFoundException(string message, Exception inner) { }
-
-        public DllNotFoundException(string message) { }
-    }
-}
-
-namespace System.Reflection
-{
-    public sealed partial class Missing
-    {
-        internal Missing() { }
-
-        public static readonly Missing Value;
-    }
-}
-
-namespace System.Runtime.InteropServices
-{
-    public partial struct ArrayWithOffset
-    {
-        public ArrayWithOffset(object array, int offset) { }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(ArrayWithOffset obj) { throw null; }
-
-        public object GetArray() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public int GetOffset() { throw null; }
-
-        public static bool operator ==(ArrayWithOffset a, ArrayWithOffset b) { throw null; }
-
-        public static bool operator !=(ArrayWithOffset a, ArrayWithOffset b) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class BestFitMappingAttribute : Attribute
-    {
-        public bool ThrowOnUnmappableChar;
-        public BestFitMappingAttribute(bool BestFitMapping) { }
-
-        public bool BestFitMapping { get { throw null; } }
-    }
-
-    [Obsolete("BStrWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class BStrWrapper
-    {
-        public BStrWrapper(object value) { }
-
-        public BStrWrapper(string value) { }
-
-        public string WrappedObject { get { throw null; } }
-    }
-
-    public enum CallingConvention
-    {
-        Winapi = 1,
-        Cdecl = 2,
-        StdCall = 3,
-        ThisCall = 4
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, Inherited = false)]
-    public sealed partial class ClassInterfaceAttribute : Attribute
-    {
-        public ClassInterfaceAttribute(short classInterfaceType) { }
-
-        public ClassInterfaceAttribute(ClassInterfaceType classInterfaceType) { }
-
-        public ClassInterfaceType Value { get { throw null; } }
-    }
-
-    public enum ClassInterfaceType
-    {
-        None = 0,
-        AutoDispatch = 1,
-        AutoDual = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class CoClassAttribute : Attribute
-    {
-        public CoClassAttribute(Type coClass) { }
-
-        public Type CoClass { get { throw null; } }
-    }
-
-    [Obsolete("ComAwareEventInfo may be unavailable in future releases.")]
-    public partial class ComAwareEventInfo : Reflection.EventInfo
-    {
-        public ComAwareEventInfo(Type type, string eventName) { }
-
-        public override Reflection.EventAttributes Attributes { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override void AddEventHandler(object target, Delegate handler) { }
-
-        public override void RemoveEventHandler(object target, Delegate handler) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = false)]
-    public sealed partial class ComDefaultInterfaceAttribute : Attribute
-    {
-        public ComDefaultInterfaceAttribute(Type defaultInterface) { }
-
-        public Type Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Interface, Inherited = false)]
-    [Obsolete("ComEventInterfaceAttribute may be unavailable in future releases.")]
-    public sealed partial class ComEventInterfaceAttribute : Attribute
-    {
-        public ComEventInterfaceAttribute(Type SourceInterface, Type EventProvider) { }
-
-        public Type EventProvider { get { throw null; } }
-
-        public Type SourceInterface { get { throw null; } }
-    }
-
-    [Obsolete("ComEventsHelper may be unavailable in future releases.")]
-    public static partial class ComEventsHelper
-    {
-        public static void Combine(object rcw, Guid iid, int dispid, Delegate d) { }
-
-        public static Delegate Remove(object rcw, Guid iid, int dispid, Delegate d) { throw null; }
-    }
-
-    public partial class COMException : Exception
-    {
-        public COMException() { }
-
-        public COMException(string message, Exception inner) { }
-
-        public COMException(string message, int errorCode) { }
-
-        public COMException(string message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class ComImportAttribute : Attribute
-    {
-    }
-
-    public enum ComInterfaceType
-    {
-        InterfaceIsDual = 0,
-        InterfaceIsIUnknown = 1,
-        InterfaceIsIDispatch = 2,
-        InterfaceIsIInspectable = 3
-    }
-
-    public enum ComMemberType
-    {
-        Method = 0,
-        PropGet = 1,
-        PropSet = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = true)]
-    [Obsolete("ComSourceInterfacesAttribute may be unavailable in future releases.")]
-    public sealed partial class ComSourceInterfacesAttribute : Attribute
-    {
-        public ComSourceInterfacesAttribute(string sourceInterfaces) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3, Type sourceInterface4) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface) { }
-
-        public string Value { get { throw null; } }
-    }
-
-    [Obsolete("CurrencyWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class CurrencyWrapper
-    {
-        public CurrencyWrapper(decimal obj) { }
-
-        public CurrencyWrapper(object obj) { }
-
-        public decimal WrappedObject { get { throw null; } }
-    }
-
-    [Obsolete("CustomQueryInterfaceMode and support for ICustomQueryInterface may be unavailable in future releases.")]
-    public enum CustomQueryInterfaceMode
-    {
-        Ignore = 0,
-        Allow = 1
-    }
-
-    [Obsolete("CustomQueryInterfaceResult and support for ICustomQueryInterface may be unavailable in future releases.")]
-    public enum CustomQueryInterfaceResult
-    {
-        Handled = 0,
-        NotHandled = 1,
-        Failed = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Module, Inherited = false)]
-    public sealed partial class DefaultCharSetAttribute : Attribute
-    {
-        public DefaultCharSetAttribute(CharSet charSet) { }
-
-        public CharSet CharSet { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Method, AllowMultiple = false)]
-    public sealed partial class DefaultDllImportSearchPathsAttribute : Attribute
-    {
-        public DefaultDllImportSearchPathsAttribute(DllImportSearchPath paths) { }
-
-        public DllImportSearchPath Paths { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter)]
-    public sealed partial class DefaultParameterValueAttribute : Attribute
-    {
-        public DefaultParameterValueAttribute(object value) { }
-
-        public object Value { get { throw null; } }
-    }
-
-    [Obsolete("DispatchWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class DispatchWrapper
-    {
-        public DispatchWrapper(object obj) { }
-
-        public object WrappedObject { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event, Inherited = false)]
-    public sealed partial class DispIdAttribute : Attribute
-    {
-        public DispIdAttribute(int dispId) { }
-
-        public int Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false)]
-    public sealed partial class DllImportAttribute : Attribute
-    {
-        public bool BestFitMapping;
-        public CallingConvention CallingConvention;
-        public CharSet CharSet;
-        public string EntryPoint;
-        public bool ExactSpelling;
-        public bool PreserveSig;
-        public bool SetLastError;
-        public bool ThrowOnUnmappableChar;
-        public DllImportAttribute(string dllName) { }
-
-        public string Value { get { throw null; } }
-    }
-
-    [Flags]
-    public enum DllImportSearchPath
-    {
-        LegacyBehavior = 0,
-        AssemblyDirectory = 2,
-        UseDllDirectoryForDependencies = 256,
-        ApplicationDirectory = 512,
-        UserDirectories = 1024,
-        System32 = 2048,
-        SafeDirectories = 4096
-    }
-
-    [Obsolete("ErrorWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class ErrorWrapper
-    {
-        public ErrorWrapper(Exception e) { }
-
-        public ErrorWrapper(int errorCode) { }
-
-        public ErrorWrapper(object errorCode) { }
-
-        public int ErrorCode { get { throw null; } }
-    }
-
-    public partial struct GCHandle
-    {
-        public bool IsAllocated { get { throw null; } }
-
-        public object Target { get { throw null; } set { } }
-
-        public IntPtr AddrOfPinnedObject() { throw null; }
-
-        public static GCHandle Alloc(object value, GCHandleType type) { throw null; }
-
-        public static GCHandle Alloc(object value) { throw null; }
-
-        public override bool Equals(object o) { throw null; }
-
-        public void Free() { }
-
-        public static GCHandle FromIntPtr(IntPtr value) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(GCHandle a, GCHandle b) { throw null; }
-
-        public static explicit operator GCHandle(IntPtr value) { throw null; }
-
-        public static explicit operator IntPtr(GCHandle value) { throw null; }
-
-        public static bool operator !=(GCHandle a, GCHandle b) { throw null; }
-
-        public static IntPtr ToIntPtr(GCHandle value) { throw null; }
-    }
-
-    public enum GCHandleType
-    {
-        Weak = 0,
-        WeakTrackResurrection = 1,
-        Normal = 2,
-        Pinned = 3
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)]
-    public sealed partial class GuidAttribute : Attribute
-    {
-        public GuidAttribute(string guid) { }
-
-        public string Value { get { throw null; } }
-    }
-
-    public sealed partial class HandleCollector
-    {
-        public HandleCollector(string name, int initialThreshold, int maximumThreshold) { }
-
-        public HandleCollector(string name, int initialThreshold) { }
-
-        public int Count { get { throw null; } }
-
-        public int InitialThreshold { get { throw null; } }
-
-        public int MaximumThreshold { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public void Add() { }
-
-        public void Remove() { }
-    }
-
-    [Obsolete("ICustomAdapter may be unavailable in future releases.")]
-    public partial interface ICustomAdapter
-    {
-        object GetUnderlyingObject();
-    }
-
-    [Obsolete("ICustomQueryInterface may be unavailable in future releases.")]
-    public partial interface ICustomQueryInterface
-    {
-        CustomQueryInterfaceResult GetInterface(ref Guid iid, out IntPtr ppv);
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class InAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class InterfaceTypeAttribute : Attribute
-    {
-        public InterfaceTypeAttribute(short interfaceType) { }
-
-        public InterfaceTypeAttribute(ComInterfaceType interfaceType) { }
-
-        public ComInterfaceType Value { get { throw null; } }
-    }
-
-    public partial class InvalidComObjectException : Exception
-    {
-        public InvalidComObjectException() { }
-
-        public InvalidComObjectException(string message, Exception inner) { }
-
-        public InvalidComObjectException(string message) { }
-    }
-
-    public partial class InvalidOleVariantTypeException : Exception
-    {
-        public InvalidOleVariantTypeException() { }
-
-        public InvalidOleVariantTypeException(string message, Exception inner) { }
-
-        public InvalidOleVariantTypeException(string message) { }
-    }
-
-    public static partial class Marshal
-    {
-        public static readonly int SystemDefaultCharSize;
-        public static readonly int SystemMaxDBCSCharSize;
-        public static int AddRef(IntPtr pUnk) { throw null; }
-
-        public static IntPtr AllocCoTaskMem(int cb) { throw null; }
-
-        public static IntPtr AllocHGlobal(int cb) { throw null; }
-
-        public static IntPtr AllocHGlobal(IntPtr cb) { throw null; }
-
-        public static bool AreComObjectsAvailableForCleanup() { throw null; }
-
-        public static void Copy(byte[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(char[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(double[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(short[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(int[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(long[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(IntPtr source, byte[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, char[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, double[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, short[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, int[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, long[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, IntPtr[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, float[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(float[] source, int startIndex, IntPtr destination, int length) { }
-
-        [Obsolete("CreateAggregatedObject(IntPtr, Object) may be unavailable in future releases. Instead, use CreateAggregatedObject<T>(IntPtr, T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296518")]
-        public static IntPtr CreateAggregatedObject(IntPtr pOuter, object o) { throw null; }
-
-        public static IntPtr CreateAggregatedObject<T>(IntPtr pOuter, T o) { throw null; }
-
-        [Obsolete("CreateWrapperOfType(Object, Type) may be unavailable in future releases. Instead, use CreateWrapperOfType<T,T2>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296519")]
-        public static object CreateWrapperOfType(object o, Type t) { throw null; }
-
-        public static TWrapper CreateWrapperOfType<T, TWrapper>(T o) { throw null; }
-
-        [Obsolete("DestroyStructure(IntPtr, Type) may be unavailable in future releases. Instead, use DestroyStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296520")]
-        public static void DestroyStructure(IntPtr ptr, Type structuretype) { }
-
-        public static void DestroyStructure<T>(IntPtr ptr) { }
-
-        public static int FinalReleaseComObject(object o) { throw null; }
-
-        public static void FreeBSTR(IntPtr ptr) { }
-
-        public static void FreeCoTaskMem(IntPtr ptr) { }
-
-        public static void FreeHGlobal(IntPtr hglobal) { }
-
-        [Obsolete("GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode) and support for ICustomQueryInterface may be unavailable in future releases.")]
-        public static IntPtr GetComInterfaceForObject(object o, Type T, CustomQueryInterfaceMode mode) { throw null; }
-
-        [Obsolete("GetComInterfaceForObject(Object, Type) may be unavailable in future releases. Instead, use GetComInterfaceForObject<T,T2>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296509")]
-        public static IntPtr GetComInterfaceForObject(object o, Type T) { throw null; }
-
-        public static IntPtr GetComInterfaceForObject<T, TInterface>(T o) { throw null; }
-
-        [Obsolete("GetDelegateForFunctionPointer(IntPtr, Type) may be unavailable in future releases. Instead, use GetDelegateForFunctionPointer<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296521")]
-        public static Delegate GetDelegateForFunctionPointer(IntPtr ptr, Type t) { throw null; }
-
-        public static TDelegate GetDelegateForFunctionPointer<TDelegate>(IntPtr ptr) { throw null; }
-
-        [Obsolete("GetExceptionCode() may be unavailable in future releases.")]
-        public static int GetExceptionCode() { throw null; }
-
-        public static Exception GetExceptionForHR(int errorCode, IntPtr errorInfo) { throw null; }
-
-        public static Exception GetExceptionForHR(int errorCode) { throw null; }
-
-        [Obsolete("GetFunctionPointerForDelegate(Delegate) may be unavailable in future releases. Instead, use GetFunctionPointerForDelegate<T>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296522")]
-        public static IntPtr GetFunctionPointerForDelegate(Delegate d) { throw null; }
-
-        public static IntPtr GetFunctionPointerForDelegate<TDelegate>(TDelegate d) { throw null; }
-
-        public static int GetHRForException(Exception e) { throw null; }
-
-        public static int GetHRForLastWin32Error() { throw null; }
-
-        public static IntPtr GetIUnknownForObject(object o) { throw null; }
-
-        public static int GetLastWin32Error() { throw null; }
-
-        [Obsolete("GetNativeVariantForObject(Object, IntPtr) may be unavailable in future releases.")]
-        public static void GetNativeVariantForObject(object obj, IntPtr pDstNativeVariant) { }
-
-        [Obsolete("GetNativeVariantForObject<T>(T, IntPtr) may be unavailable in future releases.")]
-        public static void GetNativeVariantForObject<T>(T obj, IntPtr pDstNativeVariant) { }
-
-        public static object GetObjectForIUnknown(IntPtr pUnk) { throw null; }
-
-        [Obsolete("GetObjectForNativeVariant(IntPtr) may be unavailable in future releases.")]
-        public static object GetObjectForNativeVariant(IntPtr pSrcNativeVariant) { throw null; }
-
-        [Obsolete("GetObjectForNativeVariant<T>(IntPtr) may be unavailable in future releases.")]
-        public static T GetObjectForNativeVariant<T>(IntPtr pSrcNativeVariant) { throw null; }
-
-        [Obsolete("GetObjectsForNativeVariants(IntPtr, Int32) may be unavailable in future releases.")]
-        public static object[] GetObjectsForNativeVariants(IntPtr aSrcNativeVariant, int cVars) { throw null; }
-
-        [Obsolete("GetObjectsForNativeVariants<T>(IntPtr, Int32) may be unavailable in future releases.")]
-        public static T[] GetObjectsForNativeVariants<T>(IntPtr aSrcNativeVariant, int cVars) { throw null; }
-
-        public static int GetStartComSlot(Type t) { throw null; }
-
-        public static Type GetTypeFromCLSID(Guid clsid) { throw null; }
-
-        public static string GetTypeInfoName(ComTypes.ITypeInfo typeInfo) { throw null; }
-
-        public static object GetUniqueObjectForIUnknown(IntPtr unknown) { throw null; }
-
-        public static bool IsComObject(object o) { throw null; }
-
-        [Obsolete("OffsetOf(Type, string) may be unavailable in future releases. Instead, use OffsetOf<T>(string). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296511")]
-        public static IntPtr OffsetOf(Type t, string fieldName) { throw null; }
-
-        public static IntPtr OffsetOf<T>(string fieldName) { throw null; }
-
-        public static string PtrToStringAnsi(IntPtr ptr, int len) { throw null; }
-
-        public static string PtrToStringAnsi(IntPtr ptr) { throw null; }
-
-        public static string PtrToStringBSTR(IntPtr ptr) { throw null; }
-
-        public static string PtrToStringUni(IntPtr ptr, int len) { throw null; }
-
-        public static string PtrToStringUni(IntPtr ptr) { throw null; }
-
-        [Obsolete("PtrToStructure(IntPtr, Object) may be unavailable in future releases. Instead, use PtrToStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296512")]
-        public static void PtrToStructure(IntPtr ptr, object structure) { }
-
-        [Obsolete("PtrToStructure(IntPtr, Type) may be unavailable in future releases. Instead, use PtrToStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296513")]
-        public static object PtrToStructure(IntPtr ptr, Type structureType) { throw null; }
-
-        public static void PtrToStructure<T>(IntPtr ptr, T structure) { }
-
-        public static T PtrToStructure<T>(IntPtr ptr) { throw null; }
-
-        public static int QueryInterface(IntPtr pUnk, ref Guid iid, out IntPtr ppv) { throw null; }
-
-        public static byte ReadByte(IntPtr ptr, int ofs) { throw null; }
-
-        public static byte ReadByte(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadByte(Object, Int32) may be unavailable in future releases.")]
-        public static byte ReadByte(object ptr, int ofs) { throw null; }
-
-        public static short ReadInt16(IntPtr ptr, int ofs) { throw null; }
-
-        public static short ReadInt16(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadInt16(Object, Int32) may be unavailable in future releases.")]
-        public static short ReadInt16(object ptr, int ofs) { throw null; }
-
-        public static int ReadInt32(IntPtr ptr, int ofs) { throw null; }
-
-        public static int ReadInt32(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadInt32(Object, Int32) may be unavailable in future releases.")]
-        public static int ReadInt32(object ptr, int ofs) { throw null; }
-
-        public static long ReadInt64(IntPtr ptr, int ofs) { throw null; }
-
-        public static long ReadInt64(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadInt64(Object, Int32) may be unavailable in future releases.")]
-        public static long ReadInt64(object ptr, int ofs) { throw null; }
-
-        public static IntPtr ReadIntPtr(IntPtr ptr, int ofs) { throw null; }
-
-        public static IntPtr ReadIntPtr(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadIntPtr(Object, Int32) may be unavailable in future releases.")]
-        public static IntPtr ReadIntPtr(object ptr, int ofs) { throw null; }
-
-        public static IntPtr ReAllocCoTaskMem(IntPtr pv, int cb) { throw null; }
-
-        public static IntPtr ReAllocHGlobal(IntPtr pv, IntPtr cb) { throw null; }
-
-        public static int Release(IntPtr pUnk) { throw null; }
-
-        public static int ReleaseComObject(object o) { throw null; }
-
-        [Obsolete("SizeOf(Object) may be unavailable in future releases. Instead, use SizeOf<T>(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296514")]
-        public static int SizeOf(object structure) { throw null; }
-
-        [Obsolete("SizeOf(Type) may be unavailable in future releases. Instead, use SizeOf<T>(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296515")]
-        public static int SizeOf(Type t) { throw null; }
-
-        public static int SizeOf<T>() { throw null; }
-
-        public static int SizeOf<T>(T structure) { throw null; }
-
-        public static IntPtr StringToBSTR(string s) { throw null; }
-
-        public static IntPtr StringToCoTaskMemAnsi(string s) { throw null; }
-
-        public static IntPtr StringToCoTaskMemUni(string s) { throw null; }
-
-        public static IntPtr StringToHGlobalAnsi(string s) { throw null; }
-
-        public static IntPtr StringToHGlobalUni(string s) { throw null; }
-
-        [Obsolete("StructureToPtr(Object, IntPtr, Boolean) may be unavailable in future releases. Instead, use StructureToPtr<T>(T, IntPtr, Boolean). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296516")]
-        public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld) { }
-
-        public static void StructureToPtr<T>(T structure, IntPtr ptr, bool fDeleteOld) { }
-
-        public static void ThrowExceptionForHR(int errorCode, IntPtr errorInfo) { }
-
-        public static void ThrowExceptionForHR(int errorCode) { }
-
-        [Obsolete("UnsafeAddrOfPinnedArrayElement(Array, Int32) may be unavailable in future releases. Instead, use UnsafeAddrOfPinnedArrayElement<T>(T[], Int32). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296517")]
-        public static IntPtr UnsafeAddrOfPinnedArrayElement(Array arr, int index) { throw null; }
-
-        public static IntPtr UnsafeAddrOfPinnedArrayElement<T>(T[] arr, int index) { throw null; }
-
-        public static void WriteByte(IntPtr ptr, byte val) { }
-
-        public static void WriteByte(IntPtr ptr, int ofs, byte val) { }
-
-        [Obsolete("WriteByte(Object, Int32, Byte) may be unavailable in future releases.")]
-        public static void WriteByte(object ptr, int ofs, byte val) { }
-
-        public static void WriteInt16(IntPtr ptr, char val) { }
-
-        public static void WriteInt16(IntPtr ptr, short val) { }
-
-        public static void WriteInt16(IntPtr ptr, int ofs, char val) { }
-
-        public static void WriteInt16(IntPtr ptr, int ofs, short val) { }
-
-        [Obsolete("WriteInt16(Object, Int32, Char) may be unavailable in future releases.")]
-        public static void WriteInt16(object ptr, int ofs, char val) { }
-
-        [Obsolete("WriteInt16(Object, Int32, Int16) may be unavailable in future releases.")]
-        public static void WriteInt16(object ptr, int ofs, short val) { }
-
-        public static void WriteInt32(IntPtr ptr, int ofs, int val) { }
-
-        public static void WriteInt32(IntPtr ptr, int val) { }
-
-        [Obsolete("WriteInt32(Object, Int32, Int32) may be unavailable in future releases.")]
-        public static void WriteInt32(object ptr, int ofs, int val) { }
-
-        public static void WriteInt64(IntPtr ptr, int ofs, long val) { }
-
-        public static void WriteInt64(IntPtr ptr, long val) { }
-
-        [Obsolete("WriteInt64(Object, Int32, Int64) may be unavailable in future releases.")]
-        public static void WriteInt64(object ptr, int ofs, long val) { }
-
-        public static void WriteIntPtr(IntPtr ptr, int ofs, IntPtr val) { }
-
-        public static void WriteIntPtr(IntPtr ptr, IntPtr val) { }
-
-        [Obsolete("WriteIntPtr(Object, Int32, IntPtr) may be unavailable in future releases.")]
-        public static void WriteIntPtr(object ptr, int ofs, IntPtr val) { }
-
-        public static void ZeroFreeBSTR(IntPtr s) { }
-
-        public static void ZeroFreeCoTaskMemAnsi(IntPtr s) { }
-
-        public static void ZeroFreeCoTaskMemUnicode(IntPtr s) { }
-
-        public static void ZeroFreeGlobalAllocAnsi(IntPtr s) { }
-
-        public static void ZeroFreeGlobalAllocUnicode(IntPtr s) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.ReturnValue, Inherited = false)]
-    public sealed partial class MarshalAsAttribute : Attribute
-    {
-        public UnmanagedType ArraySubType;
-        public int IidParameterIndex;
-        public string MarshalCookie;
-        public string MarshalType;
-        public Type MarshalTypeRef;
-        public VarEnum SafeArraySubType;
-        public Type SafeArrayUserDefinedSubType;
-        public int SizeConst;
-        public short SizeParamIndex;
-        public MarshalAsAttribute(short unmanagedType) { }
-
-        public MarshalAsAttribute(UnmanagedType unmanagedType) { }
-
-        public UnmanagedType Value { get { throw null; } }
-    }
-
-    public partial class MarshalDirectiveException : Exception
-    {
-        public MarshalDirectiveException() { }
-
-        public MarshalDirectiveException(string message, Exception inner) { }
-
-        public MarshalDirectiveException(string message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class OptionalAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false)]
-    public sealed partial class PreserveSigAttribute : Attribute
-    {
-    }
-
-    public partial class SafeArrayRankMismatchException : Exception
-    {
-        public SafeArrayRankMismatchException() { }
-
-        public SafeArrayRankMismatchException(string message, Exception inner) { }
-
-        public SafeArrayRankMismatchException(string message) { }
-    }
-
-    public partial class SafeArrayTypeMismatchException : Exception
-    {
-        public SafeArrayTypeMismatchException() { }
-
-        public SafeArrayTypeMismatchException(string message, Exception inner) { }
-
-        public SafeArrayTypeMismatchException(string message) { }
-    }
-
-    public abstract partial class SafeBuffer : SafeHandle
-    {
-        protected SafeBuffer(bool ownsHandle) : base(default, default) { }
-
-        [CLSCompliant(false)]
-        public ulong ByteLength { get { throw null; } }
-
-        public override bool IsInvalid { get { throw null; } }
-
-        [CLSCompliant(false)]
-        public unsafe void AcquirePointer(ref byte* pointer) { }
-
-        [CLSCompliant(false)]
-        public void Initialize(uint numElements, uint sizeOfEachElement) { }
-
-        [CLSCompliant(false)]
-        public void Initialize(ulong numBytes) { }
-
-        [CLSCompliant(false)]
-        public void Initialize<T>(uint numElements)
-            where T : struct { }
-
-        [CLSCompliant(false)]
-        public T Read<T>(ulong byteOffset)
-            where T : struct { throw null; }
-
-        [CLSCompliant(false)]
-        public void ReadArray<T>(ulong byteOffset, T[] array, int index, int count)
-            where T : struct { }
-
-        public void ReleasePointer() { }
-
-        [CLSCompliant(false)]
-        public void Write<T>(ulong byteOffset, T value)
-            where T : struct { }
-
-        [CLSCompliant(false)]
-        public void WriteArray<T>(ulong byteOffset, T[] array, int index, int count)
-            where T : struct { }
-    }
-
-    public partial class SEHException : Exception
-    {
-        public SEHException() { }
-
-        public SEHException(string message, Exception inner) { }
-
-        public SEHException(string message) { }
-
-        public virtual bool CanResume() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class TypeIdentifierAttribute : Attribute
-    {
-        public TypeIdentifierAttribute() { }
-
-        public TypeIdentifierAttribute(string scope, string identifier) { }
-
-        public string Identifier { get { throw null; } }
-
-        public string Scope { get { throw null; } }
-    }
-
-    [Obsolete("UnknownWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class UnknownWrapper
-    {
-        public UnknownWrapper(object obj) { }
-
-        public object WrappedObject { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class UnmanagedFunctionPointerAttribute : Attribute
-    {
-        public bool BestFitMapping;
-        public CharSet CharSet;
-        public bool SetLastError;
-        public bool ThrowOnUnmappableChar;
-        public UnmanagedFunctionPointerAttribute(CallingConvention callingConvention) { }
-
-        public CallingConvention CallingConvention { get { throw null; } }
-    }
-
-    public enum UnmanagedType
-    {
-        Bool = 2,
-        I1 = 3,
-        U1 = 4,
-        I2 = 5,
-        U2 = 6,
-        I4 = 7,
-        U4 = 8,
-        I8 = 9,
-        U8 = 10,
-        R4 = 11,
-        R8 = 12,
-        Currency = 15,
-        BStr = 19,
-        LPStr = 20,
-        LPWStr = 21,
-        LPTStr = 22,
-        ByValTStr = 23,
-        IUnknown = 25,
-        IDispatch = 26,
-        Struct = 27,
-        Interface = 28,
-        SafeArray = 29,
-        ByValArray = 30,
-        SysInt = 31,
-        SysUInt = 32,
-        VBByRefStr = 34,
-        AnsiBStr = 35,
-        TBStr = 36,
-        VariantBool = 37,
-        FunctionPtr = 38,
-        AsAny = 40,
-        LPArray = 42,
-        LPStruct = 43,
-        Error = 45,
-        IInspectable = 46,
-        HString = 47
-    }
-
-    [Obsolete("Marshalling VARIANTs may be unavailable in future releases.")]
-    public enum VarEnum
-    {
-        VT_EMPTY = 0,
-        VT_NULL = 1,
-        VT_I2 = 2,
-        VT_I4 = 3,
-        VT_R4 = 4,
-        VT_R8 = 5,
-        VT_CY = 6,
-        VT_DATE = 7,
-        VT_BSTR = 8,
-        VT_DISPATCH = 9,
-        VT_ERROR = 10,
-        VT_BOOL = 11,
-        VT_VARIANT = 12,
-        VT_UNKNOWN = 13,
-        VT_DECIMAL = 14,
-        VT_I1 = 16,
-        VT_UI1 = 17,
-        VT_UI2 = 18,
-        VT_UI4 = 19,
-        VT_I8 = 20,
-        VT_UI8 = 21,
-        VT_INT = 22,
-        VT_UINT = 23,
-        VT_VOID = 24,
-        VT_HRESULT = 25,
-        VT_PTR = 26,
-        VT_SAFEARRAY = 27,
-        VT_CARRAY = 28,
-        VT_USERDEFINED = 29,
-        VT_LPSTR = 30,
-        VT_LPWSTR = 31,
-        VT_RECORD = 36,
-        VT_FILETIME = 64,
-        VT_BLOB = 65,
-        VT_STREAM = 66,
-        VT_STORAGE = 67,
-        VT_STREAMED_OBJECT = 68,
-        VT_STORED_OBJECT = 69,
-        VT_BLOB_OBJECT = 70,
-        VT_CF = 71,
-        VT_CLSID = 72,
-        VT_VECTOR = 4096,
-        VT_ARRAY = 8192,
-        VT_BYREF = 16384
-    }
-
-    [Obsolete("VariantWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class VariantWrapper
-    {
-        public VariantWrapper(object obj) { }
-
-        public object WrappedObject { get { throw null; } }
-    }
-}
-
-namespace System.Runtime.InteropServices.ComTypes
-{
-    [Flags]
-    public enum ADVF
-    {
-        ADVF_NODATA = 1,
-        ADVF_PRIMEFIRST = 2,
-        ADVF_ONLYONCE = 4,
-        ADVFCACHE_NOHANDLER = 8,
-        ADVFCACHE_FORCEBUILTIN = 16,
-        ADVFCACHE_ONSAVE = 32,
-        ADVF_DATAONSTOP = 64
-    }
-
-    public partial struct BINDPTR
-    {
-        public IntPtr lpfuncdesc;
-        public IntPtr lptcomp;
-        public IntPtr lpvardesc;
-    }
-
-    public partial struct BIND_OPTS
-    {
-        public int cbStruct;
-        public int dwTickCountDeadline;
-        public int grfFlags;
-        public int grfMode;
-    }
-
-    public enum CALLCONV
-    {
-        CC_CDECL = 1,
-        CC_MSCPASCAL = 2,
-        CC_PASCAL = 2,
-        CC_MACPASCAL = 3,
-        CC_STDCALL = 4,
-        CC_RESERVED = 5,
-        CC_SYSCALL = 6,
-        CC_MPWCDECL = 7,
-        CC_MPWPASCAL = 8,
-        CC_MAX = 9
-    }
-
-    public partial struct CONNECTDATA
-    {
-        public int dwCookie;
-        public object pUnk;
-    }
-
-    public enum DATADIR
-    {
-        DATADIR_GET = 1,
-        DATADIR_SET = 2
-    }
-
-    public enum DESCKIND
-    {
-        DESCKIND_NONE = 0,
-        DESCKIND_FUNCDESC = 1,
-        DESCKIND_VARDESC = 2,
-        DESCKIND_TYPECOMP = 3,
-        DESCKIND_IMPLICITAPPOBJ = 4,
-        DESCKIND_MAX = 5
-    }
-
-    public partial struct DISPPARAMS
-    {
-        public int cArgs;
-        public int cNamedArgs;
-        public IntPtr rgdispidNamedArgs;
-        public IntPtr rgvarg;
-    }
-
-    [Flags]
-    public enum DVASPECT
-    {
-        DVASPECT_CONTENT = 1,
-        DVASPECT_THUMBNAIL = 2,
-        DVASPECT_ICON = 4,
-        DVASPECT_DOCPRINT = 8
-    }
-
-    public partial struct ELEMDESC
-    {
-        public DESCUNION desc;
-        public TYPEDESC tdesc;
-        public partial struct DESCUNION
-        {
-            public IDLDESC idldesc;
-            public PARAMDESC paramdesc;
-        }
-    }
-
-    public partial struct EXCEPINFO
-    {
-        public string bstrDescription;
-        public string bstrHelpFile;
-        public string bstrSource;
-        public int dwHelpContext;
-        public IntPtr pfnDeferredFillIn;
-        public IntPtr pvReserved;
-        public int scode;
-        public short wCode;
-        public short wReserved;
-    }
-
-    public partial struct FILETIME
-    {
-        public int dwHighDateTime;
-        public int dwLowDateTime;
-    }
-
-    public partial struct FORMATETC
-    {
-        public short cfFormat;
-        public DVASPECT dwAspect;
-        public int lindex;
-        public IntPtr ptd;
-        public TYMED tymed;
-    }
-
-    public partial struct FUNCDESC
-    {
-        public CALLCONV callconv;
-        public short cParams;
-        public short cParamsOpt;
-        public short cScodes;
-        public ELEMDESC elemdescFunc;
-        public FUNCKIND funckind;
-        public INVOKEKIND invkind;
-        public IntPtr lprgelemdescParam;
-        public IntPtr lprgscode;
-        public int memid;
-        public short oVft;
-        public short wFuncFlags;
-    }
-
-    [Flags]
-    public enum FUNCFLAGS : short
-    {
-        FUNCFLAG_FRESTRICTED = 1,
-        FUNCFLAG_FSOURCE = 2,
-        FUNCFLAG_FBINDABLE = 4,
-        FUNCFLAG_FREQUESTEDIT = 8,
-        FUNCFLAG_FDISPLAYBIND = 16,
-        FUNCFLAG_FDEFAULTBIND = 32,
-        FUNCFLAG_FHIDDEN = 64,
-        FUNCFLAG_FUSESGETLASTERROR = 128,
-        FUNCFLAG_FDEFAULTCOLLELEM = 256,
-        FUNCFLAG_FUIDEFAULT = 512,
-        FUNCFLAG_FNONBROWSABLE = 1024,
-        FUNCFLAG_FREPLACEABLE = 2048,
-        FUNCFLAG_FIMMEDIATEBIND = 4096
-    }
-
-    public enum FUNCKIND
-    {
-        FUNC_VIRTUAL = 0,
-        FUNC_PUREVIRTUAL = 1,
-        FUNC_NONVIRTUAL = 2,
-        FUNC_STATIC = 3,
-        FUNC_DISPATCH = 4
-    }
-
-    public partial interface IAdviseSink
-    {
-        void OnClose();
-        void OnDataChange(ref FORMATETC format, ref STGMEDIUM stgmedium);
-        void OnRename(IMoniker moniker);
-        void OnSave();
-        void OnViewChange(int aspect, int index);
-    }
-
-    public partial interface IBindCtx
-    {
-        void EnumObjectParam(out IEnumString ppenum);
-        void GetBindOptions(ref BIND_OPTS pbindopts);
-        void GetObjectParam(string pszKey, out object ppunk);
-        void GetRunningObjectTable(out IRunningObjectTable pprot);
-        void RegisterObjectBound(object punk);
-        void RegisterObjectParam(string pszKey, object punk);
-        void ReleaseBoundObjects();
-        void RevokeObjectBound(object punk);
-        int RevokeObjectParam(string pszKey);
-        void SetBindOptions(ref BIND_OPTS pbindopts);
-    }
-
-    public partial interface IConnectionPoint
-    {
-        void Advise(object pUnkSink, out int pdwCookie);
-        void EnumConnections(out IEnumConnections ppEnum);
-        void GetConnectionInterface(out Guid pIID);
-        void GetConnectionPointContainer(out IConnectionPointContainer ppCPC);
-        void Unadvise(int dwCookie);
-    }
-
-    public partial interface IConnectionPointContainer
-    {
-        void EnumConnectionPoints(out IEnumConnectionPoints ppEnum);
-        void FindConnectionPoint(ref Guid riid, out IConnectionPoint ppCP);
-    }
-
-    public partial struct IDLDESC
-    {
-        public IntPtr dwReserved;
-        public IDLFLAG wIDLFlags;
-    }
-
-    [Flags]
-    public enum IDLFLAG : short
-    {
-        IDLFLAG_NONE = 0,
-        IDLFLAG_FIN = 1,
-        IDLFLAG_FOUT = 2,
-        IDLFLAG_FLCID = 4,
-        IDLFLAG_FRETVAL = 8
-    }
-
-    public partial interface IEnumConnectionPoints
-    {
-        void Clone(out IEnumConnectionPoints ppenum);
-        int Next(int celt, IConnectionPoint[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumConnections
-    {
-        void Clone(out IEnumConnections ppenum);
-        int Next(int celt, CONNECTDATA[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumFORMATETC
-    {
-        void Clone(out IEnumFORMATETC newEnum);
-        int Next(int celt, FORMATETC[] rgelt, int[] pceltFetched);
-        int Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumMoniker
-    {
-        void Clone(out IEnumMoniker ppenum);
-        int Next(int celt, IMoniker[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumString
-    {
-        void Clone(out IEnumString ppenum);
-        int Next(int celt, string[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumVARIANT
-    {
-        IEnumVARIANT Clone();
-        int Next(int celt, object[] rgVar, IntPtr pceltFetched);
-        int Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IMoniker
-    {
-        void BindToObject(IBindCtx pbc, IMoniker pmkToLeft, ref Guid riidResult, out object ppvResult);
-        void BindToStorage(IBindCtx pbc, IMoniker pmkToLeft, ref Guid riid, out object ppvObj);
-        void CommonPrefixWith(IMoniker pmkOther, out IMoniker ppmkPrefix);
-        void ComposeWith(IMoniker pmkRight, bool fOnlyIfNotGeneric, out IMoniker ppmkComposite);
-        void Enum(bool fForward, out IEnumMoniker ppenumMoniker);
-        void GetClassID(out Guid pClassID);
-        void GetDisplayName(IBindCtx pbc, IMoniker pmkToLeft, out string ppszDisplayName);
-        void GetSizeMax(out long pcbSize);
-        void GetTimeOfLastChange(IBindCtx pbc, IMoniker pmkToLeft, out FILETIME pFileTime);
-        void Hash(out int pdwHash);
-        void Inverse(out IMoniker ppmk);
-        int IsDirty();
-        int IsEqual(IMoniker pmkOtherMoniker);
-        int IsRunning(IBindCtx pbc, IMoniker pmkToLeft, IMoniker pmkNewlyRunning);
-        int IsSystemMoniker(out int pdwMksys);
-        void Load(IStream pStm);
-        void ParseDisplayName(IBindCtx pbc, IMoniker pmkToLeft, string pszDisplayName, out int pchEaten, out IMoniker ppmkOut);
-        void Reduce(IBindCtx pbc, int dwReduceHowFar, ref IMoniker ppmkToLeft, out IMoniker ppmkReduced);
-        void RelativePathTo(IMoniker pmkOther, out IMoniker ppmkRelPath);
-        void Save(IStream pStm, bool fClearDirty);
-    }
-
-    [Flags]
-    public enum IMPLTYPEFLAGS
-    {
-        IMPLTYPEFLAG_FDEFAULT = 1,
-        IMPLTYPEFLAG_FSOURCE = 2,
-        IMPLTYPEFLAG_FRESTRICTED = 4,
-        IMPLTYPEFLAG_FDEFAULTVTABLE = 8
-    }
-
-    [Flags]
-    public enum INVOKEKIND
-    {
-        INVOKE_FUNC = 1,
-        INVOKE_PROPERTYGET = 2,
-        INVOKE_PROPERTYPUT = 4,
-        INVOKE_PROPERTYPUTREF = 8
-    }
-
-    public partial interface IPersistFile
-    {
-        void GetClassID(out Guid pClassID);
-        void GetCurFile(out string ppszFileName);
-        int IsDirty();
-        void Load(string pszFileName, int dwMode);
-        void Save(string pszFileName, bool fRemember);
-        void SaveCompleted(string pszFileName);
-    }
-
-    public partial interface IRunningObjectTable
-    {
-        void EnumRunning(out IEnumMoniker ppenumMoniker);
-        int GetObject(IMoniker pmkObjectName, out object ppunkObject);
-        int GetTimeOfLastChange(IMoniker pmkObjectName, out FILETIME pfiletime);
-        int IsRunning(IMoniker pmkObjectName);
-        void NoteChangeTime(int dwRegister, ref FILETIME pfiletime);
-        int Register(int grfFlags, object punkObject, IMoniker pmkObjectName);
-        void Revoke(int dwRegister);
-    }
-
-    public partial interface IStream
-    {
-        void Clone(out IStream ppstm);
-        void Commit(int grfCommitFlags);
-        void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);
-        void LockRegion(long libOffset, long cb, int dwLockType);
-        void Read(byte[] pv, int cb, IntPtr pcbRead);
-        void Revert();
-        void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition);
-        void SetSize(long libNewSize);
-        void Stat(out STATSTG pstatstg, int grfStatFlag);
-        void UnlockRegion(long libOffset, long cb, int dwLockType);
-        void Write(byte[] pv, int cb, IntPtr pcbWritten);
-    }
-
-    public partial interface ITypeComp
-    {
-        void Bind(string szName, int lHashVal, short wFlags, out ITypeInfo ppTInfo, out DESCKIND pDescKind, out BINDPTR pBindPtr);
-        void BindType(string szName, int lHashVal, out ITypeInfo ppTInfo, out ITypeComp ppTComp);
-    }
-
-    public partial interface ITypeInfo
-    {
-        void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv);
-        void CreateInstance(object pUnkOuter, ref Guid riid, out object ppvObj);
-        void GetContainingTypeLib(out ITypeLib ppTLB, out int pIndex);
-        void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetFuncDesc(int index, out IntPtr ppFuncDesc);
-        void GetIDsOfNames(string[] rgszNames, int cNames, int[] pMemId);
-        void GetImplTypeFlags(int index, out IMPLTYPEFLAGS pImplTypeFlags);
-        void GetMops(int memid, out string pBstrMops);
-        void GetNames(int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);
-        void GetRefTypeInfo(int hRef, out ITypeInfo ppTI);
-        void GetRefTypeOfImplType(int index, out int href);
-        void GetTypeAttr(out IntPtr ppTypeAttr);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetVarDesc(int index, out IntPtr ppVarDesc);
-        void Invoke(object pvInstance, int memid, short wFlags, ref DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr);
-        void ReleaseFuncDesc(IntPtr pFuncDesc);
-        void ReleaseTypeAttr(IntPtr pTypeAttr);
-        void ReleaseVarDesc(IntPtr pVarDesc);
-    }
-
-    public partial interface ITypeInfo2 : ITypeInfo
-    {
-        void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv);
-        void CreateInstance(object pUnkOuter, ref Guid riid, out object ppvObj);
-        void GetAllCustData(IntPtr pCustData);
-        void GetAllFuncCustData(int index, IntPtr pCustData);
-        void GetAllImplTypeCustData(int index, IntPtr pCustData);
-        void GetAllParamCustData(int indexFunc, int indexParam, IntPtr pCustData);
-        void GetAllVarCustData(int index, IntPtr pCustData);
-        void GetContainingTypeLib(out ITypeLib ppTLB, out int pIndex);
-        void GetCustData(ref Guid guid, out object pVarVal);
-        void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetDocumentation2(int memid, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll);
-        void GetFuncCustData(int index, ref Guid guid, out object pVarVal);
-        void GetFuncDesc(int index, out IntPtr ppFuncDesc);
-        void GetFuncIndexOfMemId(int memid, INVOKEKIND invKind, out int pFuncIndex);
-        void GetIDsOfNames(string[] rgszNames, int cNames, int[] pMemId);
-        void GetImplTypeCustData(int index, ref Guid guid, out object pVarVal);
-        void GetImplTypeFlags(int index, out IMPLTYPEFLAGS pImplTypeFlags);
-        void GetMops(int memid, out string pBstrMops);
-        void GetNames(int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);
-        void GetParamCustData(int indexFunc, int indexParam, ref Guid guid, out object pVarVal);
-        void GetRefTypeInfo(int hRef, out ITypeInfo ppTI);
-        void GetRefTypeOfImplType(int index, out int href);
-        void GetTypeAttr(out IntPtr ppTypeAttr);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetTypeFlags(out int pTypeFlags);
-        void GetTypeKind(out TYPEKIND pTypeKind);
-        void GetVarCustData(int index, ref Guid guid, out object pVarVal);
-        void GetVarDesc(int index, out IntPtr ppVarDesc);
-        void GetVarIndexOfMemId(int memid, out int pVarIndex);
-        void Invoke(object pvInstance, int memid, short wFlags, ref DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr);
-        void ReleaseFuncDesc(IntPtr pFuncDesc);
-        void ReleaseTypeAttr(IntPtr pTypeAttr);
-        void ReleaseVarDesc(IntPtr pVarDesc);
-    }
-
-    public partial interface ITypeLib
-    {
-        void FindName(string szNameBuf, int lHashVal, ITypeInfo[] ppTInfo, int[] rgMemId, ref short pcFound);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetLibAttr(out IntPtr ppTLibAttr);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetTypeInfo(int index, out ITypeInfo ppTI);
-        int GetTypeInfoCount();
-        void GetTypeInfoOfGuid(ref Guid guid, out ITypeInfo ppTInfo);
-        void GetTypeInfoType(int index, out TYPEKIND pTKind);
-        bool IsName(string szNameBuf, int lHashVal);
-        void ReleaseTLibAttr(IntPtr pTLibAttr);
-    }
-
-    public partial interface ITypeLib2 : ITypeLib
-    {
-        void FindName(string szNameBuf, int lHashVal, ITypeInfo[] ppTInfo, int[] rgMemId, ref short pcFound);
-        void GetAllCustData(IntPtr pCustData);
-        void GetCustData(ref Guid guid, out object pVarVal);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetDocumentation2(int index, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll);
-        void GetLibAttr(out IntPtr ppTLibAttr);
-        void GetLibStatistics(IntPtr pcUniqueNames, out int pcchUniqueNames);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetTypeInfo(int index, out ITypeInfo ppTI);
-        int GetTypeInfoCount();
-        void GetTypeInfoOfGuid(ref Guid guid, out ITypeInfo ppTInfo);
-        void GetTypeInfoType(int index, out TYPEKIND pTKind);
-        bool IsName(string szNameBuf, int lHashVal);
-        void ReleaseTLibAttr(IntPtr pTLibAttr);
-    }
-
-    [Flags]
-    public enum LIBFLAGS : short
-    {
-        LIBFLAG_FRESTRICTED = 1,
-        LIBFLAG_FCONTROL = 2,
-        LIBFLAG_FHIDDEN = 4,
-        LIBFLAG_FHASDISKIMAGE = 8
-    }
-
-    public partial struct PARAMDESC
-    {
-        public IntPtr lpVarValue;
-        public PARAMFLAG wParamFlags;
-    }
-
-    [Flags]
-    public enum PARAMFLAG : short
-    {
-        PARAMFLAG_NONE = 0,
-        PARAMFLAG_FIN = 1,
-        PARAMFLAG_FOUT = 2,
-        PARAMFLAG_FLCID = 4,
-        PARAMFLAG_FRETVAL = 8,
-        PARAMFLAG_FOPT = 16,
-        PARAMFLAG_FHASDEFAULT = 32,
-        PARAMFLAG_FHASCUSTDATA = 64
-    }
-
-    public partial struct STATDATA
-    {
-        public ADVF advf;
-        public IAdviseSink advSink;
-        public int connection;
-        public FORMATETC formatetc;
-    }
-
-    public partial struct STATSTG
-    {
-        public FILETIME atime;
-        public long cbSize;
-        public Guid clsid;
-        public FILETIME ctime;
-        public int grfLocksSupported;
-        public int grfMode;
-        public int grfStateBits;
-        public FILETIME mtime;
-        public string pwcsName;
-        public int reserved;
-        public int type;
-    }
-
-    public partial struct STGMEDIUM
-    {
-        public object pUnkForRelease;
-        public TYMED tymed;
-        public IntPtr unionmember;
-    }
-
-    public enum SYSKIND
-    {
-        SYS_WIN16 = 0,
-        SYS_WIN32 = 1,
-        SYS_MAC = 2,
-        SYS_WIN64 = 3
-    }
-
-    [Flags]
-    public enum TYMED
-    {
-        TYMED_NULL = 0,
-        TYMED_HGLOBAL = 1,
-        TYMED_FILE = 2,
-        TYMED_ISTREAM = 4,
-        TYMED_ISTORAGE = 8,
-        TYMED_GDI = 16,
-        TYMED_MFPICT = 32,
-        TYMED_ENHMF = 64
-    }
-
-    public partial struct TYPEATTR
-    {
-        public short cbAlignment;
-        public int cbSizeInstance;
-        public short cbSizeVft;
-        public short cFuncs;
-        public short cImplTypes;
-        public short cVars;
-        public int dwReserved;
-        public Guid guid;
-        public IDLDESC idldescType;
-        public int lcid;
-        public IntPtr lpstrSchema;
-        public const int MEMBER_ID_NIL = -1;
-        public int memidConstructor;
-        public int memidDestructor;
-        public TYPEDESC tdescAlias;
-        public TYPEKIND typekind;
-        public short wMajorVerNum;
-        public short wMinorVerNum;
-        public TYPEFLAGS wTypeFlags;
-    }
-
-    public partial struct TYPEDESC
-    {
-        public IntPtr lpValue;
-        public short vt;
-    }
-
-    [Flags]
-    public enum TYPEFLAGS : short
-    {
-        TYPEFLAG_FAPPOBJECT = 1,
-        TYPEFLAG_FCANCREATE = 2,
-        TYPEFLAG_FLICENSED = 4,
-        TYPEFLAG_FPREDECLID = 8,
-        TYPEFLAG_FHIDDEN = 16,
-        TYPEFLAG_FCONTROL = 32,
-        TYPEFLAG_FDUAL = 64,
-        TYPEFLAG_FNONEXTENSIBLE = 128,
-        TYPEFLAG_FOLEAUTOMATION = 256,
-        TYPEFLAG_FRESTRICTED = 512,
-        TYPEFLAG_FAGGREGATABLE = 1024,
-        TYPEFLAG_FREPLACEABLE = 2048,
-        TYPEFLAG_FDISPATCHABLE = 4096,
-        TYPEFLAG_FREVERSEBIND = 8192,
-        TYPEFLAG_FPROXY = 16384
-    }
-
-    public enum TYPEKIND
-    {
-        TKIND_ENUM = 0,
-        TKIND_RECORD = 1,
-        TKIND_MODULE = 2,
-        TKIND_INTERFACE = 3,
-        TKIND_DISPATCH = 4,
-        TKIND_COCLASS = 5,
-        TKIND_ALIAS = 6,
-        TKIND_UNION = 7,
-        TKIND_MAX = 8
-    }
-
-    public partial struct TYPELIBATTR
-    {
-        public Guid guid;
-        public int lcid;
-        public SYSKIND syskind;
-        public LIBFLAGS wLibFlags;
-        public short wMajorVerNum;
-        public short wMinorVerNum;
-    }
-
-    public partial struct VARDESC
-    {
-        public DESCUNION desc;
-        public ELEMDESC elemdescVar;
-        public string lpstrSchema;
-        public int memid;
-        public VARKIND varkind;
-        public short wVarFlags;
-        public partial struct DESCUNION
-        {
-            public IntPtr lpvarValue;
-            public int oInst;
-        }
-    }
-
-    [Flags]
-    public enum VARFLAGS : short
-    {
-        VARFLAG_FREADONLY = 1,
-        VARFLAG_FSOURCE = 2,
-        VARFLAG_FBINDABLE = 4,
-        VARFLAG_FREQUESTEDIT = 8,
-        VARFLAG_FDISPLAYBIND = 16,
-        VARFLAG_FDEFAULTBIND = 32,
-        VARFLAG_FHIDDEN = 64,
-        VARFLAG_FRESTRICTED = 128,
-        VARFLAG_FDEFAULTCOLLELEM = 256,
-        VARFLAG_FUIDEFAULT = 512,
-        VARFLAG_FNONBROWSABLE = 1024,
-        VARFLAG_FREPLACEABLE = 2048,
-        VARFLAG_FIMMEDIATEBIND = 4096
-    }
-
-    public enum VARKIND
-    {
-        VAR_PERINSTANCE = 0,
-        VAR_STATIC = 1,
-        VAR_CONST = 2,
-        VAR_DISPATCH = 3
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.5/System.Runtime.InteropServices.cs b/src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.5/System.Runtime.InteropServices.cs
deleted file mode 100644
index 23f0dca3..00000000
--- a/src/referencePackages/src/system.runtime.interopservices/4.3.0/ref/netstandard1.5/System.Runtime.InteropServices.cs
+++ /dev/null
@@ -1,1599 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Runtime.InteropServices")]
-[assembly: System.Reflection.AssemblyDescription("System.Runtime.InteropServices")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Runtime.InteropServices")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-[assembly: System.Runtime.CompilerServices.TypeForwardedTo(typeof(System.Runtime.InteropServices.CriticalHandle))]
-[assembly: System.Runtime.CompilerServices.TypeForwardedTo(typeof(System.Runtime.InteropServices.SafeHandle))]
-namespace System
-{
-    public sealed partial class DataMisalignedException : Exception
-    {
-        public DataMisalignedException() { }
-
-        public DataMisalignedException(string message, Exception innerException) { }
-
-        public DataMisalignedException(string message) { }
-    }
-
-    public partial class DllNotFoundException : TypeLoadException
-    {
-        public DllNotFoundException() { }
-
-        public DllNotFoundException(string message, Exception inner) { }
-
-        public DllNotFoundException(string message) { }
-    }
-}
-
-namespace System.Reflection
-{
-    public sealed partial class Missing
-    {
-        internal Missing() { }
-
-        public static readonly Missing Value;
-    }
-}
-
-namespace System.Runtime.InteropServices
-{
-    public partial struct ArrayWithOffset
-    {
-        public ArrayWithOffset(object array, int offset) { }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(ArrayWithOffset obj) { throw null; }
-
-        public object GetArray() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public int GetOffset() { throw null; }
-
-        public static bool operator ==(ArrayWithOffset a, ArrayWithOffset b) { throw null; }
-
-        public static bool operator !=(ArrayWithOffset a, ArrayWithOffset b) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class BestFitMappingAttribute : Attribute
-    {
-        public bool ThrowOnUnmappableChar;
-        public BestFitMappingAttribute(bool BestFitMapping) { }
-
-        public bool BestFitMapping { get { throw null; } }
-    }
-
-    [Obsolete("BStrWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class BStrWrapper
-    {
-        public BStrWrapper(object value) { }
-
-        public BStrWrapper(string value) { }
-
-        public string WrappedObject { get { throw null; } }
-    }
-
-    public enum CallingConvention
-    {
-        Winapi = 1,
-        Cdecl = 2,
-        StdCall = 3,
-        ThisCall = 4
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, Inherited = false)]
-    public sealed partial class ClassInterfaceAttribute : Attribute
-    {
-        public ClassInterfaceAttribute(short classInterfaceType) { }
-
-        public ClassInterfaceAttribute(ClassInterfaceType classInterfaceType) { }
-
-        public ClassInterfaceType Value { get { throw null; } }
-    }
-
-    public enum ClassInterfaceType
-    {
-        None = 0,
-        AutoDispatch = 1,
-        AutoDual = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class CoClassAttribute : Attribute
-    {
-        public CoClassAttribute(Type coClass) { }
-
-        public Type CoClass { get { throw null; } }
-    }
-
-    [Obsolete("ComAwareEventInfo may be unavailable in future releases.")]
-    public partial class ComAwareEventInfo : Reflection.EventInfo
-    {
-        public ComAwareEventInfo(Type type, string eventName) { }
-
-        public override Reflection.EventAttributes Attributes { get { throw null; } }
-
-        public override Type DeclaringType { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override void AddEventHandler(object target, Delegate handler) { }
-
-        public override void RemoveEventHandler(object target, Delegate handler) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = false)]
-    public sealed partial class ComDefaultInterfaceAttribute : Attribute
-    {
-        public ComDefaultInterfaceAttribute(Type defaultInterface) { }
-
-        public Type Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Interface, Inherited = false)]
-    [Obsolete("ComEventInterfaceAttribute may be unavailable in future releases.")]
-    public sealed partial class ComEventInterfaceAttribute : Attribute
-    {
-        public ComEventInterfaceAttribute(Type SourceInterface, Type EventProvider) { }
-
-        public Type EventProvider { get { throw null; } }
-
-        public Type SourceInterface { get { throw null; } }
-    }
-
-    [Obsolete("ComEventsHelper may be unavailable in future releases.")]
-    public static partial class ComEventsHelper
-    {
-        public static void Combine(object rcw, Guid iid, int dispid, Delegate d) { }
-
-        public static Delegate Remove(object rcw, Guid iid, int dispid, Delegate d) { throw null; }
-    }
-
-    public partial class COMException : Exception
-    {
-        public COMException() { }
-
-        public COMException(string message, Exception inner) { }
-
-        public COMException(string message, int errorCode) { }
-
-        public COMException(string message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class ComImportAttribute : Attribute
-    {
-    }
-
-    public enum ComInterfaceType
-    {
-        InterfaceIsDual = 0,
-        InterfaceIsIUnknown = 1,
-        InterfaceIsIDispatch = 2,
-        InterfaceIsIInspectable = 3
-    }
-
-    public enum ComMemberType
-    {
-        Method = 0,
-        PropGet = 1,
-        PropSet = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = true)]
-    [Obsolete("ComSourceInterfacesAttribute may be unavailable in future releases.")]
-    public sealed partial class ComSourceInterfacesAttribute : Attribute
-    {
-        public ComSourceInterfacesAttribute(string sourceInterfaces) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3, Type sourceInterface4) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2) { }
-
-        public ComSourceInterfacesAttribute(Type sourceInterface) { }
-
-        public string Value { get { throw null; } }
-    }
-
-    [Obsolete("CurrencyWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class CurrencyWrapper
-    {
-        public CurrencyWrapper(decimal obj) { }
-
-        public CurrencyWrapper(object obj) { }
-
-        public decimal WrappedObject { get { throw null; } }
-    }
-
-    [Obsolete("CustomQueryInterfaceMode and support for ICustomQueryInterface may be unavailable in future releases.")]
-    public enum CustomQueryInterfaceMode
-    {
-        Ignore = 0,
-        Allow = 1
-    }
-
-    [Obsolete("CustomQueryInterfaceResult and support for ICustomQueryInterface may be unavailable in future releases.")]
-    public enum CustomQueryInterfaceResult
-    {
-        Handled = 0,
-        NotHandled = 1,
-        Failed = 2
-    }
-
-    [AttributeUsage(AttributeTargets.Module, Inherited = false)]
-    public sealed partial class DefaultCharSetAttribute : Attribute
-    {
-        public DefaultCharSetAttribute(CharSet charSet) { }
-
-        public CharSet CharSet { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Method, AllowMultiple = false)]
-    public sealed partial class DefaultDllImportSearchPathsAttribute : Attribute
-    {
-        public DefaultDllImportSearchPathsAttribute(DllImportSearchPath paths) { }
-
-        public DllImportSearchPath Paths { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter)]
-    public sealed partial class DefaultParameterValueAttribute : Attribute
-    {
-        public DefaultParameterValueAttribute(object value) { }
-
-        public object Value { get { throw null; } }
-    }
-
-    [Obsolete("DispatchWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class DispatchWrapper
-    {
-        public DispatchWrapper(object obj) { }
-
-        public object WrappedObject { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event, Inherited = false)]
-    public sealed partial class DispIdAttribute : Attribute
-    {
-        public DispIdAttribute(int dispId) { }
-
-        public int Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false)]
-    public sealed partial class DllImportAttribute : Attribute
-    {
-        public bool BestFitMapping;
-        public CallingConvention CallingConvention;
-        public CharSet CharSet;
-        public string EntryPoint;
-        public bool ExactSpelling;
-        public bool PreserveSig;
-        public bool SetLastError;
-        public bool ThrowOnUnmappableChar;
-        public DllImportAttribute(string dllName) { }
-
-        public string Value { get { throw null; } }
-    }
-
-    [Flags]
-    public enum DllImportSearchPath
-    {
-        LegacyBehavior = 0,
-        AssemblyDirectory = 2,
-        UseDllDirectoryForDependencies = 256,
-        ApplicationDirectory = 512,
-        UserDirectories = 1024,
-        System32 = 2048,
-        SafeDirectories = 4096
-    }
-
-    [Obsolete("ErrorWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class ErrorWrapper
-    {
-        public ErrorWrapper(Exception e) { }
-
-        public ErrorWrapper(int errorCode) { }
-
-        public ErrorWrapper(object errorCode) { }
-
-        public int ErrorCode { get { throw null; } }
-    }
-
-    public partial struct GCHandle
-    {
-        public bool IsAllocated { get { throw null; } }
-
-        public object Target { get { throw null; } set { } }
-
-        public IntPtr AddrOfPinnedObject() { throw null; }
-
-        public static GCHandle Alloc(object value, GCHandleType type) { throw null; }
-
-        public static GCHandle Alloc(object value) { throw null; }
-
-        public override bool Equals(object o) { throw null; }
-
-        public void Free() { }
-
-        public static GCHandle FromIntPtr(IntPtr value) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(GCHandle a, GCHandle b) { throw null; }
-
-        public static explicit operator GCHandle(IntPtr value) { throw null; }
-
-        public static explicit operator IntPtr(GCHandle value) { throw null; }
-
-        public static bool operator !=(GCHandle a, GCHandle b) { throw null; }
-
-        public static IntPtr ToIntPtr(GCHandle value) { throw null; }
-    }
-
-    public enum GCHandleType
-    {
-        Weak = 0,
-        WeakTrackResurrection = 1,
-        Normal = 2,
-        Pinned = 3
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)]
-    public sealed partial class GuidAttribute : Attribute
-    {
-        public GuidAttribute(string guid) { }
-
-        public string Value { get { throw null; } }
-    }
-
-    public sealed partial class HandleCollector
-    {
-        public HandleCollector(string name, int initialThreshold, int maximumThreshold) { }
-
-        public HandleCollector(string name, int initialThreshold) { }
-
-        public int Count { get { throw null; } }
-
-        public int InitialThreshold { get { throw null; } }
-
-        public int MaximumThreshold { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public void Add() { }
-
-        public void Remove() { }
-    }
-
-    [Obsolete("ICustomAdapter may be unavailable in future releases.")]
-    public partial interface ICustomAdapter
-    {
-        object GetUnderlyingObject();
-    }
-
-    [Obsolete("ICustomQueryInterface may be unavailable in future releases.")]
-    public partial interface ICustomQueryInterface
-    {
-        CustomQueryInterfaceResult GetInterface(ref Guid iid, out IntPtr ppv);
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class InAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Interface, Inherited = false)]
-    public sealed partial class InterfaceTypeAttribute : Attribute
-    {
-        public InterfaceTypeAttribute(short interfaceType) { }
-
-        public InterfaceTypeAttribute(ComInterfaceType interfaceType) { }
-
-        public ComInterfaceType Value { get { throw null; } }
-    }
-
-    public partial class InvalidComObjectException : Exception
-    {
-        public InvalidComObjectException() { }
-
-        public InvalidComObjectException(string message, Exception inner) { }
-
-        public InvalidComObjectException(string message) { }
-    }
-
-    public partial class InvalidOleVariantTypeException : Exception
-    {
-        public InvalidOleVariantTypeException() { }
-
-        public InvalidOleVariantTypeException(string message, Exception inner) { }
-
-        public InvalidOleVariantTypeException(string message) { }
-    }
-
-    public static partial class Marshal
-    {
-        public static readonly int SystemDefaultCharSize;
-        public static readonly int SystemMaxDBCSCharSize;
-        public static int AddRef(IntPtr pUnk) { throw null; }
-
-        public static IntPtr AllocCoTaskMem(int cb) { throw null; }
-
-        public static IntPtr AllocHGlobal(int cb) { throw null; }
-
-        public static IntPtr AllocHGlobal(IntPtr cb) { throw null; }
-
-        public static bool AreComObjectsAvailableForCleanup() { throw null; }
-
-        public static void Copy(byte[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(char[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(double[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(short[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(int[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(long[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(IntPtr source, byte[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, char[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, double[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, short[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, int[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, long[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, IntPtr[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr source, float[] destination, int startIndex, int length) { }
-
-        public static void Copy(IntPtr[] source, int startIndex, IntPtr destination, int length) { }
-
-        public static void Copy(float[] source, int startIndex, IntPtr destination, int length) { }
-
-        [Obsolete("CreateAggregatedObject(IntPtr, Object) may be unavailable in future releases. Instead, use CreateAggregatedObject<T>(IntPtr, T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296518")]
-        public static IntPtr CreateAggregatedObject(IntPtr pOuter, object o) { throw null; }
-
-        public static IntPtr CreateAggregatedObject<T>(IntPtr pOuter, T o) { throw null; }
-
-        [Obsolete("CreateWrapperOfType(Object, Type) may be unavailable in future releases. Instead, use CreateWrapperOfType<T,T2>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296519")]
-        public static object CreateWrapperOfType(object o, Type t) { throw null; }
-
-        public static TWrapper CreateWrapperOfType<T, TWrapper>(T o) { throw null; }
-
-        [Obsolete("DestroyStructure(IntPtr, Type) may be unavailable in future releases. Instead, use DestroyStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296520")]
-        public static void DestroyStructure(IntPtr ptr, Type structuretype) { }
-
-        public static void DestroyStructure<T>(IntPtr ptr) { }
-
-        public static int FinalReleaseComObject(object o) { throw null; }
-
-        public static void FreeBSTR(IntPtr ptr) { }
-
-        public static void FreeCoTaskMem(IntPtr ptr) { }
-
-        public static void FreeHGlobal(IntPtr hglobal) { }
-
-        [Obsolete("GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode) and support for ICustomQueryInterface may be unavailable in future releases.")]
-        public static IntPtr GetComInterfaceForObject(object o, Type T, CustomQueryInterfaceMode mode) { throw null; }
-
-        [Obsolete("GetComInterfaceForObject(Object, Type) may be unavailable in future releases. Instead, use GetComInterfaceForObject<T,T2>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296509")]
-        public static IntPtr GetComInterfaceForObject(object o, Type T) { throw null; }
-
-        public static IntPtr GetComInterfaceForObject<T, TInterface>(T o) { throw null; }
-
-        [Obsolete("GetDelegateForFunctionPointer(IntPtr, Type) may be unavailable in future releases. Instead, use GetDelegateForFunctionPointer<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296521")]
-        public static Delegate GetDelegateForFunctionPointer(IntPtr ptr, Type t) { throw null; }
-
-        public static TDelegate GetDelegateForFunctionPointer<TDelegate>(IntPtr ptr) { throw null; }
-
-        [Obsolete("GetExceptionCode() may be unavailable in future releases.")]
-        public static int GetExceptionCode() { throw null; }
-
-        public static Exception GetExceptionForHR(int errorCode, IntPtr errorInfo) { throw null; }
-
-        public static Exception GetExceptionForHR(int errorCode) { throw null; }
-
-        [Obsolete("GetFunctionPointerForDelegate(Delegate) may be unavailable in future releases. Instead, use GetFunctionPointerForDelegate<T>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296522")]
-        public static IntPtr GetFunctionPointerForDelegate(Delegate d) { throw null; }
-
-        public static IntPtr GetFunctionPointerForDelegate<TDelegate>(TDelegate d) { throw null; }
-
-        public static int GetHRForException(Exception e) { throw null; }
-
-        public static int GetHRForLastWin32Error() { throw null; }
-
-        public static IntPtr GetIUnknownForObject(object o) { throw null; }
-
-        public static int GetLastWin32Error() { throw null; }
-
-        [Obsolete("GetNativeVariantForObject(Object, IntPtr) may be unavailable in future releases.")]
-        public static void GetNativeVariantForObject(object obj, IntPtr pDstNativeVariant) { }
-
-        [Obsolete("GetNativeVariantForObject<T>(T, IntPtr) may be unavailable in future releases.")]
-        public static void GetNativeVariantForObject<T>(T obj, IntPtr pDstNativeVariant) { }
-
-        public static object GetObjectForIUnknown(IntPtr pUnk) { throw null; }
-
-        [Obsolete("GetObjectForNativeVariant(IntPtr) may be unavailable in future releases.")]
-        public static object GetObjectForNativeVariant(IntPtr pSrcNativeVariant) { throw null; }
-
-        [Obsolete("GetObjectForNativeVariant<T>(IntPtr) may be unavailable in future releases.")]
-        public static T GetObjectForNativeVariant<T>(IntPtr pSrcNativeVariant) { throw null; }
-
-        [Obsolete("GetObjectsForNativeVariants(IntPtr, Int32) may be unavailable in future releases.")]
-        public static object[] GetObjectsForNativeVariants(IntPtr aSrcNativeVariant, int cVars) { throw null; }
-
-        [Obsolete("GetObjectsForNativeVariants<T>(IntPtr, Int32) may be unavailable in future releases.")]
-        public static T[] GetObjectsForNativeVariants<T>(IntPtr aSrcNativeVariant, int cVars) { throw null; }
-
-        public static int GetStartComSlot(Type t) { throw null; }
-
-        public static Type GetTypeFromCLSID(Guid clsid) { throw null; }
-
-        public static string GetTypeInfoName(ComTypes.ITypeInfo typeInfo) { throw null; }
-
-        public static object GetUniqueObjectForIUnknown(IntPtr unknown) { throw null; }
-
-        public static bool IsComObject(object o) { throw null; }
-
-        [Obsolete("OffsetOf(Type, string) may be unavailable in future releases. Instead, use OffsetOf<T>(string). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296511")]
-        public static IntPtr OffsetOf(Type t, string fieldName) { throw null; }
-
-        public static IntPtr OffsetOf<T>(string fieldName) { throw null; }
-
-        public static string PtrToStringAnsi(IntPtr ptr, int len) { throw null; }
-
-        public static string PtrToStringAnsi(IntPtr ptr) { throw null; }
-
-        public static string PtrToStringBSTR(IntPtr ptr) { throw null; }
-
-        public static string PtrToStringUni(IntPtr ptr, int len) { throw null; }
-
-        public static string PtrToStringUni(IntPtr ptr) { throw null; }
-
-        [Obsolete("PtrToStructure(IntPtr, Object) may be unavailable in future releases. Instead, use PtrToStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296512")]
-        public static void PtrToStructure(IntPtr ptr, object structure) { }
-
-        [Obsolete("PtrToStructure(IntPtr, Type) may be unavailable in future releases. Instead, use PtrToStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296513")]
-        public static object PtrToStructure(IntPtr ptr, Type structureType) { throw null; }
-
-        public static void PtrToStructure<T>(IntPtr ptr, T structure) { }
-
-        public static T PtrToStructure<T>(IntPtr ptr) { throw null; }
-
-        public static int QueryInterface(IntPtr pUnk, ref Guid iid, out IntPtr ppv) { throw null; }
-
-        public static byte ReadByte(IntPtr ptr, int ofs) { throw null; }
-
-        public static byte ReadByte(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadByte(Object, Int32) may be unavailable in future releases.")]
-        public static byte ReadByte(object ptr, int ofs) { throw null; }
-
-        public static short ReadInt16(IntPtr ptr, int ofs) { throw null; }
-
-        public static short ReadInt16(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadInt16(Object, Int32) may be unavailable in future releases.")]
-        public static short ReadInt16(object ptr, int ofs) { throw null; }
-
-        public static int ReadInt32(IntPtr ptr, int ofs) { throw null; }
-
-        public static int ReadInt32(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadInt32(Object, Int32) may be unavailable in future releases.")]
-        public static int ReadInt32(object ptr, int ofs) { throw null; }
-
-        public static long ReadInt64(IntPtr ptr, int ofs) { throw null; }
-
-        public static long ReadInt64(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadInt64(Object, Int32) may be unavailable in future releases.")]
-        public static long ReadInt64(object ptr, int ofs) { throw null; }
-
-        public static IntPtr ReadIntPtr(IntPtr ptr, int ofs) { throw null; }
-
-        public static IntPtr ReadIntPtr(IntPtr ptr) { throw null; }
-
-        [Obsolete("ReadIntPtr(Object, Int32) may be unavailable in future releases.")]
-        public static IntPtr ReadIntPtr(object ptr, int ofs) { throw null; }
-
-        public static IntPtr ReAllocCoTaskMem(IntPtr pv, int cb) { throw null; }
-
-        public static IntPtr ReAllocHGlobal(IntPtr pv, IntPtr cb) { throw null; }
-
-        public static int Release(IntPtr pUnk) { throw null; }
-
-        public static int ReleaseComObject(object o) { throw null; }
-
-        [Obsolete("SizeOf(Object) may be unavailable in future releases. Instead, use SizeOf<T>(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296514")]
-        public static int SizeOf(object structure) { throw null; }
-
-        [Obsolete("SizeOf(Type) may be unavailable in future releases. Instead, use SizeOf<T>(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296515")]
-        public static int SizeOf(Type t) { throw null; }
-
-        public static int SizeOf<T>() { throw null; }
-
-        public static int SizeOf<T>(T structure) { throw null; }
-
-        public static IntPtr StringToBSTR(string s) { throw null; }
-
-        public static IntPtr StringToCoTaskMemAnsi(string s) { throw null; }
-
-        public static IntPtr StringToCoTaskMemUni(string s) { throw null; }
-
-        public static IntPtr StringToHGlobalAnsi(string s) { throw null; }
-
-        public static IntPtr StringToHGlobalUni(string s) { throw null; }
-
-        [Obsolete("StructureToPtr(Object, IntPtr, Boolean) may be unavailable in future releases. Instead, use StructureToPtr<T>(T, IntPtr, Boolean). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296516")]
-        public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld) { }
-
-        public static void StructureToPtr<T>(T structure, IntPtr ptr, bool fDeleteOld) { }
-
-        public static void ThrowExceptionForHR(int errorCode, IntPtr errorInfo) { }
-
-        public static void ThrowExceptionForHR(int errorCode) { }
-
-        [Obsolete("UnsafeAddrOfPinnedArrayElement(Array, Int32) may be unavailable in future releases. Instead, use UnsafeAddrOfPinnedArrayElement<T>(T[], Int32). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296517")]
-        public static IntPtr UnsafeAddrOfPinnedArrayElement(Array arr, int index) { throw null; }
-
-        public static IntPtr UnsafeAddrOfPinnedArrayElement<T>(T[] arr, int index) { throw null; }
-
-        public static void WriteByte(IntPtr ptr, byte val) { }
-
-        public static void WriteByte(IntPtr ptr, int ofs, byte val) { }
-
-        [Obsolete("WriteByte(Object, Int32, Byte) may be unavailable in future releases.")]
-        public static void WriteByte(object ptr, int ofs, byte val) { }
-
-        public static void WriteInt16(IntPtr ptr, char val) { }
-
-        public static void WriteInt16(IntPtr ptr, short val) { }
-
-        public static void WriteInt16(IntPtr ptr, int ofs, char val) { }
-
-        public static void WriteInt16(IntPtr ptr, int ofs, short val) { }
-
-        [Obsolete("WriteInt16(Object, Int32, Char) may be unavailable in future releases.")]
-        public static void WriteInt16(object ptr, int ofs, char val) { }
-
-        [Obsolete("WriteInt16(Object, Int32, Int16) may be unavailable in future releases.")]
-        public static void WriteInt16(object ptr, int ofs, short val) { }
-
-        public static void WriteInt32(IntPtr ptr, int ofs, int val) { }
-
-        public static void WriteInt32(IntPtr ptr, int val) { }
-
-        [Obsolete("WriteInt32(Object, Int32, Int32) may be unavailable in future releases.")]
-        public static void WriteInt32(object ptr, int ofs, int val) { }
-
-        public static void WriteInt64(IntPtr ptr, int ofs, long val) { }
-
-        public static void WriteInt64(IntPtr ptr, long val) { }
-
-        [Obsolete("WriteInt64(Object, Int32, Int64) may be unavailable in future releases.")]
-        public static void WriteInt64(object ptr, int ofs, long val) { }
-
-        public static void WriteIntPtr(IntPtr ptr, int ofs, IntPtr val) { }
-
-        public static void WriteIntPtr(IntPtr ptr, IntPtr val) { }
-
-        [Obsolete("WriteIntPtr(Object, Int32, IntPtr) may be unavailable in future releases.")]
-        public static void WriteIntPtr(object ptr, int ofs, IntPtr val) { }
-
-        public static void ZeroFreeBSTR(IntPtr s) { }
-
-        public static void ZeroFreeCoTaskMemAnsi(IntPtr s) { }
-
-        public static void ZeroFreeCoTaskMemUnicode(IntPtr s) { }
-
-        public static void ZeroFreeGlobalAllocAnsi(IntPtr s) { }
-
-        public static void ZeroFreeGlobalAllocUnicode(IntPtr s) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.ReturnValue, Inherited = false)]
-    public sealed partial class MarshalAsAttribute : Attribute
-    {
-        public UnmanagedType ArraySubType;
-        public int IidParameterIndex;
-        public string MarshalCookie;
-        public string MarshalType;
-        public Type MarshalTypeRef;
-        public VarEnum SafeArraySubType;
-        public Type SafeArrayUserDefinedSubType;
-        public int SizeConst;
-        public short SizeParamIndex;
-        public MarshalAsAttribute(short unmanagedType) { }
-
-        public MarshalAsAttribute(UnmanagedType unmanagedType) { }
-
-        public UnmanagedType Value { get { throw null; } }
-    }
-
-    public partial class MarshalDirectiveException : Exception
-    {
-        public MarshalDirectiveException() { }
-
-        public MarshalDirectiveException(string message, Exception inner) { }
-
-        public MarshalDirectiveException(string message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class OptionalAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false)]
-    public sealed partial class PreserveSigAttribute : Attribute
-    {
-    }
-
-    public partial class SafeArrayRankMismatchException : Exception
-    {
-        public SafeArrayRankMismatchException() { }
-
-        public SafeArrayRankMismatchException(string message, Exception inner) { }
-
-        public SafeArrayRankMismatchException(string message) { }
-    }
-
-    public partial class SafeArrayTypeMismatchException : Exception
-    {
-        public SafeArrayTypeMismatchException() { }
-
-        public SafeArrayTypeMismatchException(string message, Exception inner) { }
-
-        public SafeArrayTypeMismatchException(string message) { }
-    }
-
-    public abstract partial class SafeBuffer : SafeHandle
-    {
-        protected SafeBuffer(bool ownsHandle) : base(default, default) { }
-
-        [CLSCompliant(false)]
-        public ulong ByteLength { get { throw null; } }
-
-        public override bool IsInvalid { get { throw null; } }
-
-        [CLSCompliant(false)]
-        public unsafe void AcquirePointer(ref byte* pointer) { }
-
-        [CLSCompliant(false)]
-        public void Initialize(uint numElements, uint sizeOfEachElement) { }
-
-        [CLSCompliant(false)]
-        public void Initialize(ulong numBytes) { }
-
-        [CLSCompliant(false)]
-        public void Initialize<T>(uint numElements)
-            where T : struct { }
-
-        [CLSCompliant(false)]
-        public T Read<T>(ulong byteOffset)
-            where T : struct { throw null; }
-
-        [CLSCompliant(false)]
-        public void ReadArray<T>(ulong byteOffset, T[] array, int index, int count)
-            where T : struct { }
-
-        public void ReleasePointer() { }
-
-        [CLSCompliant(false)]
-        public void Write<T>(ulong byteOffset, T value)
-            where T : struct { }
-
-        [CLSCompliant(false)]
-        public void WriteArray<T>(ulong byteOffset, T[] array, int index, int count)
-            where T : struct { }
-    }
-
-    public partial class SEHException : Exception
-    {
-        public SEHException() { }
-
-        public SEHException(string message, Exception inner) { }
-
-        public SEHException(string message) { }
-
-        public virtual bool CanResume() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class TypeIdentifierAttribute : Attribute
-    {
-        public TypeIdentifierAttribute() { }
-
-        public TypeIdentifierAttribute(string scope, string identifier) { }
-
-        public string Identifier { get { throw null; } }
-
-        public string Scope { get { throw null; } }
-    }
-
-    [Obsolete("UnknownWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class UnknownWrapper
-    {
-        public UnknownWrapper(object obj) { }
-
-        public object WrappedObject { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class UnmanagedFunctionPointerAttribute : Attribute
-    {
-        public bool BestFitMapping;
-        public CharSet CharSet;
-        public bool SetLastError;
-        public bool ThrowOnUnmappableChar;
-        public UnmanagedFunctionPointerAttribute(CallingConvention callingConvention) { }
-
-        public CallingConvention CallingConvention { get { throw null; } }
-    }
-
-    public enum UnmanagedType
-    {
-        Bool = 2,
-        I1 = 3,
-        U1 = 4,
-        I2 = 5,
-        U2 = 6,
-        I4 = 7,
-        U4 = 8,
-        I8 = 9,
-        U8 = 10,
-        R4 = 11,
-        R8 = 12,
-        Currency = 15,
-        BStr = 19,
-        LPStr = 20,
-        LPWStr = 21,
-        LPTStr = 22,
-        ByValTStr = 23,
-        IUnknown = 25,
-        IDispatch = 26,
-        Struct = 27,
-        Interface = 28,
-        SafeArray = 29,
-        ByValArray = 30,
-        SysInt = 31,
-        SysUInt = 32,
-        VBByRefStr = 34,
-        AnsiBStr = 35,
-        TBStr = 36,
-        VariantBool = 37,
-        FunctionPtr = 38,
-        AsAny = 40,
-        LPArray = 42,
-        LPStruct = 43,
-        Error = 45,
-        IInspectable = 46,
-        HString = 47
-    }
-
-    [Obsolete("Marshalling VARIANTs may be unavailable in future releases.")]
-    public enum VarEnum
-    {
-        VT_EMPTY = 0,
-        VT_NULL = 1,
-        VT_I2 = 2,
-        VT_I4 = 3,
-        VT_R4 = 4,
-        VT_R8 = 5,
-        VT_CY = 6,
-        VT_DATE = 7,
-        VT_BSTR = 8,
-        VT_DISPATCH = 9,
-        VT_ERROR = 10,
-        VT_BOOL = 11,
-        VT_VARIANT = 12,
-        VT_UNKNOWN = 13,
-        VT_DECIMAL = 14,
-        VT_I1 = 16,
-        VT_UI1 = 17,
-        VT_UI2 = 18,
-        VT_UI4 = 19,
-        VT_I8 = 20,
-        VT_UI8 = 21,
-        VT_INT = 22,
-        VT_UINT = 23,
-        VT_VOID = 24,
-        VT_HRESULT = 25,
-        VT_PTR = 26,
-        VT_SAFEARRAY = 27,
-        VT_CARRAY = 28,
-        VT_USERDEFINED = 29,
-        VT_LPSTR = 30,
-        VT_LPWSTR = 31,
-        VT_RECORD = 36,
-        VT_FILETIME = 64,
-        VT_BLOB = 65,
-        VT_STREAM = 66,
-        VT_STORAGE = 67,
-        VT_STREAMED_OBJECT = 68,
-        VT_STORED_OBJECT = 69,
-        VT_BLOB_OBJECT = 70,
-        VT_CF = 71,
-        VT_CLSID = 72,
-        VT_VECTOR = 4096,
-        VT_ARRAY = 8192,
-        VT_BYREF = 16384
-    }
-
-    [Obsolete("VariantWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
-    public sealed partial class VariantWrapper
-    {
-        public VariantWrapper(object obj) { }
-
-        public object WrappedObject { get { throw null; } }
-    }
-}
-
-namespace System.Runtime.InteropServices.ComTypes
-{
-    [Flags]
-    public enum ADVF
-    {
-        ADVF_NODATA = 1,
-        ADVF_PRIMEFIRST = 2,
-        ADVF_ONLYONCE = 4,
-        ADVFCACHE_NOHANDLER = 8,
-        ADVFCACHE_FORCEBUILTIN = 16,
-        ADVFCACHE_ONSAVE = 32,
-        ADVF_DATAONSTOP = 64
-    }
-
-    public partial struct BINDPTR
-    {
-        public IntPtr lpfuncdesc;
-        public IntPtr lptcomp;
-        public IntPtr lpvardesc;
-    }
-
-    public partial struct BIND_OPTS
-    {
-        public int cbStruct;
-        public int dwTickCountDeadline;
-        public int grfFlags;
-        public int grfMode;
-    }
-
-    public enum CALLCONV
-    {
-        CC_CDECL = 1,
-        CC_MSCPASCAL = 2,
-        CC_PASCAL = 2,
-        CC_MACPASCAL = 3,
-        CC_STDCALL = 4,
-        CC_RESERVED = 5,
-        CC_SYSCALL = 6,
-        CC_MPWCDECL = 7,
-        CC_MPWPASCAL = 8,
-        CC_MAX = 9
-    }
-
-    public partial struct CONNECTDATA
-    {
-        public int dwCookie;
-        public object pUnk;
-    }
-
-    public enum DATADIR
-    {
-        DATADIR_GET = 1,
-        DATADIR_SET = 2
-    }
-
-    public enum DESCKIND
-    {
-        DESCKIND_NONE = 0,
-        DESCKIND_FUNCDESC = 1,
-        DESCKIND_VARDESC = 2,
-        DESCKIND_TYPECOMP = 3,
-        DESCKIND_IMPLICITAPPOBJ = 4,
-        DESCKIND_MAX = 5
-    }
-
-    public partial struct DISPPARAMS
-    {
-        public int cArgs;
-        public int cNamedArgs;
-        public IntPtr rgdispidNamedArgs;
-        public IntPtr rgvarg;
-    }
-
-    [Flags]
-    public enum DVASPECT
-    {
-        DVASPECT_CONTENT = 1,
-        DVASPECT_THUMBNAIL = 2,
-        DVASPECT_ICON = 4,
-        DVASPECT_DOCPRINT = 8
-    }
-
-    public partial struct ELEMDESC
-    {
-        public DESCUNION desc;
-        public TYPEDESC tdesc;
-        public partial struct DESCUNION
-        {
-            public IDLDESC idldesc;
-            public PARAMDESC paramdesc;
-        }
-    }
-
-    public partial struct EXCEPINFO
-    {
-        public string bstrDescription;
-        public string bstrHelpFile;
-        public string bstrSource;
-        public int dwHelpContext;
-        public IntPtr pfnDeferredFillIn;
-        public IntPtr pvReserved;
-        public int scode;
-        public short wCode;
-        public short wReserved;
-    }
-
-    public partial struct FILETIME
-    {
-        public int dwHighDateTime;
-        public int dwLowDateTime;
-    }
-
-    public partial struct FORMATETC
-    {
-        public short cfFormat;
-        public DVASPECT dwAspect;
-        public int lindex;
-        public IntPtr ptd;
-        public TYMED tymed;
-    }
-
-    public partial struct FUNCDESC
-    {
-        public CALLCONV callconv;
-        public short cParams;
-        public short cParamsOpt;
-        public short cScodes;
-        public ELEMDESC elemdescFunc;
-        public FUNCKIND funckind;
-        public INVOKEKIND invkind;
-        public IntPtr lprgelemdescParam;
-        public IntPtr lprgscode;
-        public int memid;
-        public short oVft;
-        public short wFuncFlags;
-    }
-
-    [Flags]
-    public enum FUNCFLAGS : short
-    {
-        FUNCFLAG_FRESTRICTED = 1,
-        FUNCFLAG_FSOURCE = 2,
-        FUNCFLAG_FBINDABLE = 4,
-        FUNCFLAG_FREQUESTEDIT = 8,
-        FUNCFLAG_FDISPLAYBIND = 16,
-        FUNCFLAG_FDEFAULTBIND = 32,
-        FUNCFLAG_FHIDDEN = 64,
-        FUNCFLAG_FUSESGETLASTERROR = 128,
-        FUNCFLAG_FDEFAULTCOLLELEM = 256,
-        FUNCFLAG_FUIDEFAULT = 512,
-        FUNCFLAG_FNONBROWSABLE = 1024,
-        FUNCFLAG_FREPLACEABLE = 2048,
-        FUNCFLAG_FIMMEDIATEBIND = 4096
-    }
-
-    public enum FUNCKIND
-    {
-        FUNC_VIRTUAL = 0,
-        FUNC_PUREVIRTUAL = 1,
-        FUNC_NONVIRTUAL = 2,
-        FUNC_STATIC = 3,
-        FUNC_DISPATCH = 4
-    }
-
-    public partial interface IAdviseSink
-    {
-        void OnClose();
-        void OnDataChange(ref FORMATETC format, ref STGMEDIUM stgmedium);
-        void OnRename(IMoniker moniker);
-        void OnSave();
-        void OnViewChange(int aspect, int index);
-    }
-
-    public partial interface IBindCtx
-    {
-        void EnumObjectParam(out IEnumString ppenum);
-        void GetBindOptions(ref BIND_OPTS pbindopts);
-        void GetObjectParam(string pszKey, out object ppunk);
-        void GetRunningObjectTable(out IRunningObjectTable pprot);
-        void RegisterObjectBound(object punk);
-        void RegisterObjectParam(string pszKey, object punk);
-        void ReleaseBoundObjects();
-        void RevokeObjectBound(object punk);
-        int RevokeObjectParam(string pszKey);
-        void SetBindOptions(ref BIND_OPTS pbindopts);
-    }
-
-    public partial interface IConnectionPoint
-    {
-        void Advise(object pUnkSink, out int pdwCookie);
-        void EnumConnections(out IEnumConnections ppEnum);
-        void GetConnectionInterface(out Guid pIID);
-        void GetConnectionPointContainer(out IConnectionPointContainer ppCPC);
-        void Unadvise(int dwCookie);
-    }
-
-    public partial interface IConnectionPointContainer
-    {
-        void EnumConnectionPoints(out IEnumConnectionPoints ppEnum);
-        void FindConnectionPoint(ref Guid riid, out IConnectionPoint ppCP);
-    }
-
-    public partial struct IDLDESC
-    {
-        public IntPtr dwReserved;
-        public IDLFLAG wIDLFlags;
-    }
-
-    [Flags]
-    public enum IDLFLAG : short
-    {
-        IDLFLAG_NONE = 0,
-        IDLFLAG_FIN = 1,
-        IDLFLAG_FOUT = 2,
-        IDLFLAG_FLCID = 4,
-        IDLFLAG_FRETVAL = 8
-    }
-
-    public partial interface IEnumConnectionPoints
-    {
-        void Clone(out IEnumConnectionPoints ppenum);
-        int Next(int celt, IConnectionPoint[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumConnections
-    {
-        void Clone(out IEnumConnections ppenum);
-        int Next(int celt, CONNECTDATA[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumFORMATETC
-    {
-        void Clone(out IEnumFORMATETC newEnum);
-        int Next(int celt, FORMATETC[] rgelt, int[] pceltFetched);
-        int Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumMoniker
-    {
-        void Clone(out IEnumMoniker ppenum);
-        int Next(int celt, IMoniker[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumString
-    {
-        void Clone(out IEnumString ppenum);
-        int Next(int celt, string[] rgelt, IntPtr pceltFetched);
-        void Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IEnumVARIANT
-    {
-        IEnumVARIANT Clone();
-        int Next(int celt, object[] rgVar, IntPtr pceltFetched);
-        int Reset();
-        int Skip(int celt);
-    }
-
-    public partial interface IMoniker
-    {
-        void BindToObject(IBindCtx pbc, IMoniker pmkToLeft, ref Guid riidResult, out object ppvResult);
-        void BindToStorage(IBindCtx pbc, IMoniker pmkToLeft, ref Guid riid, out object ppvObj);
-        void CommonPrefixWith(IMoniker pmkOther, out IMoniker ppmkPrefix);
-        void ComposeWith(IMoniker pmkRight, bool fOnlyIfNotGeneric, out IMoniker ppmkComposite);
-        void Enum(bool fForward, out IEnumMoniker ppenumMoniker);
-        void GetClassID(out Guid pClassID);
-        void GetDisplayName(IBindCtx pbc, IMoniker pmkToLeft, out string ppszDisplayName);
-        void GetSizeMax(out long pcbSize);
-        void GetTimeOfLastChange(IBindCtx pbc, IMoniker pmkToLeft, out FILETIME pFileTime);
-        void Hash(out int pdwHash);
-        void Inverse(out IMoniker ppmk);
-        int IsDirty();
-        int IsEqual(IMoniker pmkOtherMoniker);
-        int IsRunning(IBindCtx pbc, IMoniker pmkToLeft, IMoniker pmkNewlyRunning);
-        int IsSystemMoniker(out int pdwMksys);
-        void Load(IStream pStm);
-        void ParseDisplayName(IBindCtx pbc, IMoniker pmkToLeft, string pszDisplayName, out int pchEaten, out IMoniker ppmkOut);
-        void Reduce(IBindCtx pbc, int dwReduceHowFar, ref IMoniker ppmkToLeft, out IMoniker ppmkReduced);
-        void RelativePathTo(IMoniker pmkOther, out IMoniker ppmkRelPath);
-        void Save(IStream pStm, bool fClearDirty);
-    }
-
-    [Flags]
-    public enum IMPLTYPEFLAGS
-    {
-        IMPLTYPEFLAG_FDEFAULT = 1,
-        IMPLTYPEFLAG_FSOURCE = 2,
-        IMPLTYPEFLAG_FRESTRICTED = 4,
-        IMPLTYPEFLAG_FDEFAULTVTABLE = 8
-    }
-
-    [Flags]
-    public enum INVOKEKIND
-    {
-        INVOKE_FUNC = 1,
-        INVOKE_PROPERTYGET = 2,
-        INVOKE_PROPERTYPUT = 4,
-        INVOKE_PROPERTYPUTREF = 8
-    }
-
-    public partial interface IPersistFile
-    {
-        void GetClassID(out Guid pClassID);
-        void GetCurFile(out string ppszFileName);
-        int IsDirty();
-        void Load(string pszFileName, int dwMode);
-        void Save(string pszFileName, bool fRemember);
-        void SaveCompleted(string pszFileName);
-    }
-
-    public partial interface IRunningObjectTable
-    {
-        void EnumRunning(out IEnumMoniker ppenumMoniker);
-        int GetObject(IMoniker pmkObjectName, out object ppunkObject);
-        int GetTimeOfLastChange(IMoniker pmkObjectName, out FILETIME pfiletime);
-        int IsRunning(IMoniker pmkObjectName);
-        void NoteChangeTime(int dwRegister, ref FILETIME pfiletime);
-        int Register(int grfFlags, object punkObject, IMoniker pmkObjectName);
-        void Revoke(int dwRegister);
-    }
-
-    public partial interface IStream
-    {
-        void Clone(out IStream ppstm);
-        void Commit(int grfCommitFlags);
-        void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);
-        void LockRegion(long libOffset, long cb, int dwLockType);
-        void Read(byte[] pv, int cb, IntPtr pcbRead);
-        void Revert();
-        void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition);
-        void SetSize(long libNewSize);
-        void Stat(out STATSTG pstatstg, int grfStatFlag);
-        void UnlockRegion(long libOffset, long cb, int dwLockType);
-        void Write(byte[] pv, int cb, IntPtr pcbWritten);
-    }
-
-    public partial interface ITypeComp
-    {
-        void Bind(string szName, int lHashVal, short wFlags, out ITypeInfo ppTInfo, out DESCKIND pDescKind, out BINDPTR pBindPtr);
-        void BindType(string szName, int lHashVal, out ITypeInfo ppTInfo, out ITypeComp ppTComp);
-    }
-
-    public partial interface ITypeInfo
-    {
-        void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv);
-        void CreateInstance(object pUnkOuter, ref Guid riid, out object ppvObj);
-        void GetContainingTypeLib(out ITypeLib ppTLB, out int pIndex);
-        void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetFuncDesc(int index, out IntPtr ppFuncDesc);
-        void GetIDsOfNames(string[] rgszNames, int cNames, int[] pMemId);
-        void GetImplTypeFlags(int index, out IMPLTYPEFLAGS pImplTypeFlags);
-        void GetMops(int memid, out string pBstrMops);
-        void GetNames(int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);
-        void GetRefTypeInfo(int hRef, out ITypeInfo ppTI);
-        void GetRefTypeOfImplType(int index, out int href);
-        void GetTypeAttr(out IntPtr ppTypeAttr);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetVarDesc(int index, out IntPtr ppVarDesc);
-        void Invoke(object pvInstance, int memid, short wFlags, ref DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr);
-        void ReleaseFuncDesc(IntPtr pFuncDesc);
-        void ReleaseTypeAttr(IntPtr pTypeAttr);
-        void ReleaseVarDesc(IntPtr pVarDesc);
-    }
-
-    public partial interface ITypeInfo2 : ITypeInfo
-    {
-        void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv);
-        void CreateInstance(object pUnkOuter, ref Guid riid, out object ppvObj);
-        void GetAllCustData(IntPtr pCustData);
-        void GetAllFuncCustData(int index, IntPtr pCustData);
-        void GetAllImplTypeCustData(int index, IntPtr pCustData);
-        void GetAllParamCustData(int indexFunc, int indexParam, IntPtr pCustData);
-        void GetAllVarCustData(int index, IntPtr pCustData);
-        void GetContainingTypeLib(out ITypeLib ppTLB, out int pIndex);
-        void GetCustData(ref Guid guid, out object pVarVal);
-        void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetDocumentation2(int memid, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll);
-        void GetFuncCustData(int index, ref Guid guid, out object pVarVal);
-        void GetFuncDesc(int index, out IntPtr ppFuncDesc);
-        void GetFuncIndexOfMemId(int memid, INVOKEKIND invKind, out int pFuncIndex);
-        void GetIDsOfNames(string[] rgszNames, int cNames, int[] pMemId);
-        void GetImplTypeCustData(int index, ref Guid guid, out object pVarVal);
-        void GetImplTypeFlags(int index, out IMPLTYPEFLAGS pImplTypeFlags);
-        void GetMops(int memid, out string pBstrMops);
-        void GetNames(int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);
-        void GetParamCustData(int indexFunc, int indexParam, ref Guid guid, out object pVarVal);
-        void GetRefTypeInfo(int hRef, out ITypeInfo ppTI);
-        void GetRefTypeOfImplType(int index, out int href);
-        void GetTypeAttr(out IntPtr ppTypeAttr);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetTypeFlags(out int pTypeFlags);
-        void GetTypeKind(out TYPEKIND pTypeKind);
-        void GetVarCustData(int index, ref Guid guid, out object pVarVal);
-        void GetVarDesc(int index, out IntPtr ppVarDesc);
-        void GetVarIndexOfMemId(int memid, out int pVarIndex);
-        void Invoke(object pvInstance, int memid, short wFlags, ref DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr);
-        void ReleaseFuncDesc(IntPtr pFuncDesc);
-        void ReleaseTypeAttr(IntPtr pTypeAttr);
-        void ReleaseVarDesc(IntPtr pVarDesc);
-    }
-
-    public partial interface ITypeLib
-    {
-        void FindName(string szNameBuf, int lHashVal, ITypeInfo[] ppTInfo, int[] rgMemId, ref short pcFound);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetLibAttr(out IntPtr ppTLibAttr);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetTypeInfo(int index, out ITypeInfo ppTI);
-        int GetTypeInfoCount();
-        void GetTypeInfoOfGuid(ref Guid guid, out ITypeInfo ppTInfo);
-        void GetTypeInfoType(int index, out TYPEKIND pTKind);
-        bool IsName(string szNameBuf, int lHashVal);
-        void ReleaseTLibAttr(IntPtr pTLibAttr);
-    }
-
-    public partial interface ITypeLib2 : ITypeLib
-    {
-        void FindName(string szNameBuf, int lHashVal, ITypeInfo[] ppTInfo, int[] rgMemId, ref short pcFound);
-        void GetAllCustData(IntPtr pCustData);
-        void GetCustData(ref Guid guid, out object pVarVal);
-        void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);
-        void GetDocumentation2(int index, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll);
-        void GetLibAttr(out IntPtr ppTLibAttr);
-        void GetLibStatistics(IntPtr pcUniqueNames, out int pcchUniqueNames);
-        void GetTypeComp(out ITypeComp ppTComp);
-        void GetTypeInfo(int index, out ITypeInfo ppTI);
-        int GetTypeInfoCount();
-        void GetTypeInfoOfGuid(ref Guid guid, out ITypeInfo ppTInfo);
-        void GetTypeInfoType(int index, out TYPEKIND pTKind);
-        bool IsName(string szNameBuf, int lHashVal);
-        void ReleaseTLibAttr(IntPtr pTLibAttr);
-    }
-
-    [Flags]
-    public enum LIBFLAGS : short
-    {
-        LIBFLAG_FRESTRICTED = 1,
-        LIBFLAG_FCONTROL = 2,
-        LIBFLAG_FHIDDEN = 4,
-        LIBFLAG_FHASDISKIMAGE = 8
-    }
-
-    public partial struct PARAMDESC
-    {
-        public IntPtr lpVarValue;
-        public PARAMFLAG wParamFlags;
-    }
-
-    [Flags]
-    public enum PARAMFLAG : short
-    {
-        PARAMFLAG_NONE = 0,
-        PARAMFLAG_FIN = 1,
-        PARAMFLAG_FOUT = 2,
-        PARAMFLAG_FLCID = 4,
-        PARAMFLAG_FRETVAL = 8,
-        PARAMFLAG_FOPT = 16,
-        PARAMFLAG_FHASDEFAULT = 32,
-        PARAMFLAG_FHASCUSTDATA = 64
-    }
-
-    public partial struct STATDATA
-    {
-        public ADVF advf;
-        public IAdviseSink advSink;
-        public int connection;
-        public FORMATETC formatetc;
-    }
-
-    public partial struct STATSTG
-    {
-        public FILETIME atime;
-        public long cbSize;
-        public Guid clsid;
-        public FILETIME ctime;
-        public int grfLocksSupported;
-        public int grfMode;
-        public int grfStateBits;
-        public FILETIME mtime;
-        public string pwcsName;
-        public int reserved;
-        public int type;
-    }
-
-    public partial struct STGMEDIUM
-    {
-        public object pUnkForRelease;
-        public TYMED tymed;
-        public IntPtr unionmember;
-    }
-
-    public enum SYSKIND
-    {
-        SYS_WIN16 = 0,
-        SYS_WIN32 = 1,
-        SYS_MAC = 2,
-        SYS_WIN64 = 3
-    }
-
-    [Flags]
-    public enum TYMED
-    {
-        TYMED_NULL = 0,
-        TYMED_HGLOBAL = 1,
-        TYMED_FILE = 2,
-        TYMED_ISTREAM = 4,
-        TYMED_ISTORAGE = 8,
-        TYMED_GDI = 16,
-        TYMED_MFPICT = 32,
-        TYMED_ENHMF = 64
-    }
-
-    public partial struct TYPEATTR
-    {
-        public short cbAlignment;
-        public int cbSizeInstance;
-        public short cbSizeVft;
-        public short cFuncs;
-        public short cImplTypes;
-        public short cVars;
-        public int dwReserved;
-        public Guid guid;
-        public IDLDESC idldescType;
-        public int lcid;
-        public IntPtr lpstrSchema;
-        public const int MEMBER_ID_NIL = -1;
-        public int memidConstructor;
-        public int memidDestructor;
-        public TYPEDESC tdescAlias;
-        public TYPEKIND typekind;
-        public short wMajorVerNum;
-        public short wMinorVerNum;
-        public TYPEFLAGS wTypeFlags;
-    }
-
-    public partial struct TYPEDESC
-    {
-        public IntPtr lpValue;
-        public short vt;
-    }
-
-    [Flags]
-    public enum TYPEFLAGS : short
-    {
-        TYPEFLAG_FAPPOBJECT = 1,
-        TYPEFLAG_FCANCREATE = 2,
-        TYPEFLAG_FLICENSED = 4,
-        TYPEFLAG_FPREDECLID = 8,
-        TYPEFLAG_FHIDDEN = 16,
-        TYPEFLAG_FCONTROL = 32,
-        TYPEFLAG_FDUAL = 64,
-        TYPEFLAG_FNONEXTENSIBLE = 128,
-        TYPEFLAG_FOLEAUTOMATION = 256,
-        TYPEFLAG_FRESTRICTED = 512,
-        TYPEFLAG_FAGGREGATABLE = 1024,
-        TYPEFLAG_FREPLACEABLE = 2048,
-        TYPEFLAG_FDISPATCHABLE = 4096,
-        TYPEFLAG_FREVERSEBIND = 8192,
-        TYPEFLAG_FPROXY = 16384
-    }
-
-    public enum TYPEKIND
-    {
-        TKIND_ENUM = 0,
-        TKIND_RECORD = 1,
-        TKIND_MODULE = 2,
-        TKIND_INTERFACE = 3,
-        TKIND_DISPATCH = 4,
-        TKIND_COCLASS = 5,
-        TKIND_ALIAS = 6,
-        TKIND_UNION = 7,
-        TKIND_MAX = 8
-    }
-
-    public partial struct TYPELIBATTR
-    {
-        public Guid guid;
-        public int lcid;
-        public SYSKIND syskind;
-        public LIBFLAGS wLibFlags;
-        public short wMajorVerNum;
-        public short wMinorVerNum;
-    }
-
-    public partial struct VARDESC
-    {
-        public DESCUNION desc;
-        public ELEMDESC elemdescVar;
-        public string lpstrSchema;
-        public int memid;
-        public VARKIND varkind;
-        public short wVarFlags;
-        public partial struct DESCUNION
-        {
-            public IntPtr lpvarValue;
-            public int oInst;
-        }
-    }
-
-    [Flags]
-    public enum VARFLAGS : short
-    {
-        VARFLAG_FREADONLY = 1,
-        VARFLAG_FSOURCE = 2,
-        VARFLAG_FBINDABLE = 4,
-        VARFLAG_FREQUESTEDIT = 8,
-        VARFLAG_FDISPLAYBIND = 16,
-        VARFLAG_FDEFAULTBIND = 32,
-        VARFLAG_FHIDDEN = 64,
-        VARFLAG_FRESTRICTED = 128,
-        VARFLAG_FDEFAULTCOLLELEM = 256,
-        VARFLAG_FUIDEFAULT = 512,
-        VARFLAG_FNONBROWSABLE = 1024,
-        VARFLAG_FREPLACEABLE = 2048,
-        VARFLAG_FIMMEDIATEBIND = 4096
-    }
-
-    public enum VARKIND
-    {
-        VAR_PERINSTANCE = 0,
-        VAR_STATIC = 1,
-        VAR_CONST = 2,
-        VAR_DISPATCH = 3
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.interopservices/4.3.0/system.runtime.interopservices.nuspec b/src/referencePackages/src/system.runtime.interopservices/4.3.0/system.runtime.interopservices.nuspec
deleted file mode 100644
index fa584774..00000000
--- a/src/referencePackages/src/system.runtime.interopservices/4.3.0/system.runtime.interopservices.nuspec
+++ /dev/null
@@ -1,67 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Runtime.InteropServices</id>
-    <version>4.3.0</version>
-    <title>System.Runtime.InteropServices</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides types that support COM interop and platform invoke services.
-
-Commonly Used Types:
-System.Runtime.InteropServices.GCHandle
-System.Runtime.InteropServices.GuidAttribute
-System.Runtime.InteropServices.COMException
-System.DllNotFoundException
-System.Runtime.InteropServices.DllImportAttribute
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETCoreApp1.1">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Reflection.Primitives" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Reflection.Primitives" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.2">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Reflection.Primitives" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Reflection.Primitives" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.5">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Reflection" version="4.3.0" />
-        <dependency id="System.Reflection.Primitives" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.numerics/4.3.0/System.Runtime.Numerics.4.3.0.csproj b/src/referencePackages/src/system.runtime.numerics/4.3.0/System.Runtime.Numerics.4.3.0.csproj
deleted file mode 100644
index df803028..00000000
--- a/src/referencePackages/src/system.runtime.numerics/4.3.0/System.Runtime.Numerics.4.3.0.csproj
+++ /dev/null
@@ -1,12 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.1</TargetFrameworks>
-    <AssemblyName>System.Runtime.Numerics</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.1'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.runtime.numerics/4.3.0/ref/netstandard1.1/System.Runtime.Numerics.cs b/src/referencePackages/src/system.runtime.numerics/4.3.0/ref/netstandard1.1/System.Runtime.Numerics.cs
deleted file mode 100644
index 5e1f2276..00000000
--- a/src/referencePackages/src/system.runtime.numerics/4.3.0/ref/netstandard1.1/System.Runtime.Numerics.cs
+++ /dev/null
@@ -1,416 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Runtime.Numerics")]
-[assembly: System.Reflection.AssemblyDescription("System.Runtime.Numerics")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Runtime.Numerics")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Numerics
-{
-    public partial struct BigInteger : IComparable, IComparable<BigInteger>, IEquatable<BigInteger>, IFormattable
-    {
-        [CLSCompliant(false)]
-        public BigInteger(byte[] value) { }
-
-        public BigInteger(decimal value) { }
-
-        public BigInteger(double value) { }
-
-        public BigInteger(int value) { }
-
-        public BigInteger(long value) { }
-
-        public BigInteger(float value) { }
-
-        [CLSCompliant(false)]
-        public BigInteger(uint value) { }
-
-        [CLSCompliant(false)]
-        public BigInteger(ulong value) { }
-
-        public bool IsEven { get { throw null; } }
-
-        public bool IsOne { get { throw null; } }
-
-        public bool IsPowerOfTwo { get { throw null; } }
-
-        public bool IsZero { get { throw null; } }
-
-        public static BigInteger MinusOne { get { throw null; } }
-
-        public static BigInteger One { get { throw null; } }
-
-        public int Sign { get { throw null; } }
-
-        public static BigInteger Zero { get { throw null; } }
-
-        public static BigInteger Abs(BigInteger value) { throw null; }
-
-        public static BigInteger Add(BigInteger left, BigInteger right) { throw null; }
-
-        public static int Compare(BigInteger left, BigInteger right) { throw null; }
-
-        public int CompareTo(long other) { throw null; }
-
-        public int CompareTo(BigInteger other) { throw null; }
-
-        [CLSCompliant(false)]
-        public int CompareTo(ulong other) { throw null; }
-
-        public static BigInteger Divide(BigInteger dividend, BigInteger divisor) { throw null; }
-
-        public static BigInteger DivRem(BigInteger dividend, BigInteger divisor, out BigInteger remainder) { throw null; }
-
-        public bool Equals(long other) { throw null; }
-
-        public bool Equals(BigInteger other) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        [CLSCompliant(false)]
-        public bool Equals(ulong other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static BigInteger GreatestCommonDivisor(BigInteger left, BigInteger right) { throw null; }
-
-        public static double Log(BigInteger value, double baseValue) { throw null; }
-
-        public static double Log(BigInteger value) { throw null; }
-
-        public static double Log10(BigInteger value) { throw null; }
-
-        public static BigInteger Max(BigInteger left, BigInteger right) { throw null; }
-
-        public static BigInteger Min(BigInteger left, BigInteger right) { throw null; }
-
-        public static BigInteger ModPow(BigInteger value, BigInteger exponent, BigInteger modulus) { throw null; }
-
-        public static BigInteger Multiply(BigInteger left, BigInteger right) { throw null; }
-
-        public static BigInteger Negate(BigInteger value) { throw null; }
-
-        public static BigInteger operator +(BigInteger left, BigInteger right) { throw null; }
-
-        public static BigInteger operator &(BigInteger left, BigInteger right) { throw null; }
-
-        public static BigInteger operator |(BigInteger left, BigInteger right) { throw null; }
-
-        public static BigInteger operator --(BigInteger value) { throw null; }
-
-        public static BigInteger operator /(BigInteger dividend, BigInteger divisor) { throw null; }
-
-        public static bool operator ==(long left, BigInteger right) { throw null; }
-
-        public static bool operator ==(BigInteger left, long right) { throw null; }
-
-        public static bool operator ==(BigInteger left, BigInteger right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool operator ==(BigInteger left, ulong right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool operator ==(ulong left, BigInteger right) { throw null; }
-
-        public static BigInteger operator ^(BigInteger left, BigInteger right) { throw null; }
-
-        public static explicit operator BigInteger(decimal value) { throw null; }
-
-        public static explicit operator BigInteger(double value) { throw null; }
-
-        public static explicit operator byte(BigInteger value) { throw null; }
-
-        public static explicit operator decimal(BigInteger value) { throw null; }
-
-        public static explicit operator double(BigInteger value) { throw null; }
-
-        public static explicit operator short(BigInteger value) { throw null; }
-
-        public static explicit operator int(BigInteger value) { throw null; }
-
-        public static explicit operator long(BigInteger value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator sbyte(BigInteger value) { throw null; }
-
-        public static explicit operator float(BigInteger value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator ushort(BigInteger value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator uint(BigInteger value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator ulong(BigInteger value) { throw null; }
-
-        public static explicit operator BigInteger(float value) { throw null; }
-
-        public static bool operator >(long left, BigInteger right) { throw null; }
-
-        public static bool operator >(BigInteger left, long right) { throw null; }
-
-        public static bool operator >(BigInteger left, BigInteger right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool operator >(BigInteger left, ulong right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool operator >(ulong left, BigInteger right) { throw null; }
-
-        public static bool operator >=(long left, BigInteger right) { throw null; }
-
-        public static bool operator >=(BigInteger left, long right) { throw null; }
-
-        public static bool operator >=(BigInteger left, BigInteger right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool operator >=(BigInteger left, ulong right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool operator >=(ulong left, BigInteger right) { throw null; }
-
-        public static implicit operator BigInteger(byte value) { throw null; }
-
-        public static implicit operator BigInteger(short value) { throw null; }
-
-        public static implicit operator BigInteger(int value) { throw null; }
-
-        public static implicit operator BigInteger(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator BigInteger(sbyte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator BigInteger(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator BigInteger(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator BigInteger(ulong value) { throw null; }
-
-        public static BigInteger operator ++(BigInteger value) { throw null; }
-
-        public static bool operator !=(long left, BigInteger right) { throw null; }
-
-        public static bool operator !=(BigInteger left, long right) { throw null; }
-
-        public static bool operator !=(BigInteger left, BigInteger right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool operator !=(BigInteger left, ulong right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool operator !=(ulong left, BigInteger right) { throw null; }
-
-        public static BigInteger operator <<(BigInteger value, int shift) { throw null; }
-
-        public static bool operator <(long left, BigInteger right) { throw null; }
-
-        public static bool operator <(BigInteger left, long right) { throw null; }
-
-        public static bool operator <(BigInteger left, BigInteger right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool operator <(BigInteger left, ulong right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool operator <(ulong left, BigInteger right) { throw null; }
-
-        public static bool operator <=(long left, BigInteger right) { throw null; }
-
-        public static bool operator <=(BigInteger left, long right) { throw null; }
-
-        public static bool operator <=(BigInteger left, BigInteger right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool operator <=(BigInteger left, ulong right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static bool operator <=(ulong left, BigInteger right) { throw null; }
-
-        public static BigInteger operator %(BigInteger dividend, BigInteger divisor) { throw null; }
-
-        public static BigInteger operator *(BigInteger left, BigInteger right) { throw null; }
-
-        public static BigInteger operator ~(BigInteger value) { throw null; }
-
-        public static BigInteger operator >>(BigInteger value, int shift) { throw null; }
-
-        public static BigInteger operator -(BigInteger left, BigInteger right) { throw null; }
-
-        public static BigInteger operator -(BigInteger value) { throw null; }
-
-        public static BigInteger operator +(BigInteger value) { throw null; }
-
-        public static BigInteger Parse(string value, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static BigInteger Parse(string value, Globalization.NumberStyles style) { throw null; }
-
-        public static BigInteger Parse(string value, IFormatProvider provider) { throw null; }
-
-        public static BigInteger Parse(string value) { throw null; }
-
-        public static BigInteger Pow(BigInteger value, int exponent) { throw null; }
-
-        public static BigInteger Remainder(BigInteger dividend, BigInteger divisor) { throw null; }
-
-        public static BigInteger Subtract(BigInteger left, BigInteger right) { throw null; }
-
-        int IComparable.CompareTo(object obj) { throw null; }
-
-        public byte[] ToByteArray() { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public string ToString(IFormatProvider provider) { throw null; }
-
-        public string ToString(string format, IFormatProvider provider) { throw null; }
-
-        public string ToString(string format) { throw null; }
-
-        public static bool TryParse(string value, Globalization.NumberStyles style, IFormatProvider provider, out BigInteger result) { throw null; }
-
-        public static bool TryParse(string value, out BigInteger result) { throw null; }
-    }
-
-    public partial struct Complex : IEquatable<Complex>, IFormattable
-    {
-        public static readonly Complex ImaginaryOne;
-        public static readonly Complex One;
-        public static readonly Complex Zero;
-        public Complex(double real, double imaginary) { }
-
-        public double Imaginary { get { throw null; } }
-
-        public double Magnitude { get { throw null; } }
-
-        public double Phase { get { throw null; } }
-
-        public double Real { get { throw null; } }
-
-        public static double Abs(Complex value) { throw null; }
-
-        public static Complex Acos(Complex value) { throw null; }
-
-        public static Complex Add(Complex left, Complex right) { throw null; }
-
-        public static Complex Asin(Complex value) { throw null; }
-
-        public static Complex Atan(Complex value) { throw null; }
-
-        public static Complex Conjugate(Complex value) { throw null; }
-
-        public static Complex Cos(Complex value) { throw null; }
-
-        public static Complex Cosh(Complex value) { throw null; }
-
-        public static Complex Divide(Complex dividend, Complex divisor) { throw null; }
-
-        public bool Equals(Complex value) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public static Complex Exp(Complex value) { throw null; }
-
-        public static Complex FromPolarCoordinates(double magnitude, double phase) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static Complex Log(Complex value, double baseValue) { throw null; }
-
-        public static Complex Log(Complex value) { throw null; }
-
-        public static Complex Log10(Complex value) { throw null; }
-
-        public static Complex Multiply(Complex left, Complex right) { throw null; }
-
-        public static Complex Negate(Complex value) { throw null; }
-
-        public static Complex operator +(Complex left, Complex right) { throw null; }
-
-        public static Complex operator /(Complex left, Complex right) { throw null; }
-
-        public static bool operator ==(Complex left, Complex right) { throw null; }
-
-        public static explicit operator Complex(decimal value) { throw null; }
-
-        public static explicit operator Complex(BigInteger value) { throw null; }
-
-        public static implicit operator Complex(byte value) { throw null; }
-
-        public static implicit operator Complex(double value) { throw null; }
-
-        public static implicit operator Complex(short value) { throw null; }
-
-        public static implicit operator Complex(int value) { throw null; }
-
-        public static implicit operator Complex(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Complex(sbyte value) { throw null; }
-
-        public static implicit operator Complex(float value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Complex(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Complex(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Complex(ulong value) { throw null; }
-
-        public static bool operator !=(Complex left, Complex right) { throw null; }
-
-        public static Complex operator *(Complex left, Complex right) { throw null; }
-
-        public static Complex operator -(Complex left, Complex right) { throw null; }
-
-        public static Complex operator -(Complex value) { throw null; }
-
-        public static Complex Pow(Complex value, double power) { throw null; }
-
-        public static Complex Pow(Complex value, Complex power) { throw null; }
-
-        public static Complex Reciprocal(Complex value) { throw null; }
-
-        public static Complex Sin(Complex value) { throw null; }
-
-        public static Complex Sinh(Complex value) { throw null; }
-
-        public static Complex Sqrt(Complex value) { throw null; }
-
-        public static Complex Subtract(Complex left, Complex right) { throw null; }
-
-        public static Complex Tan(Complex value) { throw null; }
-
-        public static Complex Tanh(Complex value) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public string ToString(IFormatProvider provider) { throw null; }
-
-        public string ToString(string format, IFormatProvider provider) { throw null; }
-
-        public string ToString(string format) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime.numerics/4.3.0/system.runtime.numerics.nuspec b/src/referencePackages/src/system.runtime.numerics/4.3.0/system.runtime.numerics.nuspec
deleted file mode 100644
index 706078a9..00000000
--- a/src/referencePackages/src/system.runtime.numerics/4.3.0/system.runtime.numerics.nuspec
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Runtime.Numerics</id>
-    <version>4.3.0</version>
-    <title>System.Runtime.Numerics</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides the numeric types System.Numerics.BigInteger and System.Numerics.Complex, which complement the numeric primitives, such as System.Byte, System.Double and System.Int32.
-
-Commonly Used Types:
-System.Numerics.BigInteger
-System.Numerics.Complex
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.1">
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Globalization" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime/4.3.0/System.Runtime.4.3.0.csproj b/src/referencePackages/src/system.runtime/4.3.0/System.Runtime.4.3.0.csproj
deleted file mode 100644
index 84e419f1..00000000
--- a/src/referencePackages/src/system.runtime/4.3.0/System.Runtime.4.3.0.csproj
+++ /dev/null
@@ -1,28 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.2;netstandard1.3;netstandard1.5</TargetFrameworks>
-    <AssemblyName>System.Runtime</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.2'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.5'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.0/System.Runtime.cs b/src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.0/System.Runtime.cs
deleted file mode 100644
index 2fc78e4c..00000000
--- a/src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.0/System.Runtime.cs
+++ /dev/null
@@ -1,4306 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: AssemblyTitle("System.Runtime.dll")]
-[assembly: AssemblyDescription("System.Runtime.dll")]
-[assembly: AssemblyDefaultAlias("System.Runtime.dll")]
-[assembly: AssemblyCompany("Microsoft Corporation")]
-[assembly: AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: AssemblyFileVersion("4.0.30319.17929")]
-[assembly: AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public delegate void Action();
-    public delegate void Action<in T>(T obj);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, in T16>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
-    public delegate void Action<in T1, in T2>(T1 arg1, T2 arg2);
-    public delegate void Action<in T1, in T2, in T3>(T1 arg1, T2 arg2, T3 arg3);
-    public delegate void Action<in T1, in T2, in T3, in T4>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
-    public static partial class Activator
-    {
-        public static Object CreateInstance(Type type, params Object[] args) { throw null; }
-
-        public static Object CreateInstance(Type type) { throw null; }
-
-        public static T CreateInstance<T>() { throw null; }
-    }
-
-    public partial class ArgumentException : Exception
-    {
-        public ArgumentException() { }
-
-        public ArgumentException(String message, Exception innerException) { }
-
-        public ArgumentException(String message, String paramName, Exception innerException) { }
-
-        public ArgumentException(String message, String paramName) { }
-
-        public ArgumentException(String message) { }
-
-        public override String Message { get { throw null; } }
-
-        public virtual String ParamName { get { throw null; } }
-    }
-
-    public partial class ArgumentNullException : ArgumentException
-    {
-        public ArgumentNullException() { }
-
-        public ArgumentNullException(String message, Exception innerException) { }
-
-        public ArgumentNullException(String paramName, String message) { }
-
-        public ArgumentNullException(String paramName) { }
-    }
-
-    public partial class ArgumentOutOfRangeException : ArgumentException
-    {
-        public ArgumentOutOfRangeException() { }
-
-        public ArgumentOutOfRangeException(String message, Exception innerException) { }
-
-        public ArgumentOutOfRangeException(String paramName, Object actualValue, String message) { }
-
-        public ArgumentOutOfRangeException(String paramName, String message) { }
-
-        public ArgumentOutOfRangeException(String paramName) { }
-
-        public virtual Object ActualValue { get { throw null; } }
-
-        public override String Message { get { throw null; } }
-    }
-
-    public partial class ArithmeticException : Exception
-    {
-        public ArithmeticException() { }
-
-        public ArithmeticException(String message, Exception innerException) { }
-
-        public ArithmeticException(String message) { }
-    }
-
-    public abstract partial class Array : Collections.IList, Collections.ICollection, Collections.IEnumerable, Collections.IStructuralComparable, Collections.IStructuralEquatable
-    {
-        internal Array() { }
-
-        public Int32 Length { get { throw null; } }
-
-        public Int32 Rank { get { throw null; } }
-
-        Int32 Collections.ICollection.Count { get { throw null; } }
-
-        Boolean Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        Object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        Boolean Collections.IList.IsFixedSize { get { throw null; } }
-
-        Boolean Collections.IList.IsReadOnly { get { throw null; } }
-
-        Object Collections.IList.this[Int32 index] { get { throw null; } set { } }
-
-        public static Int32 BinarySearch(Array array, Int32 index, Int32 length, Object value, Collections.IComparer comparer) { throw null; }
-
-        public static Int32 BinarySearch(Array array, Int32 index, Int32 length, Object value) { throw null; }
-
-        public static Int32 BinarySearch(Array array, Object value, Collections.IComparer comparer) { throw null; }
-
-        public static Int32 BinarySearch(Array array, Object value) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, T value, Collections.Generic.IComparer<T> comparer) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, T value) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, Int32 index, Int32 length, T value, Collections.Generic.IComparer<T> comparer) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, Int32 index, Int32 length, T value) { throw null; }
-
-        public static void Clear(Array array, Int32 index, Int32 length) { }
-
-        public Object Clone() { throw null; }
-
-        public static void ConstrainedCopy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length) { }
-
-        public static void Copy(Array sourceArray, Array destinationArray, Int32 length) { }
-
-        public static void Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length) { }
-
-        public void CopyTo(Array array, Int32 index) { }
-
-        public static Array CreateInstance(Type elementType, Int32[] lengths, Int32[] lowerBounds) { throw null; }
-
-        public static Array CreateInstance(Type elementType, params Int32[] lengths) { throw null; }
-
-        public static Boolean Exists<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static T Find<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static T[] FindAll<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static Int32 FindIndex<T>(T[] array, Int32 startIndex, Int32 count, Predicate<T> match) { throw null; }
-
-        public static Int32 FindIndex<T>(T[] array, Int32 startIndex, Predicate<T> match) { throw null; }
-
-        public static Int32 FindIndex<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static T FindLast<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static Int32 FindLastIndex<T>(T[] array, Int32 startIndex, Int32 count, Predicate<T> match) { throw null; }
-
-        public static Int32 FindLastIndex<T>(T[] array, Int32 startIndex, Predicate<T> match) { throw null; }
-
-        public static Int32 FindLastIndex<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        public Int32 GetLength(Int32 dimension) { throw null; }
-
-        public Int32 GetLowerBound(Int32 dimension) { throw null; }
-
-        public Int32 GetUpperBound(Int32 dimension) { throw null; }
-
-        public Object GetValue(params Int32[] indices) { throw null; }
-
-        public static Int32 IndexOf(Array array, Object value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 IndexOf(Array array, Object value, Int32 startIndex) { throw null; }
-
-        public static Int32 IndexOf(Array array, Object value) { throw null; }
-
-        public static Int32 IndexOf<T>(T[] array, T value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 IndexOf<T>(T[] array, T value, Int32 startIndex) { throw null; }
-
-        public static Int32 IndexOf<T>(T[] array, T value) { throw null; }
-
-        public void Initialize() { }
-
-        public static Int32 LastIndexOf(Array array, Object value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 LastIndexOf(Array array, Object value, Int32 startIndex) { throw null; }
-
-        public static Int32 LastIndexOf(Array array, Object value) { throw null; }
-
-        public static Int32 LastIndexOf<T>(T[] array, T value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 LastIndexOf<T>(T[] array, T value, Int32 startIndex) { throw null; }
-
-        public static Int32 LastIndexOf<T>(T[] array, T value) { throw null; }
-
-        public static void Resize<T>(ref T[] array, Int32 newSize) { }
-
-        public static void Reverse(Array array, Int32 index, Int32 length) { }
-
-        public static void Reverse(Array array) { }
-
-        public void SetValue(Object value, params Int32[] indices) { }
-
-        public static void Sort(Array array, Collections.IComparer comparer) { }
-
-        public static void Sort(Array array, Int32 index, Int32 length, Collections.IComparer comparer) { }
-
-        public static void Sort(Array array, Int32 index, Int32 length) { }
-
-        public static void Sort(Array array) { }
-
-        public static void Sort<T>(T[] array, Collections.Generic.IComparer<T> comparer) { }
-
-        public static void Sort<T>(T[] array, Comparison<T> comparison) { }
-
-        public static void Sort<T>(T[] array, Int32 index, Int32 length, Collections.Generic.IComparer<T> comparer) { }
-
-        public static void Sort<T>(T[] array, Int32 index, Int32 length) { }
-
-        public static void Sort<T>(T[] array) { }
-
-        Int32 Collections.IList.Add(Object value) { throw null; }
-
-        void Collections.IList.Clear() { }
-
-        Boolean Collections.IList.Contains(Object value) { throw null; }
-
-        Int32 Collections.IList.IndexOf(Object value) { throw null; }
-
-        void Collections.IList.Insert(Int32 index, Object value) { }
-
-        void Collections.IList.Remove(Object value) { }
-
-        void Collections.IList.RemoveAt(Int32 index) { }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        public static Boolean TrueForAll<T>(T[] array, Predicate<T> match) { throw null; }
-    }
-
-    public partial struct ArraySegment<T> : Collections.Generic.IList<T>, Collections.Generic.ICollection<T>, Collections.Generic.IReadOnlyList<T>, Collections.Generic.IReadOnlyCollection<T>, Collections.Generic.IEnumerable<T>, Collections.IEnumerable
-    {
-        public ArraySegment(T[] array, Int32 offset, Int32 count) { }
-
-        public ArraySegment(T[] array) { }
-
-        public T[] Array { get { throw null; } }
-
-        public Int32 Count { get { throw null; } }
-
-        public Int32 Offset { get { throw null; } }
-
-        Boolean Collections.Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        T Collections.Generic.IList<T>.this[Int32 index] { get { throw null; } set { } }
-
-        T Collections.Generic.IReadOnlyList<T>.this[Int32 index] { get { throw null; } }
-
-        public Boolean Equals(ArraySegment<T> obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(ArraySegment<T> a, ArraySegment<T> b) { throw null; }
-
-        public static Boolean operator !=(ArraySegment<T> a, ArraySegment<T> b) { throw null; }
-
-        void Collections.Generic.ICollection<T>.Add(T item) { }
-
-        void Collections.Generic.ICollection<T>.Clear() { }
-
-        Boolean Collections.Generic.ICollection<T>.Contains(T item) { throw null; }
-
-        void Collections.Generic.ICollection<T>.CopyTo(T[] array, Int32 arrayIndex) { }
-
-        Boolean Collections.Generic.ICollection<T>.Remove(T item) { throw null; }
-
-        Collections.Generic.IEnumerator<T> Collections.Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        Int32 Collections.Generic.IList<T>.IndexOf(T item) { throw null; }
-
-        void Collections.Generic.IList<T>.Insert(Int32 index, T item) { }
-
-        void Collections.Generic.IList<T>.RemoveAt(Int32 index) { }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-    }
-
-    public partial class ArrayTypeMismatchException : Exception
-    {
-        public ArrayTypeMismatchException() { }
-
-        public ArrayTypeMismatchException(String message, Exception innerException) { }
-
-        public ArrayTypeMismatchException(String message) { }
-    }
-
-    public delegate void AsyncCallback(IAsyncResult ar);
-    [AttributeUsage(AttributeTargets.All, Inherited = true, AllowMultiple = false)]
-    public abstract partial class Attribute
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-    }
-
-    [Flags]
-    public enum AttributeTargets
-    {
-        Assembly = 1,
-        Module = 2,
-        Class = 4,
-        Struct = 8,
-        Enum = 16,
-        Constructor = 32,
-        Method = 64,
-        Property = 128,
-        Field = 256,
-        Event = 512,
-        Interface = 1024,
-        Parameter = 2048,
-        Delegate = 4096,
-        ReturnValue = 8192,
-        GenericParameter = 16384,
-        All = 32767
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = true)]
-    public sealed partial class AttributeUsageAttribute : Attribute
-    {
-        public AttributeUsageAttribute(AttributeTargets validOn) { }
-
-        public Boolean AllowMultiple { get { throw null; } set { } }
-
-        public Boolean Inherited { get { throw null; } set { } }
-
-        public AttributeTargets ValidOn { get { throw null; } }
-    }
-
-    public partial class BadImageFormatException : Exception
-    {
-        public BadImageFormatException() { }
-
-        public BadImageFormatException(String message, Exception inner) { }
-
-        public BadImageFormatException(String message, String fileName, Exception inner) { }
-
-        public BadImageFormatException(String message, String fileName) { }
-
-        public BadImageFormatException(String message) { }
-
-        public String FileName { get { throw null; } }
-
-        public override String Message { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial struct Boolean : IComparable, IComparable<Boolean>, IEquatable<Boolean>
-    {
-        public static readonly String FalseString;
-        public static readonly String TrueString;
-        public Int32 CompareTo(Boolean value) { throw null; }
-
-        public Boolean Equals(Boolean obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean Parse(String value) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public static Boolean TryParse(String value, out Boolean result) { throw null; }
-    }
-
-    public static partial class Buffer
-    {
-        public static void BlockCopy(Array src, Int32 srcOffset, Array dst, Int32 dstOffset, Int32 count) { }
-
-        public static Int32 ByteLength(Array array) { throw null; }
-
-        public static Byte GetByte(Array array, Int32 index) { throw null; }
-
-        public static void SetByte(Array array, Int32 index, Byte value) { }
-    }
-
-    public partial struct Byte : IComparable, IComparable<Byte>, IEquatable<Byte>, IFormattable
-    {
-        public const Byte MaxValue = 255;
-        public const Byte MinValue = 0;
-        public Int32 CompareTo(Byte value) { throw null; }
-
-        public Boolean Equals(Byte obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Byte Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Byte Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Byte Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Byte Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, out Byte result) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Byte result) { throw null; }
-    }
-
-    public partial struct Char : IComparable, IComparable<Char>, IEquatable<Char>
-    {
-        public const Char MaxValue = '\uffff';
-        public const Char MinValue = '\0';
-        public Int32 CompareTo(Char value) { throw null; }
-
-        public static String ConvertFromUtf32(Int32 utf32) { throw null; }
-
-        public static Int32 ConvertToUtf32(Char highSurrogate, Char lowSurrogate) { throw null; }
-
-        public static Int32 ConvertToUtf32(String s, Int32 index) { throw null; }
-
-        public Boolean Equals(Char obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Double GetNumericValue(Char c) { throw null; }
-
-        public static Double GetNumericValue(String s, Int32 index) { throw null; }
-
-        public static Boolean IsControl(Char c) { throw null; }
-
-        public static Boolean IsControl(String s, Int32 index) { throw null; }
-
-        public static Boolean IsDigit(Char c) { throw null; }
-
-        public static Boolean IsDigit(String s, Int32 index) { throw null; }
-
-        public static Boolean IsHighSurrogate(Char c) { throw null; }
-
-        public static Boolean IsHighSurrogate(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLetter(Char c) { throw null; }
-
-        public static Boolean IsLetter(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLetterOrDigit(Char c) { throw null; }
-
-        public static Boolean IsLetterOrDigit(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLower(Char c) { throw null; }
-
-        public static Boolean IsLower(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLowSurrogate(Char c) { throw null; }
-
-        public static Boolean IsLowSurrogate(String s, Int32 index) { throw null; }
-
-        public static Boolean IsNumber(Char c) { throw null; }
-
-        public static Boolean IsNumber(String s, Int32 index) { throw null; }
-
-        public static Boolean IsPunctuation(Char c) { throw null; }
-
-        public static Boolean IsPunctuation(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSeparator(Char c) { throw null; }
-
-        public static Boolean IsSeparator(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSurrogate(Char c) { throw null; }
-
-        public static Boolean IsSurrogate(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSurrogatePair(Char highSurrogate, Char lowSurrogate) { throw null; }
-
-        public static Boolean IsSurrogatePair(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSymbol(Char c) { throw null; }
-
-        public static Boolean IsSymbol(String s, Int32 index) { throw null; }
-
-        public static Boolean IsUpper(Char c) { throw null; }
-
-        public static Boolean IsUpper(String s, Int32 index) { throw null; }
-
-        public static Boolean IsWhiteSpace(Char c) { throw null; }
-
-        public static Boolean IsWhiteSpace(String s, Int32 index) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public static Char ToLower(Char c) { throw null; }
-
-        public static Char ToLowerInvariant(Char c) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public static String ToString(Char c) { throw null; }
-
-        public static Char ToUpper(Char c) { throw null; }
-
-        public static Char ToUpperInvariant(Char c) { throw null; }
-
-        public static Boolean TryParse(String s, out Char result) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.All, Inherited = true, AllowMultiple = false)]
-    public sealed partial class CLSCompliantAttribute : Attribute
-    {
-        public CLSCompliantAttribute(Boolean isCompliant) { }
-
-        public Boolean IsCompliant { get { throw null; } }
-    }
-
-    public delegate Int32 Comparison<in T>(T x, T y);
-    public partial struct DateTime : IComparable, IComparable<DateTime>, IEquatable<DateTime>, IFormattable
-    {
-        public static readonly DateTime MaxValue;
-        public static readonly DateTime MinValue;
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, DateTimeKind kind) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, DateTimeKind kind) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day) { }
-
-        public DateTime(Int64 ticks, DateTimeKind kind) { }
-
-        public DateTime(Int64 ticks) { }
-
-        public DateTime Date { get { throw null; } }
-
-        public Int32 Day { get { throw null; } }
-
-        public DayOfWeek DayOfWeek { get { throw null; } }
-
-        public Int32 DayOfYear { get { throw null; } }
-
-        public Int32 Hour { get { throw null; } }
-
-        public DateTimeKind Kind { get { throw null; } }
-
-        public Int32 Millisecond { get { throw null; } }
-
-        public Int32 Minute { get { throw null; } }
-
-        public Int32 Month { get { throw null; } }
-
-        public static DateTime Now { get { throw null; } }
-
-        public Int32 Second { get { throw null; } }
-
-        public Int64 Ticks { get { throw null; } }
-
-        public TimeSpan TimeOfDay { get { throw null; } }
-
-        public static DateTime Today { get { throw null; } }
-
-        public static DateTime UtcNow { get { throw null; } }
-
-        public Int32 Year { get { throw null; } }
-
-        public DateTime Add(TimeSpan value) { throw null; }
-
-        public DateTime AddDays(Double value) { throw null; }
-
-        public DateTime AddHours(Double value) { throw null; }
-
-        public DateTime AddMilliseconds(Double value) { throw null; }
-
-        public DateTime AddMinutes(Double value) { throw null; }
-
-        public DateTime AddMonths(Int32 months) { throw null; }
-
-        public DateTime AddSeconds(Double value) { throw null; }
-
-        public DateTime AddTicks(Int64 value) { throw null; }
-
-        public DateTime AddYears(Int32 value) { throw null; }
-
-        public static Int32 Compare(DateTime t1, DateTime t2) { throw null; }
-
-        public Int32 CompareTo(DateTime value) { throw null; }
-
-        public static Int32 DaysInMonth(Int32 year, Int32 month) { throw null; }
-
-        public static Boolean Equals(DateTime t1, DateTime t2) { throw null; }
-
-        public Boolean Equals(DateTime value) { throw null; }
-
-        public override Boolean Equals(Object value) { throw null; }
-
-        public static DateTime FromBinary(Int64 dateData) { throw null; }
-
-        public static DateTime FromFileTime(Int64 fileTime) { throw null; }
-
-        public static DateTime FromFileTimeUtc(Int64 fileTime) { throw null; }
-
-        public String[] GetDateTimeFormats() { throw null; }
-
-        public String[] GetDateTimeFormats(Char format, IFormatProvider provider) { throw null; }
-
-        public String[] GetDateTimeFormats(Char format) { throw null; }
-
-        public String[] GetDateTimeFormats(IFormatProvider provider) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public Boolean IsDaylightSavingTime() { throw null; }
-
-        public static Boolean IsLeapYear(Int32 year) { throw null; }
-
-        public static DateTime operator +(DateTime d, TimeSpan t) { throw null; }
-
-        public static Boolean operator ==(DateTime d1, DateTime d2) { throw null; }
-
-        public static Boolean operator >(DateTime t1, DateTime t2) { throw null; }
-
-        public static Boolean operator >=(DateTime t1, DateTime t2) { throw null; }
-
-        public static Boolean operator !=(DateTime d1, DateTime d2) { throw null; }
-
-        public static Boolean operator <(DateTime t1, DateTime t2) { throw null; }
-
-        public static Boolean operator <=(DateTime t1, DateTime t2) { throw null; }
-
-        public static TimeSpan operator -(DateTime d1, DateTime d2) { throw null; }
-
-        public static DateTime operator -(DateTime d, TimeSpan t) { throw null; }
-
-        public static DateTime Parse(String s, IFormatProvider provider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public static DateTime Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static DateTime Parse(String s) { throw null; }
-
-        public static DateTime ParseExact(String s, String format, IFormatProvider provider, Globalization.DateTimeStyles style) { throw null; }
-
-        public static DateTime ParseExact(String s, String format, IFormatProvider provider) { throw null; }
-
-        public static DateTime ParseExact(String s, String[] formats, IFormatProvider provider, Globalization.DateTimeStyles style) { throw null; }
-
-        public static DateTime SpecifyKind(DateTime value, DateTimeKind kind) { throw null; }
-
-        public TimeSpan Subtract(DateTime value) { throw null; }
-
-        public DateTime Subtract(TimeSpan value) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public Int64 ToBinary() { throw null; }
-
-        public Int64 ToFileTime() { throw null; }
-
-        public Int64 ToFileTimeUtc() { throw null; }
-
-        public DateTime ToLocalTime() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public DateTime ToUniversalTime() { throw null; }
-
-        public static Boolean TryParse(String s, out DateTime result) { throw null; }
-
-        public static Boolean TryParse(String s, IFormatProvider provider, Globalization.DateTimeStyles styles, out DateTime result) { throw null; }
-
-        public static Boolean TryParseExact(String s, String format, IFormatProvider provider, Globalization.DateTimeStyles style, out DateTime result) { throw null; }
-
-        public static Boolean TryParseExact(String s, String[] formats, IFormatProvider provider, Globalization.DateTimeStyles style, out DateTime result) { throw null; }
-    }
-
-    public enum DateTimeKind
-    {
-        Unspecified = 0,
-        Utc = 1,
-        Local = 2
-    }
-
-    public partial struct DateTimeOffset : IComparable, IComparable<DateTimeOffset>, IEquatable<DateTimeOffset>, IFormattable
-    {
-        public static readonly DateTimeOffset MaxValue;
-        public static readonly DateTimeOffset MinValue;
-        public DateTimeOffset(DateTime dateTime, TimeSpan offset) { }
-
-        public DateTimeOffset(DateTime dateTime) { }
-
-        public DateTimeOffset(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, TimeSpan offset) { }
-
-        public DateTimeOffset(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, TimeSpan offset) { }
-
-        public DateTimeOffset(Int64 ticks, TimeSpan offset) { }
-
-        public DateTime Date { get { throw null; } }
-
-        public DateTime DateTime { get { throw null; } }
-
-        public Int32 Day { get { throw null; } }
-
-        public DayOfWeek DayOfWeek { get { throw null; } }
-
-        public Int32 DayOfYear { get { throw null; } }
-
-        public Int32 Hour { get { throw null; } }
-
-        public DateTime LocalDateTime { get { throw null; } }
-
-        public Int32 Millisecond { get { throw null; } }
-
-        public Int32 Minute { get { throw null; } }
-
-        public Int32 Month { get { throw null; } }
-
-        public static DateTimeOffset Now { get { throw null; } }
-
-        public TimeSpan Offset { get { throw null; } }
-
-        public Int32 Second { get { throw null; } }
-
-        public Int64 Ticks { get { throw null; } }
-
-        public TimeSpan TimeOfDay { get { throw null; } }
-
-        public DateTime UtcDateTime { get { throw null; } }
-
-        public static DateTimeOffset UtcNow { get { throw null; } }
-
-        public Int64 UtcTicks { get { throw null; } }
-
-        public Int32 Year { get { throw null; } }
-
-        public DateTimeOffset Add(TimeSpan timeSpan) { throw null; }
-
-        public DateTimeOffset AddDays(Double days) { throw null; }
-
-        public DateTimeOffset AddHours(Double hours) { throw null; }
-
-        public DateTimeOffset AddMilliseconds(Double milliseconds) { throw null; }
-
-        public DateTimeOffset AddMinutes(Double minutes) { throw null; }
-
-        public DateTimeOffset AddMonths(Int32 months) { throw null; }
-
-        public DateTimeOffset AddSeconds(Double seconds) { throw null; }
-
-        public DateTimeOffset AddTicks(Int64 ticks) { throw null; }
-
-        public DateTimeOffset AddYears(Int32 years) { throw null; }
-
-        public static Int32 Compare(DateTimeOffset first, DateTimeOffset second) { throw null; }
-
-        public Int32 CompareTo(DateTimeOffset other) { throw null; }
-
-        public static Boolean Equals(DateTimeOffset first, DateTimeOffset second) { throw null; }
-
-        public Boolean Equals(DateTimeOffset other) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean EqualsExact(DateTimeOffset other) { throw null; }
-
-        public static DateTimeOffset FromFileTime(Int64 fileTime) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan) { throw null; }
-
-        public static Boolean operator ==(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator >(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator >=(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static implicit operator DateTimeOffset(DateTime dateTime) { throw null; }
-
-        public static Boolean operator !=(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator <(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator <=(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan) { throw null; }
-
-        public static DateTimeOffset Parse(String input, IFormatProvider formatProvider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public static DateTimeOffset Parse(String input, IFormatProvider formatProvider) { throw null; }
-
-        public static DateTimeOffset Parse(String input) { throw null; }
-
-        public static DateTimeOffset ParseExact(String input, String format, IFormatProvider formatProvider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public static DateTimeOffset ParseExact(String input, String format, IFormatProvider formatProvider) { throw null; }
-
-        public static DateTimeOffset ParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public TimeSpan Subtract(DateTimeOffset value) { throw null; }
-
-        public DateTimeOffset Subtract(TimeSpan value) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public Int64 ToFileTime() { throw null; }
-
-        public DateTimeOffset ToLocalTime() { throw null; }
-
-        public DateTimeOffset ToOffset(TimeSpan offset) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider formatProvider) { throw null; }
-
-        public String ToString(String format, IFormatProvider formatProvider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public DateTimeOffset ToUniversalTime() { throw null; }
-
-        public static Boolean TryParse(String input, out DateTimeOffset result) { throw null; }
-
-        public static Boolean TryParse(String input, IFormatProvider formatProvider, Globalization.DateTimeStyles styles, out DateTimeOffset result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, IFormatProvider formatProvider, Globalization.DateTimeStyles styles, out DateTimeOffset result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.DateTimeStyles styles, out DateTimeOffset result) { throw null; }
-    }
-
-    public enum DayOfWeek
-    {
-        Sunday = 0,
-        Monday = 1,
-        Tuesday = 2,
-        Wednesday = 3,
-        Thursday = 4,
-        Friday = 5,
-        Saturday = 6
-    }
-
-    public partial struct Decimal : IComparable, IComparable<Decimal>, IEquatable<Decimal>, IFormattable
-    {
-        public const Decimal MaxValue = 79228162514264337593543950335M;
-        public const Decimal MinusOne = -1M;
-        public const Decimal MinValue = -79228162514264337593543950335M;
-        public const Decimal One = 1M;
-        public const Decimal Zero = 0M;
-        public Decimal(Double value) { }
-
-        public Decimal(Int32 lo, Int32 mid, Int32 hi, Boolean isNegative, Byte scale) { }
-
-        public Decimal(Int32 value) { }
-
-        public Decimal(Int32[] bits) { }
-
-        public Decimal(Int64 value) { }
-
-        public Decimal(Single value) { }
-
-        [CLSCompliant(false)]
-        public Decimal(UInt32 value) { }
-
-        [CLSCompliant(false)]
-        public Decimal(UInt64 value) { }
-
-        public static Decimal Add(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal Ceiling(Decimal d) { throw null; }
-
-        public static Int32 Compare(Decimal d1, Decimal d2) { throw null; }
-
-        public Int32 CompareTo(Decimal value) { throw null; }
-
-        public static Decimal Divide(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean Equals(Decimal d1, Decimal d2) { throw null; }
-
-        public Boolean Equals(Decimal value) { throw null; }
-
-        public override Boolean Equals(Object value) { throw null; }
-
-        public static Decimal Floor(Decimal d) { throw null; }
-
-        public static Int32[] GetBits(Decimal d) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Decimal Multiply(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal Negate(Decimal d) { throw null; }
-
-        public static Decimal operator +(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator --(Decimal d) { throw null; }
-
-        public static Decimal operator /(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator ==(Decimal d1, Decimal d2) { throw null; }
-
-        public static explicit operator Byte(Decimal value) { throw null; }
-
-        public static explicit operator Char(Decimal value) { throw null; }
-
-        public static explicit operator Double(Decimal value) { throw null; }
-
-        public static explicit operator Int16(Decimal value) { throw null; }
-
-        public static explicit operator Int32(Decimal value) { throw null; }
-
-        public static explicit operator Int64(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator SByte(Decimal value) { throw null; }
-
-        public static explicit operator Single(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator UInt16(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator UInt32(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator UInt64(Decimal value) { throw null; }
-
-        public static explicit operator Decimal(Double value) { throw null; }
-
-        public static explicit operator Decimal(Single value) { throw null; }
-
-        public static Boolean operator >(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator >=(Decimal d1, Decimal d2) { throw null; }
-
-        public static implicit operator Decimal(Byte value) { throw null; }
-
-        public static implicit operator Decimal(Char value) { throw null; }
-
-        public static implicit operator Decimal(Int16 value) { throw null; }
-
-        public static implicit operator Decimal(Int32 value) { throw null; }
-
-        public static implicit operator Decimal(Int64 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(SByte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(UInt16 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(UInt32 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(UInt64 value) { throw null; }
-
-        public static Decimal operator ++(Decimal d) { throw null; }
-
-        public static Boolean operator !=(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator <(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator <=(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator %(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator *(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator -(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator -(Decimal d) { throw null; }
-
-        public static Decimal operator +(Decimal d) { throw null; }
-
-        public static Decimal Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Decimal Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Decimal Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Decimal Parse(String s) { throw null; }
-
-        public static Decimal Remainder(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal Subtract(Decimal d1, Decimal d2) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public static Byte ToByte(Decimal value) { throw null; }
-
-        public static Double ToDouble(Decimal d) { throw null; }
-
-        public static Int16 ToInt16(Decimal value) { throw null; }
-
-        public static Int32 ToInt32(Decimal d) { throw null; }
-
-        public static Int64 ToInt64(Decimal d) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte ToSByte(Decimal value) { throw null; }
-
-        public static Single ToSingle(Decimal d) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 ToUInt16(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 ToUInt32(Decimal d) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 ToUInt64(Decimal d) { throw null; }
-
-        public static Decimal Truncate(Decimal d) { throw null; }
-
-        public static Boolean TryParse(String s, out Decimal result) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Decimal result) { throw null; }
-    }
-
-    public abstract partial class Delegate
-    {
-        internal Delegate() { }
-
-        public Object Target { get { throw null; } }
-
-        public static Delegate Combine(Delegate a, Delegate b) { throw null; }
-
-        public static Delegate Combine(params Delegate[] delegates) { throw null; }
-
-        public Object DynamicInvoke(params Object[] args) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public virtual Delegate[] GetInvocationList() { throw null; }
-
-        public static Boolean operator ==(Delegate d1, Delegate d2) { throw null; }
-
-        public static Boolean operator !=(Delegate d1, Delegate d2) { throw null; }
-
-        public static Delegate Remove(Delegate source, Delegate value) { throw null; }
-
-        public static Delegate RemoveAll(Delegate source, Delegate value) { throw null; }
-    }
-
-    public partial class DivideByZeroException : ArithmeticException
-    {
-        public DivideByZeroException() { }
-
-        public DivideByZeroException(String message, Exception innerException) { }
-
-        public DivideByZeroException(String message) { }
-    }
-
-    public partial struct Double : IComparable, IComparable<Double>, IEquatable<Double>, IFormattable
-    {
-        public const Double Epsilon = 5E-324D;
-        public const Double MaxValue = 1.7976931348623157E+308D;
-        public const Double MinValue = -1.7976931348623157E+308D;
-        public const Double NaN = 0D / 0D;
-        public const Double NegativeInfinity = -1D / 0D;
-        public const Double PositiveInfinity = 1D / 0D;
-        public Int32 CompareTo(Double value) { throw null; }
-
-        public Boolean Equals(Double obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean IsInfinity(Double d) { throw null; }
-
-        public static Boolean IsNaN(Double d) { throw null; }
-
-        public static Boolean IsNegativeInfinity(Double d) { throw null; }
-
-        public static Boolean IsPositiveInfinity(Double d) { throw null; }
-
-        public static Boolean operator ==(Double left, Double right) { throw null; }
-
-        public static Boolean operator >(Double left, Double right) { throw null; }
-
-        public static Boolean operator >=(Double left, Double right) { throw null; }
-
-        public static Boolean operator !=(Double left, Double right) { throw null; }
-
-        public static Boolean operator <(Double left, Double right) { throw null; }
-
-        public static Boolean operator <=(Double left, Double right) { throw null; }
-
-        public static Double Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Double Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Double Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Double Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, out Double result) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Double result) { throw null; }
-    }
-
-    public abstract partial class Enum : ValueType, IComparable, IFormattable
-    {
-        public Int32 CompareTo(Object target) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public static String Format(Type enumType, Object value, String format) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static String GetName(Type enumType, Object value) { throw null; }
-
-        public static String[] GetNames(Type enumType) { throw null; }
-
-        public static Type GetUnderlyingType(Type enumType) { throw null; }
-
-        public static Array GetValues(Type enumType) { throw null; }
-
-        public Boolean HasFlag(Enum flag) { throw null; }
-
-        public static Boolean IsDefined(Type enumType, Object value) { throw null; }
-
-        public static Object Parse(Type enumType, String value, Boolean ignoreCase) { throw null; }
-
-        public static Object Parse(Type enumType, String value) { throw null; }
-
-        [Obsolete("The provider argument is not used. Please use ToString(String).")]
-        String IFormattable.ToString(String format, IFormatProvider provider) { throw null; }
-
-        public static Object ToObject(Type enumType, Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse<TEnum>(String value, out TEnum result)
-            where TEnum : struct { throw null; }
-
-        public static Boolean TryParse<TEnum>(String value, Boolean ignoreCase, out TEnum result)
-            where TEnum : struct { throw null; }
-    }
-
-    public partial class EventArgs
-    {
-        public static readonly EventArgs Empty;
-    }
-
-    public delegate void EventHandler(Object sender, EventArgs e);
-    public delegate void EventHandler<TEventArgs>(Object sender, TEventArgs e);
-    public partial class Exception
-    {
-        public Exception() { }
-
-        public Exception(String message, Exception innerException) { }
-
-        public Exception(String message) { }
-
-        public virtual Collections.IDictionary Data { get { throw null; } }
-
-        public virtual String HelpLink { get { throw null; } set { } }
-
-        public Int32 HResult { get { throw null; } protected set { } }
-
-        public Exception InnerException { get { throw null; } }
-
-        public virtual String Message { get { throw null; } }
-
-        public virtual String Source { get { throw null; } set { } }
-
-        public virtual String StackTrace { get { throw null; } }
-
-        public virtual Exception GetBaseException() { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Enum, Inherited = false)]
-    public partial class FlagsAttribute : Attribute
-    {
-    }
-
-    public partial class FormatException : Exception
-    {
-        public FormatException() { }
-
-        public FormatException(String message, Exception innerException) { }
-
-        public FormatException(String message) { }
-    }
-
-    public delegate TResult Func<out TResult>();
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, in T16, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
-    public delegate TResult Func<in T, out TResult>(T arg);
-    public delegate TResult Func<in T1, in T2, out TResult>(T1 arg1, T2 arg2);
-    public delegate TResult Func<in T1, in T2, in T3, out TResult>(T1 arg1, T2 arg2, T3 arg3);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
-    public static partial class GC
-    {
-        public static Int32 MaxGeneration { get { throw null; } }
-
-        public static void AddMemoryPressure(Int64 bytesAllocated) { }
-
-        public static void Collect() { }
-
-        public static void Collect(Int32 generation, GCCollectionMode mode, Boolean blocking) { }
-
-        public static void Collect(Int32 generation, GCCollectionMode mode) { }
-
-        public static void Collect(Int32 generation) { }
-
-        public static Int32 CollectionCount(Int32 generation) { throw null; }
-
-        public static Int64 GetTotalMemory(Boolean forceFullCollection) { throw null; }
-
-        public static void KeepAlive(Object obj) { }
-
-        public static void RemoveMemoryPressure(Int64 bytesAllocated) { }
-
-        public static void ReRegisterForFinalize(Object obj) { }
-
-        public static void SuppressFinalize(Object obj) { }
-
-        public static void WaitForPendingFinalizers() { }
-    }
-
-    public enum GCCollectionMode
-    {
-        Default = 0,
-        Forced = 1,
-        Optimized = 2
-    }
-
-    public partial struct Guid : IComparable, IComparable<Guid>, IEquatable<Guid>, IFormattable
-    {
-        public static readonly Guid Empty;
-        public Guid(Byte[] b) { }
-
-        public Guid(Int32 a, Int16 b, Int16 c, Byte d, Byte e, Byte f, Byte g, Byte h, Byte i, Byte j, Byte k) { }
-
-        public Guid(Int32 a, Int16 b, Int16 c, Byte[] d) { }
-
-        public Guid(String g) { }
-
-        public Int32 CompareTo(Guid value) { throw null; }
-
-        public Boolean Equals(Guid g) { throw null; }
-
-        public override Boolean Equals(Object o) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Guid NewGuid() { throw null; }
-
-        public static Boolean operator ==(Guid a, Guid b) { throw null; }
-
-        public static Boolean operator !=(Guid a, Guid b) { throw null; }
-
-        public static Guid Parse(String input) { throw null; }
-
-        public static Guid ParseExact(String input, String format) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        String IFormattable.ToString(String format, IFormatProvider provider) { throw null; }
-
-        public Byte[] ToByteArray() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String input, out Guid result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, out Guid result) { throw null; }
-    }
-
-    public partial interface IAsyncResult
-    {
-        Object AsyncState { get; }
-
-        Threading.WaitHandle AsyncWaitHandle { get; }
-
-        Boolean CompletedSynchronously { get; }
-
-        Boolean IsCompleted { get; }
-    }
-
-    public partial interface IComparable
-    {
-        Int32 CompareTo(Object obj);
-    }
-
-    public partial interface IComparable<in T>
-    {
-        Int32 CompareTo(T other);
-    }
-
-    public partial interface ICustomFormatter
-    {
-        String Format(String format, Object arg, IFormatProvider formatProvider);
-    }
-
-    public partial interface IDisposable
-    {
-        void Dispose();
-    }
-
-    public partial interface IEquatable<T>
-    {
-        Boolean Equals(T other);
-    }
-
-    public partial interface IFormatProvider
-    {
-        Object GetFormat(Type formatType);
-    }
-
-    public partial interface IFormattable
-    {
-        String ToString(String format, IFormatProvider formatProvider);
-    }
-
-    public sealed partial class IndexOutOfRangeException : Exception
-    {
-        public IndexOutOfRangeException() { }
-
-        public IndexOutOfRangeException(String message, Exception innerException) { }
-
-        public IndexOutOfRangeException(String message) { }
-    }
-
-    public partial struct Int16 : IComparable, IComparable<Int16>, IEquatable<Int16>, IFormattable
-    {
-        public const Int16 MaxValue = 32767;
-        public const Int16 MinValue = -32768;
-        public Int32 CompareTo(Int16 value) { throw null; }
-
-        public Boolean Equals(Int16 obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Int16 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Int16 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Int16 Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Int16 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Int16 result) { throw null; }
-
-        public static Boolean TryParse(String s, out Int16 result) { throw null; }
-    }
-
-    public partial struct Int32 : IComparable, IComparable<Int32>, IEquatable<Int32>, IFormattable
-    {
-        public const Int32 MaxValue = 2147483647;
-        public const Int32 MinValue = -2147483648;
-        public Int32 CompareTo(Int32 value) { throw null; }
-
-        public Boolean Equals(Int32 obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Int32 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Int32 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Int32 Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Int32 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Int32 result) { throw null; }
-
-        public static Boolean TryParse(String s, out Int32 result) { throw null; }
-    }
-
-    public partial struct Int64 : IComparable, IComparable<Int64>, IEquatable<Int64>, IFormattable
-    {
-        public const Int64 MaxValue = 9223372036854775807L;
-        public const Int64 MinValue = -9223372036854775808;
-        public Int32 CompareTo(Int64 value) { throw null; }
-
-        public Boolean Equals(Int64 obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Int64 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Int64 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Int64 Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Int64 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Int64 result) { throw null; }
-
-        public static Boolean TryParse(String s, out Int64 result) { throw null; }
-    }
-
-    public partial struct IntPtr
-    {
-        public static readonly IntPtr Zero;
-        public IntPtr(Int32 value) { }
-
-        public IntPtr(Int64 value) { }
-
-        [CLSCompliant(false)]
-        public unsafe IntPtr(void* value) { }
-
-        public static Int32 Size { get { throw null; } }
-
-        public static IntPtr Add(IntPtr pointer, Int32 offset) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static IntPtr operator +(IntPtr pointer, Int32 offset) { throw null; }
-
-        public static Boolean operator ==(IntPtr value1, IntPtr value2) { throw null; }
-
-        public static explicit operator IntPtr(Int32 value) { throw null; }
-
-        public static explicit operator IntPtr(Int64 value) { throw null; }
-
-        public static explicit operator Int32(IntPtr value) { throw null; }
-
-        public static explicit operator Int64(IntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator void*(IntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator IntPtr(void* value) { throw null; }
-
-        public static Boolean operator !=(IntPtr value1, IntPtr value2) { throw null; }
-
-        public static IntPtr operator -(IntPtr pointer, Int32 offset) { throw null; }
-
-        public static IntPtr Subtract(IntPtr pointer, Int32 offset) { throw null; }
-
-        public Int32 ToInt32() { throw null; }
-
-        public Int64 ToInt64() { throw null; }
-
-        [CLSCompliant(false)]
-        public unsafe void* ToPointer() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format) { throw null; }
-    }
-
-    public partial class InvalidCastException : Exception
-    {
-        public InvalidCastException() { }
-
-        public InvalidCastException(String message, Exception innerException) { }
-
-        public InvalidCastException(String message, Int32 errorCode) { }
-
-        public InvalidCastException(String message) { }
-    }
-
-    public partial class InvalidOperationException : Exception
-    {
-        public InvalidOperationException() { }
-
-        public InvalidOperationException(String message, Exception innerException) { }
-
-        public InvalidOperationException(String message) { }
-    }
-
-    public partial class InvalidTimeZoneException : Exception
-    {
-        public InvalidTimeZoneException() { }
-
-        public InvalidTimeZoneException(String message, Exception innerException) { }
-
-        public InvalidTimeZoneException(String message) { }
-    }
-
-    public partial interface IObservable<out T>
-    {
-        IDisposable Subscribe(IObserver<T> observer);
-    }
-
-    public partial interface IObserver<in T>
-    {
-        void OnCompleted();
-        void OnError(Exception error);
-        void OnNext(T value);
-    }
-
-    public partial interface IProgress<in T>
-    {
-        void Report(T value);
-    }
-
-    public partial class Lazy<T>
-    {
-        public Lazy() { }
-
-        public Lazy(Boolean isThreadSafe) { }
-
-        public Lazy(Func<T> valueFactory, Boolean isThreadSafe) { }
-
-        public Lazy(Func<T> valueFactory, Threading.LazyThreadSafetyMode mode) { }
-
-        public Lazy(Func<T> valueFactory) { }
-
-        public Lazy(Threading.LazyThreadSafetyMode mode) { }
-
-        public Boolean IsValueCreated { get { throw null; } }
-
-        public T Value { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Lazy<T, TMetadata> : Lazy<T>
-    {
-        public Lazy(TMetadata metadata, Boolean isThreadSafe) { }
-
-        public Lazy(TMetadata metadata, Threading.LazyThreadSafetyMode mode) { }
-
-        public Lazy(TMetadata metadata) { }
-
-        public Lazy(Func<T> valueFactory, TMetadata metadata, Boolean isThreadSafe) { }
-
-        public Lazy(Func<T> valueFactory, TMetadata metadata, Threading.LazyThreadSafetyMode mode) { }
-
-        public Lazy(Func<T> valueFactory, TMetadata metadata) { }
-
-        public TMetadata Metadata { get { throw null; } }
-    }
-
-    public partial class MemberAccessException : Exception
-    {
-        public MemberAccessException() { }
-
-        public MemberAccessException(String message, Exception inner) { }
-
-        public MemberAccessException(String message) { }
-    }
-
-    public partial class MissingMemberException : MemberAccessException
-    {
-        public MissingMemberException() { }
-
-        public MissingMemberException(String message, Exception inner) { }
-
-        public MissingMemberException(String message) { }
-
-        public override String Message { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class MTAThreadAttribute : Attribute
-    {
-    }
-
-    public abstract partial class MulticastDelegate : Delegate
-    {
-        internal MulticastDelegate() { }
-
-        public sealed override Boolean Equals(Object obj) { throw null; }
-
-        public sealed override Int32 GetHashCode() { throw null; }
-
-        public sealed override Delegate[] GetInvocationList() { throw null; }
-
-        public static Boolean operator ==(MulticastDelegate d1, MulticastDelegate d2) { throw null; }
-
-        public static Boolean operator !=(MulticastDelegate d1, MulticastDelegate d2) { throw null; }
-    }
-
-    public partial class NotImplementedException : Exception
-    {
-        public NotImplementedException() { }
-
-        public NotImplementedException(String message, Exception inner) { }
-
-        public NotImplementedException(String message) { }
-    }
-
-    public partial class NotSupportedException : Exception
-    {
-        public NotSupportedException() { }
-
-        public NotSupportedException(String message, Exception innerException) { }
-
-        public NotSupportedException(String message) { }
-    }
-
-    public static partial class Nullable
-    {
-        public static Int32 Compare<T>(T? n1, T? n2)
-            where T : struct { throw null; }
-
-        public static Boolean Equals<T>(T? n1, T? n2)
-            where T : struct { throw null; }
-
-        public static Type GetUnderlyingType(Type nullableType) { throw null; }
-    }
-
-    public partial struct Nullable<T>
-        where T : struct
-    {
-        public Nullable(T value) { }
-
-        public Boolean HasValue { get { throw null; } }
-
-        public T Value { get { throw null; } }
-
-        public override Boolean Equals(Object other) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public T GetValueOrDefault() { throw null; }
-
-        public T GetValueOrDefault(T defaultValue) { throw null; }
-
-        public static explicit operator T(T? value) { throw null; }
-
-        public static implicit operator T?(T value) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class NullReferenceException : Exception
-    {
-        public NullReferenceException() { }
-
-        public NullReferenceException(String message, Exception innerException) { }
-
-        public NullReferenceException(String message) { }
-    }
-
-    public partial class Object
-    {
-        public static Boolean Equals(Object objA, Object objB) { throw null; }
-
-        public virtual Boolean Equals(Object obj) { throw null; }
-
-        ~Object() {
-        }
-
-        public virtual Int32 GetHashCode() { throw null; }
-
-        public Type GetType() { throw null; }
-
-        protected Object MemberwiseClone() { throw null; }
-
-        public static Boolean ReferenceEquals(Object objA, Object objB) { throw null; }
-
-        public virtual String ToString() { throw null; }
-    }
-
-    public partial class ObjectDisposedException : InvalidOperationException
-    {
-        public ObjectDisposedException(String message, Exception innerException) { }
-
-        public ObjectDisposedException(String objectName, String message) { }
-
-        public ObjectDisposedException(String objectName) { }
-
-        public override String Message { get { throw null; } }
-
-        public String ObjectName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)]
-    public sealed partial class ObsoleteAttribute : Attribute
-    {
-        public ObsoleteAttribute() { }
-
-        public ObsoleteAttribute(String message, Boolean error) { }
-
-        public ObsoleteAttribute(String message) { }
-
-        public Boolean IsError { get { throw null; } }
-
-        public String Message { get { throw null; } }
-    }
-
-    public partial class OutOfMemoryException : Exception
-    {
-        public OutOfMemoryException() { }
-
-        public OutOfMemoryException(String message, Exception innerException) { }
-
-        public OutOfMemoryException(String message) { }
-    }
-
-    public partial class OverflowException : ArithmeticException
-    {
-        public OverflowException() { }
-
-        public OverflowException(String message, Exception innerException) { }
-
-        public OverflowException(String message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = true, AllowMultiple = false)]
-    public sealed partial class ParamArrayAttribute : Attribute
-    {
-    }
-
-    public partial class PlatformNotSupportedException : NotSupportedException
-    {
-        public PlatformNotSupportedException() { }
-
-        public PlatformNotSupportedException(String message, Exception inner) { }
-
-        public PlatformNotSupportedException(String message) { }
-    }
-
-    public delegate Boolean Predicate<in T>(T obj);
-    public partial class RankException : Exception
-    {
-        public RankException() { }
-
-        public RankException(String message, Exception innerException) { }
-
-        public RankException(String message) { }
-    }
-
-    public partial struct RuntimeFieldHandle
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(RuntimeFieldHandle handle) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(RuntimeFieldHandle left, RuntimeFieldHandle right) { throw null; }
-
-        public static Boolean operator !=(RuntimeFieldHandle left, RuntimeFieldHandle right) { throw null; }
-    }
-
-    public partial struct RuntimeMethodHandle
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(RuntimeMethodHandle handle) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(RuntimeMethodHandle left, RuntimeMethodHandle right) { throw null; }
-
-        public static Boolean operator !=(RuntimeMethodHandle left, RuntimeMethodHandle right) { throw null; }
-    }
-
-    public partial struct RuntimeTypeHandle
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(RuntimeTypeHandle handle) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(Object left, RuntimeTypeHandle right) { throw null; }
-
-        public static Boolean operator ==(RuntimeTypeHandle left, Object right) { throw null; }
-
-        public static Boolean operator !=(Object left, RuntimeTypeHandle right) { throw null; }
-
-        public static Boolean operator !=(RuntimeTypeHandle left, Object right) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct SByte : IComparable, IComparable<SByte>, IEquatable<SByte>, IFormattable
-    {
-        public const SByte MaxValue = 127;
-        public const SByte MinValue = -128;
-        public Int32 CompareTo(SByte value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(SByte obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out SByte result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out SByte result) { throw null; }
-    }
-
-    public partial struct Single : IComparable, IComparable<Single>, IEquatable<Single>, IFormattable
-    {
-        public const Single Epsilon = 1E-45F;
-        public const Single MaxValue = 3.4028235E+38F;
-        public const Single MinValue = -3.4028235E+38F;
-        public const Single NaN = 0F / 0F;
-        public const Single NegativeInfinity = -1F / 0F;
-        public const Single PositiveInfinity = 1F / 0F;
-        public Int32 CompareTo(Single value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(Single obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean IsInfinity(Single f) { throw null; }
-
-        public static Boolean IsNaN(Single f) { throw null; }
-
-        public static Boolean IsNegativeInfinity(Single f) { throw null; }
-
-        public static Boolean IsPositiveInfinity(Single f) { throw null; }
-
-        public static Boolean operator ==(Single left, Single right) { throw null; }
-
-        public static Boolean operator >(Single left, Single right) { throw null; }
-
-        public static Boolean operator >=(Single left, Single right) { throw null; }
-
-        public static Boolean operator !=(Single left, Single right) { throw null; }
-
-        public static Boolean operator <(Single left, Single right) { throw null; }
-
-        public static Boolean operator <=(Single left, Single right) { throw null; }
-
-        public static Single Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Single Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Single Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Single Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Single result) { throw null; }
-
-        public static Boolean TryParse(String s, out Single result) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class STAThreadAttribute : Attribute
-    {
-    }
-
-    public sealed partial class String : Collections.IEnumerable, IComparable, IComparable<String>, IEquatable<String>
-    {
-        public static readonly String Empty;
-        public String(Char c, Int32 count) { }
-
-        public String(Char[] value, Int32 startIndex, Int32 length) { }
-
-        public String(Char[] value) { }
-
-        [CLSCompliant(false)]
-        public unsafe String(Char* value, Int32 startIndex, Int32 length) { }
-
-        [CLSCompliant(false)]
-        public unsafe String(Char* value) { }
-
-        public Char this[Int32 index] { get { throw null; } }
-
-        public Int32 Length { get { throw null; } }
-
-        public static Int32 Compare(String strA, Int32 indexA, String strB, Int32 indexB, Int32 length, StringComparison comparisonType) { throw null; }
-
-        public static Int32 Compare(String strA, Int32 indexA, String strB, Int32 indexB, Int32 length) { throw null; }
-
-        public static Int32 Compare(String strA, String strB, StringComparison comparisonType) { throw null; }
-
-        public static Int32 Compare(String strA, String strB) { throw null; }
-
-        public static Int32 CompareOrdinal(String strA, Int32 indexA, String strB, Int32 indexB, Int32 length) { throw null; }
-
-        public static Int32 CompareOrdinal(String strA, String strB) { throw null; }
-
-        public Int32 CompareTo(String strB) { throw null; }
-
-        public static String Concat(Collections.Generic.IEnumerable<String> values) { throw null; }
-
-        public static String Concat(Object arg0, Object arg1, Object arg2) { throw null; }
-
-        public static String Concat(Object arg0, Object arg1) { throw null; }
-
-        public static String Concat(Object arg0) { throw null; }
-
-        public static String Concat(params Object[] args) { throw null; }
-
-        public static String Concat(String str0, String str1, String str2, String str3) { throw null; }
-
-        public static String Concat(String str0, String str1, String str2) { throw null; }
-
-        public static String Concat(String str0, String str1) { throw null; }
-
-        public static String Concat(params String[] values) { throw null; }
-
-        public static String Concat<T>(Collections.Generic.IEnumerable<T> values) { throw null; }
-
-        public Boolean Contains(String value) { throw null; }
-
-        public void CopyTo(Int32 sourceIndex, Char[] destination, Int32 destinationIndex, Int32 count) { }
-
-        public Boolean EndsWith(String value, StringComparison comparisonType) { throw null; }
-
-        public Boolean EndsWith(String value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public static Boolean Equals(String a, String b, StringComparison comparisonType) { throw null; }
-
-        public static Boolean Equals(String a, String b) { throw null; }
-
-        public Boolean Equals(String value, StringComparison comparisonType) { throw null; }
-
-        public Boolean Equals(String value) { throw null; }
-
-        public static String Format(IFormatProvider provider, String format, params Object[] args) { throw null; }
-
-        public static String Format(String format, params Object[] args) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public Int32 IndexOf(Char value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 IndexOf(Char value, Int32 startIndex) { throw null; }
-
-        public Int32 IndexOf(Char value) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex, Int32 count, StringComparison comparisonType) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex, StringComparison comparisonType) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex) { throw null; }
-
-        public Int32 IndexOf(String value, StringComparison comparisonType) { throw null; }
-
-        public Int32 IndexOf(String value) { throw null; }
-
-        public Int32 IndexOfAny(Char[] anyOf, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 IndexOfAny(Char[] anyOf, Int32 startIndex) { throw null; }
-
-        public Int32 IndexOfAny(Char[] anyOf) { throw null; }
-
-        public String Insert(Int32 startIndex, String value) { throw null; }
-
-        public static Boolean IsNullOrEmpty(String value) { throw null; }
-
-        public static Boolean IsNullOrWhiteSpace(String value) { throw null; }
-
-        public static String Join(String separator, Collections.Generic.IEnumerable<String> values) { throw null; }
-
-        public static String Join(String separator, params Object[] values) { throw null; }
-
-        public static String Join(String separator, String[] value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static String Join(String separator, params String[] value) { throw null; }
-
-        public static String Join<T>(String separator, Collections.Generic.IEnumerable<T> values) { throw null; }
-
-        public Int32 LastIndexOf(Char value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 LastIndexOf(Char value, Int32 startIndex) { throw null; }
-
-        public Int32 LastIndexOf(Char value) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex, Int32 count, StringComparison comparisonType) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex, StringComparison comparisonType) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex) { throw null; }
-
-        public Int32 LastIndexOf(String value, StringComparison comparisonType) { throw null; }
-
-        public Int32 LastIndexOf(String value) { throw null; }
-
-        public Int32 LastIndexOfAny(Char[] anyOf, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 LastIndexOfAny(Char[] anyOf, Int32 startIndex) { throw null; }
-
-        public Int32 LastIndexOfAny(Char[] anyOf) { throw null; }
-
-        public static Boolean operator ==(String a, String b) { throw null; }
-
-        public static Boolean operator !=(String a, String b) { throw null; }
-
-        public String PadLeft(Int32 totalWidth, Char paddingChar) { throw null; }
-
-        public String PadLeft(Int32 totalWidth) { throw null; }
-
-        public String PadRight(Int32 totalWidth, Char paddingChar) { throw null; }
-
-        public String PadRight(Int32 totalWidth) { throw null; }
-
-        public String Remove(Int32 startIndex, Int32 count) { throw null; }
-
-        public String Remove(Int32 startIndex) { throw null; }
-
-        public String Replace(Char oldChar, Char newChar) { throw null; }
-
-        public String Replace(String oldValue, String newValue) { throw null; }
-
-        public String[] Split(Char[] separator, Int32 count, StringSplitOptions options) { throw null; }
-
-        public String[] Split(Char[] separator, Int32 count) { throw null; }
-
-        public String[] Split(Char[] separator, StringSplitOptions options) { throw null; }
-
-        public String[] Split(params Char[] separator) { throw null; }
-
-        public String[] Split(String[] separator, Int32 count, StringSplitOptions options) { throw null; }
-
-        public String[] Split(String[] separator, StringSplitOptions options) { throw null; }
-
-        public Boolean StartsWith(String value, StringComparison comparisonType) { throw null; }
-
-        public Boolean StartsWith(String value) { throw null; }
-
-        public String Substring(Int32 startIndex, Int32 length) { throw null; }
-
-        public String Substring(Int32 startIndex) { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public Char[] ToCharArray() { throw null; }
-
-        public Char[] ToCharArray(Int32 startIndex, Int32 length) { throw null; }
-
-        public String ToLower() { throw null; }
-
-        public String ToLowerInvariant() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToUpper() { throw null; }
-
-        public String ToUpperInvariant() { throw null; }
-
-        public String Trim() { throw null; }
-
-        public String Trim(params Char[] trimChars) { throw null; }
-
-        public String TrimEnd(params Char[] trimChars) { throw null; }
-
-        public String TrimStart(params Char[] trimChars) { throw null; }
-    }
-
-    public enum StringComparison
-    {
-        CurrentCulture = 0,
-        CurrentCultureIgnoreCase = 1,
-        Ordinal = 4,
-        OrdinalIgnoreCase = 5
-    }
-
-    [Flags]
-    public enum StringSplitOptions
-    {
-        None = 0,
-        RemoveEmptyEntries = 1
-    }
-
-    [AttributeUsage(AttributeTargets.Field, Inherited = false)]
-    public partial class ThreadStaticAttribute : Attribute
-    {
-    }
-
-    public partial class TimeoutException : Exception
-    {
-        public TimeoutException() { }
-
-        public TimeoutException(String message, Exception innerException) { }
-
-        public TimeoutException(String message) { }
-    }
-
-    public partial struct TimeSpan : IComparable, IComparable<TimeSpan>, IEquatable<TimeSpan>, IFormattable
-    {
-        public static readonly TimeSpan MaxValue;
-        public static readonly TimeSpan MinValue;
-        public const Int64 TicksPerDay = 864000000000L;
-        public const Int64 TicksPerHour = 36000000000L;
-        public const Int64 TicksPerMillisecond = 10000L;
-        public const Int64 TicksPerMinute = 600000000L;
-        public const Int64 TicksPerSecond = 10000000L;
-        public static readonly TimeSpan Zero;
-        public TimeSpan(Int32 days, Int32 hours, Int32 minutes, Int32 seconds, Int32 milliseconds) { }
-
-        public TimeSpan(Int32 days, Int32 hours, Int32 minutes, Int32 seconds) { }
-
-        public TimeSpan(Int32 hours, Int32 minutes, Int32 seconds) { }
-
-        public TimeSpan(Int64 ticks) { }
-
-        public Int32 Days { get { throw null; } }
-
-        public Int32 Hours { get { throw null; } }
-
-        public Int32 Milliseconds { get { throw null; } }
-
-        public Int32 Minutes { get { throw null; } }
-
-        public Int32 Seconds { get { throw null; } }
-
-        public Int64 Ticks { get { throw null; } }
-
-        public Double TotalDays { get { throw null; } }
-
-        public Double TotalHours { get { throw null; } }
-
-        public Double TotalMilliseconds { get { throw null; } }
-
-        public Double TotalMinutes { get { throw null; } }
-
-        public Double TotalSeconds { get { throw null; } }
-
-        public TimeSpan Add(TimeSpan ts) { throw null; }
-
-        public static Int32 Compare(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public Int32 CompareTo(TimeSpan value) { throw null; }
-
-        public TimeSpan Duration() { throw null; }
-
-        public override Boolean Equals(Object value) { throw null; }
-
-        public static Boolean Equals(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public Boolean Equals(TimeSpan obj) { throw null; }
-
-        public static TimeSpan FromDays(Double value) { throw null; }
-
-        public static TimeSpan FromHours(Double value) { throw null; }
-
-        public static TimeSpan FromMilliseconds(Double value) { throw null; }
-
-        public static TimeSpan FromMinutes(Double value) { throw null; }
-
-        public static TimeSpan FromSeconds(Double value) { throw null; }
-
-        public static TimeSpan FromTicks(Int64 value) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public TimeSpan Negate() { throw null; }
-
-        public static TimeSpan operator +(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator ==(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator >(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator >=(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator !=(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator <(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator <=(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static TimeSpan operator -(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static TimeSpan operator -(TimeSpan t) { throw null; }
-
-        public static TimeSpan operator +(TimeSpan t) { throw null; }
-
-        public static TimeSpan Parse(String input, IFormatProvider formatProvider) { throw null; }
-
-        public static TimeSpan Parse(String s) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String format, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String format, IFormatProvider formatProvider) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String[] formats, IFormatProvider formatProvider) { throw null; }
-
-        public TimeSpan Subtract(TimeSpan ts) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format, IFormatProvider formatProvider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String input, IFormatProvider formatProvider, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParse(String s, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, IFormatProvider formatProvider, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String[] formats, IFormatProvider formatProvider, out TimeSpan result) { throw null; }
-    }
-
-    public sealed partial class TimeZoneInfo : IEquatable<TimeZoneInfo>
-    {
-        internal TimeZoneInfo() { }
-
-        public TimeSpan BaseUtcOffset { get { throw null; } }
-
-        public String DaylightName { get { throw null; } }
-
-        public String DisplayName { get { throw null; } }
-
-        public static TimeZoneInfo Local { get { throw null; } }
-
-        public String StandardName { get { throw null; } }
-
-        public Boolean SupportsDaylightSavingTime { get { throw null; } }
-
-        public static TimeZoneInfo Utc { get { throw null; } }
-
-        public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo destinationTimeZone) { throw null; }
-
-        public static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone) { throw null; }
-
-        public Boolean Equals(TimeZoneInfo other) { throw null; }
-
-        public TimeSpan[] GetAmbiguousTimeOffsets(DateTime dateTime) { throw null; }
-
-        public TimeSpan[] GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public TimeSpan GetUtcOffset(DateTime dateTime) { throw null; }
-
-        public TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public Boolean IsAmbiguousTime(DateTime dateTime) { throw null; }
-
-        public Boolean IsAmbiguousTime(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public Boolean IsDaylightSavingTime(DateTime dateTime) { throw null; }
-
-        public Boolean IsDaylightSavingTime(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public Boolean IsInvalidTime(DateTime dateTime) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public static partial class Tuple
-    {
-        public static Tuple<T1> Create<T1>(T1 item1) { throw null; }
-
-        public static Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2) { throw null; }
-
-        public static Tuple<T1, T2, T3> Create<T1, T2, T3>(T1 item1, T2 item2, T3 item3) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4> Create<T1, T2, T3, T4>(T1 item1, T2 item2, T3 item3, T4 item4) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5> Create<T1, T2, T3, T4, T5>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5, T6> Create<T1, T2, T3, T4, T5, T6>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5, T6, T7> Create<T1, T2, T3, T4, T5, T6, T7>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5, T6, T7, Tuple<T8>> Create<T1, T2, T3, T4, T5, T6, T7, T8>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8) { throw null; }
-    }
-
-    public partial class Tuple<T1> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5, T6> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public T6 Item6 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5, T6, T7> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public T6 Item6 { get { throw null; } }
-
-        public T7 Item7 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public T6 Item6 { get { throw null; } }
-
-        public T7 Item7 { get { throw null; } }
-
-        public TRest Rest { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public abstract partial class Type
-    {
-        internal Type() { }
-
-        public static readonly Object Missing;
-        public abstract String AssemblyQualifiedName { get; }
-        public abstract Type DeclaringType { get; }
-        public abstract String FullName { get; }
-        public abstract Int32 GenericParameterPosition { get; }
-        public abstract Type[] GenericTypeArguments { get; }
-
-        public Boolean HasElementType { get { throw null; } }
-
-        public Boolean IsArray { get { throw null; } }
-
-        public Boolean IsByRef { get { throw null; } }
-
-        public abstract Boolean IsConstructedGenericType { get; }
-        public abstract Boolean IsGenericParameter { get; }
-
-        public Boolean IsNested { get { throw null; } }
-
-        public Boolean IsPointer { get { throw null; } }
-
-        public abstract String Name { get; }
-        public abstract String Namespace { get; }
-
-        public virtual RuntimeTypeHandle TypeHandle { get { throw null; } }
-
-        public override Boolean Equals(Object o) { throw null; }
-
-        public Boolean Equals(Type o) { throw null; }
-
-        public abstract Int32 GetArrayRank();
-        public abstract Type GetElementType();
-        public abstract Type GetGenericTypeDefinition();
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Type GetType(String typeName, Boolean throwOnError) { throw null; }
-
-        public static Type GetType(String typeName) { throw null; }
-
-        public static Type GetTypeFromHandle(RuntimeTypeHandle handle) { throw null; }
-
-        public abstract Type MakeArrayType();
-        public abstract Type MakeArrayType(Int32 rank);
-        public abstract Type MakeByRefType();
-        public abstract Type MakeGenericType(params Type[] typeArguments);
-        public abstract Type MakePointerType();
-        public override String ToString() { throw null; }
-    }
-
-    public partial class TypeAccessException : TypeLoadException
-    {
-        public TypeAccessException() { }
-
-        public TypeAccessException(String message, Exception inner) { }
-
-        public TypeAccessException(String message) { }
-    }
-
-    public sealed partial class TypeInitializationException : Exception
-    {
-        public TypeInitializationException(String fullTypeName, Exception innerException) { }
-
-        public String TypeName { get { throw null; } }
-    }
-
-    public partial class TypeLoadException : Exception
-    {
-        public TypeLoadException() { }
-
-        public TypeLoadException(String message, Exception inner) { }
-
-        public TypeLoadException(String message) { }
-
-        public override String Message { get { throw null; } }
-
-        public String TypeName { get { throw null; } }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UInt16 : IComparable, IComparable<UInt16>, IEquatable<UInt16>, IFormattable
-    {
-        public const UInt16 MaxValue = 65535;
-        public const UInt16 MinValue = 0;
-        public Int32 CompareTo(UInt16 value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(UInt16 obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out UInt16 result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out UInt16 result) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UInt32 : IComparable, IComparable<UInt32>, IEquatable<UInt32>, IFormattable
-    {
-        public const UInt32 MaxValue = 4294967295U;
-        public const UInt32 MinValue = 0U;
-        public Int32 CompareTo(UInt32 value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(UInt32 obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out UInt32 result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out UInt32 result) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UInt64 : IComparable, IComparable<UInt64>, IEquatable<UInt64>, IFormattable
-    {
-        public const UInt64 MaxValue = 18446744073709551615UL;
-        public const UInt64 MinValue = 0UL;
-        public Int32 CompareTo(UInt64 value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(UInt64 obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out UInt64 result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out UInt64 result) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UIntPtr
-    {
-        public static readonly UIntPtr Zero;
-        public UIntPtr(UInt32 value) { }
-
-        public UIntPtr(UInt64 value) { }
-
-        [CLSCompliant(false)]
-        public unsafe UIntPtr(void* value) { }
-
-        public static Int32 Size { get { throw null; } }
-
-        public static UIntPtr Add(UIntPtr pointer, Int32 offset) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static UIntPtr operator +(UIntPtr pointer, Int32 offset) { throw null; }
-
-        public static Boolean operator ==(UIntPtr value1, UIntPtr value2) { throw null; }
-
-        public static explicit operator UIntPtr(UInt32 value) { throw null; }
-
-        public static explicit operator UIntPtr(UInt64 value) { throw null; }
-
-        public static explicit operator UInt32(UIntPtr value) { throw null; }
-
-        public static explicit operator UInt64(UIntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator void*(UIntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator UIntPtr(void* value) { throw null; }
-
-        public static Boolean operator !=(UIntPtr value1, UIntPtr value2) { throw null; }
-
-        public static UIntPtr operator -(UIntPtr pointer, Int32 offset) { throw null; }
-
-        public static UIntPtr Subtract(UIntPtr pointer, Int32 offset) { throw null; }
-
-        [CLSCompliant(false)]
-        public unsafe void* ToPointer() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public UInt32 ToUInt32() { throw null; }
-
-        public UInt64 ToUInt64() { throw null; }
-    }
-
-    public partial class UnauthorizedAccessException : Exception
-    {
-        public UnauthorizedAccessException() { }
-
-        public UnauthorizedAccessException(String message, Exception inner) { }
-
-        public UnauthorizedAccessException(String message) { }
-    }
-
-    public partial class Uri
-    {
-        public Uri(String uriString, UriKind uriKind) { }
-
-        public Uri(String uriString) { }
-
-        public Uri(Uri baseUri, String relativeUri) { }
-
-        public Uri(Uri baseUri, Uri relativeUri) { }
-
-        public String AbsolutePath { get { throw null; } }
-
-        public String AbsoluteUri { get { throw null; } }
-
-        public String Authority { get { throw null; } }
-
-        public String DnsSafeHost { get { throw null; } }
-
-        public String Fragment { get { throw null; } }
-
-        public String Host { get { throw null; } }
-
-        public UriHostNameType HostNameType { get { throw null; } }
-
-        public Boolean IsAbsoluteUri { get { throw null; } }
-
-        public Boolean IsDefaultPort { get { throw null; } }
-
-        public Boolean IsFile { get { throw null; } }
-
-        public Boolean IsLoopback { get { throw null; } }
-
-        public Boolean IsUnc { get { throw null; } }
-
-        public String LocalPath { get { throw null; } }
-
-        public String OriginalString { get { throw null; } }
-
-        public String PathAndQuery { get { throw null; } }
-
-        public Int32 Port { get { throw null; } }
-
-        public String Query { get { throw null; } }
-
-        public String Scheme { get { throw null; } }
-
-        public String[] Segments { get { throw null; } }
-
-        public Boolean UserEscaped { get { throw null; } }
-
-        public String UserInfo { get { throw null; } }
-
-        public static UriHostNameType CheckHostName(String name) { throw null; }
-
-        public static Boolean CheckSchemeName(String schemeName) { throw null; }
-
-        public static Int32 Compare(Uri uri1, Uri uri2, UriComponents partsToCompare, UriFormat compareFormat, StringComparison comparisonType) { throw null; }
-
-        public override Boolean Equals(Object comparand) { throw null; }
-
-        public static String EscapeDataString(String stringToEscape) { throw null; }
-
-        public static String EscapeUriString(String stringToEscape) { throw null; }
-
-        public String GetComponents(UriComponents components, UriFormat format) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public Boolean IsBaseOf(Uri uri) { throw null; }
-
-        public Boolean IsWellFormedOriginalString() { throw null; }
-
-        public static Boolean IsWellFormedUriString(String uriString, UriKind uriKind) { throw null; }
-
-        public Uri MakeRelativeUri(Uri uri) { throw null; }
-
-        public static Boolean operator ==(Uri uri1, Uri uri2) { throw null; }
-
-        public static Boolean operator !=(Uri uri1, Uri uri2) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public static Boolean TryCreate(String uriString, UriKind uriKind, out Uri result) { throw null; }
-
-        public static Boolean TryCreate(Uri baseUri, String relativeUri, out Uri result) { throw null; }
-
-        public static Boolean TryCreate(Uri baseUri, Uri relativeUri, out Uri result) { throw null; }
-
-        public static String UnescapeDataString(String stringToUnescape) { throw null; }
-    }
-
-    [Flags]
-    public enum UriComponents
-    {
-        SerializationInfoString = Int32.MinValue,
-        Scheme = 1,
-        UserInfo = 2,
-        Host = 4,
-        Port = 8,
-        SchemeAndServer = 13,
-        Path = 16,
-        Query = 32,
-        PathAndQuery = 48,
-        HttpRequestUrl = 61,
-        Fragment = 64,
-        AbsoluteUri = 127,
-        StrongPort = 128,
-        HostAndPort = 132,
-        StrongAuthority = 134,
-        NormalizedHost = 256,
-        KeepDelimiter = 1073741824
-    }
-
-    public enum UriFormat
-    {
-        UriEscaped = 1,
-        Unescaped = 2,
-        SafeUnescaped = 3
-    }
-
-    public enum UriHostNameType
-    {
-        Unknown = 0,
-        Basic = 1,
-        Dns = 2,
-        IPv4 = 3,
-        IPv6 = 4
-    }
-
-    public enum UriKind
-    {
-        RelativeOrAbsolute = 0,
-        Absolute = 1,
-        Relative = 2
-    }
-
-    public abstract partial class ValueType
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public sealed partial class Version : IComparable, IComparable<Version>, IEquatable<Version>
-    {
-        public Version(Int32 major, Int32 minor, Int32 build, Int32 revision) { }
-
-        public Version(Int32 major, Int32 minor, Int32 build) { }
-
-        public Version(Int32 major, Int32 minor) { }
-
-        public Version(String version) { }
-
-        public Int32 Build { get { throw null; } }
-
-        public Int32 Major { get { throw null; } }
-
-        public Int16 MajorRevision { get { throw null; } }
-
-        public Int32 Minor { get { throw null; } }
-
-        public Int16 MinorRevision { get { throw null; } }
-
-        public Int32 Revision { get { throw null; } }
-
-        public Int32 CompareTo(Version value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(Version obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator >(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator >=(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator !=(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator <(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator <=(Version v1, Version v2) { throw null; }
-
-        public static Version Parse(String input) { throw null; }
-
-        Int32 IComparable.CompareTo(Object version) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(Int32 fieldCount) { throw null; }
-
-        public static Boolean TryParse(String input, out Version result) { throw null; }
-    }
-
-    public partial struct Void
-    {
-    }
-
-    public partial class WeakReference
-    {
-        public WeakReference(Object target, Boolean trackResurrection) { }
-
-        public WeakReference(Object target) { }
-
-        public virtual Boolean IsAlive { get { throw null; } }
-
-        public virtual Object Target { get { throw null; } set { } }
-
-        public virtual Boolean TrackResurrection { get { throw null; } }
-
-        ~WeakReference() {
-        }
-    }
-
-    public sealed partial class WeakReference<T>
-        where T : class
-    {
-        public WeakReference(T target, Boolean trackResurrection) { }
-
-        public WeakReference(T target) { }
-
-        ~WeakReference() {
-        }
-
-        public void SetTarget(T target) { }
-
-        public Boolean TryGetTarget(out T target) { throw null; }
-    }
-}
-
-namespace System.Collections
-{
-    public partial struct DictionaryEntry
-    {
-        public DictionaryEntry(Object key, Object value) { }
-
-        public Object Key { get { throw null; } set { } }
-
-        public Object Value { get { throw null; } set { } }
-    }
-
-    public partial interface ICollection : IEnumerable
-    {
-        Int32 Count { get; }
-
-        Boolean IsSynchronized { get; }
-
-        Object SyncRoot { get; }
-
-        void CopyTo(Array array, Int32 index);
-    }
-
-    public partial interface IComparer
-    {
-        Int32 Compare(Object x, Object y);
-    }
-
-    public partial interface IDictionary : ICollection, IEnumerable
-    {
-        Boolean IsFixedSize { get; }
-
-        Boolean IsReadOnly { get; }
-
-        Object this[Object key] { get; set; }
-
-        ICollection Keys { get; }
-
-        ICollection Values { get; }
-
-        void Add(Object key, Object value);
-        void Clear();
-        Boolean Contains(Object key);
-        IDictionaryEnumerator GetEnumerator();
-        void Remove(Object key);
-    }
-
-    public partial interface IDictionaryEnumerator : IEnumerator
-    {
-        DictionaryEntry Entry { get; }
-
-        Object Key { get; }
-
-        Object Value { get; }
-    }
-
-    public partial interface IEnumerable
-    {
-        IEnumerator GetEnumerator();
-    }
-
-    public partial interface IEnumerator
-    {
-        Object Current { get; }
-
-        Boolean MoveNext();
-        void Reset();
-    }
-
-    public partial interface IEqualityComparer
-    {
-        Boolean Equals(Object x, Object y);
-        Int32 GetHashCode(Object obj);
-    }
-
-    public partial interface IList : ICollection, IEnumerable
-    {
-        Boolean IsFixedSize { get; }
-
-        Boolean IsReadOnly { get; }
-
-        Object this[Int32 index] { get; set; }
-
-        Int32 Add(Object value);
-        void Clear();
-        Boolean Contains(Object value);
-        Int32 IndexOf(Object value);
-        void Insert(Int32 index, Object value);
-        void Remove(Object value);
-        void RemoveAt(Int32 index);
-    }
-
-    public partial interface IStructuralComparable
-    {
-        Int32 CompareTo(Object other, IComparer comparer);
-    }
-
-    public partial interface IStructuralEquatable
-    {
-        Boolean Equals(Object other, IEqualityComparer comparer);
-        Int32 GetHashCode(IEqualityComparer comparer);
-    }
-}
-
-namespace System.Collections.Generic
-{
-    public partial interface ICollection<T> : IEnumerable<T>, IEnumerable
-    {
-        Int32 Count { get; }
-
-        Boolean IsReadOnly { get; }
-
-        void Add(T item);
-        void Clear();
-        Boolean Contains(T item);
-        void CopyTo(T[] array, Int32 arrayIndex);
-        Boolean Remove(T item);
-    }
-
-    public partial interface IComparer<in T>
-    {
-        Int32 Compare(T x, T y);
-    }
-
-    public partial interface IDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable
-    {
-        TValue this[TKey key] { get; set; }
-
-        ICollection<TKey> Keys { get; }
-
-        ICollection<TValue> Values { get; }
-
-        void Add(TKey key, TValue value);
-        Boolean ContainsKey(TKey key);
-        Boolean Remove(TKey key);
-        Boolean TryGetValue(TKey key, out TValue value);
-    }
-
-    public partial interface IEnumerable<out T> : IEnumerable
-    {
-        IEnumerator<T> GetEnumerator();
-    }
-
-    public partial interface IEnumerator<out T> : IEnumerator, IDisposable
-    {
-        T Current { get; }
-    }
-
-    public partial interface IEqualityComparer<in T>
-    {
-        Boolean Equals(T x, T y);
-        Int32 GetHashCode(T obj);
-    }
-
-    public partial interface IList<T> : ICollection<T>, IEnumerable<T>, IEnumerable
-    {
-        T this[Int32 index] { get; set; }
-
-        Int32 IndexOf(T item);
-        void Insert(Int32 index, T item);
-        void RemoveAt(Int32 index);
-    }
-
-    public partial interface IReadOnlyCollection<out T> : IEnumerable<T>, IEnumerable
-    {
-        Int32 Count { get; }
-    }
-
-    public partial interface IReadOnlyDictionary<TKey, TValue> : IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable
-    {
-        TValue this[TKey key] { get; }
-
-        IEnumerable<TKey> Keys { get; }
-
-        IEnumerable<TValue> Values { get; }
-
-        Boolean ContainsKey(TKey key);
-        Boolean TryGetValue(TKey key, out TValue value);
-    }
-
-    public partial interface IReadOnlyList<out T> : IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable
-    {
-        T this[Int32 index] { get; }
-    }
-
-    public partial interface ISet<T> : ICollection<T>, IEnumerable<T>, IEnumerable
-    {
-        Boolean Add(T item);
-        void ExceptWith(IEnumerable<T> other);
-        void IntersectWith(IEnumerable<T> other);
-        Boolean IsProperSubsetOf(IEnumerable<T> other);
-        Boolean IsProperSupersetOf(IEnumerable<T> other);
-        Boolean IsSubsetOf(IEnumerable<T> other);
-        Boolean IsSupersetOf(IEnumerable<T> other);
-        Boolean Overlaps(IEnumerable<T> other);
-        Boolean SetEquals(IEnumerable<T> other);
-        void SymmetricExceptWith(IEnumerable<T> other);
-        void UnionWith(IEnumerable<T> other);
-    }
-
-    public partial class KeyNotFoundException : Exception
-    {
-        public KeyNotFoundException() { }
-
-        public KeyNotFoundException(String message, Exception innerException) { }
-
-        public KeyNotFoundException(String message) { }
-    }
-
-    public partial struct KeyValuePair<TKey, TValue>
-    {
-        public KeyValuePair(TKey key, TValue value) { }
-
-        public TKey Key { get { throw null; } }
-
-        public TValue Value { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-}
-
-namespace System.Collections.ObjectModel
-{
-    public partial class Collection<T> : Generic.IList<T>, Generic.ICollection<T>, Generic.IReadOnlyList<T>, Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IList, ICollection, IEnumerable
-    {
-        public Collection() { }
-
-        public Collection(Generic.IList<T> list) { }
-
-        public Int32 Count { get { throw null; } }
-
-        public T this[Int32 index] { get { throw null; } set { } }
-
-        protected Generic.IList<T> Items { get { throw null; } }
-
-        Boolean Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        Boolean ICollection.IsSynchronized { get { throw null; } }
-
-        Object ICollection.SyncRoot { get { throw null; } }
-
-        Boolean IList.IsFixedSize { get { throw null; } }
-
-        Boolean IList.IsReadOnly { get { throw null; } }
-
-        Object IList.this[Int32 index] { get { throw null; } set { } }
-
-        public void Add(T item) { }
-
-        public void Clear() { }
-
-        protected virtual void ClearItems() { }
-
-        public Boolean Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, Int32 index) { }
-
-        public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        public Int32 IndexOf(T item) { throw null; }
-
-        public void Insert(Int32 index, T item) { }
-
-        protected virtual void InsertItem(Int32 index, T item) { }
-
-        public Boolean Remove(T item) { throw null; }
-
-        public void RemoveAt(Int32 index) { }
-
-        protected virtual void RemoveItem(Int32 index) { }
-
-        protected virtual void SetItem(Int32 index, T item) { }
-
-        void ICollection.CopyTo(Array array, Int32 index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        Int32 IList.Add(Object value) { throw null; }
-
-        Boolean IList.Contains(Object value) { throw null; }
-
-        Int32 IList.IndexOf(Object value) { throw null; }
-
-        void IList.Insert(Int32 index, Object value) { }
-
-        void IList.Remove(Object value) { }
-    }
-
-    public partial class ReadOnlyCollection<T> : Generic.IList<T>, Generic.ICollection<T>, Generic.IReadOnlyList<T>, Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IList, ICollection, IEnumerable
-    {
-        public ReadOnlyCollection(Generic.IList<T> list) { }
-
-        public Int32 Count { get { throw null; } }
-
-        public T this[Int32 index] { get { throw null; } }
-
-        protected Generic.IList<T> Items { get { throw null; } }
-
-        Boolean Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        T Generic.IList<T>.this[Int32 index] { get { throw null; } set { } }
-
-        Boolean ICollection.IsSynchronized { get { throw null; } }
-
-        Object ICollection.SyncRoot { get { throw null; } }
-
-        Boolean IList.IsFixedSize { get { throw null; } }
-
-        Boolean IList.IsReadOnly { get { throw null; } }
-
-        Object IList.this[Int32 index] { get { throw null; } set { } }
-
-        public Boolean Contains(T value) { throw null; }
-
-        public void CopyTo(T[] array, Int32 index) { }
-
-        public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        public Int32 IndexOf(T value) { throw null; }
-
-        void Generic.ICollection<T>.Add(T value) { }
-
-        void Generic.ICollection<T>.Clear() { }
-
-        Boolean Generic.ICollection<T>.Remove(T value) { throw null; }
-
-        void Generic.IList<T>.Insert(Int32 index, T value) { }
-
-        void Generic.IList<T>.RemoveAt(Int32 index) { }
-
-        void ICollection.CopyTo(Array array, Int32 index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        Int32 IList.Add(Object value) { throw null; }
-
-        void IList.Clear() { }
-
-        Boolean IList.Contains(Object value) { throw null; }
-
-        Int32 IList.IndexOf(Object value) { throw null; }
-
-        void IList.Insert(Int32 index, Object value) { }
-
-        void IList.Remove(Object value) { }
-
-        void IList.RemoveAt(Int32 index) { }
-    }
-}
-
-namespace System.ComponentModel
-{
-    [AttributeUsage(AttributeTargets.All)]
-    public partial class DefaultValueAttribute : Attribute
-    {
-        public DefaultValueAttribute(Boolean value) { }
-
-        public DefaultValueAttribute(Byte value) { }
-
-        public DefaultValueAttribute(Char value) { }
-
-        public DefaultValueAttribute(Double value) { }
-
-        public DefaultValueAttribute(Int16 value) { }
-
-        public DefaultValueAttribute(Int32 value) { }
-
-        public DefaultValueAttribute(Int64 value) { }
-
-        public DefaultValueAttribute(Object value) { }
-
-        public DefaultValueAttribute(Single value) { }
-
-        public DefaultValueAttribute(String value) { }
-
-        public DefaultValueAttribute(Type type, String value) { }
-
-        public virtual Object Value { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
-    public sealed partial class EditorBrowsableAttribute : Attribute
-    {
-        public EditorBrowsableAttribute(EditorBrowsableState state) { }
-
-        public EditorBrowsableState State { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-    }
-
-    public enum EditorBrowsableState
-    {
-        Always = 0,
-        Never = 1,
-        Advanced = 2
-    }
-}
-
-namespace System.Diagnostics
-{
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]
-    public sealed partial class ConditionalAttribute : Attribute
-    {
-        public ConditionalAttribute(String conditionString) { }
-
-        public String ConditionString { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Module, AllowMultiple = false)]
-    public sealed partial class DebuggableAttribute : Attribute
-    {
-        public DebuggableAttribute(DebuggingModes modes) { }
-
-        [Flags]
-        public enum DebuggingModes
-        {
-            None = 0,
-            Default = 1,
-            IgnoreSymbolStoreSequencePoints = 2,
-            EnableEditAndContinue = 4,
-            DisableOptimizations = 256
-        }
-    }
-}
-
-namespace System.Globalization
-{
-    [Flags]
-    public enum DateTimeStyles
-    {
-        None = 0,
-        AllowLeadingWhite = 1,
-        AllowTrailingWhite = 2,
-        AllowInnerWhite = 4,
-        AllowWhiteSpaces = 7,
-        NoCurrentDateDefault = 8,
-        AdjustToUniversal = 16,
-        AssumeLocal = 32,
-        AssumeUniversal = 64,
-        RoundtripKind = 128
-    }
-
-    [Flags]
-    public enum NumberStyles
-    {
-        None = 0,
-        AllowLeadingWhite = 1,
-        AllowTrailingWhite = 2,
-        AllowLeadingSign = 4,
-        Integer = 7,
-        AllowTrailingSign = 8,
-        AllowParentheses = 16,
-        AllowDecimalPoint = 32,
-        AllowThousands = 64,
-        Number = 111,
-        AllowExponent = 128,
-        Float = 167,
-        AllowCurrencySymbol = 256,
-        Currency = 383,
-        Any = 511,
-        AllowHexSpecifier = 512,
-        HexNumber = 515
-    }
-
-    [Flags]
-    public enum TimeSpanStyles
-    {
-        None = 0,
-        AssumeNegative = 1
-    }
-}
-
-namespace System.Reflection
-{
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyCompanyAttribute : Attribute
-    {
-        public AssemblyCompanyAttribute(String company) { }
-
-        public String Company { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyConfigurationAttribute : Attribute
-    {
-        public AssemblyConfigurationAttribute(String configuration) { }
-
-        public String Configuration { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyCopyrightAttribute : Attribute
-    {
-        public AssemblyCopyrightAttribute(String copyright) { }
-
-        public String Copyright { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyCultureAttribute : Attribute
-    {
-        public AssemblyCultureAttribute(String culture) { }
-
-        public String Culture { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyDefaultAliasAttribute : Attribute
-    {
-        public AssemblyDefaultAliasAttribute(String defaultAlias) { }
-
-        public String DefaultAlias { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyDelaySignAttribute : Attribute
-    {
-        public AssemblyDelaySignAttribute(Boolean delaySign) { }
-
-        public Boolean DelaySign { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyDescriptionAttribute : Attribute
-    {
-        public AssemblyDescriptionAttribute(String description) { }
-
-        public String Description { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyFileVersionAttribute : Attribute
-    {
-        public AssemblyFileVersionAttribute(String version) { }
-
-        public String Version { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyFlagsAttribute : Attribute
-    {
-        public AssemblyFlagsAttribute(AssemblyNameFlags assemblyFlags) { }
-
-        public Int32 AssemblyFlags { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyInformationalVersionAttribute : Attribute
-    {
-        public AssemblyInformationalVersionAttribute(String informationalVersion) { }
-
-        public String InformationalVersion { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyKeyFileAttribute : Attribute
-    {
-        public AssemblyKeyFileAttribute(String keyFile) { }
-
-        public String KeyFile { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyKeyNameAttribute : Attribute
-    {
-        public AssemblyKeyNameAttribute(String keyName) { }
-
-        public String KeyName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)]
-    public sealed partial class AssemblyMetadataAttribute : Attribute
-    {
-        public AssemblyMetadataAttribute(String key, String value) { }
-
-        public String Key { get { throw null; } }
-
-        public String Value { get { throw null; } }
-    }
-
-    [Flags]
-    public enum AssemblyNameFlags
-    {
-        None = 0,
-        PublicKey = 1,
-        Retargetable = 256
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyProductAttribute : Attribute
-    {
-        public AssemblyProductAttribute(String product) { }
-
-        public String Product { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = false)]
-    public sealed partial class AssemblySignatureKeyAttribute : Attribute
-    {
-        public AssemblySignatureKeyAttribute(String publicKey, String countersignature) { }
-
-        public String Countersignature { get { throw null; } }
-
-        public String PublicKey { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyTitleAttribute : Attribute
-    {
-        public AssemblyTitleAttribute(String title) { }
-
-        public String Title { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyTrademarkAttribute : Attribute
-    {
-        public AssemblyTrademarkAttribute(String trademark) { }
-
-        public String Trademark { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyVersionAttribute : Attribute
-    {
-        public AssemblyVersionAttribute(String version) { }
-
-        public String Version { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface)]
-    public sealed partial class DefaultMemberAttribute : Attribute
-    {
-        public DefaultMemberAttribute(String memberName) { }
-
-        public String MemberName { get { throw null; } }
-    }
-}
-
-namespace System.Runtime
-{
-    public enum GCLatencyMode
-    {
-        Batch = 0,
-        Interactive = 1,
-        LowLatency = 2,
-        SustainedLowLatency = 3
-    }
-
-    public static partial class GCSettings
-    {
-        public static Boolean IsServerGC { get { throw null; } }
-
-        public static GCLatencyMode LatencyMode { get { throw null; } set { } }
-    }
-}
-
-namespace System.Runtime.CompilerServices
-{
-    [AttributeUsage(AttributeTargets.Field)]
-    public sealed partial class AccessedThroughPropertyAttribute : Attribute
-    {
-        public AccessedThroughPropertyAttribute(String propertyName) { }
-
-        public String PropertyName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
-    public sealed partial class AsyncStateMachineAttribute : StateMachineAttribute
-    {
-        public AsyncStateMachineAttribute(Type stateMachineType) : base(default!) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class CallerFilePathAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class CallerLineNumberAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class CallerMemberNameAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Module | AttributeTargets.Class | AttributeTargets.Method)]
-    public partial class CompilationRelaxationsAttribute : Attribute
-    {
-        public CompilationRelaxationsAttribute(Int32 relaxations) { }
-
-        public Int32 CompilationRelaxations { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.All, Inherited = true)]
-    public sealed partial class CompilerGeneratedAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter, Inherited = false)]
-    public abstract partial class CustomConstantAttribute : Attribute
-    {
-        public abstract Object Value { get; }
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class DateTimeConstantAttribute : CustomConstantAttribute
-    {
-        public DateTimeConstantAttribute(Int64 ticks) { }
-
-        public override Object Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class DecimalConstantAttribute : Attribute
-    {
-        public DecimalConstantAttribute(Byte scale, Byte sign, Int32 hi, Int32 mid, Int32 low) { }
-
-        [CLSCompliant(false)]
-        public DecimalConstantAttribute(Byte scale, Byte sign, UInt32 hi, UInt32 mid, UInt32 low) { }
-
-        public Decimal Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method)]
-    public sealed partial class ExtensionAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Field, Inherited = false)]
-    public sealed partial class FixedBufferAttribute : Attribute
-    {
-        public FixedBufferAttribute(Type elementType, Int32 length) { }
-
-        public Type ElementType { get { throw null; } }
-
-        public Int32 Length { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property, Inherited = true)]
-    public sealed partial class IndexerNameAttribute : Attribute
-    {
-        public IndexerNameAttribute(String indexerName) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)]
-    public sealed partial class InternalsVisibleToAttribute : Attribute
-    {
-        public InternalsVisibleToAttribute(String assemblyName) { }
-
-        public String AssemblyName { get { throw null; } }
-    }
-
-    public partial interface IStrongBox
-    {
-        Object Value { get; set; }
-    }
-
-    public static partial class IsVolatile
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
-    public sealed partial class IteratorStateMachineAttribute : StateMachineAttribute
-    {
-        public IteratorStateMachineAttribute(Type stateMachineType) : base(default!) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method, Inherited = false)]
-    public sealed partial class MethodImplAttribute : Attribute
-    {
-        public MethodImplAttribute(MethodImplOptions methodImplOptions) { }
-
-        public MethodImplOptions Value { get { throw null; } }
-    }
-
-    [Flags]
-    public enum MethodImplOptions
-    {
-        NoInlining = 8,
-        NoOptimization = 64,
-        PreserveSig = 128,
-        AggressiveInlining = 256
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false)]
-    public sealed partial class ReferenceAssemblyAttribute : Attribute
-    {
-        public ReferenceAssemblyAttribute() { }
-
-        public ReferenceAssemblyAttribute(String description) { }
-
-        public String Description { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = false)]
-    public sealed partial class RuntimeCompatibilityAttribute : Attribute
-    {
-        public Boolean WrapNonExceptionThrows { get { throw null; } set { } }
-    }
-
-    public static partial class RuntimeHelpers
-    {
-        public static Int32 OffsetToStringData { get { throw null; } }
-
-        public static Int32 GetHashCode(Object o) { throw null; }
-
-        public static Object GetObjectValue(Object obj) { throw null; }
-
-        public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle) { }
-
-        public static void RunClassConstructor(RuntimeTypeHandle type) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
-    public partial class StateMachineAttribute : Attribute
-    {
-        public StateMachineAttribute(Type stateMachineType) { }
-
-        public Type StateMachineType { get { throw null; } }
-    }
-
-    public partial class StrongBox<T> : IStrongBox
-    {
-        public T Value;
-        public StrongBox() { }
-
-        public StrongBox(T value) { }
-
-        Object IStrongBox.Value { get { throw null; } set { } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false, AllowMultiple = false)]
-    public sealed partial class TypeForwardedFromAttribute : Attribute
-    {
-        public TypeForwardedFromAttribute(String assemblyFullName) { }
-
-        public String AssemblyFullName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)]
-    public sealed partial class TypeForwardedToAttribute : Attribute
-    {
-        public TypeForwardedToAttribute(Type destination) { }
-
-        public Type Destination { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Struct)]
-    public sealed partial class UnsafeValueTypeAttribute : Attribute
-    {
-    }
-}
-
-namespace System.Runtime.ExceptionServices
-{
-    public sealed partial class ExceptionDispatchInfo
-    {
-        internal ExceptionDispatchInfo() { }
-
-        public Exception SourceException { get { throw null; } }
-
-        public static ExceptionDispatchInfo Capture(Exception source) { throw null; }
-
-        public void Throw() { }
-    }
-}
-
-namespace System.Runtime.InteropServices
-{
-    public enum CharSet
-    {
-        Ansi = 2,
-        Unicode = 3
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)]
-    public sealed partial class ComVisibleAttribute : Attribute
-    {
-        public ComVisibleAttribute(Boolean visibility) { }
-
-        public Boolean Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Field, Inherited = false)]
-    public sealed partial class FieldOffsetAttribute : Attribute
-    {
-        public FieldOffsetAttribute(Int32 offset) { }
-
-        public Int32 Value { get { throw null; } }
-    }
-
-    public enum LayoutKind
-    {
-        Sequential = 0,
-        Explicit = 2,
-        Auto = 3
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class OutAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false)]
-    public sealed partial class StructLayoutAttribute : Attribute
-    {
-        public CharSet CharSet;
-        public Int32 Pack;
-        public Int32 Size;
-        public StructLayoutAttribute(LayoutKind layoutKind) { }
-
-        public LayoutKind Value { get { throw null; } }
-    }
-}
-
-namespace System.Runtime.Versioning
-{
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)]
-    public sealed partial class TargetFrameworkAttribute : Attribute
-    {
-        public TargetFrameworkAttribute(String frameworkName) { }
-
-        public String FrameworkDisplayName { get { throw null; } set { } }
-
-        public String FrameworkName { get { throw null; } }
-    }
-}
-
-namespace System.Security
-{
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)]
-    public sealed partial class AllowPartiallyTrustedCallersAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class SecurityCriticalAttribute : Attribute
-    {
-    }
-
-    public partial class SecurityException : Exception
-    {
-        public SecurityException() { }
-
-        public SecurityException(String message, Exception inner) { }
-
-        public SecurityException(String message) { }
-
-        public override String ToString() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class SecuritySafeCriticalAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)]
-    public sealed partial class SecurityTransparentAttribute : Attribute
-    {
-    }
-
-    public partial class VerificationException : Exception
-    {
-        public VerificationException() { }
-
-        public VerificationException(String message, Exception innerException) { }
-
-        public VerificationException(String message) { }
-    }
-}
-
-namespace System.Text
-{
-    public sealed partial class StringBuilder
-    {
-        public StringBuilder() { }
-
-        public StringBuilder(Int32 capacity, Int32 maxCapacity) { }
-
-        public StringBuilder(Int32 capacity) { }
-
-        public StringBuilder(String value, Int32 startIndex, Int32 length, Int32 capacity) { }
-
-        public StringBuilder(String value, Int32 capacity) { }
-
-        public StringBuilder(String value) { }
-
-        public Int32 Capacity { get { throw null; } set { } }
-
-        public Char this[Int32 index] { get { throw null; } set { } }
-
-        public Int32 Length { get { throw null; } set { } }
-
-        public Int32 MaxCapacity { get { throw null; } }
-
-        public StringBuilder Append(Boolean value) { throw null; }
-
-        public StringBuilder Append(Byte value) { throw null; }
-
-        public StringBuilder Append(Char value, Int32 repeatCount) { throw null; }
-
-        public StringBuilder Append(Char value) { throw null; }
-
-        public StringBuilder Append(Char[] value, Int32 startIndex, Int32 charCount) { throw null; }
-
-        public StringBuilder Append(Char[] value) { throw null; }
-
-        public StringBuilder Append(Decimal value) { throw null; }
-
-        public StringBuilder Append(Double value) { throw null; }
-
-        public StringBuilder Append(Int16 value) { throw null; }
-
-        public StringBuilder Append(Int32 value) { throw null; }
-
-        public StringBuilder Append(Int64 value) { throw null; }
-
-        public StringBuilder Append(Object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(SByte value) { throw null; }
-
-        public StringBuilder Append(Single value) { throw null; }
-
-        public StringBuilder Append(String value, Int32 startIndex, Int32 count) { throw null; }
-
-        public StringBuilder Append(String value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(UInt16 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(UInt32 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(UInt64 value) { throw null; }
-
-        public StringBuilder AppendFormat(IFormatProvider provider, String format, params Object[] args) { throw null; }
-
-        public StringBuilder AppendFormat(String format, params Object[] args) { throw null; }
-
-        public StringBuilder AppendLine() { throw null; }
-
-        public StringBuilder AppendLine(String value) { throw null; }
-
-        public StringBuilder Clear() { throw null; }
-
-        public void CopyTo(Int32 sourceIndex, Char[] destination, Int32 destinationIndex, Int32 count) { }
-
-        public Int32 EnsureCapacity(Int32 capacity) { throw null; }
-
-        public Boolean Equals(StringBuilder sb) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Boolean value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Byte value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Char value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Char[] value, Int32 startIndex, Int32 charCount) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Char[] value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Decimal value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Double value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Int16 value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Int32 value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Int64 value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, SByte value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Single value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, String value, Int32 count) { throw null; }
-
-        public StringBuilder Insert(Int32 index, String value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, UInt16 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, UInt32 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, UInt64 value) { throw null; }
-
-        public StringBuilder Remove(Int32 startIndex, Int32 length) { throw null; }
-
-        public StringBuilder Replace(Char oldChar, Char newChar, Int32 startIndex, Int32 count) { throw null; }
-
-        public StringBuilder Replace(Char oldChar, Char newChar) { throw null; }
-
-        public StringBuilder Replace(String oldValue, String newValue, Int32 startIndex, Int32 count) { throw null; }
-
-        public StringBuilder Replace(String oldValue, String newValue) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(Int32 startIndex, Int32 length) { throw null; }
-    }
-}
-
-namespace System.Threading
-{
-    public enum LazyThreadSafetyMode
-    {
-        None = 0,
-        PublicationOnly = 1,
-        ExecutionAndPublication = 2
-    }
-
-    public static partial class Timeout
-    {
-        public const Int32 Infinite = -1;
-        public static readonly TimeSpan InfiniteTimeSpan;
-    }
-
-    public abstract partial class WaitHandle : IDisposable
-    {
-        protected static readonly IntPtr InvalidHandle;
-        public const Int32 WaitTimeout = 258;
-        public void Dispose() { }
-
-        protected virtual void Dispose(Boolean explicitDisposing) { }
-
-        public static Boolean WaitAll(WaitHandle[] waitHandles, Int32 millisecondsTimeout) { throw null; }
-
-        public static Boolean WaitAll(WaitHandle[] waitHandles, TimeSpan timeout) { throw null; }
-
-        public static Boolean WaitAll(WaitHandle[] waitHandles) { throw null; }
-
-        public static Int32 WaitAny(WaitHandle[] waitHandles, Int32 millisecondsTimeout) { throw null; }
-
-        public static Int32 WaitAny(WaitHandle[] waitHandles, TimeSpan timeout) { throw null; }
-
-        public static Int32 WaitAny(WaitHandle[] waitHandles) { throw null; }
-
-        public virtual Boolean WaitOne() { throw null; }
-
-        public virtual Boolean WaitOne(Int32 millisecondsTimeout) { throw null; }
-
-        public virtual Boolean WaitOne(TimeSpan timeout) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.2/System.Runtime.cs b/src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.2/System.Runtime.cs
deleted file mode 100644
index 78483a1b..00000000
--- a/src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.2/System.Runtime.cs
+++ /dev/null
@@ -1,4318 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: AssemblyMetadata("BuildLabel", "130703.2")]
-[assembly: AssemblyMetadata("BuildBranch", "Release\\ReferenceAssemblies\\1.0")]
-[assembly: AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: AssemblyFileVersion("4.0.40013.0")]
-[assembly: CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: AssemblyCompany("Microsoft Corporation")]
-[assembly: AssemblyInformationalVersion("4.0.40013.0")]
-[assembly: AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: AssemblyTitle("System.Runtime.dll")]
-[assembly: AssemblyDescription("System.Runtime.dll")]
-[assembly: AssemblyDefaultAlias("System.Runtime.dll")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public delegate void Action();
-    public delegate void Action<in T>(T obj);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, in T16>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
-    public delegate void Action<in T1, in T2>(T1 arg1, T2 arg2);
-    public delegate void Action<in T1, in T2, in T3>(T1 arg1, T2 arg2, T3 arg3);
-    public delegate void Action<in T1, in T2, in T3, in T4>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
-    public static partial class Activator
-    {
-        public static Object CreateInstance(Type type, params Object[] args) { throw null; }
-
-        public static Object CreateInstance(Type type) { throw null; }
-
-        public static T CreateInstance<T>() { throw null; }
-    }
-
-    public partial class ArgumentException : Exception
-    {
-        public ArgumentException() { }
-
-        public ArgumentException(String message, Exception innerException) { }
-
-        public ArgumentException(String message, String paramName, Exception innerException) { }
-
-        public ArgumentException(String message, String paramName) { }
-
-        public ArgumentException(String message) { }
-
-        public override String Message { get { throw null; } }
-
-        public virtual String ParamName { get { throw null; } }
-    }
-
-    public partial class ArgumentNullException : ArgumentException
-    {
-        public ArgumentNullException() { }
-
-        public ArgumentNullException(String message, Exception innerException) { }
-
-        public ArgumentNullException(String paramName, String message) { }
-
-        public ArgumentNullException(String paramName) { }
-    }
-
-    public partial class ArgumentOutOfRangeException : ArgumentException
-    {
-        public ArgumentOutOfRangeException() { }
-
-        public ArgumentOutOfRangeException(String message, Exception innerException) { }
-
-        public ArgumentOutOfRangeException(String paramName, Object actualValue, String message) { }
-
-        public ArgumentOutOfRangeException(String paramName, String message) { }
-
-        public ArgumentOutOfRangeException(String paramName) { }
-
-        public virtual Object ActualValue { get { throw null; } }
-
-        public override String Message { get { throw null; } }
-    }
-
-    public partial class ArithmeticException : Exception
-    {
-        public ArithmeticException() { }
-
-        public ArithmeticException(String message, Exception innerException) { }
-
-        public ArithmeticException(String message) { }
-    }
-
-    public abstract partial class Array : Collections.IList, Collections.ICollection, Collections.IEnumerable, Collections.IStructuralComparable, Collections.IStructuralEquatable
-    {
-        internal Array() { }
-
-        public Int32 Length { get { throw null; } }
-
-        public Int32 Rank { get { throw null; } }
-
-        Int32 Collections.ICollection.Count { get { throw null; } }
-
-        Boolean Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        Object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        Boolean Collections.IList.IsFixedSize { get { throw null; } }
-
-        Boolean Collections.IList.IsReadOnly { get { throw null; } }
-
-        Object Collections.IList.this[Int32 index] { get { throw null; } set { } }
-
-        public static Int32 BinarySearch(Array array, Int32 index, Int32 length, Object value, Collections.IComparer comparer) { throw null; }
-
-        public static Int32 BinarySearch(Array array, Int32 index, Int32 length, Object value) { throw null; }
-
-        public static Int32 BinarySearch(Array array, Object value, Collections.IComparer comparer) { throw null; }
-
-        public static Int32 BinarySearch(Array array, Object value) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, T value, Collections.Generic.IComparer<T> comparer) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, T value) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, Int32 index, Int32 length, T value, Collections.Generic.IComparer<T> comparer) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, Int32 index, Int32 length, T value) { throw null; }
-
-        public static void Clear(Array array, Int32 index, Int32 length) { }
-
-        public Object Clone() { throw null; }
-
-        public static void ConstrainedCopy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length) { }
-
-        public static void Copy(Array sourceArray, Array destinationArray, Int32 length) { }
-
-        public static void Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length) { }
-
-        public void CopyTo(Array array, Int32 index) { }
-
-        public static Array CreateInstance(Type elementType, Int32[] lengths, Int32[] lowerBounds) { throw null; }
-
-        public static Array CreateInstance(Type elementType, params Int32[] lengths) { throw null; }
-
-        public static Boolean Exists<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static T Find<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static T[] FindAll<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static Int32 FindIndex<T>(T[] array, Int32 startIndex, Int32 count, Predicate<T> match) { throw null; }
-
-        public static Int32 FindIndex<T>(T[] array, Int32 startIndex, Predicate<T> match) { throw null; }
-
-        public static Int32 FindIndex<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static T FindLast<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static Int32 FindLastIndex<T>(T[] array, Int32 startIndex, Int32 count, Predicate<T> match) { throw null; }
-
-        public static Int32 FindLastIndex<T>(T[] array, Int32 startIndex, Predicate<T> match) { throw null; }
-
-        public static Int32 FindLastIndex<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        public Int32 GetLength(Int32 dimension) { throw null; }
-
-        public Int32 GetLowerBound(Int32 dimension) { throw null; }
-
-        public Int32 GetUpperBound(Int32 dimension) { throw null; }
-
-        public Object GetValue(params Int32[] indices) { throw null; }
-
-        public static Int32 IndexOf(Array array, Object value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 IndexOf(Array array, Object value, Int32 startIndex) { throw null; }
-
-        public static Int32 IndexOf(Array array, Object value) { throw null; }
-
-        public static Int32 IndexOf<T>(T[] array, T value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 IndexOf<T>(T[] array, T value, Int32 startIndex) { throw null; }
-
-        public static Int32 IndexOf<T>(T[] array, T value) { throw null; }
-
-        public void Initialize() { }
-
-        public static Int32 LastIndexOf(Array array, Object value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 LastIndexOf(Array array, Object value, Int32 startIndex) { throw null; }
-
-        public static Int32 LastIndexOf(Array array, Object value) { throw null; }
-
-        public static Int32 LastIndexOf<T>(T[] array, T value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 LastIndexOf<T>(T[] array, T value, Int32 startIndex) { throw null; }
-
-        public static Int32 LastIndexOf<T>(T[] array, T value) { throw null; }
-
-        public static void Resize<T>(ref T[] array, Int32 newSize) { }
-
-        public static void Reverse(Array array, Int32 index, Int32 length) { }
-
-        public static void Reverse(Array array) { }
-
-        public void SetValue(Object value, params Int32[] indices) { }
-
-        public static void Sort(Array array, Collections.IComparer comparer) { }
-
-        public static void Sort(Array array, Int32 index, Int32 length, Collections.IComparer comparer) { }
-
-        public static void Sort(Array array, Int32 index, Int32 length) { }
-
-        public static void Sort(Array array) { }
-
-        public static void Sort<T>(T[] array, Collections.Generic.IComparer<T> comparer) { }
-
-        public static void Sort<T>(T[] array, Comparison<T> comparison) { }
-
-        public static void Sort<T>(T[] array, Int32 index, Int32 length, Collections.Generic.IComparer<T> comparer) { }
-
-        public static void Sort<T>(T[] array, Int32 index, Int32 length) { }
-
-        public static void Sort<T>(T[] array) { }
-
-        Int32 Collections.IList.Add(Object value) { throw null; }
-
-        void Collections.IList.Clear() { }
-
-        Boolean Collections.IList.Contains(Object value) { throw null; }
-
-        Int32 Collections.IList.IndexOf(Object value) { throw null; }
-
-        void Collections.IList.Insert(Int32 index, Object value) { }
-
-        void Collections.IList.Remove(Object value) { }
-
-        void Collections.IList.RemoveAt(Int32 index) { }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        public static Boolean TrueForAll<T>(T[] array, Predicate<T> match) { throw null; }
-    }
-
-    public partial struct ArraySegment<T> : Collections.Generic.IList<T>, Collections.Generic.ICollection<T>, Collections.Generic.IReadOnlyList<T>, Collections.Generic.IReadOnlyCollection<T>, Collections.Generic.IEnumerable<T>, Collections.IEnumerable
-    {
-        public ArraySegment(T[] array, Int32 offset, Int32 count) { }
-
-        public ArraySegment(T[] array) { }
-
-        public T[] Array { get { throw null; } }
-
-        public Int32 Count { get { throw null; } }
-
-        public Int32 Offset { get { throw null; } }
-
-        Boolean Collections.Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        T Collections.Generic.IList<T>.this[Int32 index] { get { throw null; } set { } }
-
-        T Collections.Generic.IReadOnlyList<T>.this[Int32 index] { get { throw null; } }
-
-        public Boolean Equals(ArraySegment<T> obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(ArraySegment<T> a, ArraySegment<T> b) { throw null; }
-
-        public static Boolean operator !=(ArraySegment<T> a, ArraySegment<T> b) { throw null; }
-
-        void Collections.Generic.ICollection<T>.Add(T item) { }
-
-        void Collections.Generic.ICollection<T>.Clear() { }
-
-        Boolean Collections.Generic.ICollection<T>.Contains(T item) { throw null; }
-
-        void Collections.Generic.ICollection<T>.CopyTo(T[] array, Int32 arrayIndex) { }
-
-        Boolean Collections.Generic.ICollection<T>.Remove(T item) { throw null; }
-
-        Collections.Generic.IEnumerator<T> Collections.Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        Int32 Collections.Generic.IList<T>.IndexOf(T item) { throw null; }
-
-        void Collections.Generic.IList<T>.Insert(Int32 index, T item) { }
-
-        void Collections.Generic.IList<T>.RemoveAt(Int32 index) { }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-    }
-
-    public partial class ArrayTypeMismatchException : Exception
-    {
-        public ArrayTypeMismatchException() { }
-
-        public ArrayTypeMismatchException(String message, Exception innerException) { }
-
-        public ArrayTypeMismatchException(String message) { }
-    }
-
-    public delegate void AsyncCallback(IAsyncResult ar);
-    [AttributeUsage(AttributeTargets.All, Inherited = true, AllowMultiple = false)]
-    public abstract partial class Attribute
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-    }
-
-    [Flags]
-    public enum AttributeTargets
-    {
-        Assembly = 1,
-        Module = 2,
-        Class = 4,
-        Struct = 8,
-        Enum = 16,
-        Constructor = 32,
-        Method = 64,
-        Property = 128,
-        Field = 256,
-        Event = 512,
-        Interface = 1024,
-        Parameter = 2048,
-        Delegate = 4096,
-        ReturnValue = 8192,
-        GenericParameter = 16384,
-        All = 32767
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = true)]
-    public sealed partial class AttributeUsageAttribute : Attribute
-    {
-        public AttributeUsageAttribute(AttributeTargets validOn) { }
-
-        public Boolean AllowMultiple { get { throw null; } set { } }
-
-        public Boolean Inherited { get { throw null; } set { } }
-
-        public AttributeTargets ValidOn { get { throw null; } }
-    }
-
-    public partial class BadImageFormatException : Exception
-    {
-        public BadImageFormatException() { }
-
-        public BadImageFormatException(String message, Exception inner) { }
-
-        public BadImageFormatException(String message, String fileName, Exception inner) { }
-
-        public BadImageFormatException(String message, String fileName) { }
-
-        public BadImageFormatException(String message) { }
-
-        public String FileName { get { throw null; } }
-
-        public override String Message { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial struct Boolean : IComparable, IComparable<Boolean>, IEquatable<Boolean>
-    {
-        public static readonly String FalseString;
-        public static readonly String TrueString;
-        public Int32 CompareTo(Boolean value) { throw null; }
-
-        public Boolean Equals(Boolean obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean Parse(String value) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public static Boolean TryParse(String value, out Boolean result) { throw null; }
-    }
-
-    public static partial class Buffer
-    {
-        public static void BlockCopy(Array src, Int32 srcOffset, Array dst, Int32 dstOffset, Int32 count) { }
-
-        public static Int32 ByteLength(Array array) { throw null; }
-
-        public static Byte GetByte(Array array, Int32 index) { throw null; }
-
-        public static void SetByte(Array array, Int32 index, Byte value) { }
-    }
-
-    public partial struct Byte : IComparable, IComparable<Byte>, IEquatable<Byte>, IFormattable
-    {
-        public const Byte MaxValue = 255;
-        public const Byte MinValue = 0;
-        public Int32 CompareTo(Byte value) { throw null; }
-
-        public Boolean Equals(Byte obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Byte Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Byte Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Byte Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Byte Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, out Byte result) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Byte result) { throw null; }
-    }
-
-    public partial struct Char : IComparable, IComparable<Char>, IEquatable<Char>
-    {
-        public const Char MaxValue = '\uffff';
-        public const Char MinValue = '\0';
-        public Int32 CompareTo(Char value) { throw null; }
-
-        public static String ConvertFromUtf32(Int32 utf32) { throw null; }
-
-        public static Int32 ConvertToUtf32(Char highSurrogate, Char lowSurrogate) { throw null; }
-
-        public static Int32 ConvertToUtf32(String s, Int32 index) { throw null; }
-
-        public Boolean Equals(Char obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Double GetNumericValue(Char c) { throw null; }
-
-        public static Double GetNumericValue(String s, Int32 index) { throw null; }
-
-        public static Boolean IsControl(Char c) { throw null; }
-
-        public static Boolean IsControl(String s, Int32 index) { throw null; }
-
-        public static Boolean IsDigit(Char c) { throw null; }
-
-        public static Boolean IsDigit(String s, Int32 index) { throw null; }
-
-        public static Boolean IsHighSurrogate(Char c) { throw null; }
-
-        public static Boolean IsHighSurrogate(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLetter(Char c) { throw null; }
-
-        public static Boolean IsLetter(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLetterOrDigit(Char c) { throw null; }
-
-        public static Boolean IsLetterOrDigit(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLower(Char c) { throw null; }
-
-        public static Boolean IsLower(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLowSurrogate(Char c) { throw null; }
-
-        public static Boolean IsLowSurrogate(String s, Int32 index) { throw null; }
-
-        public static Boolean IsNumber(Char c) { throw null; }
-
-        public static Boolean IsNumber(String s, Int32 index) { throw null; }
-
-        public static Boolean IsPunctuation(Char c) { throw null; }
-
-        public static Boolean IsPunctuation(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSeparator(Char c) { throw null; }
-
-        public static Boolean IsSeparator(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSurrogate(Char c) { throw null; }
-
-        public static Boolean IsSurrogate(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSurrogatePair(Char highSurrogate, Char lowSurrogate) { throw null; }
-
-        public static Boolean IsSurrogatePair(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSymbol(Char c) { throw null; }
-
-        public static Boolean IsSymbol(String s, Int32 index) { throw null; }
-
-        public static Boolean IsUpper(Char c) { throw null; }
-
-        public static Boolean IsUpper(String s, Int32 index) { throw null; }
-
-        public static Boolean IsWhiteSpace(Char c) { throw null; }
-
-        public static Boolean IsWhiteSpace(String s, Int32 index) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public static Char ToLower(Char c) { throw null; }
-
-        public static Char ToLowerInvariant(Char c) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public static String ToString(Char c) { throw null; }
-
-        public static Char ToUpper(Char c) { throw null; }
-
-        public static Char ToUpperInvariant(Char c) { throw null; }
-
-        public static Boolean TryParse(String s, out Char result) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.All, Inherited = true, AllowMultiple = false)]
-    public sealed partial class CLSCompliantAttribute : Attribute
-    {
-        public CLSCompliantAttribute(Boolean isCompliant) { }
-
-        public Boolean IsCompliant { get { throw null; } }
-    }
-
-    public delegate Int32 Comparison<in T>(T x, T y);
-    public partial struct DateTime : IComparable, IComparable<DateTime>, IEquatable<DateTime>, IFormattable
-    {
-        public static readonly DateTime MaxValue;
-        public static readonly DateTime MinValue;
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, DateTimeKind kind) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, DateTimeKind kind) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day) { }
-
-        public DateTime(Int64 ticks, DateTimeKind kind) { }
-
-        public DateTime(Int64 ticks) { }
-
-        public DateTime Date { get { throw null; } }
-
-        public Int32 Day { get { throw null; } }
-
-        public DayOfWeek DayOfWeek { get { throw null; } }
-
-        public Int32 DayOfYear { get { throw null; } }
-
-        public Int32 Hour { get { throw null; } }
-
-        public DateTimeKind Kind { get { throw null; } }
-
-        public Int32 Millisecond { get { throw null; } }
-
-        public Int32 Minute { get { throw null; } }
-
-        public Int32 Month { get { throw null; } }
-
-        public static DateTime Now { get { throw null; } }
-
-        public Int32 Second { get { throw null; } }
-
-        public Int64 Ticks { get { throw null; } }
-
-        public TimeSpan TimeOfDay { get { throw null; } }
-
-        public static DateTime Today { get { throw null; } }
-
-        public static DateTime UtcNow { get { throw null; } }
-
-        public Int32 Year { get { throw null; } }
-
-        public DateTime Add(TimeSpan value) { throw null; }
-
-        public DateTime AddDays(Double value) { throw null; }
-
-        public DateTime AddHours(Double value) { throw null; }
-
-        public DateTime AddMilliseconds(Double value) { throw null; }
-
-        public DateTime AddMinutes(Double value) { throw null; }
-
-        public DateTime AddMonths(Int32 months) { throw null; }
-
-        public DateTime AddSeconds(Double value) { throw null; }
-
-        public DateTime AddTicks(Int64 value) { throw null; }
-
-        public DateTime AddYears(Int32 value) { throw null; }
-
-        public static Int32 Compare(DateTime t1, DateTime t2) { throw null; }
-
-        public Int32 CompareTo(DateTime value) { throw null; }
-
-        public static Int32 DaysInMonth(Int32 year, Int32 month) { throw null; }
-
-        public static Boolean Equals(DateTime t1, DateTime t2) { throw null; }
-
-        public Boolean Equals(DateTime value) { throw null; }
-
-        public override Boolean Equals(Object value) { throw null; }
-
-        public static DateTime FromBinary(Int64 dateData) { throw null; }
-
-        public static DateTime FromFileTime(Int64 fileTime) { throw null; }
-
-        public static DateTime FromFileTimeUtc(Int64 fileTime) { throw null; }
-
-        public String[] GetDateTimeFormats() { throw null; }
-
-        public String[] GetDateTimeFormats(Char format, IFormatProvider provider) { throw null; }
-
-        public String[] GetDateTimeFormats(Char format) { throw null; }
-
-        public String[] GetDateTimeFormats(IFormatProvider provider) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public Boolean IsDaylightSavingTime() { throw null; }
-
-        public static Boolean IsLeapYear(Int32 year) { throw null; }
-
-        public static DateTime operator +(DateTime d, TimeSpan t) { throw null; }
-
-        public static Boolean operator ==(DateTime d1, DateTime d2) { throw null; }
-
-        public static Boolean operator >(DateTime t1, DateTime t2) { throw null; }
-
-        public static Boolean operator >=(DateTime t1, DateTime t2) { throw null; }
-
-        public static Boolean operator !=(DateTime d1, DateTime d2) { throw null; }
-
-        public static Boolean operator <(DateTime t1, DateTime t2) { throw null; }
-
-        public static Boolean operator <=(DateTime t1, DateTime t2) { throw null; }
-
-        public static TimeSpan operator -(DateTime d1, DateTime d2) { throw null; }
-
-        public static DateTime operator -(DateTime d, TimeSpan t) { throw null; }
-
-        public static DateTime Parse(String s, IFormatProvider provider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public static DateTime Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static DateTime Parse(String s) { throw null; }
-
-        public static DateTime ParseExact(String s, String format, IFormatProvider provider, Globalization.DateTimeStyles style) { throw null; }
-
-        public static DateTime ParseExact(String s, String format, IFormatProvider provider) { throw null; }
-
-        public static DateTime ParseExact(String s, String[] formats, IFormatProvider provider, Globalization.DateTimeStyles style) { throw null; }
-
-        public static DateTime SpecifyKind(DateTime value, DateTimeKind kind) { throw null; }
-
-        public TimeSpan Subtract(DateTime value) { throw null; }
-
-        public DateTime Subtract(TimeSpan value) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public Int64 ToBinary() { throw null; }
-
-        public Int64 ToFileTime() { throw null; }
-
-        public Int64 ToFileTimeUtc() { throw null; }
-
-        public DateTime ToLocalTime() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public DateTime ToUniversalTime() { throw null; }
-
-        public static Boolean TryParse(String s, out DateTime result) { throw null; }
-
-        public static Boolean TryParse(String s, IFormatProvider provider, Globalization.DateTimeStyles styles, out DateTime result) { throw null; }
-
-        public static Boolean TryParseExact(String s, String format, IFormatProvider provider, Globalization.DateTimeStyles style, out DateTime result) { throw null; }
-
-        public static Boolean TryParseExact(String s, String[] formats, IFormatProvider provider, Globalization.DateTimeStyles style, out DateTime result) { throw null; }
-    }
-
-    public enum DateTimeKind
-    {
-        Unspecified = 0,
-        Utc = 1,
-        Local = 2
-    }
-
-    public partial struct DateTimeOffset : IComparable, IComparable<DateTimeOffset>, IEquatable<DateTimeOffset>, IFormattable
-    {
-        public static readonly DateTimeOffset MaxValue;
-        public static readonly DateTimeOffset MinValue;
-        public DateTimeOffset(DateTime dateTime, TimeSpan offset) { }
-
-        public DateTimeOffset(DateTime dateTime) { }
-
-        public DateTimeOffset(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, TimeSpan offset) { }
-
-        public DateTimeOffset(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, TimeSpan offset) { }
-
-        public DateTimeOffset(Int64 ticks, TimeSpan offset) { }
-
-        public DateTime Date { get { throw null; } }
-
-        public DateTime DateTime { get { throw null; } }
-
-        public Int32 Day { get { throw null; } }
-
-        public DayOfWeek DayOfWeek { get { throw null; } }
-
-        public Int32 DayOfYear { get { throw null; } }
-
-        public Int32 Hour { get { throw null; } }
-
-        public DateTime LocalDateTime { get { throw null; } }
-
-        public Int32 Millisecond { get { throw null; } }
-
-        public Int32 Minute { get { throw null; } }
-
-        public Int32 Month { get { throw null; } }
-
-        public static DateTimeOffset Now { get { throw null; } }
-
-        public TimeSpan Offset { get { throw null; } }
-
-        public Int32 Second { get { throw null; } }
-
-        public Int64 Ticks { get { throw null; } }
-
-        public TimeSpan TimeOfDay { get { throw null; } }
-
-        public DateTime UtcDateTime { get { throw null; } }
-
-        public static DateTimeOffset UtcNow { get { throw null; } }
-
-        public Int64 UtcTicks { get { throw null; } }
-
-        public Int32 Year { get { throw null; } }
-
-        public DateTimeOffset Add(TimeSpan timeSpan) { throw null; }
-
-        public DateTimeOffset AddDays(Double days) { throw null; }
-
-        public DateTimeOffset AddHours(Double hours) { throw null; }
-
-        public DateTimeOffset AddMilliseconds(Double milliseconds) { throw null; }
-
-        public DateTimeOffset AddMinutes(Double minutes) { throw null; }
-
-        public DateTimeOffset AddMonths(Int32 months) { throw null; }
-
-        public DateTimeOffset AddSeconds(Double seconds) { throw null; }
-
-        public DateTimeOffset AddTicks(Int64 ticks) { throw null; }
-
-        public DateTimeOffset AddYears(Int32 years) { throw null; }
-
-        public static Int32 Compare(DateTimeOffset first, DateTimeOffset second) { throw null; }
-
-        public Int32 CompareTo(DateTimeOffset other) { throw null; }
-
-        public static Boolean Equals(DateTimeOffset first, DateTimeOffset second) { throw null; }
-
-        public Boolean Equals(DateTimeOffset other) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean EqualsExact(DateTimeOffset other) { throw null; }
-
-        public static DateTimeOffset FromFileTime(Int64 fileTime) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan) { throw null; }
-
-        public static Boolean operator ==(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator >(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator >=(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static implicit operator DateTimeOffset(DateTime dateTime) { throw null; }
-
-        public static Boolean operator !=(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator <(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator <=(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan) { throw null; }
-
-        public static DateTimeOffset Parse(String input, IFormatProvider formatProvider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public static DateTimeOffset Parse(String input, IFormatProvider formatProvider) { throw null; }
-
-        public static DateTimeOffset Parse(String input) { throw null; }
-
-        public static DateTimeOffset ParseExact(String input, String format, IFormatProvider formatProvider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public static DateTimeOffset ParseExact(String input, String format, IFormatProvider formatProvider) { throw null; }
-
-        public static DateTimeOffset ParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public TimeSpan Subtract(DateTimeOffset value) { throw null; }
-
-        public DateTimeOffset Subtract(TimeSpan value) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public Int64 ToFileTime() { throw null; }
-
-        public DateTimeOffset ToLocalTime() { throw null; }
-
-        public DateTimeOffset ToOffset(TimeSpan offset) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider formatProvider) { throw null; }
-
-        public String ToString(String format, IFormatProvider formatProvider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public DateTimeOffset ToUniversalTime() { throw null; }
-
-        public static Boolean TryParse(String input, out DateTimeOffset result) { throw null; }
-
-        public static Boolean TryParse(String input, IFormatProvider formatProvider, Globalization.DateTimeStyles styles, out DateTimeOffset result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, IFormatProvider formatProvider, Globalization.DateTimeStyles styles, out DateTimeOffset result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.DateTimeStyles styles, out DateTimeOffset result) { throw null; }
-    }
-
-    public enum DayOfWeek
-    {
-        Sunday = 0,
-        Monday = 1,
-        Tuesday = 2,
-        Wednesday = 3,
-        Thursday = 4,
-        Friday = 5,
-        Saturday = 6
-    }
-
-    public partial struct Decimal : IComparable, IComparable<Decimal>, IEquatable<Decimal>, IFormattable
-    {
-        public const Decimal MaxValue = 79228162514264337593543950335M;
-        public const Decimal MinusOne = -1M;
-        public const Decimal MinValue = -79228162514264337593543950335M;
-        public const Decimal One = 1M;
-        public const Decimal Zero = 0M;
-        public Decimal(Double value) { }
-
-        public Decimal(Int32 lo, Int32 mid, Int32 hi, Boolean isNegative, Byte scale) { }
-
-        public Decimal(Int32 value) { }
-
-        public Decimal(Int32[] bits) { }
-
-        public Decimal(Int64 value) { }
-
-        public Decimal(Single value) { }
-
-        [CLSCompliant(false)]
-        public Decimal(UInt32 value) { }
-
-        [CLSCompliant(false)]
-        public Decimal(UInt64 value) { }
-
-        public static Decimal Add(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal Ceiling(Decimal d) { throw null; }
-
-        public static Int32 Compare(Decimal d1, Decimal d2) { throw null; }
-
-        public Int32 CompareTo(Decimal value) { throw null; }
-
-        public static Decimal Divide(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean Equals(Decimal d1, Decimal d2) { throw null; }
-
-        public Boolean Equals(Decimal value) { throw null; }
-
-        public override Boolean Equals(Object value) { throw null; }
-
-        public static Decimal Floor(Decimal d) { throw null; }
-
-        public static Int32[] GetBits(Decimal d) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Decimal Multiply(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal Negate(Decimal d) { throw null; }
-
-        public static Decimal operator +(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator --(Decimal d) { throw null; }
-
-        public static Decimal operator /(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator ==(Decimal d1, Decimal d2) { throw null; }
-
-        public static explicit operator Byte(Decimal value) { throw null; }
-
-        public static explicit operator Char(Decimal value) { throw null; }
-
-        public static explicit operator Double(Decimal value) { throw null; }
-
-        public static explicit operator Int16(Decimal value) { throw null; }
-
-        public static explicit operator Int32(Decimal value) { throw null; }
-
-        public static explicit operator Int64(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator SByte(Decimal value) { throw null; }
-
-        public static explicit operator Single(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator UInt16(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator UInt32(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator UInt64(Decimal value) { throw null; }
-
-        public static explicit operator Decimal(Double value) { throw null; }
-
-        public static explicit operator Decimal(Single value) { throw null; }
-
-        public static Boolean operator >(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator >=(Decimal d1, Decimal d2) { throw null; }
-
-        public static implicit operator Decimal(Byte value) { throw null; }
-
-        public static implicit operator Decimal(Char value) { throw null; }
-
-        public static implicit operator Decimal(Int16 value) { throw null; }
-
-        public static implicit operator Decimal(Int32 value) { throw null; }
-
-        public static implicit operator Decimal(Int64 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(SByte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(UInt16 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(UInt32 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(UInt64 value) { throw null; }
-
-        public static Decimal operator ++(Decimal d) { throw null; }
-
-        public static Boolean operator !=(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator <(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator <=(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator %(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator *(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator -(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator -(Decimal d) { throw null; }
-
-        public static Decimal operator +(Decimal d) { throw null; }
-
-        public static Decimal Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Decimal Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Decimal Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Decimal Parse(String s) { throw null; }
-
-        public static Decimal Remainder(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal Subtract(Decimal d1, Decimal d2) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public static Byte ToByte(Decimal value) { throw null; }
-
-        public static Double ToDouble(Decimal d) { throw null; }
-
-        public static Int16 ToInt16(Decimal value) { throw null; }
-
-        public static Int32 ToInt32(Decimal d) { throw null; }
-
-        public static Int64 ToInt64(Decimal d) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte ToSByte(Decimal value) { throw null; }
-
-        public static Single ToSingle(Decimal d) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 ToUInt16(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 ToUInt32(Decimal d) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 ToUInt64(Decimal d) { throw null; }
-
-        public static Decimal Truncate(Decimal d) { throw null; }
-
-        public static Boolean TryParse(String s, out Decimal result) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Decimal result) { throw null; }
-    }
-
-    public abstract partial class Delegate
-    {
-        internal Delegate() { }
-
-        public Object Target { get { throw null; } }
-
-        public static Delegate Combine(Delegate a, Delegate b) { throw null; }
-
-        public static Delegate Combine(params Delegate[] delegates) { throw null; }
-
-        public Object DynamicInvoke(params Object[] args) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public virtual Delegate[] GetInvocationList() { throw null; }
-
-        public static Boolean operator ==(Delegate d1, Delegate d2) { throw null; }
-
-        public static Boolean operator !=(Delegate d1, Delegate d2) { throw null; }
-
-        public static Delegate Remove(Delegate source, Delegate value) { throw null; }
-
-        public static Delegate RemoveAll(Delegate source, Delegate value) { throw null; }
-    }
-
-    public partial class DivideByZeroException : ArithmeticException
-    {
-        public DivideByZeroException() { }
-
-        public DivideByZeroException(String message, Exception innerException) { }
-
-        public DivideByZeroException(String message) { }
-    }
-
-    public partial struct Double : IComparable, IComparable<Double>, IEquatable<Double>, IFormattable
-    {
-        public const Double Epsilon = 5E-324D;
-        public const Double MaxValue = 1.7976931348623157E+308D;
-        public const Double MinValue = -1.7976931348623157E+308D;
-        public const Double NaN = 0D / 0D;
-        public const Double NegativeInfinity = -1D / 0D;
-        public const Double PositiveInfinity = 1D / 0D;
-        public Int32 CompareTo(Double value) { throw null; }
-
-        public Boolean Equals(Double obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean IsInfinity(Double d) { throw null; }
-
-        public static Boolean IsNaN(Double d) { throw null; }
-
-        public static Boolean IsNegativeInfinity(Double d) { throw null; }
-
-        public static Boolean IsPositiveInfinity(Double d) { throw null; }
-
-        public static Boolean operator ==(Double left, Double right) { throw null; }
-
-        public static Boolean operator >(Double left, Double right) { throw null; }
-
-        public static Boolean operator >=(Double left, Double right) { throw null; }
-
-        public static Boolean operator !=(Double left, Double right) { throw null; }
-
-        public static Boolean operator <(Double left, Double right) { throw null; }
-
-        public static Boolean operator <=(Double left, Double right) { throw null; }
-
-        public static Double Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Double Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Double Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Double Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, out Double result) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Double result) { throw null; }
-    }
-
-    public abstract partial class Enum : ValueType, IComparable, IFormattable
-    {
-        public Int32 CompareTo(Object target) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public static String Format(Type enumType, Object value, String format) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static String GetName(Type enumType, Object value) { throw null; }
-
-        public static String[] GetNames(Type enumType) { throw null; }
-
-        public static Type GetUnderlyingType(Type enumType) { throw null; }
-
-        public static Array GetValues(Type enumType) { throw null; }
-
-        public Boolean HasFlag(Enum flag) { throw null; }
-
-        public static Boolean IsDefined(Type enumType, Object value) { throw null; }
-
-        public static Object Parse(Type enumType, String value, Boolean ignoreCase) { throw null; }
-
-        public static Object Parse(Type enumType, String value) { throw null; }
-
-        [Obsolete("The provider argument is not used. Please use ToString(String).")]
-        String IFormattable.ToString(String format, IFormatProvider provider) { throw null; }
-
-        public static Object ToObject(Type enumType, Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse<TEnum>(String value, out TEnum result)
-            where TEnum : struct { throw null; }
-
-        public static Boolean TryParse<TEnum>(String value, Boolean ignoreCase, out TEnum result)
-            where TEnum : struct { throw null; }
-    }
-
-    public partial class EventArgs
-    {
-        public static readonly EventArgs Empty;
-    }
-
-    public delegate void EventHandler(Object sender, EventArgs e);
-    public delegate void EventHandler<TEventArgs>(Object sender, TEventArgs e);
-    public partial class Exception
-    {
-        public Exception() { }
-
-        public Exception(String message, Exception innerException) { }
-
-        public Exception(String message) { }
-
-        public virtual Collections.IDictionary Data { get { throw null; } }
-
-        public virtual String HelpLink { get { throw null; } set { } }
-
-        public Int32 HResult { get { throw null; } protected set { } }
-
-        public Exception InnerException { get { throw null; } }
-
-        public virtual String Message { get { throw null; } }
-
-        public virtual String Source { get { throw null; } set { } }
-
-        public virtual String StackTrace { get { throw null; } }
-
-        public virtual Exception GetBaseException() { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Enum, Inherited = false)]
-    public partial class FlagsAttribute : Attribute
-    {
-    }
-
-    public partial class FormatException : Exception
-    {
-        public FormatException() { }
-
-        public FormatException(String message, Exception innerException) { }
-
-        public FormatException(String message) { }
-    }
-
-    public delegate TResult Func<out TResult>();
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, in T16, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
-    public delegate TResult Func<in T, out TResult>(T arg);
-    public delegate TResult Func<in T1, in T2, out TResult>(T1 arg1, T2 arg2);
-    public delegate TResult Func<in T1, in T2, in T3, out TResult>(T1 arg1, T2 arg2, T3 arg3);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
-    public static partial class GC
-    {
-        public static Int32 MaxGeneration { get { throw null; } }
-
-        public static void AddMemoryPressure(Int64 bytesAllocated) { }
-
-        public static void Collect() { }
-
-        public static void Collect(Int32 generation, GCCollectionMode mode, Boolean blocking) { }
-
-        public static void Collect(Int32 generation, GCCollectionMode mode) { }
-
-        public static void Collect(Int32 generation) { }
-
-        public static Int32 CollectionCount(Int32 generation) { throw null; }
-
-        public static Int64 GetTotalMemory(Boolean forceFullCollection) { throw null; }
-
-        public static void KeepAlive(Object obj) { }
-
-        public static void RemoveMemoryPressure(Int64 bytesAllocated) { }
-
-        public static void ReRegisterForFinalize(Object obj) { }
-
-        public static void SuppressFinalize(Object obj) { }
-
-        public static void WaitForPendingFinalizers() { }
-    }
-
-    public enum GCCollectionMode
-    {
-        Default = 0,
-        Forced = 1,
-        Optimized = 2
-    }
-
-    public partial struct Guid : IComparable, IComparable<Guid>, IEquatable<Guid>, IFormattable
-    {
-        public static readonly Guid Empty;
-        public Guid(Byte[] b) { }
-
-        public Guid(Int32 a, Int16 b, Int16 c, Byte d, Byte e, Byte f, Byte g, Byte h, Byte i, Byte j, Byte k) { }
-
-        public Guid(Int32 a, Int16 b, Int16 c, Byte[] d) { }
-
-        public Guid(String g) { }
-
-        public Int32 CompareTo(Guid value) { throw null; }
-
-        public Boolean Equals(Guid g) { throw null; }
-
-        public override Boolean Equals(Object o) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Guid NewGuid() { throw null; }
-
-        public static Boolean operator ==(Guid a, Guid b) { throw null; }
-
-        public static Boolean operator !=(Guid a, Guid b) { throw null; }
-
-        public static Guid Parse(String input) { throw null; }
-
-        public static Guid ParseExact(String input, String format) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        String IFormattable.ToString(String format, IFormatProvider provider) { throw null; }
-
-        public Byte[] ToByteArray() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String input, out Guid result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, out Guid result) { throw null; }
-    }
-
-    public partial interface IAsyncResult
-    {
-        Object AsyncState { get; }
-
-        Threading.WaitHandle AsyncWaitHandle { get; }
-
-        Boolean CompletedSynchronously { get; }
-
-        Boolean IsCompleted { get; }
-    }
-
-    public partial interface IComparable
-    {
-        Int32 CompareTo(Object obj);
-    }
-
-    public partial interface IComparable<in T>
-    {
-        Int32 CompareTo(T other);
-    }
-
-    public partial interface ICustomFormatter
-    {
-        String Format(String format, Object arg, IFormatProvider formatProvider);
-    }
-
-    public partial interface IDisposable
-    {
-        void Dispose();
-    }
-
-    public partial interface IEquatable<T>
-    {
-        Boolean Equals(T other);
-    }
-
-    public partial interface IFormatProvider
-    {
-        Object GetFormat(Type formatType);
-    }
-
-    public partial interface IFormattable
-    {
-        String ToString(String format, IFormatProvider formatProvider);
-    }
-
-    public sealed partial class IndexOutOfRangeException : Exception
-    {
-        public IndexOutOfRangeException() { }
-
-        public IndexOutOfRangeException(String message, Exception innerException) { }
-
-        public IndexOutOfRangeException(String message) { }
-    }
-
-    public partial struct Int16 : IComparable, IComparable<Int16>, IEquatable<Int16>, IFormattable
-    {
-        public const Int16 MaxValue = 32767;
-        public const Int16 MinValue = -32768;
-        public Int32 CompareTo(Int16 value) { throw null; }
-
-        public Boolean Equals(Int16 obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Int16 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Int16 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Int16 Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Int16 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Int16 result) { throw null; }
-
-        public static Boolean TryParse(String s, out Int16 result) { throw null; }
-    }
-
-    public partial struct Int32 : IComparable, IComparable<Int32>, IEquatable<Int32>, IFormattable
-    {
-        public const Int32 MaxValue = 2147483647;
-        public const Int32 MinValue = -2147483648;
-        public Int32 CompareTo(Int32 value) { throw null; }
-
-        public Boolean Equals(Int32 obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Int32 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Int32 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Int32 Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Int32 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Int32 result) { throw null; }
-
-        public static Boolean TryParse(String s, out Int32 result) { throw null; }
-    }
-
-    public partial struct Int64 : IComparable, IComparable<Int64>, IEquatable<Int64>, IFormattable
-    {
-        public const Int64 MaxValue = 9223372036854775807L;
-        public const Int64 MinValue = -9223372036854775808;
-        public Int32 CompareTo(Int64 value) { throw null; }
-
-        public Boolean Equals(Int64 obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Int64 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Int64 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Int64 Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Int64 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Int64 result) { throw null; }
-
-        public static Boolean TryParse(String s, out Int64 result) { throw null; }
-    }
-
-    public partial struct IntPtr
-    {
-        public static readonly IntPtr Zero;
-        public IntPtr(Int32 value) { }
-
-        public IntPtr(Int64 value) { }
-
-        [CLSCompliant(false)]
-        public unsafe IntPtr(void* value) { }
-
-        public static Int32 Size { get { throw null; } }
-
-        public static IntPtr Add(IntPtr pointer, Int32 offset) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static IntPtr operator +(IntPtr pointer, Int32 offset) { throw null; }
-
-        public static Boolean operator ==(IntPtr value1, IntPtr value2) { throw null; }
-
-        public static explicit operator IntPtr(Int32 value) { throw null; }
-
-        public static explicit operator IntPtr(Int64 value) { throw null; }
-
-        public static explicit operator Int32(IntPtr value) { throw null; }
-
-        public static explicit operator Int64(IntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator void*(IntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator IntPtr(void* value) { throw null; }
-
-        public static Boolean operator !=(IntPtr value1, IntPtr value2) { throw null; }
-
-        public static IntPtr operator -(IntPtr pointer, Int32 offset) { throw null; }
-
-        public static IntPtr Subtract(IntPtr pointer, Int32 offset) { throw null; }
-
-        public Int32 ToInt32() { throw null; }
-
-        public Int64 ToInt64() { throw null; }
-
-        [CLSCompliant(false)]
-        public unsafe void* ToPointer() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format) { throw null; }
-    }
-
-    public partial class InvalidCastException : Exception
-    {
-        public InvalidCastException() { }
-
-        public InvalidCastException(String message, Exception innerException) { }
-
-        public InvalidCastException(String message, Int32 errorCode) { }
-
-        public InvalidCastException(String message) { }
-    }
-
-    public partial class InvalidOperationException : Exception
-    {
-        public InvalidOperationException() { }
-
-        public InvalidOperationException(String message, Exception innerException) { }
-
-        public InvalidOperationException(String message) { }
-    }
-
-    public partial class InvalidTimeZoneException : Exception
-    {
-        public InvalidTimeZoneException() { }
-
-        public InvalidTimeZoneException(String message, Exception innerException) { }
-
-        public InvalidTimeZoneException(String message) { }
-    }
-
-    public partial interface IObservable<out T>
-    {
-        IDisposable Subscribe(IObserver<T> observer);
-    }
-
-    public partial interface IObserver<in T>
-    {
-        void OnCompleted();
-        void OnError(Exception error);
-        void OnNext(T value);
-    }
-
-    public partial interface IProgress<in T>
-    {
-        void Report(T value);
-    }
-
-    public partial class Lazy<T>
-    {
-        public Lazy() { }
-
-        public Lazy(Boolean isThreadSafe) { }
-
-        public Lazy(Func<T> valueFactory, Boolean isThreadSafe) { }
-
-        public Lazy(Func<T> valueFactory, Threading.LazyThreadSafetyMode mode) { }
-
-        public Lazy(Func<T> valueFactory) { }
-
-        public Lazy(Threading.LazyThreadSafetyMode mode) { }
-
-        public Boolean IsValueCreated { get { throw null; } }
-
-        public T Value { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Lazy<T, TMetadata> : Lazy<T>
-    {
-        public Lazy(TMetadata metadata, Boolean isThreadSafe) { }
-
-        public Lazy(TMetadata metadata, Threading.LazyThreadSafetyMode mode) { }
-
-        public Lazy(TMetadata metadata) { }
-
-        public Lazy(Func<T> valueFactory, TMetadata metadata, Boolean isThreadSafe) { }
-
-        public Lazy(Func<T> valueFactory, TMetadata metadata, Threading.LazyThreadSafetyMode mode) { }
-
-        public Lazy(Func<T> valueFactory, TMetadata metadata) { }
-
-        public TMetadata Metadata { get { throw null; } }
-    }
-
-    public partial class MemberAccessException : Exception
-    {
-        public MemberAccessException() { }
-
-        public MemberAccessException(String message, Exception inner) { }
-
-        public MemberAccessException(String message) { }
-    }
-
-    public partial class MissingMemberException : MemberAccessException
-    {
-        public MissingMemberException() { }
-
-        public MissingMemberException(String message, Exception inner) { }
-
-        public MissingMemberException(String message) { }
-
-        public override String Message { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class MTAThreadAttribute : Attribute
-    {
-    }
-
-    public abstract partial class MulticastDelegate : Delegate
-    {
-        internal MulticastDelegate() { }
-
-        public sealed override Boolean Equals(Object obj) { throw null; }
-
-        public sealed override Int32 GetHashCode() { throw null; }
-
-        public sealed override Delegate[] GetInvocationList() { throw null; }
-
-        public static Boolean operator ==(MulticastDelegate d1, MulticastDelegate d2) { throw null; }
-
-        public static Boolean operator !=(MulticastDelegate d1, MulticastDelegate d2) { throw null; }
-    }
-
-    public partial class NotImplementedException : Exception
-    {
-        public NotImplementedException() { }
-
-        public NotImplementedException(String message, Exception inner) { }
-
-        public NotImplementedException(String message) { }
-    }
-
-    public partial class NotSupportedException : Exception
-    {
-        public NotSupportedException() { }
-
-        public NotSupportedException(String message, Exception innerException) { }
-
-        public NotSupportedException(String message) { }
-    }
-
-    public static partial class Nullable
-    {
-        public static Int32 Compare<T>(T? n1, T? n2)
-            where T : struct { throw null; }
-
-        public static Boolean Equals<T>(T? n1, T? n2)
-            where T : struct { throw null; }
-
-        public static Type GetUnderlyingType(Type nullableType) { throw null; }
-    }
-
-    public partial struct Nullable<T>
-        where T : struct
-    {
-        public Nullable(T value) { }
-
-        public Boolean HasValue { get { throw null; } }
-
-        public T Value { get { throw null; } }
-
-        public override Boolean Equals(Object other) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public T GetValueOrDefault() { throw null; }
-
-        public T GetValueOrDefault(T defaultValue) { throw null; }
-
-        public static explicit operator T(T? value) { throw null; }
-
-        public static implicit operator T?(T value) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class NullReferenceException : Exception
-    {
-        public NullReferenceException() { }
-
-        public NullReferenceException(String message, Exception innerException) { }
-
-        public NullReferenceException(String message) { }
-    }
-
-    public partial class Object
-    {
-        public static Boolean Equals(Object objA, Object objB) { throw null; }
-
-        public virtual Boolean Equals(Object obj) { throw null; }
-
-        ~Object() {
-        }
-
-        public virtual Int32 GetHashCode() { throw null; }
-
-        public Type GetType() { throw null; }
-
-        protected Object MemberwiseClone() { throw null; }
-
-        public static Boolean ReferenceEquals(Object objA, Object objB) { throw null; }
-
-        public virtual String ToString() { throw null; }
-    }
-
-    public partial class ObjectDisposedException : InvalidOperationException
-    {
-        public ObjectDisposedException(String message, Exception innerException) { }
-
-        public ObjectDisposedException(String objectName, String message) { }
-
-        public ObjectDisposedException(String objectName) { }
-
-        public override String Message { get { throw null; } }
-
-        public String ObjectName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)]
-    public sealed partial class ObsoleteAttribute : Attribute
-    {
-        public ObsoleteAttribute() { }
-
-        public ObsoleteAttribute(String message, Boolean error) { }
-
-        public ObsoleteAttribute(String message) { }
-
-        public Boolean IsError { get { throw null; } }
-
-        public String Message { get { throw null; } }
-    }
-
-    public partial class OutOfMemoryException : Exception
-    {
-        public OutOfMemoryException() { }
-
-        public OutOfMemoryException(String message, Exception innerException) { }
-
-        public OutOfMemoryException(String message) { }
-    }
-
-    public partial class OverflowException : ArithmeticException
-    {
-        public OverflowException() { }
-
-        public OverflowException(String message, Exception innerException) { }
-
-        public OverflowException(String message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = true, AllowMultiple = false)]
-    public sealed partial class ParamArrayAttribute : Attribute
-    {
-    }
-
-    public partial class PlatformNotSupportedException : NotSupportedException
-    {
-        public PlatformNotSupportedException() { }
-
-        public PlatformNotSupportedException(String message, Exception inner) { }
-
-        public PlatformNotSupportedException(String message) { }
-    }
-
-    public delegate Boolean Predicate<in T>(T obj);
-    public partial class RankException : Exception
-    {
-        public RankException() { }
-
-        public RankException(String message, Exception innerException) { }
-
-        public RankException(String message) { }
-    }
-
-    public partial struct RuntimeFieldHandle
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(RuntimeFieldHandle handle) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(RuntimeFieldHandle left, RuntimeFieldHandle right) { throw null; }
-
-        public static Boolean operator !=(RuntimeFieldHandle left, RuntimeFieldHandle right) { throw null; }
-    }
-
-    public partial struct RuntimeMethodHandle
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(RuntimeMethodHandle handle) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(RuntimeMethodHandle left, RuntimeMethodHandle right) { throw null; }
-
-        public static Boolean operator !=(RuntimeMethodHandle left, RuntimeMethodHandle right) { throw null; }
-    }
-
-    public partial struct RuntimeTypeHandle
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(RuntimeTypeHandle handle) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(Object left, RuntimeTypeHandle right) { throw null; }
-
-        public static Boolean operator ==(RuntimeTypeHandle left, Object right) { throw null; }
-
-        public static Boolean operator !=(Object left, RuntimeTypeHandle right) { throw null; }
-
-        public static Boolean operator !=(RuntimeTypeHandle left, Object right) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct SByte : IComparable, IComparable<SByte>, IEquatable<SByte>, IFormattable
-    {
-        public const SByte MaxValue = 127;
-        public const SByte MinValue = -128;
-        public Int32 CompareTo(SByte value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(SByte obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out SByte result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out SByte result) { throw null; }
-    }
-
-    public partial struct Single : IComparable, IComparable<Single>, IEquatable<Single>, IFormattable
-    {
-        public const Single Epsilon = 1E-45F;
-        public const Single MaxValue = 3.4028235E+38F;
-        public const Single MinValue = -3.4028235E+38F;
-        public const Single NaN = 0F / 0F;
-        public const Single NegativeInfinity = -1F / 0F;
-        public const Single PositiveInfinity = 1F / 0F;
-        public Int32 CompareTo(Single value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(Single obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean IsInfinity(Single f) { throw null; }
-
-        public static Boolean IsNaN(Single f) { throw null; }
-
-        public static Boolean IsNegativeInfinity(Single f) { throw null; }
-
-        public static Boolean IsPositiveInfinity(Single f) { throw null; }
-
-        public static Boolean operator ==(Single left, Single right) { throw null; }
-
-        public static Boolean operator >(Single left, Single right) { throw null; }
-
-        public static Boolean operator >=(Single left, Single right) { throw null; }
-
-        public static Boolean operator !=(Single left, Single right) { throw null; }
-
-        public static Boolean operator <(Single left, Single right) { throw null; }
-
-        public static Boolean operator <=(Single left, Single right) { throw null; }
-
-        public static Single Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Single Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Single Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Single Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Single result) { throw null; }
-
-        public static Boolean TryParse(String s, out Single result) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class STAThreadAttribute : Attribute
-    {
-    }
-
-    public sealed partial class String : IComparable, IComparable<String>, IEquatable<String>, Collections.Generic.IEnumerable<Char>, Collections.IEnumerable
-    {
-        public static readonly String Empty;
-        public String(Char c, Int32 count) { }
-
-        public String(Char[] value, Int32 startIndex, Int32 length) { }
-
-        public String(Char[] value) { }
-
-        [CLSCompliant(false)]
-        public unsafe String(Char* value, Int32 startIndex, Int32 length) { }
-
-        [CLSCompliant(false)]
-        public unsafe String(Char* value) { }
-
-        public Char this[Int32 index] { get { throw null; } }
-
-        public Int32 Length { get { throw null; } }
-
-        public static Int32 Compare(String strA, Int32 indexA, String strB, Int32 indexB, Int32 length, StringComparison comparisonType) { throw null; }
-
-        public static Int32 Compare(String strA, Int32 indexA, String strB, Int32 indexB, Int32 length) { throw null; }
-
-        public static Int32 Compare(String strA, String strB, StringComparison comparisonType) { throw null; }
-
-        public static Int32 Compare(String strA, String strB) { throw null; }
-
-        public static Int32 CompareOrdinal(String strA, Int32 indexA, String strB, Int32 indexB, Int32 length) { throw null; }
-
-        public static Int32 CompareOrdinal(String strA, String strB) { throw null; }
-
-        public Int32 CompareTo(String strB) { throw null; }
-
-        public static String Concat(Collections.Generic.IEnumerable<String> values) { throw null; }
-
-        public static String Concat(Object arg0, Object arg1, Object arg2) { throw null; }
-
-        public static String Concat(Object arg0, Object arg1) { throw null; }
-
-        public static String Concat(Object arg0) { throw null; }
-
-        public static String Concat(params Object[] args) { throw null; }
-
-        public static String Concat(String str0, String str1, String str2, String str3) { throw null; }
-
-        public static String Concat(String str0, String str1, String str2) { throw null; }
-
-        public static String Concat(String str0, String str1) { throw null; }
-
-        public static String Concat(params String[] values) { throw null; }
-
-        public static String Concat<T>(Collections.Generic.IEnumerable<T> values) { throw null; }
-
-        public Boolean Contains(String value) { throw null; }
-
-        public void CopyTo(Int32 sourceIndex, Char[] destination, Int32 destinationIndex, Int32 count) { }
-
-        public Boolean EndsWith(String value, StringComparison comparisonType) { throw null; }
-
-        public Boolean EndsWith(String value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public static Boolean Equals(String a, String b, StringComparison comparisonType) { throw null; }
-
-        public static Boolean Equals(String a, String b) { throw null; }
-
-        public Boolean Equals(String value, StringComparison comparisonType) { throw null; }
-
-        public Boolean Equals(String value) { throw null; }
-
-        public static String Format(IFormatProvider provider, String format, params Object[] args) { throw null; }
-
-        public static String Format(String format, params Object[] args) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public Int32 IndexOf(Char value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 IndexOf(Char value, Int32 startIndex) { throw null; }
-
-        public Int32 IndexOf(Char value) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex, Int32 count, StringComparison comparisonType) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex, StringComparison comparisonType) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex) { throw null; }
-
-        public Int32 IndexOf(String value, StringComparison comparisonType) { throw null; }
-
-        public Int32 IndexOf(String value) { throw null; }
-
-        public Int32 IndexOfAny(Char[] anyOf, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 IndexOfAny(Char[] anyOf, Int32 startIndex) { throw null; }
-
-        public Int32 IndexOfAny(Char[] anyOf) { throw null; }
-
-        public String Insert(Int32 startIndex, String value) { throw null; }
-
-        public static Boolean IsNullOrEmpty(String value) { throw null; }
-
-        public static Boolean IsNullOrWhiteSpace(String value) { throw null; }
-
-        public static String Join(String separator, Collections.Generic.IEnumerable<String> values) { throw null; }
-
-        public static String Join(String separator, params Object[] values) { throw null; }
-
-        public static String Join(String separator, String[] value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static String Join(String separator, params String[] value) { throw null; }
-
-        public static String Join<T>(String separator, Collections.Generic.IEnumerable<T> values) { throw null; }
-
-        public Int32 LastIndexOf(Char value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 LastIndexOf(Char value, Int32 startIndex) { throw null; }
-
-        public Int32 LastIndexOf(Char value) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex, Int32 count, StringComparison comparisonType) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex, StringComparison comparisonType) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex) { throw null; }
-
-        public Int32 LastIndexOf(String value, StringComparison comparisonType) { throw null; }
-
-        public Int32 LastIndexOf(String value) { throw null; }
-
-        public Int32 LastIndexOfAny(Char[] anyOf, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 LastIndexOfAny(Char[] anyOf, Int32 startIndex) { throw null; }
-
-        public Int32 LastIndexOfAny(Char[] anyOf) { throw null; }
-
-        public static Boolean operator ==(String a, String b) { throw null; }
-
-        public static Boolean operator !=(String a, String b) { throw null; }
-
-        public String PadLeft(Int32 totalWidth, Char paddingChar) { throw null; }
-
-        public String PadLeft(Int32 totalWidth) { throw null; }
-
-        public String PadRight(Int32 totalWidth, Char paddingChar) { throw null; }
-
-        public String PadRight(Int32 totalWidth) { throw null; }
-
-        public String Remove(Int32 startIndex, Int32 count) { throw null; }
-
-        public String Remove(Int32 startIndex) { throw null; }
-
-        public String Replace(Char oldChar, Char newChar) { throw null; }
-
-        public String Replace(String oldValue, String newValue) { throw null; }
-
-        public String[] Split(Char[] separator, Int32 count, StringSplitOptions options) { throw null; }
-
-        public String[] Split(Char[] separator, Int32 count) { throw null; }
-
-        public String[] Split(Char[] separator, StringSplitOptions options) { throw null; }
-
-        public String[] Split(params Char[] separator) { throw null; }
-
-        public String[] Split(String[] separator, Int32 count, StringSplitOptions options) { throw null; }
-
-        public String[] Split(String[] separator, StringSplitOptions options) { throw null; }
-
-        public Boolean StartsWith(String value, StringComparison comparisonType) { throw null; }
-
-        public Boolean StartsWith(String value) { throw null; }
-
-        public String Substring(Int32 startIndex, Int32 length) { throw null; }
-
-        public String Substring(Int32 startIndex) { throw null; }
-
-        Collections.Generic.IEnumerator<Char> Collections.Generic.IEnumerable<Char>.GetEnumerator() { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public Char[] ToCharArray() { throw null; }
-
-        public Char[] ToCharArray(Int32 startIndex, Int32 length) { throw null; }
-
-        public String ToLower() { throw null; }
-
-        public String ToLowerInvariant() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToUpper() { throw null; }
-
-        public String ToUpperInvariant() { throw null; }
-
-        public String Trim() { throw null; }
-
-        public String Trim(params Char[] trimChars) { throw null; }
-
-        public String TrimEnd(params Char[] trimChars) { throw null; }
-
-        public String TrimStart(params Char[] trimChars) { throw null; }
-    }
-
-    public enum StringComparison
-    {
-        CurrentCulture = 0,
-        CurrentCultureIgnoreCase = 1,
-        Ordinal = 4,
-        OrdinalIgnoreCase = 5
-    }
-
-    [Flags]
-    public enum StringSplitOptions
-    {
-        None = 0,
-        RemoveEmptyEntries = 1
-    }
-
-    [AttributeUsage(AttributeTargets.Field, Inherited = false)]
-    public partial class ThreadStaticAttribute : Attribute
-    {
-    }
-
-    public partial class TimeoutException : Exception
-    {
-        public TimeoutException() { }
-
-        public TimeoutException(String message, Exception innerException) { }
-
-        public TimeoutException(String message) { }
-    }
-
-    public partial struct TimeSpan : IComparable, IComparable<TimeSpan>, IEquatable<TimeSpan>, IFormattable
-    {
-        public static readonly TimeSpan MaxValue;
-        public static readonly TimeSpan MinValue;
-        public const Int64 TicksPerDay = 864000000000L;
-        public const Int64 TicksPerHour = 36000000000L;
-        public const Int64 TicksPerMillisecond = 10000L;
-        public const Int64 TicksPerMinute = 600000000L;
-        public const Int64 TicksPerSecond = 10000000L;
-        public static readonly TimeSpan Zero;
-        public TimeSpan(Int32 days, Int32 hours, Int32 minutes, Int32 seconds, Int32 milliseconds) { }
-
-        public TimeSpan(Int32 days, Int32 hours, Int32 minutes, Int32 seconds) { }
-
-        public TimeSpan(Int32 hours, Int32 minutes, Int32 seconds) { }
-
-        public TimeSpan(Int64 ticks) { }
-
-        public Int32 Days { get { throw null; } }
-
-        public Int32 Hours { get { throw null; } }
-
-        public Int32 Milliseconds { get { throw null; } }
-
-        public Int32 Minutes { get { throw null; } }
-
-        public Int32 Seconds { get { throw null; } }
-
-        public Int64 Ticks { get { throw null; } }
-
-        public Double TotalDays { get { throw null; } }
-
-        public Double TotalHours { get { throw null; } }
-
-        public Double TotalMilliseconds { get { throw null; } }
-
-        public Double TotalMinutes { get { throw null; } }
-
-        public Double TotalSeconds { get { throw null; } }
-
-        public TimeSpan Add(TimeSpan ts) { throw null; }
-
-        public static Int32 Compare(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public Int32 CompareTo(TimeSpan value) { throw null; }
-
-        public TimeSpan Duration() { throw null; }
-
-        public override Boolean Equals(Object value) { throw null; }
-
-        public static Boolean Equals(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public Boolean Equals(TimeSpan obj) { throw null; }
-
-        public static TimeSpan FromDays(Double value) { throw null; }
-
-        public static TimeSpan FromHours(Double value) { throw null; }
-
-        public static TimeSpan FromMilliseconds(Double value) { throw null; }
-
-        public static TimeSpan FromMinutes(Double value) { throw null; }
-
-        public static TimeSpan FromSeconds(Double value) { throw null; }
-
-        public static TimeSpan FromTicks(Int64 value) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public TimeSpan Negate() { throw null; }
-
-        public static TimeSpan operator +(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator ==(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator >(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator >=(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator !=(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator <(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator <=(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static TimeSpan operator -(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static TimeSpan operator -(TimeSpan t) { throw null; }
-
-        public static TimeSpan operator +(TimeSpan t) { throw null; }
-
-        public static TimeSpan Parse(String input, IFormatProvider formatProvider) { throw null; }
-
-        public static TimeSpan Parse(String s) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String format, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String format, IFormatProvider formatProvider) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String[] formats, IFormatProvider formatProvider) { throw null; }
-
-        public TimeSpan Subtract(TimeSpan ts) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format, IFormatProvider formatProvider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String input, IFormatProvider formatProvider, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParse(String s, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, IFormatProvider formatProvider, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String[] formats, IFormatProvider formatProvider, out TimeSpan result) { throw null; }
-    }
-
-    public sealed partial class TimeZoneInfo : IEquatable<TimeZoneInfo>
-    {
-        internal TimeZoneInfo() { }
-
-        public TimeSpan BaseUtcOffset { get { throw null; } }
-
-        public String DaylightName { get { throw null; } }
-
-        public String DisplayName { get { throw null; } }
-
-        public static TimeZoneInfo Local { get { throw null; } }
-
-        public String StandardName { get { throw null; } }
-
-        public Boolean SupportsDaylightSavingTime { get { throw null; } }
-
-        public static TimeZoneInfo Utc { get { throw null; } }
-
-        public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo destinationTimeZone) { throw null; }
-
-        public static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone) { throw null; }
-
-        public Boolean Equals(TimeZoneInfo other) { throw null; }
-
-        public TimeSpan[] GetAmbiguousTimeOffsets(DateTime dateTime) { throw null; }
-
-        public TimeSpan[] GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public TimeSpan GetUtcOffset(DateTime dateTime) { throw null; }
-
-        public TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public Boolean IsAmbiguousTime(DateTime dateTime) { throw null; }
-
-        public Boolean IsAmbiguousTime(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public Boolean IsDaylightSavingTime(DateTime dateTime) { throw null; }
-
-        public Boolean IsDaylightSavingTime(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public Boolean IsInvalidTime(DateTime dateTime) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public static partial class Tuple
-    {
-        public static Tuple<T1> Create<T1>(T1 item1) { throw null; }
-
-        public static Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2) { throw null; }
-
-        public static Tuple<T1, T2, T3> Create<T1, T2, T3>(T1 item1, T2 item2, T3 item3) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4> Create<T1, T2, T3, T4>(T1 item1, T2 item2, T3 item3, T4 item4) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5> Create<T1, T2, T3, T4, T5>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5, T6> Create<T1, T2, T3, T4, T5, T6>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5, T6, T7> Create<T1, T2, T3, T4, T5, T6, T7>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5, T6, T7, Tuple<T8>> Create<T1, T2, T3, T4, T5, T6, T7, T8>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8) { throw null; }
-    }
-
-    public partial class Tuple<T1> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5, T6> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public T6 Item6 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5, T6, T7> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public T6 Item6 { get { throw null; } }
-
-        public T7 Item7 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public T6 Item6 { get { throw null; } }
-
-        public T7 Item7 { get { throw null; } }
-
-        public TRest Rest { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public abstract partial class Type
-    {
-        internal Type() { }
-
-        public static readonly Object Missing;
-        public abstract String AssemblyQualifiedName { get; }
-        public abstract Type DeclaringType { get; }
-        public abstract String FullName { get; }
-        public abstract Int32 GenericParameterPosition { get; }
-        public abstract Type[] GenericTypeArguments { get; }
-
-        public Boolean HasElementType { get { throw null; } }
-
-        public Boolean IsArray { get { throw null; } }
-
-        public Boolean IsByRef { get { throw null; } }
-
-        public abstract Boolean IsConstructedGenericType { get; }
-        public abstract Boolean IsGenericParameter { get; }
-
-        public Boolean IsNested { get { throw null; } }
-
-        public Boolean IsPointer { get { throw null; } }
-
-        public abstract String Name { get; }
-        public abstract String Namespace { get; }
-
-        public virtual RuntimeTypeHandle TypeHandle { get { throw null; } }
-
-        public override Boolean Equals(Object o) { throw null; }
-
-        public Boolean Equals(Type o) { throw null; }
-
-        public abstract Int32 GetArrayRank();
-        public abstract Type GetElementType();
-        public abstract Type GetGenericTypeDefinition();
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Type GetType(String typeName, Boolean throwOnError) { throw null; }
-
-        public static Type GetType(String typeName) { throw null; }
-
-        public static Type GetTypeFromHandle(RuntimeTypeHandle handle) { throw null; }
-
-        public abstract Type MakeArrayType();
-        public abstract Type MakeArrayType(Int32 rank);
-        public abstract Type MakeByRefType();
-        public abstract Type MakeGenericType(params Type[] typeArguments);
-        public abstract Type MakePointerType();
-        public override String ToString() { throw null; }
-    }
-
-    public partial class TypeAccessException : TypeLoadException
-    {
-        public TypeAccessException() { }
-
-        public TypeAccessException(String message, Exception inner) { }
-
-        public TypeAccessException(String message) { }
-    }
-
-    public sealed partial class TypeInitializationException : Exception
-    {
-        public TypeInitializationException(String fullTypeName, Exception innerException) { }
-
-        public String TypeName { get { throw null; } }
-    }
-
-    public partial class TypeLoadException : Exception
-    {
-        public TypeLoadException() { }
-
-        public TypeLoadException(String message, Exception inner) { }
-
-        public TypeLoadException(String message) { }
-
-        public override String Message { get { throw null; } }
-
-        public String TypeName { get { throw null; } }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UInt16 : IComparable, IComparable<UInt16>, IEquatable<UInt16>, IFormattable
-    {
-        public const UInt16 MaxValue = 65535;
-        public const UInt16 MinValue = 0;
-        public Int32 CompareTo(UInt16 value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(UInt16 obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out UInt16 result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out UInt16 result) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UInt32 : IComparable, IComparable<UInt32>, IEquatable<UInt32>, IFormattable
-    {
-        public const UInt32 MaxValue = 4294967295U;
-        public const UInt32 MinValue = 0U;
-        public Int32 CompareTo(UInt32 value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(UInt32 obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out UInt32 result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out UInt32 result) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UInt64 : IComparable, IComparable<UInt64>, IEquatable<UInt64>, IFormattable
-    {
-        public const UInt64 MaxValue = 18446744073709551615UL;
-        public const UInt64 MinValue = 0UL;
-        public Int32 CompareTo(UInt64 value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(UInt64 obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out UInt64 result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out UInt64 result) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UIntPtr
-    {
-        public static readonly UIntPtr Zero;
-        public UIntPtr(UInt32 value) { }
-
-        public UIntPtr(UInt64 value) { }
-
-        [CLSCompliant(false)]
-        public unsafe UIntPtr(void* value) { }
-
-        public static Int32 Size { get { throw null; } }
-
-        public static UIntPtr Add(UIntPtr pointer, Int32 offset) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static UIntPtr operator +(UIntPtr pointer, Int32 offset) { throw null; }
-
-        public static Boolean operator ==(UIntPtr value1, UIntPtr value2) { throw null; }
-
-        public static explicit operator UIntPtr(UInt32 value) { throw null; }
-
-        public static explicit operator UIntPtr(UInt64 value) { throw null; }
-
-        public static explicit operator UInt32(UIntPtr value) { throw null; }
-
-        public static explicit operator UInt64(UIntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator void*(UIntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator UIntPtr(void* value) { throw null; }
-
-        public static Boolean operator !=(UIntPtr value1, UIntPtr value2) { throw null; }
-
-        public static UIntPtr operator -(UIntPtr pointer, Int32 offset) { throw null; }
-
-        public static UIntPtr Subtract(UIntPtr pointer, Int32 offset) { throw null; }
-
-        [CLSCompliant(false)]
-        public unsafe void* ToPointer() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public UInt32 ToUInt32() { throw null; }
-
-        public UInt64 ToUInt64() { throw null; }
-    }
-
-    public partial class UnauthorizedAccessException : Exception
-    {
-        public UnauthorizedAccessException() { }
-
-        public UnauthorizedAccessException(String message, Exception inner) { }
-
-        public UnauthorizedAccessException(String message) { }
-    }
-
-    public partial class Uri
-    {
-        public Uri(String uriString, UriKind uriKind) { }
-
-        public Uri(String uriString) { }
-
-        public Uri(Uri baseUri, String relativeUri) { }
-
-        public Uri(Uri baseUri, Uri relativeUri) { }
-
-        public String AbsolutePath { get { throw null; } }
-
-        public String AbsoluteUri { get { throw null; } }
-
-        public String Authority { get { throw null; } }
-
-        public String DnsSafeHost { get { throw null; } }
-
-        public String Fragment { get { throw null; } }
-
-        public String Host { get { throw null; } }
-
-        public UriHostNameType HostNameType { get { throw null; } }
-
-        public Boolean IsAbsoluteUri { get { throw null; } }
-
-        public Boolean IsDefaultPort { get { throw null; } }
-
-        public Boolean IsFile { get { throw null; } }
-
-        public Boolean IsLoopback { get { throw null; } }
-
-        public Boolean IsUnc { get { throw null; } }
-
-        public String LocalPath { get { throw null; } }
-
-        public String OriginalString { get { throw null; } }
-
-        public String PathAndQuery { get { throw null; } }
-
-        public Int32 Port { get { throw null; } }
-
-        public String Query { get { throw null; } }
-
-        public String Scheme { get { throw null; } }
-
-        public String[] Segments { get { throw null; } }
-
-        public Boolean UserEscaped { get { throw null; } }
-
-        public String UserInfo { get { throw null; } }
-
-        public static UriHostNameType CheckHostName(String name) { throw null; }
-
-        public static Boolean CheckSchemeName(String schemeName) { throw null; }
-
-        public static Int32 Compare(Uri uri1, Uri uri2, UriComponents partsToCompare, UriFormat compareFormat, StringComparison comparisonType) { throw null; }
-
-        public override Boolean Equals(Object comparand) { throw null; }
-
-        public static String EscapeDataString(String stringToEscape) { throw null; }
-
-        public static String EscapeUriString(String stringToEscape) { throw null; }
-
-        public String GetComponents(UriComponents components, UriFormat format) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public Boolean IsBaseOf(Uri uri) { throw null; }
-
-        public Boolean IsWellFormedOriginalString() { throw null; }
-
-        public static Boolean IsWellFormedUriString(String uriString, UriKind uriKind) { throw null; }
-
-        public Uri MakeRelativeUri(Uri uri) { throw null; }
-
-        public static Boolean operator ==(Uri uri1, Uri uri2) { throw null; }
-
-        public static Boolean operator !=(Uri uri1, Uri uri2) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public static Boolean TryCreate(String uriString, UriKind uriKind, out Uri result) { throw null; }
-
-        public static Boolean TryCreate(Uri baseUri, String relativeUri, out Uri result) { throw null; }
-
-        public static Boolean TryCreate(Uri baseUri, Uri relativeUri, out Uri result) { throw null; }
-
-        public static String UnescapeDataString(String stringToUnescape) { throw null; }
-    }
-
-    [Flags]
-    public enum UriComponents
-    {
-        SerializationInfoString = Int32.MinValue,
-        Scheme = 1,
-        UserInfo = 2,
-        Host = 4,
-        Port = 8,
-        SchemeAndServer = 13,
-        Path = 16,
-        Query = 32,
-        PathAndQuery = 48,
-        HttpRequestUrl = 61,
-        Fragment = 64,
-        AbsoluteUri = 127,
-        StrongPort = 128,
-        HostAndPort = 132,
-        StrongAuthority = 134,
-        NormalizedHost = 256,
-        KeepDelimiter = 1073741824
-    }
-
-    public enum UriFormat
-    {
-        UriEscaped = 1,
-        Unescaped = 2,
-        SafeUnescaped = 3
-    }
-
-    public enum UriHostNameType
-    {
-        Unknown = 0,
-        Basic = 1,
-        Dns = 2,
-        IPv4 = 3,
-        IPv6 = 4
-    }
-
-    public enum UriKind
-    {
-        RelativeOrAbsolute = 0,
-        Absolute = 1,
-        Relative = 2
-    }
-
-    public abstract partial class ValueType
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public sealed partial class Version : IComparable, IComparable<Version>, IEquatable<Version>
-    {
-        public Version(Int32 major, Int32 minor, Int32 build, Int32 revision) { }
-
-        public Version(Int32 major, Int32 minor, Int32 build) { }
-
-        public Version(Int32 major, Int32 minor) { }
-
-        public Version(String version) { }
-
-        public Int32 Build { get { throw null; } }
-
-        public Int32 Major { get { throw null; } }
-
-        public Int16 MajorRevision { get { throw null; } }
-
-        public Int32 Minor { get { throw null; } }
-
-        public Int16 MinorRevision { get { throw null; } }
-
-        public Int32 Revision { get { throw null; } }
-
-        public Int32 CompareTo(Version value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(Version obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator >(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator >=(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator !=(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator <(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator <=(Version v1, Version v2) { throw null; }
-
-        public static Version Parse(String input) { throw null; }
-
-        Int32 IComparable.CompareTo(Object version) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(Int32 fieldCount) { throw null; }
-
-        public static Boolean TryParse(String input, out Version result) { throw null; }
-    }
-
-    public partial struct Void
-    {
-    }
-
-    public partial class WeakReference
-    {
-        public WeakReference(Object target, Boolean trackResurrection) { }
-
-        public WeakReference(Object target) { }
-
-        public virtual Boolean IsAlive { get { throw null; } }
-
-        public virtual Object Target { get { throw null; } set { } }
-
-        public virtual Boolean TrackResurrection { get { throw null; } }
-
-        ~WeakReference() {
-        }
-    }
-
-    public sealed partial class WeakReference<T>
-        where T : class
-    {
-        public WeakReference(T target, Boolean trackResurrection) { }
-
-        public WeakReference(T target) { }
-
-        ~WeakReference() {
-        }
-
-        public void SetTarget(T target) { }
-
-        public Boolean TryGetTarget(out T target) { throw null; }
-    }
-}
-
-namespace System.Collections
-{
-    public partial struct DictionaryEntry
-    {
-        public DictionaryEntry(Object key, Object value) { }
-
-        public Object Key { get { throw null; } set { } }
-
-        public Object Value { get { throw null; } set { } }
-    }
-
-    public partial interface ICollection : IEnumerable
-    {
-        Int32 Count { get; }
-
-        Boolean IsSynchronized { get; }
-
-        Object SyncRoot { get; }
-
-        void CopyTo(Array array, Int32 index);
-    }
-
-    public partial interface IComparer
-    {
-        Int32 Compare(Object x, Object y);
-    }
-
-    public partial interface IDictionary : ICollection, IEnumerable
-    {
-        Boolean IsFixedSize { get; }
-
-        Boolean IsReadOnly { get; }
-
-        Object this[Object key] { get; set; }
-
-        ICollection Keys { get; }
-
-        ICollection Values { get; }
-
-        void Add(Object key, Object value);
-        void Clear();
-        Boolean Contains(Object key);
-        IDictionaryEnumerator GetEnumerator();
-        void Remove(Object key);
-    }
-
-    public partial interface IDictionaryEnumerator : IEnumerator
-    {
-        DictionaryEntry Entry { get; }
-
-        Object Key { get; }
-
-        Object Value { get; }
-    }
-
-    public partial interface IEnumerable
-    {
-        IEnumerator GetEnumerator();
-    }
-
-    public partial interface IEnumerator
-    {
-        Object Current { get; }
-
-        Boolean MoveNext();
-        void Reset();
-    }
-
-    public partial interface IEqualityComparer
-    {
-        Boolean Equals(Object x, Object y);
-        Int32 GetHashCode(Object obj);
-    }
-
-    public partial interface IList : ICollection, IEnumerable
-    {
-        Boolean IsFixedSize { get; }
-
-        Boolean IsReadOnly { get; }
-
-        Object this[Int32 index] { get; set; }
-
-        Int32 Add(Object value);
-        void Clear();
-        Boolean Contains(Object value);
-        Int32 IndexOf(Object value);
-        void Insert(Int32 index, Object value);
-        void Remove(Object value);
-        void RemoveAt(Int32 index);
-    }
-
-    public partial interface IStructuralComparable
-    {
-        Int32 CompareTo(Object other, IComparer comparer);
-    }
-
-    public partial interface IStructuralEquatable
-    {
-        Boolean Equals(Object other, IEqualityComparer comparer);
-        Int32 GetHashCode(IEqualityComparer comparer);
-    }
-}
-
-namespace System.Collections.Generic
-{
-    public partial interface ICollection<T> : IEnumerable<T>, IEnumerable
-    {
-        Int32 Count { get; }
-
-        Boolean IsReadOnly { get; }
-
-        void Add(T item);
-        void Clear();
-        Boolean Contains(T item);
-        void CopyTo(T[] array, Int32 arrayIndex);
-        Boolean Remove(T item);
-    }
-
-    public partial interface IComparer<in T>
-    {
-        Int32 Compare(T x, T y);
-    }
-
-    public partial interface IDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable
-    {
-        TValue this[TKey key] { get; set; }
-
-        ICollection<TKey> Keys { get; }
-
-        ICollection<TValue> Values { get; }
-
-        void Add(TKey key, TValue value);
-        Boolean ContainsKey(TKey key);
-        Boolean Remove(TKey key);
-        Boolean TryGetValue(TKey key, out TValue value);
-    }
-
-    public partial interface IEnumerable<out T> : IEnumerable
-    {
-        IEnumerator<T> GetEnumerator();
-    }
-
-    public partial interface IEnumerator<out T> : IEnumerator, IDisposable
-    {
-        T Current { get; }
-    }
-
-    public partial interface IEqualityComparer<in T>
-    {
-        Boolean Equals(T x, T y);
-        Int32 GetHashCode(T obj);
-    }
-
-    public partial interface IList<T> : ICollection<T>, IEnumerable<T>, IEnumerable
-    {
-        T this[Int32 index] { get; set; }
-
-        Int32 IndexOf(T item);
-        void Insert(Int32 index, T item);
-        void RemoveAt(Int32 index);
-    }
-
-    public partial interface IReadOnlyCollection<out T> : IEnumerable<T>, IEnumerable
-    {
-        Int32 Count { get; }
-    }
-
-    public partial interface IReadOnlyDictionary<TKey, TValue> : IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable
-    {
-        TValue this[TKey key] { get; }
-
-        IEnumerable<TKey> Keys { get; }
-
-        IEnumerable<TValue> Values { get; }
-
-        Boolean ContainsKey(TKey key);
-        Boolean TryGetValue(TKey key, out TValue value);
-    }
-
-    public partial interface IReadOnlyList<out T> : IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable
-    {
-        T this[Int32 index] { get; }
-    }
-
-    public partial interface ISet<T> : ICollection<T>, IEnumerable<T>, IEnumerable
-    {
-        Boolean Add(T item);
-        void ExceptWith(IEnumerable<T> other);
-        void IntersectWith(IEnumerable<T> other);
-        Boolean IsProperSubsetOf(IEnumerable<T> other);
-        Boolean IsProperSupersetOf(IEnumerable<T> other);
-        Boolean IsSubsetOf(IEnumerable<T> other);
-        Boolean IsSupersetOf(IEnumerable<T> other);
-        Boolean Overlaps(IEnumerable<T> other);
-        Boolean SetEquals(IEnumerable<T> other);
-        void SymmetricExceptWith(IEnumerable<T> other);
-        void UnionWith(IEnumerable<T> other);
-    }
-
-    public partial class KeyNotFoundException : Exception
-    {
-        public KeyNotFoundException() { }
-
-        public KeyNotFoundException(String message, Exception innerException) { }
-
-        public KeyNotFoundException(String message) { }
-    }
-
-    public partial struct KeyValuePair<TKey, TValue>
-    {
-        public KeyValuePair(TKey key, TValue value) { }
-
-        public TKey Key { get { throw null; } }
-
-        public TValue Value { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-}
-
-namespace System.Collections.ObjectModel
-{
-    public partial class Collection<T> : Generic.IList<T>, Generic.ICollection<T>, Generic.IReadOnlyList<T>, Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IList, ICollection, IEnumerable
-    {
-        public Collection() { }
-
-        public Collection(Generic.IList<T> list) { }
-
-        public Int32 Count { get { throw null; } }
-
-        public T this[Int32 index] { get { throw null; } set { } }
-
-        protected Generic.IList<T> Items { get { throw null; } }
-
-        Boolean Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        Boolean ICollection.IsSynchronized { get { throw null; } }
-
-        Object ICollection.SyncRoot { get { throw null; } }
-
-        Boolean IList.IsFixedSize { get { throw null; } }
-
-        Boolean IList.IsReadOnly { get { throw null; } }
-
-        Object IList.this[Int32 index] { get { throw null; } set { } }
-
-        public void Add(T item) { }
-
-        public void Clear() { }
-
-        protected virtual void ClearItems() { }
-
-        public Boolean Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, Int32 index) { }
-
-        public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        public Int32 IndexOf(T item) { throw null; }
-
-        public void Insert(Int32 index, T item) { }
-
-        protected virtual void InsertItem(Int32 index, T item) { }
-
-        public Boolean Remove(T item) { throw null; }
-
-        public void RemoveAt(Int32 index) { }
-
-        protected virtual void RemoveItem(Int32 index) { }
-
-        protected virtual void SetItem(Int32 index, T item) { }
-
-        void ICollection.CopyTo(Array array, Int32 index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        Int32 IList.Add(Object value) { throw null; }
-
-        Boolean IList.Contains(Object value) { throw null; }
-
-        Int32 IList.IndexOf(Object value) { throw null; }
-
-        void IList.Insert(Int32 index, Object value) { }
-
-        void IList.Remove(Object value) { }
-    }
-
-    public partial class ReadOnlyCollection<T> : Generic.IList<T>, Generic.ICollection<T>, Generic.IReadOnlyList<T>, Generic.IReadOnlyCollection<T>, Generic.IEnumerable<T>, IList, ICollection, IEnumerable
-    {
-        public ReadOnlyCollection(Generic.IList<T> list) { }
-
-        public Int32 Count { get { throw null; } }
-
-        public T this[Int32 index] { get { throw null; } }
-
-        protected Generic.IList<T> Items { get { throw null; } }
-
-        Boolean Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        T Generic.IList<T>.this[Int32 index] { get { throw null; } set { } }
-
-        Boolean ICollection.IsSynchronized { get { throw null; } }
-
-        Object ICollection.SyncRoot { get { throw null; } }
-
-        Boolean IList.IsFixedSize { get { throw null; } }
-
-        Boolean IList.IsReadOnly { get { throw null; } }
-
-        Object IList.this[Int32 index] { get { throw null; } set { } }
-
-        public Boolean Contains(T value) { throw null; }
-
-        public void CopyTo(T[] array, Int32 index) { }
-
-        public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        public Int32 IndexOf(T value) { throw null; }
-
-        void Generic.ICollection<T>.Add(T value) { }
-
-        void Generic.ICollection<T>.Clear() { }
-
-        Boolean Generic.ICollection<T>.Remove(T value) { throw null; }
-
-        void Generic.IList<T>.Insert(Int32 index, T value) { }
-
-        void Generic.IList<T>.RemoveAt(Int32 index) { }
-
-        void ICollection.CopyTo(Array array, Int32 index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        Int32 IList.Add(Object value) { throw null; }
-
-        void IList.Clear() { }
-
-        Boolean IList.Contains(Object value) { throw null; }
-
-        Int32 IList.IndexOf(Object value) { throw null; }
-
-        void IList.Insert(Int32 index, Object value) { }
-
-        void IList.Remove(Object value) { }
-
-        void IList.RemoveAt(Int32 index) { }
-    }
-}
-
-namespace System.ComponentModel
-{
-    [AttributeUsage(AttributeTargets.All)]
-    public partial class DefaultValueAttribute : Attribute
-    {
-        public DefaultValueAttribute(Boolean value) { }
-
-        public DefaultValueAttribute(Byte value) { }
-
-        public DefaultValueAttribute(Char value) { }
-
-        public DefaultValueAttribute(Double value) { }
-
-        public DefaultValueAttribute(Int16 value) { }
-
-        public DefaultValueAttribute(Int32 value) { }
-
-        public DefaultValueAttribute(Int64 value) { }
-
-        public DefaultValueAttribute(Object value) { }
-
-        public DefaultValueAttribute(Single value) { }
-
-        public DefaultValueAttribute(String value) { }
-
-        public DefaultValueAttribute(Type type, String value) { }
-
-        public virtual Object Value { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
-    public sealed partial class EditorBrowsableAttribute : Attribute
-    {
-        public EditorBrowsableAttribute(EditorBrowsableState state) { }
-
-        public EditorBrowsableState State { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-    }
-
-    public enum EditorBrowsableState
-    {
-        Always = 0,
-        Never = 1,
-        Advanced = 2
-    }
-}
-
-namespace System.Diagnostics
-{
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]
-    public sealed partial class ConditionalAttribute : Attribute
-    {
-        public ConditionalAttribute(String conditionString) { }
-
-        public String ConditionString { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Module, AllowMultiple = false)]
-    public sealed partial class DebuggableAttribute : Attribute
-    {
-        public DebuggableAttribute(DebuggingModes modes) { }
-
-        [Flags]
-        public enum DebuggingModes
-        {
-            None = 0,
-            Default = 1,
-            IgnoreSymbolStoreSequencePoints = 2,
-            EnableEditAndContinue = 4,
-            DisableOptimizations = 256
-        }
-    }
-}
-
-namespace System.Globalization
-{
-    [Flags]
-    public enum DateTimeStyles
-    {
-        None = 0,
-        AllowLeadingWhite = 1,
-        AllowTrailingWhite = 2,
-        AllowInnerWhite = 4,
-        AllowWhiteSpaces = 7,
-        NoCurrentDateDefault = 8,
-        AdjustToUniversal = 16,
-        AssumeLocal = 32,
-        AssumeUniversal = 64,
-        RoundtripKind = 128
-    }
-
-    [Flags]
-    public enum NumberStyles
-    {
-        None = 0,
-        AllowLeadingWhite = 1,
-        AllowTrailingWhite = 2,
-        AllowLeadingSign = 4,
-        Integer = 7,
-        AllowTrailingSign = 8,
-        AllowParentheses = 16,
-        AllowDecimalPoint = 32,
-        AllowThousands = 64,
-        Number = 111,
-        AllowExponent = 128,
-        Float = 167,
-        AllowCurrencySymbol = 256,
-        Currency = 383,
-        Any = 511,
-        AllowHexSpecifier = 512,
-        HexNumber = 515
-    }
-
-    [Flags]
-    public enum TimeSpanStyles
-    {
-        None = 0,
-        AssumeNegative = 1
-    }
-}
-
-namespace System.Reflection
-{
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyCompanyAttribute : Attribute
-    {
-        public AssemblyCompanyAttribute(String company) { }
-
-        public String Company { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyConfigurationAttribute : Attribute
-    {
-        public AssemblyConfigurationAttribute(String configuration) { }
-
-        public String Configuration { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyCopyrightAttribute : Attribute
-    {
-        public AssemblyCopyrightAttribute(String copyright) { }
-
-        public String Copyright { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyCultureAttribute : Attribute
-    {
-        public AssemblyCultureAttribute(String culture) { }
-
-        public String Culture { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyDefaultAliasAttribute : Attribute
-    {
-        public AssemblyDefaultAliasAttribute(String defaultAlias) { }
-
-        public String DefaultAlias { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyDelaySignAttribute : Attribute
-    {
-        public AssemblyDelaySignAttribute(Boolean delaySign) { }
-
-        public Boolean DelaySign { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyDescriptionAttribute : Attribute
-    {
-        public AssemblyDescriptionAttribute(String description) { }
-
-        public String Description { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyFileVersionAttribute : Attribute
-    {
-        public AssemblyFileVersionAttribute(String version) { }
-
-        public String Version { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyFlagsAttribute : Attribute
-    {
-        public AssemblyFlagsAttribute(AssemblyNameFlags assemblyFlags) { }
-
-        public Int32 AssemblyFlags { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyInformationalVersionAttribute : Attribute
-    {
-        public AssemblyInformationalVersionAttribute(String informationalVersion) { }
-
-        public String InformationalVersion { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyKeyFileAttribute : Attribute
-    {
-        public AssemblyKeyFileAttribute(String keyFile) { }
-
-        public String KeyFile { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyKeyNameAttribute : Attribute
-    {
-        public AssemblyKeyNameAttribute(String keyName) { }
-
-        public String KeyName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)]
-    public sealed partial class AssemblyMetadataAttribute : Attribute
-    {
-        public AssemblyMetadataAttribute(String key, String value) { }
-
-        public String Key { get { throw null; } }
-
-        public String Value { get { throw null; } }
-    }
-
-    [Flags]
-    public enum AssemblyNameFlags
-    {
-        None = 0,
-        PublicKey = 1,
-        Retargetable = 256
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyProductAttribute : Attribute
-    {
-        public AssemblyProductAttribute(String product) { }
-
-        public String Product { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = false)]
-    public sealed partial class AssemblySignatureKeyAttribute : Attribute
-    {
-        public AssemblySignatureKeyAttribute(String publicKey, String countersignature) { }
-
-        public String Countersignature { get { throw null; } }
-
-        public String PublicKey { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyTitleAttribute : Attribute
-    {
-        public AssemblyTitleAttribute(String title) { }
-
-        public String Title { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyTrademarkAttribute : Attribute
-    {
-        public AssemblyTrademarkAttribute(String trademark) { }
-
-        public String Trademark { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyVersionAttribute : Attribute
-    {
-        public AssemblyVersionAttribute(String version) { }
-
-        public String Version { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface)]
-    public sealed partial class DefaultMemberAttribute : Attribute
-    {
-        public DefaultMemberAttribute(String memberName) { }
-
-        public String MemberName { get { throw null; } }
-    }
-}
-
-namespace System.Runtime
-{
-    public enum GCLargeObjectHeapCompactionMode
-    {
-        Default = 1,
-        CompactOnce = 2
-    }
-
-    public enum GCLatencyMode
-    {
-        Batch = 0,
-        Interactive = 1,
-        LowLatency = 2,
-        SustainedLowLatency = 3
-    }
-
-    public static partial class GCSettings
-    {
-        public static Boolean IsServerGC { get { throw null; } }
-
-        public static GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode { get { throw null; } set { } }
-
-        public static GCLatencyMode LatencyMode { get { throw null; } set { } }
-    }
-}
-
-namespace System.Runtime.CompilerServices
-{
-    [AttributeUsage(AttributeTargets.Field)]
-    public sealed partial class AccessedThroughPropertyAttribute : Attribute
-    {
-        public AccessedThroughPropertyAttribute(String propertyName) { }
-
-        public String PropertyName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
-    public sealed partial class AsyncStateMachineAttribute : StateMachineAttribute
-    {
-        public AsyncStateMachineAttribute(Type stateMachineType) : base(default!) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class CallerFilePathAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class CallerLineNumberAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class CallerMemberNameAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Module | AttributeTargets.Class | AttributeTargets.Method)]
-    public partial class CompilationRelaxationsAttribute : Attribute
-    {
-        public CompilationRelaxationsAttribute(Int32 relaxations) { }
-
-        public Int32 CompilationRelaxations { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.All, Inherited = true)]
-    public sealed partial class CompilerGeneratedAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter, Inherited = false)]
-    public abstract partial class CustomConstantAttribute : Attribute
-    {
-        public abstract Object Value { get; }
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class DateTimeConstantAttribute : CustomConstantAttribute
-    {
-        public DateTimeConstantAttribute(Int64 ticks) { }
-
-        public override Object Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class DecimalConstantAttribute : Attribute
-    {
-        public DecimalConstantAttribute(Byte scale, Byte sign, Int32 hi, Int32 mid, Int32 low) { }
-
-        [CLSCompliant(false)]
-        public DecimalConstantAttribute(Byte scale, Byte sign, UInt32 hi, UInt32 mid, UInt32 low) { }
-
-        public Decimal Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method)]
-    public sealed partial class ExtensionAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Field, Inherited = false)]
-    public sealed partial class FixedBufferAttribute : Attribute
-    {
-        public FixedBufferAttribute(Type elementType, Int32 length) { }
-
-        public Type ElementType { get { throw null; } }
-
-        public Int32 Length { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Property, Inherited = true)]
-    public sealed partial class IndexerNameAttribute : Attribute
-    {
-        public IndexerNameAttribute(String indexerName) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)]
-    public sealed partial class InternalsVisibleToAttribute : Attribute
-    {
-        public InternalsVisibleToAttribute(String assemblyName) { }
-
-        public String AssemblyName { get { throw null; } }
-    }
-
-    public partial interface IStrongBox
-    {
-        Object Value { get; set; }
-    }
-
-    public static partial class IsVolatile
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
-    public sealed partial class IteratorStateMachineAttribute : StateMachineAttribute
-    {
-        public IteratorStateMachineAttribute(Type stateMachineType) : base(default!) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method, Inherited = false)]
-    public sealed partial class MethodImplAttribute : Attribute
-    {
-        public MethodImplAttribute(MethodImplOptions methodImplOptions) { }
-
-        public MethodImplOptions Value { get { throw null; } }
-    }
-
-    [Flags]
-    public enum MethodImplOptions
-    {
-        NoInlining = 8,
-        NoOptimization = 64,
-        PreserveSig = 128,
-        AggressiveInlining = 256
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false)]
-    public sealed partial class ReferenceAssemblyAttribute : Attribute
-    {
-        public ReferenceAssemblyAttribute() { }
-
-        public ReferenceAssemblyAttribute(String description) { }
-
-        public String Description { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = false)]
-    public sealed partial class RuntimeCompatibilityAttribute : Attribute
-    {
-        public Boolean WrapNonExceptionThrows { get { throw null; } set { } }
-    }
-
-    public static partial class RuntimeHelpers
-    {
-        public static Int32 OffsetToStringData { get { throw null; } }
-
-        public static Int32 GetHashCode(Object o) { throw null; }
-
-        public static Object GetObjectValue(Object obj) { throw null; }
-
-        public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle) { }
-
-        public static void RunClassConstructor(RuntimeTypeHandle type) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
-    public partial class StateMachineAttribute : Attribute
-    {
-        public StateMachineAttribute(Type stateMachineType) { }
-
-        public Type StateMachineType { get { throw null; } }
-    }
-
-    public partial class StrongBox<T> : IStrongBox
-    {
-        public T Value;
-        public StrongBox() { }
-
-        public StrongBox(T value) { }
-
-        Object IStrongBox.Value { get { throw null; } set { } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false, AllowMultiple = false)]
-    public sealed partial class TypeForwardedFromAttribute : Attribute
-    {
-        public TypeForwardedFromAttribute(String assemblyFullName) { }
-
-        public String AssemblyFullName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)]
-    public sealed partial class TypeForwardedToAttribute : Attribute
-    {
-        public TypeForwardedToAttribute(Type destination) { }
-
-        public Type Destination { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Struct)]
-    public sealed partial class UnsafeValueTypeAttribute : Attribute
-    {
-    }
-}
-
-namespace System.Runtime.ExceptionServices
-{
-    public sealed partial class ExceptionDispatchInfo
-    {
-        internal ExceptionDispatchInfo() { }
-
-        public Exception SourceException { get { throw null; } }
-
-        public static ExceptionDispatchInfo Capture(Exception source) { throw null; }
-
-        public void Throw() { }
-    }
-}
-
-namespace System.Runtime.InteropServices
-{
-    public enum CharSet
-    {
-        Ansi = 2,
-        Unicode = 3
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)]
-    public sealed partial class ComVisibleAttribute : Attribute
-    {
-        public ComVisibleAttribute(Boolean visibility) { }
-
-        public Boolean Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Field, Inherited = false)]
-    public sealed partial class FieldOffsetAttribute : Attribute
-    {
-        public FieldOffsetAttribute(Int32 offset) { }
-
-        public Int32 Value { get { throw null; } }
-    }
-
-    public enum LayoutKind
-    {
-        Sequential = 0,
-        Explicit = 2,
-        Auto = 3
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class OutAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false)]
-    public sealed partial class StructLayoutAttribute : Attribute
-    {
-        public CharSet CharSet;
-        public Int32 Pack;
-        public Int32 Size;
-        public StructLayoutAttribute(LayoutKind layoutKind) { }
-
-        public LayoutKind Value { get { throw null; } }
-    }
-}
-
-namespace System.Runtime.Versioning
-{
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)]
-    public sealed partial class TargetFrameworkAttribute : Attribute
-    {
-        public TargetFrameworkAttribute(String frameworkName) { }
-
-        public String FrameworkDisplayName { get { throw null; } set { } }
-
-        public String FrameworkName { get { throw null; } }
-    }
-}
-
-namespace System.Security
-{
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)]
-    public sealed partial class AllowPartiallyTrustedCallersAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class SecurityCriticalAttribute : Attribute
-    {
-    }
-
-    public partial class SecurityException : Exception
-    {
-        public SecurityException() { }
-
-        public SecurityException(String message, Exception inner) { }
-
-        public SecurityException(String message) { }
-
-        public override String ToString() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class SecuritySafeCriticalAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)]
-    public sealed partial class SecurityTransparentAttribute : Attribute
-    {
-    }
-
-    public partial class VerificationException : Exception
-    {
-        public VerificationException() { }
-
-        public VerificationException(String message, Exception innerException) { }
-
-        public VerificationException(String message) { }
-    }
-}
-
-namespace System.Text
-{
-    public sealed partial class StringBuilder
-    {
-        public StringBuilder() { }
-
-        public StringBuilder(Int32 capacity, Int32 maxCapacity) { }
-
-        public StringBuilder(Int32 capacity) { }
-
-        public StringBuilder(String value, Int32 startIndex, Int32 length, Int32 capacity) { }
-
-        public StringBuilder(String value, Int32 capacity) { }
-
-        public StringBuilder(String value) { }
-
-        public Int32 Capacity { get { throw null; } set { } }
-
-        public Char this[Int32 index] { get { throw null; } set { } }
-
-        public Int32 Length { get { throw null; } set { } }
-
-        public Int32 MaxCapacity { get { throw null; } }
-
-        public StringBuilder Append(Boolean value) { throw null; }
-
-        public StringBuilder Append(Byte value) { throw null; }
-
-        public StringBuilder Append(Char value, Int32 repeatCount) { throw null; }
-
-        public StringBuilder Append(Char value) { throw null; }
-
-        public StringBuilder Append(Char[] value, Int32 startIndex, Int32 charCount) { throw null; }
-
-        public StringBuilder Append(Char[] value) { throw null; }
-
-        public StringBuilder Append(Decimal value) { throw null; }
-
-        public StringBuilder Append(Double value) { throw null; }
-
-        public StringBuilder Append(Int16 value) { throw null; }
-
-        public StringBuilder Append(Int32 value) { throw null; }
-
-        public StringBuilder Append(Int64 value) { throw null; }
-
-        public StringBuilder Append(Object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(SByte value) { throw null; }
-
-        public StringBuilder Append(Single value) { throw null; }
-
-        public StringBuilder Append(String value, Int32 startIndex, Int32 count) { throw null; }
-
-        public StringBuilder Append(String value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(UInt16 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(UInt32 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(UInt64 value) { throw null; }
-
-        public StringBuilder AppendFormat(IFormatProvider provider, String format, params Object[] args) { throw null; }
-
-        public StringBuilder AppendFormat(String format, params Object[] args) { throw null; }
-
-        public StringBuilder AppendLine() { throw null; }
-
-        public StringBuilder AppendLine(String value) { throw null; }
-
-        public StringBuilder Clear() { throw null; }
-
-        public void CopyTo(Int32 sourceIndex, Char[] destination, Int32 destinationIndex, Int32 count) { }
-
-        public Int32 EnsureCapacity(Int32 capacity) { throw null; }
-
-        public Boolean Equals(StringBuilder sb) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Boolean value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Byte value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Char value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Char[] value, Int32 startIndex, Int32 charCount) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Char[] value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Decimal value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Double value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Int16 value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Int32 value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Int64 value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, SByte value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Single value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, String value, Int32 count) { throw null; }
-
-        public StringBuilder Insert(Int32 index, String value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, UInt16 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, UInt32 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, UInt64 value) { throw null; }
-
-        public StringBuilder Remove(Int32 startIndex, Int32 length) { throw null; }
-
-        public StringBuilder Replace(Char oldChar, Char newChar, Int32 startIndex, Int32 count) { throw null; }
-
-        public StringBuilder Replace(Char oldChar, Char newChar) { throw null; }
-
-        public StringBuilder Replace(String oldValue, String newValue, Int32 startIndex, Int32 count) { throw null; }
-
-        public StringBuilder Replace(String oldValue, String newValue) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(Int32 startIndex, Int32 length) { throw null; }
-    }
-}
-
-namespace System.Threading
-{
-    public enum LazyThreadSafetyMode
-    {
-        None = 0,
-        PublicationOnly = 1,
-        ExecutionAndPublication = 2
-    }
-
-    public static partial class Timeout
-    {
-        public const Int32 Infinite = -1;
-        public static readonly TimeSpan InfiniteTimeSpan;
-    }
-
-    public abstract partial class WaitHandle : IDisposable
-    {
-        protected static readonly IntPtr InvalidHandle;
-        public const Int32 WaitTimeout = 258;
-        public void Dispose() { }
-
-        protected virtual void Dispose(Boolean explicitDisposing) { }
-
-        public static Boolean WaitAll(WaitHandle[] waitHandles, Int32 millisecondsTimeout) { throw null; }
-
-        public static Boolean WaitAll(WaitHandle[] waitHandles, TimeSpan timeout) { throw null; }
-
-        public static Boolean WaitAll(WaitHandle[] waitHandles) { throw null; }
-
-        public static Int32 WaitAny(WaitHandle[] waitHandles, Int32 millisecondsTimeout) { throw null; }
-
-        public static Int32 WaitAny(WaitHandle[] waitHandles, TimeSpan timeout) { throw null; }
-
-        public static Int32 WaitAny(WaitHandle[] waitHandles) { throw null; }
-
-        public virtual Boolean WaitOne() { throw null; }
-
-        public virtual Boolean WaitOne(Int32 millisecondsTimeout) { throw null; }
-
-        public virtual Boolean WaitOne(TimeSpan timeout) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.3/System.Runtime.cs b/src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.3/System.Runtime.cs
deleted file mode 100644
index ece0a761..00000000
--- a/src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.3/System.Runtime.cs
+++ /dev/null
@@ -1,5168 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: InternalsVisibleTo("System.Private.Reflection.Extensibility, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: AssemblyTitle("System.Runtime")]
-[assembly: AssemblyDescription("System.Runtime")]
-[assembly: AssemblyDefaultAlias("System.Runtime")]
-[assembly: AssemblyCompany("Microsoft Corporation")]
-[assembly: AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: AssemblyFileVersion("4.6.23123.00")]
-[assembly: AssemblyInformationalVersion("4.6.23123.00 built by: PROJECTKREL")]
-[assembly: CLSCompliant(true)]
-[assembly: AssemblyMetadata("", "")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.20.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public delegate void Action();
-    public delegate void Action<in T>(T obj);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, in T16>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
-    public delegate void Action<in T1, in T2>(T1 arg1, T2 arg2);
-    public delegate void Action<in T1, in T2, in T3>(T1 arg1, T2 arg2, T3 arg3);
-    public delegate void Action<in T1, in T2, in T3, in T4>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
-    public static partial class Activator
-    {
-        public static Object CreateInstance(Type type, params Object[] args) { throw null; }
-
-        public static Object CreateInstance(Type type) { throw null; }
-
-        public static T CreateInstance<T>() { throw null; }
-    }
-
-    public partial class ArgumentException : Exception
-    {
-        public ArgumentException() { }
-
-        public ArgumentException(String message, Exception innerException) { }
-
-        public ArgumentException(String message, String paramName, Exception innerException) { }
-
-        public ArgumentException(String message, String paramName) { }
-
-        public ArgumentException(String message) { }
-
-        public override String Message { get { throw null; } }
-
-        public virtual String ParamName { get { throw null; } }
-    }
-
-    public partial class ArgumentNullException : ArgumentException
-    {
-        public ArgumentNullException() { }
-
-        public ArgumentNullException(String message, Exception innerException) { }
-
-        public ArgumentNullException(String paramName, String message) { }
-
-        public ArgumentNullException(String paramName) { }
-    }
-
-    public partial class ArgumentOutOfRangeException : ArgumentException
-    {
-        public ArgumentOutOfRangeException() { }
-
-        public ArgumentOutOfRangeException(String message, Exception innerException) { }
-
-        public ArgumentOutOfRangeException(String paramName, Object actualValue, String message) { }
-
-        public ArgumentOutOfRangeException(String paramName, String message) { }
-
-        public ArgumentOutOfRangeException(String paramName) { }
-
-        public virtual Object ActualValue { get { throw null; } }
-
-        public override String Message { get { throw null; } }
-    }
-
-    public partial class ArithmeticException : Exception
-    {
-        public ArithmeticException() { }
-
-        public ArithmeticException(String message, Exception innerException) { }
-
-        public ArithmeticException(String message) { }
-    }
-
-    public abstract partial class Array : Collections.ICollection, Collections.IEnumerable, Collections.IList, Collections.IStructuralComparable, Collections.IStructuralEquatable
-    {
-        internal Array() { }
-
-        public Int32 Length { get { throw null; } }
-
-        public Int32 Rank { get { throw null; } }
-
-        Int32 Collections.ICollection.Count { get { throw null; } }
-
-        Boolean Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        Object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        Boolean Collections.IList.IsFixedSize { get { throw null; } }
-
-        Boolean Collections.IList.IsReadOnly { get { throw null; } }
-
-        Object Collections.IList.this[Int32 index] { get { throw null; } set { } }
-
-        public static Int32 BinarySearch(Array array, Int32 index, Int32 length, Object value, Collections.IComparer comparer) { throw null; }
-
-        public static Int32 BinarySearch(Array array, Int32 index, Int32 length, Object value) { throw null; }
-
-        public static Int32 BinarySearch(Array array, Object value, Collections.IComparer comparer) { throw null; }
-
-        public static Int32 BinarySearch(Array array, Object value) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, T value, Collections.Generic.IComparer<T> comparer) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, T value) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, Int32 index, Int32 length, T value, Collections.Generic.IComparer<T> comparer) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, Int32 index, Int32 length, T value) { throw null; }
-
-        public static void Clear(Array array, Int32 index, Int32 length) { }
-
-        public Object Clone() { throw null; }
-
-        public static void ConstrainedCopy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length) { }
-
-        public static void Copy(Array sourceArray, Array destinationArray, Int32 length) { }
-
-        public static void Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length) { }
-
-        public void CopyTo(Array array, Int32 index) { }
-
-        public static Array CreateInstance(Type elementType, Int32 length) { throw null; }
-
-        public static Array CreateInstance(Type elementType, Int32[] lengths, Int32[] lowerBounds) { throw null; }
-
-        public static Array CreateInstance(Type elementType, params Int32[] lengths) { throw null; }
-
-        public static T[] Empty<T>() { throw null; }
-
-        public static Boolean Exists<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static T Find<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static T[] FindAll<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static Int32 FindIndex<T>(T[] array, Int32 startIndex, Int32 count, Predicate<T> match) { throw null; }
-
-        public static Int32 FindIndex<T>(T[] array, Int32 startIndex, Predicate<T> match) { throw null; }
-
-        public static Int32 FindIndex<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static T FindLast<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static Int32 FindLastIndex<T>(T[] array, Int32 startIndex, Int32 count, Predicate<T> match) { throw null; }
-
-        public static Int32 FindLastIndex<T>(T[] array, Int32 startIndex, Predicate<T> match) { throw null; }
-
-        public static Int32 FindLastIndex<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        public Int32 GetLength(Int32 dimension) { throw null; }
-
-        public Int32 GetLowerBound(Int32 dimension) { throw null; }
-
-        public Int32 GetUpperBound(Int32 dimension) { throw null; }
-
-        public Object GetValue(Int32 index) { throw null; }
-
-        public Object GetValue(params Int32[] indices) { throw null; }
-
-        public static Int32 IndexOf(Array array, Object value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 IndexOf(Array array, Object value, Int32 startIndex) { throw null; }
-
-        public static Int32 IndexOf(Array array, Object value) { throw null; }
-
-        public static Int32 IndexOf<T>(T[] array, T value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 IndexOf<T>(T[] array, T value, Int32 startIndex) { throw null; }
-
-        public static Int32 IndexOf<T>(T[] array, T value) { throw null; }
-
-        public void Initialize() { }
-
-        public static Int32 LastIndexOf(Array array, Object value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 LastIndexOf(Array array, Object value, Int32 startIndex) { throw null; }
-
-        public static Int32 LastIndexOf(Array array, Object value) { throw null; }
-
-        public static Int32 LastIndexOf<T>(T[] array, T value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 LastIndexOf<T>(T[] array, T value, Int32 startIndex) { throw null; }
-
-        public static Int32 LastIndexOf<T>(T[] array, T value) { throw null; }
-
-        public static void Resize<T>(ref T[] array, Int32 newSize) { }
-
-        public static void Reverse(Array array, Int32 index, Int32 length) { }
-
-        public static void Reverse(Array array) { }
-
-        public void SetValue(Object value, Int32 index) { }
-
-        public void SetValue(Object value, params Int32[] indices) { }
-
-        public static void Sort(Array keys, Array items, Collections.IComparer comparer) { }
-
-        public static void Sort(Array keys, Array items, Int32 index, Int32 length, Collections.IComparer comparer) { }
-
-        public static void Sort(Array keys, Array items, Int32 index, Int32 length) { }
-
-        public static void Sort(Array keys, Array items) { }
-
-        public static void Sort(Array array, Collections.IComparer comparer) { }
-
-        public static void Sort(Array array, Int32 index, Int32 length, Collections.IComparer comparer) { }
-
-        public static void Sort(Array array, Int32 index, Int32 length) { }
-
-        public static void Sort(Array array) { }
-
-        public static void Sort<T>(T[] array, Collections.Generic.IComparer<T> comparer) { }
-
-        public static void Sort<T>(T[] array, Comparison<T> comparison) { }
-
-        public static void Sort<T>(T[] array, Int32 index, Int32 length, Collections.Generic.IComparer<T> comparer) { }
-
-        public static void Sort<T>(T[] array, Int32 index, Int32 length) { }
-
-        public static void Sort<T>(T[] array) { }
-
-        public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, Collections.Generic.IComparer<TKey> comparer) { }
-
-        public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, Int32 index, Int32 length, Collections.Generic.IComparer<TKey> comparer) { }
-
-        public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, Int32 index, Int32 length) { }
-
-        public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items) { }
-
-        Int32 Collections.IList.Add(Object value) { throw null; }
-
-        void Collections.IList.Clear() { }
-
-        Boolean Collections.IList.Contains(Object value) { throw null; }
-
-        Int32 Collections.IList.IndexOf(Object value) { throw null; }
-
-        void Collections.IList.Insert(Int32 index, Object value) { }
-
-        void Collections.IList.Remove(Object value) { }
-
-        void Collections.IList.RemoveAt(Int32 index) { }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        public static Boolean TrueForAll<T>(T[] array, Predicate<T> match) { throw null; }
-    }
-
-    public partial struct ArraySegment<T> : Collections.Generic.ICollection<T>, Collections.Generic.IEnumerable<T>, Collections.IEnumerable, Collections.Generic.IList<T>, Collections.Generic.IReadOnlyCollection<T>, Collections.Generic.IReadOnlyList<T>
-    {
-        public ArraySegment(T[] array, Int32 offset, Int32 count) { }
-
-        public ArraySegment(T[] array) { }
-
-        public T[] Array { get { throw null; } }
-
-        public Int32 Count { get { throw null; } }
-
-        public Int32 Offset { get { throw null; } }
-
-        Boolean Collections.Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        T Collections.Generic.IList<T>.this[Int32 index] { get { throw null; } set { } }
-
-        T Collections.Generic.IReadOnlyList<T>.this[Int32 index] { get { throw null; } }
-
-        public Boolean Equals(ArraySegment<T> obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(ArraySegment<T> a, ArraySegment<T> b) { throw null; }
-
-        public static Boolean operator !=(ArraySegment<T> a, ArraySegment<T> b) { throw null; }
-
-        void Collections.Generic.ICollection<T>.Add(T item) { }
-
-        void Collections.Generic.ICollection<T>.Clear() { }
-
-        Boolean Collections.Generic.ICollection<T>.Contains(T item) { throw null; }
-
-        void Collections.Generic.ICollection<T>.CopyTo(T[] array, Int32 arrayIndex) { }
-
-        Boolean Collections.Generic.ICollection<T>.Remove(T item) { throw null; }
-
-        Collections.Generic.IEnumerator<T> Collections.Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        Int32 Collections.Generic.IList<T>.IndexOf(T item) { throw null; }
-
-        void Collections.Generic.IList<T>.Insert(Int32 index, T item) { }
-
-        void Collections.Generic.IList<T>.RemoveAt(Int32 index) { }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-    }
-
-    public partial class ArrayTypeMismatchException : Exception
-    {
-        public ArrayTypeMismatchException() { }
-
-        public ArrayTypeMismatchException(String message, Exception innerException) { }
-
-        public ArrayTypeMismatchException(String message) { }
-    }
-
-    public delegate void AsyncCallback(IAsyncResult ar);
-    [AttributeUsage(AttributeTargets.All, Inherited = true, AllowMultiple = false)]
-    public abstract partial class Attribute
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-    }
-
-    [Flags]
-    public enum AttributeTargets
-    {
-        Assembly = 1,
-        Module = 2,
-        Class = 4,
-        Struct = 8,
-        Enum = 16,
-        Constructor = 32,
-        Method = 64,
-        Property = 128,
-        Field = 256,
-        Event = 512,
-        Interface = 1024,
-        Parameter = 2048,
-        Delegate = 4096,
-        ReturnValue = 8192,
-        GenericParameter = 16384,
-        All = 32767
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = true)]
-    public sealed partial class AttributeUsageAttribute : Attribute
-    {
-        public AttributeUsageAttribute(AttributeTargets validOn) { }
-
-        public Boolean AllowMultiple { get { throw null; } set { } }
-
-        public Boolean Inherited { get { throw null; } set { } }
-
-        public AttributeTargets ValidOn { get { throw null; } }
-    }
-
-    public partial class BadImageFormatException : Exception
-    {
-        public BadImageFormatException() { }
-
-        public BadImageFormatException(String message, Exception inner) { }
-
-        public BadImageFormatException(String message, String fileName, Exception inner) { }
-
-        public BadImageFormatException(String message, String fileName) { }
-
-        public BadImageFormatException(String message) { }
-
-        public String FileName { get { throw null; } }
-
-        public override String Message { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial struct Boolean : IComparable, IComparable<Boolean>, IConvertible, IEquatable<Boolean>
-    {
-        public static readonly String FalseString;
-        public static readonly String TrueString;
-        public Int32 CompareTo(Boolean value) { throw null; }
-
-        public Boolean Equals(Boolean obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean Parse(String value) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        String IConvertible.ToString(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public static Boolean TryParse(String value, out Boolean result) { throw null; }
-    }
-
-    public static partial class Buffer
-    {
-        public static void BlockCopy(Array src, Int32 srcOffset, Array dst, Int32 dstOffset, Int32 count) { }
-
-        public static Int32 ByteLength(Array array) { throw null; }
-
-        public static Byte GetByte(Array array, Int32 index) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe void MemoryCopy(void* source, void* destination, Int64 destinationSizeInBytes, Int64 sourceBytesToCopy) { }
-
-        [CLSCompliant(false)]
-        public static unsafe void MemoryCopy(void* source, void* destination, UInt64 destinationSizeInBytes, UInt64 sourceBytesToCopy) { }
-
-        public static void SetByte(Array array, Int32 index, Byte value) { }
-    }
-
-    public partial struct Byte : IComparable, IComparable<Byte>, IConvertible, IEquatable<Byte>, IFormattable
-    {
-        public const Byte MaxValue = 255;
-        public const Byte MinValue = 0;
-        public Int32 CompareTo(Byte value) { throw null; }
-
-        public Boolean Equals(Byte obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Byte Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Byte Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Byte Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Byte Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, out Byte result) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Byte result) { throw null; }
-    }
-
-    public partial struct Char : IComparable, IComparable<Char>, IConvertible, IEquatable<Char>
-    {
-        public const Char MaxValue = '\uffff';
-        public const Char MinValue = '\0';
-        public Int32 CompareTo(Char value) { throw null; }
-
-        public static String ConvertFromUtf32(Int32 utf32) { throw null; }
-
-        public static Int32 ConvertToUtf32(Char highSurrogate, Char lowSurrogate) { throw null; }
-
-        public static Int32 ConvertToUtf32(String s, Int32 index) { throw null; }
-
-        public Boolean Equals(Char obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Double GetNumericValue(Char c) { throw null; }
-
-        public static Double GetNumericValue(String s, Int32 index) { throw null; }
-
-        public static Boolean IsControl(Char c) { throw null; }
-
-        public static Boolean IsControl(String s, Int32 index) { throw null; }
-
-        public static Boolean IsDigit(Char c) { throw null; }
-
-        public static Boolean IsDigit(String s, Int32 index) { throw null; }
-
-        public static Boolean IsHighSurrogate(Char c) { throw null; }
-
-        public static Boolean IsHighSurrogate(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLetter(Char c) { throw null; }
-
-        public static Boolean IsLetter(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLetterOrDigit(Char c) { throw null; }
-
-        public static Boolean IsLetterOrDigit(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLower(Char c) { throw null; }
-
-        public static Boolean IsLower(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLowSurrogate(Char c) { throw null; }
-
-        public static Boolean IsLowSurrogate(String s, Int32 index) { throw null; }
-
-        public static Boolean IsNumber(Char c) { throw null; }
-
-        public static Boolean IsNumber(String s, Int32 index) { throw null; }
-
-        public static Boolean IsPunctuation(Char c) { throw null; }
-
-        public static Boolean IsPunctuation(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSeparator(Char c) { throw null; }
-
-        public static Boolean IsSeparator(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSurrogate(Char c) { throw null; }
-
-        public static Boolean IsSurrogate(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSurrogatePair(Char highSurrogate, Char lowSurrogate) { throw null; }
-
-        public static Boolean IsSurrogatePair(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSymbol(Char c) { throw null; }
-
-        public static Boolean IsSymbol(String s, Int32 index) { throw null; }
-
-        public static Boolean IsUpper(Char c) { throw null; }
-
-        public static Boolean IsUpper(String s, Int32 index) { throw null; }
-
-        public static Boolean IsWhiteSpace(Char c) { throw null; }
-
-        public static Boolean IsWhiteSpace(String s, Int32 index) { throw null; }
-
-        public static Char Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        String IConvertible.ToString(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public static Char ToLower(Char c) { throw null; }
-
-        public static Char ToLowerInvariant(Char c) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public static String ToString(Char c) { throw null; }
-
-        public static Char ToUpper(Char c) { throw null; }
-
-        public static Char ToUpperInvariant(Char c) { throw null; }
-
-        public static Boolean TryParse(String s, out Char result) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.All, Inherited = true, AllowMultiple = false)]
-    public sealed partial class CLSCompliantAttribute : Attribute
-    {
-        public CLSCompliantAttribute(Boolean isCompliant) { }
-
-        public Boolean IsCompliant { get { throw null; } }
-    }
-
-    public delegate Int32 Comparison<in T>(T x, T y);
-    public partial struct DateTime : IComparable, IComparable<DateTime>, IConvertible, IEquatable<DateTime>, IFormattable
-    {
-        public static readonly DateTime MaxValue;
-        public static readonly DateTime MinValue;
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, DateTimeKind kind) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, DateTimeKind kind) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day) { }
-
-        public DateTime(Int64 ticks, DateTimeKind kind) { }
-
-        public DateTime(Int64 ticks) { }
-
-        public DateTime Date { get { throw null; } }
-
-        public Int32 Day { get { throw null; } }
-
-        public DayOfWeek DayOfWeek { get { throw null; } }
-
-        public Int32 DayOfYear { get { throw null; } }
-
-        public Int32 Hour { get { throw null; } }
-
-        public DateTimeKind Kind { get { throw null; } }
-
-        public Int32 Millisecond { get { throw null; } }
-
-        public Int32 Minute { get { throw null; } }
-
-        public Int32 Month { get { throw null; } }
-
-        public static DateTime Now { get { throw null; } }
-
-        public Int32 Second { get { throw null; } }
-
-        public Int64 Ticks { get { throw null; } }
-
-        public TimeSpan TimeOfDay { get { throw null; } }
-
-        public static DateTime Today { get { throw null; } }
-
-        public static DateTime UtcNow { get { throw null; } }
-
-        public Int32 Year { get { throw null; } }
-
-        public DateTime Add(TimeSpan value) { throw null; }
-
-        public DateTime AddDays(Double value) { throw null; }
-
-        public DateTime AddHours(Double value) { throw null; }
-
-        public DateTime AddMilliseconds(Double value) { throw null; }
-
-        public DateTime AddMinutes(Double value) { throw null; }
-
-        public DateTime AddMonths(Int32 months) { throw null; }
-
-        public DateTime AddSeconds(Double value) { throw null; }
-
-        public DateTime AddTicks(Int64 value) { throw null; }
-
-        public DateTime AddYears(Int32 value) { throw null; }
-
-        public static Int32 Compare(DateTime t1, DateTime t2) { throw null; }
-
-        public Int32 CompareTo(DateTime value) { throw null; }
-
-        public static Int32 DaysInMonth(Int32 year, Int32 month) { throw null; }
-
-        public static Boolean Equals(DateTime t1, DateTime t2) { throw null; }
-
-        public Boolean Equals(DateTime value) { throw null; }
-
-        public override Boolean Equals(Object value) { throw null; }
-
-        public static DateTime FromBinary(Int64 dateData) { throw null; }
-
-        public static DateTime FromFileTime(Int64 fileTime) { throw null; }
-
-        public static DateTime FromFileTimeUtc(Int64 fileTime) { throw null; }
-
-        public String[] GetDateTimeFormats() { throw null; }
-
-        public String[] GetDateTimeFormats(Char format, IFormatProvider provider) { throw null; }
-
-        public String[] GetDateTimeFormats(Char format) { throw null; }
-
-        public String[] GetDateTimeFormats(IFormatProvider provider) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public Boolean IsDaylightSavingTime() { throw null; }
-
-        public static Boolean IsLeapYear(Int32 year) { throw null; }
-
-        public static DateTime operator +(DateTime d, TimeSpan t) { throw null; }
-
-        public static Boolean operator ==(DateTime d1, DateTime d2) { throw null; }
-
-        public static Boolean operator >(DateTime t1, DateTime t2) { throw null; }
-
-        public static Boolean operator >=(DateTime t1, DateTime t2) { throw null; }
-
-        public static Boolean operator !=(DateTime d1, DateTime d2) { throw null; }
-
-        public static Boolean operator <(DateTime t1, DateTime t2) { throw null; }
-
-        public static Boolean operator <=(DateTime t1, DateTime t2) { throw null; }
-
-        public static TimeSpan operator -(DateTime d1, DateTime d2) { throw null; }
-
-        public static DateTime operator -(DateTime d, TimeSpan t) { throw null; }
-
-        public static DateTime Parse(String s, IFormatProvider provider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public static DateTime Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static DateTime Parse(String s) { throw null; }
-
-        public static DateTime ParseExact(String s, String format, IFormatProvider provider, Globalization.DateTimeStyles style) { throw null; }
-
-        public static DateTime ParseExact(String s, String format, IFormatProvider provider) { throw null; }
-
-        public static DateTime ParseExact(String s, String[] formats, IFormatProvider provider, Globalization.DateTimeStyles style) { throw null; }
-
-        public static DateTime SpecifyKind(DateTime value, DateTimeKind kind) { throw null; }
-
-        public TimeSpan Subtract(DateTime value) { throw null; }
-
-        public DateTime Subtract(TimeSpan value) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public Int64 ToBinary() { throw null; }
-
-        public Int64 ToFileTime() { throw null; }
-
-        public Int64 ToFileTimeUtc() { throw null; }
-
-        public DateTime ToLocalTime() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public DateTime ToUniversalTime() { throw null; }
-
-        public static Boolean TryParse(String s, out DateTime result) { throw null; }
-
-        public static Boolean TryParse(String s, IFormatProvider provider, Globalization.DateTimeStyles styles, out DateTime result) { throw null; }
-
-        public static Boolean TryParseExact(String s, String format, IFormatProvider provider, Globalization.DateTimeStyles style, out DateTime result) { throw null; }
-
-        public static Boolean TryParseExact(String s, String[] formats, IFormatProvider provider, Globalization.DateTimeStyles style, out DateTime result) { throw null; }
-    }
-
-    public enum DateTimeKind
-    {
-        Unspecified = 0,
-        Utc = 1,
-        Local = 2
-    }
-
-    public partial struct DateTimeOffset : IComparable, IComparable<DateTimeOffset>, IEquatable<DateTimeOffset>, IFormattable
-    {
-        public static readonly DateTimeOffset MaxValue;
-        public static readonly DateTimeOffset MinValue;
-        public DateTimeOffset(DateTime dateTime, TimeSpan offset) { }
-
-        public DateTimeOffset(DateTime dateTime) { }
-
-        public DateTimeOffset(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, TimeSpan offset) { }
-
-        public DateTimeOffset(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, TimeSpan offset) { }
-
-        public DateTimeOffset(Int64 ticks, TimeSpan offset) { }
-
-        public DateTime Date { get { throw null; } }
-
-        public DateTime DateTime { get { throw null; } }
-
-        public Int32 Day { get { throw null; } }
-
-        public DayOfWeek DayOfWeek { get { throw null; } }
-
-        public Int32 DayOfYear { get { throw null; } }
-
-        public Int32 Hour { get { throw null; } }
-
-        public DateTime LocalDateTime { get { throw null; } }
-
-        public Int32 Millisecond { get { throw null; } }
-
-        public Int32 Minute { get { throw null; } }
-
-        public Int32 Month { get { throw null; } }
-
-        public static DateTimeOffset Now { get { throw null; } }
-
-        public TimeSpan Offset { get { throw null; } }
-
-        public Int32 Second { get { throw null; } }
-
-        public Int64 Ticks { get { throw null; } }
-
-        public TimeSpan TimeOfDay { get { throw null; } }
-
-        public DateTime UtcDateTime { get { throw null; } }
-
-        public static DateTimeOffset UtcNow { get { throw null; } }
-
-        public Int64 UtcTicks { get { throw null; } }
-
-        public Int32 Year { get { throw null; } }
-
-        public DateTimeOffset Add(TimeSpan timeSpan) { throw null; }
-
-        public DateTimeOffset AddDays(Double days) { throw null; }
-
-        public DateTimeOffset AddHours(Double hours) { throw null; }
-
-        public DateTimeOffset AddMilliseconds(Double milliseconds) { throw null; }
-
-        public DateTimeOffset AddMinutes(Double minutes) { throw null; }
-
-        public DateTimeOffset AddMonths(Int32 months) { throw null; }
-
-        public DateTimeOffset AddSeconds(Double seconds) { throw null; }
-
-        public DateTimeOffset AddTicks(Int64 ticks) { throw null; }
-
-        public DateTimeOffset AddYears(Int32 years) { throw null; }
-
-        public static Int32 Compare(DateTimeOffset first, DateTimeOffset second) { throw null; }
-
-        public Int32 CompareTo(DateTimeOffset other) { throw null; }
-
-        public static Boolean Equals(DateTimeOffset first, DateTimeOffset second) { throw null; }
-
-        public Boolean Equals(DateTimeOffset other) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean EqualsExact(DateTimeOffset other) { throw null; }
-
-        public static DateTimeOffset FromFileTime(Int64 fileTime) { throw null; }
-
-        public static DateTimeOffset FromUnixTimeMilliseconds(Int64 milliseconds) { throw null; }
-
-        public static DateTimeOffset FromUnixTimeSeconds(Int64 seconds) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan) { throw null; }
-
-        public static Boolean operator ==(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator >(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator >=(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static implicit operator DateTimeOffset(DateTime dateTime) { throw null; }
-
-        public static Boolean operator !=(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator <(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator <=(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan) { throw null; }
-
-        public static DateTimeOffset Parse(String input, IFormatProvider formatProvider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public static DateTimeOffset Parse(String input, IFormatProvider formatProvider) { throw null; }
-
-        public static DateTimeOffset Parse(String input) { throw null; }
-
-        public static DateTimeOffset ParseExact(String input, String format, IFormatProvider formatProvider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public static DateTimeOffset ParseExact(String input, String format, IFormatProvider formatProvider) { throw null; }
-
-        public static DateTimeOffset ParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public TimeSpan Subtract(DateTimeOffset value) { throw null; }
-
-        public DateTimeOffset Subtract(TimeSpan value) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public Int64 ToFileTime() { throw null; }
-
-        public DateTimeOffset ToLocalTime() { throw null; }
-
-        public DateTimeOffset ToOffset(TimeSpan offset) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider formatProvider) { throw null; }
-
-        public String ToString(String format, IFormatProvider formatProvider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public DateTimeOffset ToUniversalTime() { throw null; }
-
-        public Int64 ToUnixTimeMilliseconds() { throw null; }
-
-        public Int64 ToUnixTimeSeconds() { throw null; }
-
-        public static Boolean TryParse(String input, out DateTimeOffset result) { throw null; }
-
-        public static Boolean TryParse(String input, IFormatProvider formatProvider, Globalization.DateTimeStyles styles, out DateTimeOffset result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, IFormatProvider formatProvider, Globalization.DateTimeStyles styles, out DateTimeOffset result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.DateTimeStyles styles, out DateTimeOffset result) { throw null; }
-    }
-
-    public enum DayOfWeek
-    {
-        Sunday = 0,
-        Monday = 1,
-        Tuesday = 2,
-        Wednesday = 3,
-        Thursday = 4,
-        Friday = 5,
-        Saturday = 6
-    }
-
-    public partial struct Decimal : IComparable, IComparable<Decimal>, IConvertible, IEquatable<Decimal>, IFormattable
-    {
-        public const Decimal MaxValue = 79228162514264337593543950335M;
-        public const Decimal MinusOne = -1M;
-        public const Decimal MinValue = -79228162514264337593543950335M;
-        public const Decimal One = 1M;
-        public const Decimal Zero = 0M;
-        public Decimal(Double value) { }
-
-        public Decimal(Int32 lo, Int32 mid, Int32 hi, Boolean isNegative, Byte scale) { }
-
-        public Decimal(Int32 value) { }
-
-        public Decimal(Int32[] bits) { }
-
-        public Decimal(Int64 value) { }
-
-        public Decimal(Single value) { }
-
-        [CLSCompliant(false)]
-        public Decimal(UInt32 value) { }
-
-        [CLSCompliant(false)]
-        public Decimal(UInt64 value) { }
-
-        public static Decimal Add(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal Ceiling(Decimal d) { throw null; }
-
-        public static Int32 Compare(Decimal d1, Decimal d2) { throw null; }
-
-        public Int32 CompareTo(Decimal value) { throw null; }
-
-        public static Decimal Divide(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean Equals(Decimal d1, Decimal d2) { throw null; }
-
-        public Boolean Equals(Decimal value) { throw null; }
-
-        public override Boolean Equals(Object value) { throw null; }
-
-        public static Decimal Floor(Decimal d) { throw null; }
-
-        public static Int32[] GetBits(Decimal d) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Decimal Multiply(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal Negate(Decimal d) { throw null; }
-
-        public static Decimal operator +(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator --(Decimal d) { throw null; }
-
-        public static Decimal operator /(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator ==(Decimal d1, Decimal d2) { throw null; }
-
-        public static explicit operator Byte(Decimal value) { throw null; }
-
-        public static explicit operator Char(Decimal value) { throw null; }
-
-        public static explicit operator Double(Decimal value) { throw null; }
-
-        public static explicit operator Int16(Decimal value) { throw null; }
-
-        public static explicit operator Int32(Decimal value) { throw null; }
-
-        public static explicit operator Int64(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator SByte(Decimal value) { throw null; }
-
-        public static explicit operator Single(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator UInt16(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator UInt32(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator UInt64(Decimal value) { throw null; }
-
-        public static explicit operator Decimal(Double value) { throw null; }
-
-        public static explicit operator Decimal(Single value) { throw null; }
-
-        public static Boolean operator >(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator >=(Decimal d1, Decimal d2) { throw null; }
-
-        public static implicit operator Decimal(Byte value) { throw null; }
-
-        public static implicit operator Decimal(Char value) { throw null; }
-
-        public static implicit operator Decimal(Int16 value) { throw null; }
-
-        public static implicit operator Decimal(Int32 value) { throw null; }
-
-        public static implicit operator Decimal(Int64 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(SByte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(UInt16 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(UInt32 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(UInt64 value) { throw null; }
-
-        public static Decimal operator ++(Decimal d) { throw null; }
-
-        public static Boolean operator !=(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator <(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator <=(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator %(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator *(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator -(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator -(Decimal d) { throw null; }
-
-        public static Decimal operator +(Decimal d) { throw null; }
-
-        public static Decimal Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Decimal Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Decimal Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Decimal Parse(String s) { throw null; }
-
-        public static Decimal Remainder(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal Subtract(Decimal d1, Decimal d2) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public static Byte ToByte(Decimal value) { throw null; }
-
-        public static Double ToDouble(Decimal d) { throw null; }
-
-        public static Int16 ToInt16(Decimal value) { throw null; }
-
-        public static Int32 ToInt32(Decimal d) { throw null; }
-
-        public static Int64 ToInt64(Decimal d) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte ToSByte(Decimal value) { throw null; }
-
-        public static Single ToSingle(Decimal d) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 ToUInt16(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 ToUInt32(Decimal d) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 ToUInt64(Decimal d) { throw null; }
-
-        public static Decimal Truncate(Decimal d) { throw null; }
-
-        public static Boolean TryParse(String s, out Decimal result) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Decimal result) { throw null; }
-    }
-
-    public abstract partial class Delegate
-    {
-        internal Delegate() { }
-
-        public Object Target { get { throw null; } }
-
-        public static Delegate Combine(Delegate a, Delegate b) { throw null; }
-
-        public static Delegate Combine(params Delegate[] delegates) { throw null; }
-
-        public Object DynamicInvoke(params Object[] args) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public virtual Delegate[] GetInvocationList() { throw null; }
-
-        public static Boolean operator ==(Delegate d1, Delegate d2) { throw null; }
-
-        public static Boolean operator !=(Delegate d1, Delegate d2) { throw null; }
-
-        public static Delegate Remove(Delegate source, Delegate value) { throw null; }
-
-        public static Delegate RemoveAll(Delegate source, Delegate value) { throw null; }
-    }
-
-    public partial class DivideByZeroException : ArithmeticException
-    {
-        public DivideByZeroException() { }
-
-        public DivideByZeroException(String message, Exception innerException) { }
-
-        public DivideByZeroException(String message) { }
-    }
-
-    public partial struct Double : IComparable, IComparable<Double>, IConvertible, IEquatable<Double>, IFormattable
-    {
-        public const Double Epsilon = 5E-324D;
-        public const Double MaxValue = 1.7976931348623157E+308D;
-        public const Double MinValue = -1.7976931348623157E+308D;
-        public const Double NaN = 0D / 0D;
-        public const Double NegativeInfinity = -1D / 0D;
-        public const Double PositiveInfinity = 1D / 0D;
-        public Int32 CompareTo(Double value) { throw null; }
-
-        public Boolean Equals(Double obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean IsInfinity(Double d) { throw null; }
-
-        public static Boolean IsNaN(Double d) { throw null; }
-
-        public static Boolean IsNegativeInfinity(Double d) { throw null; }
-
-        public static Boolean IsPositiveInfinity(Double d) { throw null; }
-
-        public static Boolean operator ==(Double left, Double right) { throw null; }
-
-        public static Boolean operator >(Double left, Double right) { throw null; }
-
-        public static Boolean operator >=(Double left, Double right) { throw null; }
-
-        public static Boolean operator !=(Double left, Double right) { throw null; }
-
-        public static Boolean operator <(Double left, Double right) { throw null; }
-
-        public static Boolean operator <=(Double left, Double right) { throw null; }
-
-        public static Double Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Double Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Double Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Double Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, out Double result) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Double result) { throw null; }
-    }
-
-    public abstract partial class Enum : ValueType, IComparable, IConvertible, IFormattable
-    {
-        public Int32 CompareTo(Object target) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public static String Format(Type enumType, Object value, String format) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static String GetName(Type enumType, Object value) { throw null; }
-
-        public static String[] GetNames(Type enumType) { throw null; }
-
-        public static Type GetUnderlyingType(Type enumType) { throw null; }
-
-        public static Array GetValues(Type enumType) { throw null; }
-
-        public Boolean HasFlag(Enum flag) { throw null; }
-
-        public static Boolean IsDefined(Type enumType, Object value) { throw null; }
-
-        public static Object Parse(Type enumType, String value, Boolean ignoreCase) { throw null; }
-
-        public static Object Parse(Type enumType, String value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        [Obsolete("The provider argument is not used. Please use ToString().")]
-        String IConvertible.ToString(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        [Obsolete("The provider argument is not used. Please use ToString(String).")]
-        String IFormattable.ToString(String format, IFormatProvider provider) { throw null; }
-
-        public static Object ToObject(Type enumType, Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse<TEnum>(String value, out TEnum result)
-            where TEnum : struct { throw null; }
-
-        public static Boolean TryParse<TEnum>(String value, Boolean ignoreCase, out TEnum result)
-            where TEnum : struct { throw null; }
-    }
-
-    public partial class EventArgs
-    {
-        public static readonly EventArgs Empty;
-    }
-
-    public delegate void EventHandler(Object sender, EventArgs e);
-    public delegate void EventHandler<TEventArgs>(Object sender, TEventArgs e);
-    public partial class Exception
-    {
-        public Exception() { }
-
-        public Exception(String message, Exception innerException) { }
-
-        public Exception(String message) { }
-
-        public virtual Collections.IDictionary Data { get { throw null; } }
-
-        public virtual String HelpLink { get { throw null; } set { } }
-
-        public Int32 HResult { get { throw null; } protected set { } }
-
-        public Exception InnerException { get { throw null; } }
-
-        public virtual String Message { get { throw null; } }
-
-        public virtual String Source { get { throw null; } set { } }
-
-        public virtual String StackTrace { get { throw null; } }
-
-        public virtual Exception GetBaseException() { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class FieldAccessException : MemberAccessException
-    {
-        public FieldAccessException() { }
-
-        public FieldAccessException(String message, Exception inner) { }
-
-        public FieldAccessException(String message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Enum, Inherited = false)]
-    public partial class FlagsAttribute : Attribute
-    {
-    }
-
-    public partial class FormatException : Exception
-    {
-        public FormatException() { }
-
-        public FormatException(String message, Exception innerException) { }
-
-        public FormatException(String message) { }
-    }
-
-    public abstract partial class FormattableString : IFormattable
-    {
-        public abstract Int32 ArgumentCount { get; }
-        public abstract String Format { get; }
-
-        public abstract Object GetArgument(Int32 index);
-        public abstract Object[] GetArguments();
-        public static String Invariant(FormattableString formattable) { throw null; }
-
-        String IFormattable.ToString(String ignored, IFormatProvider formatProvider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public abstract String ToString(IFormatProvider formatProvider);
-    }
-
-    public delegate TResult Func<out TResult>();
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, in T16, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
-    public delegate TResult Func<in T, out TResult>(T arg);
-    public delegate TResult Func<in T1, in T2, out TResult>(T1 arg1, T2 arg2);
-    public delegate TResult Func<in T1, in T2, in T3, out TResult>(T1 arg1, T2 arg2, T3 arg3);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
-    public static partial class GC
-    {
-        public static Int32 MaxGeneration { get { throw null; } }
-
-        public static void AddMemoryPressure(Int64 bytesAllocated) { }
-
-        public static void Collect() { }
-
-        public static void Collect(Int32 generation, GCCollectionMode mode, Boolean blocking) { }
-
-        public static void Collect(Int32 generation, GCCollectionMode mode) { }
-
-        public static void Collect(Int32 generation) { }
-
-        public static Int32 CollectionCount(Int32 generation) { throw null; }
-
-        public static Int32 GetGeneration(Object obj) { throw null; }
-
-        public static Int64 GetTotalMemory(Boolean forceFullCollection) { throw null; }
-
-        public static void KeepAlive(Object obj) { }
-
-        public static void RemoveMemoryPressure(Int64 bytesAllocated) { }
-
-        public static void ReRegisterForFinalize(Object obj) { }
-
-        public static void SuppressFinalize(Object obj) { }
-
-        public static void WaitForPendingFinalizers() { }
-    }
-
-    public enum GCCollectionMode
-    {
-        Default = 0,
-        Forced = 1,
-        Optimized = 2
-    }
-
-    public partial struct Guid : IComparable, IComparable<Guid>, IEquatable<Guid>, IFormattable
-    {
-        public static readonly Guid Empty;
-        public Guid(Byte[] b) { }
-
-        public Guid(Int32 a, Int16 b, Int16 c, Byte d, Byte e, Byte f, Byte g, Byte h, Byte i, Byte j, Byte k) { }
-
-        public Guid(Int32 a, Int16 b, Int16 c, Byte[] d) { }
-
-        public Guid(String g) { }
-
-        [CLSCompliant(false)]
-        public Guid(UInt32 a, UInt16 b, UInt16 c, Byte d, Byte e, Byte f, Byte g, Byte h, Byte i, Byte j, Byte k) { }
-
-        public Int32 CompareTo(Guid value) { throw null; }
-
-        public Boolean Equals(Guid g) { throw null; }
-
-        public override Boolean Equals(Object o) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Guid NewGuid() { throw null; }
-
-        public static Boolean operator ==(Guid a, Guid b) { throw null; }
-
-        public static Boolean operator !=(Guid a, Guid b) { throw null; }
-
-        public static Guid Parse(String input) { throw null; }
-
-        public static Guid ParseExact(String input, String format) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        String IFormattable.ToString(String format, IFormatProvider provider) { throw null; }
-
-        public Byte[] ToByteArray() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String input, out Guid result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, out Guid result) { throw null; }
-    }
-
-    public partial interface IAsyncResult
-    {
-        Object AsyncState { get; }
-
-        Threading.WaitHandle AsyncWaitHandle { get; }
-
-        Boolean CompletedSynchronously { get; }
-
-        Boolean IsCompleted { get; }
-    }
-
-    public partial interface IComparable
-    {
-        Int32 CompareTo(Object obj);
-    }
-
-    public partial interface IComparable<in T>
-    {
-        Int32 CompareTo(T other);
-    }
-
-    [CLSCompliant(false)]
-    public partial interface IConvertible
-    {
-        TypeCode GetTypeCode();
-        Boolean ToBoolean(IFormatProvider provider);
-        Byte ToByte(IFormatProvider provider);
-        Char ToChar(IFormatProvider provider);
-        DateTime ToDateTime(IFormatProvider provider);
-        Decimal ToDecimal(IFormatProvider provider);
-        Double ToDouble(IFormatProvider provider);
-        Int16 ToInt16(IFormatProvider provider);
-        Int32 ToInt32(IFormatProvider provider);
-        Int64 ToInt64(IFormatProvider provider);
-        SByte ToSByte(IFormatProvider provider);
-        Single ToSingle(IFormatProvider provider);
-        String ToString(IFormatProvider provider);
-        Object ToType(Type conversionType, IFormatProvider provider);
-        UInt16 ToUInt16(IFormatProvider provider);
-        UInt32 ToUInt32(IFormatProvider provider);
-        UInt64 ToUInt64(IFormatProvider provider);
-    }
-
-    public partial interface ICustomFormatter
-    {
-        String Format(String format, Object arg, IFormatProvider formatProvider);
-    }
-
-    public partial interface IDisposable
-    {
-        void Dispose();
-    }
-
-    public partial interface IEquatable<T>
-    {
-        Boolean Equals(T other);
-    }
-
-    public partial interface IFormatProvider
-    {
-        Object GetFormat(Type formatType);
-    }
-
-    public partial interface IFormattable
-    {
-        String ToString(String format, IFormatProvider formatProvider);
-    }
-
-    public sealed partial class IndexOutOfRangeException : Exception
-    {
-        public IndexOutOfRangeException() { }
-
-        public IndexOutOfRangeException(String message, Exception innerException) { }
-
-        public IndexOutOfRangeException(String message) { }
-    }
-
-    public sealed partial class InsufficientExecutionStackException : Exception
-    {
-        public InsufficientExecutionStackException() { }
-
-        public InsufficientExecutionStackException(String message, Exception innerException) { }
-
-        public InsufficientExecutionStackException(String message) { }
-    }
-
-    public partial struct Int16 : IComparable, IComparable<Int16>, IConvertible, IEquatable<Int16>, IFormattable
-    {
-        public const Int16 MaxValue = 32767;
-        public const Int16 MinValue = -32768;
-        public Int32 CompareTo(Int16 value) { throw null; }
-
-        public Boolean Equals(Int16 obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Int16 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Int16 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Int16 Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Int16 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Int16 result) { throw null; }
-
-        public static Boolean TryParse(String s, out Int16 result) { throw null; }
-    }
-
-    public partial struct Int32 : IComparable, IComparable<Int32>, IConvertible, IEquatable<Int32>, IFormattable
-    {
-        public const Int32 MaxValue = 2147483647;
-        public const Int32 MinValue = -2147483648;
-        public Int32 CompareTo(Int32 value) { throw null; }
-
-        public Boolean Equals(Int32 obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Int32 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Int32 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Int32 Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Int32 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Int32 result) { throw null; }
-
-        public static Boolean TryParse(String s, out Int32 result) { throw null; }
-    }
-
-    public partial struct Int64 : IComparable, IComparable<Int64>, IConvertible, IEquatable<Int64>, IFormattable
-    {
-        public const Int64 MaxValue = 9223372036854775807L;
-        public const Int64 MinValue = -9223372036854775808;
-        public Int32 CompareTo(Int64 value) { throw null; }
-
-        public Boolean Equals(Int64 obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Int64 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Int64 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Int64 Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Int64 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Int64 result) { throw null; }
-
-        public static Boolean TryParse(String s, out Int64 result) { throw null; }
-    }
-
-    public partial struct IntPtr
-    {
-        public static readonly IntPtr Zero;
-        public IntPtr(Int32 value) { }
-
-        public IntPtr(Int64 value) { }
-
-        [CLSCompliant(false)]
-        public unsafe IntPtr(void* value) { }
-
-        public static Int32 Size { get { throw null; } }
-
-        public static IntPtr Add(IntPtr pointer, Int32 offset) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static IntPtr operator +(IntPtr pointer, Int32 offset) { throw null; }
-
-        public static Boolean operator ==(IntPtr value1, IntPtr value2) { throw null; }
-
-        public static explicit operator IntPtr(Int32 value) { throw null; }
-
-        public static explicit operator IntPtr(Int64 value) { throw null; }
-
-        public static explicit operator Int32(IntPtr value) { throw null; }
-
-        public static explicit operator Int64(IntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator void*(IntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator IntPtr(void* value) { throw null; }
-
-        public static Boolean operator !=(IntPtr value1, IntPtr value2) { throw null; }
-
-        public static IntPtr operator -(IntPtr pointer, Int32 offset) { throw null; }
-
-        public static IntPtr Subtract(IntPtr pointer, Int32 offset) { throw null; }
-
-        public Int32 ToInt32() { throw null; }
-
-        public Int64 ToInt64() { throw null; }
-
-        [CLSCompliant(false)]
-        public unsafe void* ToPointer() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format) { throw null; }
-    }
-
-    public partial class InvalidCastException : Exception
-    {
-        public InvalidCastException() { }
-
-        public InvalidCastException(String message, Exception innerException) { }
-
-        public InvalidCastException(String message, Int32 errorCode) { }
-
-        public InvalidCastException(String message) { }
-    }
-
-    public partial class InvalidOperationException : Exception
-    {
-        public InvalidOperationException() { }
-
-        public InvalidOperationException(String message, Exception innerException) { }
-
-        public InvalidOperationException(String message) { }
-    }
-
-    public sealed partial class InvalidProgramException : Exception
-    {
-        public InvalidProgramException() { }
-
-        public InvalidProgramException(String message, Exception inner) { }
-
-        public InvalidProgramException(String message) { }
-    }
-
-    public partial class InvalidTimeZoneException : Exception
-    {
-        public InvalidTimeZoneException() { }
-
-        public InvalidTimeZoneException(String message, Exception innerException) { }
-
-        public InvalidTimeZoneException(String message) { }
-    }
-
-    public partial interface IObservable<out T>
-    {
-        IDisposable Subscribe(IObserver<T> observer);
-    }
-
-    public partial interface IObserver<in T>
-    {
-        void OnCompleted();
-        void OnError(Exception error);
-        void OnNext(T value);
-    }
-
-    public partial interface IProgress<in T>
-    {
-        void Report(T value);
-    }
-
-    public partial class Lazy<T>
-    {
-        public Lazy() { }
-
-        public Lazy(Boolean isThreadSafe) { }
-
-        public Lazy(Func<T> valueFactory, Boolean isThreadSafe) { }
-
-        public Lazy(Func<T> valueFactory, Threading.LazyThreadSafetyMode mode) { }
-
-        public Lazy(Func<T> valueFactory) { }
-
-        public Lazy(Threading.LazyThreadSafetyMode mode) { }
-
-        public Boolean IsValueCreated { get { throw null; } }
-
-        public T Value { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Lazy<T, TMetadata> : Lazy<T>
-    {
-        public Lazy(TMetadata metadata, Boolean isThreadSafe) { }
-
-        public Lazy(TMetadata metadata, Threading.LazyThreadSafetyMode mode) { }
-
-        public Lazy(TMetadata metadata) { }
-
-        public Lazy(Func<T> valueFactory, TMetadata metadata, Boolean isThreadSafe) { }
-
-        public Lazy(Func<T> valueFactory, TMetadata metadata, Threading.LazyThreadSafetyMode mode) { }
-
-        public Lazy(Func<T> valueFactory, TMetadata metadata) { }
-
-        public TMetadata Metadata { get { throw null; } }
-    }
-
-    public partial class MemberAccessException : Exception
-    {
-        public MemberAccessException() { }
-
-        public MemberAccessException(String message, Exception inner) { }
-
-        public MemberAccessException(String message) { }
-    }
-
-    public partial class MethodAccessException : MemberAccessException
-    {
-        public MethodAccessException() { }
-
-        public MethodAccessException(String message, Exception inner) { }
-
-        public MethodAccessException(String message) { }
-    }
-
-    public partial class MissingFieldException : MissingMemberException
-    {
-        public MissingFieldException() { }
-
-        public MissingFieldException(String message, Exception inner) { }
-
-        public MissingFieldException(String message) { }
-
-        public override String Message { get { throw null; } }
-    }
-
-    public partial class MissingMemberException : MemberAccessException
-    {
-        public MissingMemberException() { }
-
-        public MissingMemberException(String message, Exception inner) { }
-
-        public MissingMemberException(String message) { }
-
-        public override String Message { get { throw null; } }
-    }
-
-    public partial class MissingMethodException : MissingMemberException
-    {
-        public MissingMethodException() { }
-
-        public MissingMethodException(String message, Exception inner) { }
-
-        public MissingMethodException(String message) { }
-
-        public override String Message { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class MTAThreadAttribute : Attribute
-    {
-    }
-
-    public abstract partial class MulticastDelegate : Delegate
-    {
-        internal MulticastDelegate() { }
-
-        public sealed override Boolean Equals(Object obj) { throw null; }
-
-        public sealed override Int32 GetHashCode() { throw null; }
-
-        public sealed override Delegate[] GetInvocationList() { throw null; }
-
-        public static Boolean operator ==(MulticastDelegate d1, MulticastDelegate d2) { throw null; }
-
-        public static Boolean operator !=(MulticastDelegate d1, MulticastDelegate d2) { throw null; }
-    }
-
-    public partial class NotImplementedException : Exception
-    {
-        public NotImplementedException() { }
-
-        public NotImplementedException(String message, Exception inner) { }
-
-        public NotImplementedException(String message) { }
-    }
-
-    public partial class NotSupportedException : Exception
-    {
-        public NotSupportedException() { }
-
-        public NotSupportedException(String message, Exception innerException) { }
-
-        public NotSupportedException(String message) { }
-    }
-
-    public static partial class Nullable
-    {
-        public static Int32 Compare<T>(T? n1, T? n2)
-            where T : struct { throw null; }
-
-        public static Boolean Equals<T>(T? n1, T? n2)
-            where T : struct { throw null; }
-
-        public static Type GetUnderlyingType(Type nullableType) { throw null; }
-    }
-
-    public partial struct Nullable<T>
-        where T : struct
-    {
-        public Nullable(T value) { }
-
-        public Boolean HasValue { get { throw null; } }
-
-        public T Value { get { throw null; } }
-
-        public override Boolean Equals(Object other) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public T GetValueOrDefault() { throw null; }
-
-        public T GetValueOrDefault(T defaultValue) { throw null; }
-
-        public static explicit operator T(T? value) { throw null; }
-
-        public static implicit operator T?(T value) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class NullReferenceException : Exception
-    {
-        public NullReferenceException() { }
-
-        public NullReferenceException(String message, Exception innerException) { }
-
-        public NullReferenceException(String message) { }
-    }
-
-    public partial class Object
-    {
-        public static Boolean Equals(Object objA, Object objB) { throw null; }
-
-        public virtual Boolean Equals(Object obj) { throw null; }
-
-        ~Object() {
-        }
-
-        public virtual Int32 GetHashCode() { throw null; }
-
-        public Type GetType() { throw null; }
-
-        protected Object MemberwiseClone() { throw null; }
-
-        public static Boolean ReferenceEquals(Object objA, Object objB) { throw null; }
-
-        public virtual String ToString() { throw null; }
-    }
-
-    public partial class ObjectDisposedException : InvalidOperationException
-    {
-        public ObjectDisposedException(String message, Exception innerException) { }
-
-        public ObjectDisposedException(String objectName, String message) { }
-
-        public ObjectDisposedException(String objectName) { }
-
-        public override String Message { get { throw null; } }
-
-        public String ObjectName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)]
-    public sealed partial class ObsoleteAttribute : Attribute
-    {
-        public ObsoleteAttribute() { }
-
-        public ObsoleteAttribute(String message, Boolean error) { }
-
-        public ObsoleteAttribute(String message) { }
-
-        public Boolean IsError { get { throw null; } }
-
-        public String Message { get { throw null; } }
-    }
-
-    public partial class OutOfMemoryException : Exception
-    {
-        public OutOfMemoryException() { }
-
-        public OutOfMemoryException(String message, Exception innerException) { }
-
-        public OutOfMemoryException(String message) { }
-    }
-
-    public partial class OverflowException : ArithmeticException
-    {
-        public OverflowException() { }
-
-        public OverflowException(String message, Exception innerException) { }
-
-        public OverflowException(String message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = true, AllowMultiple = false)]
-    public sealed partial class ParamArrayAttribute : Attribute
-    {
-    }
-
-    public partial class PlatformNotSupportedException : NotSupportedException
-    {
-        public PlatformNotSupportedException() { }
-
-        public PlatformNotSupportedException(String message, Exception inner) { }
-
-        public PlatformNotSupportedException(String message) { }
-    }
-
-    public delegate Boolean Predicate<in T>(T obj);
-    public partial class RankException : Exception
-    {
-        public RankException() { }
-
-        public RankException(String message, Exception innerException) { }
-
-        public RankException(String message) { }
-    }
-
-    public partial struct RuntimeFieldHandle
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(RuntimeFieldHandle handle) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(RuntimeFieldHandle left, RuntimeFieldHandle right) { throw null; }
-
-        public static Boolean operator !=(RuntimeFieldHandle left, RuntimeFieldHandle right) { throw null; }
-    }
-
-    public partial struct RuntimeMethodHandle
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(RuntimeMethodHandle handle) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(RuntimeMethodHandle left, RuntimeMethodHandle right) { throw null; }
-
-        public static Boolean operator !=(RuntimeMethodHandle left, RuntimeMethodHandle right) { throw null; }
-    }
-
-    public partial struct RuntimeTypeHandle
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(RuntimeTypeHandle handle) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(Object left, RuntimeTypeHandle right) { throw null; }
-
-        public static Boolean operator ==(RuntimeTypeHandle left, Object right) { throw null; }
-
-        public static Boolean operator !=(Object left, RuntimeTypeHandle right) { throw null; }
-
-        public static Boolean operator !=(RuntimeTypeHandle left, Object right) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct SByte : IComparable, IComparable<SByte>, IConvertible, IEquatable<SByte>, IFormattable
-    {
-        public const SByte MaxValue = 127;
-        public const SByte MinValue = -128;
-        public Int32 CompareTo(SByte value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(SByte obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out SByte result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out SByte result) { throw null; }
-    }
-
-    public partial struct Single : IComparable, IComparable<Single>, IConvertible, IEquatable<Single>, IFormattable
-    {
-        public const Single Epsilon = 1E-45F;
-        public const Single MaxValue = 3.4028235E+38F;
-        public const Single MinValue = -3.4028235E+38F;
-        public const Single NaN = 0F / 0F;
-        public const Single NegativeInfinity = -1F / 0F;
-        public const Single PositiveInfinity = 1F / 0F;
-        public Int32 CompareTo(Single value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(Single obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean IsInfinity(Single f) { throw null; }
-
-        public static Boolean IsNaN(Single f) { throw null; }
-
-        public static Boolean IsNegativeInfinity(Single f) { throw null; }
-
-        public static Boolean IsPositiveInfinity(Single f) { throw null; }
-
-        public static Boolean operator ==(Single left, Single right) { throw null; }
-
-        public static Boolean operator >(Single left, Single right) { throw null; }
-
-        public static Boolean operator >=(Single left, Single right) { throw null; }
-
-        public static Boolean operator !=(Single left, Single right) { throw null; }
-
-        public static Boolean operator <(Single left, Single right) { throw null; }
-
-        public static Boolean operator <=(Single left, Single right) { throw null; }
-
-        public static Single Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Single Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Single Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Single Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Single result) { throw null; }
-
-        public static Boolean TryParse(String s, out Single result) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class STAThreadAttribute : Attribute
-    {
-    }
-
-    public sealed partial class String : Collections.Generic.IEnumerable<Char>, Collections.IEnumerable, IComparable, IComparable<String>, IConvertible, IEquatable<String>
-    {
-        public static readonly String Empty;
-        public String(Char c, Int32 count) { }
-
-        public String(Char[] value, Int32 startIndex, Int32 length) { }
-
-        public String(Char[] value) { }
-
-        [CLSCompliant(false)]
-        public unsafe String(Char* value, Int32 startIndex, Int32 length) { }
-
-        [CLSCompliant(false)]
-        public unsafe String(Char* value) { }
-
-        public Char this[Int32 index] { get { throw null; } }
-
-        public Int32 Length { get { throw null; } }
-
-        public static Int32 Compare(String strA, Int32 indexA, String strB, Int32 indexB, Int32 length, StringComparison comparisonType) { throw null; }
-
-        public static Int32 Compare(String strA, Int32 indexA, String strB, Int32 indexB, Int32 length) { throw null; }
-
-        public static Int32 Compare(String strA, String strB, Boolean ignoreCase) { throw null; }
-
-        public static Int32 Compare(String strA, String strB, StringComparison comparisonType) { throw null; }
-
-        public static Int32 Compare(String strA, String strB) { throw null; }
-
-        public static Int32 CompareOrdinal(String strA, Int32 indexA, String strB, Int32 indexB, Int32 length) { throw null; }
-
-        public static Int32 CompareOrdinal(String strA, String strB) { throw null; }
-
-        public Int32 CompareTo(String strB) { throw null; }
-
-        public static String Concat(Collections.Generic.IEnumerable<String> values) { throw null; }
-
-        public static String Concat(Object arg0, Object arg1, Object arg2) { throw null; }
-
-        public static String Concat(Object arg0, Object arg1) { throw null; }
-
-        public static String Concat(Object arg0) { throw null; }
-
-        public static String Concat(params Object[] args) { throw null; }
-
-        public static String Concat(String str0, String str1, String str2, String str3) { throw null; }
-
-        public static String Concat(String str0, String str1, String str2) { throw null; }
-
-        public static String Concat(String str0, String str1) { throw null; }
-
-        public static String Concat(params String[] values) { throw null; }
-
-        public static String Concat<T>(Collections.Generic.IEnumerable<T> values) { throw null; }
-
-        public Boolean Contains(String value) { throw null; }
-
-        public void CopyTo(Int32 sourceIndex, Char[] destination, Int32 destinationIndex, Int32 count) { }
-
-        public Boolean EndsWith(String value, StringComparison comparisonType) { throw null; }
-
-        public Boolean EndsWith(String value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public static Boolean Equals(String a, String b, StringComparison comparisonType) { throw null; }
-
-        public static Boolean Equals(String a, String b) { throw null; }
-
-        public Boolean Equals(String value, StringComparison comparisonType) { throw null; }
-
-        public Boolean Equals(String value) { throw null; }
-
-        public static String Format(IFormatProvider provider, String format, Object arg0, Object arg1, Object arg2) { throw null; }
-
-        public static String Format(IFormatProvider provider, String format, Object arg0, Object arg1) { throw null; }
-
-        public static String Format(IFormatProvider provider, String format, Object arg0) { throw null; }
-
-        public static String Format(IFormatProvider provider, String format, params Object[] args) { throw null; }
-
-        public static String Format(String format, Object arg0, Object arg1, Object arg2) { throw null; }
-
-        public static String Format(String format, Object arg0, Object arg1) { throw null; }
-
-        public static String Format(String format, Object arg0) { throw null; }
-
-        public static String Format(String format, params Object[] args) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public Int32 IndexOf(Char value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 IndexOf(Char value, Int32 startIndex) { throw null; }
-
-        public Int32 IndexOf(Char value) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex, Int32 count, StringComparison comparisonType) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex, StringComparison comparisonType) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex) { throw null; }
-
-        public Int32 IndexOf(String value, StringComparison comparisonType) { throw null; }
-
-        public Int32 IndexOf(String value) { throw null; }
-
-        public Int32 IndexOfAny(Char[] anyOf, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 IndexOfAny(Char[] anyOf, Int32 startIndex) { throw null; }
-
-        public Int32 IndexOfAny(Char[] anyOf) { throw null; }
-
-        public String Insert(Int32 startIndex, String value) { throw null; }
-
-        public static Boolean IsNullOrEmpty(String value) { throw null; }
-
-        public static Boolean IsNullOrWhiteSpace(String value) { throw null; }
-
-        public static String Join(String separator, Collections.Generic.IEnumerable<String> values) { throw null; }
-
-        public static String Join(String separator, params Object[] values) { throw null; }
-
-        public static String Join(String separator, String[] value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static String Join(String separator, params String[] value) { throw null; }
-
-        public static String Join<T>(String separator, Collections.Generic.IEnumerable<T> values) { throw null; }
-
-        public Int32 LastIndexOf(Char value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 LastIndexOf(Char value, Int32 startIndex) { throw null; }
-
-        public Int32 LastIndexOf(Char value) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex, Int32 count, StringComparison comparisonType) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex, StringComparison comparisonType) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex) { throw null; }
-
-        public Int32 LastIndexOf(String value, StringComparison comparisonType) { throw null; }
-
-        public Int32 LastIndexOf(String value) { throw null; }
-
-        public Int32 LastIndexOfAny(Char[] anyOf, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 LastIndexOfAny(Char[] anyOf, Int32 startIndex) { throw null; }
-
-        public Int32 LastIndexOfAny(Char[] anyOf) { throw null; }
-
-        public static Boolean operator ==(String a, String b) { throw null; }
-
-        public static Boolean operator !=(String a, String b) { throw null; }
-
-        public String PadLeft(Int32 totalWidth, Char paddingChar) { throw null; }
-
-        public String PadLeft(Int32 totalWidth) { throw null; }
-
-        public String PadRight(Int32 totalWidth, Char paddingChar) { throw null; }
-
-        public String PadRight(Int32 totalWidth) { throw null; }
-
-        public String Remove(Int32 startIndex, Int32 count) { throw null; }
-
-        public String Remove(Int32 startIndex) { throw null; }
-
-        public String Replace(Char oldChar, Char newChar) { throw null; }
-
-        public String Replace(String oldValue, String newValue) { throw null; }
-
-        public String[] Split(Char[] separator, Int32 count, StringSplitOptions options) { throw null; }
-
-        public String[] Split(Char[] separator, Int32 count) { throw null; }
-
-        public String[] Split(Char[] separator, StringSplitOptions options) { throw null; }
-
-        public String[] Split(params Char[] separator) { throw null; }
-
-        public String[] Split(String[] separator, Int32 count, StringSplitOptions options) { throw null; }
-
-        public String[] Split(String[] separator, StringSplitOptions options) { throw null; }
-
-        public Boolean StartsWith(String value, StringComparison comparisonType) { throw null; }
-
-        public Boolean StartsWith(String value) { throw null; }
-
-        public String Substring(Int32 startIndex, Int32 length) { throw null; }
-
-        public String Substring(Int32 startIndex) { throw null; }
-
-        Collections.Generic.IEnumerator<Char> Collections.Generic.IEnumerable<Char>.GetEnumerator() { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        String IConvertible.ToString(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public Char[] ToCharArray() { throw null; }
-
-        public Char[] ToCharArray(Int32 startIndex, Int32 length) { throw null; }
-
-        public String ToLower() { throw null; }
-
-        public String ToLowerInvariant() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToUpper() { throw null; }
-
-        public String ToUpperInvariant() { throw null; }
-
-        public String Trim() { throw null; }
-
-        public String Trim(params Char[] trimChars) { throw null; }
-
-        public String TrimEnd(params Char[] trimChars) { throw null; }
-
-        public String TrimStart(params Char[] trimChars) { throw null; }
-    }
-
-    public enum StringComparison
-    {
-        CurrentCulture = 0,
-        CurrentCultureIgnoreCase = 1,
-        Ordinal = 4,
-        OrdinalIgnoreCase = 5
-    }
-
-    [Flags]
-    public enum StringSplitOptions
-    {
-        None = 0,
-        RemoveEmptyEntries = 1
-    }
-
-    [AttributeUsage(AttributeTargets.Field, Inherited = false)]
-    public partial class ThreadStaticAttribute : Attribute
-    {
-    }
-
-    public partial class TimeoutException : Exception
-    {
-        public TimeoutException() { }
-
-        public TimeoutException(String message, Exception innerException) { }
-
-        public TimeoutException(String message) { }
-    }
-
-    public partial struct TimeSpan : IComparable, IComparable<TimeSpan>, IEquatable<TimeSpan>, IFormattable
-    {
-        public static readonly TimeSpan MaxValue;
-        public static readonly TimeSpan MinValue;
-        public const Int64 TicksPerDay = 864000000000L;
-        public const Int64 TicksPerHour = 36000000000L;
-        public const Int64 TicksPerMillisecond = 10000L;
-        public const Int64 TicksPerMinute = 600000000L;
-        public const Int64 TicksPerSecond = 10000000L;
-        public static readonly TimeSpan Zero;
-        public TimeSpan(Int32 days, Int32 hours, Int32 minutes, Int32 seconds, Int32 milliseconds) { }
-
-        public TimeSpan(Int32 days, Int32 hours, Int32 minutes, Int32 seconds) { }
-
-        public TimeSpan(Int32 hours, Int32 minutes, Int32 seconds) { }
-
-        public TimeSpan(Int64 ticks) { }
-
-        public Int32 Days { get { throw null; } }
-
-        public Int32 Hours { get { throw null; } }
-
-        public Int32 Milliseconds { get { throw null; } }
-
-        public Int32 Minutes { get { throw null; } }
-
-        public Int32 Seconds { get { throw null; } }
-
-        public Int64 Ticks { get { throw null; } }
-
-        public Double TotalDays { get { throw null; } }
-
-        public Double TotalHours { get { throw null; } }
-
-        public Double TotalMilliseconds { get { throw null; } }
-
-        public Double TotalMinutes { get { throw null; } }
-
-        public Double TotalSeconds { get { throw null; } }
-
-        public TimeSpan Add(TimeSpan ts) { throw null; }
-
-        public static Int32 Compare(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public Int32 CompareTo(TimeSpan value) { throw null; }
-
-        public TimeSpan Duration() { throw null; }
-
-        public override Boolean Equals(Object value) { throw null; }
-
-        public static Boolean Equals(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public Boolean Equals(TimeSpan obj) { throw null; }
-
-        public static TimeSpan FromDays(Double value) { throw null; }
-
-        public static TimeSpan FromHours(Double value) { throw null; }
-
-        public static TimeSpan FromMilliseconds(Double value) { throw null; }
-
-        public static TimeSpan FromMinutes(Double value) { throw null; }
-
-        public static TimeSpan FromSeconds(Double value) { throw null; }
-
-        public static TimeSpan FromTicks(Int64 value) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public TimeSpan Negate() { throw null; }
-
-        public static TimeSpan operator +(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator ==(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator >(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator >=(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator !=(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator <(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator <=(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static TimeSpan operator -(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static TimeSpan operator -(TimeSpan t) { throw null; }
-
-        public static TimeSpan operator +(TimeSpan t) { throw null; }
-
-        public static TimeSpan Parse(String input, IFormatProvider formatProvider) { throw null; }
-
-        public static TimeSpan Parse(String s) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String format, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String format, IFormatProvider formatProvider) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String[] formats, IFormatProvider formatProvider) { throw null; }
-
-        public TimeSpan Subtract(TimeSpan ts) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format, IFormatProvider formatProvider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String input, IFormatProvider formatProvider, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParse(String s, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, IFormatProvider formatProvider, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String[] formats, IFormatProvider formatProvider, out TimeSpan result) { throw null; }
-    }
-
-    public sealed partial class TimeZoneInfo : IEquatable<TimeZoneInfo>
-    {
-        internal TimeZoneInfo() { }
-
-        public TimeSpan BaseUtcOffset { get { throw null; } }
-
-        public String DaylightName { get { throw null; } }
-
-        public String DisplayName { get { throw null; } }
-
-        public String Id { get { throw null; } }
-
-        public static TimeZoneInfo Local { get { throw null; } }
-
-        public String StandardName { get { throw null; } }
-
-        public Boolean SupportsDaylightSavingTime { get { throw null; } }
-
-        public static TimeZoneInfo Utc { get { throw null; } }
-
-        public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone) { throw null; }
-
-        public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo destinationTimeZone) { throw null; }
-
-        public static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone) { throw null; }
-
-        public Boolean Equals(TimeZoneInfo other) { throw null; }
-
-        public static TimeZoneInfo FindSystemTimeZoneById(String id) { throw null; }
-
-        public TimeSpan[] GetAmbiguousTimeOffsets(DateTime dateTime) { throw null; }
-
-        public TimeSpan[] GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Collections.ObjectModel.ReadOnlyCollection<TimeZoneInfo> GetSystemTimeZones() { throw null; }
-
-        public TimeSpan GetUtcOffset(DateTime dateTime) { throw null; }
-
-        public TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public Boolean IsAmbiguousTime(DateTime dateTime) { throw null; }
-
-        public Boolean IsAmbiguousTime(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public Boolean IsDaylightSavingTime(DateTime dateTime) { throw null; }
-
-        public Boolean IsDaylightSavingTime(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public Boolean IsInvalidTime(DateTime dateTime) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public static partial class Tuple
-    {
-        public static Tuple<T1> Create<T1>(T1 item1) { throw null; }
-
-        public static Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2) { throw null; }
-
-        public static Tuple<T1, T2, T3> Create<T1, T2, T3>(T1 item1, T2 item2, T3 item3) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4> Create<T1, T2, T3, T4>(T1 item1, T2 item2, T3 item3, T4 item4) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5> Create<T1, T2, T3, T4, T5>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5, T6> Create<T1, T2, T3, T4, T5, T6>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5, T6, T7> Create<T1, T2, T3, T4, T5, T6, T7>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5, T6, T7, Tuple<T8>> Create<T1, T2, T3, T4, T5, T6, T7, T8>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8) { throw null; }
-    }
-
-    public partial class Tuple<T1> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5, T6> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public T6 Item6 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5, T6, T7> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public T6 Item6 { get { throw null; } }
-
-        public T7 Item7 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public T6 Item6 { get { throw null; } }
-
-        public T7 Item7 { get { throw null; } }
-
-        public TRest Rest { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public abstract partial class Type
-    {
-        internal Type() { }
-
-        public static readonly Type[] EmptyTypes;
-        public static readonly Object Missing;
-        public abstract String AssemblyQualifiedName { get; }
-        public abstract Type DeclaringType { get; }
-        public abstract String FullName { get; }
-        public abstract Int32 GenericParameterPosition { get; }
-        public abstract Type[] GenericTypeArguments { get; }
-
-        public Boolean HasElementType { get { throw null; } }
-
-        public virtual Boolean IsArray { get { throw null; } }
-
-        public virtual Boolean IsByRef { get { throw null; } }
-
-        public abstract Boolean IsConstructedGenericType { get; }
-        public abstract Boolean IsGenericParameter { get; }
-
-        public Boolean IsNested { get { throw null; } }
-
-        public virtual Boolean IsPointer { get { throw null; } }
-
-        public abstract String Name { get; }
-        public abstract String Namespace { get; }
-
-        public virtual RuntimeTypeHandle TypeHandle { get { throw null; } }
-
-        public override Boolean Equals(Object o) { throw null; }
-
-        public Boolean Equals(Type o) { throw null; }
-
-        public abstract Int32 GetArrayRank();
-        public abstract Type GetElementType();
-        public abstract Type GetGenericTypeDefinition();
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Type GetType(String typeName, Boolean throwOnError, Boolean ignoreCase) { throw null; }
-
-        public static Type GetType(String typeName, Boolean throwOnError) { throw null; }
-
-        public static Type GetType(String typeName) { throw null; }
-
-        public static Type GetTypeFromHandle(RuntimeTypeHandle handle) { throw null; }
-
-        public abstract Type MakeArrayType();
-        public abstract Type MakeArrayType(Int32 rank);
-        public abstract Type MakeByRefType();
-        public abstract Type MakeGenericType(params Type[] typeArguments);
-        public abstract Type MakePointerType();
-        public override String ToString() { throw null; }
-    }
-
-    public partial class TypeAccessException : TypeLoadException
-    {
-        public TypeAccessException() { }
-
-        public TypeAccessException(String message, Exception inner) { }
-
-        public TypeAccessException(String message) { }
-    }
-
-    public enum TypeCode
-    {
-        Empty = 0,
-        Object = 1,
-        Boolean = 3,
-        Char = 4,
-        SByte = 5,
-        Byte = 6,
-        Int16 = 7,
-        UInt16 = 8,
-        Int32 = 9,
-        UInt32 = 10,
-        Int64 = 11,
-        UInt64 = 12,
-        Single = 13,
-        Double = 14,
-        Decimal = 15,
-        DateTime = 16,
-        String = 18
-    }
-
-    public sealed partial class TypeInitializationException : Exception
-    {
-        public TypeInitializationException(String fullTypeName, Exception innerException) { }
-
-        public String TypeName { get { throw null; } }
-    }
-
-    public partial class TypeLoadException : Exception
-    {
-        public TypeLoadException() { }
-
-        public TypeLoadException(String message, Exception inner) { }
-
-        public TypeLoadException(String message) { }
-
-        public override String Message { get { throw null; } }
-
-        public String TypeName { get { throw null; } }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UInt16 : IComparable, IComparable<UInt16>, IConvertible, IEquatable<UInt16>, IFormattable
-    {
-        public const UInt16 MaxValue = 65535;
-        public const UInt16 MinValue = 0;
-        public Int32 CompareTo(UInt16 value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(UInt16 obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out UInt16 result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out UInt16 result) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UInt32 : IComparable, IComparable<UInt32>, IConvertible, IEquatable<UInt32>, IFormattable
-    {
-        public const UInt32 MaxValue = 4294967295U;
-        public const UInt32 MinValue = 0U;
-        public Int32 CompareTo(UInt32 value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(UInt32 obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out UInt32 result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out UInt32 result) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UInt64 : IComparable, IComparable<UInt64>, IConvertible, IEquatable<UInt64>, IFormattable
-    {
-        public const UInt64 MaxValue = 18446744073709551615UL;
-        public const UInt64 MinValue = 0UL;
-        public Int32 CompareTo(UInt64 value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(UInt64 obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out UInt64 result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out UInt64 result) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UIntPtr
-    {
-        public static readonly UIntPtr Zero;
-        public UIntPtr(UInt32 value) { }
-
-        public UIntPtr(UInt64 value) { }
-
-        [CLSCompliant(false)]
-        public unsafe UIntPtr(void* value) { }
-
-        public static Int32 Size { get { throw null; } }
-
-        public static UIntPtr Add(UIntPtr pointer, Int32 offset) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static UIntPtr operator +(UIntPtr pointer, Int32 offset) { throw null; }
-
-        public static Boolean operator ==(UIntPtr value1, UIntPtr value2) { throw null; }
-
-        public static explicit operator UIntPtr(UInt32 value) { throw null; }
-
-        public static explicit operator UIntPtr(UInt64 value) { throw null; }
-
-        public static explicit operator UInt32(UIntPtr value) { throw null; }
-
-        public static explicit operator UInt64(UIntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator void*(UIntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator UIntPtr(void* value) { throw null; }
-
-        public static Boolean operator !=(UIntPtr value1, UIntPtr value2) { throw null; }
-
-        public static UIntPtr operator -(UIntPtr pointer, Int32 offset) { throw null; }
-
-        public static UIntPtr Subtract(UIntPtr pointer, Int32 offset) { throw null; }
-
-        [CLSCompliant(false)]
-        public unsafe void* ToPointer() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public UInt32 ToUInt32() { throw null; }
-
-        public UInt64 ToUInt64() { throw null; }
-    }
-
-    public partial class UnauthorizedAccessException : Exception
-    {
-        public UnauthorizedAccessException() { }
-
-        public UnauthorizedAccessException(String message, Exception inner) { }
-
-        public UnauthorizedAccessException(String message) { }
-    }
-
-    public partial class Uri
-    {
-        public Uri(String uriString, UriKind uriKind) { }
-
-        public Uri(String uriString) { }
-
-        public Uri(Uri baseUri, String relativeUri) { }
-
-        public Uri(Uri baseUri, Uri relativeUri) { }
-
-        public String AbsolutePath { get { throw null; } }
-
-        public String AbsoluteUri { get { throw null; } }
-
-        public String Authority { get { throw null; } }
-
-        public String DnsSafeHost { get { throw null; } }
-
-        public String Fragment { get { throw null; } }
-
-        public String Host { get { throw null; } }
-
-        public UriHostNameType HostNameType { get { throw null; } }
-
-        public String IdnHost { get { throw null; } }
-
-        public Boolean IsAbsoluteUri { get { throw null; } }
-
-        public Boolean IsDefaultPort { get { throw null; } }
-
-        public Boolean IsFile { get { throw null; } }
-
-        public Boolean IsLoopback { get { throw null; } }
-
-        public Boolean IsUnc { get { throw null; } }
-
-        public String LocalPath { get { throw null; } }
-
-        public String OriginalString { get { throw null; } }
-
-        public String PathAndQuery { get { throw null; } }
-
-        public Int32 Port { get { throw null; } }
-
-        public String Query { get { throw null; } }
-
-        public String Scheme { get { throw null; } }
-
-        public String[] Segments { get { throw null; } }
-
-        public Boolean UserEscaped { get { throw null; } }
-
-        public String UserInfo { get { throw null; } }
-
-        public static UriHostNameType CheckHostName(String name) { throw null; }
-
-        public static Boolean CheckSchemeName(String schemeName) { throw null; }
-
-        public static Int32 Compare(Uri uri1, Uri uri2, UriComponents partsToCompare, UriFormat compareFormat, StringComparison comparisonType) { throw null; }
-
-        public override Boolean Equals(Object comparand) { throw null; }
-
-        public static String EscapeDataString(String stringToEscape) { throw null; }
-
-        public static String EscapeUriString(String stringToEscape) { throw null; }
-
-        public String GetComponents(UriComponents components, UriFormat format) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public Boolean IsBaseOf(Uri uri) { throw null; }
-
-        public Boolean IsWellFormedOriginalString() { throw null; }
-
-        public static Boolean IsWellFormedUriString(String uriString, UriKind uriKind) { throw null; }
-
-        public Uri MakeRelativeUri(Uri uri) { throw null; }
-
-        public static Boolean operator ==(Uri uri1, Uri uri2) { throw null; }
-
-        public static Boolean operator !=(Uri uri1, Uri uri2) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public static Boolean TryCreate(String uriString, UriKind uriKind, out Uri result) { throw null; }
-
-        public static Boolean TryCreate(Uri baseUri, String relativeUri, out Uri result) { throw null; }
-
-        public static Boolean TryCreate(Uri baseUri, Uri relativeUri, out Uri result) { throw null; }
-
-        public static String UnescapeDataString(String stringToUnescape) { throw null; }
-    }
-
-    [Flags]
-    public enum UriComponents
-    {
-        SerializationInfoString = Int32.MinValue,
-        Scheme = 1,
-        UserInfo = 2,
-        Host = 4,
-        Port = 8,
-        SchemeAndServer = 13,
-        Path = 16,
-        Query = 32,
-        PathAndQuery = 48,
-        HttpRequestUrl = 61,
-        Fragment = 64,
-        AbsoluteUri = 127,
-        StrongPort = 128,
-        HostAndPort = 132,
-        StrongAuthority = 134,
-        NormalizedHost = 256,
-        KeepDelimiter = 1073741824
-    }
-
-    public enum UriFormat
-    {
-        UriEscaped = 1,
-        Unescaped = 2,
-        SafeUnescaped = 3
-    }
-
-    public partial class UriFormatException : FormatException
-    {
-        public UriFormatException() { }
-
-        public UriFormatException(String textString, Exception e) { }
-
-        public UriFormatException(String textString) { }
-    }
-
-    public enum UriHostNameType
-    {
-        Unknown = 0,
-        Basic = 1,
-        Dns = 2,
-        IPv4 = 3,
-        IPv6 = 4
-    }
-
-    public enum UriKind
-    {
-        RelativeOrAbsolute = 0,
-        Absolute = 1,
-        Relative = 2
-    }
-
-    public abstract partial class ValueType
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public sealed partial class Version : IComparable, IComparable<Version>, IEquatable<Version>
-    {
-        public Version(Int32 major, Int32 minor, Int32 build, Int32 revision) { }
-
-        public Version(Int32 major, Int32 minor, Int32 build) { }
-
-        public Version(Int32 major, Int32 minor) { }
-
-        public Version(String version) { }
-
-        public Int32 Build { get { throw null; } }
-
-        public Int32 Major { get { throw null; } }
-
-        public Int16 MajorRevision { get { throw null; } }
-
-        public Int32 Minor { get { throw null; } }
-
-        public Int16 MinorRevision { get { throw null; } }
-
-        public Int32 Revision { get { throw null; } }
-
-        public Int32 CompareTo(Version value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(Version obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator >(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator >=(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator !=(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator <(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator <=(Version v1, Version v2) { throw null; }
-
-        public static Version Parse(String input) { throw null; }
-
-        Int32 IComparable.CompareTo(Object version) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(Int32 fieldCount) { throw null; }
-
-        public static Boolean TryParse(String input, out Version result) { throw null; }
-    }
-
-    public partial struct Void
-    {
-    }
-
-    public partial class WeakReference
-    {
-        public WeakReference(Object target, Boolean trackResurrection) { }
-
-        public WeakReference(Object target) { }
-
-        public virtual Boolean IsAlive { get { throw null; } }
-
-        public virtual Object Target { get { throw null; } set { } }
-
-        public virtual Boolean TrackResurrection { get { throw null; } }
-
-        ~WeakReference() {
-        }
-    }
-
-    public sealed partial class WeakReference<T>
-        where T : class
-    {
-        public WeakReference(T target, Boolean trackResurrection) { }
-
-        public WeakReference(T target) { }
-
-        ~WeakReference() {
-        }
-
-        public void SetTarget(T target) { }
-
-        public Boolean TryGetTarget(out T target) { throw null; }
-    }
-}
-
-namespace System.Collections
-{
-    public partial struct DictionaryEntry
-    {
-        public DictionaryEntry(Object key, Object value) { }
-
-        public Object Key { get { throw null; } set { } }
-
-        public Object Value { get { throw null; } set { } }
-    }
-
-    public partial interface ICollection : IEnumerable
-    {
-        Int32 Count { get; }
-
-        Boolean IsSynchronized { get; }
-
-        Object SyncRoot { get; }
-
-        void CopyTo(Array array, Int32 index);
-    }
-
-    public partial interface IComparer
-    {
-        Int32 Compare(Object x, Object y);
-    }
-
-    public partial interface IDictionary : ICollection, IEnumerable
-    {
-        Boolean IsFixedSize { get; }
-
-        Boolean IsReadOnly { get; }
-
-        Object this[Object key] { get; set; }
-
-        ICollection Keys { get; }
-
-        ICollection Values { get; }
-
-        void Add(Object key, Object value);
-        void Clear();
-        Boolean Contains(Object key);
-        IDictionaryEnumerator GetEnumerator();
-        void Remove(Object key);
-    }
-
-    public partial interface IDictionaryEnumerator : IEnumerator
-    {
-        DictionaryEntry Entry { get; }
-
-        Object Key { get; }
-
-        Object Value { get; }
-    }
-
-    public partial interface IEnumerable
-    {
-        IEnumerator GetEnumerator();
-    }
-
-    public partial interface IEnumerator
-    {
-        Object Current { get; }
-
-        Boolean MoveNext();
-        void Reset();
-    }
-
-    public partial interface IEqualityComparer
-    {
-        Boolean Equals(Object x, Object y);
-        Int32 GetHashCode(Object obj);
-    }
-
-    public partial interface IList : ICollection, IEnumerable
-    {
-        Boolean IsFixedSize { get; }
-
-        Boolean IsReadOnly { get; }
-
-        Object this[Int32 index] { get; set; }
-
-        Int32 Add(Object value);
-        void Clear();
-        Boolean Contains(Object value);
-        Int32 IndexOf(Object value);
-        void Insert(Int32 index, Object value);
-        void Remove(Object value);
-        void RemoveAt(Int32 index);
-    }
-
-    public partial interface IStructuralComparable
-    {
-        Int32 CompareTo(Object other, IComparer comparer);
-    }
-
-    public partial interface IStructuralEquatable
-    {
-        Boolean Equals(Object other, IEqualityComparer comparer);
-        Int32 GetHashCode(IEqualityComparer comparer);
-    }
-}
-
-namespace System.Collections.Generic
-{
-    public partial interface ICollection<T> : IEnumerable<T>, IEnumerable
-    {
-        Int32 Count { get; }
-
-        Boolean IsReadOnly { get; }
-
-        void Add(T item);
-        void Clear();
-        Boolean Contains(T item);
-        void CopyTo(T[] array, Int32 arrayIndex);
-        Boolean Remove(T item);
-    }
-
-    public partial interface IComparer<in T>
-    {
-        Int32 Compare(T x, T y);
-    }
-
-    public partial interface IDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable
-    {
-        TValue this[TKey key] { get; set; }
-
-        ICollection<TKey> Keys { get; }
-
-        ICollection<TValue> Values { get; }
-
-        void Add(TKey key, TValue value);
-        Boolean ContainsKey(TKey key);
-        Boolean Remove(TKey key);
-        Boolean TryGetValue(TKey key, out TValue value);
-    }
-
-    public partial interface IEnumerable<out T> : IEnumerable
-    {
-        IEnumerator<T> GetEnumerator();
-    }
-
-    public partial interface IEnumerator<out T> : IEnumerator, IDisposable
-    {
-        T Current { get; }
-    }
-
-    public partial interface IEqualityComparer<in T>
-    {
-        Boolean Equals(T x, T y);
-        Int32 GetHashCode(T obj);
-    }
-
-    public partial interface IList<T> : ICollection<T>, IEnumerable<T>, IEnumerable
-    {
-        T this[Int32 index] { get; set; }
-
-        Int32 IndexOf(T item);
-        void Insert(Int32 index, T item);
-        void RemoveAt(Int32 index);
-    }
-
-    public partial interface IReadOnlyCollection<out T> : IEnumerable<T>, IEnumerable
-    {
-        Int32 Count { get; }
-    }
-
-    public partial interface IReadOnlyDictionary<TKey, TValue> : IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IReadOnlyCollection<KeyValuePair<TKey, TValue>>
-    {
-        TValue this[TKey key] { get; }
-
-        IEnumerable<TKey> Keys { get; }
-
-        IEnumerable<TValue> Values { get; }
-
-        Boolean ContainsKey(TKey key);
-        Boolean TryGetValue(TKey key, out TValue value);
-    }
-
-    public partial interface IReadOnlyList<out T> : IEnumerable<T>, IEnumerable, IReadOnlyCollection<T>
-    {
-        T this[Int32 index] { get; }
-    }
-
-    public partial interface ISet<T> : ICollection<T>, IEnumerable<T>, IEnumerable
-    {
-        Boolean Add(T item);
-        void ExceptWith(IEnumerable<T> other);
-        void IntersectWith(IEnumerable<T> other);
-        Boolean IsProperSubsetOf(IEnumerable<T> other);
-        Boolean IsProperSupersetOf(IEnumerable<T> other);
-        Boolean IsSubsetOf(IEnumerable<T> other);
-        Boolean IsSupersetOf(IEnumerable<T> other);
-        Boolean Overlaps(IEnumerable<T> other);
-        Boolean SetEquals(IEnumerable<T> other);
-        void SymmetricExceptWith(IEnumerable<T> other);
-        void UnionWith(IEnumerable<T> other);
-    }
-
-    public partial class KeyNotFoundException : Exception
-    {
-        public KeyNotFoundException() { }
-
-        public KeyNotFoundException(String message, Exception innerException) { }
-
-        public KeyNotFoundException(String message) { }
-    }
-
-    public partial struct KeyValuePair<TKey, TValue>
-    {
-        public KeyValuePair(TKey key, TValue value) { }
-
-        public TKey Key { get { throw null; } }
-
-        public TValue Value { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-}
-
-namespace System.Collections.ObjectModel
-{
-    public partial class Collection<T> : Generic.ICollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.IList<T>, Generic.IReadOnlyCollection<T>, Generic.IReadOnlyList<T>, ICollection, IList
-    {
-        public Collection() { }
-
-        public Collection(Generic.IList<T> list) { }
-
-        public Int32 Count { get { throw null; } }
-
-        public T this[Int32 index] { get { throw null; } set { } }
-
-        protected Generic.IList<T> Items { get { throw null; } }
-
-        Boolean Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        Boolean ICollection.IsSynchronized { get { throw null; } }
-
-        Object ICollection.SyncRoot { get { throw null; } }
-
-        Boolean IList.IsFixedSize { get { throw null; } }
-
-        Boolean IList.IsReadOnly { get { throw null; } }
-
-        Object IList.this[Int32 index] { get { throw null; } set { } }
-
-        public void Add(T item) { }
-
-        public void Clear() { }
-
-        protected virtual void ClearItems() { }
-
-        public Boolean Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, Int32 index) { }
-
-        public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        public Int32 IndexOf(T item) { throw null; }
-
-        public void Insert(Int32 index, T item) { }
-
-        protected virtual void InsertItem(Int32 index, T item) { }
-
-        public Boolean Remove(T item) { throw null; }
-
-        public void RemoveAt(Int32 index) { }
-
-        protected virtual void RemoveItem(Int32 index) { }
-
-        protected virtual void SetItem(Int32 index, T item) { }
-
-        void ICollection.CopyTo(Array array, Int32 index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        Int32 IList.Add(Object value) { throw null; }
-
-        Boolean IList.Contains(Object value) { throw null; }
-
-        Int32 IList.IndexOf(Object value) { throw null; }
-
-        void IList.Insert(Int32 index, Object value) { }
-
-        void IList.Remove(Object value) { }
-    }
-
-    public partial class ReadOnlyCollection<T> : Generic.ICollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.IList<T>, Generic.IReadOnlyCollection<T>, Generic.IReadOnlyList<T>, ICollection, IList
-    {
-        public ReadOnlyCollection(Generic.IList<T> list) { }
-
-        public Int32 Count { get { throw null; } }
-
-        public T this[Int32 index] { get { throw null; } }
-
-        protected Generic.IList<T> Items { get { throw null; } }
-
-        Boolean Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        T Generic.IList<T>.this[Int32 index] { get { throw null; } set { } }
-
-        Boolean ICollection.IsSynchronized { get { throw null; } }
-
-        Object ICollection.SyncRoot { get { throw null; } }
-
-        Boolean IList.IsFixedSize { get { throw null; } }
-
-        Boolean IList.IsReadOnly { get { throw null; } }
-
-        Object IList.this[Int32 index] { get { throw null; } set { } }
-
-        public Boolean Contains(T value) { throw null; }
-
-        public void CopyTo(T[] array, Int32 index) { }
-
-        public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        public Int32 IndexOf(T value) { throw null; }
-
-        void Generic.ICollection<T>.Add(T value) { }
-
-        void Generic.ICollection<T>.Clear() { }
-
-        Boolean Generic.ICollection<T>.Remove(T value) { throw null; }
-
-        void Generic.IList<T>.Insert(Int32 index, T value) { }
-
-        void Generic.IList<T>.RemoveAt(Int32 index) { }
-
-        void ICollection.CopyTo(Array array, Int32 index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        Int32 IList.Add(Object value) { throw null; }
-
-        void IList.Clear() { }
-
-        Boolean IList.Contains(Object value) { throw null; }
-
-        Int32 IList.IndexOf(Object value) { throw null; }
-
-        void IList.Insert(Int32 index, Object value) { }
-
-        void IList.Remove(Object value) { }
-
-        void IList.RemoveAt(Int32 index) { }
-    }
-}
-
-namespace System.ComponentModel
-{
-    [AttributeUsage(AttributeTargets.All)]
-    public partial class DefaultValueAttribute : Attribute
-    {
-        public DefaultValueAttribute(Boolean value) { }
-
-        public DefaultValueAttribute(Byte value) { }
-
-        public DefaultValueAttribute(Char value) { }
-
-        public DefaultValueAttribute(Double value) { }
-
-        public DefaultValueAttribute(Int16 value) { }
-
-        public DefaultValueAttribute(Int32 value) { }
-
-        public DefaultValueAttribute(Int64 value) { }
-
-        public DefaultValueAttribute(Object value) { }
-
-        public DefaultValueAttribute(Single value) { }
-
-        public DefaultValueAttribute(String value) { }
-
-        public DefaultValueAttribute(Type type, String value) { }
-
-        public virtual Object Value { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
-    public sealed partial class EditorBrowsableAttribute : Attribute
-    {
-        public EditorBrowsableAttribute(EditorBrowsableState state) { }
-
-        public EditorBrowsableState State { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-    }
-
-    public enum EditorBrowsableState
-    {
-        Always = 0,
-        Never = 1,
-        Advanced = 2
-    }
-}
-
-namespace System.Diagnostics
-{
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]
-    public sealed partial class ConditionalAttribute : Attribute
-    {
-        public ConditionalAttribute(String conditionString) { }
-
-        public String ConditionString { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Module, AllowMultiple = false)]
-    public sealed partial class DebuggableAttribute : Attribute
-    {
-        public DebuggableAttribute(DebuggingModes modes) { }
-
-        [Flags]
-        public enum DebuggingModes
-        {
-            None = 0,
-            Default = 1,
-            IgnoreSymbolStoreSequencePoints = 2,
-            EnableEditAndContinue = 4,
-            DisableOptimizations = 256
-        }
-    }
-}
-
-namespace System.Globalization
-{
-    [Flags]
-    public enum DateTimeStyles
-    {
-        None = 0,
-        AllowLeadingWhite = 1,
-        AllowTrailingWhite = 2,
-        AllowInnerWhite = 4,
-        AllowWhiteSpaces = 7,
-        NoCurrentDateDefault = 8,
-        AdjustToUniversal = 16,
-        AssumeLocal = 32,
-        AssumeUniversal = 64,
-        RoundtripKind = 128
-    }
-
-    [Flags]
-    public enum NumberStyles
-    {
-        None = 0,
-        AllowLeadingWhite = 1,
-        AllowTrailingWhite = 2,
-        AllowLeadingSign = 4,
-        Integer = 7,
-        AllowTrailingSign = 8,
-        AllowParentheses = 16,
-        AllowDecimalPoint = 32,
-        AllowThousands = 64,
-        Number = 111,
-        AllowExponent = 128,
-        Float = 167,
-        AllowCurrencySymbol = 256,
-        Currency = 383,
-        Any = 511,
-        AllowHexSpecifier = 512,
-        HexNumber = 515
-    }
-
-    [Flags]
-    public enum TimeSpanStyles
-    {
-        None = 0,
-        AssumeNegative = 1
-    }
-}
-
-namespace System.IO
-{
-    public partial class DirectoryNotFoundException : IOException
-    {
-        public DirectoryNotFoundException() { }
-
-        public DirectoryNotFoundException(String message, Exception innerException) { }
-
-        public DirectoryNotFoundException(String message) { }
-    }
-
-    public partial class FileLoadException : IOException
-    {
-        public FileLoadException() { }
-
-        public FileLoadException(String message, Exception inner) { }
-
-        public FileLoadException(String message, String fileName, Exception inner) { }
-
-        public FileLoadException(String message, String fileName) { }
-
-        public FileLoadException(String message) { }
-
-        public String FileName { get { throw null; } }
-
-        public override String Message { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class FileNotFoundException : IOException
-    {
-        public FileNotFoundException() { }
-
-        public FileNotFoundException(String message, Exception innerException) { }
-
-        public FileNotFoundException(String message, String fileName, Exception innerException) { }
-
-        public FileNotFoundException(String message, String fileName) { }
-
-        public FileNotFoundException(String message) { }
-
-        public String FileName { get { throw null; } }
-
-        public override String Message { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class IOException : Exception
-    {
-        public IOException() { }
-
-        public IOException(String message, Exception innerException) { }
-
-        public IOException(String message, Int32 hresult) { }
-
-        public IOException(String message) { }
-    }
-
-    public partial class PathTooLongException : IOException
-    {
-        public PathTooLongException() { }
-
-        public PathTooLongException(String message, Exception innerException) { }
-
-        public PathTooLongException(String message) { }
-    }
-}
-
-namespace System.Reflection
-{
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyCompanyAttribute : Attribute
-    {
-        public AssemblyCompanyAttribute(String company) { }
-
-        public String Company { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyConfigurationAttribute : Attribute
-    {
-        public AssemblyConfigurationAttribute(String configuration) { }
-
-        public String Configuration { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyCopyrightAttribute : Attribute
-    {
-        public AssemblyCopyrightAttribute(String copyright) { }
-
-        public String Copyright { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyCultureAttribute : Attribute
-    {
-        public AssemblyCultureAttribute(String culture) { }
-
-        public String Culture { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyDefaultAliasAttribute : Attribute
-    {
-        public AssemblyDefaultAliasAttribute(String defaultAlias) { }
-
-        public String DefaultAlias { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyDelaySignAttribute : Attribute
-    {
-        public AssemblyDelaySignAttribute(Boolean delaySign) { }
-
-        public Boolean DelaySign { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyDescriptionAttribute : Attribute
-    {
-        public AssemblyDescriptionAttribute(String description) { }
-
-        public String Description { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyFileVersionAttribute : Attribute
-    {
-        public AssemblyFileVersionAttribute(String version) { }
-
-        public String Version { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyFlagsAttribute : Attribute
-    {
-        public AssemblyFlagsAttribute(AssemblyNameFlags assemblyFlags) { }
-
-        public Int32 AssemblyFlags { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyInformationalVersionAttribute : Attribute
-    {
-        public AssemblyInformationalVersionAttribute(String informationalVersion) { }
-
-        public String InformationalVersion { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyKeyFileAttribute : Attribute
-    {
-        public AssemblyKeyFileAttribute(String keyFile) { }
-
-        public String KeyFile { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyKeyNameAttribute : Attribute
-    {
-        public AssemblyKeyNameAttribute(String keyName) { }
-
-        public String KeyName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)]
-    public sealed partial class AssemblyMetadataAttribute : Attribute
-    {
-        public AssemblyMetadataAttribute(String key, String value) { }
-
-        public String Key { get { throw null; } }
-
-        public String Value { get { throw null; } }
-    }
-
-    [Flags]
-    public enum AssemblyNameFlags
-    {
-        None = 0,
-        PublicKey = 1,
-        Retargetable = 256
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyProductAttribute : Attribute
-    {
-        public AssemblyProductAttribute(String product) { }
-
-        public String Product { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = false)]
-    public sealed partial class AssemblySignatureKeyAttribute : Attribute
-    {
-        public AssemblySignatureKeyAttribute(String publicKey, String countersignature) { }
-
-        public String Countersignature { get { throw null; } }
-
-        public String PublicKey { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyTitleAttribute : Attribute
-    {
-        public AssemblyTitleAttribute(String title) { }
-
-        public String Title { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyTrademarkAttribute : Attribute
-    {
-        public AssemblyTrademarkAttribute(String trademark) { }
-
-        public String Trademark { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyVersionAttribute : Attribute
-    {
-        public AssemblyVersionAttribute(String version) { }
-
-        public String Version { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface)]
-    public sealed partial class DefaultMemberAttribute : Attribute
-    {
-        public DefaultMemberAttribute(String memberName) { }
-
-        public String MemberName { get { throw null; } }
-    }
-
-    public enum ProcessorArchitecture
-    {
-        None = 0,
-        MSIL = 1,
-        X86 = 2,
-        IA64 = 3,
-        Amd64 = 4,
-        Arm = 5
-    }
-}
-
-namespace System.Runtime
-{
-    public enum GCLargeObjectHeapCompactionMode
-    {
-        Default = 1,
-        CompactOnce = 2
-    }
-
-    public enum GCLatencyMode
-    {
-        Batch = 0,
-        Interactive = 1,
-        LowLatency = 2,
-        SustainedLowLatency = 3
-    }
-
-    public static partial class GCSettings
-    {
-        public static Boolean IsServerGC { get { throw null; } }
-
-        public static GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode { get { throw null; } set { } }
-
-        public static GCLatencyMode LatencyMode { get { throw null; } set { } }
-    }
-}
-
-namespace System.Runtime.CompilerServices
-{
-    [AttributeUsage(AttributeTargets.Field)]
-    public sealed partial class AccessedThroughPropertyAttribute : Attribute
-    {
-        public AccessedThroughPropertyAttribute(String propertyName) { }
-
-        public String PropertyName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
-    public sealed partial class AsyncStateMachineAttribute : StateMachineAttribute
-    {
-        public AsyncStateMachineAttribute(Type stateMachineType) : base(default!) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class CallerFilePathAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class CallerLineNumberAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class CallerMemberNameAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Module | AttributeTargets.Class | AttributeTargets.Method)]
-    public partial class CompilationRelaxationsAttribute : Attribute
-    {
-        public CompilationRelaxationsAttribute(Int32 relaxations) { }
-
-        public Int32 CompilationRelaxations { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.All, Inherited = true)]
-    public sealed partial class CompilerGeneratedAttribute : Attribute
-    {
-    }
-
-    public sealed partial class ConditionalWeakTable<TKey, TValue>
-        where TKey : class where TValue : class
-    {
-        public void Add(TKey key, TValue value) { }
-
-        ~ConditionalWeakTable() {
-        }
-
-        public TValue GetOrCreateValue(TKey key) { throw null; }
-
-        public TValue GetValue(TKey key, CreateValueCallback createValueCallback) { throw null; }
-
-        public Boolean Remove(TKey key) { throw null; }
-
-        public Boolean TryGetValue(TKey key, out TValue value) { throw null; }
-
-        public delegate TValue CreateValueCallback(TKey key);
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter, Inherited = false)]
-    public abstract partial class CustomConstantAttribute : Attribute
-    {
-        public abstract Object Value { get; }
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class DateTimeConstantAttribute : CustomConstantAttribute
-    {
-        public DateTimeConstantAttribute(Int64 ticks) { }
-
-        public override Object Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class DecimalConstantAttribute : Attribute
-    {
-        public DecimalConstantAttribute(Byte scale, Byte sign, Int32 hi, Int32 mid, Int32 low) { }
-
-        [CLSCompliant(false)]
-        public DecimalConstantAttribute(Byte scale, Byte sign, UInt32 hi, UInt32 mid, UInt32 low) { }
-
-        public Decimal Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)]
-    public sealed partial class DisablePrivateReflectionAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method)]
-    public sealed partial class ExtensionAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Field, Inherited = false)]
-    public sealed partial class FixedBufferAttribute : Attribute
-    {
-        public FixedBufferAttribute(Type elementType, Int32 length) { }
-
-        public Type ElementType { get { throw null; } }
-
-        public Int32 Length { get { throw null; } }
-    }
-
-    public static partial class FormattableStringFactory
-    {
-        public static FormattableString Create(String format, params Object[] arguments) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property, Inherited = true)]
-    public sealed partial class IndexerNameAttribute : Attribute
-    {
-        public IndexerNameAttribute(String indexerName) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)]
-    public sealed partial class InternalsVisibleToAttribute : Attribute
-    {
-        public InternalsVisibleToAttribute(String assemblyName) { }
-
-        public String AssemblyName { get { throw null; } }
-    }
-
-    public static partial class IsConst
-    {
-    }
-
-    public partial interface IStrongBox
-    {
-        Object Value { get; set; }
-    }
-
-    public static partial class IsVolatile
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
-    public sealed partial class IteratorStateMachineAttribute : StateMachineAttribute
-    {
-        public IteratorStateMachineAttribute(Type stateMachineType) : base(default!) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method, Inherited = false)]
-    public sealed partial class MethodImplAttribute : Attribute
-    {
-        public MethodImplAttribute(MethodImplOptions methodImplOptions) { }
-
-        public MethodImplOptions Value { get { throw null; } }
-    }
-
-    [Flags]
-    public enum MethodImplOptions
-    {
-        NoInlining = 8,
-        NoOptimization = 64,
-        PreserveSig = 128,
-        AggressiveInlining = 256
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false)]
-    public sealed partial class ReferenceAssemblyAttribute : Attribute
-    {
-        public ReferenceAssemblyAttribute() { }
-
-        public ReferenceAssemblyAttribute(String description) { }
-
-        public String Description { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = false)]
-    public sealed partial class RuntimeCompatibilityAttribute : Attribute
-    {
-        public Boolean WrapNonExceptionThrows { get { throw null; } set { } }
-    }
-
-    public static partial class RuntimeHelpers
-    {
-        public static Int32 OffsetToStringData { get { throw null; } }
-
-        public static void EnsureSufficientExecutionStack() { }
-
-        public static Int32 GetHashCode(Object o) { throw null; }
-
-        public static Object GetObjectValue(Object obj) { throw null; }
-
-        public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle) { }
-
-        public static void RunClassConstructor(RuntimeTypeHandle type) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
-    public partial class StateMachineAttribute : Attribute
-    {
-        public StateMachineAttribute(Type stateMachineType) { }
-
-        public Type StateMachineType { get { throw null; } }
-    }
-
-    public partial class StrongBox<T> : IStrongBox
-    {
-        public T Value;
-        public StrongBox() { }
-
-        public StrongBox(T value) { }
-
-        Object IStrongBox.Value { get { throw null; } set { } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false, AllowMultiple = false)]
-    public sealed partial class TypeForwardedFromAttribute : Attribute
-    {
-        public TypeForwardedFromAttribute(String assemblyFullName) { }
-
-        public String AssemblyFullName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)]
-    public sealed partial class TypeForwardedToAttribute : Attribute
-    {
-        public TypeForwardedToAttribute(Type destination) { }
-
-        public Type Destination { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Struct)]
-    public sealed partial class UnsafeValueTypeAttribute : Attribute
-    {
-    }
-}
-
-namespace System.Runtime.ExceptionServices
-{
-    public sealed partial class ExceptionDispatchInfo
-    {
-        internal ExceptionDispatchInfo() { }
-
-        public Exception SourceException { get { throw null; } }
-
-        public static ExceptionDispatchInfo Capture(Exception source) { throw null; }
-
-        public void Throw() { }
-    }
-}
-
-namespace System.Runtime.InteropServices
-{
-    public enum CharSet
-    {
-        Ansi = 2,
-        Unicode = 3
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)]
-    public sealed partial class ComVisibleAttribute : Attribute
-    {
-        public ComVisibleAttribute(Boolean visibility) { }
-
-        public Boolean Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Field, Inherited = false)]
-    public sealed partial class FieldOffsetAttribute : Attribute
-    {
-        public FieldOffsetAttribute(Int32 offset) { }
-
-        public Int32 Value { get { throw null; } }
-    }
-
-    public enum LayoutKind
-    {
-        Sequential = 0,
-        Explicit = 2,
-        Auto = 3
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class OutAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false)]
-    public sealed partial class StructLayoutAttribute : Attribute
-    {
-        public CharSet CharSet;
-        public Int32 Pack;
-        public Int32 Size;
-        public StructLayoutAttribute(LayoutKind layoutKind) { }
-
-        public LayoutKind Value { get { throw null; } }
-    }
-}
-
-namespace System.Runtime.Versioning
-{
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)]
-    public sealed partial class TargetFrameworkAttribute : Attribute
-    {
-        public TargetFrameworkAttribute(String frameworkName) { }
-
-        public String FrameworkDisplayName { get { throw null; } set { } }
-
-        public String FrameworkName { get { throw null; } }
-    }
-}
-
-namespace System.Security
-{
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)]
-    public sealed partial class AllowPartiallyTrustedCallersAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class SecurityCriticalAttribute : Attribute
-    {
-    }
-
-    public partial class SecurityException : Exception
-    {
-        public SecurityException() { }
-
-        public SecurityException(String message, Exception inner) { }
-
-        public SecurityException(String message) { }
-
-        public override String ToString() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class SecuritySafeCriticalAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)]
-    public sealed partial class SecurityTransparentAttribute : Attribute
-    {
-    }
-
-    public partial class VerificationException : Exception
-    {
-        public VerificationException() { }
-
-        public VerificationException(String message, Exception innerException) { }
-
-        public VerificationException(String message) { }
-    }
-}
-
-namespace System.Text
-{
-    public sealed partial class StringBuilder
-    {
-        public StringBuilder() { }
-
-        public StringBuilder(Int32 capacity, Int32 maxCapacity) { }
-
-        public StringBuilder(Int32 capacity) { }
-
-        public StringBuilder(String value, Int32 startIndex, Int32 length, Int32 capacity) { }
-
-        public StringBuilder(String value, Int32 capacity) { }
-
-        public StringBuilder(String value) { }
-
-        public Int32 Capacity { get { throw null; } set { } }
-
-        public Char this[Int32 index] { get { throw null; } set { } }
-
-        public Int32 Length { get { throw null; } set { } }
-
-        public Int32 MaxCapacity { get { throw null; } }
-
-        public StringBuilder Append(Boolean value) { throw null; }
-
-        public StringBuilder Append(Byte value) { throw null; }
-
-        public StringBuilder Append(Char value, Int32 repeatCount) { throw null; }
-
-        public StringBuilder Append(Char value) { throw null; }
-
-        public StringBuilder Append(Char[] value, Int32 startIndex, Int32 charCount) { throw null; }
-
-        public StringBuilder Append(Char[] value) { throw null; }
-
-        [CLSCompliant(false)]
-        public unsafe StringBuilder Append(Char* value, Int32 valueCount) { throw null; }
-
-        public StringBuilder Append(Decimal value) { throw null; }
-
-        public StringBuilder Append(Double value) { throw null; }
-
-        public StringBuilder Append(Int16 value) { throw null; }
-
-        public StringBuilder Append(Int32 value) { throw null; }
-
-        public StringBuilder Append(Int64 value) { throw null; }
-
-        public StringBuilder Append(Object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(SByte value) { throw null; }
-
-        public StringBuilder Append(Single value) { throw null; }
-
-        public StringBuilder Append(String value, Int32 startIndex, Int32 count) { throw null; }
-
-        public StringBuilder Append(String value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(UInt16 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(UInt32 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(UInt64 value) { throw null; }
-
-        public StringBuilder AppendFormat(IFormatProvider provider, String format, Object arg0, Object arg1, Object arg2) { throw null; }
-
-        public StringBuilder AppendFormat(IFormatProvider provider, String format, Object arg0, Object arg1) { throw null; }
-
-        public StringBuilder AppendFormat(IFormatProvider provider, String format, Object arg0) { throw null; }
-
-        public StringBuilder AppendFormat(IFormatProvider provider, String format, params Object[] args) { throw null; }
-
-        public StringBuilder AppendFormat(String format, Object arg0, Object arg1, Object arg2) { throw null; }
-
-        public StringBuilder AppendFormat(String format, Object arg0, Object arg1) { throw null; }
-
-        public StringBuilder AppendFormat(String format, Object arg0) { throw null; }
-
-        public StringBuilder AppendFormat(String format, params Object[] args) { throw null; }
-
-        public StringBuilder AppendLine() { throw null; }
-
-        public StringBuilder AppendLine(String value) { throw null; }
-
-        public StringBuilder Clear() { throw null; }
-
-        public void CopyTo(Int32 sourceIndex, Char[] destination, Int32 destinationIndex, Int32 count) { }
-
-        public Int32 EnsureCapacity(Int32 capacity) { throw null; }
-
-        public Boolean Equals(StringBuilder sb) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Boolean value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Byte value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Char value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Char[] value, Int32 startIndex, Int32 charCount) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Char[] value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Decimal value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Double value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Int16 value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Int32 value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Int64 value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, SByte value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Single value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, String value, Int32 count) { throw null; }
-
-        public StringBuilder Insert(Int32 index, String value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, UInt16 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, UInt32 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, UInt64 value) { throw null; }
-
-        public StringBuilder Remove(Int32 startIndex, Int32 length) { throw null; }
-
-        public StringBuilder Replace(Char oldChar, Char newChar, Int32 startIndex, Int32 count) { throw null; }
-
-        public StringBuilder Replace(Char oldChar, Char newChar) { throw null; }
-
-        public StringBuilder Replace(String oldValue, String newValue, Int32 startIndex, Int32 count) { throw null; }
-
-        public StringBuilder Replace(String oldValue, String newValue) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(Int32 startIndex, Int32 length) { throw null; }
-    }
-}
-
-namespace System.Threading
-{
-    public enum LazyThreadSafetyMode
-    {
-        None = 0,
-        PublicationOnly = 1,
-        ExecutionAndPublication = 2
-    }
-
-    public static partial class Timeout
-    {
-        public const Int32 Infinite = -1;
-        public static readonly TimeSpan InfiniteTimeSpan;
-    }
-
-    public abstract partial class WaitHandle : IDisposable
-    {
-        protected static readonly IntPtr InvalidHandle;
-        public const Int32 WaitTimeout = 258;
-        public void Dispose() { }
-
-        protected virtual void Dispose(Boolean explicitDisposing) { }
-
-        public static Boolean WaitAll(WaitHandle[] waitHandles, Int32 millisecondsTimeout) { throw null; }
-
-        public static Boolean WaitAll(WaitHandle[] waitHandles, TimeSpan timeout) { throw null; }
-
-        public static Boolean WaitAll(WaitHandle[] waitHandles) { throw null; }
-
-        public static Int32 WaitAny(WaitHandle[] waitHandles, Int32 millisecondsTimeout) { throw null; }
-
-        public static Int32 WaitAny(WaitHandle[] waitHandles, TimeSpan timeout) { throw null; }
-
-        public static Int32 WaitAny(WaitHandle[] waitHandles) { throw null; }
-
-        public virtual Boolean WaitOne() { throw null; }
-
-        public virtual Boolean WaitOne(Int32 millisecondsTimeout) { throw null; }
-
-        public virtual Boolean WaitOne(TimeSpan timeout) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.5/System.Runtime.cs b/src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.5/System.Runtime.cs
deleted file mode 100644
index aac42e32..00000000
--- a/src/referencePackages/src/system.runtime/4.3.0/ref/netstandard1.5/System.Runtime.cs
+++ /dev/null
@@ -1,5174 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: InternalsVisibleTo("System.Private.Reflection.Extensibility, PublicKey=002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293")]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: AssemblyTitle("System.Runtime")]
-[assembly: AssemblyDescription("System.Runtime")]
-[assembly: AssemblyDefaultAlias("System.Runtime")]
-[assembly: AssemblyCompany("Microsoft Corporation")]
-[assembly: AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: AssemblyFileVersion("1.0.24212.01")]
-[assembly: AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: CLSCompliant(true)]
-[assembly: AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public delegate void Action();
-    public delegate void Action<in T>(T obj);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, in T16>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
-    public delegate void Action<in T1, in T2>(T1 arg1, T2 arg2);
-    public delegate void Action<in T1, in T2, in T3>(T1 arg1, T2 arg2, T3 arg3);
-    public delegate void Action<in T1, in T2, in T3, in T4>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
-    public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
-    public static partial class Activator
-    {
-        public static Object CreateInstance(Type type, Boolean nonPublic) { throw null; }
-
-        public static Object CreateInstance(Type type, params Object[] args) { throw null; }
-
-        public static Object CreateInstance(Type type) { throw null; }
-
-        public static T CreateInstance<T>() { throw null; }
-    }
-
-    public partial class ArgumentException : Exception
-    {
-        public ArgumentException() { }
-
-        public ArgumentException(String message, Exception innerException) { }
-
-        public ArgumentException(String message, String paramName, Exception innerException) { }
-
-        public ArgumentException(String message, String paramName) { }
-
-        public ArgumentException(String message) { }
-
-        public override String Message { get { throw null; } }
-
-        public virtual String ParamName { get { throw null; } }
-    }
-
-    public partial class ArgumentNullException : ArgumentException
-    {
-        public ArgumentNullException() { }
-
-        public ArgumentNullException(String message, Exception innerException) { }
-
-        public ArgumentNullException(String paramName, String message) { }
-
-        public ArgumentNullException(String paramName) { }
-    }
-
-    public partial class ArgumentOutOfRangeException : ArgumentException
-    {
-        public ArgumentOutOfRangeException() { }
-
-        public ArgumentOutOfRangeException(String message, Exception innerException) { }
-
-        public ArgumentOutOfRangeException(String paramName, Object actualValue, String message) { }
-
-        public ArgumentOutOfRangeException(String paramName, String message) { }
-
-        public ArgumentOutOfRangeException(String paramName) { }
-
-        public virtual Object ActualValue { get { throw null; } }
-
-        public override String Message { get { throw null; } }
-    }
-
-    public partial class ArithmeticException : Exception
-    {
-        public ArithmeticException() { }
-
-        public ArithmeticException(String message, Exception innerException) { }
-
-        public ArithmeticException(String message) { }
-    }
-
-    public abstract partial class Array : Collections.ICollection, Collections.IEnumerable, Collections.IList, Collections.IStructuralComparable, Collections.IStructuralEquatable
-    {
-        internal Array() { }
-
-        public Int32 Length { get { throw null; } }
-
-        public Int32 Rank { get { throw null; } }
-
-        Int32 Collections.ICollection.Count { get { throw null; } }
-
-        Boolean Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        Object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        Boolean Collections.IList.IsFixedSize { get { throw null; } }
-
-        Boolean Collections.IList.IsReadOnly { get { throw null; } }
-
-        Object Collections.IList.this[Int32 index] { get { throw null; } set { } }
-
-        public static Int32 BinarySearch(Array array, Int32 index, Int32 length, Object value, Collections.IComparer comparer) { throw null; }
-
-        public static Int32 BinarySearch(Array array, Int32 index, Int32 length, Object value) { throw null; }
-
-        public static Int32 BinarySearch(Array array, Object value, Collections.IComparer comparer) { throw null; }
-
-        public static Int32 BinarySearch(Array array, Object value) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, T value, Collections.Generic.IComparer<T> comparer) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, T value) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, Int32 index, Int32 length, T value, Collections.Generic.IComparer<T> comparer) { throw null; }
-
-        public static Int32 BinarySearch<T>(T[] array, Int32 index, Int32 length, T value) { throw null; }
-
-        public static void Clear(Array array, Int32 index, Int32 length) { }
-
-        public Object Clone() { throw null; }
-
-        public static void ConstrainedCopy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length) { }
-
-        public static void Copy(Array sourceArray, Array destinationArray, Int32 length) { }
-
-        public static void Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length) { }
-
-        public void CopyTo(Array array, Int32 index) { }
-
-        public static Array CreateInstance(Type elementType, Int32 length) { throw null; }
-
-        public static Array CreateInstance(Type elementType, Int32[] lengths, Int32[] lowerBounds) { throw null; }
-
-        public static Array CreateInstance(Type elementType, params Int32[] lengths) { throw null; }
-
-        public static T[] Empty<T>() { throw null; }
-
-        public static Boolean Exists<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static T Find<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static T[] FindAll<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static Int32 FindIndex<T>(T[] array, Int32 startIndex, Int32 count, Predicate<T> match) { throw null; }
-
-        public static Int32 FindIndex<T>(T[] array, Int32 startIndex, Predicate<T> match) { throw null; }
-
-        public static Int32 FindIndex<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static T FindLast<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public static Int32 FindLastIndex<T>(T[] array, Int32 startIndex, Int32 count, Predicate<T> match) { throw null; }
-
-        public static Int32 FindLastIndex<T>(T[] array, Int32 startIndex, Predicate<T> match) { throw null; }
-
-        public static Int32 FindLastIndex<T>(T[] array, Predicate<T> match) { throw null; }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        public Int32 GetLength(Int32 dimension) { throw null; }
-
-        public Int32 GetLowerBound(Int32 dimension) { throw null; }
-
-        public Int32 GetUpperBound(Int32 dimension) { throw null; }
-
-        public Object GetValue(Int32 index) { throw null; }
-
-        public Object GetValue(params Int32[] indices) { throw null; }
-
-        public static Int32 IndexOf(Array array, Object value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 IndexOf(Array array, Object value, Int32 startIndex) { throw null; }
-
-        public static Int32 IndexOf(Array array, Object value) { throw null; }
-
-        public static Int32 IndexOf<T>(T[] array, T value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 IndexOf<T>(T[] array, T value, Int32 startIndex) { throw null; }
-
-        public static Int32 IndexOf<T>(T[] array, T value) { throw null; }
-
-        public void Initialize() { }
-
-        public static Int32 LastIndexOf(Array array, Object value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 LastIndexOf(Array array, Object value, Int32 startIndex) { throw null; }
-
-        public static Int32 LastIndexOf(Array array, Object value) { throw null; }
-
-        public static Int32 LastIndexOf<T>(T[] array, T value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static Int32 LastIndexOf<T>(T[] array, T value, Int32 startIndex) { throw null; }
-
-        public static Int32 LastIndexOf<T>(T[] array, T value) { throw null; }
-
-        public static void Resize<T>(ref T[] array, Int32 newSize) { }
-
-        public static void Reverse(Array array, Int32 index, Int32 length) { }
-
-        public static void Reverse(Array array) { }
-
-        public void SetValue(Object value, Int32 index) { }
-
-        public void SetValue(Object value, params Int32[] indices) { }
-
-        public static void Sort(Array keys, Array items, Collections.IComparer comparer) { }
-
-        public static void Sort(Array keys, Array items, Int32 index, Int32 length, Collections.IComparer comparer) { }
-
-        public static void Sort(Array keys, Array items, Int32 index, Int32 length) { }
-
-        public static void Sort(Array keys, Array items) { }
-
-        public static void Sort(Array array, Collections.IComparer comparer) { }
-
-        public static void Sort(Array array, Int32 index, Int32 length, Collections.IComparer comparer) { }
-
-        public static void Sort(Array array, Int32 index, Int32 length) { }
-
-        public static void Sort(Array array) { }
-
-        public static void Sort<T>(T[] array, Collections.Generic.IComparer<T> comparer) { }
-
-        public static void Sort<T>(T[] array, Comparison<T> comparison) { }
-
-        public static void Sort<T>(T[] array, Int32 index, Int32 length, Collections.Generic.IComparer<T> comparer) { }
-
-        public static void Sort<T>(T[] array, Int32 index, Int32 length) { }
-
-        public static void Sort<T>(T[] array) { }
-
-        public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, Collections.Generic.IComparer<TKey> comparer) { }
-
-        public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, Int32 index, Int32 length, Collections.Generic.IComparer<TKey> comparer) { }
-
-        public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, Int32 index, Int32 length) { }
-
-        public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items) { }
-
-        Int32 Collections.IList.Add(Object value) { throw null; }
-
-        void Collections.IList.Clear() { }
-
-        Boolean Collections.IList.Contains(Object value) { throw null; }
-
-        Int32 Collections.IList.IndexOf(Object value) { throw null; }
-
-        void Collections.IList.Insert(Int32 index, Object value) { }
-
-        void Collections.IList.Remove(Object value) { }
-
-        void Collections.IList.RemoveAt(Int32 index) { }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        public static Boolean TrueForAll<T>(T[] array, Predicate<T> match) { throw null; }
-    }
-
-    public partial struct ArraySegment<T> : Collections.Generic.ICollection<T>, Collections.Generic.IEnumerable<T>, Collections.IEnumerable, Collections.Generic.IList<T>, Collections.Generic.IReadOnlyCollection<T>, Collections.Generic.IReadOnlyList<T>
-    {
-        public ArraySegment(T[] array, Int32 offset, Int32 count) { }
-
-        public ArraySegment(T[] array) { }
-
-        public T[] Array { get { throw null; } }
-
-        public Int32 Count { get { throw null; } }
-
-        public Int32 Offset { get { throw null; } }
-
-        Boolean Collections.Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        T Collections.Generic.IList<T>.this[Int32 index] { get { throw null; } set { } }
-
-        T Collections.Generic.IReadOnlyList<T>.this[Int32 index] { get { throw null; } }
-
-        public Boolean Equals(ArraySegment<T> obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(ArraySegment<T> a, ArraySegment<T> b) { throw null; }
-
-        public static Boolean operator !=(ArraySegment<T> a, ArraySegment<T> b) { throw null; }
-
-        void Collections.Generic.ICollection<T>.Add(T item) { }
-
-        void Collections.Generic.ICollection<T>.Clear() { }
-
-        Boolean Collections.Generic.ICollection<T>.Contains(T item) { throw null; }
-
-        void Collections.Generic.ICollection<T>.CopyTo(T[] array, Int32 arrayIndex) { }
-
-        Boolean Collections.Generic.ICollection<T>.Remove(T item) { throw null; }
-
-        Collections.Generic.IEnumerator<T> Collections.Generic.IEnumerable<T>.GetEnumerator() { throw null; }
-
-        Int32 Collections.Generic.IList<T>.IndexOf(T item) { throw null; }
-
-        void Collections.Generic.IList<T>.Insert(Int32 index, T item) { }
-
-        void Collections.Generic.IList<T>.RemoveAt(Int32 index) { }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-    }
-
-    public partial class ArrayTypeMismatchException : Exception
-    {
-        public ArrayTypeMismatchException() { }
-
-        public ArrayTypeMismatchException(String message, Exception innerException) { }
-
-        public ArrayTypeMismatchException(String message) { }
-    }
-
-    public delegate void AsyncCallback(IAsyncResult ar);
-    [AttributeUsage(AttributeTargets.All, Inherited = true, AllowMultiple = false)]
-    public abstract partial class Attribute
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-    }
-
-    [Flags]
-    public enum AttributeTargets
-    {
-        Assembly = 1,
-        Module = 2,
-        Class = 4,
-        Struct = 8,
-        Enum = 16,
-        Constructor = 32,
-        Method = 64,
-        Property = 128,
-        Field = 256,
-        Event = 512,
-        Interface = 1024,
-        Parameter = 2048,
-        Delegate = 4096,
-        ReturnValue = 8192,
-        GenericParameter = 16384,
-        All = 32767
-    }
-
-    [AttributeUsage(AttributeTargets.Class, Inherited = true)]
-    public sealed partial class AttributeUsageAttribute : Attribute
-    {
-        public AttributeUsageAttribute(AttributeTargets validOn) { }
-
-        public Boolean AllowMultiple { get { throw null; } set { } }
-
-        public Boolean Inherited { get { throw null; } set { } }
-
-        public AttributeTargets ValidOn { get { throw null; } }
-    }
-
-    public partial class BadImageFormatException : Exception
-    {
-        public BadImageFormatException() { }
-
-        public BadImageFormatException(String message, Exception inner) { }
-
-        public BadImageFormatException(String message, String fileName, Exception inner) { }
-
-        public BadImageFormatException(String message, String fileName) { }
-
-        public BadImageFormatException(String message) { }
-
-        public String FileName { get { throw null; } }
-
-        public override String Message { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial struct Boolean : IComparable, IComparable<Boolean>, IConvertible, IEquatable<Boolean>
-    {
-        public static readonly String FalseString;
-        public static readonly String TrueString;
-        public Int32 CompareTo(Boolean value) { throw null; }
-
-        public Boolean Equals(Boolean obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean Parse(String value) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        String IConvertible.ToString(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public static Boolean TryParse(String value, out Boolean result) { throw null; }
-    }
-
-    public static partial class Buffer
-    {
-        public static void BlockCopy(Array src, Int32 srcOffset, Array dst, Int32 dstOffset, Int32 count) { }
-
-        public static Int32 ByteLength(Array array) { throw null; }
-
-        public static Byte GetByte(Array array, Int32 index) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe void MemoryCopy(void* source, void* destination, Int64 destinationSizeInBytes, Int64 sourceBytesToCopy) { }
-
-        [CLSCompliant(false)]
-        public static unsafe void MemoryCopy(void* source, void* destination, UInt64 destinationSizeInBytes, UInt64 sourceBytesToCopy) { }
-
-        public static void SetByte(Array array, Int32 index, Byte value) { }
-    }
-
-    public partial struct Byte : IComparable, IComparable<Byte>, IConvertible, IEquatable<Byte>, IFormattable
-    {
-        public const Byte MaxValue = 255;
-        public const Byte MinValue = 0;
-        public Int32 CompareTo(Byte value) { throw null; }
-
-        public Boolean Equals(Byte obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Byte Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Byte Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Byte Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Byte Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, out Byte result) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Byte result) { throw null; }
-    }
-
-    public partial struct Char : IComparable, IComparable<Char>, IConvertible, IEquatable<Char>
-    {
-        public const Char MaxValue = '\uffff';
-        public const Char MinValue = '\0';
-        public Int32 CompareTo(Char value) { throw null; }
-
-        public static String ConvertFromUtf32(Int32 utf32) { throw null; }
-
-        public static Int32 ConvertToUtf32(Char highSurrogate, Char lowSurrogate) { throw null; }
-
-        public static Int32 ConvertToUtf32(String s, Int32 index) { throw null; }
-
-        public Boolean Equals(Char obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Double GetNumericValue(Char c) { throw null; }
-
-        public static Double GetNumericValue(String s, Int32 index) { throw null; }
-
-        public static Boolean IsControl(Char c) { throw null; }
-
-        public static Boolean IsControl(String s, Int32 index) { throw null; }
-
-        public static Boolean IsDigit(Char c) { throw null; }
-
-        public static Boolean IsDigit(String s, Int32 index) { throw null; }
-
-        public static Boolean IsHighSurrogate(Char c) { throw null; }
-
-        public static Boolean IsHighSurrogate(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLetter(Char c) { throw null; }
-
-        public static Boolean IsLetter(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLetterOrDigit(Char c) { throw null; }
-
-        public static Boolean IsLetterOrDigit(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLower(Char c) { throw null; }
-
-        public static Boolean IsLower(String s, Int32 index) { throw null; }
-
-        public static Boolean IsLowSurrogate(Char c) { throw null; }
-
-        public static Boolean IsLowSurrogate(String s, Int32 index) { throw null; }
-
-        public static Boolean IsNumber(Char c) { throw null; }
-
-        public static Boolean IsNumber(String s, Int32 index) { throw null; }
-
-        public static Boolean IsPunctuation(Char c) { throw null; }
-
-        public static Boolean IsPunctuation(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSeparator(Char c) { throw null; }
-
-        public static Boolean IsSeparator(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSurrogate(Char c) { throw null; }
-
-        public static Boolean IsSurrogate(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSurrogatePair(Char highSurrogate, Char lowSurrogate) { throw null; }
-
-        public static Boolean IsSurrogatePair(String s, Int32 index) { throw null; }
-
-        public static Boolean IsSymbol(Char c) { throw null; }
-
-        public static Boolean IsSymbol(String s, Int32 index) { throw null; }
-
-        public static Boolean IsUpper(Char c) { throw null; }
-
-        public static Boolean IsUpper(String s, Int32 index) { throw null; }
-
-        public static Boolean IsWhiteSpace(Char c) { throw null; }
-
-        public static Boolean IsWhiteSpace(String s, Int32 index) { throw null; }
-
-        public static Char Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        String IConvertible.ToString(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public static Char ToLower(Char c) { throw null; }
-
-        public static Char ToLowerInvariant(Char c) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public static String ToString(Char c) { throw null; }
-
-        public static Char ToUpper(Char c) { throw null; }
-
-        public static Char ToUpperInvariant(Char c) { throw null; }
-
-        public static Boolean TryParse(String s, out Char result) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.All, Inherited = true, AllowMultiple = false)]
-    public sealed partial class CLSCompliantAttribute : Attribute
-    {
-        public CLSCompliantAttribute(Boolean isCompliant) { }
-
-        public Boolean IsCompliant { get { throw null; } }
-    }
-
-    public delegate Int32 Comparison<in T>(T x, T y);
-    public partial struct DateTime : IComparable, IComparable<DateTime>, IConvertible, IEquatable<DateTime>, IFormattable
-    {
-        public static readonly DateTime MaxValue;
-        public static readonly DateTime MinValue;
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, DateTimeKind kind) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, DateTimeKind kind) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second) { }
-
-        public DateTime(Int32 year, Int32 month, Int32 day) { }
-
-        public DateTime(Int64 ticks, DateTimeKind kind) { }
-
-        public DateTime(Int64 ticks) { }
-
-        public DateTime Date { get { throw null; } }
-
-        public Int32 Day { get { throw null; } }
-
-        public DayOfWeek DayOfWeek { get { throw null; } }
-
-        public Int32 DayOfYear { get { throw null; } }
-
-        public Int32 Hour { get { throw null; } }
-
-        public DateTimeKind Kind { get { throw null; } }
-
-        public Int32 Millisecond { get { throw null; } }
-
-        public Int32 Minute { get { throw null; } }
-
-        public Int32 Month { get { throw null; } }
-
-        public static DateTime Now { get { throw null; } }
-
-        public Int32 Second { get { throw null; } }
-
-        public Int64 Ticks { get { throw null; } }
-
-        public TimeSpan TimeOfDay { get { throw null; } }
-
-        public static DateTime Today { get { throw null; } }
-
-        public static DateTime UtcNow { get { throw null; } }
-
-        public Int32 Year { get { throw null; } }
-
-        public DateTime Add(TimeSpan value) { throw null; }
-
-        public DateTime AddDays(Double value) { throw null; }
-
-        public DateTime AddHours(Double value) { throw null; }
-
-        public DateTime AddMilliseconds(Double value) { throw null; }
-
-        public DateTime AddMinutes(Double value) { throw null; }
-
-        public DateTime AddMonths(Int32 months) { throw null; }
-
-        public DateTime AddSeconds(Double value) { throw null; }
-
-        public DateTime AddTicks(Int64 value) { throw null; }
-
-        public DateTime AddYears(Int32 value) { throw null; }
-
-        public static Int32 Compare(DateTime t1, DateTime t2) { throw null; }
-
-        public Int32 CompareTo(DateTime value) { throw null; }
-
-        public static Int32 DaysInMonth(Int32 year, Int32 month) { throw null; }
-
-        public static Boolean Equals(DateTime t1, DateTime t2) { throw null; }
-
-        public Boolean Equals(DateTime value) { throw null; }
-
-        public override Boolean Equals(Object value) { throw null; }
-
-        public static DateTime FromBinary(Int64 dateData) { throw null; }
-
-        public static DateTime FromFileTime(Int64 fileTime) { throw null; }
-
-        public static DateTime FromFileTimeUtc(Int64 fileTime) { throw null; }
-
-        public String[] GetDateTimeFormats() { throw null; }
-
-        public String[] GetDateTimeFormats(Char format, IFormatProvider provider) { throw null; }
-
-        public String[] GetDateTimeFormats(Char format) { throw null; }
-
-        public String[] GetDateTimeFormats(IFormatProvider provider) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public Boolean IsDaylightSavingTime() { throw null; }
-
-        public static Boolean IsLeapYear(Int32 year) { throw null; }
-
-        public static DateTime operator +(DateTime d, TimeSpan t) { throw null; }
-
-        public static Boolean operator ==(DateTime d1, DateTime d2) { throw null; }
-
-        public static Boolean operator >(DateTime t1, DateTime t2) { throw null; }
-
-        public static Boolean operator >=(DateTime t1, DateTime t2) { throw null; }
-
-        public static Boolean operator !=(DateTime d1, DateTime d2) { throw null; }
-
-        public static Boolean operator <(DateTime t1, DateTime t2) { throw null; }
-
-        public static Boolean operator <=(DateTime t1, DateTime t2) { throw null; }
-
-        public static TimeSpan operator -(DateTime d1, DateTime d2) { throw null; }
-
-        public static DateTime operator -(DateTime d, TimeSpan t) { throw null; }
-
-        public static DateTime Parse(String s, IFormatProvider provider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public static DateTime Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static DateTime Parse(String s) { throw null; }
-
-        public static DateTime ParseExact(String s, String format, IFormatProvider provider, Globalization.DateTimeStyles style) { throw null; }
-
-        public static DateTime ParseExact(String s, String format, IFormatProvider provider) { throw null; }
-
-        public static DateTime ParseExact(String s, String[] formats, IFormatProvider provider, Globalization.DateTimeStyles style) { throw null; }
-
-        public static DateTime SpecifyKind(DateTime value, DateTimeKind kind) { throw null; }
-
-        public TimeSpan Subtract(DateTime value) { throw null; }
-
-        public DateTime Subtract(TimeSpan value) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public Int64 ToBinary() { throw null; }
-
-        public Int64 ToFileTime() { throw null; }
-
-        public Int64 ToFileTimeUtc() { throw null; }
-
-        public DateTime ToLocalTime() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public DateTime ToUniversalTime() { throw null; }
-
-        public static Boolean TryParse(String s, out DateTime result) { throw null; }
-
-        public static Boolean TryParse(String s, IFormatProvider provider, Globalization.DateTimeStyles styles, out DateTime result) { throw null; }
-
-        public static Boolean TryParseExact(String s, String format, IFormatProvider provider, Globalization.DateTimeStyles style, out DateTime result) { throw null; }
-
-        public static Boolean TryParseExact(String s, String[] formats, IFormatProvider provider, Globalization.DateTimeStyles style, out DateTime result) { throw null; }
-    }
-
-    public enum DateTimeKind
-    {
-        Unspecified = 0,
-        Utc = 1,
-        Local = 2
-    }
-
-    public partial struct DateTimeOffset : IComparable, IComparable<DateTimeOffset>, IEquatable<DateTimeOffset>, IFormattable
-    {
-        public static readonly DateTimeOffset MaxValue;
-        public static readonly DateTimeOffset MinValue;
-        public DateTimeOffset(DateTime dateTime, TimeSpan offset) { }
-
-        public DateTimeOffset(DateTime dateTime) { }
-
-        public DateTimeOffset(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, Int32 millisecond, TimeSpan offset) { }
-
-        public DateTimeOffset(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 minute, Int32 second, TimeSpan offset) { }
-
-        public DateTimeOffset(Int64 ticks, TimeSpan offset) { }
-
-        public DateTime Date { get { throw null; } }
-
-        public DateTime DateTime { get { throw null; } }
-
-        public Int32 Day { get { throw null; } }
-
-        public DayOfWeek DayOfWeek { get { throw null; } }
-
-        public Int32 DayOfYear { get { throw null; } }
-
-        public Int32 Hour { get { throw null; } }
-
-        public DateTime LocalDateTime { get { throw null; } }
-
-        public Int32 Millisecond { get { throw null; } }
-
-        public Int32 Minute { get { throw null; } }
-
-        public Int32 Month { get { throw null; } }
-
-        public static DateTimeOffset Now { get { throw null; } }
-
-        public TimeSpan Offset { get { throw null; } }
-
-        public Int32 Second { get { throw null; } }
-
-        public Int64 Ticks { get { throw null; } }
-
-        public TimeSpan TimeOfDay { get { throw null; } }
-
-        public DateTime UtcDateTime { get { throw null; } }
-
-        public static DateTimeOffset UtcNow { get { throw null; } }
-
-        public Int64 UtcTicks { get { throw null; } }
-
-        public Int32 Year { get { throw null; } }
-
-        public DateTimeOffset Add(TimeSpan timeSpan) { throw null; }
-
-        public DateTimeOffset AddDays(Double days) { throw null; }
-
-        public DateTimeOffset AddHours(Double hours) { throw null; }
-
-        public DateTimeOffset AddMilliseconds(Double milliseconds) { throw null; }
-
-        public DateTimeOffset AddMinutes(Double minutes) { throw null; }
-
-        public DateTimeOffset AddMonths(Int32 months) { throw null; }
-
-        public DateTimeOffset AddSeconds(Double seconds) { throw null; }
-
-        public DateTimeOffset AddTicks(Int64 ticks) { throw null; }
-
-        public DateTimeOffset AddYears(Int32 years) { throw null; }
-
-        public static Int32 Compare(DateTimeOffset first, DateTimeOffset second) { throw null; }
-
-        public Int32 CompareTo(DateTimeOffset other) { throw null; }
-
-        public static Boolean Equals(DateTimeOffset first, DateTimeOffset second) { throw null; }
-
-        public Boolean Equals(DateTimeOffset other) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean EqualsExact(DateTimeOffset other) { throw null; }
-
-        public static DateTimeOffset FromFileTime(Int64 fileTime) { throw null; }
-
-        public static DateTimeOffset FromUnixTimeMilliseconds(Int64 milliseconds) { throw null; }
-
-        public static DateTimeOffset FromUnixTimeSeconds(Int64 seconds) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan) { throw null; }
-
-        public static Boolean operator ==(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator >(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator >=(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static implicit operator DateTimeOffset(DateTime dateTime) { throw null; }
-
-        public static Boolean operator !=(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator <(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static Boolean operator <=(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right) { throw null; }
-
-        public static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan) { throw null; }
-
-        public static DateTimeOffset Parse(String input, IFormatProvider formatProvider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public static DateTimeOffset Parse(String input, IFormatProvider formatProvider) { throw null; }
-
-        public static DateTimeOffset Parse(String input) { throw null; }
-
-        public static DateTimeOffset ParseExact(String input, String format, IFormatProvider formatProvider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public static DateTimeOffset ParseExact(String input, String format, IFormatProvider formatProvider) { throw null; }
-
-        public static DateTimeOffset ParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.DateTimeStyles styles) { throw null; }
-
-        public TimeSpan Subtract(DateTimeOffset value) { throw null; }
-
-        public DateTimeOffset Subtract(TimeSpan value) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public Int64 ToFileTime() { throw null; }
-
-        public DateTimeOffset ToLocalTime() { throw null; }
-
-        public DateTimeOffset ToOffset(TimeSpan offset) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider formatProvider) { throw null; }
-
-        public String ToString(String format, IFormatProvider formatProvider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public DateTimeOffset ToUniversalTime() { throw null; }
-
-        public Int64 ToUnixTimeMilliseconds() { throw null; }
-
-        public Int64 ToUnixTimeSeconds() { throw null; }
-
-        public static Boolean TryParse(String input, out DateTimeOffset result) { throw null; }
-
-        public static Boolean TryParse(String input, IFormatProvider formatProvider, Globalization.DateTimeStyles styles, out DateTimeOffset result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, IFormatProvider formatProvider, Globalization.DateTimeStyles styles, out DateTimeOffset result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.DateTimeStyles styles, out DateTimeOffset result) { throw null; }
-    }
-
-    public enum DayOfWeek
-    {
-        Sunday = 0,
-        Monday = 1,
-        Tuesday = 2,
-        Wednesday = 3,
-        Thursday = 4,
-        Friday = 5,
-        Saturday = 6
-    }
-
-    public partial struct Decimal : IComparable, IComparable<Decimal>, IConvertible, IEquatable<Decimal>, IFormattable
-    {
-        public const Decimal MaxValue = 79228162514264337593543950335M;
-        public const Decimal MinusOne = -1M;
-        public const Decimal MinValue = -79228162514264337593543950335M;
-        public const Decimal One = 1M;
-        public const Decimal Zero = 0M;
-        public Decimal(Double value) { }
-
-        public Decimal(Int32 lo, Int32 mid, Int32 hi, Boolean isNegative, Byte scale) { }
-
-        public Decimal(Int32 value) { }
-
-        public Decimal(Int32[] bits) { }
-
-        public Decimal(Int64 value) { }
-
-        public Decimal(Single value) { }
-
-        [CLSCompliant(false)]
-        public Decimal(UInt32 value) { }
-
-        [CLSCompliant(false)]
-        public Decimal(UInt64 value) { }
-
-        public static Decimal Add(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal Ceiling(Decimal d) { throw null; }
-
-        public static Int32 Compare(Decimal d1, Decimal d2) { throw null; }
-
-        public Int32 CompareTo(Decimal value) { throw null; }
-
-        public static Decimal Divide(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean Equals(Decimal d1, Decimal d2) { throw null; }
-
-        public Boolean Equals(Decimal value) { throw null; }
-
-        public override Boolean Equals(Object value) { throw null; }
-
-        public static Decimal Floor(Decimal d) { throw null; }
-
-        public static Int32[] GetBits(Decimal d) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Decimal Multiply(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal Negate(Decimal d) { throw null; }
-
-        public static Decimal operator +(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator --(Decimal d) { throw null; }
-
-        public static Decimal operator /(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator ==(Decimal d1, Decimal d2) { throw null; }
-
-        public static explicit operator Byte(Decimal value) { throw null; }
-
-        public static explicit operator Char(Decimal value) { throw null; }
-
-        public static explicit operator Double(Decimal value) { throw null; }
-
-        public static explicit operator Int16(Decimal value) { throw null; }
-
-        public static explicit operator Int32(Decimal value) { throw null; }
-
-        public static explicit operator Int64(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator SByte(Decimal value) { throw null; }
-
-        public static explicit operator Single(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator UInt16(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator UInt32(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator UInt64(Decimal value) { throw null; }
-
-        public static explicit operator Decimal(Double value) { throw null; }
-
-        public static explicit operator Decimal(Single value) { throw null; }
-
-        public static Boolean operator >(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator >=(Decimal d1, Decimal d2) { throw null; }
-
-        public static implicit operator Decimal(Byte value) { throw null; }
-
-        public static implicit operator Decimal(Char value) { throw null; }
-
-        public static implicit operator Decimal(Int16 value) { throw null; }
-
-        public static implicit operator Decimal(Int32 value) { throw null; }
-
-        public static implicit operator Decimal(Int64 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(SByte value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(UInt16 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(UInt32 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator Decimal(UInt64 value) { throw null; }
-
-        public static Decimal operator ++(Decimal d) { throw null; }
-
-        public static Boolean operator !=(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator <(Decimal d1, Decimal d2) { throw null; }
-
-        public static Boolean operator <=(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator %(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator *(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator -(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal operator -(Decimal d) { throw null; }
-
-        public static Decimal operator +(Decimal d) { throw null; }
-
-        public static Decimal Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Decimal Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Decimal Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Decimal Parse(String s) { throw null; }
-
-        public static Decimal Remainder(Decimal d1, Decimal d2) { throw null; }
-
-        public static Decimal Subtract(Decimal d1, Decimal d2) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public static Byte ToByte(Decimal value) { throw null; }
-
-        public static Double ToDouble(Decimal d) { throw null; }
-
-        public static Int16 ToInt16(Decimal value) { throw null; }
-
-        public static Int32 ToInt32(Decimal d) { throw null; }
-
-        public static Int64 ToInt64(Decimal d) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte ToSByte(Decimal value) { throw null; }
-
-        public static Single ToSingle(Decimal d) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 ToUInt16(Decimal value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 ToUInt32(Decimal d) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 ToUInt64(Decimal d) { throw null; }
-
-        public static Decimal Truncate(Decimal d) { throw null; }
-
-        public static Boolean TryParse(String s, out Decimal result) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Decimal result) { throw null; }
-    }
-
-    public abstract partial class Delegate
-    {
-        internal Delegate() { }
-
-        public Object Target { get { throw null; } }
-
-        public static Delegate Combine(Delegate a, Delegate b) { throw null; }
-
-        public static Delegate Combine(params Delegate[] delegates) { throw null; }
-
-        public Object DynamicInvoke(params Object[] args) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public virtual Delegate[] GetInvocationList() { throw null; }
-
-        public static Boolean operator ==(Delegate d1, Delegate d2) { throw null; }
-
-        public static Boolean operator !=(Delegate d1, Delegate d2) { throw null; }
-
-        public static Delegate Remove(Delegate source, Delegate value) { throw null; }
-
-        public static Delegate RemoveAll(Delegate source, Delegate value) { throw null; }
-    }
-
-    public partial class DivideByZeroException : ArithmeticException
-    {
-        public DivideByZeroException() { }
-
-        public DivideByZeroException(String message, Exception innerException) { }
-
-        public DivideByZeroException(String message) { }
-    }
-
-    public partial struct Double : IComparable, IComparable<Double>, IConvertible, IEquatable<Double>, IFormattable
-    {
-        public const Double Epsilon = 5E-324D;
-        public const Double MaxValue = 1.7976931348623157E+308D;
-        public const Double MinValue = -1.7976931348623157E+308D;
-        public const Double NaN = 0D / 0D;
-        public const Double NegativeInfinity = -1D / 0D;
-        public const Double PositiveInfinity = 1D / 0D;
-        public Int32 CompareTo(Double value) { throw null; }
-
-        public Boolean Equals(Double obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean IsInfinity(Double d) { throw null; }
-
-        public static Boolean IsNaN(Double d) { throw null; }
-
-        public static Boolean IsNegativeInfinity(Double d) { throw null; }
-
-        public static Boolean IsPositiveInfinity(Double d) { throw null; }
-
-        public static Boolean operator ==(Double left, Double right) { throw null; }
-
-        public static Boolean operator >(Double left, Double right) { throw null; }
-
-        public static Boolean operator >=(Double left, Double right) { throw null; }
-
-        public static Boolean operator !=(Double left, Double right) { throw null; }
-
-        public static Boolean operator <(Double left, Double right) { throw null; }
-
-        public static Boolean operator <=(Double left, Double right) { throw null; }
-
-        public static Double Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Double Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Double Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Double Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, out Double result) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Double result) { throw null; }
-    }
-
-    public abstract partial class Enum : ValueType, IComparable, IConvertible, IFormattable
-    {
-        public Int32 CompareTo(Object target) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public static String Format(Type enumType, Object value, String format) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static String GetName(Type enumType, Object value) { throw null; }
-
-        public static String[] GetNames(Type enumType) { throw null; }
-
-        public static Type GetUnderlyingType(Type enumType) { throw null; }
-
-        public static Array GetValues(Type enumType) { throw null; }
-
-        public Boolean HasFlag(Enum flag) { throw null; }
-
-        public static Boolean IsDefined(Type enumType, Object value) { throw null; }
-
-        public static Object Parse(Type enumType, String value, Boolean ignoreCase) { throw null; }
-
-        public static Object Parse(Type enumType, String value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        [Obsolete("The provider argument is not used. Please use ToString().")]
-        String IConvertible.ToString(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        [Obsolete("The provider argument is not used. Please use ToString(String).")]
-        String IFormattable.ToString(String format, IFormatProvider provider) { throw null; }
-
-        public static Object ToObject(Type enumType, Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse<TEnum>(String value, out TEnum result)
-            where TEnum : struct { throw null; }
-
-        public static Boolean TryParse<TEnum>(String value, Boolean ignoreCase, out TEnum result)
-            where TEnum : struct { throw null; }
-    }
-
-    public partial class EventArgs
-    {
-        public static readonly EventArgs Empty;
-    }
-
-    public delegate void EventHandler(Object sender, EventArgs e);
-    public delegate void EventHandler<TEventArgs>(Object sender, TEventArgs e);
-    public partial class Exception
-    {
-        public Exception() { }
-
-        public Exception(String message, Exception innerException) { }
-
-        public Exception(String message) { }
-
-        public virtual Collections.IDictionary Data { get { throw null; } }
-
-        public virtual String HelpLink { get { throw null; } set { } }
-
-        public Int32 HResult { get { throw null; } protected set { } }
-
-        public Exception InnerException { get { throw null; } }
-
-        public virtual String Message { get { throw null; } }
-
-        public virtual String Source { get { throw null; } set { } }
-
-        public virtual String StackTrace { get { throw null; } }
-
-        public virtual Exception GetBaseException() { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class FieldAccessException : MemberAccessException
-    {
-        public FieldAccessException() { }
-
-        public FieldAccessException(String message, Exception inner) { }
-
-        public FieldAccessException(String message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Enum, Inherited = false)]
-    public partial class FlagsAttribute : Attribute
-    {
-    }
-
-    public partial class FormatException : Exception
-    {
-        public FormatException() { }
-
-        public FormatException(String message, Exception innerException) { }
-
-        public FormatException(String message) { }
-    }
-
-    public abstract partial class FormattableString : IFormattable
-    {
-        public abstract Int32 ArgumentCount { get; }
-        public abstract String Format { get; }
-
-        public abstract Object GetArgument(Int32 index);
-        public abstract Object[] GetArguments();
-        public static String Invariant(FormattableString formattable) { throw null; }
-
-        String IFormattable.ToString(String ignored, IFormatProvider formatProvider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public abstract String ToString(IFormatProvider formatProvider);
-    }
-
-    public delegate TResult Func<out TResult>();
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, in T9, in T10, in T11, in T12, in T13, in T14, in T15, in T16, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
-    public delegate TResult Func<in T, out TResult>(T arg);
-    public delegate TResult Func<in T1, in T2, out TResult>(T1 arg1, T2 arg2);
-    public delegate TResult Func<in T1, in T2, in T3, out TResult>(T1 arg1, T2 arg2, T3 arg3);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
-    public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
-    public static partial class GC
-    {
-        public static Int32 MaxGeneration { get { throw null; } }
-
-        public static void AddMemoryPressure(Int64 bytesAllocated) { }
-
-        public static void Collect() { }
-
-        public static void Collect(Int32 generation, GCCollectionMode mode, Boolean blocking) { }
-
-        public static void Collect(Int32 generation, GCCollectionMode mode) { }
-
-        public static void Collect(Int32 generation) { }
-
-        public static Int32 CollectionCount(Int32 generation) { throw null; }
-
-        public static Int32 GetGeneration(Object obj) { throw null; }
-
-        public static Int64 GetTotalMemory(Boolean forceFullCollection) { throw null; }
-
-        public static void KeepAlive(Object obj) { }
-
-        public static void RemoveMemoryPressure(Int64 bytesAllocated) { }
-
-        public static void ReRegisterForFinalize(Object obj) { }
-
-        public static void SuppressFinalize(Object obj) { }
-
-        public static void WaitForPendingFinalizers() { }
-    }
-
-    public enum GCCollectionMode
-    {
-        Default = 0,
-        Forced = 1,
-        Optimized = 2
-    }
-
-    public partial struct Guid : IComparable, IComparable<Guid>, IEquatable<Guid>, IFormattable
-    {
-        public static readonly Guid Empty;
-        public Guid(Byte[] b) { }
-
-        public Guid(Int32 a, Int16 b, Int16 c, Byte d, Byte e, Byte f, Byte g, Byte h, Byte i, Byte j, Byte k) { }
-
-        public Guid(Int32 a, Int16 b, Int16 c, Byte[] d) { }
-
-        public Guid(String g) { }
-
-        [CLSCompliant(false)]
-        public Guid(UInt32 a, UInt16 b, UInt16 c, Byte d, Byte e, Byte f, Byte g, Byte h, Byte i, Byte j, Byte k) { }
-
-        public Int32 CompareTo(Guid value) { throw null; }
-
-        public Boolean Equals(Guid g) { throw null; }
-
-        public override Boolean Equals(Object o) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Guid NewGuid() { throw null; }
-
-        public static Boolean operator ==(Guid a, Guid b) { throw null; }
-
-        public static Boolean operator !=(Guid a, Guid b) { throw null; }
-
-        public static Guid Parse(String input) { throw null; }
-
-        public static Guid ParseExact(String input, String format) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        String IFormattable.ToString(String format, IFormatProvider provider) { throw null; }
-
-        public Byte[] ToByteArray() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String input, out Guid result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, out Guid result) { throw null; }
-    }
-
-    public partial interface IAsyncResult
-    {
-        Object AsyncState { get; }
-
-        Threading.WaitHandle AsyncWaitHandle { get; }
-
-        Boolean CompletedSynchronously { get; }
-
-        Boolean IsCompleted { get; }
-    }
-
-    public partial interface IComparable
-    {
-        Int32 CompareTo(Object obj);
-    }
-
-    public partial interface IComparable<in T>
-    {
-        Int32 CompareTo(T other);
-    }
-
-    [CLSCompliant(false)]
-    public partial interface IConvertible
-    {
-        TypeCode GetTypeCode();
-        Boolean ToBoolean(IFormatProvider provider);
-        Byte ToByte(IFormatProvider provider);
-        Char ToChar(IFormatProvider provider);
-        DateTime ToDateTime(IFormatProvider provider);
-        Decimal ToDecimal(IFormatProvider provider);
-        Double ToDouble(IFormatProvider provider);
-        Int16 ToInt16(IFormatProvider provider);
-        Int32 ToInt32(IFormatProvider provider);
-        Int64 ToInt64(IFormatProvider provider);
-        SByte ToSByte(IFormatProvider provider);
-        Single ToSingle(IFormatProvider provider);
-        String ToString(IFormatProvider provider);
-        Object ToType(Type conversionType, IFormatProvider provider);
-        UInt16 ToUInt16(IFormatProvider provider);
-        UInt32 ToUInt32(IFormatProvider provider);
-        UInt64 ToUInt64(IFormatProvider provider);
-    }
-
-    public partial interface ICustomFormatter
-    {
-        String Format(String format, Object arg, IFormatProvider formatProvider);
-    }
-
-    public partial interface IDisposable
-    {
-        void Dispose();
-    }
-
-    public partial interface IEquatable<T>
-    {
-        Boolean Equals(T other);
-    }
-
-    public partial interface IFormatProvider
-    {
-        Object GetFormat(Type formatType);
-    }
-
-    public partial interface IFormattable
-    {
-        String ToString(String format, IFormatProvider formatProvider);
-    }
-
-    public sealed partial class IndexOutOfRangeException : Exception
-    {
-        public IndexOutOfRangeException() { }
-
-        public IndexOutOfRangeException(String message, Exception innerException) { }
-
-        public IndexOutOfRangeException(String message) { }
-    }
-
-    public sealed partial class InsufficientExecutionStackException : Exception
-    {
-        public InsufficientExecutionStackException() { }
-
-        public InsufficientExecutionStackException(String message, Exception innerException) { }
-
-        public InsufficientExecutionStackException(String message) { }
-    }
-
-    public partial struct Int16 : IComparable, IComparable<Int16>, IConvertible, IEquatable<Int16>, IFormattable
-    {
-        public const Int16 MaxValue = 32767;
-        public const Int16 MinValue = -32768;
-        public Int32 CompareTo(Int16 value) { throw null; }
-
-        public Boolean Equals(Int16 obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Int16 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Int16 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Int16 Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Int16 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Int16 result) { throw null; }
-
-        public static Boolean TryParse(String s, out Int16 result) { throw null; }
-    }
-
-    public partial struct Int32 : IComparable, IComparable<Int32>, IConvertible, IEquatable<Int32>, IFormattable
-    {
-        public const Int32 MaxValue = 2147483647;
-        public const Int32 MinValue = -2147483648;
-        public Int32 CompareTo(Int32 value) { throw null; }
-
-        public Boolean Equals(Int32 obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Int32 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Int32 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Int32 Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Int32 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Int32 result) { throw null; }
-
-        public static Boolean TryParse(String s, out Int32 result) { throw null; }
-    }
-
-    public partial struct Int64 : IComparable, IComparable<Int64>, IConvertible, IEquatable<Int64>, IFormattable
-    {
-        public const Int64 MaxValue = 9223372036854775807L;
-        public const Int64 MinValue = -9223372036854775808;
-        public Int32 CompareTo(Int64 value) { throw null; }
-
-        public Boolean Equals(Int64 obj) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Int64 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Int64 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Int64 Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Int64 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Int64 result) { throw null; }
-
-        public static Boolean TryParse(String s, out Int64 result) { throw null; }
-    }
-
-    public partial struct IntPtr
-    {
-        public static readonly IntPtr Zero;
-        public IntPtr(Int32 value) { }
-
-        public IntPtr(Int64 value) { }
-
-        [CLSCompliant(false)]
-        public unsafe IntPtr(void* value) { }
-
-        public static Int32 Size { get { throw null; } }
-
-        public static IntPtr Add(IntPtr pointer, Int32 offset) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static IntPtr operator +(IntPtr pointer, Int32 offset) { throw null; }
-
-        public static Boolean operator ==(IntPtr value1, IntPtr value2) { throw null; }
-
-        public static explicit operator IntPtr(Int32 value) { throw null; }
-
-        public static explicit operator IntPtr(Int64 value) { throw null; }
-
-        public static explicit operator Int32(IntPtr value) { throw null; }
-
-        public static explicit operator Int64(IntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator void*(IntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator IntPtr(void* value) { throw null; }
-
-        public static Boolean operator !=(IntPtr value1, IntPtr value2) { throw null; }
-
-        public static IntPtr operator -(IntPtr pointer, Int32 offset) { throw null; }
-
-        public static IntPtr Subtract(IntPtr pointer, Int32 offset) { throw null; }
-
-        public Int32 ToInt32() { throw null; }
-
-        public Int64 ToInt64() { throw null; }
-
-        [CLSCompliant(false)]
-        public unsafe void* ToPointer() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format) { throw null; }
-    }
-
-    public partial class InvalidCastException : Exception
-    {
-        public InvalidCastException() { }
-
-        public InvalidCastException(String message, Exception innerException) { }
-
-        public InvalidCastException(String message, Int32 errorCode) { }
-
-        public InvalidCastException(String message) { }
-    }
-
-    public partial class InvalidOperationException : Exception
-    {
-        public InvalidOperationException() { }
-
-        public InvalidOperationException(String message, Exception innerException) { }
-
-        public InvalidOperationException(String message) { }
-    }
-
-    public sealed partial class InvalidProgramException : Exception
-    {
-        public InvalidProgramException() { }
-
-        public InvalidProgramException(String message, Exception inner) { }
-
-        public InvalidProgramException(String message) { }
-    }
-
-    public partial class InvalidTimeZoneException : Exception
-    {
-        public InvalidTimeZoneException() { }
-
-        public InvalidTimeZoneException(String message, Exception innerException) { }
-
-        public InvalidTimeZoneException(String message) { }
-    }
-
-    public partial interface IObservable<out T>
-    {
-        IDisposable Subscribe(IObserver<T> observer);
-    }
-
-    public partial interface IObserver<in T>
-    {
-        void OnCompleted();
-        void OnError(Exception error);
-        void OnNext(T value);
-    }
-
-    public partial interface IProgress<in T>
-    {
-        void Report(T value);
-    }
-
-    public partial class Lazy<T>
-    {
-        public Lazy() { }
-
-        public Lazy(Boolean isThreadSafe) { }
-
-        public Lazy(Func<T> valueFactory, Boolean isThreadSafe) { }
-
-        public Lazy(Func<T> valueFactory, Threading.LazyThreadSafetyMode mode) { }
-
-        public Lazy(Func<T> valueFactory) { }
-
-        public Lazy(Threading.LazyThreadSafetyMode mode) { }
-
-        public Boolean IsValueCreated { get { throw null; } }
-
-        public T Value { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Lazy<T, TMetadata> : Lazy<T>
-    {
-        public Lazy(TMetadata metadata, Boolean isThreadSafe) { }
-
-        public Lazy(TMetadata metadata, Threading.LazyThreadSafetyMode mode) { }
-
-        public Lazy(TMetadata metadata) { }
-
-        public Lazy(Func<T> valueFactory, TMetadata metadata, Boolean isThreadSafe) { }
-
-        public Lazy(Func<T> valueFactory, TMetadata metadata, Threading.LazyThreadSafetyMode mode) { }
-
-        public Lazy(Func<T> valueFactory, TMetadata metadata) { }
-
-        public TMetadata Metadata { get { throw null; } }
-    }
-
-    public partial class MemberAccessException : Exception
-    {
-        public MemberAccessException() { }
-
-        public MemberAccessException(String message, Exception inner) { }
-
-        public MemberAccessException(String message) { }
-    }
-
-    public partial class MethodAccessException : MemberAccessException
-    {
-        public MethodAccessException() { }
-
-        public MethodAccessException(String message, Exception inner) { }
-
-        public MethodAccessException(String message) { }
-    }
-
-    public partial class MissingFieldException : MissingMemberException
-    {
-        public MissingFieldException() { }
-
-        public MissingFieldException(String message, Exception inner) { }
-
-        public MissingFieldException(String message) { }
-
-        public override String Message { get { throw null; } }
-    }
-
-    public partial class MissingMemberException : MemberAccessException
-    {
-        public MissingMemberException() { }
-
-        public MissingMemberException(String message, Exception inner) { }
-
-        public MissingMemberException(String message) { }
-
-        public override String Message { get { throw null; } }
-    }
-
-    public partial class MissingMethodException : MissingMemberException
-    {
-        public MissingMethodException() { }
-
-        public MissingMethodException(String message, Exception inner) { }
-
-        public MissingMethodException(String message) { }
-
-        public override String Message { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class MTAThreadAttribute : Attribute
-    {
-    }
-
-    public abstract partial class MulticastDelegate : Delegate
-    {
-        internal MulticastDelegate() { }
-
-        public sealed override Boolean Equals(Object obj) { throw null; }
-
-        public sealed override Int32 GetHashCode() { throw null; }
-
-        public sealed override Delegate[] GetInvocationList() { throw null; }
-
-        public static Boolean operator ==(MulticastDelegate d1, MulticastDelegate d2) { throw null; }
-
-        public static Boolean operator !=(MulticastDelegate d1, MulticastDelegate d2) { throw null; }
-    }
-
-    public partial class NotImplementedException : Exception
-    {
-        public NotImplementedException() { }
-
-        public NotImplementedException(String message, Exception inner) { }
-
-        public NotImplementedException(String message) { }
-    }
-
-    public partial class NotSupportedException : Exception
-    {
-        public NotSupportedException() { }
-
-        public NotSupportedException(String message, Exception innerException) { }
-
-        public NotSupportedException(String message) { }
-    }
-
-    public static partial class Nullable
-    {
-        public static Int32 Compare<T>(T? n1, T? n2)
-            where T : struct { throw null; }
-
-        public static Boolean Equals<T>(T? n1, T? n2)
-            where T : struct { throw null; }
-
-        public static Type GetUnderlyingType(Type nullableType) { throw null; }
-    }
-
-    public partial struct Nullable<T>
-        where T : struct
-    {
-        public Nullable(T value) { }
-
-        public Boolean HasValue { get { throw null; } }
-
-        public T Value { get { throw null; } }
-
-        public override Boolean Equals(Object other) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public T GetValueOrDefault() { throw null; }
-
-        public T GetValueOrDefault(T defaultValue) { throw null; }
-
-        public static explicit operator T(T? value) { throw null; }
-
-        public static implicit operator T?(T value) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class NullReferenceException : Exception
-    {
-        public NullReferenceException() { }
-
-        public NullReferenceException(String message, Exception innerException) { }
-
-        public NullReferenceException(String message) { }
-    }
-
-    public partial class Object
-    {
-        public static Boolean Equals(Object objA, Object objB) { throw null; }
-
-        public virtual Boolean Equals(Object obj) { throw null; }
-
-        ~Object() {
-        }
-
-        public virtual Int32 GetHashCode() { throw null; }
-
-        public Type GetType() { throw null; }
-
-        protected Object MemberwiseClone() { throw null; }
-
-        public static Boolean ReferenceEquals(Object objA, Object objB) { throw null; }
-
-        public virtual String ToString() { throw null; }
-    }
-
-    public partial class ObjectDisposedException : InvalidOperationException
-    {
-        public ObjectDisposedException(String message, Exception innerException) { }
-
-        public ObjectDisposedException(String objectName, String message) { }
-
-        public ObjectDisposedException(String objectName) { }
-
-        public override String Message { get { throw null; } }
-
-        public String ObjectName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)]
-    public sealed partial class ObsoleteAttribute : Attribute
-    {
-        public ObsoleteAttribute() { }
-
-        public ObsoleteAttribute(String message, Boolean error) { }
-
-        public ObsoleteAttribute(String message) { }
-
-        public Boolean IsError { get { throw null; } }
-
-        public String Message { get { throw null; } }
-    }
-
-    public partial class OutOfMemoryException : Exception
-    {
-        public OutOfMemoryException() { }
-
-        public OutOfMemoryException(String message, Exception innerException) { }
-
-        public OutOfMemoryException(String message) { }
-    }
-
-    public partial class OverflowException : ArithmeticException
-    {
-        public OverflowException() { }
-
-        public OverflowException(String message, Exception innerException) { }
-
-        public OverflowException(String message) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = true, AllowMultiple = false)]
-    public sealed partial class ParamArrayAttribute : Attribute
-    {
-    }
-
-    public partial class PlatformNotSupportedException : NotSupportedException
-    {
-        public PlatformNotSupportedException() { }
-
-        public PlatformNotSupportedException(String message, Exception inner) { }
-
-        public PlatformNotSupportedException(String message) { }
-    }
-
-    public delegate Boolean Predicate<in T>(T obj);
-    public partial class RankException : Exception
-    {
-        public RankException() { }
-
-        public RankException(String message, Exception innerException) { }
-
-        public RankException(String message) { }
-    }
-
-    public partial struct RuntimeFieldHandle
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(RuntimeFieldHandle handle) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(RuntimeFieldHandle left, RuntimeFieldHandle right) { throw null; }
-
-        public static Boolean operator !=(RuntimeFieldHandle left, RuntimeFieldHandle right) { throw null; }
-    }
-
-    public partial struct RuntimeMethodHandle
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(RuntimeMethodHandle handle) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(RuntimeMethodHandle left, RuntimeMethodHandle right) { throw null; }
-
-        public static Boolean operator !=(RuntimeMethodHandle left, RuntimeMethodHandle right) { throw null; }
-    }
-
-    public partial struct RuntimeTypeHandle
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(RuntimeTypeHandle handle) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(Object left, RuntimeTypeHandle right) { throw null; }
-
-        public static Boolean operator ==(RuntimeTypeHandle left, Object right) { throw null; }
-
-        public static Boolean operator !=(Object left, RuntimeTypeHandle right) { throw null; }
-
-        public static Boolean operator !=(RuntimeTypeHandle left, Object right) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct SByte : IComparable, IComparable<SByte>, IConvertible, IEquatable<SByte>, IFormattable
-    {
-        public const SByte MaxValue = 127;
-        public const SByte MinValue = -128;
-        public Int32 CompareTo(SByte value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(SByte obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static SByte Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out SByte result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out SByte result) { throw null; }
-    }
-
-    public partial struct Single : IComparable, IComparable<Single>, IConvertible, IEquatable<Single>, IFormattable
-    {
-        public const Single Epsilon = 1E-45F;
-        public const Single MaxValue = 3.4028235E+38F;
-        public const Single MinValue = -3.4028235E+38F;
-        public const Single NaN = 0F / 0F;
-        public const Single NegativeInfinity = -1F / 0F;
-        public const Single PositiveInfinity = 1F / 0F;
-        public Int32 CompareTo(Single value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(Single obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean IsInfinity(Single f) { throw null; }
-
-        public static Boolean IsNaN(Single f) { throw null; }
-
-        public static Boolean IsNegativeInfinity(Single f) { throw null; }
-
-        public static Boolean IsPositiveInfinity(Single f) { throw null; }
-
-        public static Boolean operator ==(Single left, Single right) { throw null; }
-
-        public static Boolean operator >(Single left, Single right) { throw null; }
-
-        public static Boolean operator >=(Single left, Single right) { throw null; }
-
-        public static Boolean operator !=(Single left, Single right) { throw null; }
-
-        public static Boolean operator <(Single left, Single right) { throw null; }
-
-        public static Boolean operator <=(Single left, Single right) { throw null; }
-
-        public static Single Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        public static Single Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        public static Single Parse(String s, IFormatProvider provider) { throw null; }
-
-        public static Single Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out Single result) { throw null; }
-
-        public static Boolean TryParse(String s, out Single result) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Method)]
-    public sealed partial class STAThreadAttribute : Attribute
-    {
-    }
-
-    public sealed partial class String : Collections.Generic.IEnumerable<Char>, Collections.IEnumerable, IComparable, IComparable<String>, IConvertible, IEquatable<String>
-    {
-        public static readonly String Empty;
-        public String(Char c, Int32 count) { }
-
-        public String(Char[] value, Int32 startIndex, Int32 length) { }
-
-        public String(Char[] value) { }
-
-        [CLSCompliant(false)]
-        public unsafe String(Char* value, Int32 startIndex, Int32 length) { }
-
-        [CLSCompliant(false)]
-        public unsafe String(Char* value) { }
-
-        public Char this[Int32 index] { get { throw null; } }
-
-        public Int32 Length { get { throw null; } }
-
-        public static Int32 Compare(String strA, Int32 indexA, String strB, Int32 indexB, Int32 length, StringComparison comparisonType) { throw null; }
-
-        public static Int32 Compare(String strA, Int32 indexA, String strB, Int32 indexB, Int32 length) { throw null; }
-
-        public static Int32 Compare(String strA, String strB, Boolean ignoreCase) { throw null; }
-
-        public static Int32 Compare(String strA, String strB, StringComparison comparisonType) { throw null; }
-
-        public static Int32 Compare(String strA, String strB) { throw null; }
-
-        public static Int32 CompareOrdinal(String strA, Int32 indexA, String strB, Int32 indexB, Int32 length) { throw null; }
-
-        public static Int32 CompareOrdinal(String strA, String strB) { throw null; }
-
-        public Int32 CompareTo(String strB) { throw null; }
-
-        public static String Concat(Collections.Generic.IEnumerable<String> values) { throw null; }
-
-        public static String Concat(Object arg0, Object arg1, Object arg2) { throw null; }
-
-        public static String Concat(Object arg0, Object arg1) { throw null; }
-
-        public static String Concat(Object arg0) { throw null; }
-
-        public static String Concat(params Object[] args) { throw null; }
-
-        public static String Concat(String str0, String str1, String str2, String str3) { throw null; }
-
-        public static String Concat(String str0, String str1, String str2) { throw null; }
-
-        public static String Concat(String str0, String str1) { throw null; }
-
-        public static String Concat(params String[] values) { throw null; }
-
-        public static String Concat<T>(Collections.Generic.IEnumerable<T> values) { throw null; }
-
-        public Boolean Contains(String value) { throw null; }
-
-        public void CopyTo(Int32 sourceIndex, Char[] destination, Int32 destinationIndex, Int32 count) { }
-
-        public Boolean EndsWith(String value, StringComparison comparisonType) { throw null; }
-
-        public Boolean EndsWith(String value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public static Boolean Equals(String a, String b, StringComparison comparisonType) { throw null; }
-
-        public static Boolean Equals(String a, String b) { throw null; }
-
-        public Boolean Equals(String value, StringComparison comparisonType) { throw null; }
-
-        public Boolean Equals(String value) { throw null; }
-
-        public static String Format(IFormatProvider provider, String format, Object arg0, Object arg1, Object arg2) { throw null; }
-
-        public static String Format(IFormatProvider provider, String format, Object arg0, Object arg1) { throw null; }
-
-        public static String Format(IFormatProvider provider, String format, Object arg0) { throw null; }
-
-        public static String Format(IFormatProvider provider, String format, params Object[] args) { throw null; }
-
-        public static String Format(String format, Object arg0, Object arg1, Object arg2) { throw null; }
-
-        public static String Format(String format, Object arg0, Object arg1) { throw null; }
-
-        public static String Format(String format, Object arg0) { throw null; }
-
-        public static String Format(String format, params Object[] args) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public Int32 IndexOf(Char value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 IndexOf(Char value, Int32 startIndex) { throw null; }
-
-        public Int32 IndexOf(Char value) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex, Int32 count, StringComparison comparisonType) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex, StringComparison comparisonType) { throw null; }
-
-        public Int32 IndexOf(String value, Int32 startIndex) { throw null; }
-
-        public Int32 IndexOf(String value, StringComparison comparisonType) { throw null; }
-
-        public Int32 IndexOf(String value) { throw null; }
-
-        public Int32 IndexOfAny(Char[] anyOf, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 IndexOfAny(Char[] anyOf, Int32 startIndex) { throw null; }
-
-        public Int32 IndexOfAny(Char[] anyOf) { throw null; }
-
-        public String Insert(Int32 startIndex, String value) { throw null; }
-
-        public static Boolean IsNullOrEmpty(String value) { throw null; }
-
-        public static Boolean IsNullOrWhiteSpace(String value) { throw null; }
-
-        public static String Join(String separator, Collections.Generic.IEnumerable<String> values) { throw null; }
-
-        public static String Join(String separator, params Object[] values) { throw null; }
-
-        public static String Join(String separator, String[] value, Int32 startIndex, Int32 count) { throw null; }
-
-        public static String Join(String separator, params String[] value) { throw null; }
-
-        public static String Join<T>(String separator, Collections.Generic.IEnumerable<T> values) { throw null; }
-
-        public Int32 LastIndexOf(Char value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 LastIndexOf(Char value, Int32 startIndex) { throw null; }
-
-        public Int32 LastIndexOf(Char value) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex, Int32 count, StringComparison comparisonType) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex, StringComparison comparisonType) { throw null; }
-
-        public Int32 LastIndexOf(String value, Int32 startIndex) { throw null; }
-
-        public Int32 LastIndexOf(String value, StringComparison comparisonType) { throw null; }
-
-        public Int32 LastIndexOf(String value) { throw null; }
-
-        public Int32 LastIndexOfAny(Char[] anyOf, Int32 startIndex, Int32 count) { throw null; }
-
-        public Int32 LastIndexOfAny(Char[] anyOf, Int32 startIndex) { throw null; }
-
-        public Int32 LastIndexOfAny(Char[] anyOf) { throw null; }
-
-        public static Boolean operator ==(String a, String b) { throw null; }
-
-        public static Boolean operator !=(String a, String b) { throw null; }
-
-        public String PadLeft(Int32 totalWidth, Char paddingChar) { throw null; }
-
-        public String PadLeft(Int32 totalWidth) { throw null; }
-
-        public String PadRight(Int32 totalWidth, Char paddingChar) { throw null; }
-
-        public String PadRight(Int32 totalWidth) { throw null; }
-
-        public String Remove(Int32 startIndex, Int32 count) { throw null; }
-
-        public String Remove(Int32 startIndex) { throw null; }
-
-        public String Replace(Char oldChar, Char newChar) { throw null; }
-
-        public String Replace(String oldValue, String newValue) { throw null; }
-
-        public String[] Split(Char[] separator, Int32 count, StringSplitOptions options) { throw null; }
-
-        public String[] Split(Char[] separator, Int32 count) { throw null; }
-
-        public String[] Split(Char[] separator, StringSplitOptions options) { throw null; }
-
-        public String[] Split(params Char[] separator) { throw null; }
-
-        public String[] Split(String[] separator, Int32 count, StringSplitOptions options) { throw null; }
-
-        public String[] Split(String[] separator, StringSplitOptions options) { throw null; }
-
-        public Boolean StartsWith(String value, StringComparison comparisonType) { throw null; }
-
-        public Boolean StartsWith(String value) { throw null; }
-
-        public String Substring(Int32 startIndex, Int32 length) { throw null; }
-
-        public String Substring(Int32 startIndex) { throw null; }
-
-        Collections.Generic.IEnumerator<Char> Collections.Generic.IEnumerable<Char>.GetEnumerator() { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        String IConvertible.ToString(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public Char[] ToCharArray() { throw null; }
-
-        public Char[] ToCharArray(Int32 startIndex, Int32 length) { throw null; }
-
-        public String ToLower() { throw null; }
-
-        public String ToLowerInvariant() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToUpper() { throw null; }
-
-        public String ToUpperInvariant() { throw null; }
-
-        public String Trim() { throw null; }
-
-        public String Trim(params Char[] trimChars) { throw null; }
-
-        public String TrimEnd(params Char[] trimChars) { throw null; }
-
-        public String TrimStart(params Char[] trimChars) { throw null; }
-    }
-
-    public enum StringComparison
-    {
-        CurrentCulture = 0,
-        CurrentCultureIgnoreCase = 1,
-        Ordinal = 4,
-        OrdinalIgnoreCase = 5
-    }
-
-    [Flags]
-    public enum StringSplitOptions
-    {
-        None = 0,
-        RemoveEmptyEntries = 1
-    }
-
-    [AttributeUsage(AttributeTargets.Field, Inherited = false)]
-    public partial class ThreadStaticAttribute : Attribute
-    {
-    }
-
-    public partial class TimeoutException : Exception
-    {
-        public TimeoutException() { }
-
-        public TimeoutException(String message, Exception innerException) { }
-
-        public TimeoutException(String message) { }
-    }
-
-    public partial struct TimeSpan : IComparable, IComparable<TimeSpan>, IEquatable<TimeSpan>, IFormattable
-    {
-        public static readonly TimeSpan MaxValue;
-        public static readonly TimeSpan MinValue;
-        public const Int64 TicksPerDay = 864000000000L;
-        public const Int64 TicksPerHour = 36000000000L;
-        public const Int64 TicksPerMillisecond = 10000L;
-        public const Int64 TicksPerMinute = 600000000L;
-        public const Int64 TicksPerSecond = 10000000L;
-        public static readonly TimeSpan Zero;
-        public TimeSpan(Int32 days, Int32 hours, Int32 minutes, Int32 seconds, Int32 milliseconds) { }
-
-        public TimeSpan(Int32 days, Int32 hours, Int32 minutes, Int32 seconds) { }
-
-        public TimeSpan(Int32 hours, Int32 minutes, Int32 seconds) { }
-
-        public TimeSpan(Int64 ticks) { }
-
-        public Int32 Days { get { throw null; } }
-
-        public Int32 Hours { get { throw null; } }
-
-        public Int32 Milliseconds { get { throw null; } }
-
-        public Int32 Minutes { get { throw null; } }
-
-        public Int32 Seconds { get { throw null; } }
-
-        public Int64 Ticks { get { throw null; } }
-
-        public Double TotalDays { get { throw null; } }
-
-        public Double TotalHours { get { throw null; } }
-
-        public Double TotalMilliseconds { get { throw null; } }
-
-        public Double TotalMinutes { get { throw null; } }
-
-        public Double TotalSeconds { get { throw null; } }
-
-        public TimeSpan Add(TimeSpan ts) { throw null; }
-
-        public static Int32 Compare(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public Int32 CompareTo(TimeSpan value) { throw null; }
-
-        public TimeSpan Duration() { throw null; }
-
-        public override Boolean Equals(Object value) { throw null; }
-
-        public static Boolean Equals(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public Boolean Equals(TimeSpan obj) { throw null; }
-
-        public static TimeSpan FromDays(Double value) { throw null; }
-
-        public static TimeSpan FromHours(Double value) { throw null; }
-
-        public static TimeSpan FromMilliseconds(Double value) { throw null; }
-
-        public static TimeSpan FromMinutes(Double value) { throw null; }
-
-        public static TimeSpan FromSeconds(Double value) { throw null; }
-
-        public static TimeSpan FromTicks(Int64 value) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public TimeSpan Negate() { throw null; }
-
-        public static TimeSpan operator +(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator ==(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator >(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator >=(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator !=(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator <(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static Boolean operator <=(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static TimeSpan operator -(TimeSpan t1, TimeSpan t2) { throw null; }
-
-        public static TimeSpan operator -(TimeSpan t) { throw null; }
-
-        public static TimeSpan operator +(TimeSpan t) { throw null; }
-
-        public static TimeSpan Parse(String input, IFormatProvider formatProvider) { throw null; }
-
-        public static TimeSpan Parse(String s) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String format, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String format, IFormatProvider formatProvider) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles) { throw null; }
-
-        public static TimeSpan ParseExact(String input, String[] formats, IFormatProvider formatProvider) { throw null; }
-
-        public TimeSpan Subtract(TimeSpan ts) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(String format, IFormatProvider formatProvider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        public static Boolean TryParse(String input, IFormatProvider formatProvider, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParse(String s, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String format, IFormatProvider formatProvider, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String[] formats, IFormatProvider formatProvider, Globalization.TimeSpanStyles styles, out TimeSpan result) { throw null; }
-
-        public static Boolean TryParseExact(String input, String[] formats, IFormatProvider formatProvider, out TimeSpan result) { throw null; }
-    }
-
-    public sealed partial class TimeZoneInfo : IEquatable<TimeZoneInfo>
-    {
-        internal TimeZoneInfo() { }
-
-        public TimeSpan BaseUtcOffset { get { throw null; } }
-
-        public String DaylightName { get { throw null; } }
-
-        public String DisplayName { get { throw null; } }
-
-        public String Id { get { throw null; } }
-
-        public static TimeZoneInfo Local { get { throw null; } }
-
-        public String StandardName { get { throw null; } }
-
-        public Boolean SupportsDaylightSavingTime { get { throw null; } }
-
-        public static TimeZoneInfo Utc { get { throw null; } }
-
-        public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone) { throw null; }
-
-        public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo destinationTimeZone) { throw null; }
-
-        public static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone) { throw null; }
-
-        public Boolean Equals(TimeZoneInfo other) { throw null; }
-
-        public static TimeZoneInfo FindSystemTimeZoneById(String id) { throw null; }
-
-        public TimeSpan[] GetAmbiguousTimeOffsets(DateTime dateTime) { throw null; }
-
-        public TimeSpan[] GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Collections.ObjectModel.ReadOnlyCollection<TimeZoneInfo> GetSystemTimeZones() { throw null; }
-
-        public TimeSpan GetUtcOffset(DateTime dateTime) { throw null; }
-
-        public TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public Boolean IsAmbiguousTime(DateTime dateTime) { throw null; }
-
-        public Boolean IsAmbiguousTime(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public Boolean IsDaylightSavingTime(DateTime dateTime) { throw null; }
-
-        public Boolean IsDaylightSavingTime(DateTimeOffset dateTimeOffset) { throw null; }
-
-        public Boolean IsInvalidTime(DateTime dateTime) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public static partial class Tuple
-    {
-        public static Tuple<T1> Create<T1>(T1 item1) { throw null; }
-
-        public static Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2) { throw null; }
-
-        public static Tuple<T1, T2, T3> Create<T1, T2, T3>(T1 item1, T2 item2, T3 item3) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4> Create<T1, T2, T3, T4>(T1 item1, T2 item2, T3 item3, T4 item4) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5> Create<T1, T2, T3, T4, T5>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5, T6> Create<T1, T2, T3, T4, T5, T6>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5, T6, T7> Create<T1, T2, T3, T4, T5, T6, T7>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { throw null; }
-
-        public static Tuple<T1, T2, T3, T4, T5, T6, T7, Tuple<T8>> Create<T1, T2, T3, T4, T5, T6, T7, T8>(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8) { throw null; }
-    }
-
-    public partial class Tuple<T1> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5, T6> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public T6 Item6 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5, T6, T7> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public T6 Item6 { get { throw null; } }
-
-        public T7 Item7 { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> : Collections.IStructuralComparable, Collections.IStructuralEquatable, IComparable
-    {
-        public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest) { }
-
-        public T1 Item1 { get { throw null; } }
-
-        public T2 Item2 { get { throw null; } }
-
-        public T3 Item3 { get { throw null; } }
-
-        public T4 Item4 { get { throw null; } }
-
-        public T5 Item5 { get { throw null; } }
-
-        public T6 Item6 { get { throw null; } }
-
-        public T7 Item7 { get { throw null; } }
-
-        public TRest Rest { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        Int32 Collections.IStructuralComparable.CompareTo(Object other, Collections.IComparer comparer) { throw null; }
-
-        Boolean Collections.IStructuralEquatable.Equals(Object other, Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 Collections.IStructuralEquatable.GetHashCode(Collections.IEqualityComparer comparer) { throw null; }
-
-        Int32 IComparable.CompareTo(Object obj) { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public abstract partial class Type
-    {
-        internal Type() { }
-
-        public static readonly Char Delimiter;
-        public static readonly Type[] EmptyTypes;
-        public static readonly Object Missing;
-        public abstract String AssemblyQualifiedName { get; }
-        public abstract Type DeclaringType { get; }
-        public abstract String FullName { get; }
-        public abstract Int32 GenericParameterPosition { get; }
-        public abstract Type[] GenericTypeArguments { get; }
-
-        public Boolean HasElementType { get { throw null; } }
-
-        public virtual Boolean IsArray { get { throw null; } }
-
-        public virtual Boolean IsByRef { get { throw null; } }
-
-        public abstract Boolean IsConstructedGenericType { get; }
-        public abstract Boolean IsGenericParameter { get; }
-
-        public Boolean IsNested { get { throw null; } }
-
-        public virtual Boolean IsPointer { get { throw null; } }
-
-        public abstract String Name { get; }
-        public abstract String Namespace { get; }
-
-        public virtual RuntimeTypeHandle TypeHandle { get { throw null; } }
-
-        public override Boolean Equals(Object o) { throw null; }
-
-        public Boolean Equals(Type o) { throw null; }
-
-        public abstract Int32 GetArrayRank();
-        public abstract Type GetElementType();
-        public abstract Type GetGenericTypeDefinition();
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Type GetType(String typeName, Boolean throwOnError, Boolean ignoreCase) { throw null; }
-
-        public static Type GetType(String typeName, Boolean throwOnError) { throw null; }
-
-        public static Type GetType(String typeName) { throw null; }
-
-        public static TypeCode GetTypeCode(Type type) { throw null; }
-
-        public static Type GetTypeFromHandle(RuntimeTypeHandle handle) { throw null; }
-
-        public abstract Type MakeArrayType();
-        public abstract Type MakeArrayType(Int32 rank);
-        public abstract Type MakeByRefType();
-        public abstract Type MakeGenericType(params Type[] typeArguments);
-        public abstract Type MakePointerType();
-        public override String ToString() { throw null; }
-    }
-
-    public partial class TypeAccessException : TypeLoadException
-    {
-        public TypeAccessException() { }
-
-        public TypeAccessException(String message, Exception inner) { }
-
-        public TypeAccessException(String message) { }
-    }
-
-    public enum TypeCode
-    {
-        Empty = 0,
-        Object = 1,
-        Boolean = 3,
-        Char = 4,
-        SByte = 5,
-        Byte = 6,
-        Int16 = 7,
-        UInt16 = 8,
-        Int32 = 9,
-        UInt32 = 10,
-        Int64 = 11,
-        UInt64 = 12,
-        Single = 13,
-        Double = 14,
-        Decimal = 15,
-        DateTime = 16,
-        String = 18
-    }
-
-    public sealed partial class TypeInitializationException : Exception
-    {
-        public TypeInitializationException(String fullTypeName, Exception innerException) { }
-
-        public String TypeName { get { throw null; } }
-    }
-
-    public partial class TypeLoadException : Exception
-    {
-        public TypeLoadException() { }
-
-        public TypeLoadException(String message, Exception inner) { }
-
-        public TypeLoadException(String message) { }
-
-        public override String Message { get { throw null; } }
-
-        public String TypeName { get { throw null; } }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UInt16 : IComparable, IComparable<UInt16>, IConvertible, IEquatable<UInt16>, IFormattable
-    {
-        public const UInt16 MaxValue = 65535;
-        public const UInt16 MinValue = 0;
-        public Int32 CompareTo(UInt16 value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(UInt16 obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt16 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out UInt16 result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out UInt16 result) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UInt32 : IComparable, IComparable<UInt32>, IConvertible, IEquatable<UInt32>, IFormattable
-    {
-        public const UInt32 MaxValue = 4294967295U;
-        public const UInt32 MinValue = 0U;
-        public Int32 CompareTo(UInt32 value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(UInt32 obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt32 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out UInt32 result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out UInt32 result) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UInt64 : IComparable, IComparable<UInt64>, IConvertible, IEquatable<UInt64>, IFormattable
-    {
-        public const UInt64 MaxValue = 18446744073709551615UL;
-        public const UInt64 MinValue = 0UL;
-        public Int32 CompareTo(UInt64 value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(UInt64 obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s, Globalization.NumberStyles style, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s, Globalization.NumberStyles style) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s, IFormatProvider provider) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UInt64 Parse(String s) { throw null; }
-
-        Int32 IComparable.CompareTo(Object value) { throw null; }
-
-        TypeCode IConvertible.GetTypeCode() { throw null; }
-
-        Boolean IConvertible.ToBoolean(IFormatProvider provider) { throw null; }
-
-        Byte IConvertible.ToByte(IFormatProvider provider) { throw null; }
-
-        Char IConvertible.ToChar(IFormatProvider provider) { throw null; }
-
-        DateTime IConvertible.ToDateTime(IFormatProvider provider) { throw null; }
-
-        Decimal IConvertible.ToDecimal(IFormatProvider provider) { throw null; }
-
-        Double IConvertible.ToDouble(IFormatProvider provider) { throw null; }
-
-        Int16 IConvertible.ToInt16(IFormatProvider provider) { throw null; }
-
-        Int32 IConvertible.ToInt32(IFormatProvider provider) { throw null; }
-
-        Int64 IConvertible.ToInt64(IFormatProvider provider) { throw null; }
-
-        SByte IConvertible.ToSByte(IFormatProvider provider) { throw null; }
-
-        Single IConvertible.ToSingle(IFormatProvider provider) { throw null; }
-
-        Object IConvertible.ToType(Type type, IFormatProvider provider) { throw null; }
-
-        UInt16 IConvertible.ToUInt16(IFormatProvider provider) { throw null; }
-
-        UInt32 IConvertible.ToUInt32(IFormatProvider provider) { throw null; }
-
-        UInt64 IConvertible.ToUInt64(IFormatProvider provider) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(IFormatProvider provider) { throw null; }
-
-        public String ToString(String format, IFormatProvider provider) { throw null; }
-
-        public String ToString(String format) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, Globalization.NumberStyles style, IFormatProvider provider, out UInt64 result) { throw null; }
-
-        [CLSCompliant(false)]
-        public static Boolean TryParse(String s, out UInt64 result) { throw null; }
-    }
-
-    [CLSCompliant(false)]
-    public partial struct UIntPtr
-    {
-        public static readonly UIntPtr Zero;
-        public UIntPtr(UInt32 value) { }
-
-        public UIntPtr(UInt64 value) { }
-
-        [CLSCompliant(false)]
-        public unsafe UIntPtr(void* value) { }
-
-        public static Int32 Size { get { throw null; } }
-
-        public static UIntPtr Add(UIntPtr pointer, Int32 offset) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static UIntPtr operator +(UIntPtr pointer, Int32 offset) { throw null; }
-
-        public static Boolean operator ==(UIntPtr value1, UIntPtr value2) { throw null; }
-
-        public static explicit operator UIntPtr(UInt32 value) { throw null; }
-
-        public static explicit operator UIntPtr(UInt64 value) { throw null; }
-
-        public static explicit operator UInt32(UIntPtr value) { throw null; }
-
-        public static explicit operator UInt64(UIntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator void*(UIntPtr value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static unsafe explicit operator UIntPtr(void* value) { throw null; }
-
-        public static Boolean operator !=(UIntPtr value1, UIntPtr value2) { throw null; }
-
-        public static UIntPtr operator -(UIntPtr pointer, Int32 offset) { throw null; }
-
-        public static UIntPtr Subtract(UIntPtr pointer, Int32 offset) { throw null; }
-
-        [CLSCompliant(false)]
-        public unsafe void* ToPointer() { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public UInt32 ToUInt32() { throw null; }
-
-        public UInt64 ToUInt64() { throw null; }
-    }
-
-    public partial class UnauthorizedAccessException : Exception
-    {
-        public UnauthorizedAccessException() { }
-
-        public UnauthorizedAccessException(String message, Exception inner) { }
-
-        public UnauthorizedAccessException(String message) { }
-    }
-
-    public partial class Uri
-    {
-        public Uri(String uriString, UriKind uriKind) { }
-
-        public Uri(String uriString) { }
-
-        public Uri(Uri baseUri, String relativeUri) { }
-
-        public Uri(Uri baseUri, Uri relativeUri) { }
-
-        public String AbsolutePath { get { throw null; } }
-
-        public String AbsoluteUri { get { throw null; } }
-
-        public String Authority { get { throw null; } }
-
-        public String DnsSafeHost { get { throw null; } }
-
-        public String Fragment { get { throw null; } }
-
-        public String Host { get { throw null; } }
-
-        public UriHostNameType HostNameType { get { throw null; } }
-
-        public String IdnHost { get { throw null; } }
-
-        public Boolean IsAbsoluteUri { get { throw null; } }
-
-        public Boolean IsDefaultPort { get { throw null; } }
-
-        public Boolean IsFile { get { throw null; } }
-
-        public Boolean IsLoopback { get { throw null; } }
-
-        public Boolean IsUnc { get { throw null; } }
-
-        public String LocalPath { get { throw null; } }
-
-        public String OriginalString { get { throw null; } }
-
-        public String PathAndQuery { get { throw null; } }
-
-        public Int32 Port { get { throw null; } }
-
-        public String Query { get { throw null; } }
-
-        public String Scheme { get { throw null; } }
-
-        public String[] Segments { get { throw null; } }
-
-        public Boolean UserEscaped { get { throw null; } }
-
-        public String UserInfo { get { throw null; } }
-
-        public static UriHostNameType CheckHostName(String name) { throw null; }
-
-        public static Boolean CheckSchemeName(String schemeName) { throw null; }
-
-        public static Int32 Compare(Uri uri1, Uri uri2, UriComponents partsToCompare, UriFormat compareFormat, StringComparison comparisonType) { throw null; }
-
-        public override Boolean Equals(Object comparand) { throw null; }
-
-        public static String EscapeDataString(String stringToEscape) { throw null; }
-
-        public static String EscapeUriString(String stringToEscape) { throw null; }
-
-        public String GetComponents(UriComponents components, UriFormat format) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public Boolean IsBaseOf(Uri uri) { throw null; }
-
-        public Boolean IsWellFormedOriginalString() { throw null; }
-
-        public static Boolean IsWellFormedUriString(String uriString, UriKind uriKind) { throw null; }
-
-        public Uri MakeRelativeUri(Uri uri) { throw null; }
-
-        public static Boolean operator ==(Uri uri1, Uri uri2) { throw null; }
-
-        public static Boolean operator !=(Uri uri1, Uri uri2) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public static Boolean TryCreate(String uriString, UriKind uriKind, out Uri result) { throw null; }
-
-        public static Boolean TryCreate(Uri baseUri, String relativeUri, out Uri result) { throw null; }
-
-        public static Boolean TryCreate(Uri baseUri, Uri relativeUri, out Uri result) { throw null; }
-
-        public static String UnescapeDataString(String stringToUnescape) { throw null; }
-    }
-
-    [Flags]
-    public enum UriComponents
-    {
-        SerializationInfoString = Int32.MinValue,
-        Scheme = 1,
-        UserInfo = 2,
-        Host = 4,
-        Port = 8,
-        SchemeAndServer = 13,
-        Path = 16,
-        Query = 32,
-        PathAndQuery = 48,
-        HttpRequestUrl = 61,
-        Fragment = 64,
-        AbsoluteUri = 127,
-        StrongPort = 128,
-        HostAndPort = 132,
-        StrongAuthority = 134,
-        NormalizedHost = 256,
-        KeepDelimiter = 1073741824
-    }
-
-    public enum UriFormat
-    {
-        UriEscaped = 1,
-        Unescaped = 2,
-        SafeUnescaped = 3
-    }
-
-    public partial class UriFormatException : FormatException
-    {
-        public UriFormatException() { }
-
-        public UriFormatException(String textString, Exception e) { }
-
-        public UriFormatException(String textString) { }
-    }
-
-    public enum UriHostNameType
-    {
-        Unknown = 0,
-        Basic = 1,
-        Dns = 2,
-        IPv4 = 3,
-        IPv6 = 4
-    }
-
-    public enum UriKind
-    {
-        RelativeOrAbsolute = 0,
-        Absolute = 1,
-        Relative = 2
-    }
-
-    public abstract partial class ValueType
-    {
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public override String ToString() { throw null; }
-    }
-
-    public sealed partial class Version : IComparable, IComparable<Version>, IEquatable<Version>
-    {
-        public Version(Int32 major, Int32 minor, Int32 build, Int32 revision) { }
-
-        public Version(Int32 major, Int32 minor, Int32 build) { }
-
-        public Version(Int32 major, Int32 minor) { }
-
-        public Version(String version) { }
-
-        public Int32 Build { get { throw null; } }
-
-        public Int32 Major { get { throw null; } }
-
-        public Int16 MajorRevision { get { throw null; } }
-
-        public Int32 Minor { get { throw null; } }
-
-        public Int16 MinorRevision { get { throw null; } }
-
-        public Int32 Revision { get { throw null; } }
-
-        public Int32 CompareTo(Version value) { throw null; }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public Boolean Equals(Version obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-
-        public static Boolean operator ==(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator >(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator >=(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator !=(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator <(Version v1, Version v2) { throw null; }
-
-        public static Boolean operator <=(Version v1, Version v2) { throw null; }
-
-        public static Version Parse(String input) { throw null; }
-
-        Int32 IComparable.CompareTo(Object version) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(Int32 fieldCount) { throw null; }
-
-        public static Boolean TryParse(String input, out Version result) { throw null; }
-    }
-
-    public partial struct Void
-    {
-    }
-
-    public partial class WeakReference
-    {
-        public WeakReference(Object target, Boolean trackResurrection) { }
-
-        public WeakReference(Object target) { }
-
-        public virtual Boolean IsAlive { get { throw null; } }
-
-        public virtual Object Target { get { throw null; } set { } }
-
-        public virtual Boolean TrackResurrection { get { throw null; } }
-
-        ~WeakReference() {
-        }
-    }
-
-    public sealed partial class WeakReference<T>
-        where T : class
-    {
-        public WeakReference(T target, Boolean trackResurrection) { }
-
-        public WeakReference(T target) { }
-
-        ~WeakReference() {
-        }
-
-        public void SetTarget(T target) { }
-
-        public Boolean TryGetTarget(out T target) { throw null; }
-    }
-}
-
-namespace System.Collections
-{
-    public partial struct DictionaryEntry
-    {
-        public DictionaryEntry(Object key, Object value) { }
-
-        public Object Key { get { throw null; } set { } }
-
-        public Object Value { get { throw null; } set { } }
-    }
-
-    public partial interface ICollection : IEnumerable
-    {
-        Int32 Count { get; }
-
-        Boolean IsSynchronized { get; }
-
-        Object SyncRoot { get; }
-
-        void CopyTo(Array array, Int32 index);
-    }
-
-    public partial interface IComparer
-    {
-        Int32 Compare(Object x, Object y);
-    }
-
-    public partial interface IDictionary : ICollection, IEnumerable
-    {
-        Boolean IsFixedSize { get; }
-
-        Boolean IsReadOnly { get; }
-
-        Object this[Object key] { get; set; }
-
-        ICollection Keys { get; }
-
-        ICollection Values { get; }
-
-        void Add(Object key, Object value);
-        void Clear();
-        Boolean Contains(Object key);
-        IDictionaryEnumerator GetEnumerator();
-        void Remove(Object key);
-    }
-
-    public partial interface IDictionaryEnumerator : IEnumerator
-    {
-        DictionaryEntry Entry { get; }
-
-        Object Key { get; }
-
-        Object Value { get; }
-    }
-
-    public partial interface IEnumerable
-    {
-        IEnumerator GetEnumerator();
-    }
-
-    public partial interface IEnumerator
-    {
-        Object Current { get; }
-
-        Boolean MoveNext();
-        void Reset();
-    }
-
-    public partial interface IEqualityComparer
-    {
-        Boolean Equals(Object x, Object y);
-        Int32 GetHashCode(Object obj);
-    }
-
-    public partial interface IList : ICollection, IEnumerable
-    {
-        Boolean IsFixedSize { get; }
-
-        Boolean IsReadOnly { get; }
-
-        Object this[Int32 index] { get; set; }
-
-        Int32 Add(Object value);
-        void Clear();
-        Boolean Contains(Object value);
-        Int32 IndexOf(Object value);
-        void Insert(Int32 index, Object value);
-        void Remove(Object value);
-        void RemoveAt(Int32 index);
-    }
-
-    public partial interface IStructuralComparable
-    {
-        Int32 CompareTo(Object other, IComparer comparer);
-    }
-
-    public partial interface IStructuralEquatable
-    {
-        Boolean Equals(Object other, IEqualityComparer comparer);
-        Int32 GetHashCode(IEqualityComparer comparer);
-    }
-}
-
-namespace System.Collections.Generic
-{
-    public partial interface ICollection<T> : IEnumerable<T>, IEnumerable
-    {
-        Int32 Count { get; }
-
-        Boolean IsReadOnly { get; }
-
-        void Add(T item);
-        void Clear();
-        Boolean Contains(T item);
-        void CopyTo(T[] array, Int32 arrayIndex);
-        Boolean Remove(T item);
-    }
-
-    public partial interface IComparer<in T>
-    {
-        Int32 Compare(T x, T y);
-    }
-
-    public partial interface IDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable
-    {
-        TValue this[TKey key] { get; set; }
-
-        ICollection<TKey> Keys { get; }
-
-        ICollection<TValue> Values { get; }
-
-        void Add(TKey key, TValue value);
-        Boolean ContainsKey(TKey key);
-        Boolean Remove(TKey key);
-        Boolean TryGetValue(TKey key, out TValue value);
-    }
-
-    public partial interface IEnumerable<out T> : IEnumerable
-    {
-        IEnumerator<T> GetEnumerator();
-    }
-
-    public partial interface IEnumerator<out T> : IEnumerator, IDisposable
-    {
-        T Current { get; }
-    }
-
-    public partial interface IEqualityComparer<in T>
-    {
-        Boolean Equals(T x, T y);
-        Int32 GetHashCode(T obj);
-    }
-
-    public partial interface IList<T> : ICollection<T>, IEnumerable<T>, IEnumerable
-    {
-        T this[Int32 index] { get; set; }
-
-        Int32 IndexOf(T item);
-        void Insert(Int32 index, T item);
-        void RemoveAt(Int32 index);
-    }
-
-    public partial interface IReadOnlyCollection<out T> : IEnumerable<T>, IEnumerable
-    {
-        Int32 Count { get; }
-    }
-
-    public partial interface IReadOnlyDictionary<TKey, TValue> : IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IReadOnlyCollection<KeyValuePair<TKey, TValue>>
-    {
-        TValue this[TKey key] { get; }
-
-        IEnumerable<TKey> Keys { get; }
-
-        IEnumerable<TValue> Values { get; }
-
-        Boolean ContainsKey(TKey key);
-        Boolean TryGetValue(TKey key, out TValue value);
-    }
-
-    public partial interface IReadOnlyList<out T> : IEnumerable<T>, IEnumerable, IReadOnlyCollection<T>
-    {
-        T this[Int32 index] { get; }
-    }
-
-    public partial interface ISet<T> : ICollection<T>, IEnumerable<T>, IEnumerable
-    {
-        Boolean Add(T item);
-        void ExceptWith(IEnumerable<T> other);
-        void IntersectWith(IEnumerable<T> other);
-        Boolean IsProperSubsetOf(IEnumerable<T> other);
-        Boolean IsProperSupersetOf(IEnumerable<T> other);
-        Boolean IsSubsetOf(IEnumerable<T> other);
-        Boolean IsSupersetOf(IEnumerable<T> other);
-        Boolean Overlaps(IEnumerable<T> other);
-        Boolean SetEquals(IEnumerable<T> other);
-        void SymmetricExceptWith(IEnumerable<T> other);
-        void UnionWith(IEnumerable<T> other);
-    }
-
-    public partial class KeyNotFoundException : Exception
-    {
-        public KeyNotFoundException() { }
-
-        public KeyNotFoundException(String message, Exception innerException) { }
-
-        public KeyNotFoundException(String message) { }
-    }
-
-    public partial struct KeyValuePair<TKey, TValue>
-    {
-        public KeyValuePair(TKey key, TValue value) { }
-
-        public TKey Key { get { throw null; } }
-
-        public TValue Value { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-}
-
-namespace System.Collections.ObjectModel
-{
-    public partial class Collection<T> : Generic.ICollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.IList<T>, Generic.IReadOnlyCollection<T>, Generic.IReadOnlyList<T>, ICollection, IList
-    {
-        public Collection() { }
-
-        public Collection(Generic.IList<T> list) { }
-
-        public Int32 Count { get { throw null; } }
-
-        public T this[Int32 index] { get { throw null; } set { } }
-
-        protected Generic.IList<T> Items { get { throw null; } }
-
-        Boolean Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        Boolean ICollection.IsSynchronized { get { throw null; } }
-
-        Object ICollection.SyncRoot { get { throw null; } }
-
-        Boolean IList.IsFixedSize { get { throw null; } }
-
-        Boolean IList.IsReadOnly { get { throw null; } }
-
-        Object IList.this[Int32 index] { get { throw null; } set { } }
-
-        public void Add(T item) { }
-
-        public void Clear() { }
-
-        protected virtual void ClearItems() { }
-
-        public Boolean Contains(T item) { throw null; }
-
-        public void CopyTo(T[] array, Int32 index) { }
-
-        public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        public Int32 IndexOf(T item) { throw null; }
-
-        public void Insert(Int32 index, T item) { }
-
-        protected virtual void InsertItem(Int32 index, T item) { }
-
-        public Boolean Remove(T item) { throw null; }
-
-        public void RemoveAt(Int32 index) { }
-
-        protected virtual void RemoveItem(Int32 index) { }
-
-        protected virtual void SetItem(Int32 index, T item) { }
-
-        void ICollection.CopyTo(Array array, Int32 index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        Int32 IList.Add(Object value) { throw null; }
-
-        Boolean IList.Contains(Object value) { throw null; }
-
-        Int32 IList.IndexOf(Object value) { throw null; }
-
-        void IList.Insert(Int32 index, Object value) { }
-
-        void IList.Remove(Object value) { }
-    }
-
-    public partial class ReadOnlyCollection<T> : Generic.ICollection<T>, Generic.IEnumerable<T>, IEnumerable, Generic.IList<T>, Generic.IReadOnlyCollection<T>, Generic.IReadOnlyList<T>, ICollection, IList
-    {
-        public ReadOnlyCollection(Generic.IList<T> list) { }
-
-        public Int32 Count { get { throw null; } }
-
-        public T this[Int32 index] { get { throw null; } }
-
-        protected Generic.IList<T> Items { get { throw null; } }
-
-        Boolean Generic.ICollection<T>.IsReadOnly { get { throw null; } }
-
-        T Generic.IList<T>.this[Int32 index] { get { throw null; } set { } }
-
-        Boolean ICollection.IsSynchronized { get { throw null; } }
-
-        Object ICollection.SyncRoot { get { throw null; } }
-
-        Boolean IList.IsFixedSize { get { throw null; } }
-
-        Boolean IList.IsReadOnly { get { throw null; } }
-
-        Object IList.this[Int32 index] { get { throw null; } set { } }
-
-        public Boolean Contains(T value) { throw null; }
-
-        public void CopyTo(T[] array, Int32 index) { }
-
-        public Generic.IEnumerator<T> GetEnumerator() { throw null; }
-
-        public Int32 IndexOf(T value) { throw null; }
-
-        void Generic.ICollection<T>.Add(T value) { }
-
-        void Generic.ICollection<T>.Clear() { }
-
-        Boolean Generic.ICollection<T>.Remove(T value) { throw null; }
-
-        void Generic.IList<T>.Insert(Int32 index, T value) { }
-
-        void Generic.IList<T>.RemoveAt(Int32 index) { }
-
-        void ICollection.CopyTo(Array array, Int32 index) { }
-
-        IEnumerator IEnumerable.GetEnumerator() { throw null; }
-
-        Int32 IList.Add(Object value) { throw null; }
-
-        void IList.Clear() { }
-
-        Boolean IList.Contains(Object value) { throw null; }
-
-        Int32 IList.IndexOf(Object value) { throw null; }
-
-        void IList.Insert(Int32 index, Object value) { }
-
-        void IList.Remove(Object value) { }
-
-        void IList.RemoveAt(Int32 index) { }
-    }
-}
-
-namespace System.ComponentModel
-{
-    [AttributeUsage(AttributeTargets.All)]
-    public partial class DefaultValueAttribute : Attribute
-    {
-        public DefaultValueAttribute(Boolean value) { }
-
-        public DefaultValueAttribute(Byte value) { }
-
-        public DefaultValueAttribute(Char value) { }
-
-        public DefaultValueAttribute(Double value) { }
-
-        public DefaultValueAttribute(Int16 value) { }
-
-        public DefaultValueAttribute(Int32 value) { }
-
-        public DefaultValueAttribute(Int64 value) { }
-
-        public DefaultValueAttribute(Object value) { }
-
-        public DefaultValueAttribute(Single value) { }
-
-        public DefaultValueAttribute(String value) { }
-
-        public DefaultValueAttribute(Type type, String value) { }
-
-        public virtual Object Value { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
-    public sealed partial class EditorBrowsableAttribute : Attribute
-    {
-        public EditorBrowsableAttribute(EditorBrowsableState state) { }
-
-        public EditorBrowsableState State { get { throw null; } }
-
-        public override Boolean Equals(Object obj) { throw null; }
-
-        public override Int32 GetHashCode() { throw null; }
-    }
-
-    public enum EditorBrowsableState
-    {
-        Always = 0,
-        Never = 1,
-        Advanced = 2
-    }
-}
-
-namespace System.Diagnostics
-{
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]
-    public sealed partial class ConditionalAttribute : Attribute
-    {
-        public ConditionalAttribute(String conditionString) { }
-
-        public String ConditionString { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Module, AllowMultiple = false)]
-    public sealed partial class DebuggableAttribute : Attribute
-    {
-        public DebuggableAttribute(DebuggingModes modes) { }
-
-        [Flags]
-        public enum DebuggingModes
-        {
-            None = 0,
-            Default = 1,
-            IgnoreSymbolStoreSequencePoints = 2,
-            EnableEditAndContinue = 4,
-            DisableOptimizations = 256
-        }
-    }
-}
-
-namespace System.Globalization
-{
-    [Flags]
-    public enum DateTimeStyles
-    {
-        None = 0,
-        AllowLeadingWhite = 1,
-        AllowTrailingWhite = 2,
-        AllowInnerWhite = 4,
-        AllowWhiteSpaces = 7,
-        NoCurrentDateDefault = 8,
-        AdjustToUniversal = 16,
-        AssumeLocal = 32,
-        AssumeUniversal = 64,
-        RoundtripKind = 128
-    }
-
-    [Flags]
-    public enum NumberStyles
-    {
-        None = 0,
-        AllowLeadingWhite = 1,
-        AllowTrailingWhite = 2,
-        AllowLeadingSign = 4,
-        Integer = 7,
-        AllowTrailingSign = 8,
-        AllowParentheses = 16,
-        AllowDecimalPoint = 32,
-        AllowThousands = 64,
-        Number = 111,
-        AllowExponent = 128,
-        Float = 167,
-        AllowCurrencySymbol = 256,
-        Currency = 383,
-        Any = 511,
-        AllowHexSpecifier = 512,
-        HexNumber = 515
-    }
-
-    [Flags]
-    public enum TimeSpanStyles
-    {
-        None = 0,
-        AssumeNegative = 1
-    }
-}
-
-namespace System.IO
-{
-    public partial class DirectoryNotFoundException : IOException
-    {
-        public DirectoryNotFoundException() { }
-
-        public DirectoryNotFoundException(String message, Exception innerException) { }
-
-        public DirectoryNotFoundException(String message) { }
-    }
-
-    public partial class FileLoadException : IOException
-    {
-        public FileLoadException() { }
-
-        public FileLoadException(String message, Exception inner) { }
-
-        public FileLoadException(String message, String fileName, Exception inner) { }
-
-        public FileLoadException(String message, String fileName) { }
-
-        public FileLoadException(String message) { }
-
-        public String FileName { get { throw null; } }
-
-        public override String Message { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class FileNotFoundException : IOException
-    {
-        public FileNotFoundException() { }
-
-        public FileNotFoundException(String message, Exception innerException) { }
-
-        public FileNotFoundException(String message, String fileName, Exception innerException) { }
-
-        public FileNotFoundException(String message, String fileName) { }
-
-        public FileNotFoundException(String message) { }
-
-        public String FileName { get { throw null; } }
-
-        public override String Message { get { throw null; } }
-
-        public override String ToString() { throw null; }
-    }
-
-    public partial class IOException : Exception
-    {
-        public IOException() { }
-
-        public IOException(String message, Exception innerException) { }
-
-        public IOException(String message, Int32 hresult) { }
-
-        public IOException(String message) { }
-    }
-
-    public partial class PathTooLongException : IOException
-    {
-        public PathTooLongException() { }
-
-        public PathTooLongException(String message, Exception innerException) { }
-
-        public PathTooLongException(String message) { }
-    }
-}
-
-namespace System.Reflection
-{
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyCompanyAttribute : Attribute
-    {
-        public AssemblyCompanyAttribute(String company) { }
-
-        public String Company { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyConfigurationAttribute : Attribute
-    {
-        public AssemblyConfigurationAttribute(String configuration) { }
-
-        public String Configuration { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyCopyrightAttribute : Attribute
-    {
-        public AssemblyCopyrightAttribute(String copyright) { }
-
-        public String Copyright { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyCultureAttribute : Attribute
-    {
-        public AssemblyCultureAttribute(String culture) { }
-
-        public String Culture { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyDefaultAliasAttribute : Attribute
-    {
-        public AssemblyDefaultAliasAttribute(String defaultAlias) { }
-
-        public String DefaultAlias { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyDelaySignAttribute : Attribute
-    {
-        public AssemblyDelaySignAttribute(Boolean delaySign) { }
-
-        public Boolean DelaySign { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyDescriptionAttribute : Attribute
-    {
-        public AssemblyDescriptionAttribute(String description) { }
-
-        public String Description { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyFileVersionAttribute : Attribute
-    {
-        public AssemblyFileVersionAttribute(String version) { }
-
-        public String Version { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyFlagsAttribute : Attribute
-    {
-        public AssemblyFlagsAttribute(AssemblyNameFlags assemblyFlags) { }
-
-        public Int32 AssemblyFlags { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyInformationalVersionAttribute : Attribute
-    {
-        public AssemblyInformationalVersionAttribute(String informationalVersion) { }
-
-        public String InformationalVersion { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyKeyFileAttribute : Attribute
-    {
-        public AssemblyKeyFileAttribute(String keyFile) { }
-
-        public String KeyFile { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyKeyNameAttribute : Attribute
-    {
-        public AssemblyKeyNameAttribute(String keyName) { }
-
-        public String KeyName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)]
-    public sealed partial class AssemblyMetadataAttribute : Attribute
-    {
-        public AssemblyMetadataAttribute(String key, String value) { }
-
-        public String Key { get { throw null; } }
-
-        public String Value { get { throw null; } }
-    }
-
-    [Flags]
-    public enum AssemblyNameFlags
-    {
-        None = 0,
-        PublicKey = 1,
-        Retargetable = 256
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyProductAttribute : Attribute
-    {
-        public AssemblyProductAttribute(String product) { }
-
-        public String Product { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = false)]
-    public sealed partial class AssemblySignatureKeyAttribute : Attribute
-    {
-        public AssemblySignatureKeyAttribute(String publicKey, String countersignature) { }
-
-        public String Countersignature { get { throw null; } }
-
-        public String PublicKey { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyTitleAttribute : Attribute
-    {
-        public AssemblyTitleAttribute(String title) { }
-
-        public String Title { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyTrademarkAttribute : Attribute
-    {
-        public AssemblyTrademarkAttribute(String trademark) { }
-
-        public String Trademark { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]
-    public sealed partial class AssemblyVersionAttribute : Attribute
-    {
-        public AssemblyVersionAttribute(String version) { }
-
-        public String Version { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface)]
-    public sealed partial class DefaultMemberAttribute : Attribute
-    {
-        public DefaultMemberAttribute(String memberName) { }
-
-        public String MemberName { get { throw null; } }
-    }
-
-    public enum ProcessorArchitecture
-    {
-        None = 0,
-        MSIL = 1,
-        X86 = 2,
-        IA64 = 3,
-        Amd64 = 4,
-        Arm = 5
-    }
-}
-
-namespace System.Runtime
-{
-    public enum GCLargeObjectHeapCompactionMode
-    {
-        Default = 1,
-        CompactOnce = 2
-    }
-
-    public enum GCLatencyMode
-    {
-        Batch = 0,
-        Interactive = 1,
-        LowLatency = 2,
-        SustainedLowLatency = 3
-    }
-
-    public static partial class GCSettings
-    {
-        public static Boolean IsServerGC { get { throw null; } }
-
-        public static GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode { get { throw null; } set { } }
-
-        public static GCLatencyMode LatencyMode { get { throw null; } set { } }
-    }
-}
-
-namespace System.Runtime.CompilerServices
-{
-    [AttributeUsage(AttributeTargets.Field)]
-    public sealed partial class AccessedThroughPropertyAttribute : Attribute
-    {
-        public AccessedThroughPropertyAttribute(String propertyName) { }
-
-        public String PropertyName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
-    public sealed partial class AsyncStateMachineAttribute : StateMachineAttribute
-    {
-        public AsyncStateMachineAttribute(Type stateMachineType) : base(default!) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class CallerFilePathAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class CallerLineNumberAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class CallerMemberNameAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Module | AttributeTargets.Class | AttributeTargets.Method)]
-    public partial class CompilationRelaxationsAttribute : Attribute
-    {
-        public CompilationRelaxationsAttribute(Int32 relaxations) { }
-
-        public Int32 CompilationRelaxations { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.All, Inherited = true)]
-    public sealed partial class CompilerGeneratedAttribute : Attribute
-    {
-    }
-
-    public sealed partial class ConditionalWeakTable<TKey, TValue>
-        where TKey : class where TValue : class
-    {
-        public void Add(TKey key, TValue value) { }
-
-        ~ConditionalWeakTable() {
-        }
-
-        public TValue GetOrCreateValue(TKey key) { throw null; }
-
-        public TValue GetValue(TKey key, CreateValueCallback createValueCallback) { throw null; }
-
-        public Boolean Remove(TKey key) { throw null; }
-
-        public Boolean TryGetValue(TKey key, out TValue value) { throw null; }
-
-        public delegate TValue CreateValueCallback(TKey key);
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter, Inherited = false)]
-    public abstract partial class CustomConstantAttribute : Attribute
-    {
-        public abstract Object Value { get; }
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class DateTimeConstantAttribute : CustomConstantAttribute
-    {
-        public DateTimeConstantAttribute(Int64 ticks) { }
-
-        public override Object Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class DecimalConstantAttribute : Attribute
-    {
-        public DecimalConstantAttribute(Byte scale, Byte sign, Int32 hi, Int32 mid, Int32 low) { }
-
-        [CLSCompliant(false)]
-        public DecimalConstantAttribute(Byte scale, Byte sign, UInt32 hi, UInt32 mid, UInt32 low) { }
-
-        public Decimal Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)]
-    public sealed partial class DisablePrivateReflectionAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method)]
-    public sealed partial class ExtensionAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Field, Inherited = false)]
-    public sealed partial class FixedBufferAttribute : Attribute
-    {
-        public FixedBufferAttribute(Type elementType, Int32 length) { }
-
-        public Type ElementType { get { throw null; } }
-
-        public Int32 Length { get { throw null; } }
-    }
-
-    public static partial class FormattableStringFactory
-    {
-        public static FormattableString Create(String format, params Object[] arguments) { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Property, Inherited = true)]
-    public sealed partial class IndexerNameAttribute : Attribute
-    {
-        public IndexerNameAttribute(String indexerName) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)]
-    public sealed partial class InternalsVisibleToAttribute : Attribute
-    {
-        public InternalsVisibleToAttribute(String assemblyName) { }
-
-        public String AssemblyName { get { throw null; } }
-    }
-
-    public static partial class IsConst
-    {
-    }
-
-    public partial interface IStrongBox
-    {
-        Object Value { get; set; }
-    }
-
-    public static partial class IsVolatile
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
-    public sealed partial class IteratorStateMachineAttribute : StateMachineAttribute
-    {
-        public IteratorStateMachineAttribute(Type stateMachineType) : base(default!) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method, Inherited = false)]
-    public sealed partial class MethodImplAttribute : Attribute
-    {
-        public MethodImplAttribute(MethodImplOptions methodImplOptions) { }
-
-        public MethodImplOptions Value { get { throw null; } }
-    }
-
-    [Flags]
-    public enum MethodImplOptions
-    {
-        NoInlining = 8,
-        NoOptimization = 64,
-        PreserveSig = 128,
-        AggressiveInlining = 256
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false)]
-    public sealed partial class ReferenceAssemblyAttribute : Attribute
-    {
-        public ReferenceAssemblyAttribute() { }
-
-        public ReferenceAssemblyAttribute(String description) { }
-
-        public String Description { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = false)]
-    public sealed partial class RuntimeCompatibilityAttribute : Attribute
-    {
-        public Boolean WrapNonExceptionThrows { get { throw null; } set { } }
-    }
-
-    public static partial class RuntimeHelpers
-    {
-        public static Int32 OffsetToStringData { get { throw null; } }
-
-        public static void EnsureSufficientExecutionStack() { }
-
-        public static Int32 GetHashCode(Object o) { throw null; }
-
-        public static Object GetObjectValue(Object obj) { throw null; }
-
-        public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle) { }
-
-        public static void RunClassConstructor(RuntimeTypeHandle type) { }
-    }
-
-    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
-    public partial class StateMachineAttribute : Attribute
-    {
-        public StateMachineAttribute(Type stateMachineType) { }
-
-        public Type StateMachineType { get { throw null; } }
-    }
-
-    public partial class StrongBox<T> : IStrongBox
-    {
-        public T Value;
-        public StrongBox() { }
-
-        public StrongBox(T value) { }
-
-        Object IStrongBox.Value { get { throw null; } set { } }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false, AllowMultiple = false)]
-    public sealed partial class TypeForwardedFromAttribute : Attribute
-    {
-        public TypeForwardedFromAttribute(String assemblyFullName) { }
-
-        public String AssemblyFullName { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)]
-    public sealed partial class TypeForwardedToAttribute : Attribute
-    {
-        public TypeForwardedToAttribute(Type destination) { }
-
-        public Type Destination { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Struct)]
-    public sealed partial class UnsafeValueTypeAttribute : Attribute
-    {
-    }
-}
-
-namespace System.Runtime.ExceptionServices
-{
-    public sealed partial class ExceptionDispatchInfo
-    {
-        internal ExceptionDispatchInfo() { }
-
-        public Exception SourceException { get { throw null; } }
-
-        public static ExceptionDispatchInfo Capture(Exception source) { throw null; }
-
-        public void Throw() { }
-    }
-}
-
-namespace System.Runtime.InteropServices
-{
-    public enum CharSet
-    {
-        Ansi = 2,
-        Unicode = 3
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)]
-    public sealed partial class ComVisibleAttribute : Attribute
-    {
-        public ComVisibleAttribute(Boolean visibility) { }
-
-        public Boolean Value { get { throw null; } }
-    }
-
-    [AttributeUsage(AttributeTargets.Field, Inherited = false)]
-    public sealed partial class FieldOffsetAttribute : Attribute
-    {
-        public FieldOffsetAttribute(Int32 offset) { }
-
-        public Int32 Value { get { throw null; } }
-    }
-
-    public enum LayoutKind
-    {
-        Sequential = 0,
-        Explicit = 2,
-        Auto = 3
-    }
-
-    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
-    public sealed partial class OutAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false)]
-    public sealed partial class StructLayoutAttribute : Attribute
-    {
-        public CharSet CharSet;
-        public Int32 Pack;
-        public Int32 Size;
-        public StructLayoutAttribute(LayoutKind layoutKind) { }
-
-        public LayoutKind Value { get { throw null; } }
-    }
-}
-
-namespace System.Runtime.Versioning
-{
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)]
-    public sealed partial class TargetFrameworkAttribute : Attribute
-    {
-        public TargetFrameworkAttribute(String frameworkName) { }
-
-        public String FrameworkDisplayName { get { throw null; } set { } }
-
-        public String FrameworkName { get { throw null; } }
-    }
-}
-
-namespace System.Security
-{
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)]
-    public sealed partial class AllowPartiallyTrustedCallersAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class SecurityCriticalAttribute : Attribute
-    {
-    }
-
-    public partial class SecurityException : Exception
-    {
-        public SecurityException() { }
-
-        public SecurityException(String message, Exception inner) { }
-
-        public SecurityException(String message) { }
-
-        public override String ToString() { throw null; }
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Delegate, AllowMultiple = false, Inherited = false)]
-    public sealed partial class SecuritySafeCriticalAttribute : Attribute
-    {
-    }
-
-    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)]
-    public sealed partial class SecurityTransparentAttribute : Attribute
-    {
-    }
-
-    public partial class VerificationException : Exception
-    {
-        public VerificationException() { }
-
-        public VerificationException(String message, Exception innerException) { }
-
-        public VerificationException(String message) { }
-    }
-}
-
-namespace System.Text
-{
-    public sealed partial class StringBuilder
-    {
-        public StringBuilder() { }
-
-        public StringBuilder(Int32 capacity, Int32 maxCapacity) { }
-
-        public StringBuilder(Int32 capacity) { }
-
-        public StringBuilder(String value, Int32 startIndex, Int32 length, Int32 capacity) { }
-
-        public StringBuilder(String value, Int32 capacity) { }
-
-        public StringBuilder(String value) { }
-
-        public Int32 Capacity { get { throw null; } set { } }
-
-        public Char this[Int32 index] { get { throw null; } set { } }
-
-        public Int32 Length { get { throw null; } set { } }
-
-        public Int32 MaxCapacity { get { throw null; } }
-
-        public StringBuilder Append(Boolean value) { throw null; }
-
-        public StringBuilder Append(Byte value) { throw null; }
-
-        public StringBuilder Append(Char value, Int32 repeatCount) { throw null; }
-
-        public StringBuilder Append(Char value) { throw null; }
-
-        public StringBuilder Append(Char[] value, Int32 startIndex, Int32 charCount) { throw null; }
-
-        public StringBuilder Append(Char[] value) { throw null; }
-
-        [CLSCompliant(false)]
-        public unsafe StringBuilder Append(Char* value, Int32 valueCount) { throw null; }
-
-        public StringBuilder Append(Decimal value) { throw null; }
-
-        public StringBuilder Append(Double value) { throw null; }
-
-        public StringBuilder Append(Int16 value) { throw null; }
-
-        public StringBuilder Append(Int32 value) { throw null; }
-
-        public StringBuilder Append(Int64 value) { throw null; }
-
-        public StringBuilder Append(Object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(SByte value) { throw null; }
-
-        public StringBuilder Append(Single value) { throw null; }
-
-        public StringBuilder Append(String value, Int32 startIndex, Int32 count) { throw null; }
-
-        public StringBuilder Append(String value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(UInt16 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(UInt32 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Append(UInt64 value) { throw null; }
-
-        public StringBuilder AppendFormat(IFormatProvider provider, String format, Object arg0, Object arg1, Object arg2) { throw null; }
-
-        public StringBuilder AppendFormat(IFormatProvider provider, String format, Object arg0, Object arg1) { throw null; }
-
-        public StringBuilder AppendFormat(IFormatProvider provider, String format, Object arg0) { throw null; }
-
-        public StringBuilder AppendFormat(IFormatProvider provider, String format, params Object[] args) { throw null; }
-
-        public StringBuilder AppendFormat(String format, Object arg0, Object arg1, Object arg2) { throw null; }
-
-        public StringBuilder AppendFormat(String format, Object arg0, Object arg1) { throw null; }
-
-        public StringBuilder AppendFormat(String format, Object arg0) { throw null; }
-
-        public StringBuilder AppendFormat(String format, params Object[] args) { throw null; }
-
-        public StringBuilder AppendLine() { throw null; }
-
-        public StringBuilder AppendLine(String value) { throw null; }
-
-        public StringBuilder Clear() { throw null; }
-
-        public void CopyTo(Int32 sourceIndex, Char[] destination, Int32 destinationIndex, Int32 count) { }
-
-        public Int32 EnsureCapacity(Int32 capacity) { throw null; }
-
-        public Boolean Equals(StringBuilder sb) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Boolean value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Byte value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Char value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Char[] value, Int32 startIndex, Int32 charCount) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Char[] value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Decimal value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Double value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Int16 value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Int32 value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Int64 value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Object value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, SByte value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, Single value) { throw null; }
-
-        public StringBuilder Insert(Int32 index, String value, Int32 count) { throw null; }
-
-        public StringBuilder Insert(Int32 index, String value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, UInt16 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, UInt32 value) { throw null; }
-
-        [CLSCompliant(false)]
-        public StringBuilder Insert(Int32 index, UInt64 value) { throw null; }
-
-        public StringBuilder Remove(Int32 startIndex, Int32 length) { throw null; }
-
-        public StringBuilder Replace(Char oldChar, Char newChar, Int32 startIndex, Int32 count) { throw null; }
-
-        public StringBuilder Replace(Char oldChar, Char newChar) { throw null; }
-
-        public StringBuilder Replace(String oldValue, String newValue, Int32 startIndex, Int32 count) { throw null; }
-
-        public StringBuilder Replace(String oldValue, String newValue) { throw null; }
-
-        public override String ToString() { throw null; }
-
-        public String ToString(Int32 startIndex, Int32 length) { throw null; }
-    }
-}
-
-namespace System.Threading
-{
-    public enum LazyThreadSafetyMode
-    {
-        None = 0,
-        PublicationOnly = 1,
-        ExecutionAndPublication = 2
-    }
-
-    public static partial class Timeout
-    {
-        public const Int32 Infinite = -1;
-        public static readonly TimeSpan InfiniteTimeSpan;
-    }
-
-    public abstract partial class WaitHandle : IDisposable
-    {
-        protected static readonly IntPtr InvalidHandle;
-        public const Int32 WaitTimeout = 258;
-        public void Dispose() { }
-
-        protected virtual void Dispose(Boolean explicitDisposing) { }
-
-        public static Boolean WaitAll(WaitHandle[] waitHandles, Int32 millisecondsTimeout) { throw null; }
-
-        public static Boolean WaitAll(WaitHandle[] waitHandles, TimeSpan timeout) { throw null; }
-
-        public static Boolean WaitAll(WaitHandle[] waitHandles) { throw null; }
-
-        public static Int32 WaitAny(WaitHandle[] waitHandles, Int32 millisecondsTimeout) { throw null; }
-
-        public static Int32 WaitAny(WaitHandle[] waitHandles, TimeSpan timeout) { throw null; }
-
-        public static Int32 WaitAny(WaitHandle[] waitHandles) { throw null; }
-
-        public virtual Boolean WaitOne() { throw null; }
-
-        public virtual Boolean WaitOne(Int32 millisecondsTimeout) { throw null; }
-
-        public virtual Boolean WaitOne(TimeSpan timeout) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime/4.3.0/system.runtime.nuspec b/src/referencePackages/src/system.runtime/4.3.0/system.runtime.nuspec
deleted file mode 100644
index d04537a3..00000000
--- a/src/referencePackages/src/system.runtime/4.3.0/system.runtime.nuspec
+++ /dev/null
@@ -1,60 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Runtime</id>
-    <version>4.3.0</version>
-    <title>System.Runtime</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides the fundamental primitives, classes and base classes that define commonly-used value and reference data types, events and event handlers, interfaces, attributes, and exceptions. This packages represents the core package, and provides the minimal set of types required to build a managed application.
-
-Commonly Used Types:
-System.Object
-System.Exception
-System.Int16
-System.Int32
-System.Int64
-System.Enum
-System.String
-System.Char
-System.Boolean
-System.SByte
-System.Byte
-System.DateTime
-System.DateTimeOffset
-System.Single
-System.Double
-System.UInt16
-System.UInt32
-System.UInt64
-System.IDisposable
-System.Uri
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-      </group>
-      <group targetFramework=".NETStandard1.2">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-      </group>
-      <group targetFramework=".NETStandard1.5">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.runtime/Directory.Build.props b/src/referencePackages/src/system.runtime/Directory.Build.props
deleted file mode 100644
index 1befcf3c..00000000
--- a/src/referencePackages/src/system.runtime/Directory.Build.props
+++ /dev/null
@@ -1,15 +0,0 @@
-<Project>
-
-  <Import Project="$([MSBuild]::GetPathOfFileAbove(Directory.Build.props, $(MSBuildThisFileDirectory)..))" />
-
-  <PropertyGroup>
-    <AssemblyName>System.Runtime</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup>
-    <Using Include="System" />
-    <Using Include="System.Reflection" />
-    <Using Include="System.Runtime.CompilerServices" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.security.accesscontrol/5.0.0/System.Security.AccessControl.5.0.0.csproj b/src/referencePackages/src/system.security.accesscontrol/5.0.0/System.Security.AccessControl.5.0.0.csproj
index 50b7baff..8bf1afd9 100644
--- a/src/referencePackages/src/system.security.accesscontrol/5.0.0/System.Security.AccessControl.5.0.0.csproj
+++ b/src/referencePackages/src/system.security.accesscontrol/5.0.0/System.Security.AccessControl.5.0.0.csproj
@@ -1,15 +1,10 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.3;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Security.AccessControl</AssemblyName>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Security.Principal.Windows" Version="5.0.0" />
-    <PackageReference Include="System.Threading.Thread" Version="4.3.0" />
-  </ItemGroup>
-
   <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
     <PackageReference Include="System.Security.Principal.Windows" Version="5.0.0" />
   </ItemGroup>
diff --git a/src/referencePackages/src/system.security.accesscontrol/5.0.0/ref/netstandard1.3/System.Security.AccessControl.cs b/src/referencePackages/src/system.security.accesscontrol/5.0.0/ref/netstandard1.3/System.Security.AccessControl.cs
deleted file mode 100644
index 8795ca85..00000000
--- a/src/referencePackages/src/system.security.accesscontrol/5.0.0/ref/netstandard1.3/System.Security.AccessControl.cs
+++ /dev/null
@@ -1,837 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.AccessControl")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.AccessControl")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.AccessControl")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Security.AccessControl
-{
-    [Flags]
-    public enum AccessControlActions
-    {
-        None = 0,
-        View = 1,
-        Change = 2
-    }
-
-    public enum AccessControlModification
-    {
-        Add = 0,
-        Set = 1,
-        Reset = 2,
-        Remove = 3,
-        RemoveAll = 4,
-        RemoveSpecific = 5
-    }
-
-    [Flags]
-    public enum AccessControlSections
-    {
-        None = 0,
-        Audit = 1,
-        Access = 2,
-        Owner = 4,
-        Group = 8,
-        All = 15
-    }
-
-    public enum AccessControlType
-    {
-        Allow = 0,
-        Deny = 1
-    }
-
-    public abstract partial class AccessRule : AuthorizationRule
-    {
-        protected AccessRule(Principal.IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) : base(default!, default, default, default, default) { }
-
-        public AccessControlType AccessControlType { get { throw null; } }
-    }
-
-    public partial class AccessRule<T> : AccessRule where T : struct
-    {
-        public AccessRule(Principal.IdentityReference identity, T rights, AccessControlType type) : base(default!, default, default, default, default, default) { }
-
-        public AccessRule(Principal.IdentityReference identity, T rights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) : base(default!, default, default, default, default, default) { }
-
-        public AccessRule(string identity, T rights, AccessControlType type) : base(default!, default, default, default, default, default) { }
-
-        public AccessRule(string identity, T rights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) : base(default!, default, default, default, default, default) { }
-
-        public T Rights { get { throw null; } }
-    }
-
-    public sealed partial class AceEnumerator : Collections.IEnumerator
-    {
-        internal AceEnumerator() { }
-
-        public GenericAce Current { get { throw null; } }
-
-        object Collections.IEnumerator.Current { get { throw null; } }
-
-        public bool MoveNext() { throw null; }
-
-        public void Reset() { }
-    }
-
-    [Flags]
-    public enum AceFlags : byte
-    {
-        None = 0,
-        ObjectInherit = 1,
-        ContainerInherit = 2,
-        NoPropagateInherit = 4,
-        InheritOnly = 8,
-        InheritanceFlags = 15,
-        Inherited = 16,
-        SuccessfulAccess = 64,
-        FailedAccess = 128,
-        AuditFlags = 192
-    }
-
-    public enum AceQualifier
-    {
-        AccessAllowed = 0,
-        AccessDenied = 1,
-        SystemAudit = 2,
-        SystemAlarm = 3
-    }
-
-    public enum AceType : byte
-    {
-        AccessAllowed = 0,
-        AccessDenied = 1,
-        SystemAudit = 2,
-        SystemAlarm = 3,
-        AccessAllowedCompound = 4,
-        AccessAllowedObject = 5,
-        AccessDeniedObject = 6,
-        SystemAuditObject = 7,
-        SystemAlarmObject = 8,
-        AccessAllowedCallback = 9,
-        AccessDeniedCallback = 10,
-        AccessAllowedCallbackObject = 11,
-        AccessDeniedCallbackObject = 12,
-        SystemAuditCallback = 13,
-        SystemAlarmCallback = 14,
-        SystemAuditCallbackObject = 15,
-        MaxDefinedAceType = 16,
-        SystemAlarmCallbackObject = 16
-    }
-
-    [Flags]
-    public enum AuditFlags
-    {
-        None = 0,
-        Success = 1,
-        Failure = 2
-    }
-
-    public abstract partial class AuditRule : AuthorizationRule
-    {
-        protected AuditRule(Principal.IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags auditFlags) : base(default!, default, default, default, default) { }
-
-        public AuditFlags AuditFlags { get { throw null; } }
-    }
-
-    public partial class AuditRule<T> : AuditRule where T : struct
-    {
-        public AuditRule(Principal.IdentityReference identity, T rights, AuditFlags flags) : base(default!, default, default, default, default, default) { }
-
-        public AuditRule(Principal.IdentityReference identity, T rights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) : base(default!, default, default, default, default, default) { }
-
-        public AuditRule(string identity, T rights, AuditFlags flags) : base(default!, default, default, default, default, default) { }
-
-        public AuditRule(string identity, T rights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) : base(default!, default, default, default, default, default) { }
-
-        public T Rights { get { throw null; } }
-    }
-
-    public abstract partial class AuthorizationRule
-    {
-        protected internal AuthorizationRule(Principal.IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) { }
-
-        protected internal int AccessMask { get { throw null; } }
-
-        public Principal.IdentityReference IdentityReference { get { throw null; } }
-
-        public InheritanceFlags InheritanceFlags { get { throw null; } }
-
-        public bool IsInherited { get { throw null; } }
-
-        public PropagationFlags PropagationFlags { get { throw null; } }
-    }
-
-    public sealed partial class AuthorizationRuleCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        public int Count { get { throw null; } }
-
-        public AuthorizationRule this[int index] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public void AddRule(AuthorizationRule rule) { }
-
-        public void CopyTo(AuthorizationRule[] rules, int index) { }
-
-        void Collections.ICollection.CopyTo(Array array, int index) { }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-    }
-
-    public sealed partial class CommonAce : QualifiedAce
-    {
-        public CommonAce(AceFlags flags, AceQualifier qualifier, int accessMask, Principal.SecurityIdentifier sid, bool isCallback, byte[] opaque) { }
-
-        public override int BinaryLength { get { throw null; } }
-
-        public override void GetBinaryForm(byte[] binaryForm, int offset) { }
-
-        public static int MaxOpaqueLength(bool isCallback) { throw null; }
-    }
-
-    public abstract partial class CommonAcl : GenericAcl
-    {
-        internal CommonAcl() { }
-
-        public sealed override int BinaryLength { get { throw null; } }
-
-        public sealed override int Count { get { throw null; } }
-
-        public bool IsCanonical { get { throw null; } }
-
-        public bool IsContainer { get { throw null; } }
-
-        public bool IsDS { get { throw null; } }
-
-        public sealed override GenericAce this[int index] { get { throw null; } set { } }
-
-        public sealed override byte Revision { get { throw null; } }
-
-        public sealed override void GetBinaryForm(byte[] binaryForm, int offset) { }
-
-        public void Purge(Principal.SecurityIdentifier sid) { }
-
-        public void RemoveInheritedAces() { }
-    }
-
-    public abstract partial class CommonObjectSecurity : ObjectSecurity
-    {
-        protected CommonObjectSecurity(bool isContainer) { }
-
-        protected void AddAccessRule(AccessRule rule) { }
-
-        protected void AddAuditRule(AuditRule rule) { }
-
-        public AuthorizationRuleCollection GetAccessRules(bool includeExplicit, bool includeInherited, Type targetType) { throw null; }
-
-        public AuthorizationRuleCollection GetAuditRules(bool includeExplicit, bool includeInherited, Type targetType) { throw null; }
-
-        protected override bool ModifyAccess(AccessControlModification modification, AccessRule rule, out bool modified) { throw null; }
-
-        protected override bool ModifyAudit(AccessControlModification modification, AuditRule rule, out bool modified) { throw null; }
-
-        protected bool RemoveAccessRule(AccessRule rule) { throw null; }
-
-        protected void RemoveAccessRuleAll(AccessRule rule) { }
-
-        protected void RemoveAccessRuleSpecific(AccessRule rule) { }
-
-        protected bool RemoveAuditRule(AuditRule rule) { throw null; }
-
-        protected void RemoveAuditRuleAll(AuditRule rule) { }
-
-        protected void RemoveAuditRuleSpecific(AuditRule rule) { }
-
-        protected void ResetAccessRule(AccessRule rule) { }
-
-        protected void SetAccessRule(AccessRule rule) { }
-
-        protected void SetAuditRule(AuditRule rule) { }
-    }
-
-    public sealed partial class CommonSecurityDescriptor : GenericSecurityDescriptor
-    {
-        public CommonSecurityDescriptor(bool isContainer, bool isDS, byte[] binaryForm, int offset) { }
-
-        public CommonSecurityDescriptor(bool isContainer, bool isDS, ControlFlags flags, Principal.SecurityIdentifier owner, Principal.SecurityIdentifier group, SystemAcl systemAcl, DiscretionaryAcl discretionaryAcl) { }
-
-        public CommonSecurityDescriptor(bool isContainer, bool isDS, RawSecurityDescriptor rawSecurityDescriptor) { }
-
-        public CommonSecurityDescriptor(bool isContainer, bool isDS, string sddlForm) { }
-
-        public override ControlFlags ControlFlags { get { throw null; } }
-
-        public DiscretionaryAcl DiscretionaryAcl { get { throw null; } set { } }
-
-        public override Principal.SecurityIdentifier Group { get { throw null; } set { } }
-
-        public bool IsContainer { get { throw null; } }
-
-        public bool IsDiscretionaryAclCanonical { get { throw null; } }
-
-        public bool IsDS { get { throw null; } }
-
-        public bool IsSystemAclCanonical { get { throw null; } }
-
-        public override Principal.SecurityIdentifier Owner { get { throw null; } set { } }
-
-        public SystemAcl SystemAcl { get { throw null; } set { } }
-
-        public void AddDiscretionaryAcl(byte revision, int trusted) { }
-
-        public void AddSystemAcl(byte revision, int trusted) { }
-
-        public void PurgeAccessControl(Principal.SecurityIdentifier sid) { }
-
-        public void PurgeAudit(Principal.SecurityIdentifier sid) { }
-
-        public void SetDiscretionaryAclProtection(bool isProtected, bool preserveInheritance) { }
-
-        public void SetSystemAclProtection(bool isProtected, bool preserveInheritance) { }
-    }
-
-    public sealed partial class CompoundAce : KnownAce
-    {
-        public CompoundAce(AceFlags flags, int accessMask, CompoundAceType compoundAceType, Principal.SecurityIdentifier sid) { }
-
-        public override int BinaryLength { get { throw null; } }
-
-        public CompoundAceType CompoundAceType { get { throw null; } set { } }
-
-        public override void GetBinaryForm(byte[] binaryForm, int offset) { }
-    }
-
-    public enum CompoundAceType
-    {
-        Impersonation = 1
-    }
-
-    [Flags]
-    public enum ControlFlags
-    {
-        None = 0,
-        OwnerDefaulted = 1,
-        GroupDefaulted = 2,
-        DiscretionaryAclPresent = 4,
-        DiscretionaryAclDefaulted = 8,
-        SystemAclPresent = 16,
-        SystemAclDefaulted = 32,
-        DiscretionaryAclUntrusted = 64,
-        ServerSecurity = 128,
-        DiscretionaryAclAutoInheritRequired = 256,
-        SystemAclAutoInheritRequired = 512,
-        DiscretionaryAclAutoInherited = 1024,
-        SystemAclAutoInherited = 2048,
-        DiscretionaryAclProtected = 4096,
-        SystemAclProtected = 8192,
-        RMControlValid = 16384,
-        SelfRelative = 32768
-    }
-
-    public sealed partial class CustomAce : GenericAce
-    {
-        public static readonly int MaxOpaqueLength;
-        public CustomAce(AceType type, AceFlags flags, byte[] opaque) { }
-
-        public override int BinaryLength { get { throw null; } }
-
-        public int OpaqueLength { get { throw null; } }
-
-        public override void GetBinaryForm(byte[] binaryForm, int offset) { }
-
-        public byte[] GetOpaque() { throw null; }
-
-        public void SetOpaque(byte[] opaque) { }
-    }
-
-    public sealed partial class DiscretionaryAcl : CommonAcl
-    {
-        public DiscretionaryAcl(bool isContainer, bool isDS, byte revision, int capacity) { }
-
-        public DiscretionaryAcl(bool isContainer, bool isDS, int capacity) { }
-
-        public DiscretionaryAcl(bool isContainer, bool isDS, RawAcl rawAcl) { }
-
-        public void AddAccess(AccessControlType accessType, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType) { }
-
-        public void AddAccess(AccessControlType accessType, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) { }
-
-        public void AddAccess(AccessControlType accessType, Principal.SecurityIdentifier sid, ObjectAccessRule rule) { }
-
-        public bool RemoveAccess(AccessControlType accessType, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType) { throw null; }
-
-        public bool RemoveAccess(AccessControlType accessType, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) { throw null; }
-
-        public bool RemoveAccess(AccessControlType accessType, Principal.SecurityIdentifier sid, ObjectAccessRule rule) { throw null; }
-
-        public void RemoveAccessSpecific(AccessControlType accessType, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType) { }
-
-        public void RemoveAccessSpecific(AccessControlType accessType, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) { }
-
-        public void RemoveAccessSpecific(AccessControlType accessType, Principal.SecurityIdentifier sid, ObjectAccessRule rule) { }
-
-        public void SetAccess(AccessControlType accessType, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType) { }
-
-        public void SetAccess(AccessControlType accessType, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) { }
-
-        public void SetAccess(AccessControlType accessType, Principal.SecurityIdentifier sid, ObjectAccessRule rule) { }
-    }
-
-    public abstract partial class GenericAce
-    {
-        internal GenericAce() { }
-
-        public AceFlags AceFlags { get { throw null; } set { } }
-
-        public AceType AceType { get { throw null; } }
-
-        public AuditFlags AuditFlags { get { throw null; } }
-
-        public abstract int BinaryLength { get; }
-
-        public InheritanceFlags InheritanceFlags { get { throw null; } }
-
-        public bool IsInherited { get { throw null; } }
-
-        public PropagationFlags PropagationFlags { get { throw null; } }
-
-        public GenericAce Copy() { throw null; }
-
-        public static GenericAce CreateFromBinaryForm(byte[] binaryForm, int offset) { throw null; }
-
-        public sealed override bool Equals(object o) { throw null; }
-
-        public abstract void GetBinaryForm(byte[] binaryForm, int offset);
-        public sealed override int GetHashCode() { throw null; }
-
-        public static bool operator ==(GenericAce left, GenericAce right) { throw null; }
-
-        public static bool operator !=(GenericAce left, GenericAce right) { throw null; }
-    }
-
-    public abstract partial class GenericAcl : Collections.ICollection, Collections.IEnumerable
-    {
-        public static readonly byte AclRevision;
-        public static readonly byte AclRevisionDS;
-        public static readonly int MaxBinaryLength;
-        public abstract int BinaryLength { get; }
-        public abstract int Count { get; }
-
-        public bool IsSynchronized { get { throw null; } }
-
-        public abstract GenericAce this[int index] { get; set; }
-
-        public abstract byte Revision { get; }
-
-        public virtual object SyncRoot { get { throw null; } }
-
-        public void CopyTo(GenericAce[] array, int index) { }
-
-        public abstract void GetBinaryForm(byte[] binaryForm, int offset);
-        public AceEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int index) { }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-    }
-
-    public abstract partial class GenericSecurityDescriptor
-    {
-        public int BinaryLength { get { throw null; } }
-
-        public abstract ControlFlags ControlFlags { get; }
-        public abstract Principal.SecurityIdentifier Group { get; set; }
-        public abstract Principal.SecurityIdentifier Owner { get; set; }
-
-        public static byte Revision { get { throw null; } }
-
-        public void GetBinaryForm(byte[] binaryForm, int offset) { }
-
-        public string GetSddlForm(AccessControlSections includeSections) { throw null; }
-
-        public static bool IsSddlConversionSupported() { throw null; }
-    }
-
-    [Flags]
-    public enum InheritanceFlags
-    {
-        None = 0,
-        ContainerInherit = 1,
-        ObjectInherit = 2
-    }
-
-    public abstract partial class KnownAce : GenericAce
-    {
-        internal KnownAce() { }
-
-        public int AccessMask { get { throw null; } set { } }
-
-        public Principal.SecurityIdentifier SecurityIdentifier { get { throw null; } set { } }
-    }
-
-    public abstract partial class NativeObjectSecurity : CommonObjectSecurity
-    {
-        protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, Runtime.InteropServices.SafeHandle handle, AccessControlSections includeSections, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext) : base(default) { }
-
-        protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, Runtime.InteropServices.SafeHandle handle, AccessControlSections includeSections) : base(default) { }
-
-        protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext) : base(default) { }
-
-        protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, string name, AccessControlSections includeSections, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext) : base(default) { }
-
-        protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, string name, AccessControlSections includeSections) : base(default) { }
-
-        protected NativeObjectSecurity(bool isContainer, ResourceType resourceType) : base(default) { }
-
-        protected void Persist(Runtime.InteropServices.SafeHandle handle, AccessControlSections includeSections, object exceptionContext) { }
-
-        protected sealed override void Persist(Runtime.InteropServices.SafeHandle handle, AccessControlSections includeSections) { }
-
-        protected void Persist(string name, AccessControlSections includeSections, object exceptionContext) { }
-
-        protected sealed override void Persist(string name, AccessControlSections includeSections) { }
-
-        protected internal delegate Exception ExceptionFromErrorCode(int errorCode, string name, Runtime.InteropServices.SafeHandle handle, object context);
-    }
-
-    public abstract partial class ObjectAccessRule : AccessRule
-    {
-        protected ObjectAccessRule(Principal.IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, Guid objectType, Guid inheritedObjectType, AccessControlType type) : base(default!, default, default, default, default, default) { }
-
-        public Guid InheritedObjectType { get { throw null; } }
-
-        public ObjectAceFlags ObjectFlags { get { throw null; } }
-
-        public Guid ObjectType { get { throw null; } }
-    }
-
-    public sealed partial class ObjectAce : QualifiedAce
-    {
-        public ObjectAce(AceFlags aceFlags, AceQualifier qualifier, int accessMask, Principal.SecurityIdentifier sid, ObjectAceFlags flags, Guid type, Guid inheritedType, bool isCallback, byte[] opaque) { }
-
-        public override int BinaryLength { get { throw null; } }
-
-        public Guid InheritedObjectAceType { get { throw null; } set { } }
-
-        public ObjectAceFlags ObjectAceFlags { get { throw null; } set { } }
-
-        public Guid ObjectAceType { get { throw null; } set { } }
-
-        public override void GetBinaryForm(byte[] binaryForm, int offset) { }
-
-        public static int MaxOpaqueLength(bool isCallback) { throw null; }
-    }
-
-    [Flags]
-    public enum ObjectAceFlags
-    {
-        None = 0,
-        ObjectAceTypePresent = 1,
-        InheritedObjectAceTypePresent = 2
-    }
-
-    public abstract partial class ObjectAuditRule : AuditRule
-    {
-        protected ObjectAuditRule(Principal.IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, Guid objectType, Guid inheritedObjectType, AuditFlags auditFlags) : base(default!, default, default, default, default, default) { }
-
-        public Guid InheritedObjectType { get { throw null; } }
-
-        public ObjectAceFlags ObjectFlags { get { throw null; } }
-
-        public Guid ObjectType { get { throw null; } }
-    }
-
-    public abstract partial class ObjectSecurity
-    {
-        protected ObjectSecurity() { }
-
-        protected ObjectSecurity(bool isContainer, bool isDS) { }
-
-        protected ObjectSecurity(CommonSecurityDescriptor securityDescriptor) { }
-
-        public abstract Type AccessRightType { get; }
-
-        protected bool AccessRulesModified { get { throw null; } set { } }
-
-        public abstract Type AccessRuleType { get; }
-
-        public bool AreAccessRulesCanonical { get { throw null; } }
-
-        public bool AreAccessRulesProtected { get { throw null; } }
-
-        public bool AreAuditRulesCanonical { get { throw null; } }
-
-        public bool AreAuditRulesProtected { get { throw null; } }
-
-        protected bool AuditRulesModified { get { throw null; } set { } }
-
-        public abstract Type AuditRuleType { get; }
-
-        protected bool GroupModified { get { throw null; } set { } }
-
-        protected bool IsContainer { get { throw null; } }
-
-        protected bool IsDS { get { throw null; } }
-
-        protected bool OwnerModified { get { throw null; } set { } }
-
-        public abstract AccessRule AccessRuleFactory(Principal.IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
-        public abstract AuditRule AuditRuleFactory(Principal.IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
-        public Principal.IdentityReference GetGroup(Type targetType) { throw null; }
-
-        public Principal.IdentityReference GetOwner(Type targetType) { throw null; }
-
-        public byte[] GetSecurityDescriptorBinaryForm() { throw null; }
-
-        public string GetSecurityDescriptorSddlForm(AccessControlSections includeSections) { throw null; }
-
-        public static bool IsSddlConversionSupported() { throw null; }
-
-        protected abstract bool ModifyAccess(AccessControlModification modification, AccessRule rule, out bool modified);
-        public virtual bool ModifyAccessRule(AccessControlModification modification, AccessRule rule, out bool modified) { throw null; }
-
-        protected abstract bool ModifyAudit(AccessControlModification modification, AuditRule rule, out bool modified);
-        public virtual bool ModifyAuditRule(AccessControlModification modification, AuditRule rule, out bool modified) { throw null; }
-
-        protected virtual void Persist(bool enableOwnershipPrivilege, string name, AccessControlSections includeSections) { }
-
-        protected virtual void Persist(Runtime.InteropServices.SafeHandle handle, AccessControlSections includeSections) { }
-
-        protected virtual void Persist(string name, AccessControlSections includeSections) { }
-
-        public virtual void PurgeAccessRules(Principal.IdentityReference identity) { }
-
-        public virtual void PurgeAuditRules(Principal.IdentityReference identity) { }
-
-        protected void ReadLock() { }
-
-        protected void ReadUnlock() { }
-
-        public void SetAccessRuleProtection(bool isProtected, bool preserveInheritance) { }
-
-        public void SetAuditRuleProtection(bool isProtected, bool preserveInheritance) { }
-
-        public void SetGroup(Principal.IdentityReference identity) { }
-
-        public void SetOwner(Principal.IdentityReference identity) { }
-
-        public void SetSecurityDescriptorBinaryForm(byte[] binaryForm, AccessControlSections includeSections) { }
-
-        public void SetSecurityDescriptorBinaryForm(byte[] binaryForm) { }
-
-        public void SetSecurityDescriptorSddlForm(string sddlForm, AccessControlSections includeSections) { }
-
-        public void SetSecurityDescriptorSddlForm(string sddlForm) { }
-
-        protected void WriteLock() { }
-
-        protected void WriteUnlock() { }
-    }
-
-    public abstract partial class ObjectSecurity<T> : NativeObjectSecurity where T : struct
-    {
-        protected ObjectSecurity(bool isContainer, ResourceType resourceType, Runtime.InteropServices.SafeHandle safeHandle, AccessControlSections includeSections, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext) : base(default, default) { }
-
-        protected ObjectSecurity(bool isContainer, ResourceType resourceType, Runtime.InteropServices.SafeHandle safeHandle, AccessControlSections includeSections) : base(default, default) { }
-
-        protected ObjectSecurity(bool isContainer, ResourceType resourceType, string name, AccessControlSections includeSections, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext) : base(default, default) { }
-
-        protected ObjectSecurity(bool isContainer, ResourceType resourceType, string name, AccessControlSections includeSections) : base(default, default) { }
-
-        protected ObjectSecurity(bool isContainer, ResourceType resourceType) : base(default, default) { }
-
-        public override Type AccessRightType { get { throw null; } }
-
-        public override Type AccessRuleType { get { throw null; } }
-
-        public override Type AuditRuleType { get { throw null; } }
-
-        public override AccessRule AccessRuleFactory(Principal.IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type) { throw null; }
-
-        public virtual void AddAccessRule(AccessRule<T> rule) { }
-
-        public virtual void AddAuditRule(AuditRule<T> rule) { }
-
-        public override AuditRule AuditRuleFactory(Principal.IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags) { throw null; }
-
-        protected internal void Persist(Runtime.InteropServices.SafeHandle handle) { }
-
-        protected internal void Persist(string name) { }
-
-        public virtual bool RemoveAccessRule(AccessRule<T> rule) { throw null; }
-
-        public virtual void RemoveAccessRuleAll(AccessRule<T> rule) { }
-
-        public virtual void RemoveAccessRuleSpecific(AccessRule<T> rule) { }
-
-        public virtual bool RemoveAuditRule(AuditRule<T> rule) { throw null; }
-
-        public virtual void RemoveAuditRuleAll(AuditRule<T> rule) { }
-
-        public virtual void RemoveAuditRuleSpecific(AuditRule<T> rule) { }
-
-        public virtual void ResetAccessRule(AccessRule<T> rule) { }
-
-        public virtual void SetAccessRule(AccessRule<T> rule) { }
-
-        public virtual void SetAuditRule(AuditRule<T> rule) { }
-    }
-
-    public sealed partial class PrivilegeNotHeldException : UnauthorizedAccessException
-    {
-        public PrivilegeNotHeldException() { }
-
-        public PrivilegeNotHeldException(string privilege, Exception inner) { }
-
-        public PrivilegeNotHeldException(string privilege) { }
-
-        public string PrivilegeName { get { throw null; } }
-    }
-
-    [Flags]
-    public enum PropagationFlags
-    {
-        None = 0,
-        NoPropagateInherit = 1,
-        InheritOnly = 2
-    }
-
-    public abstract partial class QualifiedAce : KnownAce
-    {
-        internal QualifiedAce() { }
-
-        public AceQualifier AceQualifier { get { throw null; } }
-
-        public bool IsCallback { get { throw null; } }
-
-        public int OpaqueLength { get { throw null; } }
-
-        public byte[] GetOpaque() { throw null; }
-
-        public void SetOpaque(byte[] opaque) { }
-    }
-
-    public sealed partial class RawAcl : GenericAcl
-    {
-        public RawAcl(byte revision, int capacity) { }
-
-        public RawAcl(byte[] binaryForm, int offset) { }
-
-        public override int BinaryLength { get { throw null; } }
-
-        public override int Count { get { throw null; } }
-
-        public override GenericAce this[int index] { get { throw null; } set { } }
-
-        public override byte Revision { get { throw null; } }
-
-        public override void GetBinaryForm(byte[] binaryForm, int offset) { }
-
-        public void InsertAce(int index, GenericAce ace) { }
-
-        public void RemoveAce(int index) { }
-    }
-
-    public sealed partial class RawSecurityDescriptor : GenericSecurityDescriptor
-    {
-        public RawSecurityDescriptor(byte[] binaryForm, int offset) { }
-
-        public RawSecurityDescriptor(ControlFlags flags, Principal.SecurityIdentifier owner, Principal.SecurityIdentifier group, RawAcl systemAcl, RawAcl discretionaryAcl) { }
-
-        public RawSecurityDescriptor(string sddlForm) { }
-
-        public override ControlFlags ControlFlags { get { throw null; } }
-
-        public RawAcl DiscretionaryAcl { get { throw null; } set { } }
-
-        public override Principal.SecurityIdentifier Group { get { throw null; } set { } }
-
-        public override Principal.SecurityIdentifier Owner { get { throw null; } set { } }
-
-        public byte ResourceManagerControl { get { throw null; } set { } }
-
-        public RawAcl SystemAcl { get { throw null; } set { } }
-
-        public void SetFlags(ControlFlags flags) { }
-    }
-
-    public enum ResourceType
-    {
-        Unknown = 0,
-        FileObject = 1,
-        Service = 2,
-        Printer = 3,
-        RegistryKey = 4,
-        LMShare = 5,
-        KernelObject = 6,
-        WindowObject = 7,
-        DSObject = 8,
-        DSObjectAll = 9,
-        ProviderDefined = 10,
-        WmiGuidObject = 11,
-        RegistryWow6432Key = 12
-    }
-
-    [Flags]
-    public enum SecurityInfos
-    {
-        Owner = 1,
-        Group = 2,
-        DiscretionaryAcl = 4,
-        SystemAcl = 8
-    }
-
-    public sealed partial class SystemAcl : CommonAcl
-    {
-        public SystemAcl(bool isContainer, bool isDS, byte revision, int capacity) { }
-
-        public SystemAcl(bool isContainer, bool isDS, int capacity) { }
-
-        public SystemAcl(bool isContainer, bool isDS, RawAcl rawAcl) { }
-
-        public void AddAudit(AuditFlags auditFlags, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType) { }
-
-        public void AddAudit(AuditFlags auditFlags, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) { }
-
-        public void AddAudit(Principal.SecurityIdentifier sid, ObjectAuditRule rule) { }
-
-        public bool RemoveAudit(AuditFlags auditFlags, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType) { throw null; }
-
-        public bool RemoveAudit(AuditFlags auditFlags, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) { throw null; }
-
-        public bool RemoveAudit(Principal.SecurityIdentifier sid, ObjectAuditRule rule) { throw null; }
-
-        public void RemoveAuditSpecific(AuditFlags auditFlags, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType) { }
-
-        public void RemoveAuditSpecific(AuditFlags auditFlags, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) { }
-
-        public void RemoveAuditSpecific(Principal.SecurityIdentifier sid, ObjectAuditRule rule) { }
-
-        public void SetAudit(AuditFlags auditFlags, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType) { }
-
-        public void SetAudit(AuditFlags auditFlags, Principal.SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags) { }
-
-        public void SetAudit(Principal.SecurityIdentifier sid, ObjectAuditRule rule) { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.accesscontrol/5.0.0/system.security.accesscontrol.nuspec b/src/referencePackages/src/system.security.accesscontrol/5.0.0/system.security.accesscontrol.nuspec
index 36a750ef..d78a513b 100644
--- a/src/referencePackages/src/system.security.accesscontrol/5.0.0/system.security.accesscontrol.nuspec
+++ b/src/referencePackages/src/system.security.accesscontrol/5.0.0/system.security.accesscontrol.nuspec
@@ -26,11 +26,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <serviceable>true</serviceable>
     <repository type="git" url="git://github.com/dotnet/runtime" commit="cf258a14b70ad9069470a108f13765e0e5988f51" />
     <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-        <dependency id="System.Security.Principal.Windows" version="5.0.0" />
-        <dependency id="System.Threading.Thread" version="4.3.0" exclude="Compile" />
-      </group>
       <group targetFramework=".NETStandard2.0">
         <dependency id="System.Security.Principal.Windows" version="5.0.0" />
       </group>
diff --git a/src/referencePackages/src/system.security.claims/4.3.0/System.Security.Claims.4.3.0.csproj b/src/referencePackages/src/system.security.claims/4.3.0/System.Security.Claims.4.3.0.csproj
deleted file mode 100644
index 6a43005a..00000000
--- a/src/referencePackages/src/system.security.claims/4.3.0/System.Security.Claims.4.3.0.csproj
+++ /dev/null
@@ -1,18 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Security.Claims</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Globalization" Version="4.3.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Security.Principal" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.security.claims/4.3.0/ref/netstandard1.3/System.Security.Claims.cs b/src/referencePackages/src/system.security.claims/4.3.0/ref/netstandard1.3/System.Security.Claims.cs
deleted file mode 100644
index 4dd7c43b..00000000
--- a/src/referencePackages/src/system.security.claims/4.3.0/ref/netstandard1.3/System.Security.Claims.cs
+++ /dev/null
@@ -1,322 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Claims")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Claims")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Claims")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.1.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Security.Claims
-{
-    public partial class Claim
-    {
-        public Claim(IO.BinaryReader reader, ClaimsIdentity subject) { }
-
-        public Claim(IO.BinaryReader reader) { }
-
-        protected Claim(Claim other, ClaimsIdentity subject) { }
-
-        protected Claim(Claim other) { }
-
-        public Claim(string type, string value, string valueType, string issuer, string originalIssuer, ClaimsIdentity subject) { }
-
-        public Claim(string type, string value, string valueType, string issuer, string originalIssuer) { }
-
-        public Claim(string type, string value, string valueType, string issuer) { }
-
-        public Claim(string type, string value, string valueType) { }
-
-        public Claim(string type, string value) { }
-
-        protected virtual byte[] CustomSerializationData { get { throw null; } }
-
-        public string Issuer { get { throw null; } }
-
-        public string OriginalIssuer { get { throw null; } }
-
-        public Collections.Generic.IDictionary<string, string> Properties { get { throw null; } }
-
-        public ClaimsIdentity Subject { get { throw null; } }
-
-        public string Type { get { throw null; } }
-
-        public string Value { get { throw null; } }
-
-        public string ValueType { get { throw null; } }
-
-        public virtual Claim Clone() { throw null; }
-
-        public virtual Claim Clone(ClaimsIdentity identity) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        protected virtual void WriteTo(IO.BinaryWriter writer, byte[] userData) { }
-
-        public virtual void WriteTo(IO.BinaryWriter writer) { }
-    }
-
-    public partial class ClaimsIdentity : Principal.IIdentity
-    {
-        public const string DefaultIssuer = "LOCAL AUTHORITY";
-        public const string DefaultNameClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name";
-        public const string DefaultRoleClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role";
-        public ClaimsIdentity() { }
-
-        public ClaimsIdentity(Collections.Generic.IEnumerable<Claim> claims, string authenticationType, string nameType, string roleType) { }
-
-        public ClaimsIdentity(Collections.Generic.IEnumerable<Claim> claims, string authenticationType) { }
-
-        public ClaimsIdentity(Collections.Generic.IEnumerable<Claim> claims) { }
-
-        public ClaimsIdentity(IO.BinaryReader reader) { }
-
-        protected ClaimsIdentity(ClaimsIdentity other) { }
-
-        public ClaimsIdentity(Principal.IIdentity identity, Collections.Generic.IEnumerable<Claim> claims, string authenticationType, string nameType, string roleType) { }
-
-        public ClaimsIdentity(Principal.IIdentity identity, Collections.Generic.IEnumerable<Claim> claims) { }
-
-        public ClaimsIdentity(Principal.IIdentity identity) { }
-
-        public ClaimsIdentity(string authenticationType, string nameType, string roleType) { }
-
-        public ClaimsIdentity(string authenticationType) { }
-
-        public ClaimsIdentity Actor { get { throw null; } set { } }
-
-        public virtual string AuthenticationType { get { throw null; } }
-
-        public object BootstrapContext { get { throw null; } set { } }
-
-        public virtual Collections.Generic.IEnumerable<Claim> Claims { get { throw null; } }
-
-        protected virtual byte[] CustomSerializationData { get { throw null; } }
-
-        public virtual bool IsAuthenticated { get { throw null; } }
-
-        public string Label { get { throw null; } set { } }
-
-        public virtual string Name { get { throw null; } }
-
-        public string NameClaimType { get { throw null; } }
-
-        public string RoleClaimType { get { throw null; } }
-
-        public virtual void AddClaim(Claim claim) { }
-
-        public virtual void AddClaims(Collections.Generic.IEnumerable<Claim> claims) { }
-
-        public virtual ClaimsIdentity Clone() { throw null; }
-
-        protected virtual Claim CreateClaim(IO.BinaryReader reader) { throw null; }
-
-        public virtual Collections.Generic.IEnumerable<Claim> FindAll(Predicate<Claim> match) { throw null; }
-
-        public virtual Collections.Generic.IEnumerable<Claim> FindAll(string type) { throw null; }
-
-        public virtual Claim FindFirst(Predicate<Claim> match) { throw null; }
-
-        public virtual Claim FindFirst(string type) { throw null; }
-
-        public virtual bool HasClaim(Predicate<Claim> match) { throw null; }
-
-        public virtual bool HasClaim(string type, string value) { throw null; }
-
-        public virtual void RemoveClaim(Claim claim) { }
-
-        public virtual bool TryRemoveClaim(Claim claim) { throw null; }
-
-        protected virtual void WriteTo(IO.BinaryWriter writer, byte[] userData) { }
-
-        public virtual void WriteTo(IO.BinaryWriter writer) { }
-    }
-
-    public partial class ClaimsPrincipal : Principal.IPrincipal
-    {
-        public ClaimsPrincipal() { }
-
-        public ClaimsPrincipal(Collections.Generic.IEnumerable<ClaimsIdentity> identities) { }
-
-        public ClaimsPrincipal(IO.BinaryReader reader) { }
-
-        public ClaimsPrincipal(Principal.IIdentity identity) { }
-
-        public ClaimsPrincipal(Principal.IPrincipal principal) { }
-
-        public virtual Collections.Generic.IEnumerable<Claim> Claims { get { throw null; } }
-
-        public static Func<ClaimsPrincipal> ClaimsPrincipalSelector { get { throw null; } set { } }
-
-        public static ClaimsPrincipal Current { get { throw null; } }
-
-        protected virtual byte[] CustomSerializationData { get { throw null; } }
-
-        public virtual Collections.Generic.IEnumerable<ClaimsIdentity> Identities { get { throw null; } }
-
-        public virtual Principal.IIdentity Identity { get { throw null; } }
-
-        public static Func<Collections.Generic.IEnumerable<ClaimsIdentity>, ClaimsIdentity> PrimaryIdentitySelector { get { throw null; } set { } }
-
-        public virtual void AddIdentities(Collections.Generic.IEnumerable<ClaimsIdentity> identities) { }
-
-        public virtual void AddIdentity(ClaimsIdentity identity) { }
-
-        public virtual ClaimsPrincipal Clone() { throw null; }
-
-        protected virtual ClaimsIdentity CreateClaimsIdentity(IO.BinaryReader reader) { throw null; }
-
-        public virtual Collections.Generic.IEnumerable<Claim> FindAll(Predicate<Claim> match) { throw null; }
-
-        public virtual Collections.Generic.IEnumerable<Claim> FindAll(string type) { throw null; }
-
-        public virtual Claim FindFirst(Predicate<Claim> match) { throw null; }
-
-        public virtual Claim FindFirst(string type) { throw null; }
-
-        public virtual bool HasClaim(Predicate<Claim> match) { throw null; }
-
-        public virtual bool HasClaim(string type, string value) { throw null; }
-
-        public virtual bool IsInRole(string role) { throw null; }
-
-        protected virtual void WriteTo(IO.BinaryWriter writer, byte[] userData) { }
-
-        public virtual void WriteTo(IO.BinaryWriter writer) { }
-    }
-
-    public static partial class ClaimTypes
-    {
-        public const string Actor = "http://schemas.xmlsoap.org/ws/2009/09/identity/claims/actor";
-        public const string Anonymous = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/anonymous";
-        public const string Authentication = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication";
-        public const string AuthenticationInstant = "http://schemas.microsoft.com/ws/2008/06/identity/claims/authenticationinstant";
-        public const string AuthenticationMethod = "http://schemas.microsoft.com/ws/2008/06/identity/claims/authenticationmethod";
-        public const string AuthorizationDecision = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authorizationdecision";
-        public const string CookiePath = "http://schemas.microsoft.com/ws/2008/06/identity/claims/cookiepath";
-        public const string Country = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country";
-        public const string DateOfBirth = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth";
-        public const string DenyOnlyPrimaryGroupSid = "http://schemas.microsoft.com/ws/2008/06/identity/claims/denyonlyprimarygroupsid";
-        public const string DenyOnlyPrimarySid = "http://schemas.microsoft.com/ws/2008/06/identity/claims/denyonlyprimarysid";
-        public const string DenyOnlySid = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/denyonlysid";
-        public const string DenyOnlyWindowsDeviceGroup = "http://schemas.microsoft.com/ws/2008/06/identity/claims/denyonlywindowsdevicegroup";
-        public const string Dns = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dns";
-        public const string Dsa = "http://schemas.microsoft.com/ws/2008/06/identity/claims/dsa";
-        public const string Email = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress";
-        public const string Expiration = "http://schemas.microsoft.com/ws/2008/06/identity/claims/expiration";
-        public const string Expired = "http://schemas.microsoft.com/ws/2008/06/identity/claims/expired";
-        public const string Gender = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/gender";
-        public const string GivenName = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname";
-        public const string GroupSid = "http://schemas.microsoft.com/ws/2008/06/identity/claims/groupsid";
-        public const string Hash = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/hash";
-        public const string HomePhone = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/homephone";
-        public const string IsPersistent = "http://schemas.microsoft.com/ws/2008/06/identity/claims/ispersistent";
-        public const string Locality = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/locality";
-        public const string MobilePhone = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/mobilephone";
-        public const string Name = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name";
-        public const string NameIdentifier = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier";
-        public const string OtherPhone = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/otherphone";
-        public const string PostalCode = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/postalcode";
-        public const string PrimaryGroupSid = "http://schemas.microsoft.com/ws/2008/06/identity/claims/primarygroupsid";
-        public const string PrimarySid = "http://schemas.microsoft.com/ws/2008/06/identity/claims/primarysid";
-        public const string Role = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role";
-        public const string Rsa = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/rsa";
-        public const string SerialNumber = "http://schemas.microsoft.com/ws/2008/06/identity/claims/serialnumber";
-        public const string Sid = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/sid";
-        public const string Spn = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/spn";
-        public const string StateOrProvince = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/stateorprovince";
-        public const string StreetAddress = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/streetaddress";
-        public const string Surname = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname";
-        public const string System = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/system";
-        public const string Thumbprint = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/thumbprint";
-        public const string Upn = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn";
-        public const string Uri = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/uri";
-        public const string UserData = "http://schemas.microsoft.com/ws/2008/06/identity/claims/userdata";
-        public const string Version = "http://schemas.microsoft.com/ws/2008/06/identity/claims/version";
-        public const string Webpage = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/webpage";
-        public const string WindowsAccountName = "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname";
-        public const string WindowsDeviceClaim = "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsdeviceclaim";
-        public const string WindowsDeviceGroup = "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsdevicegroup";
-        public const string WindowsFqbnVersion = "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsfqbnversion";
-        public const string WindowsSubAuthority = "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowssubauthority";
-        public const string WindowsUserClaim = "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsuserclaim";
-        public const string X500DistinguishedName = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/x500distinguishedname";
-    }
-
-    public static partial class ClaimValueTypes
-    {
-        public const string Base64Binary = "http://www.w3.org/2001/XMLSchema#base64Binary";
-        public const string Base64Octet = "http://www.w3.org/2001/XMLSchema#base64Octet";
-        public const string Boolean = "http://www.w3.org/2001/XMLSchema#boolean";
-        public const string Date = "http://www.w3.org/2001/XMLSchema#date";
-        public const string DateTime = "http://www.w3.org/2001/XMLSchema#dateTime";
-        public const string DaytimeDuration = "http://www.w3.org/TR/2002/WD-xquery-operators-20020816#dayTimeDuration";
-        public const string DnsName = "http://schemas.xmlsoap.org/claims/dns";
-        public const string Double = "http://www.w3.org/2001/XMLSchema#double";
-        public const string DsaKeyValue = "http://www.w3.org/2000/09/xmldsig#DSAKeyValue";
-        public const string Email = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress";
-        public const string Fqbn = "http://www.w3.org/2001/XMLSchema#fqbn";
-        public const string HexBinary = "http://www.w3.org/2001/XMLSchema#hexBinary";
-        public const string Integer = "http://www.w3.org/2001/XMLSchema#integer";
-        public const string Integer32 = "http://www.w3.org/2001/XMLSchema#integer32";
-        public const string Integer64 = "http://www.w3.org/2001/XMLSchema#integer64";
-        public const string KeyInfo = "http://www.w3.org/2000/09/xmldsig#KeyInfo";
-        public const string Rfc822Name = "urn:oasis:names:tc:xacml:1.0:data-type:rfc822Name";
-        public const string Rsa = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/rsa";
-        public const string RsaKeyValue = "http://www.w3.org/2000/09/xmldsig#RSAKeyValue";
-        public const string Sid = "http://www.w3.org/2001/XMLSchema#sid";
-        public const string String = "http://www.w3.org/2001/XMLSchema#string";
-        public const string Time = "http://www.w3.org/2001/XMLSchema#time";
-        public const string UInteger32 = "http://www.w3.org/2001/XMLSchema#uinteger32";
-        public const string UInteger64 = "http://www.w3.org/2001/XMLSchema#uinteger64";
-        public const string UpnName = "http://schemas.xmlsoap.org/claims/UPN";
-        public const string X500Name = "urn:oasis:names:tc:xacml:1.0:data-type:x500Name";
-        public const string YearMonthDuration = "http://www.w3.org/TR/2002/WD-xquery-operators-20020816#yearMonthDuration";
-    }
-}
-
-namespace System.Security.Principal
-{
-    public partial class GenericIdentity : Claims.ClaimsIdentity
-    {
-        protected GenericIdentity(GenericIdentity identity) { }
-
-        public GenericIdentity(string name, string type) { }
-
-        public GenericIdentity(string name) { }
-
-        public override string AuthenticationType { get { throw null; } }
-
-        public override Collections.Generic.IEnumerable<Claims.Claim> Claims { get { throw null; } }
-
-        public override bool IsAuthenticated { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public override Claims.ClaimsIdentity Clone() { throw null; }
-    }
-
-    public partial class GenericPrincipal : Claims.ClaimsPrincipal
-    {
-        public GenericPrincipal(IIdentity identity, string[] roles) { }
-
-        public override IIdentity Identity { get { throw null; } }
-
-        public override bool IsInRole(string role) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.claims/4.3.0/system.security.claims.nuspec b/src/referencePackages/src/system.security.claims/4.3.0/system.security.claims.nuspec
deleted file mode 100644
index e4663c80..00000000
--- a/src/referencePackages/src/system.security.claims/4.3.0/system.security.claims.nuspec
+++ /dev/null
@@ -1,38 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Security.Claims</id>
-    <version>4.3.0</version>
-    <title>System.Security.Claims</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides classes that implement claims-based identity in the .NET Framework, including classes that represent claims, claims-based identities, and claims-based principals.
-
-Commonly Used Types:
-System.Security.Principal.GenericIdentity
-System.Security.Claims.Claim
-System.Security.Claims.ClaimsIdentity
-System.Security.Claims.ClaimsPrincipal
-System.Security.Principal.GenericPrincipal
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Globalization" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Principal" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/System.Security.Cryptography.Algorithms.4.3.0.csproj b/src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/System.Security.Cryptography.Algorithms.4.3.0.csproj
deleted file mode 100644
index 914d6515..00000000
--- a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/System.Security.Cryptography.Algorithms.4.3.0.csproj
+++ /dev/null
@@ -1,35 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3;netstandard1.4;netstandard1.6</TargetFrameworks>
-    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Primitives" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.4'">
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Primitives" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.6'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Numerics" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Encoding" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/ref/netstandard1.3/System.Security.Cryptography.Algorithms.cs b/src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/ref/netstandard1.3/System.Security.Cryptography.Algorithms.cs
deleted file mode 100644
index 73319514..00000000
--- a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/ref/netstandard1.3/System.Security.Cryptography.Algorithms.cs
+++ /dev/null
@@ -1,337 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Security.Cryptography
-{
-    public abstract partial class Aes : SymmetricAlgorithm
-    {
-        public override KeySizes[] LegalBlockSizes { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public static Aes Create() { throw null; }
-    }
-
-    public abstract partial class DeriveBytes : IDisposable
-    {
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract byte[] GetBytes(int cb);
-        public abstract void Reset();
-    }
-
-    public partial class HMACMD5 : HMAC
-    {
-        public HMACMD5() { }
-
-        public HMACMD5(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA1 : HMAC
-    {
-        public HMACSHA1() { }
-
-        public HMACSHA1(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA256 : HMAC
-    {
-        public HMACSHA256() { }
-
-        public HMACSHA256(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA384 : HMAC
-    {
-        public HMACSHA384() { }
-
-        public HMACSHA384(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA512 : HMAC
-    {
-        public HMACSHA512() { }
-
-        public HMACSHA512(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public sealed partial class IncrementalHash : IDisposable
-    {
-        internal IncrementalHash() { }
-
-        public HashAlgorithmName AlgorithmName { get { throw null; } }
-
-        public void AppendData(byte[] data, int offset, int count) { }
-
-        public void AppendData(byte[] data) { }
-
-        public static IncrementalHash CreateHash(HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public static IncrementalHash CreateHMAC(HashAlgorithmName hashAlgorithm, byte[] key) { throw null; }
-
-        public void Dispose() { }
-
-        public byte[] GetHashAndReset() { throw null; }
-    }
-
-    public abstract partial class MD5 : HashAlgorithm
-    {
-        public static MD5 Create() { throw null; }
-    }
-
-    public abstract partial class RandomNumberGenerator : IDisposable
-    {
-        public static RandomNumberGenerator Create() { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract void GetBytes(byte[] data);
-    }
-
-    public partial class Rfc2898DeriveBytes : DeriveBytes
-    {
-        public Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, byte[] salt, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, byte[] salt) { }
-
-        public Rfc2898DeriveBytes(string password, int saltSize, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, int saltSize) { }
-
-        public int IterationCount { get { throw null; } set { } }
-
-        public byte[] Salt { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override byte[] GetBytes(int cb) { throw null; }
-
-        public override void Reset() { }
-    }
-
-    public abstract partial class RSA : AsymmetricAlgorithm
-    {
-        public static RSA Create() { throw null; }
-
-        public abstract byte[] Decrypt(byte[] data, RSAEncryptionPadding padding);
-        public abstract byte[] Encrypt(byte[] data, RSAEncryptionPadding padding);
-        public abstract RSAParameters ExportParameters(bool includePrivateParameters);
-        protected abstract byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
-        protected abstract byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm);
-        public abstract void ImportParameters(RSAParameters parameters);
-        public virtual byte[] SignData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public byte[] SignData(byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public virtual byte[] SignData(IO.Stream data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public abstract byte[] SignHash(byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
-        public bool VerifyData(byte[] data, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public virtual bool VerifyData(byte[] data, int offset, int count, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public bool VerifyData(IO.Stream data, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public abstract bool VerifyHash(byte[] hash, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
-    }
-
-    public sealed partial class RSAEncryptionPadding : IEquatable<RSAEncryptionPadding>
-    {
-        internal RSAEncryptionPadding() { }
-
-        public RSAEncryptionPaddingMode Mode { get { throw null; } }
-
-        public HashAlgorithmName OaepHashAlgorithm { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA1 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA256 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA384 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA512 { get { throw null; } }
-
-        public static RSAEncryptionPadding Pkcs1 { get { throw null; } }
-
-        public static RSAEncryptionPadding CreateOaep(HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(RSAEncryptionPadding other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(RSAEncryptionPadding left, RSAEncryptionPadding right) { throw null; }
-
-        public static bool operator !=(RSAEncryptionPadding left, RSAEncryptionPadding right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum RSAEncryptionPaddingMode
-    {
-        Pkcs1 = 0,
-        Oaep = 1
-    }
-
-    public partial struct RSAParameters
-    {
-        public byte[] D;
-        public byte[] DP;
-        public byte[] DQ;
-        public byte[] Exponent;
-        public byte[] InverseQ;
-        public byte[] Modulus;
-        public byte[] P;
-        public byte[] Q;
-    }
-
-    public sealed partial class RSASignaturePadding : IEquatable<RSASignaturePadding>
-    {
-        internal RSASignaturePadding() { }
-
-        public RSASignaturePaddingMode Mode { get { throw null; } }
-
-        public static RSASignaturePadding Pkcs1 { get { throw null; } }
-
-        public static RSASignaturePadding Pss { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(RSASignaturePadding other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(RSASignaturePadding left, RSASignaturePadding right) { throw null; }
-
-        public static bool operator !=(RSASignaturePadding left, RSASignaturePadding right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum RSASignaturePaddingMode
-    {
-        Pkcs1 = 0,
-        Pss = 1
-    }
-
-    public abstract partial class SHA1 : HashAlgorithm
-    {
-        public static SHA1 Create() { throw null; }
-    }
-
-    public abstract partial class SHA256 : HashAlgorithm
-    {
-        public static SHA256 Create() { throw null; }
-    }
-
-    public abstract partial class SHA384 : HashAlgorithm
-    {
-        public static SHA384 Create() { throw null; }
-    }
-
-    public abstract partial class SHA512 : HashAlgorithm
-    {
-        public static SHA512 Create() { throw null; }
-    }
-
-    public abstract partial class TripleDES : SymmetricAlgorithm
-    {
-        public override byte[] Key { get { throw null; } set { } }
-
-        public override KeySizes[] LegalBlockSizes { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public static TripleDES Create() { throw null; }
-
-        public static bool IsWeakKey(byte[] rgbKey) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/ref/netstandard1.4/System.Security.Cryptography.Algorithms.cs b/src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/ref/netstandard1.4/System.Security.Cryptography.Algorithms.cs
deleted file mode 100644
index ded3bf23..00000000
--- a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/ref/netstandard1.4/System.Security.Cryptography.Algorithms.cs
+++ /dev/null
@@ -1,357 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Security.Cryptography
-{
-    public abstract partial class Aes : SymmetricAlgorithm
-    {
-        public override KeySizes[] LegalBlockSizes { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public static Aes Create() { throw null; }
-    }
-
-    public abstract partial class DeriveBytes : IDisposable
-    {
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract byte[] GetBytes(int cb);
-        public abstract void Reset();
-    }
-
-    public abstract partial class ECDsa : AsymmetricAlgorithm
-    {
-        protected abstract byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
-        protected abstract byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm);
-        public virtual byte[] SignData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public virtual byte[] SignData(byte[] data, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public virtual byte[] SignData(IO.Stream data, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public abstract byte[] SignHash(byte[] hash);
-        public bool VerifyData(byte[] data, byte[] signature, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public virtual bool VerifyData(byte[] data, int offset, int count, byte[] signature, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public bool VerifyData(IO.Stream data, byte[] signature, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public abstract bool VerifyHash(byte[] hash, byte[] signature);
-    }
-
-    public partial class HMACMD5 : HMAC
-    {
-        public HMACMD5() { }
-
-        public HMACMD5(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA1 : HMAC
-    {
-        public HMACSHA1() { }
-
-        public HMACSHA1(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA256 : HMAC
-    {
-        public HMACSHA256() { }
-
-        public HMACSHA256(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA384 : HMAC
-    {
-        public HMACSHA384() { }
-
-        public HMACSHA384(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA512 : HMAC
-    {
-        public HMACSHA512() { }
-
-        public HMACSHA512(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public sealed partial class IncrementalHash : IDisposable
-    {
-        internal IncrementalHash() { }
-
-        public HashAlgorithmName AlgorithmName { get { throw null; } }
-
-        public void AppendData(byte[] data, int offset, int count) { }
-
-        public void AppendData(byte[] data) { }
-
-        public static IncrementalHash CreateHash(HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public static IncrementalHash CreateHMAC(HashAlgorithmName hashAlgorithm, byte[] key) { throw null; }
-
-        public void Dispose() { }
-
-        public byte[] GetHashAndReset() { throw null; }
-    }
-
-    public abstract partial class MD5 : HashAlgorithm
-    {
-        public static MD5 Create() { throw null; }
-    }
-
-    public abstract partial class RandomNumberGenerator : IDisposable
-    {
-        public static RandomNumberGenerator Create() { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract void GetBytes(byte[] data);
-    }
-
-    public partial class Rfc2898DeriveBytes : DeriveBytes
-    {
-        public Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, byte[] salt, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, byte[] salt) { }
-
-        public Rfc2898DeriveBytes(string password, int saltSize, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, int saltSize) { }
-
-        public int IterationCount { get { throw null; } set { } }
-
-        public byte[] Salt { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override byte[] GetBytes(int cb) { throw null; }
-
-        public override void Reset() { }
-    }
-
-    public abstract partial class RSA : AsymmetricAlgorithm
-    {
-        public static RSA Create() { throw null; }
-
-        public abstract byte[] Decrypt(byte[] data, RSAEncryptionPadding padding);
-        public abstract byte[] Encrypt(byte[] data, RSAEncryptionPadding padding);
-        public abstract RSAParameters ExportParameters(bool includePrivateParameters);
-        protected abstract byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
-        protected abstract byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm);
-        public abstract void ImportParameters(RSAParameters parameters);
-        public virtual byte[] SignData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public byte[] SignData(byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public virtual byte[] SignData(IO.Stream data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public abstract byte[] SignHash(byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
-        public bool VerifyData(byte[] data, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public virtual bool VerifyData(byte[] data, int offset, int count, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public bool VerifyData(IO.Stream data, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public abstract bool VerifyHash(byte[] hash, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
-    }
-
-    public sealed partial class RSAEncryptionPadding : IEquatable<RSAEncryptionPadding>
-    {
-        internal RSAEncryptionPadding() { }
-
-        public RSAEncryptionPaddingMode Mode { get { throw null; } }
-
-        public HashAlgorithmName OaepHashAlgorithm { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA1 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA256 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA384 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA512 { get { throw null; } }
-
-        public static RSAEncryptionPadding Pkcs1 { get { throw null; } }
-
-        public static RSAEncryptionPadding CreateOaep(HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(RSAEncryptionPadding other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(RSAEncryptionPadding left, RSAEncryptionPadding right) { throw null; }
-
-        public static bool operator !=(RSAEncryptionPadding left, RSAEncryptionPadding right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum RSAEncryptionPaddingMode
-    {
-        Pkcs1 = 0,
-        Oaep = 1
-    }
-
-    public partial struct RSAParameters
-    {
-        public byte[] D;
-        public byte[] DP;
-        public byte[] DQ;
-        public byte[] Exponent;
-        public byte[] InverseQ;
-        public byte[] Modulus;
-        public byte[] P;
-        public byte[] Q;
-    }
-
-    public sealed partial class RSASignaturePadding : IEquatable<RSASignaturePadding>
-    {
-        internal RSASignaturePadding() { }
-
-        public RSASignaturePaddingMode Mode { get { throw null; } }
-
-        public static RSASignaturePadding Pkcs1 { get { throw null; } }
-
-        public static RSASignaturePadding Pss { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(RSASignaturePadding other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(RSASignaturePadding left, RSASignaturePadding right) { throw null; }
-
-        public static bool operator !=(RSASignaturePadding left, RSASignaturePadding right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum RSASignaturePaddingMode
-    {
-        Pkcs1 = 0,
-        Pss = 1
-    }
-
-    public abstract partial class SHA1 : HashAlgorithm
-    {
-        public static SHA1 Create() { throw null; }
-    }
-
-    public abstract partial class SHA256 : HashAlgorithm
-    {
-        public static SHA256 Create() { throw null; }
-    }
-
-    public abstract partial class SHA384 : HashAlgorithm
-    {
-        public static SHA384 Create() { throw null; }
-    }
-
-    public abstract partial class SHA512 : HashAlgorithm
-    {
-        public static SHA512 Create() { throw null; }
-    }
-
-    public abstract partial class TripleDES : SymmetricAlgorithm
-    {
-        public override byte[] Key { get { throw null; } set { } }
-
-        public override KeySizes[] LegalBlockSizes { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public static TripleDES Create() { throw null; }
-
-        public static bool IsWeakKey(byte[] rgbKey) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/ref/netstandard1.6/System.Security.Cryptography.Algorithms.cs b/src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/ref/netstandard1.6/System.Security.Cryptography.Algorithms.cs
deleted file mode 100644
index e5a84bf3..00000000
--- a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/ref/netstandard1.6/System.Security.Cryptography.Algorithms.cs
+++ /dev/null
@@ -1,463 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.2.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Security.Cryptography
-{
-    public abstract partial class Aes : SymmetricAlgorithm
-    {
-        public override KeySizes[] LegalBlockSizes { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public static Aes Create() { throw null; }
-    }
-
-    public abstract partial class DeriveBytes : IDisposable
-    {
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract byte[] GetBytes(int cb);
-        public abstract void Reset();
-    }
-
-    public partial struct ECCurve
-    {
-        public byte[] A;
-        public byte[] B;
-        public byte[] Cofactor;
-        public ECCurveType CurveType;
-        public ECPoint G;
-        public HashAlgorithmName? Hash;
-        public byte[] Order;
-        public byte[] Polynomial;
-        public byte[] Prime;
-        public byte[] Seed;
-        public bool IsCharacteristic2 { get { throw null; } }
-
-        public bool IsExplicit { get { throw null; } }
-
-        public bool IsNamed { get { throw null; } }
-
-        public bool IsPrime { get { throw null; } }
-
-        public Oid Oid { get { throw null; } }
-
-        public static ECCurve CreateFromFriendlyName(string oidFriendlyName) { throw null; }
-
-        public static ECCurve CreateFromOid(Oid curveOid) { throw null; }
-
-        public static ECCurve CreateFromValue(string oidValue) { throw null; }
-
-        public void Validate() { }
-
-        public enum ECCurveType
-        {
-            Implicit = 0,
-            PrimeShortWeierstrass = 1,
-            PrimeTwistedEdwards = 2,
-            PrimeMontgomery = 3,
-            Characteristic2 = 4,
-            Named = 5
-        }
-
-        public static partial class NamedCurves
-        {
-            public static ECCurve brainpoolP160r1 { get { throw null; } }
-
-            public static ECCurve brainpoolP160t1 { get { throw null; } }
-
-            public static ECCurve brainpoolP192r1 { get { throw null; } }
-
-            public static ECCurve brainpoolP192t1 { get { throw null; } }
-
-            public static ECCurve brainpoolP224r1 { get { throw null; } }
-
-            public static ECCurve brainpoolP224t1 { get { throw null; } }
-
-            public static ECCurve brainpoolP256r1 { get { throw null; } }
-
-            public static ECCurve brainpoolP256t1 { get { throw null; } }
-
-            public static ECCurve brainpoolP320r1 { get { throw null; } }
-
-            public static ECCurve brainpoolP320t1 { get { throw null; } }
-
-            public static ECCurve brainpoolP384r1 { get { throw null; } }
-
-            public static ECCurve brainpoolP384t1 { get { throw null; } }
-
-            public static ECCurve brainpoolP512r1 { get { throw null; } }
-
-            public static ECCurve brainpoolP512t1 { get { throw null; } }
-
-            public static ECCurve nistP256 { get { throw null; } }
-
-            public static ECCurve nistP384 { get { throw null; } }
-
-            public static ECCurve nistP521 { get { throw null; } }
-        }
-    }
-
-    public abstract partial class ECDsa : AsymmetricAlgorithm
-    {
-        public static ECDsa Create() { throw null; }
-
-        public static ECDsa Create(ECCurve curve) { throw null; }
-
-        public static ECDsa Create(ECParameters parameters) { throw null; }
-
-        public virtual ECParameters ExportExplicitParameters(bool includePrivateParameters) { throw null; }
-
-        public virtual ECParameters ExportParameters(bool includePrivateParameters) { throw null; }
-
-        public virtual void GenerateKey(ECCurve curve) { }
-
-        protected abstract byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
-        protected abstract byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm);
-        public virtual void ImportParameters(ECParameters parameters) { }
-
-        public virtual byte[] SignData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public virtual byte[] SignData(byte[] data, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public virtual byte[] SignData(IO.Stream data, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public abstract byte[] SignHash(byte[] hash);
-        public bool VerifyData(byte[] data, byte[] signature, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public virtual bool VerifyData(byte[] data, int offset, int count, byte[] signature, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public bool VerifyData(IO.Stream data, byte[] signature, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public abstract bool VerifyHash(byte[] hash, byte[] signature);
-    }
-
-    public partial struct ECParameters
-    {
-        public ECCurve Curve;
-        public byte[] D;
-        public ECPoint Q;
-        public void Validate() { }
-    }
-
-    public partial struct ECPoint
-    {
-        public byte[] X;
-        public byte[] Y;
-    }
-
-    public partial class HMACMD5 : HMAC
-    {
-        public HMACMD5() { }
-
-        public HMACMD5(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA1 : HMAC
-    {
-        public HMACSHA1() { }
-
-        public HMACSHA1(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA256 : HMAC
-    {
-        public HMACSHA256() { }
-
-        public HMACSHA256(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA384 : HMAC
-    {
-        public HMACSHA384() { }
-
-        public HMACSHA384(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA512 : HMAC
-    {
-        public HMACSHA512() { }
-
-        public HMACSHA512(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public sealed partial class IncrementalHash : IDisposable
-    {
-        internal IncrementalHash() { }
-
-        public HashAlgorithmName AlgorithmName { get { throw null; } }
-
-        public void AppendData(byte[] data, int offset, int count) { }
-
-        public void AppendData(byte[] data) { }
-
-        public static IncrementalHash CreateHash(HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public static IncrementalHash CreateHMAC(HashAlgorithmName hashAlgorithm, byte[] key) { throw null; }
-
-        public void Dispose() { }
-
-        public byte[] GetHashAndReset() { throw null; }
-    }
-
-    public abstract partial class MD5 : HashAlgorithm
-    {
-        public static MD5 Create() { throw null; }
-    }
-
-    public abstract partial class RandomNumberGenerator : IDisposable
-    {
-        public static RandomNumberGenerator Create() { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract void GetBytes(byte[] data);
-    }
-
-    public partial class Rfc2898DeriveBytes : DeriveBytes
-    {
-        public Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, byte[] salt, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, byte[] salt) { }
-
-        public Rfc2898DeriveBytes(string password, int saltSize, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, int saltSize) { }
-
-        public int IterationCount { get { throw null; } set { } }
-
-        public byte[] Salt { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override byte[] GetBytes(int cb) { throw null; }
-
-        public override void Reset() { }
-    }
-
-    public abstract partial class RSA : AsymmetricAlgorithm
-    {
-        public static RSA Create() { throw null; }
-
-        public abstract byte[] Decrypt(byte[] data, RSAEncryptionPadding padding);
-        public abstract byte[] Encrypt(byte[] data, RSAEncryptionPadding padding);
-        public abstract RSAParameters ExportParameters(bool includePrivateParameters);
-        protected abstract byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
-        protected abstract byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm);
-        public abstract void ImportParameters(RSAParameters parameters);
-        public virtual byte[] SignData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public byte[] SignData(byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public virtual byte[] SignData(IO.Stream data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public abstract byte[] SignHash(byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
-        public bool VerifyData(byte[] data, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public virtual bool VerifyData(byte[] data, int offset, int count, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public bool VerifyData(IO.Stream data, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public abstract bool VerifyHash(byte[] hash, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
-    }
-
-    public sealed partial class RSAEncryptionPadding : IEquatable<RSAEncryptionPadding>
-    {
-        internal RSAEncryptionPadding() { }
-
-        public RSAEncryptionPaddingMode Mode { get { throw null; } }
-
-        public HashAlgorithmName OaepHashAlgorithm { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA1 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA256 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA384 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA512 { get { throw null; } }
-
-        public static RSAEncryptionPadding Pkcs1 { get { throw null; } }
-
-        public static RSAEncryptionPadding CreateOaep(HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(RSAEncryptionPadding other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(RSAEncryptionPadding left, RSAEncryptionPadding right) { throw null; }
-
-        public static bool operator !=(RSAEncryptionPadding left, RSAEncryptionPadding right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum RSAEncryptionPaddingMode
-    {
-        Pkcs1 = 0,
-        Oaep = 1
-    }
-
-    public partial struct RSAParameters
-    {
-        public byte[] D;
-        public byte[] DP;
-        public byte[] DQ;
-        public byte[] Exponent;
-        public byte[] InverseQ;
-        public byte[] Modulus;
-        public byte[] P;
-        public byte[] Q;
-    }
-
-    public sealed partial class RSASignaturePadding : IEquatable<RSASignaturePadding>
-    {
-        internal RSASignaturePadding() { }
-
-        public RSASignaturePaddingMode Mode { get { throw null; } }
-
-        public static RSASignaturePadding Pkcs1 { get { throw null; } }
-
-        public static RSASignaturePadding Pss { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(RSASignaturePadding other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(RSASignaturePadding left, RSASignaturePadding right) { throw null; }
-
-        public static bool operator !=(RSASignaturePadding left, RSASignaturePadding right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum RSASignaturePaddingMode
-    {
-        Pkcs1 = 0,
-        Pss = 1
-    }
-
-    public abstract partial class SHA1 : HashAlgorithm
-    {
-        public static SHA1 Create() { throw null; }
-    }
-
-    public abstract partial class SHA256 : HashAlgorithm
-    {
-        public static SHA256 Create() { throw null; }
-    }
-
-    public abstract partial class SHA384 : HashAlgorithm
-    {
-        public static SHA384 Create() { throw null; }
-    }
-
-    public abstract partial class SHA512 : HashAlgorithm
-    {
-        public static SHA512 Create() { throw null; }
-    }
-
-    public abstract partial class TripleDES : SymmetricAlgorithm
-    {
-        public override byte[] Key { get { throw null; } set { } }
-
-        public override KeySizes[] LegalBlockSizes { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public static TripleDES Create() { throw null; }
-
-        public static bool IsWeakKey(byte[] rgbKey) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/system.security.cryptography.algorithms.nuspec b/src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/system.security.cryptography.algorithms.nuspec
deleted file mode 100644
index b2ae004f..00000000
--- a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.0/system.security.cryptography.algorithms.nuspec
+++ /dev/null
@@ -1,60 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Security.Cryptography.Algorithms</id>
-    <version>4.3.0</version>
-    <title>System.Security.Cryptography.Algorithms</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides base types for cryptographic algorithms, including hashing, encryption, and signing operations.
-
-Commonly Used Types:
-System.Security.Cryptography.Aes
-System.Security.Cryptography.RSA
-System.Security.Cryptography.RSAParameters
-System.Security.Cryptography.HMACSHA1
-System.Security.Cryptography.SHA256
-System.Security.Cryptography.SHA1
-System.Security.Cryptography.SHA512
-System.Security.Cryptography.SHA384
-System.Security.Cryptography.HMACSHA256
-System.Security.Cryptography.MD5
-System.Security.Cryptography.HMACSHA384
-System.Security.Cryptography.HMACSHA512
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Security.Cryptography.Primitives" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.4">
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Security.Cryptography.Primitives" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.6">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.Numerics" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.Encoding" version="4.3.0" />
-        <dependency id="System.Security.Cryptography.Primitives" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" exclude="Compile" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/System.Security.Cryptography.Algorithms.4.3.1.csproj b/src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/System.Security.Cryptography.Algorithms.4.3.1.csproj
deleted file mode 100644
index 914d6515..00000000
--- a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/System.Security.Cryptography.Algorithms.4.3.1.csproj
+++ /dev/null
@@ -1,35 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3;netstandard1.4;netstandard1.6</TargetFrameworks>
-    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Primitives" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.4'">
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Primitives" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.6'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Numerics" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Encoding" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/ref/netstandard1.3/System.Security.Cryptography.Algorithms.cs b/src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/ref/netstandard1.3/System.Security.Cryptography.Algorithms.cs
deleted file mode 100644
index 73319514..00000000
--- a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/ref/netstandard1.3/System.Security.Cryptography.Algorithms.cs
+++ /dev/null
@@ -1,337 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Security.Cryptography
-{
-    public abstract partial class Aes : SymmetricAlgorithm
-    {
-        public override KeySizes[] LegalBlockSizes { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public static Aes Create() { throw null; }
-    }
-
-    public abstract partial class DeriveBytes : IDisposable
-    {
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract byte[] GetBytes(int cb);
-        public abstract void Reset();
-    }
-
-    public partial class HMACMD5 : HMAC
-    {
-        public HMACMD5() { }
-
-        public HMACMD5(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA1 : HMAC
-    {
-        public HMACSHA1() { }
-
-        public HMACSHA1(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA256 : HMAC
-    {
-        public HMACSHA256() { }
-
-        public HMACSHA256(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA384 : HMAC
-    {
-        public HMACSHA384() { }
-
-        public HMACSHA384(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA512 : HMAC
-    {
-        public HMACSHA512() { }
-
-        public HMACSHA512(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public sealed partial class IncrementalHash : IDisposable
-    {
-        internal IncrementalHash() { }
-
-        public HashAlgorithmName AlgorithmName { get { throw null; } }
-
-        public void AppendData(byte[] data, int offset, int count) { }
-
-        public void AppendData(byte[] data) { }
-
-        public static IncrementalHash CreateHash(HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public static IncrementalHash CreateHMAC(HashAlgorithmName hashAlgorithm, byte[] key) { throw null; }
-
-        public void Dispose() { }
-
-        public byte[] GetHashAndReset() { throw null; }
-    }
-
-    public abstract partial class MD5 : HashAlgorithm
-    {
-        public static MD5 Create() { throw null; }
-    }
-
-    public abstract partial class RandomNumberGenerator : IDisposable
-    {
-        public static RandomNumberGenerator Create() { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract void GetBytes(byte[] data);
-    }
-
-    public partial class Rfc2898DeriveBytes : DeriveBytes
-    {
-        public Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, byte[] salt, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, byte[] salt) { }
-
-        public Rfc2898DeriveBytes(string password, int saltSize, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, int saltSize) { }
-
-        public int IterationCount { get { throw null; } set { } }
-
-        public byte[] Salt { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override byte[] GetBytes(int cb) { throw null; }
-
-        public override void Reset() { }
-    }
-
-    public abstract partial class RSA : AsymmetricAlgorithm
-    {
-        public static RSA Create() { throw null; }
-
-        public abstract byte[] Decrypt(byte[] data, RSAEncryptionPadding padding);
-        public abstract byte[] Encrypt(byte[] data, RSAEncryptionPadding padding);
-        public abstract RSAParameters ExportParameters(bool includePrivateParameters);
-        protected abstract byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
-        protected abstract byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm);
-        public abstract void ImportParameters(RSAParameters parameters);
-        public virtual byte[] SignData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public byte[] SignData(byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public virtual byte[] SignData(IO.Stream data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public abstract byte[] SignHash(byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
-        public bool VerifyData(byte[] data, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public virtual bool VerifyData(byte[] data, int offset, int count, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public bool VerifyData(IO.Stream data, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public abstract bool VerifyHash(byte[] hash, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
-    }
-
-    public sealed partial class RSAEncryptionPadding : IEquatable<RSAEncryptionPadding>
-    {
-        internal RSAEncryptionPadding() { }
-
-        public RSAEncryptionPaddingMode Mode { get { throw null; } }
-
-        public HashAlgorithmName OaepHashAlgorithm { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA1 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA256 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA384 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA512 { get { throw null; } }
-
-        public static RSAEncryptionPadding Pkcs1 { get { throw null; } }
-
-        public static RSAEncryptionPadding CreateOaep(HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(RSAEncryptionPadding other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(RSAEncryptionPadding left, RSAEncryptionPadding right) { throw null; }
-
-        public static bool operator !=(RSAEncryptionPadding left, RSAEncryptionPadding right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum RSAEncryptionPaddingMode
-    {
-        Pkcs1 = 0,
-        Oaep = 1
-    }
-
-    public partial struct RSAParameters
-    {
-        public byte[] D;
-        public byte[] DP;
-        public byte[] DQ;
-        public byte[] Exponent;
-        public byte[] InverseQ;
-        public byte[] Modulus;
-        public byte[] P;
-        public byte[] Q;
-    }
-
-    public sealed partial class RSASignaturePadding : IEquatable<RSASignaturePadding>
-    {
-        internal RSASignaturePadding() { }
-
-        public RSASignaturePaddingMode Mode { get { throw null; } }
-
-        public static RSASignaturePadding Pkcs1 { get { throw null; } }
-
-        public static RSASignaturePadding Pss { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(RSASignaturePadding other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(RSASignaturePadding left, RSASignaturePadding right) { throw null; }
-
-        public static bool operator !=(RSASignaturePadding left, RSASignaturePadding right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum RSASignaturePaddingMode
-    {
-        Pkcs1 = 0,
-        Pss = 1
-    }
-
-    public abstract partial class SHA1 : HashAlgorithm
-    {
-        public static SHA1 Create() { throw null; }
-    }
-
-    public abstract partial class SHA256 : HashAlgorithm
-    {
-        public static SHA256 Create() { throw null; }
-    }
-
-    public abstract partial class SHA384 : HashAlgorithm
-    {
-        public static SHA384 Create() { throw null; }
-    }
-
-    public abstract partial class SHA512 : HashAlgorithm
-    {
-        public static SHA512 Create() { throw null; }
-    }
-
-    public abstract partial class TripleDES : SymmetricAlgorithm
-    {
-        public override byte[] Key { get { throw null; } set { } }
-
-        public override KeySizes[] LegalBlockSizes { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public static TripleDES Create() { throw null; }
-
-        public static bool IsWeakKey(byte[] rgbKey) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/ref/netstandard1.4/System.Security.Cryptography.Algorithms.cs b/src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/ref/netstandard1.4/System.Security.Cryptography.Algorithms.cs
deleted file mode 100644
index ded3bf23..00000000
--- a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/ref/netstandard1.4/System.Security.Cryptography.Algorithms.cs
+++ /dev/null
@@ -1,357 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Security.Cryptography
-{
-    public abstract partial class Aes : SymmetricAlgorithm
-    {
-        public override KeySizes[] LegalBlockSizes { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public static Aes Create() { throw null; }
-    }
-
-    public abstract partial class DeriveBytes : IDisposable
-    {
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract byte[] GetBytes(int cb);
-        public abstract void Reset();
-    }
-
-    public abstract partial class ECDsa : AsymmetricAlgorithm
-    {
-        protected abstract byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
-        protected abstract byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm);
-        public virtual byte[] SignData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public virtual byte[] SignData(byte[] data, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public virtual byte[] SignData(IO.Stream data, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public abstract byte[] SignHash(byte[] hash);
-        public bool VerifyData(byte[] data, byte[] signature, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public virtual bool VerifyData(byte[] data, int offset, int count, byte[] signature, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public bool VerifyData(IO.Stream data, byte[] signature, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public abstract bool VerifyHash(byte[] hash, byte[] signature);
-    }
-
-    public partial class HMACMD5 : HMAC
-    {
-        public HMACMD5() { }
-
-        public HMACMD5(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA1 : HMAC
-    {
-        public HMACSHA1() { }
-
-        public HMACSHA1(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA256 : HMAC
-    {
-        public HMACSHA256() { }
-
-        public HMACSHA256(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA384 : HMAC
-    {
-        public HMACSHA384() { }
-
-        public HMACSHA384(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA512 : HMAC
-    {
-        public HMACSHA512() { }
-
-        public HMACSHA512(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public sealed partial class IncrementalHash : IDisposable
-    {
-        internal IncrementalHash() { }
-
-        public HashAlgorithmName AlgorithmName { get { throw null; } }
-
-        public void AppendData(byte[] data, int offset, int count) { }
-
-        public void AppendData(byte[] data) { }
-
-        public static IncrementalHash CreateHash(HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public static IncrementalHash CreateHMAC(HashAlgorithmName hashAlgorithm, byte[] key) { throw null; }
-
-        public void Dispose() { }
-
-        public byte[] GetHashAndReset() { throw null; }
-    }
-
-    public abstract partial class MD5 : HashAlgorithm
-    {
-        public static MD5 Create() { throw null; }
-    }
-
-    public abstract partial class RandomNumberGenerator : IDisposable
-    {
-        public static RandomNumberGenerator Create() { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract void GetBytes(byte[] data);
-    }
-
-    public partial class Rfc2898DeriveBytes : DeriveBytes
-    {
-        public Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, byte[] salt, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, byte[] salt) { }
-
-        public Rfc2898DeriveBytes(string password, int saltSize, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, int saltSize) { }
-
-        public int IterationCount { get { throw null; } set { } }
-
-        public byte[] Salt { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override byte[] GetBytes(int cb) { throw null; }
-
-        public override void Reset() { }
-    }
-
-    public abstract partial class RSA : AsymmetricAlgorithm
-    {
-        public static RSA Create() { throw null; }
-
-        public abstract byte[] Decrypt(byte[] data, RSAEncryptionPadding padding);
-        public abstract byte[] Encrypt(byte[] data, RSAEncryptionPadding padding);
-        public abstract RSAParameters ExportParameters(bool includePrivateParameters);
-        protected abstract byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
-        protected abstract byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm);
-        public abstract void ImportParameters(RSAParameters parameters);
-        public virtual byte[] SignData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public byte[] SignData(byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public virtual byte[] SignData(IO.Stream data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public abstract byte[] SignHash(byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
-        public bool VerifyData(byte[] data, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public virtual bool VerifyData(byte[] data, int offset, int count, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public bool VerifyData(IO.Stream data, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public abstract bool VerifyHash(byte[] hash, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
-    }
-
-    public sealed partial class RSAEncryptionPadding : IEquatable<RSAEncryptionPadding>
-    {
-        internal RSAEncryptionPadding() { }
-
-        public RSAEncryptionPaddingMode Mode { get { throw null; } }
-
-        public HashAlgorithmName OaepHashAlgorithm { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA1 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA256 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA384 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA512 { get { throw null; } }
-
-        public static RSAEncryptionPadding Pkcs1 { get { throw null; } }
-
-        public static RSAEncryptionPadding CreateOaep(HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(RSAEncryptionPadding other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(RSAEncryptionPadding left, RSAEncryptionPadding right) { throw null; }
-
-        public static bool operator !=(RSAEncryptionPadding left, RSAEncryptionPadding right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum RSAEncryptionPaddingMode
-    {
-        Pkcs1 = 0,
-        Oaep = 1
-    }
-
-    public partial struct RSAParameters
-    {
-        public byte[] D;
-        public byte[] DP;
-        public byte[] DQ;
-        public byte[] Exponent;
-        public byte[] InverseQ;
-        public byte[] Modulus;
-        public byte[] P;
-        public byte[] Q;
-    }
-
-    public sealed partial class RSASignaturePadding : IEquatable<RSASignaturePadding>
-    {
-        internal RSASignaturePadding() { }
-
-        public RSASignaturePaddingMode Mode { get { throw null; } }
-
-        public static RSASignaturePadding Pkcs1 { get { throw null; } }
-
-        public static RSASignaturePadding Pss { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(RSASignaturePadding other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(RSASignaturePadding left, RSASignaturePadding right) { throw null; }
-
-        public static bool operator !=(RSASignaturePadding left, RSASignaturePadding right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum RSASignaturePaddingMode
-    {
-        Pkcs1 = 0,
-        Pss = 1
-    }
-
-    public abstract partial class SHA1 : HashAlgorithm
-    {
-        public static SHA1 Create() { throw null; }
-    }
-
-    public abstract partial class SHA256 : HashAlgorithm
-    {
-        public static SHA256 Create() { throw null; }
-    }
-
-    public abstract partial class SHA384 : HashAlgorithm
-    {
-        public static SHA384 Create() { throw null; }
-    }
-
-    public abstract partial class SHA512 : HashAlgorithm
-    {
-        public static SHA512 Create() { throw null; }
-    }
-
-    public abstract partial class TripleDES : SymmetricAlgorithm
-    {
-        public override byte[] Key { get { throw null; } set { } }
-
-        public override KeySizes[] LegalBlockSizes { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public static TripleDES Create() { throw null; }
-
-        public static bool IsWeakKey(byte[] rgbKey) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/ref/netstandard1.6/System.Security.Cryptography.Algorithms.cs b/src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/ref/netstandard1.6/System.Security.Cryptography.Algorithms.cs
deleted file mode 100644
index e5a84bf3..00000000
--- a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/ref/netstandard1.6/System.Security.Cryptography.Algorithms.cs
+++ /dev/null
@@ -1,463 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Cryptography.Algorithms")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.2.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Security.Cryptography
-{
-    public abstract partial class Aes : SymmetricAlgorithm
-    {
-        public override KeySizes[] LegalBlockSizes { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public static Aes Create() { throw null; }
-    }
-
-    public abstract partial class DeriveBytes : IDisposable
-    {
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract byte[] GetBytes(int cb);
-        public abstract void Reset();
-    }
-
-    public partial struct ECCurve
-    {
-        public byte[] A;
-        public byte[] B;
-        public byte[] Cofactor;
-        public ECCurveType CurveType;
-        public ECPoint G;
-        public HashAlgorithmName? Hash;
-        public byte[] Order;
-        public byte[] Polynomial;
-        public byte[] Prime;
-        public byte[] Seed;
-        public bool IsCharacteristic2 { get { throw null; } }
-
-        public bool IsExplicit { get { throw null; } }
-
-        public bool IsNamed { get { throw null; } }
-
-        public bool IsPrime { get { throw null; } }
-
-        public Oid Oid { get { throw null; } }
-
-        public static ECCurve CreateFromFriendlyName(string oidFriendlyName) { throw null; }
-
-        public static ECCurve CreateFromOid(Oid curveOid) { throw null; }
-
-        public static ECCurve CreateFromValue(string oidValue) { throw null; }
-
-        public void Validate() { }
-
-        public enum ECCurveType
-        {
-            Implicit = 0,
-            PrimeShortWeierstrass = 1,
-            PrimeTwistedEdwards = 2,
-            PrimeMontgomery = 3,
-            Characteristic2 = 4,
-            Named = 5
-        }
-
-        public static partial class NamedCurves
-        {
-            public static ECCurve brainpoolP160r1 { get { throw null; } }
-
-            public static ECCurve brainpoolP160t1 { get { throw null; } }
-
-            public static ECCurve brainpoolP192r1 { get { throw null; } }
-
-            public static ECCurve brainpoolP192t1 { get { throw null; } }
-
-            public static ECCurve brainpoolP224r1 { get { throw null; } }
-
-            public static ECCurve brainpoolP224t1 { get { throw null; } }
-
-            public static ECCurve brainpoolP256r1 { get { throw null; } }
-
-            public static ECCurve brainpoolP256t1 { get { throw null; } }
-
-            public static ECCurve brainpoolP320r1 { get { throw null; } }
-
-            public static ECCurve brainpoolP320t1 { get { throw null; } }
-
-            public static ECCurve brainpoolP384r1 { get { throw null; } }
-
-            public static ECCurve brainpoolP384t1 { get { throw null; } }
-
-            public static ECCurve brainpoolP512r1 { get { throw null; } }
-
-            public static ECCurve brainpoolP512t1 { get { throw null; } }
-
-            public static ECCurve nistP256 { get { throw null; } }
-
-            public static ECCurve nistP384 { get { throw null; } }
-
-            public static ECCurve nistP521 { get { throw null; } }
-        }
-    }
-
-    public abstract partial class ECDsa : AsymmetricAlgorithm
-    {
-        public static ECDsa Create() { throw null; }
-
-        public static ECDsa Create(ECCurve curve) { throw null; }
-
-        public static ECDsa Create(ECParameters parameters) { throw null; }
-
-        public virtual ECParameters ExportExplicitParameters(bool includePrivateParameters) { throw null; }
-
-        public virtual ECParameters ExportParameters(bool includePrivateParameters) { throw null; }
-
-        public virtual void GenerateKey(ECCurve curve) { }
-
-        protected abstract byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
-        protected abstract byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm);
-        public virtual void ImportParameters(ECParameters parameters) { }
-
-        public virtual byte[] SignData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public virtual byte[] SignData(byte[] data, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public virtual byte[] SignData(IO.Stream data, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public abstract byte[] SignHash(byte[] hash);
-        public bool VerifyData(byte[] data, byte[] signature, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public virtual bool VerifyData(byte[] data, int offset, int count, byte[] signature, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public bool VerifyData(IO.Stream data, byte[] signature, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public abstract bool VerifyHash(byte[] hash, byte[] signature);
-    }
-
-    public partial struct ECParameters
-    {
-        public ECCurve Curve;
-        public byte[] D;
-        public ECPoint Q;
-        public void Validate() { }
-    }
-
-    public partial struct ECPoint
-    {
-        public byte[] X;
-        public byte[] Y;
-    }
-
-    public partial class HMACMD5 : HMAC
-    {
-        public HMACMD5() { }
-
-        public HMACMD5(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA1 : HMAC
-    {
-        public HMACSHA1() { }
-
-        public HMACSHA1(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA256 : HMAC
-    {
-        public HMACSHA256() { }
-
-        public HMACSHA256(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA384 : HMAC
-    {
-        public HMACSHA384() { }
-
-        public HMACSHA384(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial class HMACSHA512 : HMAC
-    {
-        public HMACSHA512() { }
-
-        public HMACSHA512(byte[] key) { }
-
-        public override int HashSize { get { throw null; } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public sealed partial class IncrementalHash : IDisposable
-    {
-        internal IncrementalHash() { }
-
-        public HashAlgorithmName AlgorithmName { get { throw null; } }
-
-        public void AppendData(byte[] data, int offset, int count) { }
-
-        public void AppendData(byte[] data) { }
-
-        public static IncrementalHash CreateHash(HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public static IncrementalHash CreateHMAC(HashAlgorithmName hashAlgorithm, byte[] key) { throw null; }
-
-        public void Dispose() { }
-
-        public byte[] GetHashAndReset() { throw null; }
-    }
-
-    public abstract partial class MD5 : HashAlgorithm
-    {
-        public static MD5 Create() { throw null; }
-    }
-
-    public abstract partial class RandomNumberGenerator : IDisposable
-    {
-        public static RandomNumberGenerator Create() { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract void GetBytes(byte[] data);
-    }
-
-    public partial class Rfc2898DeriveBytes : DeriveBytes
-    {
-        public Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, byte[] salt, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, byte[] salt) { }
-
-        public Rfc2898DeriveBytes(string password, int saltSize, int iterations) { }
-
-        public Rfc2898DeriveBytes(string password, int saltSize) { }
-
-        public int IterationCount { get { throw null; } set { } }
-
-        public byte[] Salt { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override byte[] GetBytes(int cb) { throw null; }
-
-        public override void Reset() { }
-    }
-
-    public abstract partial class RSA : AsymmetricAlgorithm
-    {
-        public static RSA Create() { throw null; }
-
-        public abstract byte[] Decrypt(byte[] data, RSAEncryptionPadding padding);
-        public abstract byte[] Encrypt(byte[] data, RSAEncryptionPadding padding);
-        public abstract RSAParameters ExportParameters(bool includePrivateParameters);
-        protected abstract byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
-        protected abstract byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm);
-        public abstract void ImportParameters(RSAParameters parameters);
-        public virtual byte[] SignData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public byte[] SignData(byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public virtual byte[] SignData(IO.Stream data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public abstract byte[] SignHash(byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
-        public bool VerifyData(byte[] data, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public virtual bool VerifyData(byte[] data, int offset, int count, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public bool VerifyData(IO.Stream data, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public abstract bool VerifyHash(byte[] hash, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
-    }
-
-    public sealed partial class RSAEncryptionPadding : IEquatable<RSAEncryptionPadding>
-    {
-        internal RSAEncryptionPadding() { }
-
-        public RSAEncryptionPaddingMode Mode { get { throw null; } }
-
-        public HashAlgorithmName OaepHashAlgorithm { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA1 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA256 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA384 { get { throw null; } }
-
-        public static RSAEncryptionPadding OaepSHA512 { get { throw null; } }
-
-        public static RSAEncryptionPadding Pkcs1 { get { throw null; } }
-
-        public static RSAEncryptionPadding CreateOaep(HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(RSAEncryptionPadding other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(RSAEncryptionPadding left, RSAEncryptionPadding right) { throw null; }
-
-        public static bool operator !=(RSAEncryptionPadding left, RSAEncryptionPadding right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum RSAEncryptionPaddingMode
-    {
-        Pkcs1 = 0,
-        Oaep = 1
-    }
-
-    public partial struct RSAParameters
-    {
-        public byte[] D;
-        public byte[] DP;
-        public byte[] DQ;
-        public byte[] Exponent;
-        public byte[] InverseQ;
-        public byte[] Modulus;
-        public byte[] P;
-        public byte[] Q;
-    }
-
-    public sealed partial class RSASignaturePadding : IEquatable<RSASignaturePadding>
-    {
-        internal RSASignaturePadding() { }
-
-        public RSASignaturePaddingMode Mode { get { throw null; } }
-
-        public static RSASignaturePadding Pkcs1 { get { throw null; } }
-
-        public static RSASignaturePadding Pss { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(RSASignaturePadding other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(RSASignaturePadding left, RSASignaturePadding right) { throw null; }
-
-        public static bool operator !=(RSASignaturePadding left, RSASignaturePadding right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public enum RSASignaturePaddingMode
-    {
-        Pkcs1 = 0,
-        Pss = 1
-    }
-
-    public abstract partial class SHA1 : HashAlgorithm
-    {
-        public static SHA1 Create() { throw null; }
-    }
-
-    public abstract partial class SHA256 : HashAlgorithm
-    {
-        public static SHA256 Create() { throw null; }
-    }
-
-    public abstract partial class SHA384 : HashAlgorithm
-    {
-        public static SHA384 Create() { throw null; }
-    }
-
-    public abstract partial class SHA512 : HashAlgorithm
-    {
-        public static SHA512 Create() { throw null; }
-    }
-
-    public abstract partial class TripleDES : SymmetricAlgorithm
-    {
-        public override byte[] Key { get { throw null; } set { } }
-
-        public override KeySizes[] LegalBlockSizes { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public static TripleDES Create() { throw null; }
-
-        public static bool IsWeakKey(byte[] rgbKey) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/system.security.cryptography.algorithms.nuspec b/src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/system.security.cryptography.algorithms.nuspec
deleted file mode 100644
index df915c9f..00000000
--- a/src/referencePackages/src/system.security.cryptography.algorithms/4.3.1/system.security.cryptography.algorithms.nuspec
+++ /dev/null
@@ -1,60 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Security.Cryptography.Algorithms</id>
-    <version>4.3.1</version>
-    <title>System.Security.Cryptography.Algorithms</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides base types for cryptographic algorithms, including hashing, encryption, and signing operations.
-
-Commonly Used Types:
-System.Security.Cryptography.Aes
-System.Security.Cryptography.RSA
-System.Security.Cryptography.RSAParameters
-System.Security.Cryptography.HMACSHA1
-System.Security.Cryptography.SHA256
-System.Security.Cryptography.SHA1
-System.Security.Cryptography.SHA512
-System.Security.Cryptography.SHA384
-System.Security.Cryptography.HMACSHA256
-System.Security.Cryptography.MD5
-System.Security.Cryptography.HMACSHA384
-System.Security.Cryptography.HMACSHA512
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Security.Cryptography.Primitives" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.4">
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Security.Cryptography.Primitives" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.6">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.Numerics" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.Encoding" version="4.3.0" />
-        <dependency id="System.Security.Cryptography.Primitives" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" exclude="Compile" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.cng/5.0.0/System.Security.Cryptography.Cng.5.0.0.csproj b/src/referencePackages/src/system.security.cryptography.cng/5.0.0/System.Security.Cryptography.Cng.5.0.0.csproj
index e9cd4339..aa330296 100644
--- a/src/referencePackages/src/system.security.cryptography.cng/5.0.0/System.Security.Cryptography.Cng.5.0.0.csproj
+++ b/src/referencePackages/src/system.security.cryptography.cng/5.0.0/System.Security.Cryptography.Cng.5.0.0.csproj
@@ -1,7 +1,7 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netcoreapp3.0;netstandard1.3;netstandard1.4;netstandard1.6;netstandard2.0;netstandard2.1</TargetFrameworks>
+    <TargetFrameworks>netcoreapp3.0;netstandard2.0;netstandard2.1</TargetFrameworks>
     <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
   </PropertyGroup>
 
@@ -9,40 +9,4 @@
     <PackageReference Include="System.Formats.Asn1" Version="5.0.0" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Algorithms" Version="4.3.1" />
-    <PackageReference Include="System.Security.Cryptography.Primitives" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.4'">
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Algorithms" Version="4.3.1" />
-    <PackageReference Include="System.Security.Cryptography.Encoding" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.6'">
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Algorithms" Version="4.3.1" />
-    <PackageReference Include="System.Security.Cryptography.Encoding" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-  </ItemGroup>
-
 </Project>
diff --git a/src/referencePackages/src/system.security.cryptography.cng/5.0.0/ref/netstandard1.3/System.Security.Cryptography.Cng.cs b/src/referencePackages/src/system.security.cryptography.cng/5.0.0/ref/netstandard1.3/System.Security.Cryptography.Cng.cs
deleted file mode 100644
index fc0252c2..00000000
--- a/src/referencePackages/src/system.security.cryptography.cng/5.0.0/ref/netstandard1.3/System.Security.Cryptography.Cng.cs
+++ /dev/null
@@ -1,406 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Cryptography.Cng")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Cryptography.Cng")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Cryptography.Cng")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace Microsoft.Win32.SafeHandles
-{
-    public abstract partial class SafeNCryptHandle : System.Runtime.InteropServices.SafeHandle
-    {
-        protected SafeNCryptHandle() : base(default, default) { }
-
-        public override bool IsInvalid { get { throw null; } }
-
-        protected override bool ReleaseHandle() { throw null; }
-
-        protected abstract bool ReleaseNativeHandle();
-    }
-
-    public sealed partial class SafeNCryptKeyHandle : SafeNCryptHandle
-    {
-        protected override bool ReleaseNativeHandle() { throw null; }
-    }
-
-    public sealed partial class SafeNCryptProviderHandle : SafeNCryptHandle
-    {
-        protected override bool ReleaseNativeHandle() { throw null; }
-    }
-
-    public sealed partial class SafeNCryptSecretHandle : SafeNCryptHandle
-    {
-        protected override bool ReleaseNativeHandle() { throw null; }
-    }
-}
-
-namespace System.Security.Cryptography
-{
-    public sealed partial class CngAlgorithm : IEquatable<CngAlgorithm>
-    {
-        public CngAlgorithm(string algorithm) { }
-
-        public string Algorithm { get { throw null; } }
-
-        public static CngAlgorithm ECDiffieHellmanP256 { get { throw null; } }
-
-        public static CngAlgorithm ECDiffieHellmanP384 { get { throw null; } }
-
-        public static CngAlgorithm ECDiffieHellmanP521 { get { throw null; } }
-
-        public static CngAlgorithm ECDsaP256 { get { throw null; } }
-
-        public static CngAlgorithm ECDsaP384 { get { throw null; } }
-
-        public static CngAlgorithm ECDsaP521 { get { throw null; } }
-
-        public static CngAlgorithm MD5 { get { throw null; } }
-
-        public static CngAlgorithm Rsa { get { throw null; } }
-
-        public static CngAlgorithm Sha1 { get { throw null; } }
-
-        public static CngAlgorithm Sha256 { get { throw null; } }
-
-        public static CngAlgorithm Sha384 { get { throw null; } }
-
-        public static CngAlgorithm Sha512 { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CngAlgorithm other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CngAlgorithm left, CngAlgorithm right) { throw null; }
-
-        public static bool operator !=(CngAlgorithm left, CngAlgorithm right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public sealed partial class CngAlgorithmGroup : IEquatable<CngAlgorithmGroup>
-    {
-        public CngAlgorithmGroup(string algorithmGroup) { }
-
-        public string AlgorithmGroup { get { throw null; } }
-
-        public static CngAlgorithmGroup DiffieHellman { get { throw null; } }
-
-        public static CngAlgorithmGroup Dsa { get { throw null; } }
-
-        public static CngAlgorithmGroup ECDiffieHellman { get { throw null; } }
-
-        public static CngAlgorithmGroup ECDsa { get { throw null; } }
-
-        public static CngAlgorithmGroup Rsa { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CngAlgorithmGroup other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CngAlgorithmGroup left, CngAlgorithmGroup right) { throw null; }
-
-        public static bool operator !=(CngAlgorithmGroup left, CngAlgorithmGroup right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    [Flags]
-    public enum CngExportPolicies
-    {
-        None = 0,
-        AllowExport = 1,
-        AllowPlaintextExport = 2,
-        AllowArchiving = 4,
-        AllowPlaintextArchiving = 8
-    }
-
-    public sealed partial class CngKey : IDisposable
-    {
-        internal CngKey() { }
-
-        public CngAlgorithm Algorithm { get { throw null; } }
-
-        public CngAlgorithmGroup AlgorithmGroup { get { throw null; } }
-
-        public CngExportPolicies ExportPolicy { get { throw null; } }
-
-        public Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle Handle { get { throw null; } }
-
-        public bool IsEphemeral { get { throw null; } }
-
-        public bool IsMachineKey { get { throw null; } }
-
-        public string KeyName { get { throw null; } }
-
-        public int KeySize { get { throw null; } }
-
-        public CngKeyUsages KeyUsage { get { throw null; } }
-
-        public IntPtr ParentWindowHandle { get { throw null; } set { } }
-
-        public CngProvider Provider { get { throw null; } }
-
-        public Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle ProviderHandle { get { throw null; } }
-
-        public CngUIPolicy UIPolicy { get { throw null; } }
-
-        public string UniqueName { get { throw null; } }
-
-        public static CngKey Create(CngAlgorithm algorithm, string keyName, CngKeyCreationParameters creationParameters) { throw null; }
-
-        public static CngKey Create(CngAlgorithm algorithm, string keyName) { throw null; }
-
-        public static CngKey Create(CngAlgorithm algorithm) { throw null; }
-
-        public void Delete() { }
-
-        public void Dispose() { }
-
-        public static bool Exists(string keyName, CngProvider provider, CngKeyOpenOptions options) { throw null; }
-
-        public static bool Exists(string keyName, CngProvider provider) { throw null; }
-
-        public static bool Exists(string keyName) { throw null; }
-
-        public byte[] Export(CngKeyBlobFormat format) { throw null; }
-
-        public CngProperty GetProperty(string name, CngPropertyOptions options) { throw null; }
-
-        public bool HasProperty(string name, CngPropertyOptions options) { throw null; }
-
-        public static CngKey Import(byte[] keyBlob, CngKeyBlobFormat format, CngProvider provider) { throw null; }
-
-        public static CngKey Import(byte[] keyBlob, CngKeyBlobFormat format) { throw null; }
-
-        public static CngKey Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle keyHandle, CngKeyHandleOpenOptions keyHandleOpenOptions) { throw null; }
-
-        public static CngKey Open(string keyName, CngProvider provider, CngKeyOpenOptions openOptions) { throw null; }
-
-        public static CngKey Open(string keyName, CngProvider provider) { throw null; }
-
-        public static CngKey Open(string keyName) { throw null; }
-
-        public void SetProperty(CngProperty property) { }
-    }
-
-    public sealed partial class CngKeyBlobFormat : IEquatable<CngKeyBlobFormat>
-    {
-        public CngKeyBlobFormat(string format) { }
-
-        public static CngKeyBlobFormat EccPrivateBlob { get { throw null; } }
-
-        public static CngKeyBlobFormat EccPublicBlob { get { throw null; } }
-
-        public string Format { get { throw null; } }
-
-        public static CngKeyBlobFormat GenericPrivateBlob { get { throw null; } }
-
-        public static CngKeyBlobFormat GenericPublicBlob { get { throw null; } }
-
-        public static CngKeyBlobFormat OpaqueTransportBlob { get { throw null; } }
-
-        public static CngKeyBlobFormat Pkcs8PrivateBlob { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CngKeyBlobFormat other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CngKeyBlobFormat left, CngKeyBlobFormat right) { throw null; }
-
-        public static bool operator !=(CngKeyBlobFormat left, CngKeyBlobFormat right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    [Flags]
-    public enum CngKeyCreationOptions
-    {
-        None = 0,
-        MachineKey = 32,
-        OverwriteExistingKey = 128
-    }
-
-    public sealed partial class CngKeyCreationParameters
-    {
-        public CngExportPolicies? ExportPolicy { get { throw null; } set { } }
-
-        public CngKeyCreationOptions KeyCreationOptions { get { throw null; } set { } }
-
-        public CngKeyUsages? KeyUsage { get { throw null; } set { } }
-
-        public CngPropertyCollection Parameters { get { throw null; } }
-
-        public IntPtr ParentWindowHandle { get { throw null; } set { } }
-
-        public CngProvider Provider { get { throw null; } set { } }
-
-        public CngUIPolicy UIPolicy { get { throw null; } set { } }
-    }
-
-    [Flags]
-    public enum CngKeyHandleOpenOptions
-    {
-        None = 0,
-        EphemeralKey = 1
-    }
-
-    [Flags]
-    public enum CngKeyOpenOptions
-    {
-        None = 0,
-        UserKey = 0,
-        MachineKey = 32,
-        Silent = 64
-    }
-
-    [Flags]
-    public enum CngKeyUsages
-    {
-        None = 0,
-        Decryption = 1,
-        Signing = 2,
-        KeyAgreement = 4,
-        AllUsages = 16777215
-    }
-
-    public partial struct CngProperty : IEquatable<CngProperty>
-    {
-        public CngProperty(string name, byte[] value, CngPropertyOptions options) { }
-
-        public string Name { get { throw null; } }
-
-        public CngPropertyOptions Options { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CngProperty other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public byte[] GetValue() { throw null; }
-
-        public static bool operator ==(CngProperty left, CngProperty right) { throw null; }
-
-        public static bool operator !=(CngProperty left, CngProperty right) { throw null; }
-    }
-
-    public sealed partial class CngPropertyCollection : Collections.ObjectModel.Collection<CngProperty>
-    {
-    }
-
-    [Flags]
-    public enum CngPropertyOptions
-    {
-        Persist = int.MinValue,
-        None = 0,
-        CustomProperty = 1073741824
-    }
-
-    public sealed partial class CngProvider : IEquatable<CngProvider>
-    {
-        public CngProvider(string provider) { }
-
-        public static CngProvider MicrosoftSmartCardKeyStorageProvider { get { throw null; } }
-
-        public static CngProvider MicrosoftSoftwareKeyStorageProvider { get { throw null; } }
-
-        public string Provider { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CngProvider other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CngProvider left, CngProvider right) { throw null; }
-
-        public static bool operator !=(CngProvider left, CngProvider right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public sealed partial class CngUIPolicy
-    {
-        public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName, string description, string useContext, string creationTitle) { }
-
-        public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName, string description, string useContext) { }
-
-        public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName, string description) { }
-
-        public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName) { }
-
-        public CngUIPolicy(CngUIProtectionLevels protectionLevel) { }
-
-        public string CreationTitle { get { throw null; } }
-
-        public string Description { get { throw null; } }
-
-        public string FriendlyName { get { throw null; } }
-
-        public CngUIProtectionLevels ProtectionLevel { get { throw null; } }
-
-        public string UseContext { get { throw null; } }
-    }
-
-    [Flags]
-    public enum CngUIProtectionLevels
-    {
-        None = 0,
-        ProtectKey = 1,
-        ForceHighProtection = 2
-    }
-
-    public sealed partial class RSACng : RSA
-    {
-        public RSACng() { }
-
-        public RSACng(int keySize) { }
-
-        public RSACng(CngKey key) { }
-
-        public CngKey Key { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public override byte[] Decrypt(byte[] data, RSAEncryptionPadding padding) { throw null; }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override byte[] Encrypt(byte[] data, RSAEncryptionPadding padding) { throw null; }
-
-        public override RSAParameters ExportParameters(bool includePrivateParameters) { throw null; }
-
-        protected override byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        protected override byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public override void ImportParameters(RSAParameters parameters) { }
-
-        public override byte[] SignHash(byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public override bool VerifyHash(byte[] hash, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.cng/5.0.0/ref/netstandard1.4/System.Security.Cryptography.Cng.cs b/src/referencePackages/src/system.security.cryptography.cng/5.0.0/ref/netstandard1.4/System.Security.Cryptography.Cng.cs
deleted file mode 100644
index 8cdb2d74..00000000
--- a/src/referencePackages/src/system.security.cryptography.cng/5.0.0/ref/netstandard1.4/System.Security.Cryptography.Cng.cs
+++ /dev/null
@@ -1,429 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Cryptography.Cng")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Cryptography.Cng")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Cryptography.Cng")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace Microsoft.Win32.SafeHandles
-{
-    public abstract partial class SafeNCryptHandle : System.Runtime.InteropServices.SafeHandle
-    {
-        protected SafeNCryptHandle() : base(default, default) { }
-
-        public override bool IsInvalid { get { throw null; } }
-
-        protected override bool ReleaseHandle() { throw null; }
-
-        protected abstract bool ReleaseNativeHandle();
-    }
-
-    public sealed partial class SafeNCryptKeyHandle : SafeNCryptHandle
-    {
-        protected override bool ReleaseNativeHandle() { throw null; }
-    }
-
-    public sealed partial class SafeNCryptProviderHandle : SafeNCryptHandle
-    {
-        protected override bool ReleaseNativeHandle() { throw null; }
-    }
-
-    public sealed partial class SafeNCryptSecretHandle : SafeNCryptHandle
-    {
-        protected override bool ReleaseNativeHandle() { throw null; }
-    }
-}
-
-namespace System.Security.Cryptography
-{
-    public sealed partial class CngAlgorithm : IEquatable<CngAlgorithm>
-    {
-        public CngAlgorithm(string algorithm) { }
-
-        public string Algorithm { get { throw null; } }
-
-        public static CngAlgorithm ECDiffieHellmanP256 { get { throw null; } }
-
-        public static CngAlgorithm ECDiffieHellmanP384 { get { throw null; } }
-
-        public static CngAlgorithm ECDiffieHellmanP521 { get { throw null; } }
-
-        public static CngAlgorithm ECDsaP256 { get { throw null; } }
-
-        public static CngAlgorithm ECDsaP384 { get { throw null; } }
-
-        public static CngAlgorithm ECDsaP521 { get { throw null; } }
-
-        public static CngAlgorithm MD5 { get { throw null; } }
-
-        public static CngAlgorithm Rsa { get { throw null; } }
-
-        public static CngAlgorithm Sha1 { get { throw null; } }
-
-        public static CngAlgorithm Sha256 { get { throw null; } }
-
-        public static CngAlgorithm Sha384 { get { throw null; } }
-
-        public static CngAlgorithm Sha512 { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CngAlgorithm other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CngAlgorithm left, CngAlgorithm right) { throw null; }
-
-        public static bool operator !=(CngAlgorithm left, CngAlgorithm right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public sealed partial class CngAlgorithmGroup : IEquatable<CngAlgorithmGroup>
-    {
-        public CngAlgorithmGroup(string algorithmGroup) { }
-
-        public string AlgorithmGroup { get { throw null; } }
-
-        public static CngAlgorithmGroup DiffieHellman { get { throw null; } }
-
-        public static CngAlgorithmGroup Dsa { get { throw null; } }
-
-        public static CngAlgorithmGroup ECDiffieHellman { get { throw null; } }
-
-        public static CngAlgorithmGroup ECDsa { get { throw null; } }
-
-        public static CngAlgorithmGroup Rsa { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CngAlgorithmGroup other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CngAlgorithmGroup left, CngAlgorithmGroup right) { throw null; }
-
-        public static bool operator !=(CngAlgorithmGroup left, CngAlgorithmGroup right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    [Flags]
-    public enum CngExportPolicies
-    {
-        None = 0,
-        AllowExport = 1,
-        AllowPlaintextExport = 2,
-        AllowArchiving = 4,
-        AllowPlaintextArchiving = 8
-    }
-
-    public sealed partial class CngKey : IDisposable
-    {
-        internal CngKey() { }
-
-        public CngAlgorithm Algorithm { get { throw null; } }
-
-        public CngAlgorithmGroup AlgorithmGroup { get { throw null; } }
-
-        public CngExportPolicies ExportPolicy { get { throw null; } }
-
-        public Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle Handle { get { throw null; } }
-
-        public bool IsEphemeral { get { throw null; } }
-
-        public bool IsMachineKey { get { throw null; } }
-
-        public string KeyName { get { throw null; } }
-
-        public int KeySize { get { throw null; } }
-
-        public CngKeyUsages KeyUsage { get { throw null; } }
-
-        public IntPtr ParentWindowHandle { get { throw null; } set { } }
-
-        public CngProvider Provider { get { throw null; } }
-
-        public Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle ProviderHandle { get { throw null; } }
-
-        public CngUIPolicy UIPolicy { get { throw null; } }
-
-        public string UniqueName { get { throw null; } }
-
-        public static CngKey Create(CngAlgorithm algorithm, string keyName, CngKeyCreationParameters creationParameters) { throw null; }
-
-        public static CngKey Create(CngAlgorithm algorithm, string keyName) { throw null; }
-
-        public static CngKey Create(CngAlgorithm algorithm) { throw null; }
-
-        public void Delete() { }
-
-        public void Dispose() { }
-
-        public static bool Exists(string keyName, CngProvider provider, CngKeyOpenOptions options) { throw null; }
-
-        public static bool Exists(string keyName, CngProvider provider) { throw null; }
-
-        public static bool Exists(string keyName) { throw null; }
-
-        public byte[] Export(CngKeyBlobFormat format) { throw null; }
-
-        public CngProperty GetProperty(string name, CngPropertyOptions options) { throw null; }
-
-        public bool HasProperty(string name, CngPropertyOptions options) { throw null; }
-
-        public static CngKey Import(byte[] keyBlob, CngKeyBlobFormat format, CngProvider provider) { throw null; }
-
-        public static CngKey Import(byte[] keyBlob, CngKeyBlobFormat format) { throw null; }
-
-        public static CngKey Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle keyHandle, CngKeyHandleOpenOptions keyHandleOpenOptions) { throw null; }
-
-        public static CngKey Open(string keyName, CngProvider provider, CngKeyOpenOptions openOptions) { throw null; }
-
-        public static CngKey Open(string keyName, CngProvider provider) { throw null; }
-
-        public static CngKey Open(string keyName) { throw null; }
-
-        public void SetProperty(CngProperty property) { }
-    }
-
-    public sealed partial class CngKeyBlobFormat : IEquatable<CngKeyBlobFormat>
-    {
-        public CngKeyBlobFormat(string format) { }
-
-        public static CngKeyBlobFormat EccPrivateBlob { get { throw null; } }
-
-        public static CngKeyBlobFormat EccPublicBlob { get { throw null; } }
-
-        public string Format { get { throw null; } }
-
-        public static CngKeyBlobFormat GenericPrivateBlob { get { throw null; } }
-
-        public static CngKeyBlobFormat GenericPublicBlob { get { throw null; } }
-
-        public static CngKeyBlobFormat OpaqueTransportBlob { get { throw null; } }
-
-        public static CngKeyBlobFormat Pkcs8PrivateBlob { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CngKeyBlobFormat other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CngKeyBlobFormat left, CngKeyBlobFormat right) { throw null; }
-
-        public static bool operator !=(CngKeyBlobFormat left, CngKeyBlobFormat right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    [Flags]
-    public enum CngKeyCreationOptions
-    {
-        None = 0,
-        MachineKey = 32,
-        OverwriteExistingKey = 128
-    }
-
-    public sealed partial class CngKeyCreationParameters
-    {
-        public CngExportPolicies? ExportPolicy { get { throw null; } set { } }
-
-        public CngKeyCreationOptions KeyCreationOptions { get { throw null; } set { } }
-
-        public CngKeyUsages? KeyUsage { get { throw null; } set { } }
-
-        public CngPropertyCollection Parameters { get { throw null; } }
-
-        public IntPtr ParentWindowHandle { get { throw null; } set { } }
-
-        public CngProvider Provider { get { throw null; } set { } }
-
-        public CngUIPolicy UIPolicy { get { throw null; } set { } }
-    }
-
-    [Flags]
-    public enum CngKeyHandleOpenOptions
-    {
-        None = 0,
-        EphemeralKey = 1
-    }
-
-    [Flags]
-    public enum CngKeyOpenOptions
-    {
-        None = 0,
-        UserKey = 0,
-        MachineKey = 32,
-        Silent = 64
-    }
-
-    [Flags]
-    public enum CngKeyUsages
-    {
-        None = 0,
-        Decryption = 1,
-        Signing = 2,
-        KeyAgreement = 4,
-        AllUsages = 16777215
-    }
-
-    public partial struct CngProperty : IEquatable<CngProperty>
-    {
-        public CngProperty(string name, byte[] value, CngPropertyOptions options) { }
-
-        public string Name { get { throw null; } }
-
-        public CngPropertyOptions Options { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CngProperty other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public byte[] GetValue() { throw null; }
-
-        public static bool operator ==(CngProperty left, CngProperty right) { throw null; }
-
-        public static bool operator !=(CngProperty left, CngProperty right) { throw null; }
-    }
-
-    public sealed partial class CngPropertyCollection : Collections.ObjectModel.Collection<CngProperty>
-    {
-    }
-
-    [Flags]
-    public enum CngPropertyOptions
-    {
-        Persist = int.MinValue,
-        None = 0,
-        CustomProperty = 1073741824
-    }
-
-    public sealed partial class CngProvider : IEquatable<CngProvider>
-    {
-        public CngProvider(string provider) { }
-
-        public static CngProvider MicrosoftSmartCardKeyStorageProvider { get { throw null; } }
-
-        public static CngProvider MicrosoftSoftwareKeyStorageProvider { get { throw null; } }
-
-        public string Provider { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CngProvider other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CngProvider left, CngProvider right) { throw null; }
-
-        public static bool operator !=(CngProvider left, CngProvider right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public sealed partial class CngUIPolicy
-    {
-        public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName, string description, string useContext, string creationTitle) { }
-
-        public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName, string description, string useContext) { }
-
-        public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName, string description) { }
-
-        public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName) { }
-
-        public CngUIPolicy(CngUIProtectionLevels protectionLevel) { }
-
-        public string CreationTitle { get { throw null; } }
-
-        public string Description { get { throw null; } }
-
-        public string FriendlyName { get { throw null; } }
-
-        public CngUIProtectionLevels ProtectionLevel { get { throw null; } }
-
-        public string UseContext { get { throw null; } }
-    }
-
-    [Flags]
-    public enum CngUIProtectionLevels
-    {
-        None = 0,
-        ProtectKey = 1,
-        ForceHighProtection = 2
-    }
-
-    public sealed partial class ECDsaCng : ECDsa
-    {
-        public ECDsaCng() { }
-
-        public ECDsaCng(int keySize) { }
-
-        public ECDsaCng(CngKey key) { }
-
-        public CngKey Key { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        protected override byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public override byte[] SignHash(byte[] hash) { throw null; }
-
-        public override bool VerifyHash(byte[] hash, byte[] signature) { throw null; }
-    }
-
-    public sealed partial class RSACng : RSA
-    {
-        public RSACng() { }
-
-        public RSACng(int keySize) { }
-
-        public RSACng(CngKey key) { }
-
-        public CngKey Key { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public override byte[] Decrypt(byte[] data, RSAEncryptionPadding padding) { throw null; }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override byte[] Encrypt(byte[] data, RSAEncryptionPadding padding) { throw null; }
-
-        public override RSAParameters ExportParameters(bool includePrivateParameters) { throw null; }
-
-        protected override byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        protected override byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public override void ImportParameters(RSAParameters parameters) { }
-
-        public override byte[] SignHash(byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public override bool VerifyHash(byte[] hash, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.cng/5.0.0/ref/netstandard1.6/System.Security.Cryptography.Cng.cs b/src/referencePackages/src/system.security.cryptography.cng/5.0.0/ref/netstandard1.6/System.Security.Cryptography.Cng.cs
deleted file mode 100644
index 28e83318..00000000
--- a/src/referencePackages/src/system.security.cryptography.cng/5.0.0/ref/netstandard1.6/System.Security.Cryptography.Cng.cs
+++ /dev/null
@@ -1,509 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Cryptography.Cng")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Cryptography.Cng")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Cryptography.Cng")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.2.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace Microsoft.Win32.SafeHandles
-{
-    public abstract partial class SafeNCryptHandle : System.Runtime.InteropServices.SafeHandle
-    {
-        protected SafeNCryptHandle() : base(default, default) { }
-
-        public override bool IsInvalid { get { throw null; } }
-
-        protected override bool ReleaseHandle() { throw null; }
-
-        protected abstract bool ReleaseNativeHandle();
-    }
-
-    public sealed partial class SafeNCryptKeyHandle : SafeNCryptHandle
-    {
-        protected override bool ReleaseNativeHandle() { throw null; }
-    }
-
-    public sealed partial class SafeNCryptProviderHandle : SafeNCryptHandle
-    {
-        protected override bool ReleaseNativeHandle() { throw null; }
-    }
-
-    public sealed partial class SafeNCryptSecretHandle : SafeNCryptHandle
-    {
-        protected override bool ReleaseNativeHandle() { throw null; }
-    }
-}
-
-namespace System.Security.Cryptography
-{
-    public sealed partial class AesCng : Aes
-    {
-        public AesCng() { }
-
-        public AesCng(string keyName, CngProvider provider, CngKeyOpenOptions openOptions) { }
-
-        public AesCng(string keyName, CngProvider provider) { }
-
-        public AesCng(string keyName) { }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        public override int KeySize { get { throw null; } set { } }
-
-        public override ICryptoTransform CreateDecryptor() { throw null; }
-
-        public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV) { throw null; }
-
-        public override ICryptoTransform CreateEncryptor() { throw null; }
-
-        public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV) { throw null; }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override void GenerateIV() { }
-
-        public override void GenerateKey() { }
-    }
-
-    public sealed partial class CngAlgorithm : IEquatable<CngAlgorithm>
-    {
-        public CngAlgorithm(string algorithm) { }
-
-        public string Algorithm { get { throw null; } }
-
-        public static CngAlgorithm ECDiffieHellman { get { throw null; } }
-
-        public static CngAlgorithm ECDiffieHellmanP256 { get { throw null; } }
-
-        public static CngAlgorithm ECDiffieHellmanP384 { get { throw null; } }
-
-        public static CngAlgorithm ECDiffieHellmanP521 { get { throw null; } }
-
-        public static CngAlgorithm ECDsa { get { throw null; } }
-
-        public static CngAlgorithm ECDsaP256 { get { throw null; } }
-
-        public static CngAlgorithm ECDsaP384 { get { throw null; } }
-
-        public static CngAlgorithm ECDsaP521 { get { throw null; } }
-
-        public static CngAlgorithm MD5 { get { throw null; } }
-
-        public static CngAlgorithm Rsa { get { throw null; } }
-
-        public static CngAlgorithm Sha1 { get { throw null; } }
-
-        public static CngAlgorithm Sha256 { get { throw null; } }
-
-        public static CngAlgorithm Sha384 { get { throw null; } }
-
-        public static CngAlgorithm Sha512 { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CngAlgorithm other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CngAlgorithm left, CngAlgorithm right) { throw null; }
-
-        public static bool operator !=(CngAlgorithm left, CngAlgorithm right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public sealed partial class CngAlgorithmGroup : IEquatable<CngAlgorithmGroup>
-    {
-        public CngAlgorithmGroup(string algorithmGroup) { }
-
-        public string AlgorithmGroup { get { throw null; } }
-
-        public static CngAlgorithmGroup DiffieHellman { get { throw null; } }
-
-        public static CngAlgorithmGroup Dsa { get { throw null; } }
-
-        public static CngAlgorithmGroup ECDiffieHellman { get { throw null; } }
-
-        public static CngAlgorithmGroup ECDsa { get { throw null; } }
-
-        public static CngAlgorithmGroup Rsa { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CngAlgorithmGroup other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CngAlgorithmGroup left, CngAlgorithmGroup right) { throw null; }
-
-        public static bool operator !=(CngAlgorithmGroup left, CngAlgorithmGroup right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    [Flags]
-    public enum CngExportPolicies
-    {
-        None = 0,
-        AllowExport = 1,
-        AllowPlaintextExport = 2,
-        AllowArchiving = 4,
-        AllowPlaintextArchiving = 8
-    }
-
-    public sealed partial class CngKey : IDisposable
-    {
-        internal CngKey() { }
-
-        public CngAlgorithm Algorithm { get { throw null; } }
-
-        public CngAlgorithmGroup AlgorithmGroup { get { throw null; } }
-
-        public CngExportPolicies ExportPolicy { get { throw null; } }
-
-        public Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle Handle { get { throw null; } }
-
-        public bool IsEphemeral { get { throw null; } }
-
-        public bool IsMachineKey { get { throw null; } }
-
-        public string KeyName { get { throw null; } }
-
-        public int KeySize { get { throw null; } }
-
-        public CngKeyUsages KeyUsage { get { throw null; } }
-
-        public IntPtr ParentWindowHandle { get { throw null; } set { } }
-
-        public CngProvider Provider { get { throw null; } }
-
-        public Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle ProviderHandle { get { throw null; } }
-
-        public CngUIPolicy UIPolicy { get { throw null; } }
-
-        public string UniqueName { get { throw null; } }
-
-        public static CngKey Create(CngAlgorithm algorithm, string keyName, CngKeyCreationParameters creationParameters) { throw null; }
-
-        public static CngKey Create(CngAlgorithm algorithm, string keyName) { throw null; }
-
-        public static CngKey Create(CngAlgorithm algorithm) { throw null; }
-
-        public void Delete() { }
-
-        public void Dispose() { }
-
-        public static bool Exists(string keyName, CngProvider provider, CngKeyOpenOptions options) { throw null; }
-
-        public static bool Exists(string keyName, CngProvider provider) { throw null; }
-
-        public static bool Exists(string keyName) { throw null; }
-
-        public byte[] Export(CngKeyBlobFormat format) { throw null; }
-
-        public CngProperty GetProperty(string name, CngPropertyOptions options) { throw null; }
-
-        public bool HasProperty(string name, CngPropertyOptions options) { throw null; }
-
-        public static CngKey Import(byte[] keyBlob, CngKeyBlobFormat format, CngProvider provider) { throw null; }
-
-        public static CngKey Import(byte[] keyBlob, CngKeyBlobFormat format) { throw null; }
-
-        public static CngKey Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle keyHandle, CngKeyHandleOpenOptions keyHandleOpenOptions) { throw null; }
-
-        public static CngKey Open(string keyName, CngProvider provider, CngKeyOpenOptions openOptions) { throw null; }
-
-        public static CngKey Open(string keyName, CngProvider provider) { throw null; }
-
-        public static CngKey Open(string keyName) { throw null; }
-
-        public void SetProperty(CngProperty property) { }
-    }
-
-    public sealed partial class CngKeyBlobFormat : IEquatable<CngKeyBlobFormat>
-    {
-        public CngKeyBlobFormat(string format) { }
-
-        public static CngKeyBlobFormat EccFullPrivateBlob { get { throw null; } }
-
-        public static CngKeyBlobFormat EccFullPublicBlob { get { throw null; } }
-
-        public static CngKeyBlobFormat EccPrivateBlob { get { throw null; } }
-
-        public static CngKeyBlobFormat EccPublicBlob { get { throw null; } }
-
-        public string Format { get { throw null; } }
-
-        public static CngKeyBlobFormat GenericPrivateBlob { get { throw null; } }
-
-        public static CngKeyBlobFormat GenericPublicBlob { get { throw null; } }
-
-        public static CngKeyBlobFormat OpaqueTransportBlob { get { throw null; } }
-
-        public static CngKeyBlobFormat Pkcs8PrivateBlob { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CngKeyBlobFormat other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CngKeyBlobFormat left, CngKeyBlobFormat right) { throw null; }
-
-        public static bool operator !=(CngKeyBlobFormat left, CngKeyBlobFormat right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    [Flags]
-    public enum CngKeyCreationOptions
-    {
-        None = 0,
-        MachineKey = 32,
-        OverwriteExistingKey = 128
-    }
-
-    public sealed partial class CngKeyCreationParameters
-    {
-        public CngExportPolicies? ExportPolicy { get { throw null; } set { } }
-
-        public CngKeyCreationOptions KeyCreationOptions { get { throw null; } set { } }
-
-        public CngKeyUsages? KeyUsage { get { throw null; } set { } }
-
-        public CngPropertyCollection Parameters { get { throw null; } }
-
-        public IntPtr ParentWindowHandle { get { throw null; } set { } }
-
-        public CngProvider Provider { get { throw null; } set { } }
-
-        public CngUIPolicy UIPolicy { get { throw null; } set { } }
-    }
-
-    [Flags]
-    public enum CngKeyHandleOpenOptions
-    {
-        None = 0,
-        EphemeralKey = 1
-    }
-
-    [Flags]
-    public enum CngKeyOpenOptions
-    {
-        None = 0,
-        UserKey = 0,
-        MachineKey = 32,
-        Silent = 64
-    }
-
-    [Flags]
-    public enum CngKeyUsages
-    {
-        None = 0,
-        Decryption = 1,
-        Signing = 2,
-        KeyAgreement = 4,
-        AllUsages = 16777215
-    }
-
-    public partial struct CngProperty : IEquatable<CngProperty>
-    {
-        public CngProperty(string name, byte[] value, CngPropertyOptions options) { }
-
-        public string Name { get { throw null; } }
-
-        public CngPropertyOptions Options { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CngProperty other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public byte[] GetValue() { throw null; }
-
-        public static bool operator ==(CngProperty left, CngProperty right) { throw null; }
-
-        public static bool operator !=(CngProperty left, CngProperty right) { throw null; }
-    }
-
-    public sealed partial class CngPropertyCollection : Collections.ObjectModel.Collection<CngProperty>
-    {
-    }
-
-    [Flags]
-    public enum CngPropertyOptions
-    {
-        Persist = int.MinValue,
-        None = 0,
-        CustomProperty = 1073741824
-    }
-
-    public sealed partial class CngProvider : IEquatable<CngProvider>
-    {
-        public CngProvider(string provider) { }
-
-        public static CngProvider MicrosoftSmartCardKeyStorageProvider { get { throw null; } }
-
-        public static CngProvider MicrosoftSoftwareKeyStorageProvider { get { throw null; } }
-
-        public string Provider { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CngProvider other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CngProvider left, CngProvider right) { throw null; }
-
-        public static bool operator !=(CngProvider left, CngProvider right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public sealed partial class CngUIPolicy
-    {
-        public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName, string description, string useContext, string creationTitle) { }
-
-        public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName, string description, string useContext) { }
-
-        public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName, string description) { }
-
-        public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName) { }
-
-        public CngUIPolicy(CngUIProtectionLevels protectionLevel) { }
-
-        public string CreationTitle { get { throw null; } }
-
-        public string Description { get { throw null; } }
-
-        public string FriendlyName { get { throw null; } }
-
-        public CngUIProtectionLevels ProtectionLevel { get { throw null; } }
-
-        public string UseContext { get { throw null; } }
-    }
-
-    [Flags]
-    public enum CngUIProtectionLevels
-    {
-        None = 0,
-        ProtectKey = 1,
-        ForceHighProtection = 2
-    }
-
-    public sealed partial class ECDsaCng : ECDsa
-    {
-        public ECDsaCng() { }
-
-        public ECDsaCng(int keySize) { }
-
-        public ECDsaCng(CngKey key) { }
-
-        public ECDsaCng(ECCurve curve) { }
-
-        public CngKey Key { get { throw null; } }
-
-        public override int KeySize { get { throw null; } set { } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override ECParameters ExportExplicitParameters(bool includePrivateParameters) { throw null; }
-
-        public override ECParameters ExportParameters(bool includePrivateParameters) { throw null; }
-
-        public override void GenerateKey(ECCurve curve) { }
-
-        protected override byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        protected override byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public override void ImportParameters(ECParameters parameters) { }
-
-        public override byte[] SignHash(byte[] hash) { throw null; }
-
-        public override bool VerifyHash(byte[] hash, byte[] signature) { throw null; }
-    }
-
-    public sealed partial class RSACng : RSA
-    {
-        public RSACng() { }
-
-        public RSACng(int keySize) { }
-
-        public RSACng(CngKey key) { }
-
-        public CngKey Key { get { throw null; } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public override byte[] Decrypt(byte[] data, RSAEncryptionPadding padding) { throw null; }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override byte[] Encrypt(byte[] data, RSAEncryptionPadding padding) { throw null; }
-
-        public override RSAParameters ExportParameters(bool includePrivateParameters) { throw null; }
-
-        protected override byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        protected override byte[] HashData(IO.Stream data, HashAlgorithmName hashAlgorithm) { throw null; }
-
-        public override void ImportParameters(RSAParameters parameters) { }
-
-        public override byte[] SignHash(byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-
-        public override bool VerifyHash(byte[] hash, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) { throw null; }
-    }
-
-    public sealed partial class TripleDESCng : TripleDES
-    {
-        public TripleDESCng() { }
-
-        public TripleDESCng(string keyName, CngProvider provider, CngKeyOpenOptions openOptions) { }
-
-        public TripleDESCng(string keyName, CngProvider provider) { }
-
-        public TripleDESCng(string keyName) { }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        public override int KeySize { get { throw null; } set { } }
-
-        public override KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public override ICryptoTransform CreateDecryptor() { throw null; }
-
-        public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV) { throw null; }
-
-        public override ICryptoTransform CreateEncryptor() { throw null; }
-
-        public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV) { throw null; }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override void GenerateIV() { }
-
-        public override void GenerateKey() { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.cng/5.0.0/system.security.cryptography.cng.nuspec b/src/referencePackages/src/system.security.cryptography.cng/5.0.0/system.security.cryptography.cng.nuspec
index 305090e6..f101f844 100644
--- a/src/referencePackages/src/system.security.cryptography.cng/5.0.0/system.security.cryptography.cng.nuspec
+++ b/src/referencePackages/src/system.security.cryptography.cng/5.0.0/system.security.cryptography.cng.nuspec
@@ -27,39 +27,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
       <group targetFramework=".NETCoreApp3.0">
         <dependency id="System.Formats.Asn1" version="5.0.0" exclude="Compile" />
       </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.Algorithms" version="4.3.1" />
-        <dependency id="System.Security.Cryptography.Primitives" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.4">
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.Algorithms" version="4.3.1" />
-        <dependency id="System.Security.Cryptography.Encoding" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.Primitives" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" exclude="Compile" />
-      </group>
-      <group targetFramework=".NETStandard1.6">
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.Algorithms" version="4.3.1" />
-        <dependency id="System.Security.Cryptography.Encoding" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.Primitives" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" exclude="Compile" />
-      </group>
       <group targetFramework=".NETStandard2.0" />
       <group targetFramework=".NETStandard2.1" />
     </dependencies>
diff --git a/src/referencePackages/src/system.security.cryptography.encoding/4.3.0/System.Security.Cryptography.Encoding.4.3.0.csproj b/src/referencePackages/src/system.security.cryptography.encoding/4.3.0/System.Security.Cryptography.Encoding.4.3.0.csproj
deleted file mode 100644
index e42691b3..00000000
--- a/src/referencePackages/src/system.security.cryptography.encoding/4.3.0/System.Security.Cryptography.Encoding.4.3.0.csproj
+++ /dev/null
@@ -1,22 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Security.Cryptography.Encoding</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Collections.Concurrent" Version="4.3.0" />
-    <PackageReference Include="System.Linq" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.security.cryptography.encoding/4.3.0/ref/netstandard1.3/System.Security.Cryptography.Encoding.cs b/src/referencePackages/src/system.security.cryptography.encoding/4.3.0/ref/netstandard1.3/System.Security.Cryptography.Encoding.cs
deleted file mode 100644
index b4dbe8cf..00000000
--- a/src/referencePackages/src/system.security.cryptography.encoding/4.3.0/ref/netstandard1.3/System.Security.Cryptography.Encoding.cs
+++ /dev/null
@@ -1,155 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Cryptography.Encoding")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Cryptography.Encoding")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Cryptography.Encoding")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Security.Cryptography
-{
-    public partial class AsnEncodedData
-    {
-        protected AsnEncodedData() { }
-
-        public AsnEncodedData(byte[] rawData) { }
-
-        public AsnEncodedData(AsnEncodedData asnEncodedData) { }
-
-        public AsnEncodedData(Oid oid, byte[] rawData) { }
-
-        public AsnEncodedData(string oid, byte[] rawData) { }
-
-        public Oid Oid { get { throw null; } set { } }
-
-        public byte[] RawData { get { throw null; } set { } }
-
-        public virtual void CopyFrom(AsnEncodedData asnEncodedData) { }
-
-        public virtual string Format(bool multiLine) { throw null; }
-    }
-
-    public sealed partial class AsnEncodedDataCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        public AsnEncodedDataCollection() { }
-
-        public AsnEncodedDataCollection(AsnEncodedData asnEncodedData) { }
-
-        public int Count { get { throw null; } }
-
-        public AsnEncodedData this[int index] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public int Add(AsnEncodedData asnEncodedData) { throw null; }
-
-        public void CopyTo(AsnEncodedData[] array, int index) { }
-
-        public AsnEncodedDataEnumerator GetEnumerator() { throw null; }
-
-        public void Remove(AsnEncodedData asnEncodedData) { }
-
-        void Collections.ICollection.CopyTo(Array array, int index) { }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-    }
-
-    public sealed partial class AsnEncodedDataEnumerator : Collections.IEnumerator
-    {
-        internal AsnEncodedDataEnumerator() { }
-
-        public AsnEncodedData Current { get { throw null; } }
-
-        object Collections.IEnumerator.Current { get { throw null; } }
-
-        public bool MoveNext() { throw null; }
-
-        public void Reset() { }
-    }
-
-    public sealed partial class Oid
-    {
-        public Oid(Oid oid) { }
-
-        public Oid(string value, string friendlyName) { }
-
-        public Oid(string oid) { }
-
-        public string FriendlyName { get { throw null; } set { } }
-
-        public string Value { get { throw null; } set { } }
-
-        public static Oid FromFriendlyName(string friendlyName, OidGroup group) { throw null; }
-
-        public static Oid FromOidValue(string oidValue, OidGroup group) { throw null; }
-    }
-
-    public sealed partial class OidCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        public int Count { get { throw null; } }
-
-        public Oid this[int index] { get { throw null; } }
-
-        public Oid this[string oid] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public int Add(Oid oid) { throw null; }
-
-        public void CopyTo(Oid[] array, int index) { }
-
-        public OidEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int index) { }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-    }
-
-    public sealed partial class OidEnumerator : Collections.IEnumerator
-    {
-        internal OidEnumerator() { }
-
-        public Oid Current { get { throw null; } }
-
-        object Collections.IEnumerator.Current { get { throw null; } }
-
-        public bool MoveNext() { throw null; }
-
-        public void Reset() { }
-    }
-
-    public enum OidGroup
-    {
-        All = 0,
-        HashAlgorithm = 1,
-        EncryptionAlgorithm = 2,
-        PublicKeyAlgorithm = 3,
-        SignatureAlgorithm = 4,
-        Attribute = 5,
-        ExtensionOrAttribute = 6,
-        EnhancedKeyUsage = 7,
-        Policy = 8,
-        Template = 9,
-        KeyDerivationFunction = 10
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.encoding/4.3.0/system.security.cryptography.encoding.nuspec b/src/referencePackages/src/system.security.cryptography.encoding/4.3.0/system.security.cryptography.encoding.nuspec
deleted file mode 100644
index c1a5343a..00000000
--- a/src/referencePackages/src/system.security.cryptography.encoding/4.3.0/system.security.cryptography.encoding.nuspec
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Security.Cryptography.Encoding</id>
-    <version>4.3.0</version>
-    <title>System.Security.Cryptography.Encoding</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides types for representing Abstract Syntax Notation One (ASN.1)-encoded data.
-
-Commonly Used Types:
-System.Security.Cryptography.AsnEncodedData
-System.Security.Cryptography.Oid
-System.Security.Cryptography.OidCollection
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Collections.Concurrent" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Linq" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.Primitives" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Text.Encoding" version="4.3.0" exclude="Compile" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.primitives/4.3.0/System.Security.Cryptography.Primitives.4.3.0.csproj b/src/referencePackages/src/system.security.cryptography.primitives/4.3.0/System.Security.Cryptography.Primitives.4.3.0.csproj
deleted file mode 100644
index 839c5b42..00000000
--- a/src/referencePackages/src/system.security.cryptography.primitives/4.3.0/System.Security.Cryptography.Primitives.4.3.0.csproj
+++ /dev/null
@@ -1,18 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
-    <PackageReference Include="System.Globalization" Version="4.3.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Threading" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.security.cryptography.primitives/4.3.0/ref/netstandard1.3/System.Security.Cryptography.Primitives.cs b/src/referencePackages/src/system.security.cryptography.primitives/4.3.0/ref/netstandard1.3/System.Security.Cryptography.Primitives.cs
deleted file mode 100644
index 11aa5c5c..00000000
--- a/src/referencePackages/src/system.security.cryptography.primitives/4.3.0/ref/netstandard1.3/System.Security.Cryptography.Primitives.cs
+++ /dev/null
@@ -1,244 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Cryptography.Primitives")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Cryptography.Primitives")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Cryptography.Primitives")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Security.Cryptography
-{
-    public abstract partial class AsymmetricAlgorithm : IDisposable
-    {
-        protected int KeySizeValue;
-        protected KeySizes[] LegalKeySizesValue;
-        public virtual int KeySize { get { throw null; } set { } }
-
-        public virtual KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-    }
-
-    public enum CipherMode
-    {
-        CBC = 1,
-        ECB = 2, // CodeQL [SM02299] This just defines the API and doesn't represent usage // CodeQL [SM00395] This just defines the API and doesn't represent usage
-        CTS = 5
-    }
-
-    public partial class CryptographicException : Exception
-    {
-        public CryptographicException() { }
-
-        public CryptographicException(int hr) { }
-
-        public CryptographicException(string message, Exception inner) { }
-
-        public CryptographicException(string format, string insert) { }
-
-        public CryptographicException(string message) { }
-    }
-
-    public partial class CryptoStream : IO.Stream, IDisposable
-    {
-        public CryptoStream(IO.Stream stream, ICryptoTransform transform, CryptoStreamMode mode) { }
-
-        public override bool CanRead { get { throw null; } }
-
-        public override bool CanSeek { get { throw null; } }
-
-        public override bool CanWrite { get { throw null; } }
-
-        public bool HasFlushedFinalBlock { get { throw null; } }
-
-        public override long Length { get { throw null; } }
-
-        public override long Position { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        public override void Flush() { }
-
-        public override Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken) { throw null; }
-
-        public void FlushFinalBlock() { }
-
-        public override int Read(byte[] buffer, int offset, int count) { throw null; }
-
-        public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-
-        public override long Seek(long offset, IO.SeekOrigin origin) { throw null; }
-
-        public override void SetLength(long value) { }
-
-        public override void Write(byte[] buffer, int offset, int count) { }
-
-        public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken) { throw null; }
-    }
-
-    public enum CryptoStreamMode
-    {
-        Read = 0,
-        Write = 1
-    }
-
-    public abstract partial class HashAlgorithm : IDisposable
-    {
-        public virtual int HashSize { get { throw null; } }
-
-        public byte[] ComputeHash(byte[] buffer, int offset, int count) { throw null; }
-
-        public byte[] ComputeHash(byte[] buffer) { throw null; }
-
-        public byte[] ComputeHash(IO.Stream inputStream) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        protected abstract void HashCore(byte[] array, int ibStart, int cbSize);
-        protected abstract byte[] HashFinal();
-        public abstract void Initialize();
-    }
-
-    public partial struct HashAlgorithmName : IEquatable<HashAlgorithmName>
-    {
-        public HashAlgorithmName(string name) { }
-
-        public static HashAlgorithmName MD5 { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public static HashAlgorithmName SHA1 { get { throw null; } }
-
-        public static HashAlgorithmName SHA256 { get { throw null; } }
-
-        public static HashAlgorithmName SHA384 { get { throw null; } }
-
-        public static HashAlgorithmName SHA512 { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(HashAlgorithmName other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(HashAlgorithmName left, HashAlgorithmName right) { throw null; }
-
-        public static bool operator !=(HashAlgorithmName left, HashAlgorithmName right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public abstract partial class HMAC : KeyedHashAlgorithm
-    {
-        public string HashName { get { throw null; } set { } }
-
-        public override byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-
-        protected override void HashCore(byte[] rgb, int ib, int cb) { }
-
-        protected override byte[] HashFinal() { throw null; }
-
-        public override void Initialize() { }
-    }
-
-    public partial interface ICryptoTransform : IDisposable
-    {
-        bool CanReuseTransform { get; }
-
-        bool CanTransformMultipleBlocks { get; }
-
-        int InputBlockSize { get; }
-
-        int OutputBlockSize { get; }
-
-        int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
-        byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
-    }
-
-    public abstract partial class KeyedHashAlgorithm : HashAlgorithm
-    {
-        public virtual byte[] Key { get { throw null; } set { } }
-
-        protected override void Dispose(bool disposing) { }
-    }
-
-    public sealed partial class KeySizes
-    {
-        public KeySizes(int minSize, int maxSize, int skipSize) { }
-
-        public int MaxSize { get { throw null; } }
-
-        public int MinSize { get { throw null; } }
-
-        public int SkipSize { get { throw null; } }
-    }
-
-    public enum PaddingMode
-    {
-        None = 1,
-        PKCS7 = 2,
-        Zeros = 3
-    }
-
-    public abstract partial class SymmetricAlgorithm : IDisposable
-    {
-        protected int BlockSizeValue;
-        protected byte[] IVValue;
-        protected int KeySizeValue;
-        protected byte[] KeyValue;
-        protected KeySizes[] LegalBlockSizesValue;
-        protected KeySizes[] LegalKeySizesValue;
-        protected CipherMode ModeValue;
-        protected PaddingMode PaddingValue;
-        public virtual int BlockSize { get { throw null; } set { } }
-
-        public virtual byte[] IV { get { throw null; } set { } }
-
-        public virtual byte[] Key { get { throw null; } set { } }
-
-        public virtual int KeySize { get { throw null; } set { } }
-
-        public virtual KeySizes[] LegalBlockSizes { get { throw null; } }
-
-        public virtual KeySizes[] LegalKeySizes { get { throw null; } }
-
-        public virtual CipherMode Mode { get { throw null; } set { } }
-
-        public virtual PaddingMode Padding { get { throw null; } set { } }
-
-        public virtual ICryptoTransform CreateDecryptor() { throw null; }
-
-        public abstract ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
-        public virtual ICryptoTransform CreateEncryptor() { throw null; }
-
-        public abstract ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract void GenerateIV();
-        public abstract void GenerateKey();
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.primitives/4.3.0/system.security.cryptography.primitives.nuspec b/src/referencePackages/src/system.security.cryptography.primitives/4.3.0/system.security.cryptography.primitives.nuspec
deleted file mode 100644
index d98318f0..00000000
--- a/src/referencePackages/src/system.security.cryptography.primitives/4.3.0/system.security.cryptography.primitives.nuspec
+++ /dev/null
@@ -1,45 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Security.Cryptography.Primitives</id>
-    <version>4.3.0</version>
-    <title>System.Security.Cryptography.Primitives</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides common types for the cryptographic libraries.
-
-Commonly Used Types:
-System.Security.Cryptography.ICryptoTransform
-System.Security.Cryptography.AsymmetricAlgorithm
-System.Security.Cryptography.SymmetricAlgorithm
-System.Security.Cryptography.HashAlgorithm
-System.Security.Cryptography.KeyedHashAlgorithm
-System.Security.Cryptography.HMAC
-System.Security.Cryptography.KeySizes
-System.Security.Cryptography.CryptographicException
-System.Security.Cryptography.CipherMode
-System.Security.Cryptography.PaddingMode
-System.Security.Cryptography.CryptoStream
-System.Security.Cryptography.CryptoStreamMode
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Globalization" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Threading" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.protecteddata/4.4.0/System.Security.Cryptography.ProtectedData.4.4.0.csproj b/src/referencePackages/src/system.security.cryptography.protecteddata/4.4.0/System.Security.Cryptography.ProtectedData.4.4.0.csproj
index 1a62f4c4..96382ea9 100644
--- a/src/referencePackages/src/system.security.cryptography.protecteddata/4.4.0/System.Security.Cryptography.ProtectedData.4.4.0.csproj
+++ b/src/referencePackages/src/system.security.cryptography.protecteddata/4.4.0/System.Security.Cryptography.ProtectedData.4.4.0.csproj
@@ -1,7 +1,7 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.3;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Security.Cryptography.ProtectedData</AssemblyName>
   </PropertyGroup>
 
diff --git a/src/referencePackages/src/system.security.cryptography.protecteddata/4.4.0/ref/netstandard1.3/System.Security.Cryptography.ProtectedData.cs b/src/referencePackages/src/system.security.cryptography.protecteddata/4.4.0/ref/netstandard1.3/System.Security.Cryptography.ProtectedData.cs
deleted file mode 100644
index 191fbf9a..00000000
--- a/src/referencePackages/src/system.security.cryptography.protecteddata/4.4.0/ref/netstandard1.3/System.Security.Cryptography.ProtectedData.cs
+++ /dev/null
@@ -1,39 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Cryptography.ProtectedData")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Cryptography.ProtectedData")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Cryptography.ProtectedData")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Security.Cryptography
-{
-    public enum DataProtectionScope
-    {
-        CurrentUser = 0,
-        LocalMachine = 1
-    }
-
-    public static partial class ProtectedData
-    {
-        public static byte[] Protect(byte[] userData, byte[] optionalEntropy, DataProtectionScope scope) { throw null; }
-
-        public static byte[] Unprotect(byte[] encryptedData, byte[] optionalEntropy, DataProtectionScope scope) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.protecteddata/4.4.0/system.security.cryptography.protecteddata.nuspec b/src/referencePackages/src/system.security.cryptography.protecteddata/4.4.0/system.security.cryptography.protecteddata.nuspec
index afabcbcc..bafa2538 100644
--- a/src/referencePackages/src/system.security.cryptography.protecteddata/4.4.0/system.security.cryptography.protecteddata.nuspec
+++ b/src/referencePackages/src/system.security.cryptography.protecteddata/4.4.0/system.security.cryptography.protecteddata.nuspec
@@ -22,9 +22,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
     <serviceable>true</serviceable>
     <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-      </group>
       <group targetFramework=".NETStandard2.0" />
     </dependencies>
   </metadata>
diff --git a/src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/System.Security.Cryptography.X509Certificates.4.3.0.csproj b/src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/System.Security.Cryptography.X509Certificates.4.3.0.csproj
deleted file mode 100644
index 9473c92f..00000000
--- a/src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/System.Security.Cryptography.X509Certificates.4.3.0.csproj
+++ /dev/null
@@ -1,22 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3;netstandard1.4</TargetFrameworks>
-    <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Algorithms" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Encoding" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.4'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Algorithms" Version="4.3.0" />
-    <PackageReference Include="System.Security.Cryptography.Encoding" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/ref/netstandard1.3/System.Security.Cryptography.X509Certificates.cs b/src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/ref/netstandard1.3/System.Security.Cryptography.X509Certificates.cs
deleted file mode 100644
index 457f5bac..00000000
--- a/src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/ref/netstandard1.3/System.Security.Cryptography.X509Certificates.cs
+++ /dev/null
@@ -1,733 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Cryptography.X509Certificates")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Cryptography.X509Certificates")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Cryptography.X509Certificates")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace Microsoft.Win32.SafeHandles
-{
-    public sealed partial class SafeX509ChainHandle : System.Runtime.InteropServices.SafeHandle
-    {
-        internal SafeX509ChainHandle() : base(default, default) { }
-
-        public override bool IsInvalid { get { throw null; } }
-
-        protected override bool ReleaseHandle() { throw null; }
-    }
-}
-
-namespace System.Security.Cryptography.X509Certificates
-{
-    [Flags]
-    public enum OpenFlags
-    {
-        ReadOnly = 0,
-        ReadWrite = 1,
-        MaxAllowed = 2,
-        OpenExistingOnly = 4,
-        IncludeArchived = 8
-    }
-
-    public sealed partial class PublicKey
-    {
-        public PublicKey(Oid oid, AsnEncodedData parameters, AsnEncodedData keyValue) { }
-
-        public AsnEncodedData EncodedKeyValue { get { throw null; } }
-
-        public AsnEncodedData EncodedParameters { get { throw null; } }
-
-        public Oid Oid { get { throw null; } }
-    }
-
-    public static partial class RSACertificateExtensions
-    {
-        public static RSA GetRSAPrivateKey(this X509Certificate2 certificate) { throw null; }
-
-        public static RSA GetRSAPublicKey(this X509Certificate2 certificate) { throw null; }
-    }
-
-    public enum StoreLocation
-    {
-        CurrentUser = 1,
-        LocalMachine = 2
-    }
-
-    public enum StoreName
-    {
-        AddressBook = 1,
-        AuthRoot = 2,
-        CertificateAuthority = 3,
-        Disallowed = 4,
-        My = 5,
-        Root = 6,
-        TrustedPeople = 7,
-        TrustedPublisher = 8
-    }
-
-    public sealed partial class X500DistinguishedName : AsnEncodedData
-    {
-        public X500DistinguishedName(byte[] encodedDistinguishedName) { }
-
-        public X500DistinguishedName(AsnEncodedData encodedDistinguishedName) { }
-
-        public X500DistinguishedName(X500DistinguishedName distinguishedName) { }
-
-        public X500DistinguishedName(string distinguishedName, X500DistinguishedNameFlags flag) { }
-
-        public X500DistinguishedName(string distinguishedName) { }
-
-        public string Name { get { throw null; } }
-
-        public string Decode(X500DistinguishedNameFlags flag) { throw null; }
-
-        public override string Format(bool multiLine) { throw null; }
-    }
-
-    [Flags]
-    public enum X500DistinguishedNameFlags
-    {
-        None = 0,
-        Reversed = 1,
-        UseSemicolons = 16,
-        DoNotUsePlusSign = 32,
-        DoNotUseQuotes = 64,
-        UseCommas = 128,
-        UseNewLines = 256,
-        UseUTF8Encoding = 4096,
-        UseT61Encoding = 8192,
-        ForceUTF8Encoding = 16384
-    }
-
-    public sealed partial class X509BasicConstraintsExtension : X509Extension
-    {
-        public X509BasicConstraintsExtension() { }
-
-        public X509BasicConstraintsExtension(bool certificateAuthority, bool hasPathLengthConstraint, int pathLengthConstraint, bool critical) { }
-
-        public X509BasicConstraintsExtension(AsnEncodedData encodedBasicConstraints, bool critical) { }
-
-        public bool CertificateAuthority { get { throw null; } }
-
-        public bool HasPathLengthConstraint { get { throw null; } }
-
-        public int PathLengthConstraint { get { throw null; } }
-
-        public override void CopyFrom(AsnEncodedData asnEncodedData) { }
-    }
-
-    public partial class X509Certificate : IDisposable
-    {
-        public X509Certificate() { }
-
-        public X509Certificate(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags) { }
-
-        public X509Certificate(byte[] rawData, string password) { }
-
-        public X509Certificate(byte[] data) { }
-
-        public X509Certificate(IntPtr handle) { }
-
-        public X509Certificate(string fileName, string password, X509KeyStorageFlags keyStorageFlags) { }
-
-        public X509Certificate(string fileName, string password) { }
-
-        public X509Certificate(string fileName) { }
-
-        public IntPtr Handle { get { throw null; } }
-
-        public string Issuer { get { throw null; } }
-
-        public string Subject { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public virtual bool Equals(X509Certificate other) { throw null; }
-
-        public virtual byte[] Export(X509ContentType contentType, string password) { throw null; }
-
-        public virtual byte[] Export(X509ContentType contentType) { throw null; }
-
-        public virtual byte[] GetCertHash() { throw null; }
-
-        public virtual string GetFormat() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual string GetKeyAlgorithm() { throw null; }
-
-        public virtual byte[] GetKeyAlgorithmParameters() { throw null; }
-
-        public virtual string GetKeyAlgorithmParametersString() { throw null; }
-
-        public virtual byte[] GetPublicKey() { throw null; }
-
-        public virtual byte[] GetSerialNumber() { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public virtual string ToString(bool fVerbose) { throw null; }
-    }
-
-    public partial class X509Certificate2 : X509Certificate
-    {
-        public X509Certificate2() { }
-
-        public X509Certificate2(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags) { }
-
-        public X509Certificate2(byte[] rawData, string password) { }
-
-        public X509Certificate2(byte[] rawData) { }
-
-        public X509Certificate2(IntPtr handle) { }
-
-        public X509Certificate2(string fileName, string password, X509KeyStorageFlags keyStorageFlags) { }
-
-        public X509Certificate2(string fileName, string password) { }
-
-        public X509Certificate2(string fileName) { }
-
-        public bool Archived { get { throw null; } set { } }
-
-        public X509ExtensionCollection Extensions { get { throw null; } }
-
-        public string FriendlyName { get { throw null; } set { } }
-
-        public bool HasPrivateKey { get { throw null; } }
-
-        public X500DistinguishedName IssuerName { get { throw null; } }
-
-        public DateTime NotAfter { get { throw null; } }
-
-        public DateTime NotBefore { get { throw null; } }
-
-        public PublicKey PublicKey { get { throw null; } }
-
-        public byte[] RawData { get { throw null; } }
-
-        public string SerialNumber { get { throw null; } }
-
-        public Oid SignatureAlgorithm { get { throw null; } }
-
-        public X500DistinguishedName SubjectName { get { throw null; } }
-
-        public string Thumbprint { get { throw null; } }
-
-        public int Version { get { throw null; } }
-
-        public static X509ContentType GetCertContentType(byte[] rawData) { throw null; }
-
-        public static X509ContentType GetCertContentType(string fileName) { throw null; }
-
-        public string GetNameInfo(X509NameType nameType, bool forIssuer) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public override string ToString(bool verbose) { throw null; }
-    }
-
-    public partial class X509Certificate2Collection : X509CertificateCollection
-    {
-        public X509Certificate2Collection() { }
-
-        public X509Certificate2Collection(X509Certificate2 certificate) { }
-
-        public X509Certificate2Collection(X509Certificate2[] certificates) { }
-
-        public X509Certificate2Collection(X509Certificate2Collection certificates) { }
-
-        public new X509Certificate2 this[int index] { get { throw null; } set { } }
-
-        public int Add(X509Certificate2 certificate) { throw null; }
-
-        public void AddRange(X509Certificate2[] certificates) { }
-
-        public void AddRange(X509Certificate2Collection certificates) { }
-
-        public bool Contains(X509Certificate2 certificate) { throw null; }
-
-        public byte[] Export(X509ContentType contentType, string password) { throw null; }
-
-        public byte[] Export(X509ContentType contentType) { throw null; }
-
-        public X509Certificate2Collection Find(X509FindType findType, object findValue, bool validOnly) { throw null; }
-
-        public new X509Certificate2Enumerator GetEnumerator() { throw null; }
-
-        public void Import(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags) { }
-
-        public void Import(byte[] rawData) { }
-
-        public void Import(string fileName, string password, X509KeyStorageFlags keyStorageFlags) { }
-
-        public void Import(string fileName) { }
-
-        public void Insert(int index, X509Certificate2 certificate) { }
-
-        public void Remove(X509Certificate2 certificate) { }
-
-        public void RemoveRange(X509Certificate2[] certificates) { }
-
-        public void RemoveRange(X509Certificate2Collection certificates) { }
-    }
-
-    public sealed partial class X509Certificate2Enumerator : Collections.IEnumerator
-    {
-        internal X509Certificate2Enumerator() { }
-
-        public X509Certificate2 Current { get { throw null; } }
-
-        object Collections.IEnumerator.Current { get { throw null; } }
-
-        public bool MoveNext() { throw null; }
-
-        public void Reset() { }
-
-        bool Collections.IEnumerator.MoveNext() { throw null; }
-
-        void Collections.IEnumerator.Reset() { }
-    }
-
-    public partial class X509CertificateCollection : Collections.ICollection, Collections.IEnumerable, Collections.IList
-    {
-        public X509CertificateCollection() { }
-
-        public X509CertificateCollection(X509Certificate[] value) { }
-
-        public X509CertificateCollection(X509CertificateCollection value) { }
-
-        public int Count { get { throw null; } }
-
-        public X509Certificate this[int index] { get { throw null; } set { } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        bool Collections.IList.IsFixedSize { get { throw null; } }
-
-        bool Collections.IList.IsReadOnly { get { throw null; } }
-
-        object Collections.IList.this[int index] { get { throw null; } set { } }
-
-        public int Add(X509Certificate value) { throw null; }
-
-        public void AddRange(X509Certificate[] value) { }
-
-        public void AddRange(X509CertificateCollection value) { }
-
-        public void Clear() { }
-
-        public bool Contains(X509Certificate value) { throw null; }
-
-        public void CopyTo(X509Certificate[] array, int index) { }
-
-        public X509CertificateEnumerator GetEnumerator() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public int IndexOf(X509Certificate value) { throw null; }
-
-        public void Insert(int index, X509Certificate value) { }
-
-        public void Remove(X509Certificate value) { }
-
-        public void RemoveAt(int index) { }
-
-        void Collections.ICollection.CopyTo(Array array, int index) { }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        int Collections.IList.Add(object value) { throw null; }
-
-        bool Collections.IList.Contains(object value) { throw null; }
-
-        int Collections.IList.IndexOf(object value) { throw null; }
-
-        void Collections.IList.Insert(int index, object value) { }
-
-        void Collections.IList.Remove(object value) { }
-
-        public partial class X509CertificateEnumerator : Collections.IEnumerator
-        {
-            public X509CertificateEnumerator(X509CertificateCollection mappings) { }
-
-            public X509Certificate Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            public void Reset() { }
-
-            bool Collections.IEnumerator.MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-        }
-    }
-
-    public partial class X509Chain : IDisposable
-    {
-        public X509ChainElementCollection ChainElements { get { throw null; } }
-
-        public X509ChainPolicy ChainPolicy { get { throw null; } set { } }
-
-        public X509ChainStatus[] ChainStatus { get { throw null; } }
-
-        public Microsoft.Win32.SafeHandles.SafeX509ChainHandle SafeHandle { get { throw null; } }
-
-        public bool Build(X509Certificate2 certificate) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-    }
-
-    public partial class X509ChainElement
-    {
-        internal X509ChainElement() { }
-
-        public X509Certificate2 Certificate { get { throw null; } }
-
-        public X509ChainStatus[] ChainElementStatus { get { throw null; } }
-
-        public string Information { get { throw null; } }
-    }
-
-    public sealed partial class X509ChainElementCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        internal X509ChainElementCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public X509ChainElement this[int index] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public void CopyTo(X509ChainElement[] array, int index) { }
-
-        public X509ChainElementEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int index) { }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-    }
-
-    public sealed partial class X509ChainElementEnumerator : Collections.IEnumerator
-    {
-        internal X509ChainElementEnumerator() { }
-
-        public X509ChainElement Current { get { throw null; } }
-
-        object Collections.IEnumerator.Current { get { throw null; } }
-
-        public bool MoveNext() { throw null; }
-
-        public void Reset() { }
-    }
-
-    public sealed partial class X509ChainPolicy
-    {
-        public OidCollection ApplicationPolicy { get { throw null; } }
-
-        public OidCollection CertificatePolicy { get { throw null; } }
-
-        public X509Certificate2Collection ExtraStore { get { throw null; } }
-
-        public X509RevocationFlag RevocationFlag { get { throw null; } set { } }
-
-        public X509RevocationMode RevocationMode { get { throw null; } set { } }
-
-        public TimeSpan UrlRetrievalTimeout { get { throw null; } set { } }
-
-        public X509VerificationFlags VerificationFlags { get { throw null; } set { } }
-
-        public DateTime VerificationTime { get { throw null; } set { } }
-
-        public void Reset() { }
-    }
-
-    public partial struct X509ChainStatus
-    {
-        public X509ChainStatusFlags Status { get { throw null; } set { } }
-
-        public string StatusInformation { get { throw null; } set { } }
-    }
-
-    [Flags]
-    public enum X509ChainStatusFlags
-    {
-        NoError = 0,
-        NotTimeValid = 1,
-        NotTimeNested = 2,
-        Revoked = 4,
-        NotSignatureValid = 8,
-        NotValidForUsage = 16,
-        UntrustedRoot = 32,
-        RevocationStatusUnknown = 64,
-        Cyclic = 128,
-        InvalidExtension = 256,
-        InvalidPolicyConstraints = 512,
-        InvalidBasicConstraints = 1024,
-        InvalidNameConstraints = 2048,
-        HasNotSupportedNameConstraint = 4096,
-        HasNotDefinedNameConstraint = 8192,
-        HasNotPermittedNameConstraint = 16384,
-        HasExcludedNameConstraint = 32768,
-        PartialChain = 65536,
-        CtlNotTimeValid = 131072,
-        CtlNotSignatureValid = 262144,
-        CtlNotValidForUsage = 524288,
-        OfflineRevocation = 16777216,
-        NoIssuanceChainPolicy = 33554432
-    }
-
-    public enum X509ContentType
-    {
-        Unknown = 0,
-        Cert = 1,
-        SerializedCert = 2,
-        Pfx = 3,
-        Pkcs12 = 3,
-        SerializedStore = 4,
-        Pkcs7 = 5,
-        Authenticode = 6
-    }
-
-    public sealed partial class X509EnhancedKeyUsageExtension : X509Extension
-    {
-        public X509EnhancedKeyUsageExtension() { }
-
-        public X509EnhancedKeyUsageExtension(AsnEncodedData encodedEnhancedKeyUsages, bool critical) { }
-
-        public X509EnhancedKeyUsageExtension(OidCollection enhancedKeyUsages, bool critical) { }
-
-        public OidCollection EnhancedKeyUsages { get { throw null; } }
-
-        public override void CopyFrom(AsnEncodedData asnEncodedData) { }
-    }
-
-    public partial class X509Extension : AsnEncodedData
-    {
-        protected X509Extension() { }
-
-        public X509Extension(AsnEncodedData encodedExtension, bool critical) { }
-
-        public X509Extension(Oid oid, byte[] rawData, bool critical) { }
-
-        public X509Extension(string oid, byte[] rawData, bool critical) { }
-
-        public bool Critical { get { throw null; } set { } }
-
-        public override void CopyFrom(AsnEncodedData asnEncodedData) { }
-    }
-
-    public sealed partial class X509ExtensionCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        public int Count { get { throw null; } }
-
-        public X509Extension this[int index] { get { throw null; } }
-
-        public X509Extension this[string oid] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public int Add(X509Extension extension) { throw null; }
-
-        public void CopyTo(X509Extension[] array, int index) { }
-
-        public X509ExtensionEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int index) { }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-    }
-
-    public sealed partial class X509ExtensionEnumerator : Collections.IEnumerator
-    {
-        internal X509ExtensionEnumerator() { }
-
-        public X509Extension Current { get { throw null; } }
-
-        object Collections.IEnumerator.Current { get { throw null; } }
-
-        public bool MoveNext() { throw null; }
-
-        public void Reset() { }
-    }
-
-    public enum X509FindType
-    {
-        FindByThumbprint = 0,
-        FindBySubjectName = 1,
-        FindBySubjectDistinguishedName = 2,
-        FindByIssuerName = 3,
-        FindByIssuerDistinguishedName = 4,
-        FindBySerialNumber = 5,
-        FindByTimeValid = 6,
-        FindByTimeNotYetValid = 7,
-        FindByTimeExpired = 8,
-        FindByTemplateName = 9,
-        FindByApplicationPolicy = 10,
-        FindByCertificatePolicy = 11,
-        FindByExtension = 12,
-        FindByKeyUsage = 13,
-        FindBySubjectKeyIdentifier = 14
-    }
-
-    [Flags]
-    public enum X509KeyStorageFlags
-    {
-        DefaultKeySet = 0,
-        UserKeySet = 1,
-        MachineKeySet = 2,
-        Exportable = 4,
-        UserProtected = 8,
-        PersistKeySet = 16
-    }
-
-    public sealed partial class X509KeyUsageExtension : X509Extension
-    {
-        public X509KeyUsageExtension() { }
-
-        public X509KeyUsageExtension(AsnEncodedData encodedKeyUsage, bool critical) { }
-
-        public X509KeyUsageExtension(X509KeyUsageFlags keyUsages, bool critical) { }
-
-        public X509KeyUsageFlags KeyUsages { get { throw null; } }
-
-        public override void CopyFrom(AsnEncodedData asnEncodedData) { }
-    }
-
-    [Flags]
-    public enum X509KeyUsageFlags
-    {
-        None = 0,
-        EncipherOnly = 1,
-        CrlSign = 2,
-        KeyCertSign = 4,
-        KeyAgreement = 8,
-        DataEncipherment = 16,
-        KeyEncipherment = 32,
-        NonRepudiation = 64,
-        DigitalSignature = 128,
-        DecipherOnly = 32768
-    }
-
-    public enum X509NameType
-    {
-        SimpleName = 0,
-        EmailName = 1,
-        UpnName = 2,
-        DnsName = 3,
-        DnsFromAlternativeName = 4,
-        UrlName = 5
-    }
-
-    public enum X509RevocationFlag
-    {
-        EndCertificateOnly = 0,
-        EntireChain = 1,
-        ExcludeRoot = 2
-    }
-
-    public enum X509RevocationMode
-    {
-        NoCheck = 0,
-        Online = 1,
-        Offline = 2
-    }
-
-    public sealed partial class X509Store : IDisposable
-    {
-        public X509Store() { }
-
-        public X509Store(StoreName storeName, StoreLocation storeLocation) { }
-
-        public X509Store(string storeName, StoreLocation storeLocation) { }
-
-        public X509Certificate2Collection Certificates { get { throw null; } }
-
-        public StoreLocation Location { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public void Add(X509Certificate2 certificate) { }
-
-        public void Dispose() { }
-
-        public void Open(OpenFlags flags) { }
-
-        public void Remove(X509Certificate2 certificate) { }
-    }
-
-    public sealed partial class X509SubjectKeyIdentifierExtension : X509Extension
-    {
-        public X509SubjectKeyIdentifierExtension() { }
-
-        public X509SubjectKeyIdentifierExtension(byte[] subjectKeyIdentifier, bool critical) { }
-
-        public X509SubjectKeyIdentifierExtension(AsnEncodedData encodedSubjectKeyIdentifier, bool critical) { }
-
-        public X509SubjectKeyIdentifierExtension(PublicKey key, bool critical) { }
-
-        public X509SubjectKeyIdentifierExtension(PublicKey key, X509SubjectKeyIdentifierHashAlgorithm algorithm, bool critical) { }
-
-        public X509SubjectKeyIdentifierExtension(string subjectKeyIdentifier, bool critical) { }
-
-        public string SubjectKeyIdentifier { get { throw null; } }
-
-        public override void CopyFrom(AsnEncodedData asnEncodedData) { }
-    }
-
-    public enum X509SubjectKeyIdentifierHashAlgorithm
-    {
-        Sha1 = 0,
-        ShortSha1 = 1,
-        CapiSha1 = 2
-    }
-
-    [Flags]
-    public enum X509VerificationFlags
-    {
-        NoFlag = 0,
-        IgnoreNotTimeValid = 1,
-        IgnoreCtlNotTimeValid = 2,
-        IgnoreNotTimeNested = 4,
-        IgnoreInvalidBasicConstraints = 8,
-        AllowUnknownCertificateAuthority = 16,
-        IgnoreWrongUsage = 32,
-        IgnoreInvalidName = 64,
-        IgnoreInvalidPolicy = 128,
-        IgnoreEndRevocationUnknown = 256,
-        IgnoreCtlSignerRevocationUnknown = 512,
-        IgnoreCertificateAuthorityRevocationUnknown = 1024,
-        IgnoreRootRevocationUnknown = 2048,
-        AllFlags = 4095
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/ref/netstandard1.4/System.Security.Cryptography.X509Certificates.cs b/src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/ref/netstandard1.4/System.Security.Cryptography.X509Certificates.cs
deleted file mode 100644
index 1b879d2f..00000000
--- a/src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/ref/netstandard1.4/System.Security.Cryptography.X509Certificates.cs
+++ /dev/null
@@ -1,743 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Cryptography.X509Certificates")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Cryptography.X509Certificates")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Cryptography.X509Certificates")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace Microsoft.Win32.SafeHandles
-{
-    public sealed partial class SafeX509ChainHandle : System.Runtime.InteropServices.SafeHandle
-    {
-        internal SafeX509ChainHandle() : base(default, default) { }
-
-        public override bool IsInvalid { get { throw null; } }
-
-        protected override bool ReleaseHandle() { throw null; }
-    }
-}
-
-namespace System.Security.Cryptography.X509Certificates
-{
-    public static partial class ECDsaCertificateExtensions
-    {
-        public static ECDsa GetECDsaPrivateKey(this X509Certificate2 certificate) { throw null; }
-
-        public static ECDsa GetECDsaPublicKey(this X509Certificate2 certificate) { throw null; }
-    }
-
-    [Flags]
-    public enum OpenFlags
-    {
-        ReadOnly = 0,
-        ReadWrite = 1,
-        MaxAllowed = 2,
-        OpenExistingOnly = 4,
-        IncludeArchived = 8
-    }
-
-    public sealed partial class PublicKey
-    {
-        public PublicKey(Oid oid, AsnEncodedData parameters, AsnEncodedData keyValue) { }
-
-        public AsnEncodedData EncodedKeyValue { get { throw null; } }
-
-        public AsnEncodedData EncodedParameters { get { throw null; } }
-
-        public Oid Oid { get { throw null; } }
-    }
-
-    public static partial class RSACertificateExtensions
-    {
-        public static RSA GetRSAPrivateKey(this X509Certificate2 certificate) { throw null; }
-
-        public static RSA GetRSAPublicKey(this X509Certificate2 certificate) { throw null; }
-    }
-
-    public enum StoreLocation
-    {
-        CurrentUser = 1,
-        LocalMachine = 2
-    }
-
-    public enum StoreName
-    {
-        AddressBook = 1,
-        AuthRoot = 2,
-        CertificateAuthority = 3,
-        Disallowed = 4,
-        My = 5,
-        Root = 6,
-        TrustedPeople = 7,
-        TrustedPublisher = 8
-    }
-
-    public sealed partial class X500DistinguishedName : AsnEncodedData
-    {
-        public X500DistinguishedName(byte[] encodedDistinguishedName) { }
-
-        public X500DistinguishedName(AsnEncodedData encodedDistinguishedName) { }
-
-        public X500DistinguishedName(X500DistinguishedName distinguishedName) { }
-
-        public X500DistinguishedName(string distinguishedName, X500DistinguishedNameFlags flag) { }
-
-        public X500DistinguishedName(string distinguishedName) { }
-
-        public string Name { get { throw null; } }
-
-        public string Decode(X500DistinguishedNameFlags flag) { throw null; }
-
-        public override string Format(bool multiLine) { throw null; }
-    }
-
-    [Flags]
-    public enum X500DistinguishedNameFlags
-    {
-        None = 0,
-        Reversed = 1,
-        UseSemicolons = 16,
-        DoNotUsePlusSign = 32,
-        DoNotUseQuotes = 64,
-        UseCommas = 128,
-        UseNewLines = 256,
-        UseUTF8Encoding = 4096,
-        UseT61Encoding = 8192,
-        ForceUTF8Encoding = 16384
-    }
-
-    public sealed partial class X509BasicConstraintsExtension : X509Extension
-    {
-        public X509BasicConstraintsExtension() { }
-
-        public X509BasicConstraintsExtension(bool certificateAuthority, bool hasPathLengthConstraint, int pathLengthConstraint, bool critical) { }
-
-        public X509BasicConstraintsExtension(AsnEncodedData encodedBasicConstraints, bool critical) { }
-
-        public bool CertificateAuthority { get { throw null; } }
-
-        public bool HasPathLengthConstraint { get { throw null; } }
-
-        public int PathLengthConstraint { get { throw null; } }
-
-        public override void CopyFrom(AsnEncodedData asnEncodedData) { }
-    }
-
-    public partial class X509Certificate : IDisposable
-    {
-        public X509Certificate() { }
-
-        public X509Certificate(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags) { }
-
-        public X509Certificate(byte[] rawData, string password) { }
-
-        public X509Certificate(byte[] data) { }
-
-        public X509Certificate(IntPtr handle) { }
-
-        public X509Certificate(string fileName, string password, X509KeyStorageFlags keyStorageFlags) { }
-
-        public X509Certificate(string fileName, string password) { }
-
-        public X509Certificate(string fileName) { }
-
-        public IntPtr Handle { get { throw null; } }
-
-        public string Issuer { get { throw null; } }
-
-        public string Subject { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public virtual bool Equals(X509Certificate other) { throw null; }
-
-        public virtual byte[] Export(X509ContentType contentType, string password) { throw null; }
-
-        public virtual byte[] Export(X509ContentType contentType) { throw null; }
-
-        public virtual byte[] GetCertHash() { throw null; }
-
-        public virtual string GetFormat() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public virtual string GetKeyAlgorithm() { throw null; }
-
-        public virtual byte[] GetKeyAlgorithmParameters() { throw null; }
-
-        public virtual string GetKeyAlgorithmParametersString() { throw null; }
-
-        public virtual byte[] GetPublicKey() { throw null; }
-
-        public virtual byte[] GetSerialNumber() { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public virtual string ToString(bool fVerbose) { throw null; }
-    }
-
-    public partial class X509Certificate2 : X509Certificate
-    {
-        public X509Certificate2() { }
-
-        public X509Certificate2(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags) { }
-
-        public X509Certificate2(byte[] rawData, string password) { }
-
-        public X509Certificate2(byte[] rawData) { }
-
-        public X509Certificate2(IntPtr handle) { }
-
-        public X509Certificate2(string fileName, string password, X509KeyStorageFlags keyStorageFlags) { }
-
-        public X509Certificate2(string fileName, string password) { }
-
-        public X509Certificate2(string fileName) { }
-
-        public bool Archived { get { throw null; } set { } }
-
-        public X509ExtensionCollection Extensions { get { throw null; } }
-
-        public string FriendlyName { get { throw null; } set { } }
-
-        public bool HasPrivateKey { get { throw null; } }
-
-        public X500DistinguishedName IssuerName { get { throw null; } }
-
-        public DateTime NotAfter { get { throw null; } }
-
-        public DateTime NotBefore { get { throw null; } }
-
-        public PublicKey PublicKey { get { throw null; } }
-
-        public byte[] RawData { get { throw null; } }
-
-        public string SerialNumber { get { throw null; } }
-
-        public Oid SignatureAlgorithm { get { throw null; } }
-
-        public X500DistinguishedName SubjectName { get { throw null; } }
-
-        public string Thumbprint { get { throw null; } }
-
-        public int Version { get { throw null; } }
-
-        public static X509ContentType GetCertContentType(byte[] rawData) { throw null; }
-
-        public static X509ContentType GetCertContentType(string fileName) { throw null; }
-
-        public string GetNameInfo(X509NameType nameType, bool forIssuer) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public override string ToString(bool verbose) { throw null; }
-    }
-
-    public partial class X509Certificate2Collection : X509CertificateCollection
-    {
-        public X509Certificate2Collection() { }
-
-        public X509Certificate2Collection(X509Certificate2 certificate) { }
-
-        public X509Certificate2Collection(X509Certificate2[] certificates) { }
-
-        public X509Certificate2Collection(X509Certificate2Collection certificates) { }
-
-        public new X509Certificate2 this[int index] { get { throw null; } set { } }
-
-        public int Add(X509Certificate2 certificate) { throw null; }
-
-        public void AddRange(X509Certificate2[] certificates) { }
-
-        public void AddRange(X509Certificate2Collection certificates) { }
-
-        public bool Contains(X509Certificate2 certificate) { throw null; }
-
-        public byte[] Export(X509ContentType contentType, string password) { throw null; }
-
-        public byte[] Export(X509ContentType contentType) { throw null; }
-
-        public X509Certificate2Collection Find(X509FindType findType, object findValue, bool validOnly) { throw null; }
-
-        public new X509Certificate2Enumerator GetEnumerator() { throw null; }
-
-        public void Import(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags) { }
-
-        public void Import(byte[] rawData) { }
-
-        public void Import(string fileName, string password, X509KeyStorageFlags keyStorageFlags) { }
-
-        public void Import(string fileName) { }
-
-        public void Insert(int index, X509Certificate2 certificate) { }
-
-        public void Remove(X509Certificate2 certificate) { }
-
-        public void RemoveRange(X509Certificate2[] certificates) { }
-
-        public void RemoveRange(X509Certificate2Collection certificates) { }
-    }
-
-    public sealed partial class X509Certificate2Enumerator : Collections.IEnumerator
-    {
-        internal X509Certificate2Enumerator() { }
-
-        public X509Certificate2 Current { get { throw null; } }
-
-        object Collections.IEnumerator.Current { get { throw null; } }
-
-        public bool MoveNext() { throw null; }
-
-        public void Reset() { }
-
-        bool Collections.IEnumerator.MoveNext() { throw null; }
-
-        void Collections.IEnumerator.Reset() { }
-    }
-
-    public partial class X509CertificateCollection : Collections.ICollection, Collections.IEnumerable, Collections.IList
-    {
-        public X509CertificateCollection() { }
-
-        public X509CertificateCollection(X509Certificate[] value) { }
-
-        public X509CertificateCollection(X509CertificateCollection value) { }
-
-        public int Count { get { throw null; } }
-
-        public X509Certificate this[int index] { get { throw null; } set { } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        bool Collections.IList.IsFixedSize { get { throw null; } }
-
-        bool Collections.IList.IsReadOnly { get { throw null; } }
-
-        object Collections.IList.this[int index] { get { throw null; } set { } }
-
-        public int Add(X509Certificate value) { throw null; }
-
-        public void AddRange(X509Certificate[] value) { }
-
-        public void AddRange(X509CertificateCollection value) { }
-
-        public void Clear() { }
-
-        public bool Contains(X509Certificate value) { throw null; }
-
-        public void CopyTo(X509Certificate[] array, int index) { }
-
-        public X509CertificateEnumerator GetEnumerator() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public int IndexOf(X509Certificate value) { throw null; }
-
-        public void Insert(int index, X509Certificate value) { }
-
-        public void Remove(X509Certificate value) { }
-
-        public void RemoveAt(int index) { }
-
-        void Collections.ICollection.CopyTo(Array array, int index) { }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        int Collections.IList.Add(object value) { throw null; }
-
-        bool Collections.IList.Contains(object value) { throw null; }
-
-        int Collections.IList.IndexOf(object value) { throw null; }
-
-        void Collections.IList.Insert(int index, object value) { }
-
-        void Collections.IList.Remove(object value) { }
-
-        public partial class X509CertificateEnumerator : Collections.IEnumerator
-        {
-            public X509CertificateEnumerator(X509CertificateCollection mappings) { }
-
-            public X509Certificate Current { get { throw null; } }
-
-            object Collections.IEnumerator.Current { get { throw null; } }
-
-            public bool MoveNext() { throw null; }
-
-            public void Reset() { }
-
-            bool Collections.IEnumerator.MoveNext() { throw null; }
-
-            void Collections.IEnumerator.Reset() { }
-        }
-    }
-
-    public partial class X509Chain : IDisposable
-    {
-        public X509ChainElementCollection ChainElements { get { throw null; } }
-
-        public X509ChainPolicy ChainPolicy { get { throw null; } set { } }
-
-        public X509ChainStatus[] ChainStatus { get { throw null; } }
-
-        public Microsoft.Win32.SafeHandles.SafeX509ChainHandle SafeHandle { get { throw null; } }
-
-        public bool Build(X509Certificate2 certificate) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-    }
-
-    public partial class X509ChainElement
-    {
-        internal X509ChainElement() { }
-
-        public X509Certificate2 Certificate { get { throw null; } }
-
-        public X509ChainStatus[] ChainElementStatus { get { throw null; } }
-
-        public string Information { get { throw null; } }
-    }
-
-    public sealed partial class X509ChainElementCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        internal X509ChainElementCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public X509ChainElement this[int index] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public void CopyTo(X509ChainElement[] array, int index) { }
-
-        public X509ChainElementEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int index) { }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-    }
-
-    public sealed partial class X509ChainElementEnumerator : Collections.IEnumerator
-    {
-        internal X509ChainElementEnumerator() { }
-
-        public X509ChainElement Current { get { throw null; } }
-
-        object Collections.IEnumerator.Current { get { throw null; } }
-
-        public bool MoveNext() { throw null; }
-
-        public void Reset() { }
-    }
-
-    public sealed partial class X509ChainPolicy
-    {
-        public OidCollection ApplicationPolicy { get { throw null; } }
-
-        public OidCollection CertificatePolicy { get { throw null; } }
-
-        public X509Certificate2Collection ExtraStore { get { throw null; } }
-
-        public X509RevocationFlag RevocationFlag { get { throw null; } set { } }
-
-        public X509RevocationMode RevocationMode { get { throw null; } set { } }
-
-        public TimeSpan UrlRetrievalTimeout { get { throw null; } set { } }
-
-        public X509VerificationFlags VerificationFlags { get { throw null; } set { } }
-
-        public DateTime VerificationTime { get { throw null; } set { } }
-
-        public void Reset() { }
-    }
-
-    public partial struct X509ChainStatus
-    {
-        public X509ChainStatusFlags Status { get { throw null; } set { } }
-
-        public string StatusInformation { get { throw null; } set { } }
-    }
-
-    [Flags]
-    public enum X509ChainStatusFlags
-    {
-        NoError = 0,
-        NotTimeValid = 1,
-        NotTimeNested = 2,
-        Revoked = 4,
-        NotSignatureValid = 8,
-        NotValidForUsage = 16,
-        UntrustedRoot = 32,
-        RevocationStatusUnknown = 64,
-        Cyclic = 128,
-        InvalidExtension = 256,
-        InvalidPolicyConstraints = 512,
-        InvalidBasicConstraints = 1024,
-        InvalidNameConstraints = 2048,
-        HasNotSupportedNameConstraint = 4096,
-        HasNotDefinedNameConstraint = 8192,
-        HasNotPermittedNameConstraint = 16384,
-        HasExcludedNameConstraint = 32768,
-        PartialChain = 65536,
-        CtlNotTimeValid = 131072,
-        CtlNotSignatureValid = 262144,
-        CtlNotValidForUsage = 524288,
-        HasWeakSignature = 1048576,
-        OfflineRevocation = 16777216,
-        NoIssuanceChainPolicy = 33554432,
-        ExplicitDistrust = 67108864,
-        HasNotSupportedCriticalExtension = 134217728
-    }
-
-    public enum X509ContentType
-    {
-        Unknown = 0,
-        Cert = 1,
-        SerializedCert = 2,
-        Pfx = 3,
-        Pkcs12 = 3,
-        SerializedStore = 4,
-        Pkcs7 = 5,
-        Authenticode = 6
-    }
-
-    public sealed partial class X509EnhancedKeyUsageExtension : X509Extension
-    {
-        public X509EnhancedKeyUsageExtension() { }
-
-        public X509EnhancedKeyUsageExtension(AsnEncodedData encodedEnhancedKeyUsages, bool critical) { }
-
-        public X509EnhancedKeyUsageExtension(OidCollection enhancedKeyUsages, bool critical) { }
-
-        public OidCollection EnhancedKeyUsages { get { throw null; } }
-
-        public override void CopyFrom(AsnEncodedData asnEncodedData) { }
-    }
-
-    public partial class X509Extension : AsnEncodedData
-    {
-        protected X509Extension() { }
-
-        public X509Extension(AsnEncodedData encodedExtension, bool critical) { }
-
-        public X509Extension(Oid oid, byte[] rawData, bool critical) { }
-
-        public X509Extension(string oid, byte[] rawData, bool critical) { }
-
-        public bool Critical { get { throw null; } set { } }
-
-        public override void CopyFrom(AsnEncodedData asnEncodedData) { }
-    }
-
-    public sealed partial class X509ExtensionCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        public int Count { get { throw null; } }
-
-        public X509Extension this[int index] { get { throw null; } }
-
-        public X509Extension this[string oid] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public int Add(X509Extension extension) { throw null; }
-
-        public void CopyTo(X509Extension[] array, int index) { }
-
-        public X509ExtensionEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int index) { }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-    }
-
-    public sealed partial class X509ExtensionEnumerator : Collections.IEnumerator
-    {
-        internal X509ExtensionEnumerator() { }
-
-        public X509Extension Current { get { throw null; } }
-
-        object Collections.IEnumerator.Current { get { throw null; } }
-
-        public bool MoveNext() { throw null; }
-
-        public void Reset() { }
-    }
-
-    public enum X509FindType
-    {
-        FindByThumbprint = 0,
-        FindBySubjectName = 1,
-        FindBySubjectDistinguishedName = 2,
-        FindByIssuerName = 3,
-        FindByIssuerDistinguishedName = 4,
-        FindBySerialNumber = 5,
-        FindByTimeValid = 6,
-        FindByTimeNotYetValid = 7,
-        FindByTimeExpired = 8,
-        FindByTemplateName = 9,
-        FindByApplicationPolicy = 10,
-        FindByCertificatePolicy = 11,
-        FindByExtension = 12,
-        FindByKeyUsage = 13,
-        FindBySubjectKeyIdentifier = 14
-    }
-
-    [Flags]
-    public enum X509KeyStorageFlags
-    {
-        DefaultKeySet = 0,
-        UserKeySet = 1,
-        MachineKeySet = 2,
-        Exportable = 4,
-        UserProtected = 8,
-        PersistKeySet = 16
-    }
-
-    public sealed partial class X509KeyUsageExtension : X509Extension
-    {
-        public X509KeyUsageExtension() { }
-
-        public X509KeyUsageExtension(AsnEncodedData encodedKeyUsage, bool critical) { }
-
-        public X509KeyUsageExtension(X509KeyUsageFlags keyUsages, bool critical) { }
-
-        public X509KeyUsageFlags KeyUsages { get { throw null; } }
-
-        public override void CopyFrom(AsnEncodedData asnEncodedData) { }
-    }
-
-    [Flags]
-    public enum X509KeyUsageFlags
-    {
-        None = 0,
-        EncipherOnly = 1,
-        CrlSign = 2,
-        KeyCertSign = 4,
-        KeyAgreement = 8,
-        DataEncipherment = 16,
-        KeyEncipherment = 32,
-        NonRepudiation = 64,
-        DigitalSignature = 128,
-        DecipherOnly = 32768
-    }
-
-    public enum X509NameType
-    {
-        SimpleName = 0,
-        EmailName = 1,
-        UpnName = 2,
-        DnsName = 3,
-        DnsFromAlternativeName = 4,
-        UrlName = 5
-    }
-
-    public enum X509RevocationFlag
-    {
-        EndCertificateOnly = 0,
-        EntireChain = 1,
-        ExcludeRoot = 2
-    }
-
-    public enum X509RevocationMode
-    {
-        NoCheck = 0,
-        Online = 1,
-        Offline = 2
-    }
-
-    public sealed partial class X509Store : IDisposable
-    {
-        public X509Store() { }
-
-        public X509Store(StoreName storeName, StoreLocation storeLocation) { }
-
-        public X509Store(string storeName, StoreLocation storeLocation) { }
-
-        public X509Certificate2Collection Certificates { get { throw null; } }
-
-        public StoreLocation Location { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public void Add(X509Certificate2 certificate) { }
-
-        public void Dispose() { }
-
-        public void Open(OpenFlags flags) { }
-
-        public void Remove(X509Certificate2 certificate) { }
-    }
-
-    public sealed partial class X509SubjectKeyIdentifierExtension : X509Extension
-    {
-        public X509SubjectKeyIdentifierExtension() { }
-
-        public X509SubjectKeyIdentifierExtension(byte[] subjectKeyIdentifier, bool critical) { }
-
-        public X509SubjectKeyIdentifierExtension(AsnEncodedData encodedSubjectKeyIdentifier, bool critical) { }
-
-        public X509SubjectKeyIdentifierExtension(PublicKey key, bool critical) { }
-
-        public X509SubjectKeyIdentifierExtension(PublicKey key, X509SubjectKeyIdentifierHashAlgorithm algorithm, bool critical) { }
-
-        public X509SubjectKeyIdentifierExtension(string subjectKeyIdentifier, bool critical) { }
-
-        public string SubjectKeyIdentifier { get { throw null; } }
-
-        public override void CopyFrom(AsnEncodedData asnEncodedData) { }
-    }
-
-    public enum X509SubjectKeyIdentifierHashAlgorithm
-    {
-        Sha1 = 0,
-        ShortSha1 = 1,
-        CapiSha1 = 2
-    }
-
-    [Flags]
-    public enum X509VerificationFlags
-    {
-        NoFlag = 0,
-        IgnoreNotTimeValid = 1,
-        IgnoreCtlNotTimeValid = 2,
-        IgnoreNotTimeNested = 4,
-        IgnoreInvalidBasicConstraints = 8,
-        AllowUnknownCertificateAuthority = 16,
-        IgnoreWrongUsage = 32,
-        IgnoreInvalidName = 64,
-        IgnoreInvalidPolicy = 128,
-        IgnoreEndRevocationUnknown = 256,
-        IgnoreCtlSignerRevocationUnknown = 512,
-        IgnoreCertificateAuthorityRevocationUnknown = 1024,
-        IgnoreRootRevocationUnknown = 2048,
-        AllFlags = 4095
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/system.security.cryptography.x509certificates.nuspec b/src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/system.security.cryptography.x509certificates.nuspec
deleted file mode 100644
index 0346195e..00000000
--- a/src/referencePackages/src/system.security.cryptography.x509certificates/4.3.0/system.security.cryptography.x509certificates.nuspec
+++ /dev/null
@@ -1,70 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Security.Cryptography.X509Certificates</id>
-    <version>4.3.0</version>
-    <title>System.Security.Cryptography.X509Certificates</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides types for reading, exporting and verifying Authenticode X.509 v3 certificates. These certificates are signed with a private key that uniquely and positively identifies the holder of the certificate.
-
-Commonly Used Types:
-System.Security.Cryptography.X509Certificates.X509Certificate2
-System.Security.Cryptography.X509Certificates.X509Certificate
-System.Security.Cryptography.X509Certificates.X509ContentType
-System.Security.Cryptography.X509Certificates.StoreLocation
-System.Security.Cryptography.X509Certificates.StoreName
-System.Security.Cryptography.X509Certificates.X509FindType
-System.Security.Cryptography.X509Certificates.X509ChainStatus
-System.Security.Cryptography.X509Certificates.X509Certificate2Collection
-System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension
-System.Security.Cryptography.X509Certificates.X509Chain
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" />
-        <dependency id="System.Security.Cryptography.Algorithms" version="4.3.0" />
-        <dependency id="System.Security.Cryptography.Encoding" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.4">
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" />
-        <dependency id="System.Security.Cryptography.Algorithms" version="4.3.0" />
-        <dependency id="System.Security.Cryptography.Encoding" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.6">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Globalization" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Globalization.Calendars" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO.FileSystem" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO.FileSystem.Primitives" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.Numerics" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.Algorithms" version="4.3.0" />
-        <dependency id="System.Security.Cryptography.Cng" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.Csp" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.Encoding" version="4.3.0" />
-        <dependency id="System.Security.Cryptography.OpenSsl" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Cryptography.Primitives" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Text.Encoding" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Threading" version="4.3.0" exclude="Compile" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.principal.windows/5.0.0/System.Security.Principal.Windows.5.0.0.csproj b/src/referencePackages/src/system.security.principal.windows/5.0.0/System.Security.Principal.Windows.5.0.0.csproj
index ae6fa635..d20ac41e 100644
--- a/src/referencePackages/src/system.security.principal.windows/5.0.0/System.Security.Principal.Windows.5.0.0.csproj
+++ b/src/referencePackages/src/system.security.principal.windows/5.0.0/System.Security.Principal.Windows.5.0.0.csproj
@@ -1,24 +1,8 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netcoreapp3.0;netstandard1.3;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netcoreapp3.0;netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Security.Principal.Windows</AssemblyName>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.Win32.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Handles" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
-    <PackageReference Include="System.Security.Claims" Version="4.3.0" />
-    <PackageReference Include="System.Security.Principal" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-    <PackageReference Include="System.Threading" Version="4.3.0" />
-  </ItemGroup>
-
 </Project>
diff --git a/src/referencePackages/src/system.security.principal.windows/5.0.0/ref/netstandard1.3/System.Security.Principal.Windows.cs b/src/referencePackages/src/system.security.principal.windows/5.0.0/ref/netstandard1.3/System.Security.Principal.Windows.cs
deleted file mode 100644
index 9b81189a..00000000
--- a/src/referencePackages/src/system.security.principal.windows/5.0.0/ref/netstandard1.3/System.Security.Principal.Windows.cs
+++ /dev/null
@@ -1,331 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Principal.Windows")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Principal.Windows")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Principal.Windows")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace Microsoft.Win32.SafeHandles
-{
-    public sealed partial class SafeAccessTokenHandle : System.Runtime.InteropServices.SafeHandle
-    {
-        public SafeAccessTokenHandle(System.IntPtr handle) : base(default, default) { }
-
-        public static SafeAccessTokenHandle InvalidHandle { get { throw null; } }
-
-        public override bool IsInvalid { get { throw null; } }
-
-        protected override bool ReleaseHandle() { throw null; }
-    }
-}
-
-namespace System.Security.Principal
-{
-    public sealed partial class IdentityNotMappedException : Exception
-    {
-        public IdentityNotMappedException() { }
-
-        public IdentityNotMappedException(string message, Exception inner) { }
-
-        public IdentityNotMappedException(string message) { }
-
-        public IdentityReferenceCollection UnmappedIdentities { get { throw null; } }
-    }
-
-    public abstract partial class IdentityReference
-    {
-        internal IdentityReference() { }
-
-        public abstract string Value { get; }
-
-        public abstract override bool Equals(object o);
-        public abstract override int GetHashCode();
-        public abstract bool IsValidTargetType(Type targetType);
-        public static bool operator ==(IdentityReference left, IdentityReference right) { throw null; }
-
-        public static bool operator !=(IdentityReference left, IdentityReference right) { throw null; }
-
-        public abstract override string ToString();
-        public abstract IdentityReference Translate(Type targetType);
-    }
-
-    public partial class IdentityReferenceCollection : Collections.Generic.ICollection<IdentityReference>, Collections.Generic.IEnumerable<IdentityReference>, Collections.IEnumerable
-    {
-        public IdentityReferenceCollection() { }
-
-        public IdentityReferenceCollection(int capacity) { }
-
-        public int Count { get { throw null; } }
-
-        public IdentityReference this[int index] { get { throw null; } set { } }
-
-        bool Collections.Generic.ICollection<IdentityReference>.IsReadOnly { get { throw null; } }
-
-        public void Add(IdentityReference identity) { }
-
-        public void Clear() { }
-
-        public bool Contains(IdentityReference identity) { throw null; }
-
-        public void CopyTo(IdentityReference[] array, int offset) { }
-
-        public Collections.Generic.IEnumerator<IdentityReference> GetEnumerator() { throw null; }
-
-        public bool Remove(IdentityReference identity) { throw null; }
-
-        Collections.IEnumerator Collections.IEnumerable.GetEnumerator() { throw null; }
-
-        public IdentityReferenceCollection Translate(Type targetType, bool forceSuccess) { throw null; }
-
-        public IdentityReferenceCollection Translate(Type targetType) { throw null; }
-    }
-
-    public sealed partial class NTAccount : IdentityReference
-    {
-        public NTAccount(string domainName, string accountName) { }
-
-        public NTAccount(string name) { }
-
-        public override string Value { get { throw null; } }
-
-        public override bool Equals(object o) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override bool IsValidTargetType(Type targetType) { throw null; }
-
-        public static bool operator ==(NTAccount left, NTAccount right) { throw null; }
-
-        public static bool operator !=(NTAccount left, NTAccount right) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public override IdentityReference Translate(Type targetType) { throw null; }
-    }
-
-    public sealed partial class SecurityIdentifier : IdentityReference, IComparable<SecurityIdentifier>
-    {
-        public static readonly int MaxBinaryLength;
-        public static readonly int MinBinaryLength;
-        public SecurityIdentifier(byte[] binaryForm, int offset) { }
-
-        public SecurityIdentifier(IntPtr binaryForm) { }
-
-        public SecurityIdentifier(WellKnownSidType sidType, SecurityIdentifier domainSid) { }
-
-        public SecurityIdentifier(string sddlForm) { }
-
-        public SecurityIdentifier AccountDomainSid { get { throw null; } }
-
-        public int BinaryLength { get { throw null; } }
-
-        public override string Value { get { throw null; } }
-
-        public int CompareTo(SecurityIdentifier sid) { throw null; }
-
-        public override bool Equals(object o) { throw null; }
-
-        public bool Equals(SecurityIdentifier sid) { throw null; }
-
-        public void GetBinaryForm(byte[] binaryForm, int offset) { }
-
-        public override int GetHashCode() { throw null; }
-
-        public bool IsAccountSid() { throw null; }
-
-        public bool IsEqualDomainSid(SecurityIdentifier sid) { throw null; }
-
-        public override bool IsValidTargetType(Type targetType) { throw null; }
-
-        public bool IsWellKnown(WellKnownSidType type) { throw null; }
-
-        public static bool operator ==(SecurityIdentifier left, SecurityIdentifier right) { throw null; }
-
-        public static bool operator !=(SecurityIdentifier left, SecurityIdentifier right) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public override IdentityReference Translate(Type targetType) { throw null; }
-    }
-
-    [Flags]
-    public enum TokenAccessLevels
-    {
-        AssignPrimary = 1,
-        Duplicate = 2,
-        Impersonate = 4,
-        Query = 8,
-        QuerySource = 16,
-        AdjustPrivileges = 32,
-        AdjustGroups = 64,
-        AdjustDefault = 128,
-        AdjustSessionId = 256,
-        Read = 131080,
-        Write = 131296,
-        AllAccess = 983551,
-        MaximumAllowed = 33554432
-    }
-
-    public enum WellKnownSidType
-    {
-        NullSid = 0,
-        WorldSid = 1,
-        LocalSid = 2,
-        CreatorOwnerSid = 3,
-        CreatorGroupSid = 4,
-        CreatorOwnerServerSid = 5,
-        CreatorGroupServerSid = 6,
-        NTAuthoritySid = 7,
-        DialupSid = 8,
-        NetworkSid = 9,
-        BatchSid = 10,
-        InteractiveSid = 11,
-        ServiceSid = 12,
-        AnonymousSid = 13,
-        ProxySid = 14,
-        EnterpriseControllersSid = 15,
-        SelfSid = 16,
-        AuthenticatedUserSid = 17,
-        RestrictedCodeSid = 18,
-        TerminalServerSid = 19,
-        RemoteLogonIdSid = 20,
-        LogonIdsSid = 21,
-        LocalSystemSid = 22,
-        LocalServiceSid = 23,
-        NetworkServiceSid = 24,
-        BuiltinDomainSid = 25,
-        BuiltinAdministratorsSid = 26,
-        BuiltinUsersSid = 27,
-        BuiltinGuestsSid = 28,
-        BuiltinPowerUsersSid = 29,
-        BuiltinAccountOperatorsSid = 30,
-        BuiltinSystemOperatorsSid = 31,
-        BuiltinPrintOperatorsSid = 32,
-        BuiltinBackupOperatorsSid = 33,
-        BuiltinReplicatorSid = 34,
-        BuiltinPreWindows2000CompatibleAccessSid = 35,
-        BuiltinRemoteDesktopUsersSid = 36,
-        BuiltinNetworkConfigurationOperatorsSid = 37,
-        AccountAdministratorSid = 38,
-        AccountGuestSid = 39,
-        AccountKrbtgtSid = 40,
-        AccountDomainAdminsSid = 41,
-        AccountDomainUsersSid = 42,
-        AccountDomainGuestsSid = 43,
-        AccountComputersSid = 44,
-        AccountControllersSid = 45,
-        AccountCertAdminsSid = 46,
-        AccountSchemaAdminsSid = 47,
-        AccountEnterpriseAdminsSid = 48,
-        AccountPolicyAdminsSid = 49,
-        AccountRasAndIasServersSid = 50,
-        NtlmAuthenticationSid = 51,
-        DigestAuthenticationSid = 52,
-        SChannelAuthenticationSid = 53,
-        ThisOrganizationSid = 54,
-        OtherOrganizationSid = 55,
-        BuiltinIncomingForestTrustBuildersSid = 56,
-        BuiltinPerformanceMonitoringUsersSid = 57,
-        BuiltinPerformanceLoggingUsersSid = 58,
-        BuiltinAuthorizationAccessSid = 59,
-        MaxDefined = 60,
-        WinBuiltinTerminalServerLicenseServersSid = 60
-    }
-
-    public enum WindowsBuiltInRole
-    {
-        Administrator = 544,
-        User = 545,
-        Guest = 546,
-        PowerUser = 547,
-        AccountOperator = 548,
-        SystemOperator = 549,
-        PrintOperator = 550,
-        BackupOperator = 551,
-        Replicator = 552
-    }
-
-    public partial class WindowsIdentity : Claims.ClaimsIdentity, IDisposable
-    {
-        public new const string DefaultIssuer = "AD AUTHORITY";
-        public WindowsIdentity(IntPtr userToken, string type) { }
-
-        public WindowsIdentity(IntPtr userToken) { }
-
-        public WindowsIdentity(string sUserPrincipalName) { }
-
-        public Microsoft.Win32.SafeHandles.SafeAccessTokenHandle AccessToken { get { throw null; } }
-
-        public sealed override string AuthenticationType { get { throw null; } }
-
-        public override Collections.Generic.IEnumerable<Claims.Claim> Claims { get { throw null; } }
-
-        public IdentityReferenceCollection Groups { get { throw null; } }
-
-        public TokenImpersonationLevel ImpersonationLevel { get { throw null; } }
-
-        public virtual bool IsAnonymous { get { throw null; } }
-
-        public override bool IsAuthenticated { get { throw null; } }
-
-        public virtual bool IsGuest { get { throw null; } }
-
-        public virtual bool IsSystem { get { throw null; } }
-
-        public override string Name { get { throw null; } }
-
-        public SecurityIdentifier Owner { get { throw null; } }
-
-        public SecurityIdentifier User { get { throw null; } }
-
-        public override Claims.ClaimsIdentity Clone() { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public static WindowsIdentity GetAnonymous() { throw null; }
-
-        public static WindowsIdentity GetCurrent() { throw null; }
-
-        public static WindowsIdentity GetCurrent(bool ifImpersonating) { throw null; }
-
-        public static WindowsIdentity GetCurrent(TokenAccessLevels desiredAccess) { throw null; }
-
-        public static void RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, Action action) { }
-
-        public static T RunImpersonated<T>(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, Func<T> func) { throw null; }
-    }
-
-    public partial class WindowsPrincipal : Claims.ClaimsPrincipal
-    {
-        public WindowsPrincipal(WindowsIdentity ntIdentity) { }
-
-        public override IIdentity Identity { get { throw null; } }
-
-        public virtual bool IsInRole(int rid) { throw null; }
-
-        public virtual bool IsInRole(SecurityIdentifier sid) { throw null; }
-
-        public virtual bool IsInRole(WindowsBuiltInRole role) { throw null; }
-
-        public override bool IsInRole(string role) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.principal.windows/5.0.0/system.security.principal.windows.nuspec b/src/referencePackages/src/system.security.principal.windows/5.0.0/system.security.principal.windows.nuspec
index ea100486..f3052649 100644
--- a/src/referencePackages/src/system.security.principal.windows/5.0.0/system.security.principal.windows.nuspec
+++ b/src/referencePackages/src/system.security.principal.windows/5.0.0/system.security.principal.windows.nuspec
@@ -30,21 +30,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <repository type="git" url="git://github.com/dotnet/runtime" commit="cf258a14b70ad9069470a108f13765e0e5988f51" />
     <dependencies>
       <group targetFramework=".NETCoreApp3.0" />
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.Win32.Primitives" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Reflection" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.Handles" version="4.3.0" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Security.Claims" version="4.3.0" />
-        <dependency id="System.Security.Principal" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Threading" version="4.3.0" exclude="Compile" />
-      </group>
       <group targetFramework=".NETStandard2.0" />
     </dependencies>
   </metadata>
diff --git a/src/referencePackages/src/system.security.principal/4.3.0/System.Security.Principal.4.3.0.csproj b/src/referencePackages/src/system.security.principal/4.3.0/System.Security.Principal.4.3.0.csproj
deleted file mode 100644
index 958f34cd..00000000
--- a/src/referencePackages/src/system.security.principal/4.3.0/System.Security.Principal.4.3.0.csproj
+++ /dev/null
@@ -1,12 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0</TargetFrameworks>
-    <AssemblyName>System.Security.Principal</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.security.principal/4.3.0/ref/netstandard1.0/System.Security.Principal.cs b/src/referencePackages/src/system.security.principal/4.3.0/ref/netstandard1.0/System.Security.Principal.cs
deleted file mode 100644
index fe0c2762..00000000
--- a/src/referencePackages/src/system.security.principal/4.3.0/ref/netstandard1.0/System.Security.Principal.cs
+++ /dev/null
@@ -1,51 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Security.Principal")]
-[assembly: System.Reflection.AssemblyDescription("System.Security.Principal")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Security.Principal")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Security.Principal
-{
-    public partial interface IIdentity
-    {
-        string AuthenticationType { get; }
-
-        bool IsAuthenticated { get; }
-
-        string Name { get; }
-    }
-
-    public partial interface IPrincipal
-    {
-        IIdentity Identity { get; }
-
-        bool IsInRole(string role);
-    }
-
-    public enum TokenImpersonationLevel
-    {
-        None = 0,
-        Anonymous = 1,
-        Identification = 2,
-        Impersonation = 3,
-        Delegation = 4
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.security.principal/4.3.0/system.security.principal.nuspec b/src/referencePackages/src/system.security.principal/4.3.0/system.security.principal.nuspec
deleted file mode 100644
index 80bbe8e6..00000000
--- a/src/referencePackages/src/system.security.principal/4.3.0/system.security.principal.nuspec
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Security.Principal</id>
-    <version>4.3.0</version>
-    <title>System.Security.Principal</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides the base interfaces for principal and identity objects that represents the security context under which code is running.
-
-Commonly Used Types:
-System.Security.Principal.IPrincipal
-System.Security.Principal.IIdentity
-System.Security.Principal.TokenImpersonationLevel
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.text.encoding.codepages/4.5.1/System.Text.Encoding.CodePages.4.5.1.csproj b/src/referencePackages/src/system.text.encoding.codepages/4.5.1/System.Text.Encoding.CodePages.4.5.1.csproj
index 0c587a59..5ba4a8a3 100644
--- a/src/referencePackages/src/system.text.encoding.codepages/4.5.1/System.Text.Encoding.CodePages.4.5.1.csproj
+++ b/src/referencePackages/src/system.text.encoding.codepages/4.5.1/System.Text.Encoding.CodePages.4.5.1.csproj
@@ -1,7 +1,7 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.3;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Text.Encoding.CodePages</AssemblyName>
   </PropertyGroup>
 
diff --git a/src/referencePackages/src/system.text.encoding.codepages/4.5.1/lib/netstandard1.3/System.Text.Encoding.CodePages.cs b/src/referencePackages/src/system.text.encoding.codepages/4.5.1/lib/netstandard1.3/System.Text.Encoding.CodePages.cs
deleted file mode 100644
index f2f935cc..00000000
--- a/src/referencePackages/src/system.text.encoding.codepages/4.5.1/lib/netstandard1.3/System.Text.Encoding.CodePages.cs
+++ /dev/null
@@ -1,37 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
-[assembly: System.Reflection.AssemblyTitle("System.Text.Encoding.CodePages")]
-[assembly: System.Reflection.AssemblyDescription("System.Text.Encoding.CodePages")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Text.Encoding.CodePages")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.24705.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.24705.01. Commit Hash: 4d1af962ca0fede10beb01d197367c2f90e92c97")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.2.0")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Text
-{
-    public sealed partial class CodePagesEncodingProvider : EncodingProvider
-    {
-        internal CodePagesEncodingProvider() { }
-
-        public static EncodingProvider Instance { get { throw null; } }
-
-        public override Encoding GetEncoding(int codepage) { throw null; }
-
-        public override Encoding GetEncoding(string name) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.text.encoding.codepages/4.5.1/system.text.encoding.codepages.nuspec b/src/referencePackages/src/system.text.encoding.codepages/4.5.1/system.text.encoding.codepages.nuspec
index c7c51a63..68ee2fca 100644
--- a/src/referencePackages/src/system.text.encoding.codepages/4.5.1/system.text.encoding.codepages.nuspec
+++ b/src/referencePackages/src/system.text.encoding.codepages/4.5.1/system.text.encoding.codepages.nuspec
@@ -21,9 +21,6 @@ When using NuGet 3.x this package requires at least version 3.4.</description>
     <copyright>© Microsoft Corporation. All rights reserved.</copyright>
     <serviceable>true</serviceable>
     <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="NETStandard.Library" version="1.6.1" />
-      </group>
       <group targetFramework=".NETStandard2.0">
         <dependency id="System.Runtime.CompilerServices.Unsafe" version="4.5.2" />
       </group>
diff --git a/src/referencePackages/src/system.text.encoding.extensions/4.3.0/System.Text.Encoding.Extensions.4.3.0.csproj b/src/referencePackages/src/system.text.encoding.extensions/4.3.0/System.Text.Encoding.Extensions.4.3.0.csproj
deleted file mode 100644
index 04ab840a..00000000
--- a/src/referencePackages/src/system.text.encoding.extensions/4.3.0/System.Text.Encoding.Extensions.4.3.0.csproj
+++ /dev/null
@@ -1,22 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.text.encoding.extensions/4.3.0/ref/netstandard1.0/System.Text.Encoding.Extensions.cs b/src/referencePackages/src/system.text.encoding.extensions/4.3.0/ref/netstandard1.0/System.Text.Encoding.Extensions.cs
deleted file mode 100644
index bb858b96..00000000
--- a/src/referencePackages/src/system.text.encoding.extensions/4.3.0/ref/netstandard1.0/System.Text.Encoding.Extensions.cs
+++ /dev/null
@@ -1,97 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyTitle("System.Text.Encoding.Extensions.dll")]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyDescription("System.Text.Encoding.Extensions.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Text.Encoding.Extensions.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Text
-{
-    public partial class UnicodeEncoding : Encoding
-    {
-        public UnicodeEncoding() { }
-
-        public UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) { }
-
-        public UnicodeEncoding(bool bigEndian, bool byteOrderMark) { }
-
-        public override bool Equals(object value) { throw null; }
-
-        public override int GetByteCount(char[] chars, int index, int count) { throw null; }
-
-        public override int GetByteCount(string s) { throw null; }
-
-        public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        public override int GetCharCount(byte[] bytes, int index, int count) { throw null; }
-
-        public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { throw null; }
-
-        public override Decoder GetDecoder() { throw null; }
-
-        public override Encoder GetEncoder() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override int GetMaxByteCount(int charCount) { throw null; }
-
-        public override int GetMaxCharCount(int byteCount) { throw null; }
-
-        public override byte[] GetPreamble() { throw null; }
-
-        public override string GetString(byte[] bytes, int index, int count) { throw null; }
-    }
-
-    public partial class UTF8Encoding : Encoding
-    {
-        public UTF8Encoding() { }
-
-        public UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes) { }
-
-        public UTF8Encoding(bool encoderShouldEmitUTF8Identifier) { }
-
-        public override bool Equals(object value) { throw null; }
-
-        public override int GetByteCount(char[] chars, int index, int count) { throw null; }
-
-        public override int GetByteCount(string chars) { throw null; }
-
-        public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        public override int GetCharCount(byte[] bytes, int index, int count) { throw null; }
-
-        public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { throw null; }
-
-        public override Decoder GetDecoder() { throw null; }
-
-        public override Encoder GetEncoder() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override int GetMaxByteCount(int charCount) { throw null; }
-
-        public override int GetMaxCharCount(int byteCount) { throw null; }
-
-        public override byte[] GetPreamble() { throw null; }
-
-        public override string GetString(byte[] bytes, int index, int count) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.text.encoding.extensions/4.3.0/ref/netstandard1.3/System.Text.Encoding.Extensions.cs b/src/referencePackages/src/system.text.encoding.extensions/4.3.0/ref/netstandard1.3/System.Text.Encoding.Extensions.cs
deleted file mode 100644
index 92aee82c..00000000
--- a/src/referencePackages/src/system.text.encoding.extensions/4.3.0/ref/netstandard1.3/System.Text.Encoding.Extensions.cs
+++ /dev/null
@@ -1,245 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Text.Encoding.Extensions")]
-[assembly: System.Reflection.AssemblyDescription("System.Text.Encoding.Extensions")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Text.Encoding.Extensions")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Text
-{
-    public partial class ASCIIEncoding : Encoding
-    {
-        public override bool IsSingleByte { get { throw null; } }
-
-        public override int GetByteCount(char[] chars, int index, int count) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetByteCount(char* chars, int count) { throw null; }
-
-        public override int GetByteCount(string chars) { throw null; }
-
-        public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { throw null; }
-
-        public override int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        public override int GetCharCount(byte[] bytes, int index, int count) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetCharCount(byte* bytes, int count) { throw null; }
-
-        public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { throw null; }
-
-        public override Decoder GetDecoder() { throw null; }
-
-        public override Encoder GetEncoder() { throw null; }
-
-        public override int GetMaxByteCount(int charCount) { throw null; }
-
-        public override int GetMaxCharCount(int byteCount) { throw null; }
-
-        public override string GetString(byte[] bytes, int byteIndex, int byteCount) { throw null; }
-    }
-
-    public partial class UnicodeEncoding : Encoding
-    {
-        public UnicodeEncoding() { }
-
-        public UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) { }
-
-        public UnicodeEncoding(bool bigEndian, bool byteOrderMark) { }
-
-        public override bool Equals(object value) { throw null; }
-
-        public override int GetByteCount(char[] chars, int index, int count) { throw null; }
-
-        public override int GetByteCount(string s) { throw null; }
-
-        public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        public override int GetCharCount(byte[] bytes, int index, int count) { throw null; }
-
-        public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { throw null; }
-
-        public override Decoder GetDecoder() { throw null; }
-
-        public override Encoder GetEncoder() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override int GetMaxByteCount(int charCount) { throw null; }
-
-        public override int GetMaxCharCount(int byteCount) { throw null; }
-
-        public override byte[] GetPreamble() { throw null; }
-
-        public override string GetString(byte[] bytes, int index, int count) { throw null; }
-    }
-
-    public sealed partial class UTF32Encoding : Encoding
-    {
-        public UTF32Encoding() { }
-
-        public UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters) { }
-
-        public UTF32Encoding(bool bigEndian, bool byteOrderMark) { }
-
-        public override bool Equals(object value) { throw null; }
-
-        public override int GetByteCount(char[] chars, int index, int count) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetByteCount(char* chars, int count) { throw null; }
-
-        public override int GetByteCount(string s) { throw null; }
-
-        public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { throw null; }
-
-        public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        public override int GetCharCount(byte[] bytes, int index, int count) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetCharCount(byte* bytes, int count) { throw null; }
-
-        public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { throw null; }
-
-        public override Decoder GetDecoder() { throw null; }
-
-        public override Encoder GetEncoder() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override int GetMaxByteCount(int charCount) { throw null; }
-
-        public override int GetMaxCharCount(int byteCount) { throw null; }
-
-        public override byte[] GetPreamble() { throw null; }
-
-        public override string GetString(byte[] bytes, int index, int count) { throw null; }
-    }
-
-    public partial class UTF7Encoding : Encoding
-    {
-        public UTF7Encoding() { }
-
-        public UTF7Encoding(bool allowOptionals) { }
-
-        public override bool Equals(object value) { throw null; }
-
-        public override int GetByteCount(char[] chars, int index, int count) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetByteCount(char* chars, int count) { throw null; }
-
-        public override int GetByteCount(string s) { throw null; }
-
-        public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { throw null; }
-
-        public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        public override int GetCharCount(byte[] bytes, int index, int count) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetCharCount(byte* bytes, int count) { throw null; }
-
-        public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { throw null; }
-
-        public override Decoder GetDecoder() { throw null; }
-
-        public override Encoder GetEncoder() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override int GetMaxByteCount(int charCount) { throw null; }
-
-        public override int GetMaxCharCount(int byteCount) { throw null; }
-
-        public override string GetString(byte[] bytes, int index, int count) { throw null; }
-    }
-
-    public partial class UTF8Encoding : Encoding
-    {
-        public UTF8Encoding() { }
-
-        public UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes) { }
-
-        public UTF8Encoding(bool encoderShouldEmitUTF8Identifier) { }
-
-        public override bool Equals(object value) { throw null; }
-
-        public override int GetByteCount(char[] chars, int index, int count) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetByteCount(char* chars, int count) { throw null; }
-
-        public override int GetByteCount(string chars) { throw null; }
-
-        public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { throw null; }
-
-        public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        public override int GetCharCount(byte[] bytes, int index, int count) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetCharCount(byte* bytes, int count) { throw null; }
-
-        public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { throw null; }
-
-        [CLSCompliant(false)]
-        public override unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { throw null; }
-
-        public override Decoder GetDecoder() { throw null; }
-
-        public override Encoder GetEncoder() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public override int GetMaxByteCount(int charCount) { throw null; }
-
-        public override int GetMaxCharCount(int byteCount) { throw null; }
-
-        public override byte[] GetPreamble() { throw null; }
-
-        public override string GetString(byte[] bytes, int index, int count) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.text.encoding.extensions/4.3.0/system.text.encoding.extensions.nuspec b/src/referencePackages/src/system.text.encoding.extensions/4.3.0/system.text.encoding.extensions.nuspec
deleted file mode 100644
index 8a7ccab3..00000000
--- a/src/referencePackages/src/system.text.encoding.extensions/4.3.0/system.text.encoding.extensions.nuspec
+++ /dev/null
@@ -1,41 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Text.Encoding.Extensions</id>
-    <version>4.3.0</version>
-    <title>System.Text.Encoding.Extensions</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides support for specific encodings, including ASCII, UTF-7, UTF-8, UTF-16, and UTF-32.
-
-Commonly Used Types:
-System.Text.UTF8Encoding
-System.Text.UnicodeEncoding
-System.Text.ASCIIEncoding
-System.Text.UTF7Encoding
-System.Text.UTF32Encoding
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.text.encoding/4.3.0/System.Text.Encoding.4.3.0.csproj b/src/referencePackages/src/system.text.encoding/4.3.0/System.Text.Encoding.4.3.0.csproj
deleted file mode 100644
index 7d5e2401..00000000
--- a/src/referencePackages/src/system.text.encoding/4.3.0/System.Text.Encoding.4.3.0.csproj
+++ /dev/null
@@ -1,20 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Text.Encoding</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.text.encoding/4.3.0/ref/netstandard1.0/System.Text.Encoding.cs b/src/referencePackages/src/system.text.encoding/4.3.0/ref/netstandard1.0/System.Text.Encoding.cs
deleted file mode 100644
index 195da102..00000000
--- a/src/referencePackages/src/system.text.encoding/4.3.0/ref/netstandard1.0/System.Text.Encoding.cs
+++ /dev/null
@@ -1,129 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyTitle("System.Text.Encoding.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.Text.Encoding.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Text.Encoding.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Text
-{
-    public abstract partial class Decoder
-    {
-        public virtual void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed) { throw null; }
-
-        public virtual int GetCharCount(byte[] bytes, int index, int count, bool flush) { throw null; }
-
-        public abstract int GetCharCount(byte[] bytes, int index, int count);
-        public virtual int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush) { throw null; }
-
-        public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
-        public virtual void Reset() { }
-    }
-
-    public sealed partial class DecoderFallbackException : ArgumentException
-    {
-        public DecoderFallbackException() { }
-
-        public DecoderFallbackException(string message, byte[] bytesUnknown, int index) { }
-
-        public DecoderFallbackException(string message, Exception innerException) { }
-
-        public DecoderFallbackException(string message) { }
-
-        public byte[] BytesUnknown { get { throw null; } }
-
-        public int Index { get { throw null; } }
-    }
-
-    public abstract partial class Encoder
-    {
-        public virtual void Convert(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed) { throw null; }
-
-        public abstract int GetByteCount(char[] chars, int index, int count, bool flush);
-        public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
-    }
-
-    public sealed partial class EncoderFallbackException : ArgumentException
-    {
-        public EncoderFallbackException() { }
-
-        public EncoderFallbackException(string message, Exception innerException) { }
-
-        public EncoderFallbackException(string message) { }
-
-        public char CharUnknown { get { throw null; } }
-
-        public char CharUnknownHigh { get { throw null; } }
-
-        public char CharUnknownLow { get { throw null; } }
-
-        public int Index { get { throw null; } }
-    }
-
-    public abstract partial class Encoding
-    {
-        public static Encoding BigEndianUnicode { get { throw null; } }
-
-        public static Encoding Unicode { get { throw null; } }
-
-        public static Encoding UTF8 { get { throw null; } }
-
-        public virtual string WebName { get { throw null; } }
-
-        public static byte[] Convert(Encoding srcEncoding, Encoding dstEncoding, byte[] bytes, int index, int count) { throw null; }
-
-        public static byte[] Convert(Encoding srcEncoding, Encoding dstEncoding, byte[] bytes) { throw null; }
-
-        public override bool Equals(object value) { throw null; }
-
-        public abstract int GetByteCount(char[] chars, int index, int count);
-        public virtual int GetByteCount(char[] chars) { throw null; }
-
-        public virtual int GetByteCount(string s) { throw null; }
-
-        public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
-        public virtual byte[] GetBytes(char[] chars, int index, int count) { throw null; }
-
-        public virtual byte[] GetBytes(char[] chars) { throw null; }
-
-        public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        public virtual byte[] GetBytes(string s) { throw null; }
-
-        public abstract int GetCharCount(byte[] bytes, int index, int count);
-        public virtual int GetCharCount(byte[] bytes) { throw null; }
-
-        public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
-        public virtual char[] GetChars(byte[] bytes, int index, int count) { throw null; }
-
-        public virtual char[] GetChars(byte[] bytes) { throw null; }
-
-        public virtual Decoder GetDecoder() { throw null; }
-
-        public virtual Encoder GetEncoder() { throw null; }
-
-        public static Encoding GetEncoding(string name) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public abstract int GetMaxByteCount(int charCount);
-        public abstract int GetMaxCharCount(int byteCount);
-        public virtual byte[] GetPreamble() { throw null; }
-
-        public virtual string GetString(byte[] bytes, int index, int count) { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.text.encoding/4.3.0/ref/netstandard1.3/System.Text.Encoding.cs b/src/referencePackages/src/system.text.encoding/4.3.0/ref/netstandard1.3/System.Text.Encoding.cs
deleted file mode 100644
index a1a22d01..00000000
--- a/src/referencePackages/src/system.text.encoding/4.3.0/ref/netstandard1.3/System.Text.Encoding.cs
+++ /dev/null
@@ -1,303 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Text.Encoding")]
-[assembly: System.Reflection.AssemblyDescription("System.Text.Encoding")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Text.Encoding")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Text
-{
-    public abstract partial class Decoder
-    {
-        public DecoderFallback Fallback { get { throw null; } set { } }
-
-        public DecoderFallbackBuffer FallbackBuffer { get { throw null; } }
-
-        public virtual void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed) { throw null; }
-
-        public virtual int GetCharCount(byte[] bytes, int index, int count, bool flush) { throw null; }
-
-        public abstract int GetCharCount(byte[] bytes, int index, int count);
-        public virtual int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush) { throw null; }
-
-        public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
-        public virtual void Reset() { }
-    }
-
-    public sealed partial class DecoderExceptionFallback : DecoderFallback
-    {
-        public override int MaxCharCount { get { throw null; } }
-
-        public override DecoderFallbackBuffer CreateFallbackBuffer() { throw null; }
-
-        public override bool Equals(object value) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-    }
-
-    public abstract partial class DecoderFallback
-    {
-        public static DecoderFallback ExceptionFallback { get { throw null; } }
-
-        public abstract int MaxCharCount { get; }
-
-        public static DecoderFallback ReplacementFallback { get { throw null; } }
-
-        public abstract DecoderFallbackBuffer CreateFallbackBuffer();
-    }
-
-    public abstract partial class DecoderFallbackBuffer
-    {
-        public abstract int Remaining { get; }
-
-        public abstract bool Fallback(byte[] bytesUnknown, int index);
-        public abstract char GetNextChar();
-        public abstract bool MovePrevious();
-        public virtual void Reset() { }
-    }
-
-    public sealed partial class DecoderFallbackException : ArgumentException
-    {
-        public DecoderFallbackException() { }
-
-        public DecoderFallbackException(string message, byte[] bytesUnknown, int index) { }
-
-        public DecoderFallbackException(string message, Exception innerException) { }
-
-        public DecoderFallbackException(string message) { }
-
-        public byte[] BytesUnknown { get { throw null; } }
-
-        public int Index { get { throw null; } }
-    }
-
-    public sealed partial class DecoderReplacementFallback : DecoderFallback
-    {
-        public DecoderReplacementFallback() { }
-
-        public DecoderReplacementFallback(string replacement) { }
-
-        public string DefaultString { get { throw null; } }
-
-        public override int MaxCharCount { get { throw null; } }
-
-        public override DecoderFallbackBuffer CreateFallbackBuffer() { throw null; }
-
-        public override bool Equals(object value) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-    }
-
-    public abstract partial class Encoder
-    {
-        public EncoderFallback Fallback { get { throw null; } set { } }
-
-        public EncoderFallbackBuffer FallbackBuffer { get { throw null; } }
-
-        public virtual void Convert(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed) { throw null; }
-
-        public abstract int GetByteCount(char[] chars, int index, int count, bool flush);
-        public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
-        public virtual void Reset() { }
-    }
-
-    public sealed partial class EncoderExceptionFallback : EncoderFallback
-    {
-        public override int MaxCharCount { get { throw null; } }
-
-        public override EncoderFallbackBuffer CreateFallbackBuffer() { throw null; }
-
-        public override bool Equals(object value) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-    }
-
-    public abstract partial class EncoderFallback
-    {
-        public static EncoderFallback ExceptionFallback { get { throw null; } }
-
-        public abstract int MaxCharCount { get; }
-
-        public static EncoderFallback ReplacementFallback { get { throw null; } }
-
-        public abstract EncoderFallbackBuffer CreateFallbackBuffer();
-    }
-
-    public abstract partial class EncoderFallbackBuffer
-    {
-        public abstract int Remaining { get; }
-
-        public abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
-        public abstract bool Fallback(char charUnknown, int index);
-        public abstract char GetNextChar();
-        public abstract bool MovePrevious();
-        public virtual void Reset() { }
-    }
-
-    public sealed partial class EncoderFallbackException : ArgumentException
-    {
-        public EncoderFallbackException() { }
-
-        public EncoderFallbackException(string message, Exception innerException) { }
-
-        public EncoderFallbackException(string message) { }
-
-        public char CharUnknown { get { throw null; } }
-
-        public char CharUnknownHigh { get { throw null; } }
-
-        public char CharUnknownLow { get { throw null; } }
-
-        public int Index { get { throw null; } }
-
-        public bool IsUnknownSurrogate() { throw null; }
-    }
-
-    public sealed partial class EncoderReplacementFallback : EncoderFallback
-    {
-        public EncoderReplacementFallback() { }
-
-        public EncoderReplacementFallback(string replacement) { }
-
-        public string DefaultString { get { throw null; } }
-
-        public override int MaxCharCount { get { throw null; } }
-
-        public override EncoderFallbackBuffer CreateFallbackBuffer() { throw null; }
-
-        public override bool Equals(object value) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-    }
-
-    public abstract partial class Encoding
-    {
-        protected Encoding() { }
-
-        protected Encoding(int codePage, EncoderFallback encoderFallback, DecoderFallback decoderFallback) { }
-
-        protected Encoding(int codePage) { }
-
-        public static Encoding ASCII { get { throw null; } }
-
-        public static Encoding BigEndianUnicode { get { throw null; } }
-
-        public virtual int CodePage { get { throw null; } }
-
-        public DecoderFallback DecoderFallback { get { throw null; } }
-
-        public EncoderFallback EncoderFallback { get { throw null; } }
-
-        public virtual string EncodingName { get { throw null; } }
-
-        public virtual bool IsSingleByte { get { throw null; } }
-
-        public static Encoding Unicode { get { throw null; } }
-
-        public static Encoding UTF32 { get { throw null; } }
-
-        public static Encoding UTF7 { get { throw null; } }
-
-        public static Encoding UTF8 { get { throw null; } }
-
-        public virtual string WebName { get { throw null; } }
-
-        public virtual object Clone() { throw null; }
-
-        public static byte[] Convert(Encoding srcEncoding, Encoding dstEncoding, byte[] bytes, int index, int count) { throw null; }
-
-        public static byte[] Convert(Encoding srcEncoding, Encoding dstEncoding, byte[] bytes) { throw null; }
-
-        public override bool Equals(object value) { throw null; }
-
-        public abstract int GetByteCount(char[] chars, int index, int count);
-        public virtual int GetByteCount(char[] chars) { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual unsafe int GetByteCount(char* chars, int count) { throw null; }
-
-        public virtual int GetByteCount(string s) { throw null; }
-
-        public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
-        public virtual byte[] GetBytes(char[] chars, int index, int count) { throw null; }
-
-        public virtual byte[] GetBytes(char[] chars) { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual unsafe int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { throw null; }
-
-        public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { throw null; }
-
-        public virtual byte[] GetBytes(string s) { throw null; }
-
-        public abstract int GetCharCount(byte[] bytes, int index, int count);
-        public virtual int GetCharCount(byte[] bytes) { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual unsafe int GetCharCount(byte* bytes, int count) { throw null; }
-
-        public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
-        public virtual char[] GetChars(byte[] bytes, int index, int count) { throw null; }
-
-        public virtual char[] GetChars(byte[] bytes) { throw null; }
-
-        [CLSCompliant(false)]
-        public virtual unsafe int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { throw null; }
-
-        public virtual Decoder GetDecoder() { throw null; }
-
-        public virtual Encoder GetEncoder() { throw null; }
-
-        public static Encoding GetEncoding(int codepage, EncoderFallback encoderFallback, DecoderFallback decoderFallback) { throw null; }
-
-        public static Encoding GetEncoding(int codepage) { throw null; }
-
-        public static Encoding GetEncoding(string name, EncoderFallback encoderFallback, DecoderFallback decoderFallback) { throw null; }
-
-        public static Encoding GetEncoding(string name) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public abstract int GetMaxByteCount(int charCount);
-        public abstract int GetMaxCharCount(int byteCount);
-        public virtual byte[] GetPreamble() { throw null; }
-
-        public virtual string GetString(byte[] bytes, int index, int count) { throw null; }
-
-        public virtual string GetString(byte[] bytes) { throw null; }
-
-        [CLSCompliant(false)]
-        public unsafe string GetString(byte* bytes, int byteCount) { throw null; }
-
-        public static void RegisterProvider(EncodingProvider provider) { }
-    }
-
-    public abstract partial class EncodingProvider
-    {
-        public EncodingProvider() { }
-
-        public virtual Encoding GetEncoding(int codepage, EncoderFallback encoderFallback, DecoderFallback decoderFallback) { throw null; }
-
-        public abstract Encoding GetEncoding(int codepage);
-        public virtual Encoding GetEncoding(string name, EncoderFallback encoderFallback, DecoderFallback decoderFallback) { throw null; }
-
-        public abstract Encoding GetEncoding(string name);
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.text.encoding/4.3.0/system.text.encoding.nuspec b/src/referencePackages/src/system.text.encoding/4.3.0/system.text.encoding.nuspec
deleted file mode 100644
index f023fc24..00000000
--- a/src/referencePackages/src/system.text.encoding/4.3.0/system.text.encoding.nuspec
+++ /dev/null
@@ -1,44 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Text.Encoding</id>
-    <version>4.3.0</version>
-    <title>System.Text.Encoding</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides base abstract encoding classes for converting blocks of characters to and from blocks of bytes.
-
-Commonly Used Types:
-System.Text.Encoding
-System.Text.DecoderFallbackException
-System.Text.Decoder
-System.Text.EncoderFallbackException
-System.Text.Encoder
-System.Text.EncoderFallback
-System.Text.EncoderFallbackBuffer
-System.Text.DecoderFallback
-System.Text.DecoderFallbackBuffer
-System.Text.DecoderExceptionFallback
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.text.regularexpressions/4.3.0/System.Text.RegularExpressions.4.3.0.csproj b/src/referencePackages/src/system.text.regularexpressions/4.3.0/System.Text.RegularExpressions.4.3.0.csproj
deleted file mode 100644
index 3f6ffe88..00000000
--- a/src/referencePackages/src/system.text.regularexpressions/4.3.0/System.Text.RegularExpressions.4.3.0.csproj
+++ /dev/null
@@ -1,29 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netcoreapp1.1;netstandard1.0;netstandard1.3;netstandard1.6</TargetFrameworks>
-    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netcoreapp1.1'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.6'">
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Globalization" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Threading" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netcoreapp1.1/System.Text.RegularExpressions.cs b/src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netcoreapp1.1/System.Text.RegularExpressions.cs
deleted file mode 100644
index 197ead45..00000000
--- a/src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netcoreapp1.1/System.Text.RegularExpressions.cs
+++ /dev/null
@@ -1,332 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Text.RegularExpressions")]
-[assembly: System.Reflection.AssemblyDescription("System.Text.RegularExpressions")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Text.RegularExpressions")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.24705.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.24705.01. Commit Hash: 4d1af962ca0fede10beb01d197367c2f90e92c97")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.1.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Text.RegularExpressions
-{
-    public partial class Capture
-    {
-        internal Capture() { }
-
-        public int Index { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public string Value { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class CaptureCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        internal CaptureCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public Capture this[int i] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
-    }
-
-    public partial class Group : Capture
-    {
-        internal Group() { }
-
-        public CaptureCollection Captures { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public bool Success { get { throw null; } }
-    }
-
-    public partial class GroupCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        internal GroupCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public Group this[int groupnum] { get { throw null; } }
-
-        public Group this[string groupname] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
-    }
-
-    public partial class Match : Group
-    {
-        internal Match() { }
-
-        public static Match Empty { get { throw null; } }
-
-        public virtual GroupCollection Groups { get { throw null; } }
-
-        public Match NextMatch() { throw null; }
-
-        public virtual string Result(string replacement) { throw null; }
-    }
-
-    public partial class MatchCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        internal MatchCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public virtual Match this[int i] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
-    }
-
-    public delegate string MatchEvaluator(Match match);
-    public partial class Regex
-    {
-        protected internal int capsize;
-        protected internal string[] capslist;
-        protected internal RegexRunnerFactory factory;
-        public static readonly TimeSpan InfiniteMatchTimeout;
-        protected internal TimeSpan internalMatchTimeout;
-        protected internal string pattern;
-        protected internal RegexOptions roptions;
-        protected Regex() { }
-
-        public Regex(string pattern, RegexOptions options, TimeSpan matchTimeout) { }
-
-        public Regex(string pattern, RegexOptions options) { }
-
-        public Regex(string pattern) { }
-
-        public static int CacheSize { get { throw null; } set { } }
-
-        protected Collections.IDictionary CapNames { get { throw null; } set { } }
-
-        protected Collections.IDictionary Caps { get { throw null; } set { } }
-
-        public TimeSpan MatchTimeout { get { throw null; } }
-
-        public RegexOptions Options { get { throw null; } }
-
-        public bool RightToLeft { get { throw null; } }
-
-        public static string Escape(string str) { throw null; }
-
-        public string[] GetGroupNames() { throw null; }
-
-        public int[] GetGroupNumbers() { throw null; }
-
-        public string GroupNameFromNumber(int i) { throw null; }
-
-        public int GroupNumberFromName(string name) { throw null; }
-
-        protected void InitializeReferences() { }
-
-        public bool IsMatch(string input, int startat) { throw null; }
-
-        public static bool IsMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static bool IsMatch(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static bool IsMatch(string input, string pattern) { throw null; }
-
-        public bool IsMatch(string input) { throw null; }
-
-        public Match Match(string input, int beginning, int length) { throw null; }
-
-        public Match Match(string input, int startat) { throw null; }
-
-        public static Match Match(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static Match Match(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static Match Match(string input, string pattern) { throw null; }
-
-        public Match Match(string input) { throw null; }
-
-        public MatchCollection Matches(string input, int startat) { throw null; }
-
-        public static MatchCollection Matches(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static MatchCollection Matches(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static MatchCollection Matches(string input, string pattern) { throw null; }
-
-        public MatchCollection Matches(string input) { throw null; }
-
-        public string Replace(string input, string replacement, int count, int startat) { throw null; }
-
-        public string Replace(string input, string replacement, int count) { throw null; }
-
-        public static string Replace(string input, string pattern, string replacement, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static string Replace(string input, string pattern, string replacement, RegexOptions options) { throw null; }
-
-        public static string Replace(string input, string pattern, string replacement) { throw null; }
-
-        public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options) { throw null; }
-
-        public static string Replace(string input, string pattern, MatchEvaluator evaluator) { throw null; }
-
-        public string Replace(string input, string replacement) { throw null; }
-
-        public string Replace(string input, MatchEvaluator evaluator, int count, int startat) { throw null; }
-
-        public string Replace(string input, MatchEvaluator evaluator, int count) { throw null; }
-
-        public string Replace(string input, MatchEvaluator evaluator) { throw null; }
-
-        public string[] Split(string input, int count, int startat) { throw null; }
-
-        public string[] Split(string input, int count) { throw null; }
-
-        public static string[] Split(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static string[] Split(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static string[] Split(string input, string pattern) { throw null; }
-
-        public string[] Split(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static string Unescape(string str) { throw null; }
-
-        protected internal static void ValidateMatchTimeout(TimeSpan matchTimeout) { }
-    }
-
-    public partial class RegexMatchTimeoutException : TimeoutException
-    {
-        public RegexMatchTimeoutException() { }
-
-        public RegexMatchTimeoutException(string message, Exception inner) { }
-
-        public RegexMatchTimeoutException(string regexInput, string regexPattern, TimeSpan matchTimeout) { }
-
-        public RegexMatchTimeoutException(string message) { }
-
-        public string Input { get { throw null; } }
-
-        public TimeSpan MatchTimeout { get { throw null; } }
-
-        public string Pattern { get { throw null; } }
-    }
-
-    [Flags]
-    public enum RegexOptions
-    {
-        None = 0,
-        IgnoreCase = 1,
-        Multiline = 2,
-        ExplicitCapture = 4,
-        Compiled = 8,
-        Singleline = 16,
-        IgnorePatternWhitespace = 32,
-        RightToLeft = 64,
-        ECMAScript = 256,
-        CultureInvariant = 512
-    }
-
-    public abstract partial class RegexRunner
-    {
-        protected internal int[] runcrawl;
-        protected internal int runcrawlpos;
-        protected internal Match runmatch;
-        protected internal Regex runregex;
-        protected internal int[] runstack;
-        protected internal int runstackpos;
-        protected internal string runtext;
-        protected internal int runtextbeg;
-        protected internal int runtextend;
-        protected internal int runtextpos;
-        protected internal int runtextstart;
-        protected internal int[] runtrack;
-        protected internal int runtrackcount;
-        protected internal int runtrackpos;
-        protected internal RegexRunner() { }
-
-        protected void Capture(int capnum, int start, int end) { }
-
-        protected static bool CharInClass(char ch, string charClass) { throw null; }
-
-        protected static bool CharInSet(char ch, string set, string category) { throw null; }
-
-        protected void CheckTimeout() { }
-
-        protected void Crawl(int i) { }
-
-        protected int Crawlpos() { throw null; }
-
-        protected void DoubleCrawl() { }
-
-        protected void DoubleStack() { }
-
-        protected void DoubleTrack() { }
-
-        protected void EnsureStorage() { }
-
-        protected abstract bool FindFirstChar();
-        protected abstract void Go();
-        protected abstract void InitTrackCount();
-        protected bool IsBoundary(int index, int startpos, int endpos) { throw null; }
-
-        protected bool IsECMABoundary(int index, int startpos, int endpos) { throw null; }
-
-        protected bool IsMatched(int cap) { throw null; }
-
-        protected int MatchIndex(int cap) { throw null; }
-
-        protected int MatchLength(int cap) { throw null; }
-
-        protected int Popcrawl() { throw null; }
-
-        protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick, TimeSpan timeout) { throw null; }
-
-        protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick) { throw null; }
-
-        protected void TransferCapture(int capnum, int uncapnum, int start, int end) { }
-
-        protected void Uncapture() { }
-    }
-
-    public abstract partial class RegexRunnerFactory
-    {
-        protected internal abstract RegexRunner CreateInstance();
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netstandard1.0/System.Text.RegularExpressions.cs b/src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netstandard1.0/System.Text.RegularExpressions.cs
deleted file mode 100644
index 065cb0b5..00000000
--- a/src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netstandard1.0/System.Text.RegularExpressions.cs
+++ /dev/null
@@ -1,243 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyTitle("System.Text.RegularExpressions.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.Text.RegularExpressions.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Text.RegularExpressions.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Text.RegularExpressions
-{
-    public partial class Capture
-    {
-        internal Capture() { }
-
-        public int Index { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public string Value { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class CaptureCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        internal CaptureCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public Capture this[int i] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
-    }
-
-    public partial class Group : Capture
-    {
-        internal Group() { }
-
-        public CaptureCollection Captures { get { throw null; } }
-
-        public bool Success { get { throw null; } }
-    }
-
-    public partial class GroupCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        internal GroupCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public Group this[int groupnum] { get { throw null; } }
-
-        public Group this[string groupname] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
-    }
-
-    public partial class Match : Group
-    {
-        internal Match() { }
-
-        public static Match Empty { get { throw null; } }
-
-        public virtual GroupCollection Groups { get { throw null; } }
-
-        public Match NextMatch() { throw null; }
-
-        public virtual string Result(string replacement) { throw null; }
-    }
-
-    public partial class MatchCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        internal MatchCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public virtual Match this[int i] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
-    }
-
-    public delegate string MatchEvaluator(Match match);
-    public partial class Regex
-    {
-        public static readonly TimeSpan InfiniteMatchTimeout;
-        protected Regex() { }
-
-        public Regex(string pattern, RegexOptions options, TimeSpan matchTimeout) { }
-
-        public Regex(string pattern, RegexOptions options) { }
-
-        public Regex(string pattern) { }
-
-        public TimeSpan MatchTimeout { get { throw null; } }
-
-        public RegexOptions Options { get { throw null; } }
-
-        public bool RightToLeft { get { throw null; } }
-
-        public static string Escape(string str) { throw null; }
-
-        public string[] GetGroupNames() { throw null; }
-
-        public int[] GetGroupNumbers() { throw null; }
-
-        public string GroupNameFromNumber(int i) { throw null; }
-
-        public int GroupNumberFromName(string name) { throw null; }
-
-        public bool IsMatch(string input, int startat) { throw null; }
-
-        public static bool IsMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static bool IsMatch(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static bool IsMatch(string input, string pattern) { throw null; }
-
-        public bool IsMatch(string input) { throw null; }
-
-        public Match Match(string input, int beginning, int length) { throw null; }
-
-        public Match Match(string input, int startat) { throw null; }
-
-        public static Match Match(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static Match Match(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static Match Match(string input, string pattern) { throw null; }
-
-        public Match Match(string input) { throw null; }
-
-        public MatchCollection Matches(string input, int startat) { throw null; }
-
-        public static MatchCollection Matches(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static MatchCollection Matches(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static MatchCollection Matches(string input, string pattern) { throw null; }
-
-        public MatchCollection Matches(string input) { throw null; }
-
-        public string Replace(string input, string replacement, int count, int startat) { throw null; }
-
-        public string Replace(string input, string replacement, int count) { throw null; }
-
-        public static string Replace(string input, string pattern, string replacement, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static string Replace(string input, string pattern, string replacement, RegexOptions options) { throw null; }
-
-        public static string Replace(string input, string pattern, string replacement) { throw null; }
-
-        public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options) { throw null; }
-
-        public static string Replace(string input, string pattern, MatchEvaluator evaluator) { throw null; }
-
-        public string Replace(string input, string replacement) { throw null; }
-
-        public string Replace(string input, MatchEvaluator evaluator, int count, int startat) { throw null; }
-
-        public string Replace(string input, MatchEvaluator evaluator, int count) { throw null; }
-
-        public string Replace(string input, MatchEvaluator evaluator) { throw null; }
-
-        public string[] Split(string input, int count, int startat) { throw null; }
-
-        public string[] Split(string input, int count) { throw null; }
-
-        public static string[] Split(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static string[] Split(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static string[] Split(string input, string pattern) { throw null; }
-
-        public string[] Split(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static string Unescape(string str) { throw null; }
-    }
-
-    public partial class RegexMatchTimeoutException : TimeoutException
-    {
-        public RegexMatchTimeoutException() { }
-
-        public RegexMatchTimeoutException(string message, Exception inner) { }
-
-        public RegexMatchTimeoutException(string regexInput, string regexPattern, TimeSpan matchTimeout) { }
-
-        public RegexMatchTimeoutException(string message) { }
-
-        public string Input { get { throw null; } }
-
-        public TimeSpan MatchTimeout { get { throw null; } }
-
-        public string Pattern { get { throw null; } }
-    }
-
-    [Flags]
-    public enum RegexOptions
-    {
-        None = 0,
-        IgnoreCase = 1,
-        Multiline = 2,
-        ExplicitCapture = 4,
-        Singleline = 16,
-        IgnorePatternWhitespace = 32,
-        RightToLeft = 64,
-        ECMAScript = 256,
-        CultureInvariant = 512
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netstandard1.3/System.Text.RegularExpressions.cs b/src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netstandard1.3/System.Text.RegularExpressions.cs
deleted file mode 100644
index 59fa0aa8..00000000
--- a/src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netstandard1.3/System.Text.RegularExpressions.cs
+++ /dev/null
@@ -1,248 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Text.RegularExpressions")]
-[assembly: System.Reflection.AssemblyDescription("System.Text.RegularExpressions")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Text.RegularExpressions")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.23123.00")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.23123.00 built by: PROJECTKREL")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata("", "")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Text.RegularExpressions
-{
-    public partial class Capture
-    {
-        internal Capture() { }
-
-        public int Index { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public string Value { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class CaptureCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        internal CaptureCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public Capture this[int i] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
-    }
-
-    public partial class Group : Capture
-    {
-        internal Group() { }
-
-        public CaptureCollection Captures { get { throw null; } }
-
-        public bool Success { get { throw null; } }
-    }
-
-    public partial class GroupCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        internal GroupCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public Group this[int groupnum] { get { throw null; } }
-
-        public Group this[string groupname] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
-    }
-
-    public partial class Match : Group
-    {
-        internal Match() { }
-
-        public static Match Empty { get { throw null; } }
-
-        public virtual GroupCollection Groups { get { throw null; } }
-
-        public Match NextMatch() { throw null; }
-
-        public virtual string Result(string replacement) { throw null; }
-    }
-
-    public partial class MatchCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        internal MatchCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public virtual Match this[int i] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
-    }
-
-    public delegate string MatchEvaluator(Match match);
-    public partial class Regex
-    {
-        public static readonly TimeSpan InfiniteMatchTimeout;
-        protected Regex() { }
-
-        public Regex(string pattern, RegexOptions options, TimeSpan matchTimeout) { }
-
-        public Regex(string pattern, RegexOptions options) { }
-
-        public Regex(string pattern) { }
-
-        public static int CacheSize { get { throw null; } set { } }
-
-        public TimeSpan MatchTimeout { get { throw null; } }
-
-        public RegexOptions Options { get { throw null; } }
-
-        public bool RightToLeft { get { throw null; } }
-
-        public static string Escape(string str) { throw null; }
-
-        public string[] GetGroupNames() { throw null; }
-
-        public int[] GetGroupNumbers() { throw null; }
-
-        public string GroupNameFromNumber(int i) { throw null; }
-
-        public int GroupNumberFromName(string name) { throw null; }
-
-        public bool IsMatch(string input, int startat) { throw null; }
-
-        public static bool IsMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static bool IsMatch(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static bool IsMatch(string input, string pattern) { throw null; }
-
-        public bool IsMatch(string input) { throw null; }
-
-        public Match Match(string input, int beginning, int length) { throw null; }
-
-        public Match Match(string input, int startat) { throw null; }
-
-        public static Match Match(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static Match Match(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static Match Match(string input, string pattern) { throw null; }
-
-        public Match Match(string input) { throw null; }
-
-        public MatchCollection Matches(string input, int startat) { throw null; }
-
-        public static MatchCollection Matches(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static MatchCollection Matches(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static MatchCollection Matches(string input, string pattern) { throw null; }
-
-        public MatchCollection Matches(string input) { throw null; }
-
-        public string Replace(string input, string replacement, int count, int startat) { throw null; }
-
-        public string Replace(string input, string replacement, int count) { throw null; }
-
-        public static string Replace(string input, string pattern, string replacement, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static string Replace(string input, string pattern, string replacement, RegexOptions options) { throw null; }
-
-        public static string Replace(string input, string pattern, string replacement) { throw null; }
-
-        public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options) { throw null; }
-
-        public static string Replace(string input, string pattern, MatchEvaluator evaluator) { throw null; }
-
-        public string Replace(string input, string replacement) { throw null; }
-
-        public string Replace(string input, MatchEvaluator evaluator, int count, int startat) { throw null; }
-
-        public string Replace(string input, MatchEvaluator evaluator, int count) { throw null; }
-
-        public string Replace(string input, MatchEvaluator evaluator) { throw null; }
-
-        public string[] Split(string input, int count, int startat) { throw null; }
-
-        public string[] Split(string input, int count) { throw null; }
-
-        public static string[] Split(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static string[] Split(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static string[] Split(string input, string pattern) { throw null; }
-
-        public string[] Split(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static string Unescape(string str) { throw null; }
-    }
-
-    public partial class RegexMatchTimeoutException : TimeoutException
-    {
-        public RegexMatchTimeoutException() { }
-
-        public RegexMatchTimeoutException(string message, Exception inner) { }
-
-        public RegexMatchTimeoutException(string regexInput, string regexPattern, TimeSpan matchTimeout) { }
-
-        public RegexMatchTimeoutException(string message) { }
-
-        public string Input { get { throw null; } }
-
-        public TimeSpan MatchTimeout { get { throw null; } }
-
-        public string Pattern { get { throw null; } }
-    }
-
-    [Flags]
-    public enum RegexOptions
-    {
-        None = 0,
-        IgnoreCase = 1,
-        Multiline = 2,
-        ExplicitCapture = 4,
-        Compiled = 8,
-        Singleline = 16,
-        IgnorePatternWhitespace = 32,
-        RightToLeft = 64,
-        ECMAScript = 256,
-        CultureInvariant = 512
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netstandard1.6/System.Text.RegularExpressions.cs b/src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netstandard1.6/System.Text.RegularExpressions.cs
deleted file mode 100644
index 22c97fa4..00000000
--- a/src/referencePackages/src/system.text.regularexpressions/4.3.0/ref/netstandard1.6/System.Text.RegularExpressions.cs
+++ /dev/null
@@ -1,330 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Text.RegularExpressions")]
-[assembly: System.Reflection.AssemblyDescription("System.Text.RegularExpressions")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Text.RegularExpressions")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Text.RegularExpressions
-{
-    public partial class Capture
-    {
-        internal Capture() { }
-
-        public int Index { get { throw null; } }
-
-        public int Length { get { throw null; } }
-
-        public string Value { get { throw null; } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class CaptureCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        internal CaptureCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public Capture this[int i] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
-    }
-
-    public partial class Group : Capture
-    {
-        internal Group() { }
-
-        public CaptureCollection Captures { get { throw null; } }
-
-        public bool Success { get { throw null; } }
-    }
-
-    public partial class GroupCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        internal GroupCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public Group this[int groupnum] { get { throw null; } }
-
-        public Group this[string groupname] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
-    }
-
-    public partial class Match : Group
-    {
-        internal Match() { }
-
-        public static Match Empty { get { throw null; } }
-
-        public virtual GroupCollection Groups { get { throw null; } }
-
-        public Match NextMatch() { throw null; }
-
-        public virtual string Result(string replacement) { throw null; }
-    }
-
-    public partial class MatchCollection : Collections.ICollection, Collections.IEnumerable
-    {
-        internal MatchCollection() { }
-
-        public int Count { get { throw null; } }
-
-        public virtual Match this[int i] { get { throw null; } }
-
-        bool Collections.ICollection.IsSynchronized { get { throw null; } }
-
-        object Collections.ICollection.SyncRoot { get { throw null; } }
-
-        public Collections.IEnumerator GetEnumerator() { throw null; }
-
-        void Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
-    }
-
-    public delegate string MatchEvaluator(Match match);
-    public partial class Regex
-    {
-        protected internal int capsize;
-        protected internal string[] capslist;
-        protected internal RegexRunnerFactory factory;
-        public static readonly TimeSpan InfiniteMatchTimeout;
-        protected internal TimeSpan internalMatchTimeout;
-        protected internal string pattern;
-        protected internal RegexOptions roptions;
-        protected Regex() { }
-
-        public Regex(string pattern, RegexOptions options, TimeSpan matchTimeout) { }
-
-        public Regex(string pattern, RegexOptions options) { }
-
-        public Regex(string pattern) { }
-
-        public static int CacheSize { get { throw null; } set { } }
-
-        protected Collections.IDictionary CapNames { get { throw null; } set { } }
-
-        protected Collections.IDictionary Caps { get { throw null; } set { } }
-
-        public TimeSpan MatchTimeout { get { throw null; } }
-
-        public RegexOptions Options { get { throw null; } }
-
-        public bool RightToLeft { get { throw null; } }
-
-        public static string Escape(string str) { throw null; }
-
-        public string[] GetGroupNames() { throw null; }
-
-        public int[] GetGroupNumbers() { throw null; }
-
-        public string GroupNameFromNumber(int i) { throw null; }
-
-        public int GroupNumberFromName(string name) { throw null; }
-
-        protected void InitializeReferences() { }
-
-        public bool IsMatch(string input, int startat) { throw null; }
-
-        public static bool IsMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static bool IsMatch(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static bool IsMatch(string input, string pattern) { throw null; }
-
-        public bool IsMatch(string input) { throw null; }
-
-        public Match Match(string input, int beginning, int length) { throw null; }
-
-        public Match Match(string input, int startat) { throw null; }
-
-        public static Match Match(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static Match Match(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static Match Match(string input, string pattern) { throw null; }
-
-        public Match Match(string input) { throw null; }
-
-        public MatchCollection Matches(string input, int startat) { throw null; }
-
-        public static MatchCollection Matches(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static MatchCollection Matches(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static MatchCollection Matches(string input, string pattern) { throw null; }
-
-        public MatchCollection Matches(string input) { throw null; }
-
-        public string Replace(string input, string replacement, int count, int startat) { throw null; }
-
-        public string Replace(string input, string replacement, int count) { throw null; }
-
-        public static string Replace(string input, string pattern, string replacement, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static string Replace(string input, string pattern, string replacement, RegexOptions options) { throw null; }
-
-        public static string Replace(string input, string pattern, string replacement) { throw null; }
-
-        public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options) { throw null; }
-
-        public static string Replace(string input, string pattern, MatchEvaluator evaluator) { throw null; }
-
-        public string Replace(string input, string replacement) { throw null; }
-
-        public string Replace(string input, MatchEvaluator evaluator, int count, int startat) { throw null; }
-
-        public string Replace(string input, MatchEvaluator evaluator, int count) { throw null; }
-
-        public string Replace(string input, MatchEvaluator evaluator) { throw null; }
-
-        public string[] Split(string input, int count, int startat) { throw null; }
-
-        public string[] Split(string input, int count) { throw null; }
-
-        public static string[] Split(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { throw null; }
-
-        public static string[] Split(string input, string pattern, RegexOptions options) { throw null; }
-
-        public static string[] Split(string input, string pattern) { throw null; }
-
-        public string[] Split(string input) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static string Unescape(string str) { throw null; }
-
-        protected internal static void ValidateMatchTimeout(TimeSpan matchTimeout) { }
-    }
-
-    public partial class RegexMatchTimeoutException : TimeoutException
-    {
-        public RegexMatchTimeoutException() { }
-
-        public RegexMatchTimeoutException(string message, Exception inner) { }
-
-        public RegexMatchTimeoutException(string regexInput, string regexPattern, TimeSpan matchTimeout) { }
-
-        public RegexMatchTimeoutException(string message) { }
-
-        public string Input { get { throw null; } }
-
-        public TimeSpan MatchTimeout { get { throw null; } }
-
-        public string Pattern { get { throw null; } }
-    }
-
-    [Flags]
-    public enum RegexOptions
-    {
-        None = 0,
-        IgnoreCase = 1,
-        Multiline = 2,
-        ExplicitCapture = 4,
-        Compiled = 8,
-        Singleline = 16,
-        IgnorePatternWhitespace = 32,
-        RightToLeft = 64,
-        ECMAScript = 256,
-        CultureInvariant = 512
-    }
-
-    public abstract partial class RegexRunner
-    {
-        protected internal int[] runcrawl;
-        protected internal int runcrawlpos;
-        protected internal Match runmatch;
-        protected internal Regex runregex;
-        protected internal int[] runstack;
-        protected internal int runstackpos;
-        protected internal string runtext;
-        protected internal int runtextbeg;
-        protected internal int runtextend;
-        protected internal int runtextpos;
-        protected internal int runtextstart;
-        protected internal int[] runtrack;
-        protected internal int runtrackcount;
-        protected internal int runtrackpos;
-        protected internal RegexRunner() { }
-
-        protected void Capture(int capnum, int start, int end) { }
-
-        protected static bool CharInClass(char ch, string charClass) { throw null; }
-
-        protected static bool CharInSet(char ch, string set, string category) { throw null; }
-
-        protected void CheckTimeout() { }
-
-        protected void Crawl(int i) { }
-
-        protected int Crawlpos() { throw null; }
-
-        protected void DoubleCrawl() { }
-
-        protected void DoubleStack() { }
-
-        protected void DoubleTrack() { }
-
-        protected void EnsureStorage() { }
-
-        protected abstract bool FindFirstChar();
-        protected abstract void Go();
-        protected abstract void InitTrackCount();
-        protected bool IsBoundary(int index, int startpos, int endpos) { throw null; }
-
-        protected bool IsECMABoundary(int index, int startpos, int endpos) { throw null; }
-
-        protected bool IsMatched(int cap) { throw null; }
-
-        protected int MatchIndex(int cap) { throw null; }
-
-        protected int MatchLength(int cap) { throw null; }
-
-        protected int Popcrawl() { throw null; }
-
-        protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick, TimeSpan timeout) { throw null; }
-
-        protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick) { throw null; }
-
-        protected void TransferCapture(int capnum, int uncapnum, int start, int end) { }
-
-        protected void Uncapture() { }
-    }
-
-    public abstract partial class RegexRunnerFactory
-    {
-        protected internal abstract RegexRunner CreateInstance();
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.text.regularexpressions/4.3.0/system.text.regularexpressions.nuspec b/src/referencePackages/src/system.text.regularexpressions/4.3.0/system.text.regularexpressions.nuspec
deleted file mode 100644
index 1fd9a473..00000000
--- a/src/referencePackages/src/system.text.regularexpressions/4.3.0/system.text.regularexpressions.nuspec
+++ /dev/null
@@ -1,47 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Text.RegularExpressions</id>
-    <version>4.3.0</version>
-    <title>System.Text.RegularExpressions</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides the System.Text.RegularExpressions.Regex class, an implementation of a regular expression engine.
-
-Commonly Used Types:
-System.Text.RegularExpressions.Regex
-System.Text.RegularExpressions.RegexOptions
-System.Text.RegularExpressions.Match
-System.Text.RegularExpressions.Group
-System.Text.RegularExpressions.Capture
-System.Text.RegularExpressions.MatchEvaluator
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETCoreApp1.1">
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.6">
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Globalization" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Threading" version="4.3.0" exclude="Compile" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.threading.tasks.extensions/4.3.0/System.Threading.Tasks.Extensions.4.3.0.csproj b/src/referencePackages/src/system.threading.tasks.extensions/4.3.0/System.Threading.Tasks.Extensions.4.3.0.csproj
deleted file mode 100644
index c28b0458..00000000
--- a/src/referencePackages/src/system.threading.tasks.extensions/4.3.0/System.Threading.Tasks.Extensions.4.3.0.csproj
+++ /dev/null
@@ -1,15 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0</TargetFrameworks>
-    <AssemblyName>System.Threading.Tasks.Extensions</AssemblyName>
-    <StrongNameKeyId>Open</StrongNameKeyId>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.threading.tasks.extensions/4.3.0/lib/netstandard1.0/System.Threading.Tasks.Extensions.cs b/src/referencePackages/src/system.threading.tasks.extensions/4.3.0/lib/netstandard1.0/System.Threading.Tasks.Extensions.cs
deleted file mode 100644
index c4eab01e..00000000
--- a/src/referencePackages/src/system.threading.tasks.extensions/4.3.0/lib/netstandard1.0/System.Threading.Tasks.Extensions.cs
+++ /dev/null
@@ -1,135 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Reflection.AssemblyTitle("System.Threading.Tasks.Extensions")]
-[assembly: System.Reflection.AssemblyDescription("System.Threading.Tasks.Extensions")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Threading.Tasks.Extensions")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.24705.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.24705.01. Commit Hash: 4d1af962ca0fede10beb01d197367c2f90e92c97")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Runtime.CompilerServices
-{
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false, AllowMultiple = false)]
-    public sealed partial class AsyncMethodBuilderAttribute : Attribute
-    {
-        public AsyncMethodBuilderAttribute(Type builderType) { }
-
-        public Type BuilderType { get { throw null; } }
-    }
-
-    public partial struct AsyncValueTaskMethodBuilder<TResult>
-    {
-        private AsyncTaskMethodBuilder<TResult> _methodBuilder;
-        private TResult _result;
-        private int _dummyPrimitive;
-        public Threading.Tasks.ValueTask<TResult> Task { get { throw null; } }
-
-        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public static AsyncValueTaskMethodBuilder<TResult> Create() { throw null; }
-
-        public void SetException(Exception exception) { }
-
-        public void SetResult(TResult result) { }
-
-        public void SetStateMachine(IAsyncStateMachine stateMachine) { }
-
-        public void Start<TStateMachine>(ref TStateMachine stateMachine)
-            where TStateMachine : IAsyncStateMachine { }
-    }
-
-    public partial struct ConfiguredValueTaskAwaitable<TResult>
-    {
-        private Threading.Tasks.ValueTask<TResult> _value;
-        private int _dummyPrimitive;
-        public ConfiguredValueTaskAwaiter GetAwaiter() { throw null; }
-
-        public partial struct ConfiguredValueTaskAwaiter : ICriticalNotifyCompletion, INotifyCompletion
-        {
-            private Threading.Tasks.ValueTask<TResult> _value;
-            private int _dummyPrimitive;
-            public bool IsCompleted { get { throw null; } }
-
-            public TResult GetResult() { throw null; }
-
-            public void OnCompleted(Action continuation) { }
-
-            public void UnsafeOnCompleted(Action continuation) { }
-        }
-    }
-
-    public partial struct ValueTaskAwaiter<TResult> : ICriticalNotifyCompletion, INotifyCompletion
-    {
-        private Threading.Tasks.ValueTask<TResult> _value;
-        public bool IsCompleted { get { throw null; } }
-
-        public TResult GetResult() { throw null; }
-
-        public void OnCompleted(Action continuation) { }
-
-        public void UnsafeOnCompleted(Action continuation) { }
-    }
-}
-
-namespace System.Threading.Tasks
-{
-    [Runtime.CompilerServices.AsyncMethodBuilder(typeof(Runtime.CompilerServices.AsyncValueTaskMethodBuilder<>))]
-    public partial struct ValueTask<TResult> : IEquatable<ValueTask<TResult>>
-    {
-        private Task<TResult> _task;
-        private TResult _result;
-        private object _dummy;
-        private int _dummyPrimitive;
-        public ValueTask(TResult result) { }
-
-        public ValueTask(Task<TResult> task) { }
-
-        public bool IsCanceled { get { throw null; } }
-
-        public bool IsCompleted { get { throw null; } }
-
-        public bool IsCompletedSuccessfully { get { throw null; } }
-
-        public bool IsFaulted { get { throw null; } }
-
-        public TResult Result { get { throw null; } }
-
-        public Task<TResult> AsTask() { throw null; }
-
-        public Runtime.CompilerServices.ConfiguredValueTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext) { throw null; }
-
-        public static Runtime.CompilerServices.AsyncValueTaskMethodBuilder<TResult> CreateAsyncMethodBuilder() { throw null; }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(ValueTask<TResult> other) { throw null; }
-
-        public Runtime.CompilerServices.ValueTaskAwaiter<TResult> GetAwaiter() { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(ValueTask<TResult> left, ValueTask<TResult> right) { throw null; }
-
-        public static bool operator !=(ValueTask<TResult> left, ValueTask<TResult> right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.threading.tasks.extensions/4.3.0/system.threading.tasks.extensions.nuspec b/src/referencePackages/src/system.threading.tasks.extensions/4.3.0/system.threading.tasks.extensions.nuspec
deleted file mode 100644
index cd7d46e1..00000000
--- a/src/referencePackages/src/system.threading.tasks.extensions/4.3.0/system.threading.tasks.extensions.nuspec
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.8.6">
-    <id>System.Threading.Tasks.Extensions</id>
-    <version>4.3.0</version>
-    <title>System.Threading.Tasks.Extensions</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides additional types that simplify the work of writing concurrent and asynchronous code.
-
-Commonly Used Types:
-System.Threading.Tasks.ValueTask&lt;TResult&gt;</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Collections" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.threading.tasks.extensions/4.5.4/System.Threading.Tasks.Extensions.4.5.4.csproj b/src/referencePackages/src/system.threading.tasks.extensions/4.5.4/System.Threading.Tasks.Extensions.4.5.4.csproj
index 42835f3b..f8d24bd7 100644
--- a/src/referencePackages/src/system.threading.tasks.extensions/4.5.4/System.Threading.Tasks.Extensions.4.5.4.csproj
+++ b/src/referencePackages/src/system.threading.tasks.extensions/4.5.4/System.Threading.Tasks.Extensions.4.5.4.csproj
@@ -1,18 +1,11 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard2.0</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
     <AssemblyName>System.Threading.Tasks.Extensions</AssemblyName>
     <StrongNameKeyId>Open</StrongNameKeyId>
   </PropertyGroup>
 
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.CompilerServices.Unsafe" Version="4.5.3" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
   <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
     <PackageReference Include="System.Runtime.CompilerServices.Unsafe" Version="4.5.3" />
   </ItemGroup>
diff --git a/src/referencePackages/src/system.threading.tasks.extensions/4.5.4/lib/netstandard1.0/System.Threading.Tasks.Extensions.cs b/src/referencePackages/src/system.threading.tasks.extensions/4.5.4/lib/netstandard1.0/System.Threading.Tasks.Extensions.cs
deleted file mode 100644
index 9a71d356..00000000
--- a/src/referencePackages/src/system.threading.tasks.extensions/4.5.4/lib/netstandard1.0/System.Threading.Tasks.Extensions.cs
+++ /dev/null
@@ -1,266 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Reflection.AssemblyTitle("System.Threading.Tasks.Extensions")]
-[assembly: System.Reflection.AssemblyDescription("System.Threading.Tasks.Extensions")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Threading.Tasks.Extensions")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.28619.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.28619.01 @BuiltBy: dlab14-DDVSOWINAGE069 @Branch: release/2.1 @SrcCode: https://github.com/dotnet/corefx/tree/7601f4f6225089ffb291dc7d58293c7bbf5c5d4f")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyMetadata("PreferInbox", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.2.0.1")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Runtime.CompilerServices
-{
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false, AllowMultiple = false)]
-    public sealed partial class AsyncMethodBuilderAttribute : Attribute
-    {
-        public AsyncMethodBuilderAttribute(Type builderType) { }
-
-        public Type BuilderType { get { throw null; } }
-    }
-
-    public partial struct AsyncValueTaskMethodBuilder
-    {
-        private int _dummyPrimitive;
-        public Threading.Tasks.ValueTask Task { get { throw null; } }
-
-        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public static AsyncValueTaskMethodBuilder Create() { throw null; }
-
-        public void SetException(Exception exception) { }
-
-        public void SetResult() { }
-
-        public void SetStateMachine(IAsyncStateMachine stateMachine) { }
-
-        public void Start<TStateMachine>(ref TStateMachine stateMachine)
-            where TStateMachine : IAsyncStateMachine { }
-    }
-
-    public partial struct AsyncValueTaskMethodBuilder<TResult>
-    {
-        private AsyncTaskMethodBuilder<TResult> _methodBuilder;
-        private TResult _result;
-        private int _dummyPrimitive;
-        public Threading.Tasks.ValueTask<TResult> Task { get { throw null; } }
-
-        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public static AsyncValueTaskMethodBuilder<TResult> Create() { throw null; }
-
-        public void SetException(Exception exception) { }
-
-        public void SetResult(TResult result) { }
-
-        public void SetStateMachine(IAsyncStateMachine stateMachine) { }
-
-        public void Start<TStateMachine>(ref TStateMachine stateMachine)
-            where TStateMachine : IAsyncStateMachine { }
-    }
-
-    public readonly partial struct ConfiguredValueTaskAwaitable
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public readonly ConfiguredValueTaskAwaiter GetAwaiter() { throw null; }
-
-        public readonly partial struct ConfiguredValueTaskAwaiter : ICriticalNotifyCompletion, INotifyCompletion
-        {
-            private readonly object _dummy;
-            private readonly int _dummyPrimitive;
-            public bool IsCompleted { get { throw null; } }
-
-            public readonly void GetResult() { }
-
-            public readonly void OnCompleted(Action continuation) { }
-
-            public readonly void UnsafeOnCompleted(Action continuation) { }
-        }
-    }
-
-    public readonly partial struct ConfiguredValueTaskAwaitable<TResult>
-    {
-        private readonly Threading.Tasks.ValueTask<TResult> _value;
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public readonly ConfiguredValueTaskAwaiter GetAwaiter() { throw null; }
-
-        public readonly partial struct ConfiguredValueTaskAwaiter : ICriticalNotifyCompletion, INotifyCompletion
-        {
-            private readonly Threading.Tasks.ValueTask<TResult> _value;
-            private readonly object _dummy;
-            private readonly int _dummyPrimitive;
-            public bool IsCompleted { get { throw null; } }
-
-            public readonly TResult GetResult() { throw null; }
-
-            public readonly void OnCompleted(Action continuation) { }
-
-            public readonly void UnsafeOnCompleted(Action continuation) { }
-        }
-    }
-
-    public readonly partial struct ValueTaskAwaiter : ICriticalNotifyCompletion, INotifyCompletion
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public bool IsCompleted { get { throw null; } }
-
-        public readonly void GetResult() { }
-
-        public readonly void OnCompleted(Action continuation) { }
-
-        public readonly void UnsafeOnCompleted(Action continuation) { }
-    }
-
-    public readonly partial struct ValueTaskAwaiter<TResult> : ICriticalNotifyCompletion, INotifyCompletion
-    {
-        private readonly Threading.Tasks.ValueTask<TResult> _value;
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public bool IsCompleted { get { throw null; } }
-
-        public readonly TResult GetResult() { throw null; }
-
-        public readonly void OnCompleted(Action continuation) { }
-
-        public readonly void UnsafeOnCompleted(Action continuation) { }
-    }
-}
-
-namespace System.Threading.Tasks
-{
-    [Runtime.CompilerServices.AsyncMethodBuilder(typeof(Runtime.CompilerServices.AsyncValueTaskMethodBuilder))]
-    public readonly partial struct ValueTask : IEquatable<ValueTask>
-    {
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public ValueTask(Sources.IValueTaskSource source, short token) { }
-
-        public ValueTask(Task task) { }
-
-        public bool IsCanceled { get { throw null; } }
-
-        public bool IsCompleted { get { throw null; } }
-
-        public bool IsCompletedSuccessfully { get { throw null; } }
-
-        public bool IsFaulted { get { throw null; } }
-
-        public readonly Task AsTask() { throw null; }
-
-        public readonly Runtime.CompilerServices.ConfiguredValueTaskAwaitable ConfigureAwait(bool continueOnCapturedContext) { throw null; }
-
-        public override readonly bool Equals(object obj) { throw null; }
-
-        public readonly bool Equals(ValueTask other) { throw null; }
-
-        public readonly Runtime.CompilerServices.ValueTaskAwaiter GetAwaiter() { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(ValueTask left, ValueTask right) { throw null; }
-
-        public static bool operator !=(ValueTask left, ValueTask right) { throw null; }
-
-        public readonly ValueTask Preserve() { throw null; }
-    }
-
-    [Runtime.CompilerServices.AsyncMethodBuilder(typeof(Runtime.CompilerServices.AsyncValueTaskMethodBuilder<>))]
-    public readonly partial struct ValueTask<TResult> : IEquatable<ValueTask<TResult>>
-    {
-        private readonly TResult _result;
-        private readonly object _dummy;
-        private readonly int _dummyPrimitive;
-        public ValueTask(TResult result) { }
-
-        public ValueTask(Sources.IValueTaskSource<TResult> source, short token) { }
-
-        public ValueTask(Task<TResult> task) { }
-
-        public bool IsCanceled { get { throw null; } }
-
-        public bool IsCompleted { get { throw null; } }
-
-        public bool IsCompletedSuccessfully { get { throw null; } }
-
-        public bool IsFaulted { get { throw null; } }
-
-        public TResult Result { get { throw null; } }
-
-        public readonly Task<TResult> AsTask() { throw null; }
-
-        public readonly Runtime.CompilerServices.ConfiguredValueTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext) { throw null; }
-
-        public override readonly bool Equals(object obj) { throw null; }
-
-        public readonly bool Equals(ValueTask<TResult> other) { throw null; }
-
-        public readonly Runtime.CompilerServices.ValueTaskAwaiter<TResult> GetAwaiter() { throw null; }
-
-        public override readonly int GetHashCode() { throw null; }
-
-        public static bool operator ==(ValueTask<TResult> left, ValueTask<TResult> right) { throw null; }
-
-        public static bool operator !=(ValueTask<TResult> left, ValueTask<TResult> right) { throw null; }
-
-        public readonly ValueTask<TResult> Preserve() { throw null; }
-
-        public override readonly string ToString() { throw null; }
-    }
-}
-
-namespace System.Threading.Tasks.Sources
-{
-    public partial interface IValueTaskSource
-    {
-        void GetResult(short token);
-        ValueTaskSourceStatus GetStatus(short token);
-        void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags);
-    }
-
-    public partial interface IValueTaskSource<out TResult>
-    {
-        TResult GetResult(short token);
-        ValueTaskSourceStatus GetStatus(short token);
-        void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags);
-    }
-
-    [Flags]
-    public enum ValueTaskSourceOnCompletedFlags
-    {
-        None = 0,
-        UseSchedulingContext = 1,
-        FlowExecutionContext = 2
-    }
-
-    public enum ValueTaskSourceStatus
-    {
-        Pending = 0,
-        Succeeded = 1,
-        Faulted = 2,
-        Canceled = 3
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.threading.tasks.extensions/4.5.4/system.threading.tasks.extensions.nuspec b/src/referencePackages/src/system.threading.tasks.extensions/4.5.4/system.threading.tasks.extensions.nuspec
index 021478ba..67e0e317 100644
--- a/src/referencePackages/src/system.threading.tasks.extensions/4.5.4/system.threading.tasks.extensions.nuspec
+++ b/src/referencePackages/src/system.threading.tasks.extensions/4.5.4/system.threading.tasks.extensions.nuspec
@@ -20,12 +20,6 @@ System.Threading.Tasks.ValueTask&lt;TResult&gt;
     <copyright>© Microsoft Corporation. All rights reserved.</copyright>
     <serviceable>true</serviceable>
     <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Collections" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.CompilerServices.Unsafe" version="4.5.3" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
       <group targetFramework=".NETStandard2.0">
         <dependency id="System.Runtime.CompilerServices.Unsafe" version="4.5.3" />
       </group>
diff --git a/src/referencePackages/src/system.threading.tasks/4.3.0/System.Threading.Tasks.4.3.0.csproj b/src/referencePackages/src/system.threading.tasks/4.3.0/System.Threading.Tasks.4.3.0.csproj
deleted file mode 100644
index 8d8d3d54..00000000
--- a/src/referencePackages/src/system.threading.tasks/4.3.0/System.Threading.Tasks.4.3.0.csproj
+++ /dev/null
@@ -1,20 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Threading.Tasks</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.threading.tasks/4.3.0/ref/netstandard1.0/System.Threading.Tasks.cs b/src/referencePackages/src/system.threading.tasks/4.3.0/ref/netstandard1.0/System.Threading.Tasks.cs
deleted file mode 100644
index 573831a3..00000000
--- a/src/referencePackages/src/system.threading.tasks/4.3.0/ref/netstandard1.0/System.Threading.Tasks.cs
+++ /dev/null
@@ -1,946 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Reflection.AssemblyTitle("System.Threading.Tasks.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.Threading.Tasks.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Threading.Tasks.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public partial class AggregateException : Exception
-    {
-        public AggregateException() { }
-
-        public AggregateException(Collections.Generic.IEnumerable<Exception> innerExceptions) { }
-
-        public AggregateException(params Exception[] innerExceptions) { }
-
-        public AggregateException(string message, Collections.Generic.IEnumerable<Exception> innerExceptions) { }
-
-        public AggregateException(string message, Exception innerException) { }
-
-        public AggregateException(string message, params Exception[] innerExceptions) { }
-
-        public AggregateException(string message) { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Exception> InnerExceptions { get { throw null; } }
-
-        public AggregateException Flatten() { throw null; }
-
-        public override Exception GetBaseException() { throw null; }
-
-        public void Handle(Func<Exception, bool> predicate) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class OperationCanceledException : Exception
-    {
-        public OperationCanceledException() { }
-
-        public OperationCanceledException(string message, Exception innerException, Threading.CancellationToken token) { }
-
-        public OperationCanceledException(string message, Exception innerException) { }
-
-        public OperationCanceledException(string message, Threading.CancellationToken token) { }
-
-        public OperationCanceledException(string message) { }
-
-        public OperationCanceledException(Threading.CancellationToken token) { }
-
-        public Threading.CancellationToken CancellationToken { get { throw null; } }
-    }
-}
-
-namespace System.Runtime.CompilerServices
-{
-    public partial struct AsyncTaskMethodBuilder
-    {
-        public Threading.Tasks.Task Task { get { throw null; } }
-
-        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public static AsyncTaskMethodBuilder Create() { throw null; }
-
-        public void SetException(Exception exception) { }
-
-        public void SetResult() { }
-
-        public void SetStateMachine(IAsyncStateMachine stateMachine) { }
-
-        public void Start<TStateMachine>(ref TStateMachine stateMachine)
-            where TStateMachine : IAsyncStateMachine { }
-    }
-
-    public partial struct AsyncTaskMethodBuilder<TResult>
-    {
-        public Threading.Tasks.Task<TResult> Task { get { throw null; } }
-
-        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public static AsyncTaskMethodBuilder<TResult> Create() { throw null; }
-
-        public void SetException(Exception exception) { }
-
-        public void SetResult(TResult result) { }
-
-        public void SetStateMachine(IAsyncStateMachine stateMachine) { }
-
-        public void Start<TStateMachine>(ref TStateMachine stateMachine)
-            where TStateMachine : IAsyncStateMachine { }
-    }
-
-    public partial struct AsyncVoidMethodBuilder
-    {
-        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public static AsyncVoidMethodBuilder Create() { throw null; }
-
-        public void SetException(Exception exception) { }
-
-        public void SetResult() { }
-
-        public void SetStateMachine(IAsyncStateMachine stateMachine) { }
-
-        public void Start<TStateMachine>(ref TStateMachine stateMachine)
-            where TStateMachine : IAsyncStateMachine { }
-    }
-
-    public partial struct ConfiguredTaskAwaitable
-    {
-        public ConfiguredTaskAwaiter GetAwaiter() { throw null; }
-
-        public partial struct ConfiguredTaskAwaiter : ICriticalNotifyCompletion, INotifyCompletion
-        {
-            public bool IsCompleted { get { throw null; } }
-
-            public void GetResult() { }
-
-            public void OnCompleted(Action continuation) { }
-
-            public void UnsafeOnCompleted(Action continuation) { }
-        }
-    }
-
-    public partial struct ConfiguredTaskAwaitable<TResult>
-    {
-        public ConfiguredTaskAwaiter GetAwaiter() { throw null; }
-
-        public partial struct ConfiguredTaskAwaiter : ICriticalNotifyCompletion, INotifyCompletion
-        {
-            public bool IsCompleted { get { throw null; } }
-
-            public TResult GetResult() { throw null; }
-
-            public void OnCompleted(Action continuation) { }
-
-            public void UnsafeOnCompleted(Action continuation) { }
-        }
-    }
-
-    public partial interface IAsyncStateMachine
-    {
-        void MoveNext();
-        void SetStateMachine(IAsyncStateMachine stateMachine);
-    }
-
-    public partial interface ICriticalNotifyCompletion : INotifyCompletion
-    {
-        void UnsafeOnCompleted(Action continuation);
-    }
-
-    public partial interface INotifyCompletion
-    {
-        void OnCompleted(Action continuation);
-    }
-
-    public partial struct TaskAwaiter : ICriticalNotifyCompletion, INotifyCompletion
-    {
-        public bool IsCompleted { get { throw null; } }
-
-        public void GetResult() { }
-
-        public void OnCompleted(Action continuation) { }
-
-        public void UnsafeOnCompleted(Action continuation) { }
-    }
-
-    public partial struct TaskAwaiter<TResult> : ICriticalNotifyCompletion, INotifyCompletion
-    {
-        public bool IsCompleted { get { throw null; } }
-
-        public TResult GetResult() { throw null; }
-
-        public void OnCompleted(Action continuation) { }
-
-        public void UnsafeOnCompleted(Action continuation) { }
-    }
-
-    public partial struct YieldAwaitable
-    {
-        public YieldAwaiter GetAwaiter() { throw null; }
-
-        public partial struct YieldAwaiter : ICriticalNotifyCompletion, INotifyCompletion
-        {
-            public bool IsCompleted { get { throw null; } }
-
-            public void GetResult() { }
-
-            public void OnCompleted(Action continuation) { }
-
-            public void UnsafeOnCompleted(Action continuation) { }
-        }
-    }
-}
-
-namespace System.Threading
-{
-    public partial struct CancellationToken
-    {
-        public CancellationToken(bool canceled) { }
-
-        public bool CanBeCanceled { get { throw null; } }
-
-        public bool IsCancellationRequested { get { throw null; } }
-
-        public static CancellationToken None { get { throw null; } }
-
-        public WaitHandle WaitHandle { get { throw null; } }
-
-        public override bool Equals(object other) { throw null; }
-
-        public bool Equals(CancellationToken other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CancellationToken left, CancellationToken right) { throw null; }
-
-        public static bool operator !=(CancellationToken left, CancellationToken right) { throw null; }
-
-        public CancellationTokenRegistration Register(Action callback, bool useSynchronizationContext) { throw null; }
-
-        public CancellationTokenRegistration Register(Action callback) { throw null; }
-
-        public CancellationTokenRegistration Register(Action<object> callback, object state, bool useSynchronizationContext) { throw null; }
-
-        public CancellationTokenRegistration Register(Action<object> callback, object state) { throw null; }
-
-        public void ThrowIfCancellationRequested() { }
-    }
-
-    public partial struct CancellationTokenRegistration : IDisposable, IEquatable<CancellationTokenRegistration>
-    {
-        public void Dispose() { }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CancellationTokenRegistration other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CancellationTokenRegistration left, CancellationTokenRegistration right) { throw null; }
-
-        public static bool operator !=(CancellationTokenRegistration left, CancellationTokenRegistration right) { throw null; }
-    }
-
-    public partial class CancellationTokenSource : IDisposable
-    {
-        public CancellationTokenSource() { }
-
-        public CancellationTokenSource(int millisecondsDelay) { }
-
-        public CancellationTokenSource(TimeSpan delay) { }
-
-        public bool IsCancellationRequested { get { throw null; } }
-
-        public CancellationToken Token { get { throw null; } }
-
-        public void Cancel() { }
-
-        public void Cancel(bool throwOnFirstException) { }
-
-        public void CancelAfter(int millisecondsDelay) { }
-
-        public void CancelAfter(TimeSpan delay) { }
-
-        public static CancellationTokenSource CreateLinkedTokenSource(CancellationToken token1, CancellationToken token2) { throw null; }
-
-        public static CancellationTokenSource CreateLinkedTokenSource(params CancellationToken[] tokens) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-    }
-}
-
-namespace System.Threading.Tasks
-{
-    public partial class ConcurrentExclusiveSchedulerPair
-    {
-        public ConcurrentExclusiveSchedulerPair() { }
-
-        public ConcurrentExclusiveSchedulerPair(TaskScheduler taskScheduler, int maxConcurrencyLevel, int maxItemsPerTask) { }
-
-        public ConcurrentExclusiveSchedulerPair(TaskScheduler taskScheduler, int maxConcurrencyLevel) { }
-
-        public ConcurrentExclusiveSchedulerPair(TaskScheduler taskScheduler) { }
-
-        public Task Completion { get { throw null; } }
-
-        public TaskScheduler ConcurrentScheduler { get { throw null; } }
-
-        public TaskScheduler ExclusiveScheduler { get { throw null; } }
-
-        public void Complete() { }
-    }
-
-    public partial class Task : IAsyncResult
-    {
-        public Task(Action action, CancellationToken cancellationToken, TaskCreationOptions creationOptions) { }
-
-        public Task(Action action, CancellationToken cancellationToken) { }
-
-        public Task(Action action, TaskCreationOptions creationOptions) { }
-
-        public Task(Action action) { }
-
-        public Task(Action<object> action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions) { }
-
-        public Task(Action<object> action, object state, CancellationToken cancellationToken) { }
-
-        public Task(Action<object> action, object state, TaskCreationOptions creationOptions) { }
-
-        public Task(Action<object> action, object state) { }
-
-        public object AsyncState { get { throw null; } }
-
-        public TaskCreationOptions CreationOptions { get { throw null; } }
-
-        public static int? CurrentId { get { throw null; } }
-
-        public AggregateException Exception { get { throw null; } }
-
-        public static TaskFactory Factory { get { throw null; } }
-
-        public int Id { get { throw null; } }
-
-        public bool IsCanceled { get { throw null; } }
-
-        public bool IsCompleted { get { throw null; } }
-
-        public bool IsFaulted { get { throw null; } }
-
-        public TaskStatus Status { get { throw null; } }
-
-        WaitHandle IAsyncResult.AsyncWaitHandle { get { throw null; } }
-
-        bool IAsyncResult.CompletedSynchronously { get { throw null; } }
-
-        public Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext) { throw null; }
-
-        public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWith(Action<Task, object> continuationAction, object state, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWith(Action<Task, object> continuationAction, object state, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task, object> continuationAction, object state) { throw null; }
-
-        public Task ContinueWith(Action<Task> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task> continuationAction, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWith(Action<Task> continuationAction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWith(Action<Task> continuationAction, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task> continuationAction) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state) { throw null; }
-
-        public static Task Delay(int millisecondsDelay, CancellationToken cancellationToken) { throw null; }
-
-        public static Task Delay(int millisecondsDelay) { throw null; }
-
-        public static Task Delay(TimeSpan delay, CancellationToken cancellationToken) { throw null; }
-
-        public static Task Delay(TimeSpan delay) { throw null; }
-
-        public static Task<TResult> FromResult<TResult>(TResult result) { throw null; }
-
-        public Runtime.CompilerServices.TaskAwaiter GetAwaiter() { throw null; }
-
-        public static Task Run(Action action, CancellationToken cancellationToken) { throw null; }
-
-        public static Task Run(Action action) { throw null; }
-
-        public static Task Run(Func<Task> function, CancellationToken cancellationToken) { throw null; }
-
-        public static Task Run(Func<Task> function) { throw null; }
-
-        public static Task<TResult> Run<TResult>(Func<TResult> function, CancellationToken cancellationToken) { throw null; }
-
-        public static Task<TResult> Run<TResult>(Func<TResult> function) { throw null; }
-
-        public static Task<TResult> Run<TResult>(Func<Task<TResult>> function, CancellationToken cancellationToken) { throw null; }
-
-        public static Task<TResult> Run<TResult>(Func<Task<TResult>> function) { throw null; }
-
-        public void RunSynchronously() { }
-
-        public void RunSynchronously(TaskScheduler scheduler) { }
-
-        public void Start() { }
-
-        public void Start(TaskScheduler scheduler) { }
-
-        public void Wait() { }
-
-        public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool Wait(int millisecondsTimeout) { throw null; }
-
-        public void Wait(CancellationToken cancellationToken) { }
-
-        public bool Wait(TimeSpan timeout) { throw null; }
-
-        public static bool WaitAll(Task[] tasks, int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public static bool WaitAll(Task[] tasks, int millisecondsTimeout) { throw null; }
-
-        public static void WaitAll(Task[] tasks, CancellationToken cancellationToken) { }
-
-        public static bool WaitAll(Task[] tasks, TimeSpan timeout) { throw null; }
-
-        public static void WaitAll(params Task[] tasks) { }
-
-        public static int WaitAny(Task[] tasks, int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public static int WaitAny(Task[] tasks, int millisecondsTimeout) { throw null; }
-
-        public static int WaitAny(Task[] tasks, CancellationToken cancellationToken) { throw null; }
-
-        public static int WaitAny(Task[] tasks, TimeSpan timeout) { throw null; }
-
-        public static int WaitAny(params Task[] tasks) { throw null; }
-
-        public static Task WhenAll(Collections.Generic.IEnumerable<Task> tasks) { throw null; }
-
-        public static Task WhenAll(params Task[] tasks) { throw null; }
-
-        public static Task<TResult[]> WhenAll<TResult>(Collections.Generic.IEnumerable<Task<TResult>> tasks) { throw null; }
-
-        public static Task<TResult[]> WhenAll<TResult>(params Task<TResult>[] tasks) { throw null; }
-
-        public static Task<Task> WhenAny(Collections.Generic.IEnumerable<Task> tasks) { throw null; }
-
-        public static Task<Task> WhenAny(params Task[] tasks) { throw null; }
-
-        public static Task<Task<TResult>> WhenAny<TResult>(Collections.Generic.IEnumerable<Task<TResult>> tasks) { throw null; }
-
-        public static Task<Task<TResult>> WhenAny<TResult>(params Task<TResult>[] tasks) { throw null; }
-
-        public static Runtime.CompilerServices.YieldAwaitable Yield() { throw null; }
-    }
-
-    public partial class TaskCanceledException : OperationCanceledException
-    {
-        public TaskCanceledException() { }
-
-        public TaskCanceledException(string message, Exception innerException) { }
-
-        public TaskCanceledException(string message) { }
-
-        public TaskCanceledException(Task task) { }
-
-        public Task Task { get { throw null; } }
-    }
-
-    public partial class TaskCompletionSource<TResult>
-    {
-        public TaskCompletionSource() { }
-
-        public TaskCompletionSource(object state, TaskCreationOptions creationOptions) { }
-
-        public TaskCompletionSource(object state) { }
-
-        public TaskCompletionSource(TaskCreationOptions creationOptions) { }
-
-        public Task<TResult> Task { get { throw null; } }
-
-        public void SetCanceled() { }
-
-        public void SetException(Collections.Generic.IEnumerable<Exception> exceptions) { }
-
-        public void SetException(Exception exception) { }
-
-        public void SetResult(TResult result) { }
-
-        public bool TrySetCanceled() { throw null; }
-
-        public bool TrySetException(Collections.Generic.IEnumerable<Exception> exceptions) { throw null; }
-
-        public bool TrySetException(Exception exception) { throw null; }
-
-        public bool TrySetResult(TResult result) { throw null; }
-    }
-
-    [Flags]
-    public enum TaskContinuationOptions
-    {
-        None = 0,
-        PreferFairness = 1,
-        LongRunning = 2,
-        AttachedToParent = 4,
-        DenyChildAttach = 8,
-        HideScheduler = 16,
-        LazyCancellation = 32,
-        NotOnRanToCompletion = 65536,
-        NotOnFaulted = 131072,
-        OnlyOnCanceled = 196608,
-        NotOnCanceled = 262144,
-        OnlyOnFaulted = 327680,
-        OnlyOnRanToCompletion = 393216,
-        ExecuteSynchronously = 524288
-    }
-
-    [Flags]
-    public enum TaskCreationOptions
-    {
-        None = 0,
-        PreferFairness = 1,
-        LongRunning = 2,
-        AttachedToParent = 4,
-        DenyChildAttach = 8,
-        HideScheduler = 16
-    }
-
-    public static partial class TaskExtensions
-    {
-        public static Task Unwrap(this Task<Task> task) { throw null; }
-
-        public static Task<TResult> Unwrap<TResult>(this Task<Task<TResult>> task) { throw null; }
-    }
-
-    public partial class TaskFactory
-    {
-        public TaskFactory() { }
-
-        public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { }
-
-        public TaskFactory(CancellationToken cancellationToken) { }
-
-        public TaskFactory(TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions) { }
-
-        public TaskFactory(TaskScheduler scheduler) { }
-
-        public CancellationToken CancellationToken { get { throw null; } }
-
-        public TaskContinuationOptions ContinuationOptions { get { throw null; } }
-
-        public TaskCreationOptions CreationOptions { get { throw null; } }
-
-        public TaskScheduler Scheduler { get { throw null; } }
-
-        public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction) { throw null; }
-
-        public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction) { throw null; }
-
-        public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction) { throw null; }
-
-        public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction) { throw null; }
-
-        public Task FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state) { throw null; }
-
-        public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod) { throw null; }
-
-        public Task FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state) { throw null; }
-
-        public Task<TResult> FromAsync<TResult>(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TResult>(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state) { throw null; }
-
-        public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod) { throw null; }
-
-        public Task FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state) { throw null; }
-
-        public Task FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state) { throw null; }
-
-        public Task StartNew(Action action, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task StartNew(Action action, CancellationToken cancellationToken) { throw null; }
-
-        public Task StartNew(Action action, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task StartNew(Action action) { throw null; }
-
-        public Task StartNew(Action<object> action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task StartNew(Action<object> action, object state, CancellationToken cancellationToken) { throw null; }
-
-        public Task StartNew(Action<object> action, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task StartNew(Action<object> action, object state) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<TResult> function, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<TResult> function, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<TResult> function) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state) { throw null; }
-    }
-
-    public partial class TaskFactory<TResult>
-    {
-        public TaskFactory() { }
-
-        public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { }
-
-        public TaskFactory(CancellationToken cancellationToken) { }
-
-        public TaskFactory(TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions) { }
-
-        public TaskFactory(TaskScheduler scheduler) { }
-
-        public CancellationToken CancellationToken { get { throw null; } }
-
-        public TaskContinuationOptions ContinuationOptions { get { throw null; } }
-
-        public TaskCreationOptions CreationOptions { get { throw null; } }
-
-        public TaskScheduler Scheduler { get { throw null; } }
-
-        public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction) { throw null; }
-
-        public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction) { throw null; }
-
-        public Task<TResult> FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state) { throw null; }
-
-        public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state) { throw null; }
-
-        public Task<TResult> StartNew(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> StartNew(Func<TResult> function, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> StartNew(Func<TResult> function, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> StartNew(Func<TResult> function) { throw null; }
-
-        public Task<TResult> StartNew(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> StartNew(Func<object, TResult> function, object state, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> StartNew(Func<object, TResult> function, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> StartNew(Func<object, TResult> function, object state) { throw null; }
-    }
-
-    public abstract partial class TaskScheduler
-    {
-        public static TaskScheduler Current { get { throw null; } }
-
-        public static TaskScheduler Default { get { throw null; } }
-
-        public int Id { get { throw null; } }
-
-        public virtual int MaximumConcurrencyLevel { get { throw null; } }
-
-        public static event EventHandler<UnobservedTaskExceptionEventArgs> UnobservedTaskException { add { } remove { } }
-
-        public static TaskScheduler FromCurrentSynchronizationContext() { throw null; }
-
-        protected abstract Collections.Generic.IEnumerable<Task> GetScheduledTasks();
-        protected internal abstract void QueueTask(Task task);
-        protected internal virtual bool TryDequeue(Task task) { throw null; }
-
-        protected bool TryExecuteTask(Task task) { throw null; }
-
-        protected abstract bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
-    }
-
-    public partial class TaskSchedulerException : Exception
-    {
-        public TaskSchedulerException() { }
-
-        public TaskSchedulerException(Exception innerException) { }
-
-        public TaskSchedulerException(string message, Exception innerException) { }
-
-        public TaskSchedulerException(string message) { }
-    }
-
-    public enum TaskStatus
-    {
-        Created = 0,
-        WaitingForActivation = 1,
-        WaitingToRun = 2,
-        Running = 3,
-        WaitingForChildrenToComplete = 4,
-        RanToCompletion = 5,
-        Canceled = 6,
-        Faulted = 7
-    }
-
-    public partial class Task<TResult> : Task
-    {
-        public Task(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions) : base(default!) { }
-
-        public Task(Func<TResult> function, CancellationToken cancellationToken) : base(default!) { }
-
-        public Task(Func<TResult> function, TaskCreationOptions creationOptions) : base(default!) { }
-
-        public Task(Func<TResult> function) : base(default!) { }
-
-        public Task(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions) : base(default!) { }
-
-        public Task(Func<object, TResult> function, object state, CancellationToken cancellationToken) : base(default!) { }
-
-        public Task(Func<object, TResult> function, object state, TaskCreationOptions creationOptions) : base(default!) { }
-
-        public Task(Func<object, TResult> function, object state) : base(default!) { }
-
-        public new static TaskFactory<TResult> Factory { get { throw null; } }
-
-        public TResult Result { get { throw null; } }
-
-        public new Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>, object> continuationAction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>, object> continuationAction, object state, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>, object> continuationAction, object state, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>, object> continuationAction, object state, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>, object> continuationAction, object state) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>> continuationAction, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>> continuationAction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>> continuationAction, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>> continuationAction) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult> continuationFunction, TaskScheduler scheduler) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult> continuationFunction) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, object, TNewResult> continuationFunction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, object, TNewResult> continuationFunction, object state, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, object, TNewResult> continuationFunction, object state, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, object, TNewResult> continuationFunction, object state, TaskScheduler scheduler) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, object, TNewResult> continuationFunction, object state) { throw null; }
-
-        public new Runtime.CompilerServices.TaskAwaiter<TResult> GetAwaiter() { throw null; }
-    }
-
-    public partial class UnobservedTaskExceptionEventArgs : EventArgs
-    {
-        public UnobservedTaskExceptionEventArgs(AggregateException exception) { }
-
-        public AggregateException Exception { get { throw null; } }
-
-        public bool Observed { get { throw null; } }
-
-        public void SetObserved() { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.threading.tasks/4.3.0/ref/netstandard1.3/System.Threading.Tasks.cs b/src/referencePackages/src/system.threading.tasks/4.3.0/ref/netstandard1.3/System.Threading.Tasks.cs
deleted file mode 100644
index 671bb04d..00000000
--- a/src/referencePackages/src/system.threading.tasks/4.3.0/ref/netstandard1.3/System.Threading.Tasks.cs
+++ /dev/null
@@ -1,963 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Threading.Tasks")]
-[assembly: System.Reflection.AssemblyDescription("System.Threading.Tasks")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Threading.Tasks")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System
-{
-    public partial class AggregateException : Exception
-    {
-        public AggregateException() { }
-
-        public AggregateException(Collections.Generic.IEnumerable<Exception> innerExceptions) { }
-
-        public AggregateException(params Exception[] innerExceptions) { }
-
-        public AggregateException(string message, Collections.Generic.IEnumerable<Exception> innerExceptions) { }
-
-        public AggregateException(string message, Exception innerException) { }
-
-        public AggregateException(string message, params Exception[] innerExceptions) { }
-
-        public AggregateException(string message) { }
-
-        public Collections.ObjectModel.ReadOnlyCollection<Exception> InnerExceptions { get { throw null; } }
-
-        public AggregateException Flatten() { throw null; }
-
-        public override Exception GetBaseException() { throw null; }
-
-        public void Handle(Func<Exception, bool> predicate) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class OperationCanceledException : Exception
-    {
-        public OperationCanceledException() { }
-
-        public OperationCanceledException(string message, Exception innerException, Threading.CancellationToken token) { }
-
-        public OperationCanceledException(string message, Exception innerException) { }
-
-        public OperationCanceledException(string message, Threading.CancellationToken token) { }
-
-        public OperationCanceledException(string message) { }
-
-        public OperationCanceledException(Threading.CancellationToken token) { }
-
-        public Threading.CancellationToken CancellationToken { get { throw null; } }
-    }
-}
-
-namespace System.Runtime.CompilerServices
-{
-    public partial struct AsyncTaskMethodBuilder
-    {
-        public Threading.Tasks.Task Task { get { throw null; } }
-
-        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public static AsyncTaskMethodBuilder Create() { throw null; }
-
-        public void SetException(Exception exception) { }
-
-        public void SetResult() { }
-
-        public void SetStateMachine(IAsyncStateMachine stateMachine) { }
-
-        public void Start<TStateMachine>(ref TStateMachine stateMachine)
-            where TStateMachine : IAsyncStateMachine { }
-    }
-
-    public partial struct AsyncTaskMethodBuilder<TResult>
-    {
-        public Threading.Tasks.Task<TResult> Task { get { throw null; } }
-
-        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public static AsyncTaskMethodBuilder<TResult> Create() { throw null; }
-
-        public void SetException(Exception exception) { }
-
-        public void SetResult(TResult result) { }
-
-        public void SetStateMachine(IAsyncStateMachine stateMachine) { }
-
-        public void Start<TStateMachine>(ref TStateMachine stateMachine)
-            where TStateMachine : IAsyncStateMachine { }
-    }
-
-    public partial struct AsyncVoidMethodBuilder
-    {
-        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
-            where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine { }
-
-        public static AsyncVoidMethodBuilder Create() { throw null; }
-
-        public void SetException(Exception exception) { }
-
-        public void SetResult() { }
-
-        public void SetStateMachine(IAsyncStateMachine stateMachine) { }
-
-        public void Start<TStateMachine>(ref TStateMachine stateMachine)
-            where TStateMachine : IAsyncStateMachine { }
-    }
-
-    public partial struct ConfiguredTaskAwaitable
-    {
-        public ConfiguredTaskAwaiter GetAwaiter() { throw null; }
-
-        public partial struct ConfiguredTaskAwaiter : ICriticalNotifyCompletion, INotifyCompletion
-        {
-            public bool IsCompleted { get { throw null; } }
-
-            public void GetResult() { }
-
-            public void OnCompleted(Action continuation) { }
-
-            public void UnsafeOnCompleted(Action continuation) { }
-        }
-    }
-
-    public partial struct ConfiguredTaskAwaitable<TResult>
-    {
-        public ConfiguredTaskAwaiter GetAwaiter() { throw null; }
-
-        public partial struct ConfiguredTaskAwaiter : ICriticalNotifyCompletion, INotifyCompletion
-        {
-            public bool IsCompleted { get { throw null; } }
-
-            public TResult GetResult() { throw null; }
-
-            public void OnCompleted(Action continuation) { }
-
-            public void UnsafeOnCompleted(Action continuation) { }
-        }
-    }
-
-    public partial interface IAsyncStateMachine
-    {
-        void MoveNext();
-        void SetStateMachine(IAsyncStateMachine stateMachine);
-    }
-
-    public partial interface ICriticalNotifyCompletion : INotifyCompletion
-    {
-        void UnsafeOnCompleted(Action continuation);
-    }
-
-    public partial interface INotifyCompletion
-    {
-        void OnCompleted(Action continuation);
-    }
-
-    public partial struct TaskAwaiter : ICriticalNotifyCompletion, INotifyCompletion
-    {
-        public bool IsCompleted { get { throw null; } }
-
-        public void GetResult() { }
-
-        public void OnCompleted(Action continuation) { }
-
-        public void UnsafeOnCompleted(Action continuation) { }
-    }
-
-    public partial struct TaskAwaiter<TResult> : ICriticalNotifyCompletion, INotifyCompletion
-    {
-        public bool IsCompleted { get { throw null; } }
-
-        public TResult GetResult() { throw null; }
-
-        public void OnCompleted(Action continuation) { }
-
-        public void UnsafeOnCompleted(Action continuation) { }
-    }
-
-    public partial struct YieldAwaitable
-    {
-        public YieldAwaiter GetAwaiter() { throw null; }
-
-        public partial struct YieldAwaiter : ICriticalNotifyCompletion, INotifyCompletion
-        {
-            public bool IsCompleted { get { throw null; } }
-
-            public void GetResult() { }
-
-            public void OnCompleted(Action continuation) { }
-
-            public void UnsafeOnCompleted(Action continuation) { }
-        }
-    }
-}
-
-namespace System.Threading
-{
-    public partial struct CancellationToken
-    {
-        public CancellationToken(bool canceled) { }
-
-        public bool CanBeCanceled { get { throw null; } }
-
-        public bool IsCancellationRequested { get { throw null; } }
-
-        public static CancellationToken None { get { throw null; } }
-
-        public WaitHandle WaitHandle { get { throw null; } }
-
-        public override bool Equals(object other) { throw null; }
-
-        public bool Equals(CancellationToken other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CancellationToken left, CancellationToken right) { throw null; }
-
-        public static bool operator !=(CancellationToken left, CancellationToken right) { throw null; }
-
-        public CancellationTokenRegistration Register(Action callback, bool useSynchronizationContext) { throw null; }
-
-        public CancellationTokenRegistration Register(Action callback) { throw null; }
-
-        public CancellationTokenRegistration Register(Action<object> callback, object state, bool useSynchronizationContext) { throw null; }
-
-        public CancellationTokenRegistration Register(Action<object> callback, object state) { throw null; }
-
-        public void ThrowIfCancellationRequested() { }
-    }
-
-    public partial struct CancellationTokenRegistration : IDisposable, IEquatable<CancellationTokenRegistration>
-    {
-        public void Dispose() { }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public bool Equals(CancellationTokenRegistration other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(CancellationTokenRegistration left, CancellationTokenRegistration right) { throw null; }
-
-        public static bool operator !=(CancellationTokenRegistration left, CancellationTokenRegistration right) { throw null; }
-    }
-
-    public partial class CancellationTokenSource : IDisposable
-    {
-        public CancellationTokenSource() { }
-
-        public CancellationTokenSource(int millisecondsDelay) { }
-
-        public CancellationTokenSource(TimeSpan delay) { }
-
-        public bool IsCancellationRequested { get { throw null; } }
-
-        public CancellationToken Token { get { throw null; } }
-
-        public void Cancel() { }
-
-        public void Cancel(bool throwOnFirstException) { }
-
-        public void CancelAfter(int millisecondsDelay) { }
-
-        public void CancelAfter(TimeSpan delay) { }
-
-        public static CancellationTokenSource CreateLinkedTokenSource(CancellationToken token1, CancellationToken token2) { throw null; }
-
-        public static CancellationTokenSource CreateLinkedTokenSource(params CancellationToken[] tokens) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-    }
-}
-
-namespace System.Threading.Tasks
-{
-    public partial class ConcurrentExclusiveSchedulerPair
-    {
-        public ConcurrentExclusiveSchedulerPair() { }
-
-        public ConcurrentExclusiveSchedulerPair(TaskScheduler taskScheduler, int maxConcurrencyLevel, int maxItemsPerTask) { }
-
-        public ConcurrentExclusiveSchedulerPair(TaskScheduler taskScheduler, int maxConcurrencyLevel) { }
-
-        public ConcurrentExclusiveSchedulerPair(TaskScheduler taskScheduler) { }
-
-        public Task Completion { get { throw null; } }
-
-        public TaskScheduler ConcurrentScheduler { get { throw null; } }
-
-        public TaskScheduler ExclusiveScheduler { get { throw null; } }
-
-        public void Complete() { }
-    }
-
-    public partial class Task : IAsyncResult
-    {
-        public Task(Action action, CancellationToken cancellationToken, TaskCreationOptions creationOptions) { }
-
-        public Task(Action action, CancellationToken cancellationToken) { }
-
-        public Task(Action action, TaskCreationOptions creationOptions) { }
-
-        public Task(Action action) { }
-
-        public Task(Action<object> action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions) { }
-
-        public Task(Action<object> action, object state, CancellationToken cancellationToken) { }
-
-        public Task(Action<object> action, object state, TaskCreationOptions creationOptions) { }
-
-        public Task(Action<object> action, object state) { }
-
-        public object AsyncState { get { throw null; } }
-
-        public static Task CompletedTask { get { throw null; } }
-
-        public TaskCreationOptions CreationOptions { get { throw null; } }
-
-        public static int? CurrentId { get { throw null; } }
-
-        public AggregateException Exception { get { throw null; } }
-
-        public static TaskFactory Factory { get { throw null; } }
-
-        public int Id { get { throw null; } }
-
-        public bool IsCanceled { get { throw null; } }
-
-        public bool IsCompleted { get { throw null; } }
-
-        public bool IsFaulted { get { throw null; } }
-
-        public TaskStatus Status { get { throw null; } }
-
-        WaitHandle IAsyncResult.AsyncWaitHandle { get { throw null; } }
-
-        bool IAsyncResult.CompletedSynchronously { get { throw null; } }
-
-        public Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext) { throw null; }
-
-        public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWith(Action<Task, object> continuationAction, object state, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWith(Action<Task, object> continuationAction, object state, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task, object> continuationAction, object state) { throw null; }
-
-        public Task ContinueWith(Action<Task> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task> continuationAction, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWith(Action<Task> continuationAction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWith(Action<Task> continuationAction, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task> continuationAction) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state) { throw null; }
-
-        public static Task Delay(int millisecondsDelay, CancellationToken cancellationToken) { throw null; }
-
-        public static Task Delay(int millisecondsDelay) { throw null; }
-
-        public static Task Delay(TimeSpan delay, CancellationToken cancellationToken) { throw null; }
-
-        public static Task Delay(TimeSpan delay) { throw null; }
-
-        public static Task FromCanceled(CancellationToken cancellationToken) { throw null; }
-
-        public static Task<TResult> FromCanceled<TResult>(CancellationToken cancellationToken) { throw null; }
-
-        public static Task FromException(Exception exception) { throw null; }
-
-        public static Task<TResult> FromException<TResult>(Exception exception) { throw null; }
-
-        public static Task<TResult> FromResult<TResult>(TResult result) { throw null; }
-
-        public Runtime.CompilerServices.TaskAwaiter GetAwaiter() { throw null; }
-
-        public static Task Run(Action action, CancellationToken cancellationToken) { throw null; }
-
-        public static Task Run(Action action) { throw null; }
-
-        public static Task Run(Func<Task> function, CancellationToken cancellationToken) { throw null; }
-
-        public static Task Run(Func<Task> function) { throw null; }
-
-        public static Task<TResult> Run<TResult>(Func<TResult> function, CancellationToken cancellationToken) { throw null; }
-
-        public static Task<TResult> Run<TResult>(Func<TResult> function) { throw null; }
-
-        public static Task<TResult> Run<TResult>(Func<Task<TResult>> function, CancellationToken cancellationToken) { throw null; }
-
-        public static Task<TResult> Run<TResult>(Func<Task<TResult>> function) { throw null; }
-
-        public void RunSynchronously() { }
-
-        public void RunSynchronously(TaskScheduler scheduler) { }
-
-        public void Start() { }
-
-        public void Start(TaskScheduler scheduler) { }
-
-        public void Wait() { }
-
-        public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool Wait(int millisecondsTimeout) { throw null; }
-
-        public void Wait(CancellationToken cancellationToken) { }
-
-        public bool Wait(TimeSpan timeout) { throw null; }
-
-        public static bool WaitAll(Task[] tasks, int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public static bool WaitAll(Task[] tasks, int millisecondsTimeout) { throw null; }
-
-        public static void WaitAll(Task[] tasks, CancellationToken cancellationToken) { }
-
-        public static bool WaitAll(Task[] tasks, TimeSpan timeout) { throw null; }
-
-        public static void WaitAll(params Task[] tasks) { }
-
-        public static int WaitAny(Task[] tasks, int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public static int WaitAny(Task[] tasks, int millisecondsTimeout) { throw null; }
-
-        public static int WaitAny(Task[] tasks, CancellationToken cancellationToken) { throw null; }
-
-        public static int WaitAny(Task[] tasks, TimeSpan timeout) { throw null; }
-
-        public static int WaitAny(params Task[] tasks) { throw null; }
-
-        public static Task WhenAll(Collections.Generic.IEnumerable<Task> tasks) { throw null; }
-
-        public static Task WhenAll(params Task[] tasks) { throw null; }
-
-        public static Task<TResult[]> WhenAll<TResult>(Collections.Generic.IEnumerable<Task<TResult>> tasks) { throw null; }
-
-        public static Task<TResult[]> WhenAll<TResult>(params Task<TResult>[] tasks) { throw null; }
-
-        public static Task<Task> WhenAny(Collections.Generic.IEnumerable<Task> tasks) { throw null; }
-
-        public static Task<Task> WhenAny(params Task[] tasks) { throw null; }
-
-        public static Task<Task<TResult>> WhenAny<TResult>(Collections.Generic.IEnumerable<Task<TResult>> tasks) { throw null; }
-
-        public static Task<Task<TResult>> WhenAny<TResult>(params Task<TResult>[] tasks) { throw null; }
-
-        public static Runtime.CompilerServices.YieldAwaitable Yield() { throw null; }
-    }
-
-    public partial class TaskCanceledException : OperationCanceledException
-    {
-        public TaskCanceledException() { }
-
-        public TaskCanceledException(string message, Exception innerException) { }
-
-        public TaskCanceledException(string message) { }
-
-        public TaskCanceledException(Task task) { }
-
-        public Task Task { get { throw null; } }
-    }
-
-    public partial class TaskCompletionSource<TResult>
-    {
-        public TaskCompletionSource() { }
-
-        public TaskCompletionSource(object state, TaskCreationOptions creationOptions) { }
-
-        public TaskCompletionSource(object state) { }
-
-        public TaskCompletionSource(TaskCreationOptions creationOptions) { }
-
-        public Task<TResult> Task { get { throw null; } }
-
-        public void SetCanceled() { }
-
-        public void SetException(Collections.Generic.IEnumerable<Exception> exceptions) { }
-
-        public void SetException(Exception exception) { }
-
-        public void SetResult(TResult result) { }
-
-        public bool TrySetCanceled() { throw null; }
-
-        public bool TrySetCanceled(CancellationToken cancellationToken) { throw null; }
-
-        public bool TrySetException(Collections.Generic.IEnumerable<Exception> exceptions) { throw null; }
-
-        public bool TrySetException(Exception exception) { throw null; }
-
-        public bool TrySetResult(TResult result) { throw null; }
-    }
-
-    [Flags]
-    public enum TaskContinuationOptions
-    {
-        None = 0,
-        PreferFairness = 1,
-        LongRunning = 2,
-        AttachedToParent = 4,
-        DenyChildAttach = 8,
-        HideScheduler = 16,
-        LazyCancellation = 32,
-        RunContinuationsAsynchronously = 64,
-        NotOnRanToCompletion = 65536,
-        NotOnFaulted = 131072,
-        OnlyOnCanceled = 196608,
-        NotOnCanceled = 262144,
-        OnlyOnFaulted = 327680,
-        OnlyOnRanToCompletion = 393216,
-        ExecuteSynchronously = 524288
-    }
-
-    [Flags]
-    public enum TaskCreationOptions
-    {
-        None = 0,
-        PreferFairness = 1,
-        LongRunning = 2,
-        AttachedToParent = 4,
-        DenyChildAttach = 8,
-        HideScheduler = 16,
-        RunContinuationsAsynchronously = 64
-    }
-
-    public static partial class TaskExtensions
-    {
-        public static Task Unwrap(this Task<Task> task) { throw null; }
-
-        public static Task<TResult> Unwrap<TResult>(this Task<Task<TResult>> task) { throw null; }
-    }
-
-    public partial class TaskFactory
-    {
-        public TaskFactory() { }
-
-        public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { }
-
-        public TaskFactory(CancellationToken cancellationToken) { }
-
-        public TaskFactory(TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions) { }
-
-        public TaskFactory(TaskScheduler scheduler) { }
-
-        public CancellationToken CancellationToken { get { throw null; } }
-
-        public TaskContinuationOptions ContinuationOptions { get { throw null; } }
-
-        public TaskCreationOptions CreationOptions { get { throw null; } }
-
-        public TaskScheduler Scheduler { get { throw null; } }
-
-        public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction) { throw null; }
-
-        public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction) { throw null; }
-
-        public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction) { throw null; }
-
-        public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction) { throw null; }
-
-        public Task FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state) { throw null; }
-
-        public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod) { throw null; }
-
-        public Task FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state) { throw null; }
-
-        public Task<TResult> FromAsync<TResult>(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TResult>(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state) { throw null; }
-
-        public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod) { throw null; }
-
-        public Task FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state) { throw null; }
-
-        public Task FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state) { throw null; }
-
-        public Task StartNew(Action action, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task StartNew(Action action, CancellationToken cancellationToken) { throw null; }
-
-        public Task StartNew(Action action, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task StartNew(Action action) { throw null; }
-
-        public Task StartNew(Action<object> action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task StartNew(Action<object> action, object state, CancellationToken cancellationToken) { throw null; }
-
-        public Task StartNew(Action<object> action, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task StartNew(Action<object> action, object state) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<TResult> function, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<TResult> function, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<TResult> function) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state) { throw null; }
-    }
-
-    public partial class TaskFactory<TResult>
-    {
-        public TaskFactory() { }
-
-        public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { }
-
-        public TaskFactory(CancellationToken cancellationToken) { }
-
-        public TaskFactory(TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions) { }
-
-        public TaskFactory(TaskScheduler scheduler) { }
-
-        public CancellationToken CancellationToken { get { throw null; } }
-
-        public TaskContinuationOptions ContinuationOptions { get { throw null; } }
-
-        public TaskCreationOptions CreationOptions { get { throw null; } }
-
-        public TaskScheduler Scheduler { get { throw null; } }
-
-        public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction) { throw null; }
-
-        public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction) { throw null; }
-
-        public Task<TResult> FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state) { throw null; }
-
-        public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state) { throw null; }
-
-        public Task<TResult> StartNew(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> StartNew(Func<TResult> function, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> StartNew(Func<TResult> function, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> StartNew(Func<TResult> function) { throw null; }
-
-        public Task<TResult> StartNew(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TResult> StartNew(Func<object, TResult> function, object state, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TResult> StartNew(Func<object, TResult> function, object state, TaskCreationOptions creationOptions) { throw null; }
-
-        public Task<TResult> StartNew(Func<object, TResult> function, object state) { throw null; }
-    }
-
-    public abstract partial class TaskScheduler
-    {
-        public static TaskScheduler Current { get { throw null; } }
-
-        public static TaskScheduler Default { get { throw null; } }
-
-        public int Id { get { throw null; } }
-
-        public virtual int MaximumConcurrencyLevel { get { throw null; } }
-
-        public static event EventHandler<UnobservedTaskExceptionEventArgs> UnobservedTaskException { add { } remove { } }
-
-        public static TaskScheduler FromCurrentSynchronizationContext() { throw null; }
-
-        protected abstract Collections.Generic.IEnumerable<Task> GetScheduledTasks();
-        protected internal abstract void QueueTask(Task task);
-        protected internal virtual bool TryDequeue(Task task) { throw null; }
-
-        protected bool TryExecuteTask(Task task) { throw null; }
-
-        protected abstract bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
-    }
-
-    public partial class TaskSchedulerException : Exception
-    {
-        public TaskSchedulerException() { }
-
-        public TaskSchedulerException(Exception innerException) { }
-
-        public TaskSchedulerException(string message, Exception innerException) { }
-
-        public TaskSchedulerException(string message) { }
-    }
-
-    public enum TaskStatus
-    {
-        Created = 0,
-        WaitingForActivation = 1,
-        WaitingToRun = 2,
-        Running = 3,
-        WaitingForChildrenToComplete = 4,
-        RanToCompletion = 5,
-        Canceled = 6,
-        Faulted = 7
-    }
-
-    public partial class Task<TResult> : Task
-    {
-        public Task(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions) : base(default!) { }
-
-        public Task(Func<TResult> function, CancellationToken cancellationToken) : base(default!) { }
-
-        public Task(Func<TResult> function, TaskCreationOptions creationOptions) : base(default!) { }
-
-        public Task(Func<TResult> function) : base(default!) { }
-
-        public Task(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions) : base(default!) { }
-
-        public Task(Func<object, TResult> function, object state, CancellationToken cancellationToken) : base(default!) { }
-
-        public Task(Func<object, TResult> function, object state, TaskCreationOptions creationOptions) : base(default!) { }
-
-        public Task(Func<object, TResult> function, object state) : base(default!) { }
-
-        public new static TaskFactory<TResult> Factory { get { throw null; } }
-
-        public TResult Result { get { throw null; } }
-
-        public new Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>, object> continuationAction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>, object> continuationAction, object state, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>, object> continuationAction, object state, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>, object> continuationAction, object state, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>, object> continuationAction, object state) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>> continuationAction, CancellationToken cancellationToken) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>> continuationAction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>> continuationAction, TaskScheduler scheduler) { throw null; }
-
-        public Task ContinueWith(Action<Task<TResult>> continuationAction) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult> continuationFunction, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult> continuationFunction, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult> continuationFunction, TaskScheduler scheduler) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, TNewResult> continuationFunction) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, object, TNewResult> continuationFunction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, object, TNewResult> continuationFunction, object state, CancellationToken cancellationToken) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, object, TNewResult> continuationFunction, object state, TaskContinuationOptions continuationOptions) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, object, TNewResult> continuationFunction, object state, TaskScheduler scheduler) { throw null; }
-
-        public Task<TNewResult> ContinueWith<TNewResult>(Func<Task<TResult>, object, TNewResult> continuationFunction, object state) { throw null; }
-
-        public new Runtime.CompilerServices.TaskAwaiter<TResult> GetAwaiter() { throw null; }
-    }
-
-    public partial class UnobservedTaskExceptionEventArgs : EventArgs
-    {
-        public UnobservedTaskExceptionEventArgs(AggregateException exception) { }
-
-        public AggregateException Exception { get { throw null; } }
-
-        public bool Observed { get { throw null; } }
-
-        public void SetObserved() { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.threading.tasks/4.3.0/system.threading.tasks.nuspec b/src/referencePackages/src/system.threading.tasks/4.3.0/system.threading.tasks.nuspec
deleted file mode 100644
index 72d4015d..00000000
--- a/src/referencePackages/src/system.threading.tasks/4.3.0/system.threading.tasks.nuspec
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Threading.Tasks</id>
-    <version>4.3.0</version>
-    <title>System.Threading.Tasks</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides types that simplify the work of writing concurrent and asynchronous code.
-
-Commonly Used Types:
-System.Threading.Tasks.Task&lt;TResult&gt;
-System.Runtime.CompilerServices.TaskAwaiter&lt;TResult&gt;
-System.Threading.Tasks.TaskCompletionSource&lt;TResult&gt;
-System.Threading.Tasks.Task
-System.OperationCanceledException
-System.AggregateException
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.threading.thread/4.3.0/System.Threading.Thread.4.3.0.csproj b/src/referencePackages/src/system.threading.thread/4.3.0/System.Threading.Thread.4.3.0.csproj
deleted file mode 100644
index daad184c..00000000
--- a/src/referencePackages/src/system.threading.thread/4.3.0/System.Threading.Thread.4.3.0.csproj
+++ /dev/null
@@ -1,12 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Threading.Thread</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.threading.thread/4.3.0/ref/netstandard1.3/System.Threading.Thread.cs b/src/referencePackages/src/system.threading.thread/4.3.0/ref/netstandard1.3/System.Threading.Thread.cs
deleted file mode 100644
index 9924da17..00000000
--- a/src/referencePackages/src/system.threading.thread/4.3.0/ref/netstandard1.3/System.Threading.Thread.cs
+++ /dev/null
@@ -1,88 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Threading.Thread")]
-[assembly: System.Reflection.AssemblyDescription("System.Threading.Thread")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Threading.Thread")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Threading
-{
-    public delegate void ParameterizedThreadStart(object obj);
-    public sealed partial class Thread
-    {
-        public Thread(ParameterizedThreadStart start) { }
-
-        public Thread(ThreadStart start) { }
-
-        public static Thread CurrentThread { get { throw null; } }
-
-        public bool IsAlive { get { throw null; } }
-
-        public bool IsBackground { get { throw null; } set { } }
-
-        public int ManagedThreadId { get { throw null; } }
-
-        public string Name { get { throw null; } set { } }
-
-        public ThreadState ThreadState { get { throw null; } }
-
-        public void Join() { }
-
-        public bool Join(int millisecondsTimeout) { throw null; }
-
-        public static void Sleep(int millisecondsTimeout) { }
-
-        public static void Sleep(TimeSpan timeout) { }
-
-        public void Start() { }
-
-        public void Start(object parameter) { }
-    }
-
-    public delegate void ThreadStart();
-    public sealed partial class ThreadStartException : Exception
-    {
-        internal ThreadStartException() { }
-    }
-
-    [Flags]
-    public enum ThreadState
-    {
-        Running = 0,
-        StopRequested = 1,
-        SuspendRequested = 2,
-        Background = 4,
-        Unstarted = 8,
-        Stopped = 16,
-        WaitSleepJoin = 32,
-        Suspended = 64,
-        AbortRequested = 128,
-        Aborted = 256
-    }
-
-    public partial class ThreadStateException : Exception
-    {
-        public ThreadStateException() { }
-
-        public ThreadStateException(string message, Exception innerException) { }
-
-        public ThreadStateException(string message) { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.threading.thread/4.3.0/system.threading.thread.nuspec b/src/referencePackages/src/system.threading.thread/4.3.0/system.threading.thread.nuspec
deleted file mode 100644
index 95957438..00000000
--- a/src/referencePackages/src/system.threading.thread/4.3.0/system.threading.thread.nuspec
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Threading.Thread</id>
-    <version>4.3.0</version>
-    <title>System.Threading.Thread</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides the System.Threading.Thread class, which allows developers to create and control a thread, set its priority, and get its state.
-
-Commonly Used Types:
-System.Threading.Thread
-System.Threading.ThreadStart
-System.Threading.ParameterizedThreadStart
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.threading.timer/4.3.0/System.Threading.Timer.4.3.0.csproj b/src/referencePackages/src/system.threading.timer/4.3.0/System.Threading.Timer.4.3.0.csproj
deleted file mode 100644
index b014514f..00000000
--- a/src/referencePackages/src/system.threading.timer/4.3.0/System.Threading.Timer.4.3.0.csproj
+++ /dev/null
@@ -1,14 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.2</TargetFrameworks>
-    <AssemblyName>System.Threading.Timer</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.2'">
-    <PackageReference Include="Microsoft.NETCore.Platforms" Version="1.1.0" />
-    <PackageReference Include="Microsoft.NETCore.Targets" Version="1.1.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.threading.timer/4.3.0/ref/netstandard1.2/System.Threading.Timer.cs b/src/referencePackages/src/system.threading.timer/4.3.0/ref/netstandard1.2/System.Threading.Timer.cs
deleted file mode 100644
index a8c586d1..00000000
--- a/src/referencePackages/src/system.threading.timer/4.3.0/ref/netstandard1.2/System.Threading.Timer.cs
+++ /dev/null
@@ -1,41 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Threading.Timer")]
-[assembly: System.Reflection.AssemblyDescription("System.Threading.Timer")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Threading.Timer")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Threading
-{
-    public sealed partial class Timer : IDisposable
-    {
-        public Timer(TimerCallback callback, object state, int dueTime, int period) { }
-
-        public Timer(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period) { }
-
-        public bool Change(int dueTime, int period) { throw null; }
-
-        public bool Change(TimeSpan dueTime, TimeSpan period) { throw null; }
-
-        public void Dispose() { }
-    }
-
-    public delegate void TimerCallback(object state);
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.threading.timer/4.3.0/system.threading.timer.nuspec b/src/referencePackages/src/system.threading.timer/4.3.0/system.threading.timer.nuspec
deleted file mode 100644
index a7721456..00000000
--- a/src/referencePackages/src/system.threading.timer/4.3.0/system.threading.timer.nuspec
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Threading.Timer</id>
-    <version>4.3.0</version>
-    <title>System.Threading.Timer</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides the System.Threading.Timer class, which is a mechanism for executing a method at specified intervals.
-
-Commonly Used Types:
-System.Threading.Timer
-System.Threading.TimerCallback
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.2">
-        <dependency id="Microsoft.NETCore.Platforms" version="1.1.0" />
-        <dependency id="Microsoft.NETCore.Targets" version="1.1.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.threading/4.3.0/System.Threading.4.3.0.csproj b/src/referencePackages/src/system.threading/4.3.0/System.Threading.4.3.0.csproj
deleted file mode 100644
index 31a87167..00000000
--- a/src/referencePackages/src/system.threading/4.3.0/System.Threading.4.3.0.csproj
+++ /dev/null
@@ -1,18 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Threading</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.threading/4.3.0/ref/netstandard1.0/System.Threading.cs b/src/referencePackages/src/system.threading/4.3.0/ref/netstandard1.0/System.Threading.cs
deleted file mode 100644
index 4962cf10..00000000
--- a/src/referencePackages/src/system.threading/4.3.0/ref/netstandard1.0/System.Threading.cs
+++ /dev/null
@@ -1,627 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Reflection.AssemblyDescription("System.Threading.dll")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Threading.dll")]
-[assembly: System.Reflection.AssemblyTitle("System.Threading.dll")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Threading
-{
-    public partial class AbandonedMutexException : Exception
-    {
-        public AbandonedMutexException() { }
-
-        public AbandonedMutexException(int location, WaitHandle handle) { }
-
-        public AbandonedMutexException(string message, Exception inner, int location, WaitHandle handle) { }
-
-        public AbandonedMutexException(string message, Exception inner) { }
-
-        public AbandonedMutexException(string message, int location, WaitHandle handle) { }
-
-        public AbandonedMutexException(string message) { }
-
-        public Mutex Mutex { get { throw null; } }
-
-        public int MutexIndex { get { throw null; } }
-    }
-
-    public sealed partial class AutoResetEvent : EventWaitHandle
-    {
-        public AutoResetEvent(bool initialState) : base(default, default) { }
-    }
-
-    public partial class Barrier : IDisposable
-    {
-        public Barrier(int participantCount, Action<Barrier> postPhaseAction) { }
-
-        public Barrier(int participantCount) { }
-
-        public long CurrentPhaseNumber { get { throw null; } }
-
-        public int ParticipantCount { get { throw null; } }
-
-        public int ParticipantsRemaining { get { throw null; } }
-
-        public long AddParticipant() { throw null; }
-
-        public long AddParticipants(int participantCount) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public void RemoveParticipant() { }
-
-        public void RemoveParticipants(int participantCount) { }
-
-        public void SignalAndWait() { }
-
-        public bool SignalAndWait(int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool SignalAndWait(int millisecondsTimeout) { throw null; }
-
-        public void SignalAndWait(CancellationToken cancellationToken) { }
-
-        public bool SignalAndWait(TimeSpan timeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool SignalAndWait(TimeSpan timeout) { throw null; }
-    }
-
-    public partial class BarrierPostPhaseException : Exception
-    {
-        public BarrierPostPhaseException() { }
-
-        public BarrierPostPhaseException(Exception innerException) { }
-
-        public BarrierPostPhaseException(string message, Exception innerException) { }
-
-        public BarrierPostPhaseException(string message) { }
-    }
-
-    public partial class CountdownEvent : IDisposable
-    {
-        public CountdownEvent(int initialCount) { }
-
-        public int CurrentCount { get { throw null; } }
-
-        public int InitialCount { get { throw null; } }
-
-        public bool IsSet { get { throw null; } }
-
-        public WaitHandle WaitHandle { get { throw null; } }
-
-        public void AddCount() { }
-
-        public void AddCount(int signalCount) { }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public void Reset() { }
-
-        public void Reset(int count) { }
-
-        public bool Signal() { throw null; }
-
-        public bool Signal(int signalCount) { throw null; }
-
-        public bool TryAddCount() { throw null; }
-
-        public bool TryAddCount(int signalCount) { throw null; }
-
-        public void Wait() { }
-
-        public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool Wait(int millisecondsTimeout) { throw null; }
-
-        public void Wait(CancellationToken cancellationToken) { }
-
-        public bool Wait(TimeSpan timeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool Wait(TimeSpan timeout) { throw null; }
-    }
-
-    public enum EventResetMode
-    {
-        AutoReset = 0,
-        ManualReset = 1
-    }
-
-    public partial class EventWaitHandle : WaitHandle
-    {
-        public EventWaitHandle(bool initialState, EventResetMode mode, string name, out bool createdNew) { throw null; }
-
-        public EventWaitHandle(bool initialState, EventResetMode mode, string name) { }
-
-        public EventWaitHandle(bool initialState, EventResetMode mode) { }
-
-        public static EventWaitHandle OpenExisting(string name) { throw null; }
-
-        public bool Reset() { throw null; }
-
-        public bool Set() { throw null; }
-
-        public static bool TryOpenExisting(string name, out EventWaitHandle result) { throw null; }
-    }
-
-    public static partial class Interlocked
-    {
-        public static int Add(ref int location1, int value) { throw null; }
-
-        public static long Add(ref long location1, long value) { throw null; }
-
-        public static double CompareExchange(ref double location1, double value, double comparand) { throw null; }
-
-        public static int CompareExchange(ref int location1, int value, int comparand) { throw null; }
-
-        public static long CompareExchange(ref long location1, long value, long comparand) { throw null; }
-
-        public static IntPtr CompareExchange(ref IntPtr location1, IntPtr value, IntPtr comparand) { throw null; }
-
-        public static object CompareExchange(ref object location1, object value, object comparand) { throw null; }
-
-        public static float CompareExchange(ref float location1, float value, float comparand) { throw null; }
-
-        public static T CompareExchange<T>(ref T location1, T value, T comparand)
-            where T : class { throw null; }
-
-        public static int Decrement(ref int location) { throw null; }
-
-        public static long Decrement(ref long location) { throw null; }
-
-        public static double Exchange(ref double location1, double value) { throw null; }
-
-        public static int Exchange(ref int location1, int value) { throw null; }
-
-        public static long Exchange(ref long location1, long value) { throw null; }
-
-        public static IntPtr Exchange(ref IntPtr location1, IntPtr value) { throw null; }
-
-        public static object Exchange(ref object location1, object value) { throw null; }
-
-        public static float Exchange(ref float location1, float value) { throw null; }
-
-        public static T Exchange<T>(ref T location1, T value)
-            where T : class { throw null; }
-
-        public static int Increment(ref int location) { throw null; }
-
-        public static long Increment(ref long location) { throw null; }
-
-        public static void MemoryBarrier() { }
-
-        public static long Read(ref long location) { throw null; }
-    }
-
-    public static partial class LazyInitializer
-    {
-        public static T EnsureInitialized<T>(ref T target, ref bool initialized, ref object syncLock, Func<T> valueFactory) { throw null; }
-
-        public static T EnsureInitialized<T>(ref T target, ref bool initialized, ref object syncLock) { throw null; }
-
-        public static T EnsureInitialized<T>(ref T target, Func<T> valueFactory)
-            where T : class { throw null; }
-
-        public static T EnsureInitialized<T>(ref T target)
-            where T : class { throw null; }
-    }
-
-    public partial class LockRecursionException : Exception
-    {
-        public LockRecursionException() { }
-
-        public LockRecursionException(string message, Exception innerException) { }
-
-        public LockRecursionException(string message) { }
-    }
-
-    public enum LockRecursionPolicy
-    {
-        NoRecursion = 0,
-        SupportsRecursion = 1
-    }
-
-    public sealed partial class ManualResetEvent : EventWaitHandle
-    {
-        public ManualResetEvent(bool initialState) : base(default, default) { }
-    }
-
-    public partial class ManualResetEventSlim : IDisposable
-    {
-        public ManualResetEventSlim() { }
-
-        public ManualResetEventSlim(bool initialState, int spinCount) { }
-
-        public ManualResetEventSlim(bool initialState) { }
-
-        public bool IsSet { get { throw null; } }
-
-        public int SpinCount { get { throw null; } }
-
-        public WaitHandle WaitHandle { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public void Reset() { }
-
-        public void Set() { }
-
-        public void Wait() { }
-
-        public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool Wait(int millisecondsTimeout) { throw null; }
-
-        public void Wait(CancellationToken cancellationToken) { }
-
-        public bool Wait(TimeSpan timeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool Wait(TimeSpan timeout) { throw null; }
-    }
-
-    public static partial class Monitor
-    {
-        public static void Enter(object obj, ref bool lockTaken) { }
-
-        public static void Enter(object obj) { }
-
-        public static void Exit(object obj) { }
-
-        public static bool IsEntered(object obj) { throw null; }
-
-        public static void Pulse(object obj) { }
-
-        public static void PulseAll(object obj) { }
-
-        public static void TryEnter(object obj, ref bool lockTaken) { }
-
-        public static void TryEnter(object obj, int millisecondsTimeout, ref bool lockTaken) { }
-
-        public static bool TryEnter(object obj, int millisecondsTimeout) { throw null; }
-
-        public static void TryEnter(object obj, TimeSpan timeout, ref bool lockTaken) { }
-
-        public static bool TryEnter(object obj, TimeSpan timeout) { throw null; }
-
-        public static bool TryEnter(object obj) { throw null; }
-
-        public static bool Wait(object obj, int millisecondsTimeout) { throw null; }
-
-        public static bool Wait(object obj, TimeSpan timeout) { throw null; }
-
-        public static bool Wait(object obj) { throw null; }
-    }
-
-    public sealed partial class Mutex : WaitHandle
-    {
-        public Mutex() { }
-
-        public Mutex(bool initiallyOwned, string name, out bool createdNew) { throw null; }
-
-        public Mutex(bool initiallyOwned, string name) { }
-
-        public Mutex(bool initiallyOwned) { }
-
-        public static Mutex OpenExisting(string name) { throw null; }
-
-        public void ReleaseMutex() { }
-
-        public static bool TryOpenExisting(string name, out Mutex result) { throw null; }
-    }
-
-    public partial class ReaderWriterLockSlim : IDisposable
-    {
-        public ReaderWriterLockSlim() { }
-
-        public ReaderWriterLockSlim(LockRecursionPolicy recursionPolicy) { }
-
-        public int CurrentReadCount { get { throw null; } }
-
-        public bool IsReadLockHeld { get { throw null; } }
-
-        public bool IsUpgradeableReadLockHeld { get { throw null; } }
-
-        public bool IsWriteLockHeld { get { throw null; } }
-
-        public LockRecursionPolicy RecursionPolicy { get { throw null; } }
-
-        public int RecursiveReadCount { get { throw null; } }
-
-        public int RecursiveUpgradeCount { get { throw null; } }
-
-        public int RecursiveWriteCount { get { throw null; } }
-
-        public int WaitingReadCount { get { throw null; } }
-
-        public int WaitingUpgradeCount { get { throw null; } }
-
-        public int WaitingWriteCount { get { throw null; } }
-
-        public void Dispose() { }
-
-        public void EnterReadLock() { }
-
-        public void EnterUpgradeableReadLock() { }
-
-        public void EnterWriteLock() { }
-
-        public void ExitReadLock() { }
-
-        public void ExitUpgradeableReadLock() { }
-
-        public void ExitWriteLock() { }
-
-        public bool TryEnterReadLock(int millisecondsTimeout) { throw null; }
-
-        public bool TryEnterReadLock(TimeSpan timeout) { throw null; }
-
-        public bool TryEnterUpgradeableReadLock(int millisecondsTimeout) { throw null; }
-
-        public bool TryEnterUpgradeableReadLock(TimeSpan timeout) { throw null; }
-
-        public bool TryEnterWriteLock(int millisecondsTimeout) { throw null; }
-
-        public bool TryEnterWriteLock(TimeSpan timeout) { throw null; }
-    }
-
-    public sealed partial class Semaphore : WaitHandle
-    {
-        public Semaphore(int initialCount, int maximumCount, string name, out bool createdNew) { throw null; }
-
-        public Semaphore(int initialCount, int maximumCount, string name) { }
-
-        public Semaphore(int initialCount, int maximumCount) { }
-
-        public static Semaphore OpenExisting(string name) { throw null; }
-
-        public int Release() { throw null; }
-
-        public int Release(int releaseCount) { throw null; }
-
-        public static bool TryOpenExisting(string name, out Semaphore result) { throw null; }
-    }
-
-    public partial class SemaphoreFullException : Exception
-    {
-        public SemaphoreFullException() { }
-
-        public SemaphoreFullException(string message, Exception innerException) { }
-
-        public SemaphoreFullException(string message) { }
-    }
-
-    public partial class SemaphoreSlim : IDisposable
-    {
-        public SemaphoreSlim(int initialCount, int maxCount) { }
-
-        public SemaphoreSlim(int initialCount) { }
-
-        public WaitHandle AvailableWaitHandle { get { throw null; } }
-
-        public int CurrentCount { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public int Release() { throw null; }
-
-        public int Release(int releaseCount) { throw null; }
-
-        public void Wait() { }
-
-        public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool Wait(int millisecondsTimeout) { throw null; }
-
-        public void Wait(CancellationToken cancellationToken) { }
-
-        public bool Wait(TimeSpan timeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool Wait(TimeSpan timeout) { throw null; }
-
-        public Tasks.Task WaitAsync() { throw null; }
-
-        public Tasks.Task<bool> WaitAsync(int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public Tasks.Task<bool> WaitAsync(int millisecondsTimeout) { throw null; }
-
-        public Tasks.Task WaitAsync(CancellationToken cancellationToken) { throw null; }
-
-        public Tasks.Task<bool> WaitAsync(TimeSpan timeout, CancellationToken cancellationToken) { throw null; }
-
-        public Tasks.Task<bool> WaitAsync(TimeSpan timeout) { throw null; }
-    }
-
-    public delegate void SendOrPostCallback(object state);
-    public partial struct SpinLock
-    {
-        public SpinLock(bool enableThreadOwnerTracking) { }
-
-        public bool IsHeld { get { throw null; } }
-
-        public bool IsHeldByCurrentThread { get { throw null; } }
-
-        public bool IsThreadOwnerTrackingEnabled { get { throw null; } }
-
-        public void Enter(ref bool lockTaken) { }
-
-        public void Exit() { }
-
-        public void Exit(bool useMemoryBarrier) { }
-
-        public void TryEnter(ref bool lockTaken) { }
-
-        public void TryEnter(int millisecondsTimeout, ref bool lockTaken) { }
-
-        public void TryEnter(TimeSpan timeout, ref bool lockTaken) { }
-    }
-
-    public partial struct SpinWait
-    {
-        public int Count { get { throw null; } }
-
-        public bool NextSpinWillYield { get { throw null; } }
-
-        public void Reset() { }
-
-        public void SpinOnce() { }
-
-        public static bool SpinUntil(Func<bool> condition, int millisecondsTimeout) { throw null; }
-
-        public static bool SpinUntil(Func<bool> condition, TimeSpan timeout) { throw null; }
-
-        public static void SpinUntil(Func<bool> condition) { }
-    }
-
-    public partial class SynchronizationContext
-    {
-        public static SynchronizationContext Current { get { throw null; } }
-
-        public virtual SynchronizationContext CreateCopy() { throw null; }
-
-        public virtual void OperationCompleted() { }
-
-        public virtual void OperationStarted() { }
-
-        public virtual void Post(SendOrPostCallback d, object state) { }
-
-        public virtual void Send(SendOrPostCallback d, object state) { }
-
-        public static void SetSynchronizationContext(SynchronizationContext syncContext) { }
-    }
-
-    public partial class SynchronizationLockException : Exception
-    {
-        public SynchronizationLockException() { }
-
-        public SynchronizationLockException(string message, Exception innerException) { }
-
-        public SynchronizationLockException(string message) { }
-    }
-
-    public partial class ThreadLocal<T> : IDisposable
-    {
-        public ThreadLocal() { }
-
-        public ThreadLocal(bool trackAllValues) { }
-
-        public ThreadLocal(Func<T> valueFactory, bool trackAllValues) { }
-
-        public ThreadLocal(Func<T> valueFactory) { }
-
-        public bool IsValueCreated { get { throw null; } }
-
-        public T Value { get { throw null; } set { } }
-
-        public Collections.Generic.IList<T> Values { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        ~ThreadLocal() {
-        }
-
-        public override string ToString() { throw null; }
-    }
-
-    public static partial class Volatile
-    {
-        public static bool Read(ref bool location) { throw null; }
-
-        public static byte Read(ref byte location) { throw null; }
-
-        public static double Read(ref double location) { throw null; }
-
-        public static short Read(ref short location) { throw null; }
-
-        public static int Read(ref int location) { throw null; }
-
-        public static long Read(ref long location) { throw null; }
-
-        public static IntPtr Read(ref IntPtr location) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte Read(ref sbyte location) { throw null; }
-
-        public static float Read(ref float location) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort Read(ref ushort location) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint Read(ref uint location) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong Read(ref ulong location) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UIntPtr Read(ref UIntPtr location) { throw null; }
-
-        public static T Read<T>(ref T location)
-            where T : class { throw null; }
-
-        public static void Write(ref bool location, bool value) { }
-
-        public static void Write(ref byte location, byte value) { }
-
-        public static void Write(ref double location, double value) { }
-
-        public static void Write(ref short location, short value) { }
-
-        public static void Write(ref int location, int value) { }
-
-        public static void Write(ref long location, long value) { }
-
-        public static void Write(ref IntPtr location, IntPtr value) { }
-
-        [CLSCompliant(false)]
-        public static void Write(ref sbyte location, sbyte value) { }
-
-        public static void Write(ref float location, float value) { }
-
-        [CLSCompliant(false)]
-        public static void Write(ref ushort location, ushort value) { }
-
-        [CLSCompliant(false)]
-        public static void Write(ref uint location, uint value) { }
-
-        [CLSCompliant(false)]
-        public static void Write(ref ulong location, ulong value) { }
-
-        [CLSCompliant(false)]
-        public static void Write(ref UIntPtr location, UIntPtr value) { }
-
-        public static void Write<T>(ref T location, T value)
-            where T : class { }
-    }
-
-    public partial class WaitHandleCannotBeOpenedException : Exception
-    {
-        public WaitHandleCannotBeOpenedException() { }
-
-        public WaitHandleCannotBeOpenedException(string message, Exception innerException) { }
-
-        public WaitHandleCannotBeOpenedException(string message) { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.threading/4.3.0/ref/netstandard1.3/System.Threading.cs b/src/referencePackages/src/system.threading/4.3.0/ref/netstandard1.3/System.Threading.cs
deleted file mode 100644
index 964052a7..00000000
--- a/src/referencePackages/src/system.threading/4.3.0/ref/netstandard1.3/System.Threading.cs
+++ /dev/null
@@ -1,658 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Threading")]
-[assembly: System.Reflection.AssemblyDescription("System.Threading")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Threading")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Threading
-{
-    public partial class AbandonedMutexException : Exception
-    {
-        public AbandonedMutexException() { }
-
-        public AbandonedMutexException(int location, WaitHandle handle) { }
-
-        public AbandonedMutexException(string message, Exception inner, int location, WaitHandle handle) { }
-
-        public AbandonedMutexException(string message, Exception inner) { }
-
-        public AbandonedMutexException(string message, int location, WaitHandle handle) { }
-
-        public AbandonedMutexException(string message) { }
-
-        public Mutex Mutex { get { throw null; } }
-
-        public int MutexIndex { get { throw null; } }
-    }
-
-    public partial struct AsyncLocalValueChangedArgs<T>
-    {
-        public T CurrentValue { get { throw null; } }
-
-        public T PreviousValue { get { throw null; } }
-
-        public bool ThreadContextChanged { get { throw null; } }
-    }
-
-    public sealed partial class AsyncLocal<T>
-    {
-        public AsyncLocal() { }
-
-        public AsyncLocal(Action<AsyncLocalValueChangedArgs<T>> valueChangedHandler) { }
-
-        public T Value { get { throw null; } set { } }
-    }
-
-    public sealed partial class AutoResetEvent : EventWaitHandle
-    {
-        public AutoResetEvent(bool initialState) : base(default, default) { }
-    }
-
-    public partial class Barrier : IDisposable
-    {
-        public Barrier(int participantCount, Action<Barrier> postPhaseAction) { }
-
-        public Barrier(int participantCount) { }
-
-        public long CurrentPhaseNumber { get { throw null; } }
-
-        public int ParticipantCount { get { throw null; } }
-
-        public int ParticipantsRemaining { get { throw null; } }
-
-        public long AddParticipant() { throw null; }
-
-        public long AddParticipants(int participantCount) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public void RemoveParticipant() { }
-
-        public void RemoveParticipants(int participantCount) { }
-
-        public void SignalAndWait() { }
-
-        public bool SignalAndWait(int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool SignalAndWait(int millisecondsTimeout) { throw null; }
-
-        public void SignalAndWait(CancellationToken cancellationToken) { }
-
-        public bool SignalAndWait(TimeSpan timeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool SignalAndWait(TimeSpan timeout) { throw null; }
-    }
-
-    public partial class BarrierPostPhaseException : Exception
-    {
-        public BarrierPostPhaseException() { }
-
-        public BarrierPostPhaseException(Exception innerException) { }
-
-        public BarrierPostPhaseException(string message, Exception innerException) { }
-
-        public BarrierPostPhaseException(string message) { }
-    }
-
-    public delegate void ContextCallback(object state);
-    public partial class CountdownEvent : IDisposable
-    {
-        public CountdownEvent(int initialCount) { }
-
-        public int CurrentCount { get { throw null; } }
-
-        public int InitialCount { get { throw null; } }
-
-        public bool IsSet { get { throw null; } }
-
-        public WaitHandle WaitHandle { get { throw null; } }
-
-        public void AddCount() { }
-
-        public void AddCount(int signalCount) { }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public void Reset() { }
-
-        public void Reset(int count) { }
-
-        public bool Signal() { throw null; }
-
-        public bool Signal(int signalCount) { throw null; }
-
-        public bool TryAddCount() { throw null; }
-
-        public bool TryAddCount(int signalCount) { throw null; }
-
-        public void Wait() { }
-
-        public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool Wait(int millisecondsTimeout) { throw null; }
-
-        public void Wait(CancellationToken cancellationToken) { }
-
-        public bool Wait(TimeSpan timeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool Wait(TimeSpan timeout) { throw null; }
-    }
-
-    public enum EventResetMode
-    {
-        AutoReset = 0,
-        ManualReset = 1
-    }
-
-    public partial class EventWaitHandle : WaitHandle
-    {
-        public EventWaitHandle(bool initialState, EventResetMode mode, string name, out bool createdNew) { throw null; }
-
-        public EventWaitHandle(bool initialState, EventResetMode mode, string name) { }
-
-        public EventWaitHandle(bool initialState, EventResetMode mode) { }
-
-        public static EventWaitHandle OpenExisting(string name) { throw null; }
-
-        public bool Reset() { throw null; }
-
-        public bool Set() { throw null; }
-
-        public static bool TryOpenExisting(string name, out EventWaitHandle result) { throw null; }
-    }
-
-    public sealed partial class ExecutionContext
-    {
-        internal ExecutionContext() { }
-
-        public static ExecutionContext Capture() { throw null; }
-
-        public static void Run(ExecutionContext executionContext, ContextCallback callback, object state) { }
-    }
-
-    public static partial class Interlocked
-    {
-        public static int Add(ref int location1, int value) { throw null; }
-
-        public static long Add(ref long location1, long value) { throw null; }
-
-        public static double CompareExchange(ref double location1, double value, double comparand) { throw null; }
-
-        public static int CompareExchange(ref int location1, int value, int comparand) { throw null; }
-
-        public static long CompareExchange(ref long location1, long value, long comparand) { throw null; }
-
-        public static IntPtr CompareExchange(ref IntPtr location1, IntPtr value, IntPtr comparand) { throw null; }
-
-        public static object CompareExchange(ref object location1, object value, object comparand) { throw null; }
-
-        public static float CompareExchange(ref float location1, float value, float comparand) { throw null; }
-
-        public static T CompareExchange<T>(ref T location1, T value, T comparand)
-            where T : class { throw null; }
-
-        public static int Decrement(ref int location) { throw null; }
-
-        public static long Decrement(ref long location) { throw null; }
-
-        public static double Exchange(ref double location1, double value) { throw null; }
-
-        public static int Exchange(ref int location1, int value) { throw null; }
-
-        public static long Exchange(ref long location1, long value) { throw null; }
-
-        public static IntPtr Exchange(ref IntPtr location1, IntPtr value) { throw null; }
-
-        public static object Exchange(ref object location1, object value) { throw null; }
-
-        public static float Exchange(ref float location1, float value) { throw null; }
-
-        public static T Exchange<T>(ref T location1, T value)
-            where T : class { throw null; }
-
-        public static int Increment(ref int location) { throw null; }
-
-        public static long Increment(ref long location) { throw null; }
-
-        public static void MemoryBarrier() { }
-
-        public static long Read(ref long location) { throw null; }
-    }
-
-    public static partial class LazyInitializer
-    {
-        public static T EnsureInitialized<T>(ref T target, ref bool initialized, ref object syncLock, Func<T> valueFactory) { throw null; }
-
-        public static T EnsureInitialized<T>(ref T target, ref bool initialized, ref object syncLock) { throw null; }
-
-        public static T EnsureInitialized<T>(ref T target, Func<T> valueFactory)
-            where T : class { throw null; }
-
-        public static T EnsureInitialized<T>(ref T target)
-            where T : class { throw null; }
-    }
-
-    public partial class LockRecursionException : Exception
-    {
-        public LockRecursionException() { }
-
-        public LockRecursionException(string message, Exception innerException) { }
-
-        public LockRecursionException(string message) { }
-    }
-
-    public enum LockRecursionPolicy
-    {
-        NoRecursion = 0,
-        SupportsRecursion = 1
-    }
-
-    public sealed partial class ManualResetEvent : EventWaitHandle
-    {
-        public ManualResetEvent(bool initialState) : base(default, default) { }
-    }
-
-    public partial class ManualResetEventSlim : IDisposable
-    {
-        public ManualResetEventSlim() { }
-
-        public ManualResetEventSlim(bool initialState, int spinCount) { }
-
-        public ManualResetEventSlim(bool initialState) { }
-
-        public bool IsSet { get { throw null; } }
-
-        public int SpinCount { get { throw null; } }
-
-        public WaitHandle WaitHandle { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public void Reset() { }
-
-        public void Set() { }
-
-        public void Wait() { }
-
-        public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool Wait(int millisecondsTimeout) { throw null; }
-
-        public void Wait(CancellationToken cancellationToken) { }
-
-        public bool Wait(TimeSpan timeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool Wait(TimeSpan timeout) { throw null; }
-    }
-
-    public static partial class Monitor
-    {
-        public static void Enter(object obj, ref bool lockTaken) { }
-
-        public static void Enter(object obj) { }
-
-        public static void Exit(object obj) { }
-
-        public static bool IsEntered(object obj) { throw null; }
-
-        public static void Pulse(object obj) { }
-
-        public static void PulseAll(object obj) { }
-
-        public static void TryEnter(object obj, ref bool lockTaken) { }
-
-        public static void TryEnter(object obj, int millisecondsTimeout, ref bool lockTaken) { }
-
-        public static bool TryEnter(object obj, int millisecondsTimeout) { throw null; }
-
-        public static void TryEnter(object obj, TimeSpan timeout, ref bool lockTaken) { }
-
-        public static bool TryEnter(object obj, TimeSpan timeout) { throw null; }
-
-        public static bool TryEnter(object obj) { throw null; }
-
-        public static bool Wait(object obj, int millisecondsTimeout) { throw null; }
-
-        public static bool Wait(object obj, TimeSpan timeout) { throw null; }
-
-        public static bool Wait(object obj) { throw null; }
-    }
-
-    public sealed partial class Mutex : WaitHandle
-    {
-        public Mutex() { }
-
-        public Mutex(bool initiallyOwned, string name, out bool createdNew) { throw null; }
-
-        public Mutex(bool initiallyOwned, string name) { }
-
-        public Mutex(bool initiallyOwned) { }
-
-        public static Mutex OpenExisting(string name) { throw null; }
-
-        public void ReleaseMutex() { }
-
-        public static bool TryOpenExisting(string name, out Mutex result) { throw null; }
-    }
-
-    public partial class ReaderWriterLockSlim : IDisposable
-    {
-        public ReaderWriterLockSlim() { }
-
-        public ReaderWriterLockSlim(LockRecursionPolicy recursionPolicy) { }
-
-        public int CurrentReadCount { get { throw null; } }
-
-        public bool IsReadLockHeld { get { throw null; } }
-
-        public bool IsUpgradeableReadLockHeld { get { throw null; } }
-
-        public bool IsWriteLockHeld { get { throw null; } }
-
-        public LockRecursionPolicy RecursionPolicy { get { throw null; } }
-
-        public int RecursiveReadCount { get { throw null; } }
-
-        public int RecursiveUpgradeCount { get { throw null; } }
-
-        public int RecursiveWriteCount { get { throw null; } }
-
-        public int WaitingReadCount { get { throw null; } }
-
-        public int WaitingUpgradeCount { get { throw null; } }
-
-        public int WaitingWriteCount { get { throw null; } }
-
-        public void Dispose() { }
-
-        public void EnterReadLock() { }
-
-        public void EnterUpgradeableReadLock() { }
-
-        public void EnterWriteLock() { }
-
-        public void ExitReadLock() { }
-
-        public void ExitUpgradeableReadLock() { }
-
-        public void ExitWriteLock() { }
-
-        public bool TryEnterReadLock(int millisecondsTimeout) { throw null; }
-
-        public bool TryEnterReadLock(TimeSpan timeout) { throw null; }
-
-        public bool TryEnterUpgradeableReadLock(int millisecondsTimeout) { throw null; }
-
-        public bool TryEnterUpgradeableReadLock(TimeSpan timeout) { throw null; }
-
-        public bool TryEnterWriteLock(int millisecondsTimeout) { throw null; }
-
-        public bool TryEnterWriteLock(TimeSpan timeout) { throw null; }
-    }
-
-    public sealed partial class Semaphore : WaitHandle
-    {
-        public Semaphore(int initialCount, int maximumCount, string name, out bool createdNew) { throw null; }
-
-        public Semaphore(int initialCount, int maximumCount, string name) { }
-
-        public Semaphore(int initialCount, int maximumCount) { }
-
-        public static Semaphore OpenExisting(string name) { throw null; }
-
-        public int Release() { throw null; }
-
-        public int Release(int releaseCount) { throw null; }
-
-        public static bool TryOpenExisting(string name, out Semaphore result) { throw null; }
-    }
-
-    public partial class SemaphoreFullException : Exception
-    {
-        public SemaphoreFullException() { }
-
-        public SemaphoreFullException(string message, Exception innerException) { }
-
-        public SemaphoreFullException(string message) { }
-    }
-
-    public partial class SemaphoreSlim : IDisposable
-    {
-        public SemaphoreSlim(int initialCount, int maxCount) { }
-
-        public SemaphoreSlim(int initialCount) { }
-
-        public WaitHandle AvailableWaitHandle { get { throw null; } }
-
-        public int CurrentCount { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public int Release() { throw null; }
-
-        public int Release(int releaseCount) { throw null; }
-
-        public void Wait() { }
-
-        public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool Wait(int millisecondsTimeout) { throw null; }
-
-        public void Wait(CancellationToken cancellationToken) { }
-
-        public bool Wait(TimeSpan timeout, CancellationToken cancellationToken) { throw null; }
-
-        public bool Wait(TimeSpan timeout) { throw null; }
-
-        public Tasks.Task WaitAsync() { throw null; }
-
-        public Tasks.Task<bool> WaitAsync(int millisecondsTimeout, CancellationToken cancellationToken) { throw null; }
-
-        public Tasks.Task<bool> WaitAsync(int millisecondsTimeout) { throw null; }
-
-        public Tasks.Task WaitAsync(CancellationToken cancellationToken) { throw null; }
-
-        public Tasks.Task<bool> WaitAsync(TimeSpan timeout, CancellationToken cancellationToken) { throw null; }
-
-        public Tasks.Task<bool> WaitAsync(TimeSpan timeout) { throw null; }
-    }
-
-    public delegate void SendOrPostCallback(object state);
-    public partial struct SpinLock
-    {
-        public SpinLock(bool enableThreadOwnerTracking) { }
-
-        public bool IsHeld { get { throw null; } }
-
-        public bool IsHeldByCurrentThread { get { throw null; } }
-
-        public bool IsThreadOwnerTrackingEnabled { get { throw null; } }
-
-        public void Enter(ref bool lockTaken) { }
-
-        public void Exit() { }
-
-        public void Exit(bool useMemoryBarrier) { }
-
-        public void TryEnter(ref bool lockTaken) { }
-
-        public void TryEnter(int millisecondsTimeout, ref bool lockTaken) { }
-
-        public void TryEnter(TimeSpan timeout, ref bool lockTaken) { }
-    }
-
-    public partial struct SpinWait
-    {
-        public int Count { get { throw null; } }
-
-        public bool NextSpinWillYield { get { throw null; } }
-
-        public void Reset() { }
-
-        public void SpinOnce() { }
-
-        public static bool SpinUntil(Func<bool> condition, int millisecondsTimeout) { throw null; }
-
-        public static bool SpinUntil(Func<bool> condition, TimeSpan timeout) { throw null; }
-
-        public static void SpinUntil(Func<bool> condition) { }
-    }
-
-    public partial class SynchronizationContext
-    {
-        public static SynchronizationContext Current { get { throw null; } }
-
-        public virtual SynchronizationContext CreateCopy() { throw null; }
-
-        public virtual void OperationCompleted() { }
-
-        public virtual void OperationStarted() { }
-
-        public virtual void Post(SendOrPostCallback d, object state) { }
-
-        public virtual void Send(SendOrPostCallback d, object state) { }
-
-        public static void SetSynchronizationContext(SynchronizationContext syncContext) { }
-    }
-
-    public partial class SynchronizationLockException : Exception
-    {
-        public SynchronizationLockException() { }
-
-        public SynchronizationLockException(string message, Exception innerException) { }
-
-        public SynchronizationLockException(string message) { }
-    }
-
-    public partial class ThreadLocal<T> : IDisposable
-    {
-        public ThreadLocal() { }
-
-        public ThreadLocal(bool trackAllValues) { }
-
-        public ThreadLocal(Func<T> valueFactory, bool trackAllValues) { }
-
-        public ThreadLocal(Func<T> valueFactory) { }
-
-        public bool IsValueCreated { get { throw null; } }
-
-        public T Value { get { throw null; } set { } }
-
-        public Collections.Generic.IList<T> Values { get { throw null; } }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        ~ThreadLocal() {
-        }
-
-        public override string ToString() { throw null; }
-    }
-
-    public static partial class Volatile
-    {
-        public static bool Read(ref bool location) { throw null; }
-
-        public static byte Read(ref byte location) { throw null; }
-
-        public static double Read(ref double location) { throw null; }
-
-        public static short Read(ref short location) { throw null; }
-
-        public static int Read(ref int location) { throw null; }
-
-        public static long Read(ref long location) { throw null; }
-
-        public static IntPtr Read(ref IntPtr location) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte Read(ref sbyte location) { throw null; }
-
-        public static float Read(ref float location) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort Read(ref ushort location) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint Read(ref uint location) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong Read(ref ulong location) { throw null; }
-
-        [CLSCompliant(false)]
-        public static UIntPtr Read(ref UIntPtr location) { throw null; }
-
-        public static T Read<T>(ref T location)
-            where T : class { throw null; }
-
-        public static void Write(ref bool location, bool value) { }
-
-        public static void Write(ref byte location, byte value) { }
-
-        public static void Write(ref double location, double value) { }
-
-        public static void Write(ref short location, short value) { }
-
-        public static void Write(ref int location, int value) { }
-
-        public static void Write(ref long location, long value) { }
-
-        public static void Write(ref IntPtr location, IntPtr value) { }
-
-        [CLSCompliant(false)]
-        public static void Write(ref sbyte location, sbyte value) { }
-
-        public static void Write(ref float location, float value) { }
-
-        [CLSCompliant(false)]
-        public static void Write(ref ushort location, ushort value) { }
-
-        [CLSCompliant(false)]
-        public static void Write(ref uint location, uint value) { }
-
-        [CLSCompliant(false)]
-        public static void Write(ref ulong location, ulong value) { }
-
-        [CLSCompliant(false)]
-        public static void Write(ref UIntPtr location, UIntPtr value) { }
-
-        public static void Write<T>(ref T location, T value)
-            where T : class { }
-    }
-
-    public partial class WaitHandleCannotBeOpenedException : Exception
-    {
-        public WaitHandleCannotBeOpenedException() { }
-
-        public WaitHandleCannotBeOpenedException(string message, Exception innerException) { }
-
-        public WaitHandleCannotBeOpenedException(string message) { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.threading/4.3.0/system.threading.nuspec b/src/referencePackages/src/system.threading/4.3.0/system.threading.nuspec
deleted file mode 100644
index 8c5330b4..00000000
--- a/src/referencePackages/src/system.threading/4.3.0/system.threading.nuspec
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Threading</id>
-    <version>4.3.0</version>
-    <title>System.Threading</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides the fundamental synchronization primitives, including System.Threading.Monitor and System.Threading.Mutex, that are required when writing asynchronous code.
-
-Commonly Used Types:
-System.Threading.Monitor
-System.Threading.SynchronizationContext
-System.Threading.ManualResetEvent
-System.Threading.AutoResetEvent
-System.Threading.ThreadLocal&lt;T&gt;
-System.Threading.EventWaitHandle
-System.Threading.SemaphoreSlim
-System.Threading.Mutex
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.xml.readerwriter/4.3.0/System.Xml.ReaderWriter.4.3.0.csproj b/src/referencePackages/src/system.xml.readerwriter/4.3.0/System.Xml.ReaderWriter.4.3.0.csproj
deleted file mode 100644
index e90a60c9..00000000
--- a/src/referencePackages/src/system.xml.readerwriter/4.3.0/System.Xml.ReaderWriter.4.3.0.csproj
+++ /dev/null
@@ -1,33 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
-    <PackageReference Include="System.Globalization" Version="4.3.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.IO.FileSystem" Version="4.3.0" />
-    <PackageReference Include="System.IO.FileSystem.Primitives" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Text.RegularExpressions" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks" Version="4.3.0" />
-    <PackageReference Include="System.Threading.Tasks.Extensions" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.xml.readerwriter/4.3.0/ref/netstandard1.0/System.Xml.ReaderWriter.cs b/src/referencePackages/src/system.xml.readerwriter/4.3.0/ref/netstandard1.0/System.Xml.ReaderWriter.cs
deleted file mode 100644
index 1c2d8bba..00000000
--- a/src/referencePackages/src/system.xml.readerwriter/4.3.0/ref/netstandard1.0/System.Xml.ReaderWriter.cs
+++ /dev/null
@@ -1,810 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Xml.ReaderWriter.dll")]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyTitle("System.Xml.ReaderWriter.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.Xml.ReaderWriter.dll")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Xml
-{
-    public enum ConformanceLevel
-    {
-        Auto = 0,
-        Fragment = 1,
-        Document = 2
-    }
-
-    public enum DtdProcessing
-    {
-        Prohibit = 0,
-        Ignore = 1
-    }
-
-    public partial interface IXmlLineInfo
-    {
-        int LineNumber { get; }
-
-        int LinePosition { get; }
-
-        bool HasLineInfo();
-    }
-
-    public partial interface IXmlNamespaceResolver
-    {
-        Collections.Generic.IDictionary<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
-        string LookupNamespace(string prefix);
-        string LookupPrefix(string namespaceName);
-    }
-
-    [Flags]
-    public enum NamespaceHandling
-    {
-        Default = 0,
-        OmitDuplicates = 1
-    }
-
-    public partial class NameTable : XmlNameTable
-    {
-        public override string Add(char[] key, int start, int len) { throw null; }
-
-        public override string Add(string key) { throw null; }
-
-        public override string Get(char[] key, int start, int len) { throw null; }
-
-        public override string Get(string value) { throw null; }
-    }
-
-    public enum NewLineHandling
-    {
-        Replace = 0,
-        Entitize = 1,
-        None = 2
-    }
-
-    public enum ReadState
-    {
-        Initial = 0,
-        Interactive = 1,
-        Error = 2,
-        EndOfFile = 3,
-        Closed = 4
-    }
-
-    public enum WriteState
-    {
-        Start = 0,
-        Prolog = 1,
-        Element = 2,
-        Attribute = 3,
-        Content = 4,
-        Closed = 5,
-        Error = 6
-    }
-
-    public static partial class XmlConvert
-    {
-        public static string DecodeName(string name) { throw null; }
-
-        public static string EncodeLocalName(string name) { throw null; }
-
-        public static string EncodeName(string name) { throw null; }
-
-        public static string EncodeNmToken(string name) { throw null; }
-
-        public static bool ToBoolean(string s) { throw null; }
-
-        public static byte ToByte(string s) { throw null; }
-
-        public static char ToChar(string s) { throw null; }
-
-        public static DateTimeOffset ToDateTimeOffset(string s, string format) { throw null; }
-
-        public static DateTimeOffset ToDateTimeOffset(string s, string[] formats) { throw null; }
-
-        public static DateTimeOffset ToDateTimeOffset(string s) { throw null; }
-
-        public static decimal ToDecimal(string s) { throw null; }
-
-        public static double ToDouble(string s) { throw null; }
-
-        public static Guid ToGuid(string s) { throw null; }
-
-        public static short ToInt16(string s) { throw null; }
-
-        public static int ToInt32(string s) { throw null; }
-
-        public static long ToInt64(string s) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(string s) { throw null; }
-
-        public static float ToSingle(string s) { throw null; }
-
-        public static string ToString(bool value) { throw null; }
-
-        public static string ToString(char value) { throw null; }
-
-        public static string ToString(DateTimeOffset value, string format) { throw null; }
-
-        public static string ToString(DateTimeOffset value) { throw null; }
-
-        public static string ToString(decimal value) { throw null; }
-
-        public static string ToString(double value) { throw null; }
-
-        public static string ToString(Guid value) { throw null; }
-
-        public static string ToString(short value) { throw null; }
-
-        public static string ToString(int value) { throw null; }
-
-        public static string ToString(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(sbyte value) { throw null; }
-
-        public static string ToString(float value) { throw null; }
-
-        public static string ToString(TimeSpan value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(ulong value) { throw null; }
-
-        public static TimeSpan ToTimeSpan(string s) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(string s) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(string s) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(string s) { throw null; }
-
-        public static string VerifyName(string name) { throw null; }
-
-        public static string VerifyNCName(string name) { throw null; }
-
-        public static string VerifyNMTOKEN(string name) { throw null; }
-
-        public static string VerifyPublicId(string publicId) { throw null; }
-
-        public static string VerifyWhitespace(string content) { throw null; }
-
-        public static string VerifyXmlChars(string content) { throw null; }
-    }
-
-    public partial class XmlException : Exception
-    {
-        public XmlException() { }
-
-        public XmlException(string message, Exception innerException, int lineNumber, int linePosition) { }
-
-        public XmlException(string message, Exception innerException) { }
-
-        public XmlException(string message) { }
-
-        public int LineNumber { get { throw null; } }
-
-        public int LinePosition { get { throw null; } }
-
-        public override string Message { get { throw null; } }
-    }
-
-    public partial class XmlNamespaceManager : Collections.IEnumerable, IXmlNamespaceResolver
-    {
-        public XmlNamespaceManager(XmlNameTable nameTable) { }
-
-        public virtual string DefaultNamespace { get { throw null; } }
-
-        public virtual XmlNameTable NameTable { get { throw null; } }
-
-        public virtual void AddNamespace(string prefix, string uri) { }
-
-        public virtual Collections.IEnumerator GetEnumerator() { throw null; }
-
-        public virtual Collections.Generic.IDictionary<string, string> GetNamespacesInScope(XmlNamespaceScope scope) { throw null; }
-
-        public virtual bool HasNamespace(string prefix) { throw null; }
-
-        public virtual string LookupNamespace(string prefix) { throw null; }
-
-        public virtual string LookupPrefix(string uri) { throw null; }
-
-        public virtual bool PopScope() { throw null; }
-
-        public virtual void PushScope() { }
-
-        public virtual void RemoveNamespace(string prefix, string uri) { }
-    }
-
-    public enum XmlNamespaceScope
-    {
-        All = 0,
-        ExcludeXml = 1,
-        Local = 2
-    }
-
-    public abstract partial class XmlNameTable
-    {
-        public abstract string Add(char[] array, int offset, int length);
-        public abstract string Add(string array);
-        public abstract string Get(char[] array, int offset, int length);
-        public abstract string Get(string array);
-    }
-
-    public enum XmlNodeType
-    {
-        None = 0,
-        Element = 1,
-        Attribute = 2,
-        Text = 3,
-        CDATA = 4,
-        EntityReference = 5,
-        Entity = 6,
-        ProcessingInstruction = 7,
-        Comment = 8,
-        Document = 9,
-        DocumentType = 10,
-        DocumentFragment = 11,
-        Notation = 12,
-        Whitespace = 13,
-        SignificantWhitespace = 14,
-        EndElement = 15,
-        EndEntity = 16,
-        XmlDeclaration = 17
-    }
-
-    public partial class XmlParserContext
-    {
-        public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace, Text.Encoding enc) { }
-
-        public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace) { }
-
-        public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace, Text.Encoding enc) { }
-
-        public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace) { }
-
-        public string BaseURI { get { throw null; } set { } }
-
-        public string DocTypeName { get { throw null; } set { } }
-
-        public Text.Encoding Encoding { get { throw null; } set { } }
-
-        public string InternalSubset { get { throw null; } set { } }
-
-        public XmlNamespaceManager NamespaceManager { get { throw null; } set { } }
-
-        public XmlNameTable NameTable { get { throw null; } set { } }
-
-        public string PublicId { get { throw null; } set { } }
-
-        public string SystemId { get { throw null; } set { } }
-
-        public string XmlLang { get { throw null; } set { } }
-
-        public XmlSpace XmlSpace { get { throw null; } set { } }
-    }
-
-    public partial class XmlQualifiedName
-    {
-        public static readonly XmlQualifiedName Empty;
-        public XmlQualifiedName() { }
-
-        public XmlQualifiedName(string name, string ns) { }
-
-        public XmlQualifiedName(string name) { }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public string Namespace { get { throw null; } }
-
-        public override bool Equals(object other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(XmlQualifiedName a, XmlQualifiedName b) { throw null; }
-
-        public static bool operator !=(XmlQualifiedName a, XmlQualifiedName b) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static string ToString(string name, string ns) { throw null; }
-    }
-
-    public abstract partial class XmlReader : IDisposable
-    {
-        public abstract int AttributeCount { get; }
-        public abstract string BaseURI { get; }
-
-        public virtual bool CanReadBinaryContent { get { throw null; } }
-
-        public virtual bool CanReadValueChunk { get { throw null; } }
-
-        public virtual bool CanResolveEntity { get { throw null; } }
-
-        public abstract int Depth { get; }
-        public abstract bool EOF { get; }
-
-        public virtual bool HasAttributes { get { throw null; } }
-
-        public virtual bool HasValue { get { throw null; } }
-
-        public virtual bool IsDefault { get { throw null; } }
-
-        public abstract bool IsEmptyElement { get; }
-
-        public virtual string this[int i] { get { throw null; } }
-
-        public virtual string this[string name, string namespaceURI] { get { throw null; } }
-
-        public virtual string this[string name] { get { throw null; } }
-
-        public abstract string LocalName { get; }
-
-        public virtual string Name { get { throw null; } }
-
-        public abstract string NamespaceURI { get; }
-        public abstract XmlNameTable NameTable { get; }
-        public abstract XmlNodeType NodeType { get; }
-        public abstract string Prefix { get; }
-        public abstract ReadState ReadState { get; }
-
-        public virtual XmlReaderSettings Settings { get { throw null; } }
-
-        public abstract string Value { get; }
-
-        public virtual Type ValueType { get { throw null; } }
-
-        public virtual string XmlLang { get { throw null; } }
-
-        public virtual XmlSpace XmlSpace { get { throw null; } }
-
-        public static XmlReader Create(IO.Stream input, XmlReaderSettings settings, XmlParserContext inputContext) { throw null; }
-
-        public static XmlReader Create(IO.Stream input, XmlReaderSettings settings) { throw null; }
-
-        public static XmlReader Create(IO.Stream input) { throw null; }
-
-        public static XmlReader Create(IO.TextReader input, XmlReaderSettings settings, XmlParserContext inputContext) { throw null; }
-
-        public static XmlReader Create(IO.TextReader input, XmlReaderSettings settings) { throw null; }
-
-        public static XmlReader Create(IO.TextReader input) { throw null; }
-
-        public static XmlReader Create(string inputUri, XmlReaderSettings settings) { throw null; }
-
-        public static XmlReader Create(string inputUri) { throw null; }
-
-        public static XmlReader Create(XmlReader reader, XmlReaderSettings settings) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract string GetAttribute(int i);
-        public abstract string GetAttribute(string name, string namespaceURI);
-        public abstract string GetAttribute(string name);
-        public virtual Threading.Tasks.Task<string> GetValueAsync() { throw null; }
-
-        public static bool IsName(string str) { throw null; }
-
-        public static bool IsNameToken(string str) { throw null; }
-
-        public virtual bool IsStartElement() { throw null; }
-
-        public virtual bool IsStartElement(string localname, string ns) { throw null; }
-
-        public virtual bool IsStartElement(string name) { throw null; }
-
-        public abstract string LookupNamespace(string prefix);
-        public virtual void MoveToAttribute(int i) { }
-
-        public abstract bool MoveToAttribute(string name, string ns);
-        public abstract bool MoveToAttribute(string name);
-        public virtual XmlNodeType MoveToContent() { throw null; }
-
-        public virtual Threading.Tasks.Task<XmlNodeType> MoveToContentAsync() { throw null; }
-
-        public abstract bool MoveToElement();
-        public abstract bool MoveToFirstAttribute();
-        public abstract bool MoveToNextAttribute();
-        public abstract bool Read();
-        public virtual Threading.Tasks.Task<bool> ReadAsync() { throw null; }
-
-        public abstract bool ReadAttributeValue();
-        public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver) { throw null; }
-
-        public virtual Threading.Tasks.Task<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver) { throw null; }
-
-        public virtual int ReadContentAsBase64(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadContentAsBase64Async(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual int ReadContentAsBinHex(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadContentAsBinHexAsync(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual bool ReadContentAsBoolean() { throw null; }
-
-        public virtual DateTimeOffset ReadContentAsDateTimeOffset() { throw null; }
-
-        public virtual decimal ReadContentAsDecimal() { throw null; }
-
-        public virtual double ReadContentAsDouble() { throw null; }
-
-        public virtual float ReadContentAsFloat() { throw null; }
-
-        public virtual int ReadContentAsInt() { throw null; }
-
-        public virtual long ReadContentAsLong() { throw null; }
-
-        public virtual object ReadContentAsObject() { throw null; }
-
-        public virtual Threading.Tasks.Task<object> ReadContentAsObjectAsync() { throw null; }
-
-        public virtual string ReadContentAsString() { throw null; }
-
-        public virtual Threading.Tasks.Task<string> ReadContentAsStringAsync() { throw null; }
-
-        public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI) { throw null; }
-
-        public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver) { throw null; }
-
-        public virtual Threading.Tasks.Task<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver) { throw null; }
-
-        public virtual int ReadElementContentAsBase64(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadElementContentAsBase64Async(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual int ReadElementContentAsBinHex(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadElementContentAsBinHexAsync(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual bool ReadElementContentAsBoolean() { throw null; }
-
-        public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI) { throw null; }
-
-        public virtual decimal ReadElementContentAsDecimal() { throw null; }
-
-        public virtual decimal ReadElementContentAsDecimal(string localName, string namespaceURI) { throw null; }
-
-        public virtual double ReadElementContentAsDouble() { throw null; }
-
-        public virtual double ReadElementContentAsDouble(string localName, string namespaceURI) { throw null; }
-
-        public virtual float ReadElementContentAsFloat() { throw null; }
-
-        public virtual float ReadElementContentAsFloat(string localName, string namespaceURI) { throw null; }
-
-        public virtual int ReadElementContentAsInt() { throw null; }
-
-        public virtual int ReadElementContentAsInt(string localName, string namespaceURI) { throw null; }
-
-        public virtual long ReadElementContentAsLong() { throw null; }
-
-        public virtual long ReadElementContentAsLong(string localName, string namespaceURI) { throw null; }
-
-        public virtual object ReadElementContentAsObject() { throw null; }
-
-        public virtual object ReadElementContentAsObject(string localName, string namespaceURI) { throw null; }
-
-        public virtual Threading.Tasks.Task<object> ReadElementContentAsObjectAsync() { throw null; }
-
-        public virtual string ReadElementContentAsString() { throw null; }
-
-        public virtual string ReadElementContentAsString(string localName, string namespaceURI) { throw null; }
-
-        public virtual Threading.Tasks.Task<string> ReadElementContentAsStringAsync() { throw null; }
-
-        public virtual void ReadEndElement() { }
-
-        public virtual string ReadInnerXml() { throw null; }
-
-        public virtual Threading.Tasks.Task<string> ReadInnerXmlAsync() { throw null; }
-
-        public virtual string ReadOuterXml() { throw null; }
-
-        public virtual Threading.Tasks.Task<string> ReadOuterXmlAsync() { throw null; }
-
-        public virtual void ReadStartElement() { }
-
-        public virtual void ReadStartElement(string localname, string ns) { }
-
-        public virtual void ReadStartElement(string name) { }
-
-        public virtual XmlReader ReadSubtree() { throw null; }
-
-        public virtual bool ReadToDescendant(string localName, string namespaceURI) { throw null; }
-
-        public virtual bool ReadToDescendant(string name) { throw null; }
-
-        public virtual bool ReadToFollowing(string localName, string namespaceURI) { throw null; }
-
-        public virtual bool ReadToFollowing(string name) { throw null; }
-
-        public virtual bool ReadToNextSibling(string localName, string namespaceURI) { throw null; }
-
-        public virtual bool ReadToNextSibling(string name) { throw null; }
-
-        public virtual int ReadValueChunk(char[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadValueChunkAsync(char[] buffer, int index, int count) { throw null; }
-
-        public abstract void ResolveEntity();
-        public virtual void Skip() { }
-
-        public virtual Threading.Tasks.Task SkipAsync() { throw null; }
-    }
-
-    public sealed partial class XmlReaderSettings
-    {
-        public bool Async { get { throw null; } set { } }
-
-        public bool CheckCharacters { get { throw null; } set { } }
-
-        public bool CloseInput { get { throw null; } set { } }
-
-        public ConformanceLevel ConformanceLevel { get { throw null; } set { } }
-
-        public DtdProcessing DtdProcessing { get { throw null; } set { } }
-
-        public bool IgnoreComments { get { throw null; } set { } }
-
-        public bool IgnoreProcessingInstructions { get { throw null; } set { } }
-
-        public bool IgnoreWhitespace { get { throw null; } set { } }
-
-        public int LineNumberOffset { get { throw null; } set { } }
-
-        public int LinePositionOffset { get { throw null; } set { } }
-
-        public long MaxCharactersFromEntities { get { throw null; } set { } }
-
-        public long MaxCharactersInDocument { get { throw null; } set { } }
-
-        public XmlNameTable NameTable { get { throw null; } set { } }
-
-        public XmlReaderSettings Clone() { throw null; }
-
-        public void Reset() { }
-    }
-
-    public enum XmlSpace
-    {
-        None = 0,
-        Default = 1,
-        Preserve = 2
-    }
-
-    public abstract partial class XmlWriter : IDisposable
-    {
-        public virtual XmlWriterSettings Settings { get { throw null; } }
-
-        public abstract WriteState WriteState { get; }
-
-        public virtual string XmlLang { get { throw null; } }
-
-        public virtual XmlSpace XmlSpace { get { throw null; } }
-
-        public static XmlWriter Create(IO.Stream output, XmlWriterSettings settings) { throw null; }
-
-        public static XmlWriter Create(IO.Stream output) { throw null; }
-
-        public static XmlWriter Create(IO.TextWriter output, XmlWriterSettings settings) { throw null; }
-
-        public static XmlWriter Create(IO.TextWriter output) { throw null; }
-
-        public static XmlWriter Create(Text.StringBuilder output, XmlWriterSettings settings) { throw null; }
-
-        public static XmlWriter Create(Text.StringBuilder output) { throw null; }
-
-        public static XmlWriter Create(XmlWriter output, XmlWriterSettings settings) { throw null; }
-
-        public static XmlWriter Create(XmlWriter output) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract void Flush();
-        public virtual Threading.Tasks.Task FlushAsync() { throw null; }
-
-        public abstract string LookupPrefix(string ns);
-        public virtual void WriteAttributes(XmlReader reader, bool defattr) { }
-
-        public virtual Threading.Tasks.Task WriteAttributesAsync(XmlReader reader, bool defattr) { throw null; }
-
-        public void WriteAttributeString(string prefix, string localName, string ns, string value) { }
-
-        public void WriteAttributeString(string localName, string ns, string value) { }
-
-        public void WriteAttributeString(string localName, string value) { }
-
-        public Threading.Tasks.Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value) { throw null; }
-
-        public abstract void WriteBase64(byte[] buffer, int index, int count);
-        public virtual Threading.Tasks.Task WriteBase64Async(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual void WriteBinHex(byte[] buffer, int index, int count) { }
-
-        public virtual Threading.Tasks.Task WriteBinHexAsync(byte[] buffer, int index, int count) { throw null; }
-
-        public abstract void WriteCData(string text);
-        public virtual Threading.Tasks.Task WriteCDataAsync(string text) { throw null; }
-
-        public abstract void WriteCharEntity(char ch);
-        public virtual Threading.Tasks.Task WriteCharEntityAsync(char ch) { throw null; }
-
-        public abstract void WriteChars(char[] buffer, int index, int count);
-        public virtual Threading.Tasks.Task WriteCharsAsync(char[] buffer, int index, int count) { throw null; }
-
-        public abstract void WriteComment(string text);
-        public virtual Threading.Tasks.Task WriteCommentAsync(string text) { throw null; }
-
-        public abstract void WriteDocType(string name, string pubid, string sysid, string subset);
-        public virtual Threading.Tasks.Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset) { throw null; }
-
-        public void WriteElementString(string prefix, string localName, string ns, string value) { }
-
-        public void WriteElementString(string localName, string ns, string value) { }
-
-        public void WriteElementString(string localName, string value) { }
-
-        public Threading.Tasks.Task WriteElementStringAsync(string prefix, string localName, string ns, string value) { throw null; }
-
-        public abstract void WriteEndAttribute();
-        protected internal virtual Threading.Tasks.Task WriteEndAttributeAsync() { throw null; }
-
-        public abstract void WriteEndDocument();
-        public virtual Threading.Tasks.Task WriteEndDocumentAsync() { throw null; }
-
-        public abstract void WriteEndElement();
-        public virtual Threading.Tasks.Task WriteEndElementAsync() { throw null; }
-
-        public abstract void WriteEntityRef(string name);
-        public virtual Threading.Tasks.Task WriteEntityRefAsync(string name) { throw null; }
-
-        public abstract void WriteFullEndElement();
-        public virtual Threading.Tasks.Task WriteFullEndElementAsync() { throw null; }
-
-        public virtual void WriteName(string name) { }
-
-        public virtual Threading.Tasks.Task WriteNameAsync(string name) { throw null; }
-
-        public virtual void WriteNmToken(string name) { }
-
-        public virtual Threading.Tasks.Task WriteNmTokenAsync(string name) { throw null; }
-
-        public virtual void WriteNode(XmlReader reader, bool defattr) { }
-
-        public virtual Threading.Tasks.Task WriteNodeAsync(XmlReader reader, bool defattr) { throw null; }
-
-        public abstract void WriteProcessingInstruction(string name, string text);
-        public virtual Threading.Tasks.Task WriteProcessingInstructionAsync(string name, string text) { throw null; }
-
-        public virtual void WriteQualifiedName(string localName, string ns) { }
-
-        public virtual Threading.Tasks.Task WriteQualifiedNameAsync(string localName, string ns) { throw null; }
-
-        public abstract void WriteRaw(char[] buffer, int index, int count);
-        public abstract void WriteRaw(string data);
-        public virtual Threading.Tasks.Task WriteRawAsync(char[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task WriteRawAsync(string data) { throw null; }
-
-        public abstract void WriteStartAttribute(string prefix, string localName, string ns);
-        public void WriteStartAttribute(string localName, string ns) { }
-
-        public void WriteStartAttribute(string localName) { }
-
-        protected internal virtual Threading.Tasks.Task WriteStartAttributeAsync(string prefix, string localName, string ns) { throw null; }
-
-        public abstract void WriteStartDocument();
-        public abstract void WriteStartDocument(bool standalone);
-        public virtual Threading.Tasks.Task WriteStartDocumentAsync() { throw null; }
-
-        public virtual Threading.Tasks.Task WriteStartDocumentAsync(bool standalone) { throw null; }
-
-        public abstract void WriteStartElement(string prefix, string localName, string ns);
-        public void WriteStartElement(string localName, string ns) { }
-
-        public void WriteStartElement(string localName) { }
-
-        public virtual Threading.Tasks.Task WriteStartElementAsync(string prefix, string localName, string ns) { throw null; }
-
-        public abstract void WriteString(string text);
-        public virtual Threading.Tasks.Task WriteStringAsync(string text) { throw null; }
-
-        public abstract void WriteSurrogateCharEntity(char lowChar, char highChar);
-        public virtual Threading.Tasks.Task WriteSurrogateCharEntityAsync(char lowChar, char highChar) { throw null; }
-
-        public virtual void WriteValue(bool value) { }
-
-        public virtual void WriteValue(DateTimeOffset value) { }
-
-        public virtual void WriteValue(decimal value) { }
-
-        public virtual void WriteValue(double value) { }
-
-        public virtual void WriteValue(int value) { }
-
-        public virtual void WriteValue(long value) { }
-
-        public virtual void WriteValue(object value) { }
-
-        public virtual void WriteValue(float value) { }
-
-        public virtual void WriteValue(string value) { }
-
-        public abstract void WriteWhitespace(string ws);
-        public virtual Threading.Tasks.Task WriteWhitespaceAsync(string ws) { throw null; }
-    }
-
-    public sealed partial class XmlWriterSettings
-    {
-        public bool Async { get { throw null; } set { } }
-
-        public bool CheckCharacters { get { throw null; } set { } }
-
-        public bool CloseOutput { get { throw null; } set { } }
-
-        public ConformanceLevel ConformanceLevel { get { throw null; } set { } }
-
-        public Text.Encoding Encoding { get { throw null; } set { } }
-
-        public bool Indent { get { throw null; } set { } }
-
-        public string IndentChars { get { throw null; } set { } }
-
-        public NamespaceHandling NamespaceHandling { get { throw null; } set { } }
-
-        public string NewLineChars { get { throw null; } set { } }
-
-        public NewLineHandling NewLineHandling { get { throw null; } set { } }
-
-        public bool NewLineOnAttributes { get { throw null; } set { } }
-
-        public bool OmitXmlDeclaration { get { throw null; } set { } }
-
-        public bool WriteEndDocumentOnClose { get { throw null; } set { } }
-
-        public XmlWriterSettings Clone() { throw null; }
-
-        public void Reset() { }
-    }
-}
-
-namespace System.Xml.Schema
-{
-    public partial class XmlSchema
-    {
-        internal XmlSchema() { }
-    }
-
-    public enum XmlSchemaForm
-    {
-        None = 0,
-        Qualified = 1,
-        Unqualified = 2
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.xml.readerwriter/4.3.0/ref/netstandard1.3/System.Xml.ReaderWriter.cs b/src/referencePackages/src/system.xml.readerwriter/4.3.0/ref/netstandard1.3/System.Xml.ReaderWriter.cs
deleted file mode 100644
index a641f63f..00000000
--- a/src/referencePackages/src/system.xml.readerwriter/4.3.0/ref/netstandard1.3/System.Xml.ReaderWriter.cs
+++ /dev/null
@@ -1,852 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Xml.ReaderWriter")]
-[assembly: System.Reflection.AssemblyDescription("System.Xml.ReaderWriter")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Xml.ReaderWriter")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.6.24705.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.6.24705.01. Commit Hash: 4d1af962ca0fede10beb01d197367c2f90e92c97")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.1.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Xml
-{
-    public enum ConformanceLevel
-    {
-        Auto = 0,
-        Fragment = 1,
-        Document = 2
-    }
-
-    public enum DtdProcessing
-    {
-        Prohibit = 0,
-        Ignore = 1
-    }
-
-    public partial interface IXmlLineInfo
-    {
-        int LineNumber { get; }
-
-        int LinePosition { get; }
-
-        bool HasLineInfo();
-    }
-
-    public partial interface IXmlNamespaceResolver
-    {
-        Collections.Generic.IDictionary<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
-        string LookupNamespace(string prefix);
-        string LookupPrefix(string namespaceName);
-    }
-
-    [Flags]
-    public enum NamespaceHandling
-    {
-        Default = 0,
-        OmitDuplicates = 1
-    }
-
-    public partial class NameTable : XmlNameTable
-    {
-        public override string Add(char[] key, int start, int len) { throw null; }
-
-        public override string Add(string key) { throw null; }
-
-        public override string Get(char[] key, int start, int len) { throw null; }
-
-        public override string Get(string value) { throw null; }
-    }
-
-    public enum NewLineHandling
-    {
-        Replace = 0,
-        Entitize = 1,
-        None = 2
-    }
-
-    public enum ReadState
-    {
-        Initial = 0,
-        Interactive = 1,
-        Error = 2,
-        EndOfFile = 3,
-        Closed = 4
-    }
-
-    public enum WriteState
-    {
-        Start = 0,
-        Prolog = 1,
-        Element = 2,
-        Attribute = 3,
-        Content = 4,
-        Closed = 5,
-        Error = 6
-    }
-
-    public static partial class XmlConvert
-    {
-        public static string DecodeName(string name) { throw null; }
-
-        public static string EncodeLocalName(string name) { throw null; }
-
-        public static string EncodeName(string name) { throw null; }
-
-        public static string EncodeNmToken(string name) { throw null; }
-
-        public static bool ToBoolean(string s) { throw null; }
-
-        public static byte ToByte(string s) { throw null; }
-
-        public static char ToChar(string s) { throw null; }
-
-        public static DateTime ToDateTime(string s, XmlDateTimeSerializationMode dateTimeOption) { throw null; }
-
-        public static DateTimeOffset ToDateTimeOffset(string s, string format) { throw null; }
-
-        public static DateTimeOffset ToDateTimeOffset(string s, string[] formats) { throw null; }
-
-        public static DateTimeOffset ToDateTimeOffset(string s) { throw null; }
-
-        public static decimal ToDecimal(string s) { throw null; }
-
-        public static double ToDouble(string s) { throw null; }
-
-        public static Guid ToGuid(string s) { throw null; }
-
-        public static short ToInt16(string s) { throw null; }
-
-        public static int ToInt32(string s) { throw null; }
-
-        public static long ToInt64(string s) { throw null; }
-
-        [CLSCompliant(false)]
-        public static sbyte ToSByte(string s) { throw null; }
-
-        public static float ToSingle(string s) { throw null; }
-
-        public static string ToString(bool value) { throw null; }
-
-        public static string ToString(byte value) { throw null; }
-
-        public static string ToString(char value) { throw null; }
-
-        public static string ToString(DateTime value, XmlDateTimeSerializationMode dateTimeOption) { throw null; }
-
-        public static string ToString(DateTimeOffset value, string format) { throw null; }
-
-        public static string ToString(DateTimeOffset value) { throw null; }
-
-        public static string ToString(decimal value) { throw null; }
-
-        public static string ToString(double value) { throw null; }
-
-        public static string ToString(Guid value) { throw null; }
-
-        public static string ToString(short value) { throw null; }
-
-        public static string ToString(int value) { throw null; }
-
-        public static string ToString(long value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(sbyte value) { throw null; }
-
-        public static string ToString(float value) { throw null; }
-
-        public static string ToString(TimeSpan value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(ushort value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(uint value) { throw null; }
-
-        [CLSCompliant(false)]
-        public static string ToString(ulong value) { throw null; }
-
-        public static TimeSpan ToTimeSpan(string s) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ushort ToUInt16(string s) { throw null; }
-
-        [CLSCompliant(false)]
-        public static uint ToUInt32(string s) { throw null; }
-
-        [CLSCompliant(false)]
-        public static ulong ToUInt64(string s) { throw null; }
-
-        public static string VerifyName(string name) { throw null; }
-
-        public static string VerifyNCName(string name) { throw null; }
-
-        public static string VerifyNMTOKEN(string name) { throw null; }
-
-        public static string VerifyPublicId(string publicId) { throw null; }
-
-        public static string VerifyWhitespace(string content) { throw null; }
-
-        public static string VerifyXmlChars(string content) { throw null; }
-    }
-
-    public enum XmlDateTimeSerializationMode
-    {
-        Local = 0,
-        Utc = 1,
-        Unspecified = 2,
-        RoundtripKind = 3
-    }
-
-    public partial class XmlException : Exception
-    {
-        public XmlException() { }
-
-        public XmlException(string message, Exception innerException, int lineNumber, int linePosition) { }
-
-        public XmlException(string message, Exception innerException) { }
-
-        public XmlException(string message) { }
-
-        public int LineNumber { get { throw null; } }
-
-        public int LinePosition { get { throw null; } }
-
-        public override string Message { get { throw null; } }
-    }
-
-    public partial class XmlNamespaceManager : Collections.IEnumerable, IXmlNamespaceResolver
-    {
-        public XmlNamespaceManager(XmlNameTable nameTable) { }
-
-        public virtual string DefaultNamespace { get { throw null; } }
-
-        public virtual XmlNameTable NameTable { get { throw null; } }
-
-        public virtual void AddNamespace(string prefix, string uri) { }
-
-        public virtual Collections.IEnumerator GetEnumerator() { throw null; }
-
-        public virtual Collections.Generic.IDictionary<string, string> GetNamespacesInScope(XmlNamespaceScope scope) { throw null; }
-
-        public virtual bool HasNamespace(string prefix) { throw null; }
-
-        public virtual string LookupNamespace(string prefix) { throw null; }
-
-        public virtual string LookupPrefix(string uri) { throw null; }
-
-        public virtual bool PopScope() { throw null; }
-
-        public virtual void PushScope() { }
-
-        public virtual void RemoveNamespace(string prefix, string uri) { }
-    }
-
-    public enum XmlNamespaceScope
-    {
-        All = 0,
-        ExcludeXml = 1,
-        Local = 2
-    }
-
-    public abstract partial class XmlNameTable
-    {
-        public abstract string Add(char[] array, int offset, int length);
-        public abstract string Add(string array);
-        public abstract string Get(char[] array, int offset, int length);
-        public abstract string Get(string array);
-    }
-
-    public enum XmlNodeType
-    {
-        None = 0,
-        Element = 1,
-        Attribute = 2,
-        Text = 3,
-        CDATA = 4,
-        EntityReference = 5,
-        Entity = 6,
-        ProcessingInstruction = 7,
-        Comment = 8,
-        Document = 9,
-        DocumentType = 10,
-        DocumentFragment = 11,
-        Notation = 12,
-        Whitespace = 13,
-        SignificantWhitespace = 14,
-        EndElement = 15,
-        EndEntity = 16,
-        XmlDeclaration = 17
-    }
-
-    public partial class XmlParserContext
-    {
-        public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace, Text.Encoding enc) { }
-
-        public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace) { }
-
-        public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace, Text.Encoding enc) { }
-
-        public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace) { }
-
-        public string BaseURI { get { throw null; } set { } }
-
-        public string DocTypeName { get { throw null; } set { } }
-
-        public Text.Encoding Encoding { get { throw null; } set { } }
-
-        public string InternalSubset { get { throw null; } set { } }
-
-        public XmlNamespaceManager NamespaceManager { get { throw null; } set { } }
-
-        public XmlNameTable NameTable { get { throw null; } set { } }
-
-        public string PublicId { get { throw null; } set { } }
-
-        public string SystemId { get { throw null; } set { } }
-
-        public string XmlLang { get { throw null; } set { } }
-
-        public XmlSpace XmlSpace { get { throw null; } set { } }
-    }
-
-    public partial class XmlQualifiedName
-    {
-        public static readonly XmlQualifiedName Empty;
-        public XmlQualifiedName() { }
-
-        public XmlQualifiedName(string name, string ns) { }
-
-        public XmlQualifiedName(string name) { }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public string Name { get { throw null; } }
-
-        public string Namespace { get { throw null; } }
-
-        public override bool Equals(object other) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(XmlQualifiedName a, XmlQualifiedName b) { throw null; }
-
-        public static bool operator !=(XmlQualifiedName a, XmlQualifiedName b) { throw null; }
-
-        public override string ToString() { throw null; }
-
-        public static string ToString(string name, string ns) { throw null; }
-    }
-
-    public abstract partial class XmlReader : IDisposable
-    {
-        public abstract int AttributeCount { get; }
-        public abstract string BaseURI { get; }
-
-        public virtual bool CanReadBinaryContent { get { throw null; } }
-
-        public virtual bool CanReadValueChunk { get { throw null; } }
-
-        public virtual bool CanResolveEntity { get { throw null; } }
-
-        public abstract int Depth { get; }
-        public abstract bool EOF { get; }
-
-        public virtual bool HasAttributes { get { throw null; } }
-
-        public virtual bool HasValue { get { throw null; } }
-
-        public virtual bool IsDefault { get { throw null; } }
-
-        public abstract bool IsEmptyElement { get; }
-
-        public virtual string this[int i] { get { throw null; } }
-
-        public virtual string this[string name, string namespaceURI] { get { throw null; } }
-
-        public virtual string this[string name] { get { throw null; } }
-
-        public abstract string LocalName { get; }
-
-        public virtual string Name { get { throw null; } }
-
-        public abstract string NamespaceURI { get; }
-        public abstract XmlNameTable NameTable { get; }
-        public abstract XmlNodeType NodeType { get; }
-        public abstract string Prefix { get; }
-        public abstract ReadState ReadState { get; }
-
-        public virtual XmlReaderSettings Settings { get { throw null; } }
-
-        public abstract string Value { get; }
-
-        public virtual Type ValueType { get { throw null; } }
-
-        public virtual string XmlLang { get { throw null; } }
-
-        public virtual XmlSpace XmlSpace { get { throw null; } }
-
-        public static XmlReader Create(IO.Stream input, XmlReaderSettings settings, XmlParserContext inputContext) { throw null; }
-
-        public static XmlReader Create(IO.Stream input, XmlReaderSettings settings) { throw null; }
-
-        public static XmlReader Create(IO.Stream input) { throw null; }
-
-        public static XmlReader Create(IO.TextReader input, XmlReaderSettings settings, XmlParserContext inputContext) { throw null; }
-
-        public static XmlReader Create(IO.TextReader input, XmlReaderSettings settings) { throw null; }
-
-        public static XmlReader Create(IO.TextReader input) { throw null; }
-
-        public static XmlReader Create(string inputUri, XmlReaderSettings settings) { throw null; }
-
-        public static XmlReader Create(string inputUri) { throw null; }
-
-        public static XmlReader Create(XmlReader reader, XmlReaderSettings settings) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract string GetAttribute(int i);
-        public abstract string GetAttribute(string name, string namespaceURI);
-        public abstract string GetAttribute(string name);
-        public virtual Threading.Tasks.Task<string> GetValueAsync() { throw null; }
-
-        public static bool IsName(string str) { throw null; }
-
-        public static bool IsNameToken(string str) { throw null; }
-
-        public virtual bool IsStartElement() { throw null; }
-
-        public virtual bool IsStartElement(string localname, string ns) { throw null; }
-
-        public virtual bool IsStartElement(string name) { throw null; }
-
-        public abstract string LookupNamespace(string prefix);
-        public virtual void MoveToAttribute(int i) { }
-
-        public abstract bool MoveToAttribute(string name, string ns);
-        public abstract bool MoveToAttribute(string name);
-        public virtual XmlNodeType MoveToContent() { throw null; }
-
-        public virtual Threading.Tasks.Task<XmlNodeType> MoveToContentAsync() { throw null; }
-
-        public abstract bool MoveToElement();
-        public abstract bool MoveToFirstAttribute();
-        public abstract bool MoveToNextAttribute();
-        public abstract bool Read();
-        public virtual Threading.Tasks.Task<bool> ReadAsync() { throw null; }
-
-        public abstract bool ReadAttributeValue();
-        public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver) { throw null; }
-
-        public virtual Threading.Tasks.Task<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver) { throw null; }
-
-        public virtual int ReadContentAsBase64(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadContentAsBase64Async(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual int ReadContentAsBinHex(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadContentAsBinHexAsync(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual bool ReadContentAsBoolean() { throw null; }
-
-        public virtual DateTimeOffset ReadContentAsDateTimeOffset() { throw null; }
-
-        public virtual decimal ReadContentAsDecimal() { throw null; }
-
-        public virtual double ReadContentAsDouble() { throw null; }
-
-        public virtual float ReadContentAsFloat() { throw null; }
-
-        public virtual int ReadContentAsInt() { throw null; }
-
-        public virtual long ReadContentAsLong() { throw null; }
-
-        public virtual object ReadContentAsObject() { throw null; }
-
-        public virtual Threading.Tasks.Task<object> ReadContentAsObjectAsync() { throw null; }
-
-        public virtual string ReadContentAsString() { throw null; }
-
-        public virtual Threading.Tasks.Task<string> ReadContentAsStringAsync() { throw null; }
-
-        public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI) { throw null; }
-
-        public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver) { throw null; }
-
-        public virtual Threading.Tasks.Task<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver) { throw null; }
-
-        public virtual int ReadElementContentAsBase64(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadElementContentAsBase64Async(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual int ReadElementContentAsBinHex(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadElementContentAsBinHexAsync(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual bool ReadElementContentAsBoolean() { throw null; }
-
-        public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI) { throw null; }
-
-        public virtual decimal ReadElementContentAsDecimal() { throw null; }
-
-        public virtual decimal ReadElementContentAsDecimal(string localName, string namespaceURI) { throw null; }
-
-        public virtual double ReadElementContentAsDouble() { throw null; }
-
-        public virtual double ReadElementContentAsDouble(string localName, string namespaceURI) { throw null; }
-
-        public virtual float ReadElementContentAsFloat() { throw null; }
-
-        public virtual float ReadElementContentAsFloat(string localName, string namespaceURI) { throw null; }
-
-        public virtual int ReadElementContentAsInt() { throw null; }
-
-        public virtual int ReadElementContentAsInt(string localName, string namespaceURI) { throw null; }
-
-        public virtual long ReadElementContentAsLong() { throw null; }
-
-        public virtual long ReadElementContentAsLong(string localName, string namespaceURI) { throw null; }
-
-        public virtual object ReadElementContentAsObject() { throw null; }
-
-        public virtual object ReadElementContentAsObject(string localName, string namespaceURI) { throw null; }
-
-        public virtual Threading.Tasks.Task<object> ReadElementContentAsObjectAsync() { throw null; }
-
-        public virtual string ReadElementContentAsString() { throw null; }
-
-        public virtual string ReadElementContentAsString(string localName, string namespaceURI) { throw null; }
-
-        public virtual Threading.Tasks.Task<string> ReadElementContentAsStringAsync() { throw null; }
-
-        public virtual void ReadEndElement() { }
-
-        public virtual string ReadInnerXml() { throw null; }
-
-        public virtual Threading.Tasks.Task<string> ReadInnerXmlAsync() { throw null; }
-
-        public virtual string ReadOuterXml() { throw null; }
-
-        public virtual Threading.Tasks.Task<string> ReadOuterXmlAsync() { throw null; }
-
-        public virtual void ReadStartElement() { }
-
-        public virtual void ReadStartElement(string localname, string ns) { }
-
-        public virtual void ReadStartElement(string name) { }
-
-        public virtual XmlReader ReadSubtree() { throw null; }
-
-        public virtual bool ReadToDescendant(string localName, string namespaceURI) { throw null; }
-
-        public virtual bool ReadToDescendant(string name) { throw null; }
-
-        public virtual bool ReadToFollowing(string localName, string namespaceURI) { throw null; }
-
-        public virtual bool ReadToFollowing(string name) { throw null; }
-
-        public virtual bool ReadToNextSibling(string localName, string namespaceURI) { throw null; }
-
-        public virtual bool ReadToNextSibling(string name) { throw null; }
-
-        public virtual int ReadValueChunk(char[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task<int> ReadValueChunkAsync(char[] buffer, int index, int count) { throw null; }
-
-        public abstract void ResolveEntity();
-        public virtual void Skip() { }
-
-        public virtual Threading.Tasks.Task SkipAsync() { throw null; }
-    }
-
-    public sealed partial class XmlReaderSettings
-    {
-        public bool Async { get { throw null; } set { } }
-
-        public bool CheckCharacters { get { throw null; } set { } }
-
-        public bool CloseInput { get { throw null; } set { } }
-
-        public ConformanceLevel ConformanceLevel { get { throw null; } set { } }
-
-        public DtdProcessing DtdProcessing { get { throw null; } set { } }
-
-        public bool IgnoreComments { get { throw null; } set { } }
-
-        public bool IgnoreProcessingInstructions { get { throw null; } set { } }
-
-        public bool IgnoreWhitespace { get { throw null; } set { } }
-
-        public int LineNumberOffset { get { throw null; } set { } }
-
-        public int LinePositionOffset { get { throw null; } set { } }
-
-        public long MaxCharactersFromEntities { get { throw null; } set { } }
-
-        public long MaxCharactersInDocument { get { throw null; } set { } }
-
-        public XmlNameTable NameTable { get { throw null; } set { } }
-
-        public XmlReaderSettings Clone() { throw null; }
-
-        public void Reset() { }
-    }
-
-    public enum XmlSpace
-    {
-        None = 0,
-        Default = 1,
-        Preserve = 2
-    }
-
-    public abstract partial class XmlWriter : IDisposable
-    {
-        public virtual XmlWriterSettings Settings { get { throw null; } }
-
-        public abstract WriteState WriteState { get; }
-
-        public virtual string XmlLang { get { throw null; } }
-
-        public virtual XmlSpace XmlSpace { get { throw null; } }
-
-        public static XmlWriter Create(IO.Stream output, XmlWriterSettings settings) { throw null; }
-
-        public static XmlWriter Create(IO.Stream output) { throw null; }
-
-        public static XmlWriter Create(IO.TextWriter output, XmlWriterSettings settings) { throw null; }
-
-        public static XmlWriter Create(IO.TextWriter output) { throw null; }
-
-        public static XmlWriter Create(Text.StringBuilder output, XmlWriterSettings settings) { throw null; }
-
-        public static XmlWriter Create(Text.StringBuilder output) { throw null; }
-
-        public static XmlWriter Create(XmlWriter output, XmlWriterSettings settings) { throw null; }
-
-        public static XmlWriter Create(XmlWriter output) { throw null; }
-
-        public void Dispose() { }
-
-        protected virtual void Dispose(bool disposing) { }
-
-        public abstract void Flush();
-        public virtual Threading.Tasks.Task FlushAsync() { throw null; }
-
-        public abstract string LookupPrefix(string ns);
-        public virtual void WriteAttributes(XmlReader reader, bool defattr) { }
-
-        public virtual Threading.Tasks.Task WriteAttributesAsync(XmlReader reader, bool defattr) { throw null; }
-
-        public void WriteAttributeString(string prefix, string localName, string ns, string value) { }
-
-        public void WriteAttributeString(string localName, string ns, string value) { }
-
-        public void WriteAttributeString(string localName, string value) { }
-
-        public Threading.Tasks.Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value) { throw null; }
-
-        public abstract void WriteBase64(byte[] buffer, int index, int count);
-        public virtual Threading.Tasks.Task WriteBase64Async(byte[] buffer, int index, int count) { throw null; }
-
-        public virtual void WriteBinHex(byte[] buffer, int index, int count) { }
-
-        public virtual Threading.Tasks.Task WriteBinHexAsync(byte[] buffer, int index, int count) { throw null; }
-
-        public abstract void WriteCData(string text);
-        public virtual Threading.Tasks.Task WriteCDataAsync(string text) { throw null; }
-
-        public abstract void WriteCharEntity(char ch);
-        public virtual Threading.Tasks.Task WriteCharEntityAsync(char ch) { throw null; }
-
-        public abstract void WriteChars(char[] buffer, int index, int count);
-        public virtual Threading.Tasks.Task WriteCharsAsync(char[] buffer, int index, int count) { throw null; }
-
-        public abstract void WriteComment(string text);
-        public virtual Threading.Tasks.Task WriteCommentAsync(string text) { throw null; }
-
-        public abstract void WriteDocType(string name, string pubid, string sysid, string subset);
-        public virtual Threading.Tasks.Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset) { throw null; }
-
-        public void WriteElementString(string prefix, string localName, string ns, string value) { }
-
-        public void WriteElementString(string localName, string ns, string value) { }
-
-        public void WriteElementString(string localName, string value) { }
-
-        public Threading.Tasks.Task WriteElementStringAsync(string prefix, string localName, string ns, string value) { throw null; }
-
-        public abstract void WriteEndAttribute();
-        protected internal virtual Threading.Tasks.Task WriteEndAttributeAsync() { throw null; }
-
-        public abstract void WriteEndDocument();
-        public virtual Threading.Tasks.Task WriteEndDocumentAsync() { throw null; }
-
-        public abstract void WriteEndElement();
-        public virtual Threading.Tasks.Task WriteEndElementAsync() { throw null; }
-
-        public abstract void WriteEntityRef(string name);
-        public virtual Threading.Tasks.Task WriteEntityRefAsync(string name) { throw null; }
-
-        public abstract void WriteFullEndElement();
-        public virtual Threading.Tasks.Task WriteFullEndElementAsync() { throw null; }
-
-        public virtual void WriteName(string name) { }
-
-        public virtual Threading.Tasks.Task WriteNameAsync(string name) { throw null; }
-
-        public virtual void WriteNmToken(string name) { }
-
-        public virtual Threading.Tasks.Task WriteNmTokenAsync(string name) { throw null; }
-
-        public virtual void WriteNode(XmlReader reader, bool defattr) { }
-
-        public virtual Threading.Tasks.Task WriteNodeAsync(XmlReader reader, bool defattr) { throw null; }
-
-        public abstract void WriteProcessingInstruction(string name, string text);
-        public virtual Threading.Tasks.Task WriteProcessingInstructionAsync(string name, string text) { throw null; }
-
-        public virtual void WriteQualifiedName(string localName, string ns) { }
-
-        public virtual Threading.Tasks.Task WriteQualifiedNameAsync(string localName, string ns) { throw null; }
-
-        public abstract void WriteRaw(char[] buffer, int index, int count);
-        public abstract void WriteRaw(string data);
-        public virtual Threading.Tasks.Task WriteRawAsync(char[] buffer, int index, int count) { throw null; }
-
-        public virtual Threading.Tasks.Task WriteRawAsync(string data) { throw null; }
-
-        public abstract void WriteStartAttribute(string prefix, string localName, string ns);
-        public void WriteStartAttribute(string localName, string ns) { }
-
-        public void WriteStartAttribute(string localName) { }
-
-        protected internal virtual Threading.Tasks.Task WriteStartAttributeAsync(string prefix, string localName, string ns) { throw null; }
-
-        public abstract void WriteStartDocument();
-        public abstract void WriteStartDocument(bool standalone);
-        public virtual Threading.Tasks.Task WriteStartDocumentAsync() { throw null; }
-
-        public virtual Threading.Tasks.Task WriteStartDocumentAsync(bool standalone) { throw null; }
-
-        public abstract void WriteStartElement(string prefix, string localName, string ns);
-        public void WriteStartElement(string localName, string ns) { }
-
-        public void WriteStartElement(string localName) { }
-
-        public virtual Threading.Tasks.Task WriteStartElementAsync(string prefix, string localName, string ns) { throw null; }
-
-        public abstract void WriteString(string text);
-        public virtual Threading.Tasks.Task WriteStringAsync(string text) { throw null; }
-
-        public abstract void WriteSurrogateCharEntity(char lowChar, char highChar);
-        public virtual Threading.Tasks.Task WriteSurrogateCharEntityAsync(char lowChar, char highChar) { throw null; }
-
-        public virtual void WriteValue(bool value) { }
-
-        public virtual void WriteValue(DateTime value) { }
-
-        public virtual void WriteValue(DateTimeOffset value) { }
-
-        public virtual void WriteValue(decimal value) { }
-
-        public virtual void WriteValue(double value) { }
-
-        public virtual void WriteValue(int value) { }
-
-        public virtual void WriteValue(long value) { }
-
-        public virtual void WriteValue(object value) { }
-
-        public virtual void WriteValue(float value) { }
-
-        public virtual void WriteValue(string value) { }
-
-        public abstract void WriteWhitespace(string ws);
-        public virtual Threading.Tasks.Task WriteWhitespaceAsync(string ws) { throw null; }
-    }
-
-    public sealed partial class XmlWriterSettings
-    {
-        public bool Async { get { throw null; } set { } }
-
-        public bool CheckCharacters { get { throw null; } set { } }
-
-        public bool CloseOutput { get { throw null; } set { } }
-
-        public ConformanceLevel ConformanceLevel { get { throw null; } set { } }
-
-        public Text.Encoding Encoding { get { throw null; } set { } }
-
-        public bool Indent { get { throw null; } set { } }
-
-        public string IndentChars { get { throw null; } set { } }
-
-        public NamespaceHandling NamespaceHandling { get { throw null; } set { } }
-
-        public string NewLineChars { get { throw null; } set { } }
-
-        public NewLineHandling NewLineHandling { get { throw null; } set { } }
-
-        public bool NewLineOnAttributes { get { throw null; } set { } }
-
-        public bool OmitXmlDeclaration { get { throw null; } set { } }
-
-        public bool WriteEndDocumentOnClose { get { throw null; } set { } }
-
-        public XmlWriterSettings Clone() { throw null; }
-
-        public void Reset() { }
-    }
-}
-
-namespace System.Xml.Schema
-{
-    public partial class XmlSchema
-    {
-        internal XmlSchema() { }
-    }
-
-    public enum XmlSchemaForm
-    {
-        None = 0,
-        Qualified = 1,
-        Unqualified = 2
-    }
-}
-
-namespace System.Xml.Serialization
-{
-    public partial interface IXmlSerializable
-    {
-        Schema.XmlSchema GetSchema();
-        void ReadXml(XmlReader reader);
-        void WriteXml(XmlWriter writer);
-    }
-
-    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface)]
-    public sealed partial class XmlSchemaProviderAttribute : Attribute
-    {
-        public XmlSchemaProviderAttribute(string methodName) { }
-
-        public bool IsAny { get { throw null; } set { } }
-
-        public string MethodName { get { throw null; } }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.xml.readerwriter/4.3.0/system.xml.readerwriter.nuspec b/src/referencePackages/src/system.xml.readerwriter/4.3.0/system.xml.readerwriter.nuspec
deleted file mode 100644
index a8d4e408..00000000
--- a/src/referencePackages/src/system.xml.readerwriter/4.3.0/system.xml.readerwriter.nuspec
+++ /dev/null
@@ -1,56 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Xml.ReaderWriter</id>
-    <version>4.3.0</version>
-    <title>System.Xml.ReaderWriter</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides provides a fast, non-cached, forward-only way to read and write Extensible Markup Language (XML) data.
-
-Commonly Used Types:
-System.Xml.XmlNodeType
-System.Xml.XmlException
-System.Xml.XmlReader
-System.Xml.XmlWriter
-System.Xml.IXmlLineInfo
-System.Xml.XmlNameTable
-System.Xml.IXmlNamespaceResolver
-System.Xml.XmlNamespaceManager
-System.Xml.XmlQualifiedName
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Text.Encoding" version="4.3.0" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Globalization" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.IO.FileSystem" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO.FileSystem.Primitives" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime.InteropServices" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Text.Encoding" version="4.3.0" />
-        <dependency id="System.Text.Encoding.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Text.RegularExpressions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Threading.Tasks" version="4.3.0" />
-        <dependency id="System.Threading.Tasks.Extensions" version="4.3.0" exclude="Compile" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/referencePackages/src/system.xml.xdocument/4.3.0/System.Xml.XDocument.4.3.0.csproj b/src/referencePackages/src/system.xml.xdocument/4.3.0/System.Xml.XDocument.4.3.0.csproj
deleted file mode 100644
index 6dafd47d..00000000
--- a/src/referencePackages/src/system.xml.xdocument/4.3.0/System.Xml.XDocument.4.3.0.csproj
+++ /dev/null
@@ -1,29 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFrameworks>netstandard1.0;netstandard1.3</TargetFrameworks>
-    <AssemblyName>System.Xml.XDocument</AssemblyName>
-  </PropertyGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.0'">
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Xml.ReaderWriter" Version="4.3.0" />
-  </ItemGroup>
-
-  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
-    <PackageReference Include="System.Collections" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Debug" Version="4.3.0" />
-    <PackageReference Include="System.Diagnostics.Tools" Version="4.3.0" />
-    <PackageReference Include="System.Globalization" Version="4.3.0" />
-    <PackageReference Include="System.IO" Version="4.3.0" />
-    <PackageReference Include="System.Reflection" Version="4.3.0" />
-    <PackageReference Include="System.Resources.ResourceManager" Version="4.3.0" />
-    <PackageReference Include="System.Runtime" Version="4.3.0" />
-    <PackageReference Include="System.Runtime.Extensions" Version="4.3.0" />
-    <PackageReference Include="System.Text.Encoding" Version="4.3.0" />
-    <PackageReference Include="System.Threading" Version="4.3.0" />
-    <PackageReference Include="System.Xml.ReaderWriter" Version="4.3.0" />
-  </ItemGroup>
-
-</Project>
diff --git a/src/referencePackages/src/system.xml.xdocument/4.3.0/ref/netstandard1.0/System.Xml.XDocument.cs b/src/referencePackages/src/system.xml.xdocument/4.3.0/ref/netstandard1.0/System.Xml.XDocument.cs
deleted file mode 100644
index fd565209..00000000
--- a/src/referencePackages/src/system.xml.xdocument/4.3.0/ref/netstandard1.0/System.Xml.XDocument.cs
+++ /dev/null
@@ -1,785 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Reflection.AssemblyTitle("System.Xml.XDocument.dll")]
-[assembly: System.Reflection.AssemblyDescription("System.Xml.XDocument.dll")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Xml.XDocument.dll")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("4.0.30319.17929")]
-[assembly: System.Reflection.AssemblyInformationalVersion("4.0.30319.17929")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.0.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Xml.Linq
-{
-    public static partial class Extensions
-    {
-        public static Collections.Generic.IEnumerable<XElement> Ancestors<T>(this Collections.Generic.IEnumerable<T> source, XName name)
-            where T : XNode { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> Ancestors<T>(this Collections.Generic.IEnumerable<T> source)
-            where T : XNode { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> AncestorsAndSelf(this Collections.Generic.IEnumerable<XElement> source, XName name) { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> AncestorsAndSelf(this Collections.Generic.IEnumerable<XElement> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<XAttribute> Attributes(this Collections.Generic.IEnumerable<XElement> source, XName name) { throw null; }
-
-        public static Collections.Generic.IEnumerable<XAttribute> Attributes(this Collections.Generic.IEnumerable<XElement> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<XNode> DescendantNodes<T>(this Collections.Generic.IEnumerable<T> source)
-            where T : XContainer { throw null; }
-
-        public static Collections.Generic.IEnumerable<XNode> DescendantNodesAndSelf(this Collections.Generic.IEnumerable<XElement> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> Descendants<T>(this Collections.Generic.IEnumerable<T> source, XName name)
-            where T : XContainer { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> Descendants<T>(this Collections.Generic.IEnumerable<T> source)
-            where T : XContainer { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> DescendantsAndSelf(this Collections.Generic.IEnumerable<XElement> source, XName name) { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> DescendantsAndSelf(this Collections.Generic.IEnumerable<XElement> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> Elements<T>(this Collections.Generic.IEnumerable<T> source, XName name)
-            where T : XContainer { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> Elements<T>(this Collections.Generic.IEnumerable<T> source)
-            where T : XContainer { throw null; }
-
-        public static Collections.Generic.IEnumerable<T> InDocumentOrder<T>(this Collections.Generic.IEnumerable<T> source)
-            where T : XNode { throw null; }
-
-        public static Collections.Generic.IEnumerable<XNode> Nodes<T>(this Collections.Generic.IEnumerable<T> source)
-            where T : XContainer { throw null; }
-
-        public static void Remove(this Collections.Generic.IEnumerable<XAttribute> source) { }
-
-        public static void Remove<T>(this Collections.Generic.IEnumerable<T> source)
-            where T : XNode { }
-    }
-
-    [Flags]
-    public enum LoadOptions
-    {
-        None = 0,
-        PreserveWhitespace = 1,
-        SetBaseUri = 2,
-        SetLineInfo = 4
-    }
-
-    [Flags]
-    public enum ReaderOptions
-    {
-        None = 0,
-        OmitDuplicateNamespaces = 1
-    }
-
-    [Flags]
-    public enum SaveOptions
-    {
-        None = 0,
-        DisableFormatting = 1,
-        OmitDuplicateNamespaces = 2
-    }
-
-    public partial class XAttribute : XObject
-    {
-        public XAttribute(XAttribute other) { }
-
-        public XAttribute(XName name, object value) { }
-
-        public static Collections.Generic.IEnumerable<XAttribute> EmptySequence { get { throw null; } }
-
-        public bool IsNamespaceDeclaration { get { throw null; } }
-
-        public XName Name { get { throw null; } }
-
-        public XAttribute NextAttribute { get { throw null; } }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public XAttribute PreviousAttribute { get { throw null; } }
-
-        public string Value { get { throw null; } set { } }
-
-        [CLSCompliant(false)]
-        public static explicit operator bool(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTime(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTimeOffset(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator decimal(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator double(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Guid(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator int(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator long(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator bool?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTime?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTimeOffset?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator decimal?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator double?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Guid?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator int?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator long?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator float?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator TimeSpan?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator uint?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator ulong?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator float(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator string(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator TimeSpan(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator uint(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator ulong(XAttribute attribute) { throw null; }
-
-        public void Remove() { }
-
-        public void SetValue(object value) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class XCData : XText
-    {
-        public XCData(string value) : base(default(string)!) { }
-
-        public XCData(XCData other) : base(default(string)!) { }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public override void WriteTo(XmlWriter writer) { }
-    }
-
-    public partial class XComment : XNode
-    {
-        public XComment(string value) { }
-
-        public XComment(XComment other) { }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public string Value { get { throw null; } set { } }
-
-        public override void WriteTo(XmlWriter writer) { }
-    }
-
-    public abstract partial class XContainer : XNode
-    {
-        internal XContainer() { }
-
-        public XNode FirstNode { get { throw null; } }
-
-        public XNode LastNode { get { throw null; } }
-
-        public void Add(object content) { }
-
-        public void Add(params object[] content) { }
-
-        public void AddFirst(object content) { }
-
-        public void AddFirst(params object[] content) { }
-
-        public XmlWriter CreateWriter() { throw null; }
-
-        public Collections.Generic.IEnumerable<XNode> DescendantNodes() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> Descendants() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> Descendants(XName name) { throw null; }
-
-        public XElement Element(XName name) { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> Elements() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> Elements(XName name) { throw null; }
-
-        public Collections.Generic.IEnumerable<XNode> Nodes() { throw null; }
-
-        public void RemoveNodes() { }
-
-        public void ReplaceNodes(object content) { }
-
-        public void ReplaceNodes(params object[] content) { }
-    }
-
-    public partial class XDeclaration
-    {
-        public XDeclaration(string version, string encoding, string standalone) { }
-
-        public XDeclaration(XDeclaration other) { }
-
-        public string Encoding { get { throw null; } set { } }
-
-        public string Standalone { get { throw null; } set { } }
-
-        public string Version { get { throw null; } set { } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class XDocument : XContainer
-    {
-        public XDocument() { }
-
-        public XDocument(params object[] content) { }
-
-        public XDocument(XDeclaration declaration, params object[] content) { }
-
-        public XDocument(XDocument other) { }
-
-        public XDeclaration Declaration { get { throw null; } set { } }
-
-        public XDocumentType DocumentType { get { throw null; } }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public XElement Root { get { throw null; } }
-
-        public static XDocument Load(IO.Stream stream, LoadOptions options) { throw null; }
-
-        public static XDocument Load(IO.Stream stream) { throw null; }
-
-        public static XDocument Load(IO.TextReader textReader, LoadOptions options) { throw null; }
-
-        public static XDocument Load(IO.TextReader textReader) { throw null; }
-
-        public static XDocument Load(string uri, LoadOptions options) { throw null; }
-
-        public static XDocument Load(string uri) { throw null; }
-
-        public static XDocument Load(XmlReader reader, LoadOptions options) { throw null; }
-
-        public static XDocument Load(XmlReader reader) { throw null; }
-
-        public static XDocument Parse(string text, LoadOptions options) { throw null; }
-
-        public static XDocument Parse(string text) { throw null; }
-
-        public void Save(IO.Stream stream, SaveOptions options) { }
-
-        public void Save(IO.Stream stream) { }
-
-        public void Save(IO.TextWriter textWriter, SaveOptions options) { }
-
-        public void Save(IO.TextWriter textWriter) { }
-
-        public void Save(XmlWriter writer) { }
-
-        public override void WriteTo(XmlWriter writer) { }
-    }
-
-    public partial class XDocumentType : XNode
-    {
-        public XDocumentType(string name, string publicId, string systemId, string internalSubset) { }
-
-        public XDocumentType(XDocumentType other) { }
-
-        public string InternalSubset { get { throw null; } set { } }
-
-        public string Name { get { throw null; } set { } }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public string PublicId { get { throw null; } set { } }
-
-        public string SystemId { get { throw null; } set { } }
-
-        public override void WriteTo(XmlWriter writer) { }
-    }
-
-    public partial class XElement : XContainer
-    {
-        public XElement(XElement other) { }
-
-        public XElement(XName name, object content) { }
-
-        public XElement(XName name, params object[] content) { }
-
-        public XElement(XName name) { }
-
-        public XElement(XStreamingElement other) { }
-
-        public static Collections.Generic.IEnumerable<XElement> EmptySequence { get { throw null; } }
-
-        public XAttribute FirstAttribute { get { throw null; } }
-
-        public bool HasAttributes { get { throw null; } }
-
-        public bool HasElements { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public XAttribute LastAttribute { get { throw null; } }
-
-        public XName Name { get { throw null; } set { } }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public string Value { get { throw null; } set { } }
-
-        public Collections.Generic.IEnumerable<XElement> AncestorsAndSelf() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> AncestorsAndSelf(XName name) { throw null; }
-
-        public XAttribute Attribute(XName name) { throw null; }
-
-        public Collections.Generic.IEnumerable<XAttribute> Attributes() { throw null; }
-
-        public Collections.Generic.IEnumerable<XAttribute> Attributes(XName name) { throw null; }
-
-        public Collections.Generic.IEnumerable<XNode> DescendantNodesAndSelf() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> DescendantsAndSelf() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> DescendantsAndSelf(XName name) { throw null; }
-
-        public XNamespace GetDefaultNamespace() { throw null; }
-
-        public XNamespace GetNamespaceOfPrefix(string prefix) { throw null; }
-
-        public string GetPrefixOfNamespace(XNamespace ns) { throw null; }
-
-        public static XElement Load(IO.Stream stream, LoadOptions options) { throw null; }
-
-        public static XElement Load(IO.Stream stream) { throw null; }
-
-        public static XElement Load(IO.TextReader textReader, LoadOptions options) { throw null; }
-
-        public static XElement Load(IO.TextReader textReader) { throw null; }
-
-        public static XElement Load(string uri, LoadOptions options) { throw null; }
-
-        public static XElement Load(string uri) { throw null; }
-
-        public static XElement Load(XmlReader reader, LoadOptions options) { throw null; }
-
-        public static XElement Load(XmlReader reader) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator bool(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTime(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTimeOffset(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator decimal(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator double(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Guid(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator int(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator long(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator bool?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTime?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTimeOffset?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator decimal?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator double?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Guid?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator int?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator long?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator float?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator TimeSpan?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator uint?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator ulong?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator float(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator string(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator TimeSpan(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator uint(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator ulong(XElement element) { throw null; }
-
-        public static XElement Parse(string text, LoadOptions options) { throw null; }
-
-        public static XElement Parse(string text) { throw null; }
-
-        public void RemoveAll() { }
-
-        public void RemoveAttributes() { }
-
-        public void ReplaceAll(object content) { }
-
-        public void ReplaceAll(params object[] content) { }
-
-        public void ReplaceAttributes(object content) { }
-
-        public void ReplaceAttributes(params object[] content) { }
-
-        public void Save(IO.Stream stream, SaveOptions options) { }
-
-        public void Save(IO.Stream stream) { }
-
-        public void Save(IO.TextWriter textWriter, SaveOptions options) { }
-
-        public void Save(IO.TextWriter textWriter) { }
-
-        public void Save(XmlWriter writer) { }
-
-        public void SetAttributeValue(XName name, object value) { }
-
-        public void SetElementValue(XName name, object value) { }
-
-        public void SetValue(object value) { }
-
-        public override void WriteTo(XmlWriter writer) { }
-    }
-
-    public sealed partial class XName : IEquatable<XName>
-    {
-        internal XName() { }
-
-        public string LocalName { get { throw null; } }
-
-        public XNamespace Namespace { get { throw null; } }
-
-        public string NamespaceName { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public static XName Get(string localName, string namespaceName) { throw null; }
-
-        public static XName Get(string expandedName) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(XName left, XName right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator XName(string expandedName) { throw null; }
-
-        public static bool operator !=(XName left, XName right) { throw null; }
-
-        bool IEquatable<XName>.Equals(XName other) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public sealed partial class XNamespace
-    {
-        internal XNamespace() { }
-
-        public string NamespaceName { get { throw null; } }
-
-        public static XNamespace None { get { throw null; } }
-
-        public static XNamespace Xml { get { throw null; } }
-
-        public static XNamespace Xmlns { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public static XNamespace Get(string namespaceName) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public XName GetName(string localName) { throw null; }
-
-        public static XName operator +(XNamespace ns, string localName) { throw null; }
-
-        public static bool operator ==(XNamespace left, XNamespace right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator XNamespace(string namespaceName) { throw null; }
-
-        public static bool operator !=(XNamespace left, XNamespace right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public abstract partial class XNode : XObject
-    {
-        internal XNode() { }
-
-        public static XNodeDocumentOrderComparer DocumentOrderComparer { get { throw null; } }
-
-        public static XNodeEqualityComparer EqualityComparer { get { throw null; } }
-
-        public XNode NextNode { get { throw null; } }
-
-        public XNode PreviousNode { get { throw null; } }
-
-        public void AddAfterSelf(object content) { }
-
-        public void AddAfterSelf(params object[] content) { }
-
-        public void AddBeforeSelf(object content) { }
-
-        public void AddBeforeSelf(params object[] content) { }
-
-        public Collections.Generic.IEnumerable<XElement> Ancestors() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> Ancestors(XName name) { throw null; }
-
-        public static int CompareDocumentOrder(XNode n1, XNode n2) { throw null; }
-
-        public XmlReader CreateReader() { throw null; }
-
-        public XmlReader CreateReader(ReaderOptions readerOptions) { throw null; }
-
-        public static bool DeepEquals(XNode n1, XNode n2) { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> ElementsAfterSelf() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> ElementsAfterSelf(XName name) { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> ElementsBeforeSelf() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> ElementsBeforeSelf(XName name) { throw null; }
-
-        public bool IsAfter(XNode node) { throw null; }
-
-        public bool IsBefore(XNode node) { throw null; }
-
-        public Collections.Generic.IEnumerable<XNode> NodesAfterSelf() { throw null; }
-
-        public Collections.Generic.IEnumerable<XNode> NodesBeforeSelf() { throw null; }
-
-        public static XNode ReadFrom(XmlReader reader) { throw null; }
-
-        public void Remove() { }
-
-        public void ReplaceWith(object content) { }
-
-        public void ReplaceWith(params object[] content) { }
-
-        public override string ToString() { throw null; }
-
-        public string ToString(SaveOptions options) { throw null; }
-
-        public abstract void WriteTo(XmlWriter writer);
-    }
-
-    public sealed partial class XNodeDocumentOrderComparer : Collections.Generic.IComparer<XNode>, Collections.IComparer
-    {
-        public int Compare(XNode x, XNode y) { throw null; }
-
-        int Collections.IComparer.Compare(object x, object y) { throw null; }
-    }
-
-    public sealed partial class XNodeEqualityComparer : Collections.Generic.IEqualityComparer<XNode>, Collections.IEqualityComparer
-    {
-        public bool Equals(XNode x, XNode y) { throw null; }
-
-        public int GetHashCode(XNode obj) { throw null; }
-
-        bool Collections.IEqualityComparer.Equals(object x, object y) { throw null; }
-
-        int Collections.IEqualityComparer.GetHashCode(object obj) { throw null; }
-    }
-
-    public abstract partial class XObject : IXmlLineInfo
-    {
-        internal XObject() { }
-
-        public string BaseUri { get { throw null; } }
-
-        public XDocument Document { get { throw null; } }
-
-        public abstract XmlNodeType NodeType { get; }
-
-        public XElement Parent { get { throw null; } }
-
-        int IXmlLineInfo.LineNumber { get { throw null; } }
-
-        int IXmlLineInfo.LinePosition { get { throw null; } }
-
-        public event EventHandler<XObjectChangeEventArgs> Changed { add { } remove { } }
-
-        public event EventHandler<XObjectChangeEventArgs> Changing { add { } remove { } }
-
-        public void AddAnnotation(object annotation) { }
-
-        public object Annotation(Type type) { throw null; }
-
-        public T Annotation<T>()
-            where T : class { throw null; }
-
-        public Collections.Generic.IEnumerable<object> Annotations(Type type) { throw null; }
-
-        public Collections.Generic.IEnumerable<T> Annotations<T>()
-            where T : class { throw null; }
-
-        public void RemoveAnnotations(Type type) { }
-
-        public void RemoveAnnotations<T>()
-            where T : class { }
-
-        bool IXmlLineInfo.HasLineInfo() { throw null; }
-    }
-
-    public enum XObjectChange
-    {
-        Add = 0,
-        Remove = 1,
-        Name = 2,
-        Value = 3
-    }
-
-    public partial class XObjectChangeEventArgs : EventArgs
-    {
-        public static readonly XObjectChangeEventArgs Add;
-        public static readonly XObjectChangeEventArgs Name;
-        public static readonly XObjectChangeEventArgs Remove;
-        public static readonly XObjectChangeEventArgs Value;
-        public XObjectChangeEventArgs(XObjectChange objectChange) { }
-
-        public XObjectChange ObjectChange { get { throw null; } }
-    }
-
-    public partial class XProcessingInstruction : XNode
-    {
-        public XProcessingInstruction(string target, string data) { }
-
-        public XProcessingInstruction(XProcessingInstruction other) { }
-
-        public string Data { get { throw null; } set { } }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public string Target { get { throw null; } set { } }
-
-        public override void WriteTo(XmlWriter writer) { }
-    }
-
-    public partial class XStreamingElement
-    {
-        public XStreamingElement(XName name, object content) { }
-
-        public XStreamingElement(XName name, params object[] content) { }
-
-        public XStreamingElement(XName name) { }
-
-        public XName Name { get { throw null; } set { } }
-
-        public void Add(object content) { }
-
-        public void Add(params object[] content) { }
-
-        public void Save(IO.Stream stream, SaveOptions options) { }
-
-        public void Save(IO.Stream stream) { }
-
-        public void Save(IO.TextWriter textWriter, SaveOptions options) { }
-
-        public void Save(IO.TextWriter textWriter) { }
-
-        public void Save(XmlWriter writer) { }
-
-        public override string ToString() { throw null; }
-
-        public string ToString(SaveOptions options) { throw null; }
-
-        public void WriteTo(XmlWriter writer) { }
-    }
-
-    public partial class XText : XNode
-    {
-        public XText(string value) { }
-
-        public XText(XText other) { }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public string Value { get { throw null; } set { } }
-
-        public override void WriteTo(XmlWriter writer) { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.xml.xdocument/4.3.0/ref/netstandard1.3/System.Xml.XDocument.cs b/src/referencePackages/src/system.xml.xdocument/4.3.0/ref/netstandard1.3/System.Xml.XDocument.cs
deleted file mode 100644
index 50e36792..00000000
--- a/src/referencePackages/src/system.xml.xdocument/4.3.0/ref/netstandard1.3/System.Xml.XDocument.cs
+++ /dev/null
@@ -1,794 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-// ------------------------------------------------------------------------------
-// Changes to this file must follow the http://aka.ms/api-review process.
-// ------------------------------------------------------------------------------
-[assembly: System.Runtime.CompilerServices.CompilationRelaxations(8)]
-[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows = true)]
-[assembly: System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
-[assembly: System.Security.AllowPartiallyTrustedCallers]
-[assembly: System.Runtime.CompilerServices.ReferenceAssembly]
-[assembly: System.Reflection.AssemblyTitle("System.Xml.XDocument")]
-[assembly: System.Reflection.AssemblyDescription("System.Xml.XDocument")]
-[assembly: System.Reflection.AssemblyDefaultAlias("System.Xml.XDocument")]
-[assembly: System.Reflection.AssemblyCompany("Microsoft Corporation")]
-[assembly: System.Reflection.AssemblyProduct("Microsoft® .NET Framework")]
-[assembly: System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")]
-[assembly: System.Reflection.AssemblyFileVersion("1.0.24212.01")]
-[assembly: System.Reflection.AssemblyInformationalVersion("1.0.24212.01. Commit Hash: 9688ddbb62c04189cac4c4a06e31e93377dccd41")]
-[assembly: System.CLSCompliant(true)]
-[assembly: System.Reflection.AssemblyMetadata(".NETFrameworkAssembly", "")]
-[assembly: System.Reflection.AssemblyMetadata("Serviceable", "True")]
-[assembly: System.Reflection.AssemblyVersionAttribute("4.0.10.0")]
-[assembly: System.Reflection.AssemblyFlagsAttribute((System.Reflection.AssemblyNameFlags)0x70)]
-namespace System.Xml.Linq
-{
-    public static partial class Extensions
-    {
-        public static Collections.Generic.IEnumerable<XElement> Ancestors<T>(this Collections.Generic.IEnumerable<T> source, XName name)
-            where T : XNode { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> Ancestors<T>(this Collections.Generic.IEnumerable<T> source)
-            where T : XNode { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> AncestorsAndSelf(this Collections.Generic.IEnumerable<XElement> source, XName name) { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> AncestorsAndSelf(this Collections.Generic.IEnumerable<XElement> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<XAttribute> Attributes(this Collections.Generic.IEnumerable<XElement> source, XName name) { throw null; }
-
-        public static Collections.Generic.IEnumerable<XAttribute> Attributes(this Collections.Generic.IEnumerable<XElement> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<XNode> DescendantNodes<T>(this Collections.Generic.IEnumerable<T> source)
-            where T : XContainer { throw null; }
-
-        public static Collections.Generic.IEnumerable<XNode> DescendantNodesAndSelf(this Collections.Generic.IEnumerable<XElement> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> Descendants<T>(this Collections.Generic.IEnumerable<T> source, XName name)
-            where T : XContainer { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> Descendants<T>(this Collections.Generic.IEnumerable<T> source)
-            where T : XContainer { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> DescendantsAndSelf(this Collections.Generic.IEnumerable<XElement> source, XName name) { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> DescendantsAndSelf(this Collections.Generic.IEnumerable<XElement> source) { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> Elements<T>(this Collections.Generic.IEnumerable<T> source, XName name)
-            where T : XContainer { throw null; }
-
-        public static Collections.Generic.IEnumerable<XElement> Elements<T>(this Collections.Generic.IEnumerable<T> source)
-            where T : XContainer { throw null; }
-
-        public static Collections.Generic.IEnumerable<T> InDocumentOrder<T>(this Collections.Generic.IEnumerable<T> source)
-            where T : XNode { throw null; }
-
-        public static Collections.Generic.IEnumerable<XNode> Nodes<T>(this Collections.Generic.IEnumerable<T> source)
-            where T : XContainer { throw null; }
-
-        public static void Remove(this Collections.Generic.IEnumerable<XAttribute> source) { }
-
-        public static void Remove<T>(this Collections.Generic.IEnumerable<T> source)
-            where T : XNode { }
-    }
-
-    [Flags]
-    public enum LoadOptions
-    {
-        None = 0,
-        PreserveWhitespace = 1,
-        SetBaseUri = 2,
-        SetLineInfo = 4
-    }
-
-    [Flags]
-    public enum ReaderOptions
-    {
-        None = 0,
-        OmitDuplicateNamespaces = 1
-    }
-
-    [Flags]
-    public enum SaveOptions
-    {
-        None = 0,
-        DisableFormatting = 1,
-        OmitDuplicateNamespaces = 2
-    }
-
-    public partial class XAttribute : XObject
-    {
-        public XAttribute(XAttribute other) { }
-
-        public XAttribute(XName name, object value) { }
-
-        public static Collections.Generic.IEnumerable<XAttribute> EmptySequence { get { throw null; } }
-
-        public bool IsNamespaceDeclaration { get { throw null; } }
-
-        public XName Name { get { throw null; } }
-
-        public XAttribute NextAttribute { get { throw null; } }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public XAttribute PreviousAttribute { get { throw null; } }
-
-        public string Value { get { throw null; } set { } }
-
-        [CLSCompliant(false)]
-        public static explicit operator bool(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTime(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTimeOffset(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator decimal(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator double(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Guid(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator int(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator long(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator bool?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTime?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTimeOffset?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator decimal?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator double?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Guid?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator int?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator long?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator float?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator TimeSpan?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator uint?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator ulong?(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator float(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator string(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator TimeSpan(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator uint(XAttribute attribute) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator ulong(XAttribute attribute) { throw null; }
-
-        public void Remove() { }
-
-        public void SetValue(object value) { }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class XCData : XText
-    {
-        public XCData(string value) : base(default(string)!) { }
-
-        public XCData(XCData other) : base(default(string)!) { }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public override void WriteTo(XmlWriter writer) { }
-    }
-
-    public partial class XComment : XNode
-    {
-        public XComment(string value) { }
-
-        public XComment(XComment other) { }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public string Value { get { throw null; } set { } }
-
-        public override void WriteTo(XmlWriter writer) { }
-    }
-
-    public abstract partial class XContainer : XNode
-    {
-        internal XContainer() { }
-
-        public XNode FirstNode { get { throw null; } }
-
-        public XNode LastNode { get { throw null; } }
-
-        public void Add(object content) { }
-
-        public void Add(params object[] content) { }
-
-        public void AddFirst(object content) { }
-
-        public void AddFirst(params object[] content) { }
-
-        public XmlWriter CreateWriter() { throw null; }
-
-        public Collections.Generic.IEnumerable<XNode> DescendantNodes() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> Descendants() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> Descendants(XName name) { throw null; }
-
-        public XElement Element(XName name) { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> Elements() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> Elements(XName name) { throw null; }
-
-        public Collections.Generic.IEnumerable<XNode> Nodes() { throw null; }
-
-        public void RemoveNodes() { }
-
-        public void ReplaceNodes(object content) { }
-
-        public void ReplaceNodes(params object[] content) { }
-    }
-
-    public partial class XDeclaration
-    {
-        public XDeclaration(string version, string encoding, string standalone) { }
-
-        public XDeclaration(XDeclaration other) { }
-
-        public string Encoding { get { throw null; } set { } }
-
-        public string Standalone { get { throw null; } set { } }
-
-        public string Version { get { throw null; } set { } }
-
-        public override string ToString() { throw null; }
-    }
-
-    public partial class XDocument : XContainer
-    {
-        public XDocument() { }
-
-        public XDocument(params object[] content) { }
-
-        public XDocument(XDeclaration declaration, params object[] content) { }
-
-        public XDocument(XDocument other) { }
-
-        public XDeclaration Declaration { get { throw null; } set { } }
-
-        public XDocumentType DocumentType { get { throw null; } }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public XElement Root { get { throw null; } }
-
-        public static XDocument Load(IO.Stream stream, LoadOptions options) { throw null; }
-
-        public static XDocument Load(IO.Stream stream) { throw null; }
-
-        public static XDocument Load(IO.TextReader textReader, LoadOptions options) { throw null; }
-
-        public static XDocument Load(IO.TextReader textReader) { throw null; }
-
-        public static XDocument Load(string uri, LoadOptions options) { throw null; }
-
-        public static XDocument Load(string uri) { throw null; }
-
-        public static XDocument Load(XmlReader reader, LoadOptions options) { throw null; }
-
-        public static XDocument Load(XmlReader reader) { throw null; }
-
-        public static XDocument Parse(string text, LoadOptions options) { throw null; }
-
-        public static XDocument Parse(string text) { throw null; }
-
-        public void Save(IO.Stream stream, SaveOptions options) { }
-
-        public void Save(IO.Stream stream) { }
-
-        public void Save(IO.TextWriter textWriter, SaveOptions options) { }
-
-        public void Save(IO.TextWriter textWriter) { }
-
-        public void Save(XmlWriter writer) { }
-
-        public override void WriteTo(XmlWriter writer) { }
-    }
-
-    public partial class XDocumentType : XNode
-    {
-        public XDocumentType(string name, string publicId, string systemId, string internalSubset) { }
-
-        public XDocumentType(XDocumentType other) { }
-
-        public string InternalSubset { get { throw null; } set { } }
-
-        public string Name { get { throw null; } set { } }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public string PublicId { get { throw null; } set { } }
-
-        public string SystemId { get { throw null; } set { } }
-
-        public override void WriteTo(XmlWriter writer) { }
-    }
-
-    public partial class XElement : XContainer, Serialization.IXmlSerializable
-    {
-        public XElement(XElement other) { }
-
-        public XElement(XName name, object content) { }
-
-        public XElement(XName name, params object[] content) { }
-
-        public XElement(XName name) { }
-
-        public XElement(XStreamingElement other) { }
-
-        public static Collections.Generic.IEnumerable<XElement> EmptySequence { get { throw null; } }
-
-        public XAttribute FirstAttribute { get { throw null; } }
-
-        public bool HasAttributes { get { throw null; } }
-
-        public bool HasElements { get { throw null; } }
-
-        public bool IsEmpty { get { throw null; } }
-
-        public XAttribute LastAttribute { get { throw null; } }
-
-        public XName Name { get { throw null; } set { } }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public string Value { get { throw null; } set { } }
-
-        public Collections.Generic.IEnumerable<XElement> AncestorsAndSelf() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> AncestorsAndSelf(XName name) { throw null; }
-
-        public XAttribute Attribute(XName name) { throw null; }
-
-        public Collections.Generic.IEnumerable<XAttribute> Attributes() { throw null; }
-
-        public Collections.Generic.IEnumerable<XAttribute> Attributes(XName name) { throw null; }
-
-        public Collections.Generic.IEnumerable<XNode> DescendantNodesAndSelf() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> DescendantsAndSelf() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> DescendantsAndSelf(XName name) { throw null; }
-
-        public XNamespace GetDefaultNamespace() { throw null; }
-
-        public XNamespace GetNamespaceOfPrefix(string prefix) { throw null; }
-
-        public string GetPrefixOfNamespace(XNamespace ns) { throw null; }
-
-        public static XElement Load(IO.Stream stream, LoadOptions options) { throw null; }
-
-        public static XElement Load(IO.Stream stream) { throw null; }
-
-        public static XElement Load(IO.TextReader textReader, LoadOptions options) { throw null; }
-
-        public static XElement Load(IO.TextReader textReader) { throw null; }
-
-        public static XElement Load(string uri, LoadOptions options) { throw null; }
-
-        public static XElement Load(string uri) { throw null; }
-
-        public static XElement Load(XmlReader reader, LoadOptions options) { throw null; }
-
-        public static XElement Load(XmlReader reader) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator bool(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTime(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTimeOffset(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator decimal(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator double(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Guid(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator int(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator long(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator bool?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTime?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator DateTimeOffset?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator decimal?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator double?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator Guid?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator int?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator long?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator float?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator TimeSpan?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator uint?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator ulong?(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator float(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator string(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator TimeSpan(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator uint(XElement element) { throw null; }
-
-        [CLSCompliant(false)]
-        public static explicit operator ulong(XElement element) { throw null; }
-
-        public static XElement Parse(string text, LoadOptions options) { throw null; }
-
-        public static XElement Parse(string text) { throw null; }
-
-        public void RemoveAll() { }
-
-        public void RemoveAttributes() { }
-
-        public void ReplaceAll(object content) { }
-
-        public void ReplaceAll(params object[] content) { }
-
-        public void ReplaceAttributes(object content) { }
-
-        public void ReplaceAttributes(params object[] content) { }
-
-        public void Save(IO.Stream stream, SaveOptions options) { }
-
-        public void Save(IO.Stream stream) { }
-
-        public void Save(IO.TextWriter textWriter, SaveOptions options) { }
-
-        public void Save(IO.TextWriter textWriter) { }
-
-        public void Save(XmlWriter writer) { }
-
-        public void SetAttributeValue(XName name, object value) { }
-
-        public void SetElementValue(XName name, object value) { }
-
-        public void SetValue(object value) { }
-
-        Schema.XmlSchema Serialization.IXmlSerializable.GetSchema() { throw null; }
-
-        void Serialization.IXmlSerializable.ReadXml(XmlReader reader) { }
-
-        void Serialization.IXmlSerializable.WriteXml(XmlWriter writer) { }
-
-        public override void WriteTo(XmlWriter writer) { }
-    }
-
-    public sealed partial class XName : IEquatable<XName>
-    {
-        internal XName() { }
-
-        public string LocalName { get { throw null; } }
-
-        public XNamespace Namespace { get { throw null; } }
-
-        public string NamespaceName { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public static XName Get(string localName, string namespaceName) { throw null; }
-
-        public static XName Get(string expandedName) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public static bool operator ==(XName left, XName right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator XName(string expandedName) { throw null; }
-
-        public static bool operator !=(XName left, XName right) { throw null; }
-
-        bool IEquatable<XName>.Equals(XName other) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public sealed partial class XNamespace
-    {
-        internal XNamespace() { }
-
-        public string NamespaceName { get { throw null; } }
-
-        public static XNamespace None { get { throw null; } }
-
-        public static XNamespace Xml { get { throw null; } }
-
-        public static XNamespace Xmlns { get { throw null; } }
-
-        public override bool Equals(object obj) { throw null; }
-
-        public static XNamespace Get(string namespaceName) { throw null; }
-
-        public override int GetHashCode() { throw null; }
-
-        public XName GetName(string localName) { throw null; }
-
-        public static XName operator +(XNamespace ns, string localName) { throw null; }
-
-        public static bool operator ==(XNamespace left, XNamespace right) { throw null; }
-
-        [CLSCompliant(false)]
-        public static implicit operator XNamespace(string namespaceName) { throw null; }
-
-        public static bool operator !=(XNamespace left, XNamespace right) { throw null; }
-
-        public override string ToString() { throw null; }
-    }
-
-    public abstract partial class XNode : XObject
-    {
-        internal XNode() { }
-
-        public static XNodeDocumentOrderComparer DocumentOrderComparer { get { throw null; } }
-
-        public static XNodeEqualityComparer EqualityComparer { get { throw null; } }
-
-        public XNode NextNode { get { throw null; } }
-
-        public XNode PreviousNode { get { throw null; } }
-
-        public void AddAfterSelf(object content) { }
-
-        public void AddAfterSelf(params object[] content) { }
-
-        public void AddBeforeSelf(object content) { }
-
-        public void AddBeforeSelf(params object[] content) { }
-
-        public Collections.Generic.IEnumerable<XElement> Ancestors() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> Ancestors(XName name) { throw null; }
-
-        public static int CompareDocumentOrder(XNode n1, XNode n2) { throw null; }
-
-        public XmlReader CreateReader() { throw null; }
-
-        public XmlReader CreateReader(ReaderOptions readerOptions) { throw null; }
-
-        public static bool DeepEquals(XNode n1, XNode n2) { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> ElementsAfterSelf() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> ElementsAfterSelf(XName name) { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> ElementsBeforeSelf() { throw null; }
-
-        public Collections.Generic.IEnumerable<XElement> ElementsBeforeSelf(XName name) { throw null; }
-
-        public bool IsAfter(XNode node) { throw null; }
-
-        public bool IsBefore(XNode node) { throw null; }
-
-        public Collections.Generic.IEnumerable<XNode> NodesAfterSelf() { throw null; }
-
-        public Collections.Generic.IEnumerable<XNode> NodesBeforeSelf() { throw null; }
-
-        public static XNode ReadFrom(XmlReader reader) { throw null; }
-
-        public void Remove() { }
-
-        public void ReplaceWith(object content) { }
-
-        public void ReplaceWith(params object[] content) { }
-
-        public override string ToString() { throw null; }
-
-        public string ToString(SaveOptions options) { throw null; }
-
-        public abstract void WriteTo(XmlWriter writer);
-    }
-
-    public sealed partial class XNodeDocumentOrderComparer : Collections.Generic.IComparer<XNode>, Collections.IComparer
-    {
-        public int Compare(XNode x, XNode y) { throw null; }
-
-        int Collections.IComparer.Compare(object x, object y) { throw null; }
-    }
-
-    public sealed partial class XNodeEqualityComparer : Collections.Generic.IEqualityComparer<XNode>, Collections.IEqualityComparer
-    {
-        public bool Equals(XNode x, XNode y) { throw null; }
-
-        public int GetHashCode(XNode obj) { throw null; }
-
-        bool Collections.IEqualityComparer.Equals(object x, object y) { throw null; }
-
-        int Collections.IEqualityComparer.GetHashCode(object obj) { throw null; }
-    }
-
-    public abstract partial class XObject : IXmlLineInfo
-    {
-        internal XObject() { }
-
-        public string BaseUri { get { throw null; } }
-
-        public XDocument Document { get { throw null; } }
-
-        public abstract XmlNodeType NodeType { get; }
-
-        public XElement Parent { get { throw null; } }
-
-        int IXmlLineInfo.LineNumber { get { throw null; } }
-
-        int IXmlLineInfo.LinePosition { get { throw null; } }
-
-        public event EventHandler<XObjectChangeEventArgs> Changed { add { } remove { } }
-
-        public event EventHandler<XObjectChangeEventArgs> Changing { add { } remove { } }
-
-        public void AddAnnotation(object annotation) { }
-
-        public object Annotation(Type type) { throw null; }
-
-        public T Annotation<T>()
-            where T : class { throw null; }
-
-        public Collections.Generic.IEnumerable<object> Annotations(Type type) { throw null; }
-
-        public Collections.Generic.IEnumerable<T> Annotations<T>()
-            where T : class { throw null; }
-
-        public void RemoveAnnotations(Type type) { }
-
-        public void RemoveAnnotations<T>()
-            where T : class { }
-
-        bool IXmlLineInfo.HasLineInfo() { throw null; }
-    }
-
-    public enum XObjectChange
-    {
-        Add = 0,
-        Remove = 1,
-        Name = 2,
-        Value = 3
-    }
-
-    public partial class XObjectChangeEventArgs : EventArgs
-    {
-        public static readonly XObjectChangeEventArgs Add;
-        public static readonly XObjectChangeEventArgs Name;
-        public static readonly XObjectChangeEventArgs Remove;
-        public static readonly XObjectChangeEventArgs Value;
-        public XObjectChangeEventArgs(XObjectChange objectChange) { }
-
-        public XObjectChange ObjectChange { get { throw null; } }
-    }
-
-    public partial class XProcessingInstruction : XNode
-    {
-        public XProcessingInstruction(string target, string data) { }
-
-        public XProcessingInstruction(XProcessingInstruction other) { }
-
-        public string Data { get { throw null; } set { } }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public string Target { get { throw null; } set { } }
-
-        public override void WriteTo(XmlWriter writer) { }
-    }
-
-    public partial class XStreamingElement
-    {
-        public XStreamingElement(XName name, object content) { }
-
-        public XStreamingElement(XName name, params object[] content) { }
-
-        public XStreamingElement(XName name) { }
-
-        public XName Name { get { throw null; } set { } }
-
-        public void Add(object content) { }
-
-        public void Add(params object[] content) { }
-
-        public void Save(IO.Stream stream, SaveOptions options) { }
-
-        public void Save(IO.Stream stream) { }
-
-        public void Save(IO.TextWriter textWriter, SaveOptions options) { }
-
-        public void Save(IO.TextWriter textWriter) { }
-
-        public void Save(XmlWriter writer) { }
-
-        public override string ToString() { throw null; }
-
-        public string ToString(SaveOptions options) { throw null; }
-
-        public void WriteTo(XmlWriter writer) { }
-    }
-
-    public partial class XText : XNode
-    {
-        public XText(string value) { }
-
-        public XText(XText other) { }
-
-        public override XmlNodeType NodeType { get { throw null; } }
-
-        public string Value { get { throw null; } set { } }
-
-        public override void WriteTo(XmlWriter writer) { }
-    }
-}
\ No newline at end of file
diff --git a/src/referencePackages/src/system.xml.xdocument/4.3.0/system.xml.xdocument.nuspec b/src/referencePackages/src/system.xml.xdocument/4.3.0/system.xml.xdocument.nuspec
deleted file mode 100644
index 0f3f50ba..00000000
--- a/src/referencePackages/src/system.xml.xdocument/4.3.0/system.xml.xdocument.nuspec
+++ /dev/null
@@ -1,53 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>System.Xml.XDocument</id>
-    <version>4.3.0</version>
-    <title>System.Xml.XDocument</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>https://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides the classes for Language-Integrated Query (LINQ) to Extensible Markup Language (XML). LINQ to XML is an in-memory XML programming interface that enables you to modify XML documents efficiently and easily.
-
-Commonly Used Types:
-System.Xml.Linq.XElement
-System.Xml.Linq.XAttribute
-System.Xml.Linq.XDocument
-System.Xml.Linq.XText
-System.Xml.Linq.XNode
-System.Xml.Linq.XContainer
-System.Xml.Linq.XComment
-System.Xml.Linq.XObject
-System.Xml.Linq.XProcessingInstruction
-System.Xml.Linq.XDocumentType
- 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-    <dependencies>
-      <group targetFramework=".NETStandard1.0">
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Xml.ReaderWriter" version="4.3.0" />
-      </group>
-      <group targetFramework=".NETStandard1.3">
-        <dependency id="System.Collections" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Debug" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Diagnostics.Tools" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Globalization" version="4.3.0" exclude="Compile" />
-        <dependency id="System.IO" version="4.3.0" />
-        <dependency id="System.Reflection" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Resources.ResourceManager" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Runtime" version="4.3.0" />
-        <dependency id="System.Runtime.Extensions" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Text.Encoding" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Threading" version="4.3.0" exclude="Compile" />
-        <dependency id="System.Xml.ReaderWriter" version="4.3.0" />
-      </group>
-    </dependencies>
-  </metadata>
-</package>
\ No newline at end of file
diff --git a/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/LICENSE.TXT b/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/LICENSE.TXT
deleted file mode 100644
index 984713a4..00000000
--- a/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/LICENSE.TXT
+++ /dev/null
@@ -1,23 +0,0 @@
-The MIT License (MIT)
-
-Copyright (c) .NET Foundation and Contributors
-
-All rights reserved.
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-SOFTWARE.
diff --git a/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/Microsoft.NETCore.Targets.nuspec b/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/Microsoft.NETCore.Targets.nuspec
deleted file mode 100644
index e9044322..00000000
--- a/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/Microsoft.NETCore.Targets.nuspec
+++ /dev/null
@@ -1,23 +0,0 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/01/nuspec.xsd">
-  <metadata minClientVersion="2.12">
-    <id>Microsoft.NETCore.Targets</id>
-    <version>1.1.0</version>
-    <title>Microsoft.NETCore.Targets</title>
-    <authors>Microsoft</authors>
-    <owners>microsoft,dotnetframework</owners>
-    <requireLicenseAcceptance>true</requireLicenseAcceptance>
-    <licenseUrl>http://microsoft.mit-license.org/</licenseUrl>
-    <projectUrl>https://dot.net/</projectUrl>
-    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>
-    <description>Provides supporting infrastructure for portable projects: support identifiers that define framework and runtime for support targets and packages that reference the minimum supported package versions when targeting these. 
-When using NuGet 3.x this package requires at least version 3.4.</description>
-    <releaseNotes>https://go.microsoft.com/fwlink/?LinkID=799421</releaseNotes>
-    <copyright>© Microsoft Corporation.  All rights reserved.</copyright>
-    <serviceable>true</serviceable>
-  </metadata>
-  <files>
-    <file src="*/**" target="/" exclude="obj/**/*.*" />
-    <file src="*" target="/" />
-  </files>
-</package>
diff --git a/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/ThirdPartyNotices.txt b/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/ThirdPartyNotices.txt
deleted file mode 100644
index 55cfb208..00000000
--- a/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/ThirdPartyNotices.txt
+++ /dev/null
@@ -1,31 +0,0 @@
-This Microsoft .NET Library may incorporate components from the projects listed
-below. Microsoft licenses these components under the Microsoft .NET Library
-software license terms. The original copyright notices and the licenses under
-which Microsoft received such components are set forth below for informational
-purposes only. Microsoft reserves all rights not expressly granted herein,
-whether by implication, estoppel or otherwise.
-
-1.	.NET Core (https://github.com/dotnet/core/)
-
-.NET Core
-Copyright (c) .NET Foundation and Contributors
-
-The MIT License (MIT)
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-SOFTWARE.
\ No newline at end of file
diff --git a/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/lib/netstandard1.0/_._ b/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/lib/netstandard1.0/_._
deleted file mode 100644
index e69de29b..00000000
diff --git a/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/microsoft.netcore.targets.1.1.0.csproj b/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/microsoft.netcore.targets.1.1.0.csproj
deleted file mode 100644
index 6b512ec9..00000000
--- a/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/microsoft.netcore.targets.1.1.0.csproj
+++ /dev/null
@@ -1 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk" />
diff --git a/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/runtime.json b/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/runtime.json
deleted file mode 100644
index 1585ef62..00000000
--- a/src/textOnlyPackages/src/microsoft.netcore.targets/1.1.0/runtime.json
+++ /dev/null
@@ -1,438 +0,0 @@
-{
-  "runtimes": {
-    "win": {
-      "Microsoft.Win32.Primitives": {
-        "runtime.win.Microsoft.Win32.Primitives": "4.3.0"
-      },
-      "System.Console": {
-        "runtime.win.System.Console": "4.3.0"
-      },
-      "System.Diagnostics.Debug": {
-        "runtime.win.System.Diagnostics.Debug": "4.3.0"
-      },
-      "System.IO.FileSystem": {
-        "runtime.win.System.IO.FileSystem": "4.3.0"
-      },
-      "System.Net.Primitives": {
-        "runtime.win.System.Net.Primitives": "4.3.0"
-      },
-      "System.Net.Sockets": {
-        "runtime.win.System.Net.Sockets": "4.3.0"
-      },
-      "System.Runtime.Extensions": {
-        "runtime.win.System.Runtime.Extensions": "4.3.0"
-      }
-    },
-    "unix": {
-      "Microsoft.Win32.Primitives": {
-        "runtime.unix.Microsoft.Win32.Primitives": "4.3.0"
-      },
-      "System.Console": {
-        "runtime.unix.System.Console": "4.3.0"
-      },
-      "System.Diagnostics.Debug": {
-        "runtime.unix.System.Diagnostics.Debug": "4.3.0"
-      },
-      "System.IO.FileSystem": {
-        "runtime.unix.System.IO.FileSystem": "4.3.0"
-      },
-      "System.Net.Primitives": {
-        "runtime.unix.System.Net.Primitives": "4.3.0"
-      },
-      "System.Net.Sockets": {
-        "runtime.unix.System.Net.Sockets": "4.3.0"
-      },
-      "System.Runtime.Extensions": {
-        "runtime.unix.System.Runtime.Extensions": "4.3.0"
-      },
-      "System.Private.Uri": {
-        "runtime.unix.System.Private.Uri": "4.3.0"
-      }
-    },
-    "any": {
-      "System.Collections": {
-        "runtime.any.System.Collections": "4.3.0"
-      },
-      "System.Diagnostics.Tools": {
-        "runtime.any.System.Diagnostics.Tools": "4.3.0"
-      },
-      "System.Diagnostics.Tracing": {
-        "runtime.any.System.Diagnostics.Tracing": "4.3.0"
-      },
-      "System.Globalization": {
-        "runtime.any.System.Globalization": "4.3.0"
-      },
-      "System.Globalization.Calendars": {
-        "runtime.any.System.Globalization.Calendars": "4.3.0"
-      },
-      "System.IO": {
-        "runtime.any.System.IO": "4.3.0"
-      },
-      "System.Reflection": {
-        "runtime.any.System.Reflection": "4.3.0"
-      },
-      "System.Reflection.Extensions": {
-        "runtime.any.System.Reflection.Extensions": "4.3.0"
-      },
-      "System.Reflection.Primitives": {
-        "runtime.any.System.Reflection.Primitives": "4.3.0"
-      },
-      "System.Resources.ResourceManager": {
-        "runtime.any.System.Resources.ResourceManager": "4.3.0"
-      },
-      "System.Runtime": {
-        "runtime.any.System.Runtime": "4.3.0"
-      },
-      "System.Runtime.Handles": {
-        "runtime.any.System.Runtime.Handles": "4.3.0"
-      },
-      "System.Runtime.InteropServices": {
-        "runtime.any.System.Runtime.InteropServices": "4.3.0"
-      },
-      "System.Text.Encoding": {
-        "runtime.any.System.Text.Encoding": "4.3.0"
-      },
-      "System.Text.Encoding.Extensions": {
-        "runtime.any.System.Text.Encoding.Extensions": "4.3.0"
-      },
-      "System.Threading.Tasks": {
-        "runtime.any.System.Threading.Tasks": "4.3.0"
-      },
-      "System.Threading.Timer": {
-        "runtime.any.System.Threading.Timer": "4.3.0"
-      }
-    },
-    "aot": {
-      "System.Collections": {
-        "runtime.aot.System.Collections": "4.3.0"
-      },
-      "System.Diagnostics.Tools": {
-        "runtime.aot.System.Diagnostics.Tools": "4.3.0"
-      },
-      "System.Diagnostics.Tracing": {
-        "runtime.aot.System.Diagnostics.Tracing": "4.3.0"
-      },
-      "System.Globalization": {
-        "runtime.aot.System.Globalization": "4.3.0"
-      },
-      "System.Globalization.Calendars": {
-        "runtime.aot.System.Globalization.Calendars": "4.3.0"
-      },
-      "System.IO": {
-        "runtime.aot.System.IO": "4.3.0"
-      },
-      "System.Reflection": {
-        "runtime.aot.System.Reflection": "4.3.0"
-      },
-      "System.Reflection.Extensions": {
-        "runtime.aot.System.Reflection.Extensions": "4.3.0"
-      },
-      "System.Reflection.Primitives": {
-        "runtime.aot.System.Reflection.Primitives": "4.3.0"
-      },
-      "System.Resources.ResourceManager": {
-        "runtime.aot.System.Resources.ResourceManager": "4.3.0"
-      },
-      "System.Runtime": {
-        "runtime.aot.System.Runtime": "4.3.0"
-      },
-      "System.Runtime.Handles": {
-        "runtime.aot.System.Runtime.Handles": "4.3.0"
-      },
-      "System.Runtime.InteropServices": {
-        "runtime.aot.System.Runtime.InteropServices": "4.3.0"
-      },
-      "System.Text.Encoding": {
-        "runtime.aot.System.Text.Encoding": "4.3.0"
-      },
-      "System.Text.Encoding.Extensions": {
-        "runtime.aot.System.Text.Encoding.Extensions": "4.3.0"
-      },
-      "System.Threading.Tasks": {
-        "runtime.aot.System.Threading.Tasks": "4.3.0"
-      },
-      "System.Threading.Timer": {
-        "runtime.aot.System.Threading.Timer": "4.3.0"
-      }
-    },
-    "win7": {
-      "System.Private.Uri": {
-        "runtime.win7.System.Private.Uri": "4.3.0"
-      }
-    },
-    "win10-x64-aot": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.win10-x64-aot.runtime.native.System.IO.Compression": "4.0.1"
-      }
-    },
-    "win10-arm-aot": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.win10-arm-aot.runtime.native.System.IO.Compression": "4.0.1"
-      }
-    },
-    "win10-x86-aot": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.win10-x86-aot.runtime.native.System.IO.Compression": "4.0.1"
-      }
-    },
-    "rhel.7-x64": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.rhel.7-x64.runtime.native.System.IO.Compression": "4.3.0"
-      },
-      "runtime.native.System": {
-        "runtime.rhel.7-x64.runtime.native.System": "4.3.0"
-      },
-      "runtime.native.System.Net.Http": {
-        "runtime.rhel.7-x64.runtime.native.System.Net.Http": "4.3.0"
-      },
-      "runtime.native.System.Net.Security": {
-        "runtime.rhel.7-x64.runtime.native.System.Net.Security": "4.3.0"
-      }
-    },
-    "debian.8-x64": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.debian.8-x64.runtime.native.System.IO.Compression": "4.3.0"
-      },
-      "runtime.native.System": {
-        "runtime.debian.8-x64.runtime.native.System": "4.3.0"
-      },
-      "runtime.native.System.Net.Http": {
-        "runtime.debian.8-x64.runtime.native.System.Net.Http": "4.3.0"
-      },
-      "runtime.native.System.Net.Security": {
-        "runtime.debian.8-x64.runtime.native.System.Net.Security": "4.3.0"
-      }
-    },
-    "fedora.23-x64": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.fedora.23-x64.runtime.native.System.IO.Compression": "4.3.0"
-      },
-      "runtime.native.System": {
-        "runtime.fedora.23-x64.runtime.native.System": "4.3.0"
-      },
-      "runtime.native.System.Net.Http": {
-        "runtime.fedora.23-x64.runtime.native.System.Net.Http": "4.3.0"
-      },
-      "runtime.native.System.Net.Security": {
-        "runtime.fedora.23-x64.runtime.native.System.Net.Security": "4.3.0"
-      }
-    },
-    "fedora.24-x64": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.fedora.24-x64.runtime.native.System.IO.Compression": "4.3.0"
-      },
-      "runtime.native.System": {
-        "runtime.fedora.24-x64.runtime.native.System": "4.3.0"
-      },
-      "runtime.native.System.Net.Http": {
-        "runtime.fedora.24-x64.runtime.native.System.Net.Http": "4.3.0"
-      },
-      "runtime.native.System.Net.Security": {
-        "runtime.fedora.24-x64.runtime.native.System.Net.Security": "4.3.0"
-      }
-    },
-    "osx.10.10-x64": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.osx.10.10-x64.runtime.native.System.IO.Compression": "4.3.0"
-      },
-      "runtime.native.System": {
-        "runtime.osx.10.10-x64.runtime.native.System": "4.3.0"
-      },
-      "runtime.native.System.Net.Http": {
-        "runtime.osx.10.10-x64.runtime.native.System.Net.Http": "4.3.0"
-      },
-      "runtime.native.System.Net.Security": {
-        "runtime.osx.10.10-x64.runtime.native.System.Net.Security": "4.3.0"
-      }
-    },
-    "opensuse.13.2-x64": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.opensuse.13.2-x64.runtime.native.System.IO.Compression": "4.3.0"
-      },
-      "runtime.native.System": {
-        "runtime.opensuse.13.2-x64.runtime.native.System": "4.3.0"
-      },
-      "runtime.native.System.Net.Http": {
-        "runtime.opensuse.13.2-x64.runtime.native.System.Net.Http": "4.3.0"
-      },
-      "runtime.native.System.Net.Security": {
-        "runtime.opensuse.13.2-x64.runtime.native.System.Net.Security": "4.3.0"
-      }
-    },
-    "opensuse.42.1-x64": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.opensuse.42.1-x64.runtime.native.System.IO.Compression": "4.3.0"
-      },
-      "runtime.native.System": {
-        "runtime.opensuse.42.1-x64.runtime.native.System": "4.3.0"
-      },
-      "runtime.native.System.Net.Http": {
-        "runtime.opensuse.42.1-x64.runtime.native.System.Net.Http": "4.3.0"
-      },
-      "runtime.native.System.Net.Security": {
-        "runtime.opensuse.42.1-x64.runtime.native.System.Net.Security": "4.3.0"
-      }
-    },
-    "ubuntu.14.04-x64": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.ubuntu.14.04-x64.runtime.native.System.IO.Compression": "4.3.0"
-      },
-      "runtime.native.System": {
-        "runtime.ubuntu.14.04-x64.runtime.native.System": "4.3.0"
-      },
-      "runtime.native.System.Net.Http": {
-        "runtime.ubuntu.14.04-x64.runtime.native.System.Net.Http": "4.3.0"
-      },
-      "runtime.native.System.Net.Security": {
-        "runtime.ubuntu.14.04-x64.runtime.native.System.Net.Security": "4.3.0"
-      }
-    },
-    "ubuntu.16.04-x64": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.ubuntu.16.04-x64.runtime.native.System.IO.Compression": "4.3.0"
-      },
-      "runtime.native.System": {
-        "runtime.ubuntu.16.04-x64.runtime.native.System": "4.3.0"
-      },
-      "runtime.native.System.Net.Http": {
-        "runtime.ubuntu.16.04-x64.runtime.native.System.Net.Http": "4.3.0"
-      },
-      "runtime.native.System.Net.Security": {
-        "runtime.ubuntu.16.04-x64.runtime.native.System.Net.Security": "4.3.0"
-      }
-    },
-    "ubuntu.16.10-x64": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.ubuntu.16.10-x64.runtime.native.System.IO.Compression": "4.3.0"
-      },
-      "runtime.native.System": {
-        "runtime.ubuntu.16.10-x64.runtime.native.System": "4.3.0"
-      },
-      "runtime.native.System.Net.Http": {
-        "runtime.ubuntu.16.10-x64.runtime.native.System.Net.Http": "4.3.0"
-      },
-      "runtime.native.System.Net.Security": {
-        "runtime.ubuntu.16.10-x64.runtime.native.System.Net.Security": "4.3.0"
-      }
-    },
-    "win7-x86": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.win7-x86.runtime.native.System.IO.Compression": "4.3.0"
-      }
-    },
-    "win7-x64": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.win7-x64.runtime.native.System.IO.Compression": "4.3.0"
-      }
-    },
-    "win8-arm": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.win8-arm.runtime.native.System.IO.Compression": "4.3.0"
-      }
-    },
-    "win10-arm64": {
-      "runtime.native.System.IO.Compression": {
-        "runtime.win10-arm64.runtime.native.System.IO.Compression": "4.3.0"
-      }
-    }
-  },
-  "supports": {
-    "uwp.10.0.app": {
-      "uap10.0": [
-        "win10-x86",
-        "win10-x86-aot",
-        "win10-x64",
-        "win10-x64-aot",
-        "win10-arm",
-        "win10-arm-aot"
-      ]
-    },
-    "net45.app": {
-      "net45": [
-        "",
-        "win-x86",
-        "win-x64"
-      ]
-    },
-    "net451.app": {
-      "net451": [
-        "",
-        "win-x86",
-        "win-x64"
-      ]
-    },
-    "net452.app": {
-      "net452": [
-        "",
-        "win-x86",
-        "win-x64"
-      ]
-    },
-    "net46.app": {
-      "net46": [
-        "",
-        "win-x86",
-        "win-x64"
-      ]
-    },
-    "net461.app": {
-      "net461": [
-        "",
-        "win-x86",
-        "win-x64"
-      ]
-    },
-    "net462.app": {
-      "net462": [
-        "",
-        "win-x86",
-        "win-x64"
-      ]
-    },
-    "netcoreapp1.0.app": {
-      "netcoreapp1.0": [
-        "win7-x86",
-        "win7-x64",
-        "osx.10.11-x64",
-        "centos.7-x64",
-        "debian.8-x64",
-        "linuxmint.17-x64",
-        "opensuse.13.2-x64",
-        "rhel.7.2-x64",
-        "ubuntu.14.04-x64",
-        "ubuntu.16.04-x64"
-      ]
-    },
-    "win8.app": {
-      "win8": [
-        ""
-      ]
-    },
-    "win81.app": {
-      "win81": [
-        ""
-      ]
-    },
-    "wp8.app": {
-      "wp8": [
-        ""
-      ]
-    },
-    "wp81.app": {
-      "wp81": [
-        ""
-      ]
-    },
-    "wpa81.app": {
-      "wpa81": [
-        ""
-      ]
-    },
-    "dnxcore50.app": {
-      "dnxcore50": [
-        "win7-x86",
-        "win7-x64"
-      ]
-    }
-  }
-}
\ No newline at end of file
-- 
2.48.1.windows.1

