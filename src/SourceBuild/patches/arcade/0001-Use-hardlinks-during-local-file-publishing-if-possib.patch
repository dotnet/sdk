From 497d1fdfb20324e9a9fc41a8d7d19f50d5b32a5c Mon Sep 17 00:00:00 2001
From: Viktor Hofer <viktor.hofer@microsoft.com>
Date: Tue, 21 Jan 2025 10:50:44 +0100
Subject: [PATCH] Use hardlinks during local file publishing if possible

Backport: https://github.com/dotnet/arcade/pull/15433

---
 .../tools/Publish.proj                        |  3 +-
 .../Microsoft.DotNet.Build.Tasks.Feed.csproj  |  1 +
 .../src/PushToBuildStorage.cs                 | 32 +++++++++++--
 .../src/common/NativeMethods.cs               | 48 +++++++++++++++++++
 4 files changed, 79 insertions(+), 5 deletions(-)
 create mode 100644 src/Microsoft.DotNet.Build.Tasks.Feed/src/common/NativeMethods.cs

diff --git a/src/Microsoft.DotNet.Arcade.Sdk/tools/Publish.proj b/src/Microsoft.DotNet.Arcade.Sdk/tools/Publish.proj
index 907d3d876..3b3e4d98e 100644
--- a/src/Microsoft.DotNet.Arcade.Sdk/tools/Publish.proj
+++ b/src/Microsoft.DotNet.Arcade.Sdk/tools/Publish.proj
@@ -274,7 +274,8 @@
       ShippingPackagesLocalStorageDir="$(SourceBuiltShippingPackagesDir)"
       NonShippingPackagesLocalStorageDir="$(SourceBuiltNonShippingPackagesDir)"
       AssetManifestsLocalStorageDir="$(SourceBuiltAssetManifestsDir)"
-      ArtifactVisibilitiesToPublish="@(ArtifactVisibilityToPublish)" />
+      ArtifactVisibilitiesToPublish="@(ArtifactVisibilityToPublish)"
+      UseHardlinksIfPossible="$(PublishingUseHardlinksIfPossible)" />
 
     <!-- 
         Publish Windows PDBs produced by SymStore.targets (by default, only shipping PDBs are placed there).
diff --git a/src/Microsoft.DotNet.Build.Tasks.Feed/Microsoft.DotNet.Build.Tasks.Feed.csproj b/src/Microsoft.DotNet.Build.Tasks.Feed/Microsoft.DotNet.Build.Tasks.Feed.csproj
index b3b027c33..224b7b645 100644
--- a/src/Microsoft.DotNet.Build.Tasks.Feed/Microsoft.DotNet.Build.Tasks.Feed.csproj
+++ b/src/Microsoft.DotNet.Build.Tasks.Feed/Microsoft.DotNet.Build.Tasks.Feed.csproj
@@ -2,6 +2,7 @@
 
   <PropertyGroup>
     <TargetFrameworks>$(NetToolCurrent);$(NetFrameworkToolCurrent)</TargetFrameworks>
+    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
     <SignAssembly>true</SignAssembly>
     <Description>This package provides support for publishing assets to appropriate channels.</Description>
     <DevelopmentDependency>true</DevelopmentDependency>
diff --git a/src/Microsoft.DotNet.Build.Tasks.Feed/src/PushToBuildStorage.cs b/src/Microsoft.DotNet.Build.Tasks.Feed/src/PushToBuildStorage.cs
index c506295dc..7e4cd385c 100644
--- a/src/Microsoft.DotNet.Build.Tasks.Feed/src/PushToBuildStorage.cs
+++ b/src/Microsoft.DotNet.Build.Tasks.Feed/src/PushToBuildStorage.cs
@@ -82,6 +82,12 @@ public class PushToBuildStorage : MSBuildTaskBase
         /// </summary>
         public string PublishingVersion { get; set; }
 
+        /// <summary>
+        /// Gets or sets a value that indicates whether to use hard links for the copied files
+        /// rather than copy the files, if it's possible to do so.
+        /// </summary>
+        public bool UseHardlinksIfPossible { get; set; } = true;
+
         public enum ItemType
         {
             AssetManifest = 0,
@@ -268,19 +274,19 @@ private void PushToLocalStorageOrAzDO(ItemType itemType, ITaskItem item)
                 {
                     case ItemType.AssetManifest:
                         Directory.CreateDirectory(AssetManifestsLocalStorageDir);
-                        File.Copy(path, Path.Combine(AssetManifestsLocalStorageDir, filename), true);
+                        CopyFileAsHardLinkIfPossible(path, Path.Combine(AssetManifestsLocalStorageDir, filename), true);
                         break;
 
                     case ItemType.PackageArtifact:
                         if (string.Equals(item.GetMetadata("IsShipping"), "true", StringComparison.OrdinalIgnoreCase))
                         {
                             Directory.CreateDirectory(ShippingPackagesLocalStorageDir);
-                            File.Copy(path, Path.Combine(ShippingPackagesLocalStorageDir, filename), true);
+                            CopyFileAsHardLinkIfPossible(path, Path.Combine(ShippingPackagesLocalStorageDir, filename), true);
                         }
                         else
                         {
                             Directory.CreateDirectory(NonShippingPackagesLocalStorageDir);
-                            File.Copy(path, Path.Combine(NonShippingPackagesLocalStorageDir, filename), true);
+                            CopyFileAsHardLinkIfPossible(path, Path.Combine(NonShippingPackagesLocalStorageDir, filename), true);
                         }
                         break;
 
@@ -291,7 +297,7 @@ private void PushToLocalStorageOrAzDO(ItemType itemType, ITaskItem item)
                                                     string.IsNullOrEmpty(relativeBlobPath) ? filename : relativeBlobPath);
 
                         Directory.CreateDirectory(Path.GetDirectoryName(destinationPath));
-                        File.Copy(path, destinationPath, true);
+                        CopyFileAsHardLinkIfPossible(path, destinationPath, true);
                         break;
 
                     default:
@@ -334,5 +340,23 @@ private static ArtifactVisibility[] GetVisibilitiesToPublish(ITaskItem[] allowed
 
             return allowedVisibilities.Select(item => (ArtifactVisibility)Enum.Parse(typeof(ArtifactVisibility), item.ItemSpec)).ToArray();
         }
+
+        private void CopyFileAsHardLinkIfPossible(string sourceFileName, string destFileName, bool overwrite)
+        {
+            if (UseHardlinksIfPossible)
+            {
+                Log.LogMessage(MessageImportance.Normal, "Creating hard link to copy \"{0}\" to \"{1}\".", sourceFileName, destFileName);
+
+                string errorMessage = string.Empty;
+                if (NativeMethods.MakeHardLink(destFileName, sourceFileName, ref errorMessage))
+                {
+                    return;
+                }
+
+                Log.LogMessage(MessageImportance.Normal, "Could not use a link to copy \"{0}\" to \"{1}\". Copying the file instead. {2}", sourceFileName, destFileName, errorMessage);
+            }
+
+            File.Copy(sourceFileName, destFileName, overwrite);
+        }
     }
 }
diff --git a/src/Microsoft.DotNet.Build.Tasks.Feed/src/common/NativeMethods.cs b/src/Microsoft.DotNet.Build.Tasks.Feed/src/common/NativeMethods.cs
new file mode 100644
index 000000000..7eaa76db7
--- /dev/null
+++ b/src/Microsoft.DotNet.Build.Tasks.Feed/src/common/NativeMethods.cs
@@ -0,0 +1,48 @@
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Runtime.InteropServices;
+#if NET
+using System.Runtime.InteropServices.Marshalling;
+#endif
+
+namespace Microsoft.DotNet.Build.Tasks.Feed
+{
+    internal partial class NativeMethods
+    {
+#if NET
+        [LibraryImport("kernel32.dll", EntryPoint = "CreateHardLinkW", SetLastError = true, StringMarshalling = StringMarshalling.Utf16)]
+        [return: MarshalAs(UnmanagedType.Bool)]
+        internal static partial bool CreateHardLink(string newFileName, string exitingFileName, IntPtr securityAttributes);
+#else
+        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
+        internal static extern bool CreateHardLink(string newFileName, string exitingFileName, IntPtr securityAttributes);
+#endif
+
+#if NET
+        [LibraryImport("libc", SetLastError = true, StringMarshalling = StringMarshalling.Utf16)]
+        internal static partial int link(string oldpath, string newpath);
+#else
+        [DllImport("libc", SetLastError = true)]
+        internal static extern int link(string oldpath, string newpath);
+#endif
+
+        internal static bool MakeHardLink(string newFileName, string exitingFileName, ref string errorMessage)
+        {
+            bool hardLinkCreated;
+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
+            {
+                hardLinkCreated = CreateHardLink(newFileName, exitingFileName, IntPtr.Zero /* reserved, must be NULL */);
+                errorMessage = hardLinkCreated ? null : Marshal.GetExceptionForHR(Marshal.GetHRForLastWin32Error()).Message;
+            }
+            else
+            {
+                hardLinkCreated = link(exitingFileName, newFileName) == 0;
+                errorMessage = hardLinkCreated ? null : $"The link() library call failed with the following error code: {Marshal.GetLastWin32Error()}.";
+            }
+
+            return hardLinkCreated;
+        }
+    }
+}
