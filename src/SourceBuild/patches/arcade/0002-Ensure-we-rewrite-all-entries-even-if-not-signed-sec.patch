From 4bf8cfeb29f190de4f4cb24d7077022ed285a197 Mon Sep 17 00:00:00 2001
From: Viktor Hofer <viktor.hofer@microsoft.com>
Date: Thu, 28 Nov 2024 16:22:35 +0100
Subject: [PATCH] Ensure we rewrite all entries, even if not signed - second
 attempt

When roundtripping a TarEntry from TarReader back to TarWriter, the Stream must be written into a MemoryStream as the returned TarEntry Stream is not seekable.

Fixes https://github.com/dotnet/arcade/issues/15232 but for main

Backport: https://github.com/dotnet/arcade/pull/15288

---
 src/Microsoft.DotNet.SignTool/src/ZipData.cs | 45 ++++++++++----------
 1 file changed, 23 insertions(+), 22 deletions(-)

diff --git a/src/Microsoft.DotNet.SignTool/src/ZipData.cs b/src/Microsoft.DotNet.SignTool/src/ZipData.cs
index db7759faf..8fb9a5737 100644
--- a/src/Microsoft.DotNet.SignTool/src/ZipData.cs
+++ b/src/Microsoft.DotNet.SignTool/src/ZipData.cs
@@ -245,7 +245,7 @@ private void RepackWixPack(TaskLoggingHelper log, string tempDir, string wixTool
             }
         }
 
-#if NET472
+#if NETFRAMEWORK
         private static bool RunTarProcess(string srcPath, string dstPath, string tarToolPath)
         {
             var process = Process.Start(new ProcessStartInfo()
@@ -326,34 +326,41 @@ private void RepackTarGZip(TaskLoggingHelper log, string tempDir, string tarTool
 #else
         private void RepackTarGZip(TaskLoggingHelper log, string tempDir, string tarToolPath)
         {
-            using var outputStream = new MemoryStream();
+            using MemoryStream outputStream = new();
 
+            using (GZipStream gzipStream = new(outputStream, CompressionMode.Compress, leaveOpen: true))
+            using (TarWriter writer = new(gzipStream))
             {
-                using var gzipStream = new GZipStream(outputStream, CompressionMode.Compress, leaveOpen: true);
-                using var writer = new TarWriter(gzipStream);
-
-                foreach (var entry in ReadTarGZipEntries(FileSignInfo.FullPath))
+                foreach (TarEntry entry in ReadTarGZipEntries(FileSignInfo.FullPath))
                 {
                     if (entry.DataStream != null)
                     {
-                        var relativeName = entry.Name;
-                        var signedPart = FindNestedPart(relativeName);
+                        Stream dataStream;
+
+                        string relativeName = entry.Name;
+                        ZipPart? signedPart = FindNestedPart(relativeName);
 
                         if (signedPart.HasValue)
                         {
-                            using var signedStream = File.OpenRead(signedPart.Value.FileSignInfo.FullPath);
+                            dataStream = File.OpenRead(signedPart.Value.FileSignInfo.FullPath);
                             log.LogMessage(MessageImportance.Low, $"Copying signed stream from {signedPart.Value.FileSignInfo.FullPath} to {FileSignInfo.FullPath} -> {relativeName}.");
-                            entry.DataStream = signedStream;
-                            writer.WriteEntry(entry);
-                            continue;
                         }
                         else
                         {
+                            dataStream = new MemoryStream();
+                            entry.DataStream.CopyTo(dataStream);
+                            dataStream.Position = 0;
                             log.LogMessage(MessageImportance.Low, $"Didn't find signed part for nested file: {FileSignInfo.FullPath} -> {relativeName}");
                         }
-                    }
 
-                    writer.WriteEntry(entry);
+                        entry.DataStream = dataStream;
+                        writer.WriteEntry(entry);
+                        dataStream.Dispose();
+                    }
+                    else
+                    {
+                        writer.WriteEntry(entry);
+                    }
                 }
             }
 
@@ -363,20 +370,14 @@ private void RepackTarGZip(TaskLoggingHelper log, string tempDir, string tarTool
             outputStream.CopyTo(outputFile);
         }
 
-        internal static IEnumerable<TarEntry> ReadTarGZipEntries(string path)
+        private static IEnumerable<TarEntry> ReadTarGZipEntries(string path)
         {
             using var gzipStream = File.Open(path, FileMode.Open);
             using var tar = new GZipStream(gzipStream, CompressionMode.Decompress);
             using var reader = new TarReader(tar);
 
-            while (true)
+            while (reader.GetNextEntry() is TarEntry entry)
             {
-                var entry = reader.GetNextEntry();
-                if (entry == null)
-                {
-                    break;
-                }
-
                 yield return entry;
             }
         }
