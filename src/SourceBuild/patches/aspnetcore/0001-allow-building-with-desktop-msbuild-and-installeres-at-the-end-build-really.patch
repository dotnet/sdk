From 0ce6c6e1fc217ba6d111aca0b93770ebfa9ed3b2 Mon Sep 17 00:00:00 2001
From: Viktor Hofer <viktor.hofer@microsoft.com>
Date: Fri, 15 Nov 2024 15:45:27 +0000
Subject: [PATCH] Build installers at the end of the repo build

Build the Installer projects after everythign else
got built by adding a new Traversal project that
builds all P2Ps in it in parallel.

Fixes https://github.com/dotnet/aspnetcore/issues/58984
Unblocks https://github.com/dotnet/sdk/pull/44828

Backport: https://github.com/dotnet/aspnetcore/pull/58987

---
 eng/AfterSolutionBuild.targets                |   4 +-
 eng/Build.props                               | 261 +-----------------
 eng/Build/Directory.Build.props               |  66 +++++
 eng/Build/Directory.Build.targets             |  13 +
 eng/Build/Installers.Traversal.proj           |  72 +++++
 eng/Build/Java.Traversal.proj                 |   7 +
 eng/Build/Managed.Traversal.proj              | 104 +++++++
 eng/Build/Native.Traversal.proj               |   9 +
 eng/Build/NodeJS.Traversal.proj               |  12 +
 eng/CodeGen.proj                              |  11 +-
 eng/Installers.proj                           |  72 +++++
 eng/Tools.props                               |   5 +-
 eng/build.ps1                                 |  54 ++--
 eng/targets/ResolveReferences.targets         |   4 -
 eng/tools/GenerateFiles/GenerateFiles.csproj  |   8 +-
 global.json                                   |   3 +-
 .../SharedFrameworkBundle.wixproj             |   8 +-
 .../WindowsHostingBundle/Product.targets      |   5 +-
 .../WindowsHostingBundle.wixproj              |   2 +-
 19 files changed, 421 insertions(+), 299 deletions(-)
 create mode 100644 eng/Build/Directory.Build.props
 create mode 100644 eng/Build/Directory.Build.targets
 create mode 100644 eng/Build/Installers.Traversal.proj
 create mode 100644 eng/Build/Java.Traversal.proj
 create mode 100644 eng/Build/Managed.Traversal.proj
 create mode 100644 eng/Build/Native.Traversal.proj
 create mode 100644 eng/Build/NodeJS.Traversal.proj
 create mode 100644 eng/Installers.proj

diff --git a/eng/AfterSolutionBuild.targets b/eng/AfterSolutionBuild.targets
index de108aec27..c629174994 100644
--- a/eng/AfterSolutionBuild.targets
+++ b/eng/AfterSolutionBuild.targets
@@ -1,12 +1,12 @@
 <Project>
 
+  <Import Project="Common.props" />
   <Import Project="tools\RepoTasks\RepoTasks.tasks" />
   <Import Project="SharedFramework.External.props" />
   <Import Project="SharedFramework.Local.props" />
 
   <!-- This is temporary until we can use FrameworkReference to build our own packages. -->
-  <Target Name="RemoveSharedFrameworkOnlyRefsFromNuspec" AfterTargets="Pack"
-      Condition=" '$(MSBuildRuntimeType)' == 'core' ">
+  <Target Name="RemoveSharedFrameworkOnlyRefsFromNuspec" AfterTargets="Pack" Condition="'$(BuildManaged)' == 'true'">
     <ItemGroup>
       <_BuildOutput Include="$(ArtifactsShippingPackagesDir)*.nupkg"
                     Exclude="$(ArtifactsShippingPackagesDir)*.symbols.nupkg" />
diff --git a/eng/Build.props b/eng/Build.props
index 196de0632d..4eedee7432 100644
--- a/eng/Build.props
+++ b/eng/Build.props
@@ -1,61 +1,6 @@
 <Project>
-  <Import Project="Common.props" />
 
-  <!--
-    @(RequiresDelayedBuild) projects can be extended many ways but this isn't fully automated because the new
-    projects likely aren't referenced initially. To add new projects, edit RequiresDelayedBuildProjects.props
-    manually, update the $(BuildMainlyReferenceProviders)' == 'true' item group near the bottom of this file,
-    or edit BuildAfterTargetingPack.csproj. Then run GenerateProjectList.ps1 (even for the first option to ensure
-    the format is correct) and undo any temporary changes. When complete, only BuildAfterTargetingPack.csproj and
-    other @(RequiresDelayedBuild) projects should mention projects listed in RequiresDelayedBuildProjects.props.
-  -->
-  <Import Project="RequiresDelayedBuildProjects.props" />
-
-  <!-- These projects are always excluded, even when -projects is specified on command line. -->
-  <ItemGroup>
-    <!-- Explicitly excluded projects -->
-    <ProjectToExclude Include="$(ProjectToExclude)" />
-
-    <!-- These projects use 'legacy' csproj, which is not supported by dotnet-msbuild. -->
-    <ProjectToExclude Include="
-                      $(RepoRoot)src\Servers\HttpSys\samples\TestClient\TestClient.csproj;
-                      $(RepoRoot)src\Middleware\WebSockets\samples\TestServer\WebSockets.TestServer.csproj;
-                      "
-                      Condition=" '$(MSBuildRuntimeType)' == 'Core' " />
-
-    <!-- Exclude the websockets samples for now because they use classic .csproj, which is not yet supported in our build. -->
-    <ProjectToExclude Include="$(RepoRoot)src\Middleware\WebSockets\samples\**\*.csproj" />
-
-    <!-- These projects are meant to be referenced only by tests or via BuildAfterTargetingPack.csproj. -->
-    <ProjectToExclude
-      Include="$(RepoRoot)src\**\testassets\**\*.*proj;
-               @(RequiresDelayedBuild);
-               "
-      Exclude="$(RepoRoot)src\Components\WebAssembly\testassets\WasmLinkerTest\*.*proj;
-               $(RepoRoot)src\Components\WebView\Samples\PhotinoPlatform\testassets\PhotinoTestApp\*.*proj;
-               $(RepoRoot)src\Http\Routing\test\testassets\RoutingSandbox\*.*proj;
-               $(RepoRoot)src\Security\Authentication\Negotiate\test\testassets\Negotiate.Client\*.*proj;
-               $(RepoRoot)src\Security\Authentication\Negotiate\test\testassets\Negotiate.Server\*.*proj;
-               " />
-
-    <!-- These projects are not meant to be built in this repo. In the Installers case, must explicitly opt in. -->
-    <ProjectToExclude Include="
-                      $(RepoRoot)src\submodules\googletest\**\*.*proj;
-                      $(RepoRoot)src\submodules\MessagePack-CSharp\**\*.*proj;
-                      $(RepoRoot)src\Components\Web.JS\node_modules\**\*.*proj;
-                      $(RepoRoot)src\Installers\**\*.*proj;
-                      $(RepoRoot)src\ProjectTemplates\Web.ProjectTemplates\content\**\*.*proj;
-                      $(RepoRoot)src\SignalR\clients\ts\**\node_modules\**\*.*proj;
-                      " />
-
-    <!-- Exclude the benchmarks because they use <PackageReference>. -->
-    <ProjectToExclude Include="
-                      $(RepoRoot)src\Components\benchmarkapps\BlazingPizza.Server\**\*.csproj;
-                      $(RepoRoot)src\Mvc\perf\**\*.csproj;
-                      $(RepoRoot)src\Servers\Kestrel\perf\PlatformBenchmarks\**\*.csproj;
-                      $(RepoRoot)src\SignalR\perf\benchmarkapps\**\*.csproj;
-                      " />
-  </ItemGroup>
+  <Import Project="$(MSBuildThisFileDirectory)Build\Directory.Build.props" />
 
   <Choose>
     <!-- Project selection can be overridden on the command line by passing in -projects. -->
@@ -71,206 +16,12 @@
       </ItemGroup>
     </When>
     <Otherwise>
-      <PropertyGroup>
-        <_BuildWindowsInstallers Condition="'$(BuildInstallers)' == 'true' AND '$(TargetOsName)' == 'win' AND ('$(TargetArchitecture)' == 'x86' OR '$(TargetArchitecture)' == 'x64' OR '$(TargetArchitecture)' == 'arm64') ">true</_BuildWindowsInstallers>
-        <_WixTargetPlatform Condition="'$(TargetArchitecture)' == 'x86' ">Win32</_WixTargetPlatform>
-        <_WixTargetPlatform Condition="'$(TargetArchitecture)' == 'x64' ">x64</_WixTargetPlatform>
-        <_WixTargetPlatform Condition="'$(TargetArchitecture)' == 'arm64' ">ARM64</_WixTargetPlatform>
-      </PropertyGroup>
-      <ItemGroup Condition="'$(DotNetBuild)' != 'true' and '$(_BuildWindowsInstallers)' == 'true' ">
-        <!-- Build the ANCM custom action -->
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\CustomAction\aspnetcoreCA.vcxproj" AdditionalProperties="Platform=x64" />
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\CustomAction\aspnetcoreCA.vcxproj" AdditionalProperties="Platform=Win32" />
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\CustomAction\aspnetcoreCA.vcxproj" AdditionalProperties="Platform=ARM64" />
-
-        <!-- Build the ANCM msis -->
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMIISExpressV2\AncmIISExpressV2.wixproj" AdditionalProperties="Platform=x64" />
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMIISExpressV2\AncmIISExpressV2.wixproj" AdditionalProperties="Platform=x86" />
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMIISExpressV2\AncmIISExpressV2.wixproj" AdditionalProperties="Platform=arm64" />
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMV2\ANCMV2.wixproj" AdditionalProperties="Platform=x64" />
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMV2\ANCMV2.wixproj" AdditionalProperties="Platform=x86" />
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMV2\ANCMV2.wixproj" AdditionalProperties="Platform=arm64" />
-
-        <!-- Build the targeting pack installers -->
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\TargetingPack\TargetingPack.wixproj" AdditionalProperties="Platform=x64" />
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\TargetingPack\TargetingPack.wixproj" AdditionalProperties="Platform=x86" />
-        <!-- This really shouldn't be here, but instead of harvesting from the intermediate/output directories, the targeting pack installer logic
-        harvests from a zip of the reference assemblies. Producing it in each leg ends up with multiple targeting packs
-        getting produced and the BAR will reject the build. Centralize building the targeting pack in the x86/x64 leg. -->
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\TargetingPack\TargetingPack.wixproj" AdditionalProperties="Platform=arm64" />
-
-        <!-- Build the SharedFramework installers -->
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkBundle\SharedFrameworkBundle.wixproj" AdditionalProperties="Platform=x64" />
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkBundle\SharedFrameworkBundle.wixproj" AdditionalProperties="Platform=x86" />
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkBundle\SharedFrameworkBundle.wixproj" AdditionalProperties="Platform=arm64" />
-
-        <!-- Build the SharedFramework wixlib -->
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkLib\SharedFrameworkLib.wixproj" AdditionalProperties="Platform=x64" />
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkLib\SharedFrameworkLib.wixproj" AdditionalProperties="Platform=x86" />
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkLib\SharedFrameworkLib.wixproj" AdditionalProperties="Platform=arm64" />
-
-        <!-- Windows hosting bundle -->
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\WindowsHostingBundle\WindowsHostingBundle.wixproj" AdditionalProperties="Platform=x86" />
-      </ItemGroup>
-
-      <!-- In a vertical build, only build the MSIs for the current vertical in the first pass and build the hosting bundle in the second pass -->
-      <ItemGroup Condition="'$(DotNetBuild)' == 'true' and ('$(DotNetBuildPass)' == '' or '$(DotNetBuildPass)' == '1') and '$(_BuildWindowsInstallers)' == 'true'">
-        <!-- Build the ANCM custom action -->
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\CustomAction\aspnetcoreCA.vcxproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
-        <!-- Build the ANCM msis -->
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMIISExpressV2\AncmIISExpressV2.wixproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMV2\ANCMV2.wixproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
-        <!-- Build the targeting pack installers -->
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\TargetingPack\TargetingPack.wixproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
-        <!-- Build the SharedFramework installers -->
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkBundle\SharedFrameworkBundle.wixproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
-        <!-- Build the SharedFramework wixlib -->
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkLib\SharedFrameworkLib.wixproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
-      </ItemGroup>
-
-      <ItemGroup Condition="'$(DotNetBuild)' == 'true' and ('$(DotNetBuildPass)' == '2') and '$(BuildInstallers)' == 'true' AND '$(TargetOsName)' == 'win' and '$(TargetArchitecture)' == 'x64'">
-        <ProjectToBuild Include="$(RepoRoot)src\Installers\Windows\WindowsHostingBundle\WindowsHostingBundle.wixproj" AdditionalProperties="Platform=x86" />
-      </ItemGroup>
-
-      <ItemGroup Condition="'$(BuildInstallers)' == 'true' AND ('$(TargetRuntimeIdentifier)' == 'linux-x64' OR '$(TargetRuntimeIdentifier)' == 'linux-arm64')">
-        <ProjectToBuild Condition=" '$(LinuxInstallerType)' == 'deb' "
-                        Include="$(RepoRoot)src\Installers\Debian\**\*.*proj" />
-        <ProjectToBuild Condition=" '$(LinuxInstallerType)' == 'rpm' "
-                        Include="$(RepoRoot)src\Installers\Rpm\**\*.*proj" />
-      </ItemGroup>
-
-      <ItemGroup Condition=" '$(TargetOsName)' == 'win' AND ('$(TargetArchitecture)' == 'x86' OR '$(TargetArchitecture)' == 'x64' OR '$(TargetArchitecture)' == 'arm64') ">
-        <NativeProjects Include="$(RepoRoot)src\**\*.vcxproj" Exclude="@(ProjectToExclude)" AdditionalProperties="Platform=x64" />
-        <NativeProjects Include="$(RepoRoot)src\**\*.vcxproj" Exclude="@(ProjectToExclude)" AdditionalProperties="Platform=Win32" />
-        <NativeProjects Include="$(RepoRoot)src\**\*.vcxproj" Exclude="@(ProjectToExclude)" AdditionalProperties="Platform=arm64" />
-      </ItemGroup>
-
       <ItemGroup>
-        <ProjectToBuild Condition=" $(BuildNative) " Include="@(NativeProjects)" Exclude="@(ProjectToExclude)" />
-        <ProjectToExclude Condition=" !$(BuildNative) " Include="@(NativeProjects)" />
-
-        <NodeJsProjects
-          Include="$(RepoRoot)eng\Npm.Workspace.nodeproj;
-                   $(RepoRoot)eng\Npm.Workspace.FunctionalTests.nodeproj;"
-                        AdditionalProperties="BuildInParallel=false"
-                        BuildInParallel="false"
-                        RestoreInParallel="false"
-                        Exclude="@(ProjectToExclude)" />
-
-        <ExplicitRequiresDelay Include="$(RepoRoot)eng\Npm.Workspace.FunctionalTests.nodeproj" />
-
-        <ProjectToBuild Condition=" '$(BuildNodeJS)' == 'true'" Include="@(NodeJsProjects)" Exclude="@(ProjectToExclude)" />
-        <ProjectToExclude Condition=" '$(BuildNodeJS)' != 'true'" Include="@(NodeJsProjects)" />
-
-        <JavaProjects Include="$(RepoRoot)src\SignalR\**\*.javaproj"
-                      Exclude="@(ProjectToExclude)" />
-
-        <ProjectToBuild Condition=" '$(BuildJava)' == 'true'" Include="@(JavaProjects)" Exclude="@(ProjectToExclude)" />
-        <ProjectToExclude Condition=" '$(BuildJava)' != 'true'" Include="@(JavaProjects)" />
-
-        <!--
-          Use caution to avoid deep recursion. If the globbing pattern picks up something which exceeds MAX_PATH,
-          the entire pattern will silently fail to evaluate correctly.
-        -->
-        <DotNetProjects Include="
-                          $(RepoRoot)src\Framework\App.Ref\src\Microsoft.AspNetCore.App.Ref.csproj;
-                          $(RepoRoot)src\Framework\App.Ref.Internal\src\Microsoft.AspNetCore.App.Ref.Internal.csproj;
-                          $(RepoRoot)src\Framework\AspNetCoreAnalyzers\test\Microsoft.AspNetCore.App.Analyzers.Test.csproj;
-                          $(RepoRoot)src\Framework\test\Microsoft.AspNetCore.App.UnitTests.csproj;
-                          $(RepoRoot)src\Assets\**\*.*proj;
-                          $(RepoRoot)src\Caching\**\*.*proj;
-                          $(RepoRoot)src\DefaultBuilder\**\*.*proj;
-                          $(RepoRoot)src\Features\JsonPatch\**\*.*proj;
-                          $(RepoRoot)src\DataProtection\**\*.*proj;
-                          $(RepoRoot)src\Antiforgery\**\*.*proj;
-                          $(RepoRoot)src\Hosting\**\*.*proj;
-                          $(RepoRoot)src\Http\**\*.*proj;
-                          $(RepoRoot)src\HttpClientFactory\**\*.*proj;
-                          $(RepoRoot)src\Html.Abstractions\**\*.*proj;
-                          $(RepoRoot)src\Identity\**\*.*proj;
-                          $(RepoRoot)src\Servers\**\*.csproj;
-                          $(RepoRoot)src\Security\**\*.*proj;
-                          $(RepoRoot)src\SiteExtensions\Microsoft.Web.Xdt.Extensions\**\*.csproj;
-                          $(RepoRoot)src\SiteExtensions\LoggingAggregate\test\**\*.csproj;
-                          $(RepoRoot)src\Shared\**\*.*proj;
-                          $(RepoRoot)src\Tools\**\*.*proj;
-                          $(RepoRoot)src\Logging.AzureAppServices\**\src\*.csproj;
-                          $(RepoRoot)src\Middleware\**\*.csproj;
-                          $(RepoRoot)src\Razor\**\*.*proj;
-                          $(RepoRoot)src\Mvc\**\*.*proj;
-                          $(RepoRoot)src\Azure\**\*.*proj;
-                          $(RepoRoot)src\SignalR\**\*.csproj;
-                          $(RepoRoot)src\StaticAssets\**\*.csproj;
-                          $(RepoRoot)src\Components\**\*.csproj;
-                          $(RepoRoot)src\Analyzers\**\*.csproj;
-                          $(RepoRoot)src\FileProviders\**\*.csproj;
-                          $(RepoRoot)src\Configuration.KeyPerFile\**\*.csproj;
-                          $(RepoRoot)src\Localization\**\*.csproj;
-                          $(RepoRoot)src\ObjectPool\**\*.csproj;
-                          $(RepoRoot)src\JSInterop\**\*.csproj;
-                          $(RepoRoot)src\WebEncoders\**\*.csproj;
-                          $(RepoRoot)src\HealthChecks\**\*.csproj;
-                          $(RepoRoot)src\Testing\**\*.csproj;
-                          $(RepoRoot)src\Grpc\**\*.csproj;
-                          $(RepoRoot)src\ProjectTemplates\**\*.csproj;
-                          $(RepoRoot)src\Extensions\**\*.csproj;
-                          $(RepoRoot)src\BuildAfterTargetingPack\*.csproj;
-                          $(RepoRoot)src\OpenApi\**\*.csproj;
-                          $(RepoRoot)eng\tools\HelixTestRunner\HelixTestRunner.csproj;
-                          "
-                        Exclude="
-                          @(ProjectToBuild);
-                          @(ProjectToExclude);
-                          $(RepoRoot)**\node_modules\**\*;
-                          $(RepoRoot)**\bin\**\*;
-                          $(RepoRoot)**\obj\**\*;"
-                        Condition=" '$(BuildMainlyReferenceProviders)' != 'true' " />
-        <DotNetProjects Include="
-                          $(RepoRoot)src\Assets\**\*.*proj;
-                          $(RepoRoot)src\Caching\**\src\*.csproj;
-                          $(RepoRoot)src\DefaultBuilder\**\src\*.csproj;
-                          $(RepoRoot)src\Features\JsonPatch\**\src\*.csproj;
-                          $(RepoRoot)src\DataProtection\**\src\*.csproj;
-                          $(RepoRoot)src\Antiforgery\**\src\*.csproj;
-                          $(RepoRoot)src\Hosting\**\src\*.csproj;
-                          $(RepoRoot)src\Http\**\src\*.csproj;
-                          $(RepoRoot)src\HttpClientFactory\**\src\*.csproj;
-                          $(RepoRoot)src\Html.Abstractions\src\*.csproj;
-                          $(RepoRoot)src\Identity\**\src\*.csproj;
-                          $(RepoRoot)src\Servers\**\src\*.csproj;
-                          $(RepoRoot)src\Security\**\src\*.csproj;
-                          $(RepoRoot)src\SiteExtensions\**\src\*.csproj;
-                          $(RepoRoot)src\Tools\**\src\*.csproj;
-                          $(RepoRoot)src\Logging.AzureAppServices\**\src\*.csproj;
-                          $(RepoRoot)src\Middleware\**\src\*.csproj;
-                          $(RepoRoot)src\Razor\**\src\*.csproj;
-                          $(RepoRoot)src\Mvc\**\src\*.csproj;
-                          $(RepoRoot)src\Azure\**\src\*.csproj;
-                          $(RepoRoot)src\SignalR\**\src\*.csproj;
-                          $(RepoRoot)src\StaticAssets\src\*.csproj;
-                          $(RepoRoot)src\Components\**\src\*.csproj;
-                          $(RepoRoot)src\FileProviders\**\src\*.csproj;
-                          $(RepoRoot)src\Configuration.KeyPerFile\**\src\*.csproj;
-                          $(RepoRoot)src\Localization\**\src\*.csproj;
-                          $(RepoRoot)src\ObjectPool\**\src\*.csproj;
-                          $(RepoRoot)src\JSInterop\**\src\*.csproj;
-                          $(RepoRoot)src\WebEncoders\**\src\*.csproj;
-                          $(RepoRoot)src\HealthChecks\**\src\*.csproj;
-                          $(RepoRoot)src\Testing\**\src\*.csproj;
-                          $(RepoRoot)src\Extensions\**\src\*.csproj;
-                          $(RepoRoot)src\BuildAfterTargetingPack\*.csproj;
-                          $(RepoRoot)src\OpenApi\**\src\*.csproj;
-                          "
-                        Exclude="
-                          @(ProjectToBuild);
-                          @(ProjectToExclude);
-                          $(RepoRoot)**\node_modules\**\*;
-                          $(RepoRoot)**\bin\**\*;
-                          $(RepoRoot)**\obj\**\*;"
-                        Condition=" '$(BuildMainlyReferenceProviders)' == 'true' " />
-
-        <ProjectToBuild Condition=" '$(BuildManaged)' == 'true'" Include="@(DotNetProjects)" Exclude="@(ProjectToExclude)" />
-        <ProjectToExclude Condition=" '$(BuildManaged)' != 'true'" Include="@(DotNetProjects)" />
+        <ProjectToBuild Include="$(MSBuildThisFileDirectory)Build\Native.Traversal.proj" Condition="'$(BuildNative)' == 'true'" BuildInParallel="false" />
+        <ProjectToBuild Include="$(MSBuildThisFileDirectory)Build\NodeJS.Traversal.proj" Condition="'$(BuildNodeJS)' == 'true'" BuildInParallel="false" />
+        <ProjectToBuild Include="$(MSBuildThisFileDirectory)Build\Java.Traversal.proj" Condition="'$(BuildJava)' == 'true'" BuildInParallel="false" />
+        <ProjectToBuild Include="$(MSBuildThisFileDirectory)Build\Managed.Traversal.proj" Condition="'$(BuildManaged)' == 'true'" BuildInParallel="false" />
+        <ProjectToBuild Include="$(MSBuildThisFileDirectory)Build\Installers.Traversal.proj" Condition="'$(BuildInstallers)' == 'true'" BuildInParallel="false" />
       </ItemGroup>
     </Otherwise>
   </Choose>
diff --git a/eng/Build/Directory.Build.props b/eng/Build/Directory.Build.props
new file mode 100644
index 0000000000..005a0d708c
--- /dev/null
+++ b/eng/Build/Directory.Build.props
@@ -0,0 +1,66 @@
+<Project>
+
+  <!-- Don't import repo infrastructure -->
+  <PropertyGroup>
+    <ImportDirectoryPackagesProps>false</ImportDirectoryPackagesProps>
+  </PropertyGroup>
+
+  <Import Project="..\Common.props" />
+
+  <!--
+    @(RequiresDelayedBuild) projects can be extended many ways but this isn't fully automated because the new
+    projects likely aren't referenced initially. To add new projects, edit RequiresDelayedBuildProjects.props
+    manually, update the $(BuildMainlyReferenceProviders)' == 'true' item group near the bottom of this file,
+    or edit BuildAfterTargetingPack.csproj. Then run GenerateProjectList.ps1 (even for the first option to ensure
+    the format is correct) and undo any temporary changes. When complete, only BuildAfterTargetingPack.csproj and
+    other @(RequiresDelayedBuild) projects should mention projects listed in RequiresDelayedBuildProjects.props.
+  -->
+  <Import Project="..\RequiresDelayedBuildProjects.props" />
+
+  <!-- These projects are always excluded, even when -projects is specified on command line. -->
+  <ItemGroup>
+    <!-- Explicitly excluded projects -->
+    <ProjectToExclude Include="$(ProjectToExclude)" />
+
+    <!-- These projects use 'legacy' csproj, which is not supported by dotnet-msbuild. -->
+    <ProjectToExclude Include="
+                      $(RepoRoot)src\Servers\HttpSys\samples\TestClient\TestClient.csproj;
+                      $(RepoRoot)src\Middleware\WebSockets\samples\TestServer\WebSockets.TestServer.csproj;
+                      "
+                      Condition=" '$(MSBuildRuntimeType)' == 'Core' " />
+
+    <!-- Exclude the websockets samples for now because they use classic .csproj, which is not yet supported in our build. -->
+    <ProjectToExclude Include="$(RepoRoot)src\Middleware\WebSockets\samples\**\*.csproj" />
+
+    <!-- These projects are meant to be referenced only by tests or via BuildAfterTargetingPack.csproj. -->
+    <ProjectToExclude
+      Include="$(RepoRoot)src\**\testassets\**\*.*proj;
+               @(RequiresDelayedBuild);
+               "
+      Exclude="$(RepoRoot)src\Components\WebAssembly\testassets\WasmLinkerTest\*.*proj;
+               $(RepoRoot)src\Components\WebView\Samples\PhotinoPlatform\testassets\PhotinoTestApp\*.*proj;
+               $(RepoRoot)src\Http\Routing\test\testassets\RoutingSandbox\*.*proj;
+               $(RepoRoot)src\Security\Authentication\Negotiate\test\testassets\Negotiate.Client\*.*proj;
+               $(RepoRoot)src\Security\Authentication\Negotiate\test\testassets\Negotiate.Server\*.*proj;
+               " />
+
+    <!-- These projects are not meant to be built in this repo. In the Installers case, must explicitly opt in. -->
+    <ProjectToExclude Include="
+                      $(RepoRoot)src\submodules\googletest\**\*.*proj;
+                      $(RepoRoot)src\submodules\MessagePack-CSharp\**\*.*proj;
+                      $(RepoRoot)src\Components\Web.JS\node_modules\**\*.*proj;
+                      $(RepoRoot)src\Installers\**\*.*proj;
+                      $(RepoRoot)src\ProjectTemplates\Web.ProjectTemplates\content\**\*.*proj;
+                      $(RepoRoot)src\SignalR\clients\ts\**\node_modules\**\*.*proj;
+                      " />
+
+    <!-- Exclude the benchmarks because they use <PackageReference>. -->
+    <ProjectToExclude Include="
+                      $(RepoRoot)src\Components\benchmarkapps\BlazingPizza.Server\**\*.csproj;
+                      $(RepoRoot)src\Mvc\perf\**\*.csproj;
+                      $(RepoRoot)src\Servers\Kestrel\perf\PlatformBenchmarks\**\*.csproj;
+                      $(RepoRoot)src\SignalR\perf\benchmarkapps\**\*.csproj;
+                      " />
+  </ItemGroup>
+
+</Project>
\ No newline at end of file
diff --git a/eng/Build/Directory.Build.targets b/eng/Build/Directory.Build.targets
new file mode 100644
index 0000000000..46427550a9
--- /dev/null
+++ b/eng/Build/Directory.Build.targets
@@ -0,0 +1,13 @@
+<Project>
+
+  <Target Name="GetReferencesProvided" Returns="ProvidesReferenceOrRequiresDelay">
+    <MSBuild Projects="@(ProjectReference);@(ExplicitRequiresDelay)"
+             Targets="GetReferencesProvided"
+             BuildInParallel="true"
+             SkipNonexistentTargets="true"
+             SkipNonexistentProjects="true">
+      <Output TaskParameter="TargetOutputs" ItemName="ProvidesReferenceOrRequiresDelay" />
+    </MSBuild>
+  </Target>
+
+</Project>
\ No newline at end of file
diff --git a/eng/Build/Installers.Traversal.proj b/eng/Build/Installers.Traversal.proj
new file mode 100644
index 0000000000..aac8ea8742
--- /dev/null
+++ b/eng/Build/Installers.Traversal.proj
@@ -0,0 +1,72 @@
+<Project Sdk="Microsoft.Build.Traversal">
+
+  <PropertyGroup>
+    <_BuildWindowsInstallers Condition="'$(TargetOsName)' == 'win' and ('$(TargetArchitecture)' == 'x86' or '$(TargetArchitecture)' == 'x64' or '$(TargetArchitecture)' == 'arm64')">true</_BuildWindowsInstallers>
+    <_WixTargetPlatform Condition="'$(TargetArchitecture)' == 'x86' ">Win32</_WixTargetPlatform>
+    <_WixTargetPlatform Condition="'$(TargetArchitecture)' == 'x64' ">x64</_WixTargetPlatform>
+    <_WixTargetPlatform Condition="'$(TargetArchitecture)' == 'arm64' ">ARM64</_WixTargetPlatform>
+  </PropertyGroup>
+
+  <ItemGroup Condition="'$(DotNetBuild)' != 'true' and '$(_BuildWindowsInstallers)' == 'true'">
+    <!-- Build the ANCM custom action -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\CustomAction\aspnetcoreCA.vcxproj" AdditionalProperties="Platform=x64" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\CustomAction\aspnetcoreCA.vcxproj" AdditionalProperties="Platform=Win32" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\CustomAction\aspnetcoreCA.vcxproj" AdditionalProperties="Platform=ARM64" />
+
+    <!-- Build the ANCM msis -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMIISExpressV2\AncmIISExpressV2.wixproj" AdditionalProperties="Platform=x64" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMIISExpressV2\AncmIISExpressV2.wixproj" AdditionalProperties="Platform=x86" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMIISExpressV2\AncmIISExpressV2.wixproj" AdditionalProperties="Platform=arm64" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMV2\ANCMV2.wixproj" AdditionalProperties="Platform=x64" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMV2\ANCMV2.wixproj" AdditionalProperties="Platform=x86" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMV2\ANCMV2.wixproj" AdditionalProperties="Platform=arm64" />
+
+    <!-- Build the targeting pack installers -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\TargetingPack\TargetingPack.wixproj" AdditionalProperties="Platform=x64" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\TargetingPack\TargetingPack.wixproj" AdditionalProperties="Platform=x86" />
+    <!-- This really shouldn't be here, but instead of harvesting from the intermediate/output directories, the targeting pack installer logic
+    harvests from a zip of the reference assemblies. Producing it in each leg ends up with multiple targeting packs
+    getting produced and the BAR will reject the build. Centralize building the targeting pack in the x86/x64 leg. -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\TargetingPack\TargetingPack.wixproj" AdditionalProperties="Platform=arm64" />
+
+    <!-- Build the SharedFramework installers -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkBundle\SharedFrameworkBundle.wixproj" AdditionalProperties="Platform=x64" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkBundle\SharedFrameworkBundle.wixproj" AdditionalProperties="Platform=x86" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkBundle\SharedFrameworkBundle.wixproj" AdditionalProperties="Platform=arm64" />
+
+    <!-- Build the SharedFramework wixlib -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkLib\SharedFrameworkLib.wixproj" AdditionalProperties="Platform=x64" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkLib\SharedFrameworkLib.wixproj" AdditionalProperties="Platform=x86" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkLib\SharedFrameworkLib.wixproj" AdditionalProperties="Platform=arm64" />
+
+    <!-- Windows hosting bundle -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\WindowsHostingBundle\WindowsHostingBundle.wixproj" AdditionalProperties="Platform=x86" />
+  </ItemGroup>
+
+  <!-- In a vertical build, only build the MSIs for the current vertical in the first pass and build the hosting bundle in the second pass -->
+  <ItemGroup Condition="'$(DotNetBuild)' == 'true' and ('$(DotNetBuildPass)' == '' or '$(DotNetBuildPass)' == '1') and '$(_BuildWindowsInstallers)' == 'true'">
+    <!-- Build the ANCM custom action -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\CustomAction\aspnetcoreCA.vcxproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
+    <!-- Build the ANCM msis -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMIISExpressV2\AncmIISExpressV2.wixproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMV2\ANCMV2.wixproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
+    <!-- Build the targeting pack installers -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\TargetingPack\TargetingPack.wixproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
+    <!-- Build the SharedFramework installers -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkBundle\SharedFrameworkBundle.wixproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
+    <!-- Build the SharedFramework wixlib -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkLib\SharedFrameworkLib.wixproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
+  </ItemGroup>
+
+  <ItemGroup Condition="'$(DotNetBuild)' == 'true' and ('$(DotNetBuildPass)' == '2') and '$(TargetOsName)' == 'win' and '$(TargetArchitecture)' == 'x64'">
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\WindowsHostingBundle\WindowsHostingBundle.wixproj" AdditionalProperties="Platform=x86" />
+  </ItemGroup>
+
+  <ItemGroup Condition="'$(TargetRuntimeIdentifier)' == 'linux-x64' or '$(TargetRuntimeIdentifier)' == 'linux-arm64'">
+    <ProjectReference Condition=" '$(LinuxInstallerType)' == 'deb' "
+                    Include="$(RepoRoot)src\Installers\Debian\**\*.*proj" />
+    <ProjectReference Condition=" '$(LinuxInstallerType)' == 'rpm' "
+                    Include="$(RepoRoot)src\Installers\Rpm\**\*.*proj" />
+  </ItemGroup>
+
+</Project>
diff --git a/eng/Build/Java.Traversal.proj b/eng/Build/Java.Traversal.proj
new file mode 100644
index 0000000000..af6c13ec70
--- /dev/null
+++ b/eng/Build/Java.Traversal.proj
@@ -0,0 +1,7 @@
+<Project Sdk="Microsoft.Build.Traversal">
+
+  <ItemGroup>
+    <ProjectReference Include="$(RepoRoot)src\SignalR\**\*.javaproj" Exclude="@(ProjectToExclude)" />
+  </ItemGroup>
+
+</Project>
diff --git a/eng/Build/Managed.Traversal.proj b/eng/Build/Managed.Traversal.proj
new file mode 100644
index 0000000000..a508034463
--- /dev/null
+++ b/eng/Build/Managed.Traversal.proj
@@ -0,0 +1,104 @@
+<Project Sdk="Microsoft.Build.Traversal">
+
+  <!--
+    Use caution to avoid deep recursion. If the globbing pattern picks up something which exceeds MAX_PATH,
+    the entire pattern will silently fail to evaluate correctly.
+  -->
+  <ItemGroup>
+    <ProjectReference Include="
+                      $(RepoRoot)src\Framework\App.Ref\src\Microsoft.AspNetCore.App.Ref.csproj;
+                      $(RepoRoot)src\Framework\App.Ref.Internal\src\Microsoft.AspNetCore.App.Ref.Internal.csproj;
+                      $(RepoRoot)src\Framework\AspNetCoreAnalyzers\test\Microsoft.AspNetCore.App.Analyzers.Test.csproj;
+                      $(RepoRoot)src\Framework\test\Microsoft.AspNetCore.App.UnitTests.csproj;
+                      $(RepoRoot)src\Caching\**\*.*proj;
+                      $(RepoRoot)src\DefaultBuilder\**\*.*proj;
+                      $(RepoRoot)src\Features\JsonPatch\**\*.*proj;
+                      $(RepoRoot)src\DataProtection\**\*.*proj;
+                      $(RepoRoot)src\Antiforgery\**\*.*proj;
+                      $(RepoRoot)src\Hosting\**\*.*proj;
+                      $(RepoRoot)src\Http\**\*.*proj;
+                      $(RepoRoot)src\HttpClientFactory\**\*.*proj;
+                      $(RepoRoot)src\Html.Abstractions\**\*.*proj;
+                      $(RepoRoot)src\Identity\**\*.*proj;
+                      $(RepoRoot)src\Servers\**\*.csproj;
+                      $(RepoRoot)src\Security\**\*.*proj;
+                      $(RepoRoot)src\SiteExtensions\Microsoft.Web.Xdt.Extensions\**\*.csproj;
+                      $(RepoRoot)src\SiteExtensions\LoggingAggregate\test\**\*.csproj;
+                      $(RepoRoot)src\Shared\**\*.*proj;
+                      $(RepoRoot)src\Tools\**\*.*proj;
+                      $(RepoRoot)src\Logging.AzureAppServices\**\src\*.csproj;
+                      $(RepoRoot)src\Middleware\**\*.csproj;
+                      $(RepoRoot)src\Razor\**\*.*proj;
+                      $(RepoRoot)src\Mvc\**\*.*proj;
+                      $(RepoRoot)src\Azure\**\*.*proj;
+                      $(RepoRoot)src\SignalR\**\*.csproj;
+                      $(RepoRoot)src\StaticAssets\**\*.csproj;
+                      $(RepoRoot)src\Components\**\*.csproj;
+                      $(RepoRoot)src\Analyzers\**\*.csproj;
+                      $(RepoRoot)src\FileProviders\**\*.csproj;
+                      $(RepoRoot)src\Configuration.KeyPerFile\**\*.csproj;
+                      $(RepoRoot)src\Localization\**\*.csproj;
+                      $(RepoRoot)src\ObjectPool\**\*.csproj;
+                      $(RepoRoot)src\JSInterop\**\*.csproj;
+                      $(RepoRoot)src\WebEncoders\**\*.csproj;
+                      $(RepoRoot)src\HealthChecks\**\*.csproj;
+                      $(RepoRoot)src\Testing\**\*.csproj;
+                      $(RepoRoot)src\Grpc\**\*.csproj;
+                      $(RepoRoot)src\ProjectTemplates\**\*.csproj;
+                      $(RepoRoot)src\Extensions\**\*.csproj;
+                      $(RepoRoot)src\BuildAfterTargetingPack\*.csproj;
+                      $(RepoRoot)src\OpenApi\**\*.csproj;
+                      $(RepoRoot)eng\tools\HelixTestRunner\HelixTestRunner.csproj;
+                      "
+                    Exclude="
+                      @(ProjectToExclude);
+                      $(RepoRoot)**\*.vcxproj;
+                      $(RepoRoot)**\node_modules\**\*;
+                      $(RepoRoot)**\bin\**\*;
+                      $(RepoRoot)**\obj\**\*;"
+                    Condition=" '$(BuildMainlyReferenceProviders)' != 'true' " />
+    <ProjectReference Include="
+                      $(RepoRoot)src\Caching\**\src\*.csproj;
+                      $(RepoRoot)src\DefaultBuilder\**\src\*.csproj;
+                      $(RepoRoot)src\Features\JsonPatch\**\src\*.csproj;
+                      $(RepoRoot)src\DataProtection\**\src\*.csproj;
+                      $(RepoRoot)src\Antiforgery\**\src\*.csproj;
+                      $(RepoRoot)src\Hosting\**\src\*.csproj;
+                      $(RepoRoot)src\Http\**\src\*.csproj;
+                      $(RepoRoot)src\HttpClientFactory\**\src\*.csproj;
+                      $(RepoRoot)src\Html.Abstractions\src\*.csproj;
+                      $(RepoRoot)src\Identity\**\src\*.csproj;
+                      $(RepoRoot)src\Servers\**\src\*.csproj;
+                      $(RepoRoot)src\Security\**\src\*.csproj;
+                      $(RepoRoot)src\SiteExtensions\**\src\*.csproj;
+                      $(RepoRoot)src\Tools\**\src\*.csproj;
+                      $(RepoRoot)src\Logging.AzureAppServices\**\src\*.csproj;
+                      $(RepoRoot)src\Middleware\**\src\*.csproj;
+                      $(RepoRoot)src\Razor\**\src\*.csproj;
+                      $(RepoRoot)src\Mvc\**\src\*.csproj;
+                      $(RepoRoot)src\Azure\**\src\*.csproj;
+                      $(RepoRoot)src\SignalR\**\src\*.csproj;
+                      $(RepoRoot)src\StaticAssets\src\*.csproj;
+                      $(RepoRoot)src\Components\**\src\*.csproj;
+                      $(RepoRoot)src\FileProviders\**\src\*.csproj;
+                      $(RepoRoot)src\Configuration.KeyPerFile\**\src\*.csproj;
+                      $(RepoRoot)src\Localization\**\src\*.csproj;
+                      $(RepoRoot)src\ObjectPool\**\src\*.csproj;
+                      $(RepoRoot)src\JSInterop\**\src\*.csproj;
+                      $(RepoRoot)src\WebEncoders\**\src\*.csproj;
+                      $(RepoRoot)src\HealthChecks\**\src\*.csproj;
+                      $(RepoRoot)src\Testing\**\src\*.csproj;
+                      $(RepoRoot)src\Extensions\**\src\*.csproj;
+                      $(RepoRoot)src\BuildAfterTargetingPack\*.csproj;
+                      $(RepoRoot)src\OpenApi\**\src\*.csproj;
+                      "
+                    Exclude="
+                      @(ProjectToExclude);
+                      $(RepoRoot)**\*.vcxproj;
+                      $(RepoRoot)**\node_modules\**\*;
+                      $(RepoRoot)**\bin\**\*;
+                      $(RepoRoot)**\obj\**\*;"
+                    Condition=" '$(BuildMainlyReferenceProviders)' == 'true' " />
+  </ItemGroup>
+
+</Project>
diff --git a/eng/Build/Native.Traversal.proj b/eng/Build/Native.Traversal.proj
new file mode 100644
index 0000000000..e404f0125d
--- /dev/null
+++ b/eng/Build/Native.Traversal.proj
@@ -0,0 +1,9 @@
+<Project Sdk="Microsoft.Build.Traversal">
+
+  <ItemGroup Condition=" '$(TargetOsName)' == 'win' AND ('$(TargetArchitecture)' == 'x86' OR '$(TargetArchitecture)' == 'x64' OR '$(TargetArchitecture)' == 'arm64') ">
+    <ProjectReference Include="$(RepoRoot)src\**\*.vcxproj" Exclude="@(ProjectToExclude)" AdditionalProperties="Platform=x64" />
+    <ProjectReference Include="$(RepoRoot)src\**\*.vcxproj" Exclude="@(ProjectToExclude)" AdditionalProperties="Platform=Win32" />
+    <ProjectReference Include="$(RepoRoot)src\**\*.vcxproj" Exclude="@(ProjectToExclude)" AdditionalProperties="Platform=arm64" />
+  </ItemGroup>
+
+</Project>
diff --git a/eng/Build/NodeJS.Traversal.proj b/eng/Build/NodeJS.Traversal.proj
new file mode 100644
index 0000000000..a606a2de6d
--- /dev/null
+++ b/eng/Build/NodeJS.Traversal.proj
@@ -0,0 +1,12 @@
+<Project Sdk="Microsoft.Build.Traversal">
+
+  <ItemGroup>
+    <ProjectReference
+      Include="$(RepoRoot)eng\Npm.Workspace.nodeproj;
+               $(RepoRoot)eng\Npm.Workspace.FunctionalTests.nodeproj"
+      RestoreInParallel="false"
+      BuildInParallel="false"
+      Exclude="@(ProjectToExclude)" />
+  </ItemGroup>
+
+</Project>
diff --git a/eng/CodeGen.proj b/eng/CodeGen.proj
index 0516cefe3d..d635409e6e 100644
--- a/eng/CodeGen.proj
+++ b/eng/CodeGen.proj
@@ -1,21 +1,24 @@
 <Project>
   <PropertyGroup>
-    <BuildManaged>true</BuildManaged>
     <RepoRoot
         Condition=" '$(RepoRoot)' == '' OR !HasTrailingSlash('$(RepoRoot)') ">$([MSBuild]::NormalizeDirectory('$(MSBuildThisFileDirectory)', '..'))</RepoRoot>
-    <BuildMainlyReferenceProviders>true</BuildMainlyReferenceProviders>
   </PropertyGroup>
 
   <Import Project="Build.props" />
 
+  <ItemGroup>
+    <ExplicitRequiresDelay Include="$(RepoRoot)eng\Npm.Workspace.FunctionalTests.nodeproj" />
+  </ItemGroup>
+
   <Target Name="GenerateProjectList">
-    <Message Importance="High" Text="Analyzing @(ProjectToBuild->Count()) projects" />
+    <Message Importance="High" Text="Analyzing projects..." />
 
     <MSBuild Projects="@(ProjectToBuild);@(ExplicitRequiresDelay)"
              Targets="GetReferencesProvided"
              BuildInParallel="true"
              SkipNonexistentTargets="true"
-             SkipNonexistentProjects="true">
+             SkipNonexistentProjects="true"
+             AdditionalProperties="BuildMainlyReferenceProviders=true">
       <Output TaskParameter="TargetOutputs" ItemName="_ProvidesReferenceOrRequiresDelay" />
     </MSBuild>
 
diff --git a/eng/Installers.proj b/eng/Installers.proj
new file mode 100644
index 0000000000..aac8ea8742
--- /dev/null
+++ b/eng/Installers.proj
@@ -0,0 +1,72 @@
+<Project Sdk="Microsoft.Build.Traversal">
+
+  <PropertyGroup>
+    <_BuildWindowsInstallers Condition="'$(TargetOsName)' == 'win' and ('$(TargetArchitecture)' == 'x86' or '$(TargetArchitecture)' == 'x64' or '$(TargetArchitecture)' == 'arm64')">true</_BuildWindowsInstallers>
+    <_WixTargetPlatform Condition="'$(TargetArchitecture)' == 'x86' ">Win32</_WixTargetPlatform>
+    <_WixTargetPlatform Condition="'$(TargetArchitecture)' == 'x64' ">x64</_WixTargetPlatform>
+    <_WixTargetPlatform Condition="'$(TargetArchitecture)' == 'arm64' ">ARM64</_WixTargetPlatform>
+  </PropertyGroup>
+
+  <ItemGroup Condition="'$(DotNetBuild)' != 'true' and '$(_BuildWindowsInstallers)' == 'true'">
+    <!-- Build the ANCM custom action -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\CustomAction\aspnetcoreCA.vcxproj" AdditionalProperties="Platform=x64" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\CustomAction\aspnetcoreCA.vcxproj" AdditionalProperties="Platform=Win32" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\CustomAction\aspnetcoreCA.vcxproj" AdditionalProperties="Platform=ARM64" />
+
+    <!-- Build the ANCM msis -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMIISExpressV2\AncmIISExpressV2.wixproj" AdditionalProperties="Platform=x64" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMIISExpressV2\AncmIISExpressV2.wixproj" AdditionalProperties="Platform=x86" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMIISExpressV2\AncmIISExpressV2.wixproj" AdditionalProperties="Platform=arm64" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMV2\ANCMV2.wixproj" AdditionalProperties="Platform=x64" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMV2\ANCMV2.wixproj" AdditionalProperties="Platform=x86" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMV2\ANCMV2.wixproj" AdditionalProperties="Platform=arm64" />
+
+    <!-- Build the targeting pack installers -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\TargetingPack\TargetingPack.wixproj" AdditionalProperties="Platform=x64" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\TargetingPack\TargetingPack.wixproj" AdditionalProperties="Platform=x86" />
+    <!-- This really shouldn't be here, but instead of harvesting from the intermediate/output directories, the targeting pack installer logic
+    harvests from a zip of the reference assemblies. Producing it in each leg ends up with multiple targeting packs
+    getting produced and the BAR will reject the build. Centralize building the targeting pack in the x86/x64 leg. -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\TargetingPack\TargetingPack.wixproj" AdditionalProperties="Platform=arm64" />
+
+    <!-- Build the SharedFramework installers -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkBundle\SharedFrameworkBundle.wixproj" AdditionalProperties="Platform=x64" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkBundle\SharedFrameworkBundle.wixproj" AdditionalProperties="Platform=x86" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkBundle\SharedFrameworkBundle.wixproj" AdditionalProperties="Platform=arm64" />
+
+    <!-- Build the SharedFramework wixlib -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkLib\SharedFrameworkLib.wixproj" AdditionalProperties="Platform=x64" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkLib\SharedFrameworkLib.wixproj" AdditionalProperties="Platform=x86" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkLib\SharedFrameworkLib.wixproj" AdditionalProperties="Platform=arm64" />
+
+    <!-- Windows hosting bundle -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\WindowsHostingBundle\WindowsHostingBundle.wixproj" AdditionalProperties="Platform=x86" />
+  </ItemGroup>
+
+  <!-- In a vertical build, only build the MSIs for the current vertical in the first pass and build the hosting bundle in the second pass -->
+  <ItemGroup Condition="'$(DotNetBuild)' == 'true' and ('$(DotNetBuildPass)' == '' or '$(DotNetBuildPass)' == '1') and '$(_BuildWindowsInstallers)' == 'true'">
+    <!-- Build the ANCM custom action -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\CustomAction\aspnetcoreCA.vcxproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
+    <!-- Build the ANCM msis -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMIISExpressV2\AncmIISExpressV2.wixproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\AspNetCoreModule-Setup\ANCMV2\ANCMV2.wixproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
+    <!-- Build the targeting pack installers -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\TargetingPack\TargetingPack.wixproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
+    <!-- Build the SharedFramework installers -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkBundle\SharedFrameworkBundle.wixproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
+    <!-- Build the SharedFramework wixlib -->
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\SharedFrameworkLib\SharedFrameworkLib.wixproj" AdditionalProperties="Platform=$(_WixTargetPlatform)" />
+  </ItemGroup>
+
+  <ItemGroup Condition="'$(DotNetBuild)' == 'true' and ('$(DotNetBuildPass)' == '2') and '$(TargetOsName)' == 'win' and '$(TargetArchitecture)' == 'x64'">
+    <ProjectReference Include="$(RepoRoot)src\Installers\Windows\WindowsHostingBundle\WindowsHostingBundle.wixproj" AdditionalProperties="Platform=x86" />
+  </ItemGroup>
+
+  <ItemGroup Condition="'$(TargetRuntimeIdentifier)' == 'linux-x64' or '$(TargetRuntimeIdentifier)' == 'linux-arm64'">
+    <ProjectReference Condition=" '$(LinuxInstallerType)' == 'deb' "
+                    Include="$(RepoRoot)src\Installers\Debian\**\*.*proj" />
+    <ProjectReference Condition=" '$(LinuxInstallerType)' == 'rpm' "
+                    Include="$(RepoRoot)src\Installers\Rpm\**\*.*proj" />
+  </ItemGroup>
+
+</Project>
diff --git a/eng/Tools.props b/eng/Tools.props
index e00d1d215c..c71ff43686 100644
--- a/eng/Tools.props
+++ b/eng/Tools.props
@@ -1,8 +1,7 @@
 <Project>
-  <!-- Update the generated files when we restore projects. Skip in desktop msbuild due to VS 16.8 requirements. -->
+  <!-- Update the generated files when we restore projects. -->
   <Target Name="GenerateDirectoryBuildFiles"
-      AfterTargets="Restore"
-      Condition=" '$(MSBuildRuntimeType)' == 'core' ">
+      AfterTargets="Restore">
     <!-- Separate invocations and use different properties to ensure second can load the restored package info. -->
     <MSBuild Projects="$(RepoRoot)eng\tools\GenerateFiles\GenerateFiles.csproj"
         RemoveProperties="BaseIntermediateOutputPath"
diff --git a/eng/build.ps1 b/eng/build.ps1
index 3696fe11e0..86f4a4f67f 100644
--- a/eng/build.ps1
+++ b/eng/build.ps1
@@ -184,6 +184,7 @@ param(
     [Alias('v')]
     [string]$Verbosity = 'minimal',
     [switch]$DumpProcesses, # Capture all running processes and dump them to a file.
+    [string]$msbuildEngine = 'dotnet',
 
     # Other lifecycle targets
     [switch]$Help, # Show help
@@ -288,24 +289,20 @@ if ($RuntimeSourceFeed -or $RuntimeSourceFeedKey) {
 }
 
 # Split build categories between dotnet msbuild and desktop msbuild. Use desktop msbuild as little as possible.
-[string[]]$dotnetBuildArguments = $MSBuildArguments
+[string[]]$dotnetBuildArguments = ''
+[string[]]$MSBuildOnlyArguments = ''
+
 if ($All) { $dotnetBuildArguments += '/p:BuildAllProjects=true' }
-if ($Projects) {
-    if ($BuildNative) {
-        $MSBuildArguments += "/p:ProjectToBuild=$Projects"
-    } else {
-        $dotnetBuildArguments += "/p:ProjectToBuild=$Projects"
-    }
-}
+if ($Projects) { $MSBuildArguments += "/p:ProjectToBuild=$Projects" }
 
-if ($NoBuildInstallers) { $MSBuildArguments += "/p:BuildInstallers=false"; $BuildInstallers = $false }
-if ($BuildInstallers) { $MSBuildArguments += "/p:BuildInstallers=true" }
+if ($NoBuildInstallers) { $MSBuildOnlyArguments += "/p:BuildInstallers=false"; $BuildInstallers = $false }
+if ($BuildInstallers) { $MSBuildOnlyArguments += "/p:BuildInstallers=true" }
 
 # Build native projects by default unless -NoBuildNative was specified.
 $specifiedBuildNative = $BuildNative
 $BuildNative = $true
-if ($NoBuildNative) { $MSBuildArguments += "/p:BuildNative=false"; $BuildNative = $false }
-if ($BuildNative) { $MSBuildArguments += "/p:BuildNative=true"}
+if ($NoBuildNative) { $MSBuildOnlyArguments += "/p:BuildNative=false"; $BuildNative = $false }
+if ($BuildNative) { $MSBuildOnlyArguments += "/p:BuildNative=true"}
 
 if ($NoBuildJava) { $dotnetBuildArguments += "/p:BuildJava=false"; $BuildJava = $false }
 if ($BuildJava) { $dotnetBuildArguments += "/p:BuildJava=true" }
@@ -317,23 +314,24 @@ if ($BuildNodeJS) { $dotnetBuildArguments += "/p:BuildNodeJSUnlessSourcebuild=tr
 # Don't bother with two builds if just one will build everything. Ignore super-weird cases like
 # "-Projects ... -NoBuildJava -NoBuildManaged -NoBuildNodeJS". An empty `./build.ps1` command will build both
 # managed and native projects.
-$performDesktopBuild = $BuildInstallers -or $BuildNative
-$performDotnetBuild = $BuildJava -or $BuildManaged -or $BuildNodeJS -or `
+
+# If -msbuildEngine vs is explicitly passed in, use desktop msbuild only.
+# This is necessary for one-shot builds like within the VMR.
+
+$performDesktopBuild = $BuildInstallers -or $BuildNative -or $msbuildEngine -eq 'vs'
+$performDotnetBuild = $msBuildEngine -ne 'vs' -and ($BuildJava -or $BuildManaged -or $BuildNodeJS -or `
     ($All -and -not ($NoBuildJava -and $NoBuildManaged -and $NoBuildNodeJS)) -or `
-    ($Projects -and -not ($BuildInstallers -or $specifiedBuildNative))
+    ($Projects -and -not ($BuildInstallers -or $specifiedBuildNative)))
 
 # Initialize global variables need to be set before the import of Arcade is imported
 $restore = $RunRestore
 
-# Though VS Code may indicate $nodeReuse and $msbuildEngine are unused, tools.ps1 uses them.
+# Though VS Code may indicate $nodeReuse is unused, tools.ps1 uses them.
 
 # Disable node reuse - Workaround perpetual issues in node reuse and custom task assemblies
 $nodeReuse = $false
 $env:MSBUILDDISABLENODEREUSE=1
 
-# Use `dotnet msbuild` by default
-$msbuildEngine = 'dotnet'
-
 # Ensure passing neither -bl nor -nobl on CI avoids errors in tools.ps1. This is needed because both parameters are
 # $false by default i.e. they always exist. (We currently avoid binary logs but that is made visible in the YAML.)
 if ($CI -and -not $excludeCIBinarylog) {
@@ -414,12 +412,17 @@ if ($BinaryLog) {
     $bl = GetMSBuildBinaryLogCommandLineArgument($MSBuildArguments)
     if (-not $bl) {
         $dotnetBuildArguments += "/bl:" + (Join-Path $LogDir "Build.binlog")
-        $MSBuildArguments += "/bl:" + (Join-Path $LogDir "Build.native.binlog")
+
+        # When running both builds, use a different binary log path for the desktop msbuild.
+        if ($performDesktopBuild -and $performDotnetBuild) {
+            $MSBuildOnlyArguments += "/bl:" + (Join-Path $LogDir "Build.native.binlog")
+        }
+
         $ToolsetBuildArguments += "/bl:" + (Join-Path $LogDir "Build.repotasks.binlog")
     } else {
         # Use a different binary log path when running desktop msbuild if doing both builds.
         if ($performDesktopBuild -and $performDotnetBuild) {
-            $MSBuildArguments += "/bl:" + [System.IO.Path]::ChangeExtension($bl, "native.binlog")
+            $MSBuildOnlyArguments += "/bl:" + [System.IO.Path]::ChangeExtension($bl, "native.binlog")
         }
 
         $ToolsetBuildArguments += "/bl:" + [System.IO.Path]::ChangeExtension($bl, "repotasks.binlog")
@@ -478,7 +481,12 @@ try {
             Remove-Item variable:global:_BuildTool -ErrorAction Ignore
             $msbuildEngine = 'vs'
 
-            MSBuild $toolsetBuildProj /p:RepoRoot=$RepoRoot @MSBuildArguments
+            # When running with desktop msbuild only, append the dotnet build specific arguments.
+            if (-not $performDotnetBuild) {
+                $MSBuildOnlyArguments += $dotnetBuildArguments
+            }
+
+            MSBuild $toolsetBuildProj /p:RepoRoot=$RepoRoot @MSBuildArguments @MSBuildOnlyArguments
         }
 
         if ($performDotnetBuild) {
@@ -486,7 +494,7 @@ try {
             Remove-Item variable:global:_BuildTool -ErrorAction Ignore
             $msbuildEngine = 'dotnet'
 
-            MSBuild $toolsetBuildProj /p:RepoRoot=$RepoRoot @dotnetBuildArguments
+            MSBuild $toolsetBuildProj /p:RepoRoot=$RepoRoot @MSBuildArguments @dotnetBuildArguments
         }
     }
 }
diff --git a/eng/targets/ResolveReferences.targets b/eng/targets/ResolveReferences.targets
index e416d43f30..a4018289c9 100644
--- a/eng/targets/ResolveReferences.targets
+++ b/eng/targets/ResolveReferences.targets
@@ -227,10 +227,6 @@
       Condition=" '@(PackageReference->HasMetadata('Private')->Count())' != '0' "
       Code="BUILD004"
       Text="%25(Private) metadata should not be applied to the %(Identity) package reference. Did you mean %25(PrivateAssets)?" />
-    <Warning
-      Condition=" '@(ProjectReference->HasMetadata('PrivateAssets')->Count())' != '0' "
-      Code="BUILD005"
-      Text="%25(PrivateAssets) metadata should not be applied to the %(Identity) project reference. Did you mean %25(Private)?" />
     <Warning
       Condition=" '@(Reference->HasMetadata('PrivateAssets')->Count())' != '0' "
       Code="BUILD006"
diff --git a/eng/tools/GenerateFiles/GenerateFiles.csproj b/eng/tools/GenerateFiles/GenerateFiles.csproj
index 8a1be59353..2c3765d7a4 100644
--- a/eng/tools/GenerateFiles/GenerateFiles.csproj
+++ b/eng/tools/GenerateFiles/GenerateFiles.csproj
@@ -12,7 +12,13 @@
   </ItemGroup>
 
   <!-- Update artifacts/bin/GenerateFiles/Directory.Build.* files. -->
-  <Target Name="GenerateDirectoryBuildFiles">
+  <Target Name="GenerateDirectoryBuildFiles"
+          Inputs="$(MSBuildThisFileDirectory)Directory.Build.props.in;
+                  $(MSBuildThisFileDirectory)Directory.Build.targets.in;
+                  $(ConfigDirectory)dotnet-tools.json"
+          Outputs="$(BaseOutputPath)Directory.Build.props;
+                   $(BaseOutputPath)Directory.Build.targets;
+                   $(ConfigDirectory)dotnet-tools.json">
     <PropertyGroup>
       <_TemplateProperties>
         AspNetCorePatchVersion=$(AspNetCorePatchVersion);
diff --git a/global.json b/global.json
index a553563dce..289c1c3594 100644
--- a/global.json
+++ b/global.json
@@ -28,6 +28,7 @@
   },
   "msbuild-sdks": {
     "Microsoft.DotNet.Arcade.Sdk": "10.0.0-beta.24564.1",
-    "Microsoft.DotNet.Helix.Sdk": "10.0.0-beta.24564.1"
+    "Microsoft.DotNet.Helix.Sdk": "10.0.0-beta.24564.1",
+    "Microsoft.Build.Traversal": "3.4.0"
   }
 }
diff --git a/src/Installers/Windows/SharedFrameworkBundle/SharedFrameworkBundle.wixproj b/src/Installers/Windows/SharedFrameworkBundle/SharedFrameworkBundle.wixproj
index 5f47072f1f..c308442b3f 100644
--- a/src/Installers/Windows/SharedFrameworkBundle/SharedFrameworkBundle.wixproj
+++ b/src/Installers/Windows/SharedFrameworkBundle/SharedFrameworkBundle.wixproj
@@ -46,13 +46,17 @@
     </When>
     <Otherwise>
       <ItemGroup>
-        <ProjectReference Include="..\SharedFrameworkLib\SharedFrameworkLib.wixproj" SetPlatform="Platform=x86">
+        <ProjectReference Include="..\SharedFrameworkLib\SharedFrameworkLib.wixproj"
+                          SetPlatform="Platform=x86"
+                          Condition="'$(DotNetBuild)' != 'true' or '$(Platform)' == 'Win32'">
           <Name>SharedFrameworkLib</Name>
           <Project>{5244BC49-2568-4701-80A6-EAB8950AB5FA}</Project>
           <Private>True</Private>
           <DoNotHarvest>True</DoNotHarvest>
         </ProjectReference>
-        <ProjectReference Include="..\SharedFrameworkLib\SharedFrameworkLib.wixproj" SetPlatform="Platform=x64">
+        <ProjectReference Include="..\SharedFrameworkLib\SharedFrameworkLib.wixproj"
+                          SetPlatform="Platform=x64"
+                          Condition="'$(DotNetBuild)' != 'true' or '$(Platform)' == 'x64'">
           <Name>SharedFrameworkLib</Name>
           <Project>{5244BC49-2568-4701-80A6-EAB8950AB5FA}</Project>
           <Private>True</Private>
diff --git a/src/Installers/Windows/WindowsHostingBundle/Product.targets b/src/Installers/Windows/WindowsHostingBundle/Product.targets
index 192e36b958..09e340755a 100644
--- a/src/Installers/Windows/WindowsHostingBundle/Product.targets
+++ b/src/Installers/Windows/WindowsHostingBundle/Product.targets
@@ -40,7 +40,7 @@
     Runs before FetchDependencies but can't be depended up because this sets up the item group that target
     uses for batching.
   -->
-  <Target Name="CollectDependencies" BeforeTargets="Restore;CollectPackageReferences">
+  <Target Name="CollectDependencies">
     <!-- Use the BrowserDebugHost as a sentinel for the nonshipping version for NETCoreApp. -->
     <ItemGroup>
       <RemoteAsset Include="$(MicrosoftInternalRuntimeAspNetCoreTransportVersion)/dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-x64.msi">
@@ -75,8 +75,7 @@
     <MakeDir Directories="$(DepsPath)" />
   </Target>
 
-  <Target Name="FetchDependencies" BeforeTargets="Restore;CollectPackageReferences"
-      Outputs="$(DepsPath)%(RemoteAsset.TargetFilename)">
+  <Target Name="FetchDependencies" Outputs="$(DepsPath)%(RemoteAsset.TargetFilename)">
     <PropertyGroup>
       <_CurrentRemoteAsset>%(RemoteAsset.Identity)</_CurrentRemoteAsset>
     </PropertyGroup>
diff --git a/src/Installers/Windows/WindowsHostingBundle/WindowsHostingBundle.wixproj b/src/Installers/Windows/WindowsHostingBundle/WindowsHostingBundle.wixproj
index 50f3607c55..09e7f92a76 100644
--- a/src/Installers/Windows/WindowsHostingBundle/WindowsHostingBundle.wixproj
+++ b/src/Installers/Windows/WindowsHostingBundle/WindowsHostingBundle.wixproj
@@ -133,7 +133,7 @@
     <DefineConstants>$(DefineConstants);BundleRegName=$(BundleRegName)</DefineConstants>
   </PropertyGroup>
 
-  <Target Name="ExtractPropertiesFromSharedFxMsi" DependsOnTargets="FetchDependencies" AfterTargets="ResolveProjectReferences">
+  <Target Name="ExtractPropertiesFromSharedFxMsi" DependsOnTargets="CollectDependencies;FetchDependencies" AfterTargets="ResolveProjectReferences">
     <!-- Create properties that holds the executable name. These are passed to the bundles so we can reference them as variables
              from inside the ExePackage authoring. -->
     <CreateProperty Value="%(SharedFxInstallers.Filename)%(Extension)">
