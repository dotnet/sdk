<Project Sdk="Microsoft.Build.NoTargets">

  <PropertyGroup>
    <LogVerbosityOptOut>true</LogVerbosityOptOut>

    <!-- Tests are only building on Windows - https://github.com/dotnet/source-build/issues/4882 -->
    <DotNetBuildTestsOptOut Condition="'$(OS)' != 'Windows_NT'">true</DotNetBuildTestsOptOut>

    <BuildArgs>$(BuildArgs) /p:PortableRid=$(PortableRid)</BuildArgs>
    <BuildArgs>$(BuildArgs) $(FlagParameterPrefix)v $(LogVerbosity)</BuildArgs>

    <!--
      Setting NETCoreAppMaximumVersion to a high version so that the sdk doesn't complain if we're restoring/publishing for a higher version than the sdk.
      See https://github.com/dotnet/sdk/issues/1512#issuecomment-377082883
    -->
    <BuildArgs>$(BuildArgs) /p:NETCoreAppMaximumVersion=99.9</BuildArgs>

    <!-- We need to extract the non-portable OS name from the non-portable RID and pass that to installer build script.
         This should not happen except when building non-portable. installer generally extracts the OSName from the host OS,
         or from the Rid if supplied. -->
    <BuildArgs Condition="$(PortableBuild) != 'true'">$(BuildArgs) /p:OSName=$(TargetRid.Substring(0, $(TargetRid.IndexOf("-"))))</BuildArgs>
    <BuildArgs>$(BuildArgs) /p:PortableOSName=$(__PortableTargetOS)</BuildArgs>

    <!-- sdk always wants to build portable on FreeBSD etc. -->
    <BuildArgs Condition="('$(TargetOS)' == 'freebsd' or '$(TargetOS)' == 'solaris') and '$(DotNetBuildSourceOnly)' == 'true'">$(BuildArgs) /p:PortableBuild=true</BuildArgs>
    <BuildArgs Condition="'$(TargetOS)' != 'windows'">$(BuildArgs) /p:NetRuntimeRid=$(TargetRid)</BuildArgs>

    <BuildArgs Condition="'$(TargetRid)' == 'linux-x64' or '$(TargetRid)' == 'linux-arm64' ">$(BuildArgs) /p:BuildSdkDeb=true /p:BuildSdkRpm=true</BuildArgs>

    <BuildArgs>$(BuildArgs) /p:PublicBaseURL=file:%2F%2F$(ArtifactsAssetsDir)</BuildArgs>
    <BuildArgs>$(BuildArgs) /p:UsePortableLinuxSharedFramework=false</BuildArgs>

    <BuildArgs Condition="'$(PgoInstrument)' == 'true'">$(BuildArgs) /p:PgoInstrument=true</BuildArgs>
    <BuildArgs Condition="'$(EnablePoison)' == 'true'">$(BuildArgs) /p:DISABLE_CROSSGEN=true</BuildArgs>
  </PropertyGroup>

  <ItemGroup>
    <RepositoryReference Include="arcade" />
    <RepositoryReference Include="aspire" />
    <RepositoryReference Include="aspnetcore" />
    <RepositoryReference Include="command-line-api" />
    <RepositoryReference Include="deployment-tools" />
    <RepositoryReference Include="emsdk" />
    <RepositoryReference Include="fsharp" />
    <RepositoryReference Include="msbuild" />
    <!-- nuget-client is not compliant with Unified Build: https://github.com/dotnet/source-build/issues/4974 -->
    <RepositoryReference Include="nuget-client" Condition="'$(DotNetBuildSourceOnly)' == 'true'" />
    <RepositoryReference Include="razor" />
    <RepositoryReference Include="roslyn-analyzers" />
    <RepositoryReference Include="roslyn" />
    <RepositoryReference Include="runtime" />
    <RepositoryReference Include="sourcelink" />
    <RepositoryReference Include="symreader" />
    <RepositoryReference Include="templating" />
    <RepositoryReference Include="vstest" />
    <RepositoryReference Include="windowsdesktop" Condition="'$(TargetOS)' == 'windows' and '$(DotNetBuildSourceOnly)' != 'true'" />
    <RepositoryReference Include="xdt" />
  </ItemGroup>

  <ItemGroup Condition="'$(DotNetBuildSourceOnly)' == 'true'">
    <RepositoryReference Include="source-build-externals" />
    <RepositoryReference Include="source-build-reference-packages" />
  </ItemGroup>

  <!--
    If we have authentication, keep the templating internal feed (if one exists) to acquire the
    text-only prebuilt. The source-build repo as a whole should depend on the same internal feed as
    this repo does, so authentication should already be set up in the global endpoints json.
  -->
  <ItemGroup Condition="'$(VSS_NUGET_EXTERNAL_FEED_ENDPOINTS)' != ''">
    <KeepFeedPrefixes Include="darc-int-dotnet-aspnetcore-" />
  </ItemGroup>

  <ItemGroup>
    <!-- https://github.com/dotnet/source-build/issues/4115. -->
    <EnvironmentVariables Include="PublishWindowsPdb=false" />
  </ItemGroup>

  <ItemGroup>
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftWindowsDesktopAppRuntimewinx64PackageVersion" Version="%24(MicrosoftWindowsDesktopAppRefPackageVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftNETCoreAppHostwinx64PackageVersion" Version="%24(MicrosoftNETCoreAppRefPackageVersion)" />

    <!-- we don't produce the Windows version of this package but that's the one sdk keys off of for the ASP.NET version -->
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftAspNetCoreAppRuntimewinx64PackageVersion" Version="%24(MicrosoftAspNetCoreAppRefPackageVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="VSRedistCommonAspNetCoreSharedFrameworkx64100PackageVersion" Version="%24(MicrosoftAspNetCoreAppRefPackageVersion)" />

    <!-- Used by installer partition to determine the non-shipping runtime version -->
    <ExtraPackageVersionPropsPackageInfo Include="VSRedistCommonNetCoreTargetingPackx64100PackageVersion" Version="%24(MicrosoftNETCoreAppRefPackageVersion)" />
  </ItemGroup>

</Project>
