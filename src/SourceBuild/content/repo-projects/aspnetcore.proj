<Project Sdk="Microsoft.Build.NoTargets">

  <PropertyGroup>
    <!-- AspNetCore doesn't have a root build script but one under the eng folder. -->
    <BuildScript>$(ProjectDirectory)eng\build$(ShellExtension)</BuildScript>

    <BuildActions Condition="'$(DotNetBuildSourceOnly)' != 'true'">$(FlagParameterPrefix)restore $(FlagParameterPrefix)all $(FlagParameterPrefix)pack $(FlagParameterPrefix)publish</BuildActions>
    <BuildActions Condition="'$(Sign)' == 'true'">$(BuildActions) $(FlagParameterPrefix)sign</BuildActions>
    <!-- On windows, native tooling (JDK) is pre-installed on the machine. -->
    <BuildActions Condition="'$(BuildOS)' == 'windows'">$(BuildActions) -NativeToolsOnMachine</BuildActions>
    <!-- On non-windows, we don't have the JDK available and don't need to build those projects anyway because they are not consumed downstream. -->
    <BuildActions Condition="'$(BuildOS)' != 'windows'">$(BuildActions) $(FlagParameterPrefix)no-build-java</BuildActions>
    <!-- Enable building installers on Windows and Linux. ASP.NET Core doesn't produce installers on Mac -->
    <BuildActions Condition="'$(BuildOS)' == 'windows'">$(BuildActions) $(FlagParameterPrefix)BuildInstallers</BuildActions>
    <BuildActions Condition="'$(BuildOS)' == 'linux'">$(BuildActions) $(FlagParameterPrefix)build-installers</BuildActions>
    <!-- In a source-only build, we don't pass -all, so we need to explicitly opt-in to managed components here. -->
    <BuildActions Condition="'$(DotNetBuildSourceOnly)' == 'true' and '$(BuildOS)' == 'linux'">$(BuildActions) $(FlagParameterPrefix)build-managed</BuildActions>

    <!-- aspnetcore must be built with desktop msbuild but defaults to dotnet build. -->
    <BuildArgs Condition="'$(BuildOS)' == 'windows'">$(BuildArgs) -msbuildEngine vs</BuildArgs>
    <ForceDotNetMSBuildEngine>false</ForceDotNetMSBuildEngine>

    <BuildArgs>$(BuildArgs) $(FlagParameterPrefix)arch $(TargetArchitecture)</BuildArgs>
    <BuildArgs>$(BuildArgs) /p:TargetRuntimeIdentifier=$(TargetRid)</BuildArgs>
    <BuildArgs>$(BuildArgs) /p:PublicBaseURL=file:%2F%2F$(ArtifactsAssetsDir)</BuildArgs>
    <BuildArgs Condition="'$(PgoInstrument)' == 'true'">$(BuildArgs) /p:PgoInstrument=true</BuildArgs>

    <!-- PackageValidation fails with desktop msbuild: https://github.com/dotnet/sdk/issues/45004. -->
    <BuildArgs>$(BuildArgs) /p:EnablePackageValidation=false</BuildArgs>

    <LogVerbosityOptOut>true</LogVerbosityOptOut>
  </PropertyGroup>

  <PropertyGroup Condition="'$(DotNetBuildSourceOnly)' == 'true'">
    <BuildArgs>$(BuildArgs) $(FlagParameterPrefix)no-build-repo-tasks</BuildArgs>
    <!-- A source-build build can have a separate RID from the SDK that we're building against. This will cause the SDK to not be able to find a crossgen tool pack and fail to R2R: https://github.com/dotnet/source-build/issues/3793 -->
    <BuildArgs>$(BuildArgs) /p:CrossgenOutput=false</BuildArgs>
  </PropertyGroup>

  <ItemGroup>
    <RepositoryReference Include="arcade" />
    <RepositoryReference Include="runtime" />
    <RepositoryReference Include="xdt" />
  </ItemGroup>

  <ItemGroup Condition="'$(DotNetBuildSourceOnly)' == 'true'">
    <RepositoryReference Include="nuget-client" />
    <RepositoryReference Include="roslyn" />
    <RepositoryReference Include="source-build-externals" />
    <RepositoryReference Include="source-build-reference-packages" />
    <RepositoryReference Include="symreader" />
  </ItemGroup>

  <ItemGroup Condition="'$(DotNetBuildSourceOnly)' != 'true'">
    <RepositoryReference Include="efcore" />
  </ItemGroup>

  <ItemGroup>
    <EnvironmentVariables Include="warn_as_error=false" />
  </ItemGroup>

  <ItemGroup Condition="'$(DotNetBuildSourceOnly)' == 'true'">
    <!--
      From aspnetcore Versions.props:
          Versions of Microsoft.CodeAnalysis packages referenced by analyzers shipped in the SDK.
          This need to be pinned since they're used in 3.1 apps and need to be loadable in VS 2019.
      In source-build these don't need to be pinned and can use the source-built versions since it doesn't
      need to support VS 2019.
    -->
    <ExtraPackageVersionPropsPackageInfo Include="Analyzer_MicrosoftCodeAnalysisCSharpVersion" Version="%24(MicrosoftCodeAnalysisCSharpVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="Analyzer_MicrosoftCodeAnalysisCSharpWorkspacesVersion" Version="%24(MicrosoftCodeAnalysisCSharpWorkspacesVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftCodeAnalysisVersion_LatestVS" Version="%24(MicrosoftCodeAnalysisCommonVersion)" />
  </ItemGroup>

</Project>
