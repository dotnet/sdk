<Project>

  <!-- After building, generate a prebuilt usage report. -->
  <Target Name="ReportPrebuiltUsage"
          AfterTargets="Build"
          Condition="'$(SkipReportPrebuiltUsage)' != 'true'">
    <MSBuild Projects="$(RepoProjectsDir)$(RootRepo).proj" Targets="WritePrebuiltUsageData;ReportPrebuiltUsage" />
  </Target>

  <!--
    Determine symbols tarball names and discover all intermediate symbols,
    to be used as inputs and outputs of symbols repackaging targets.
  -->
  <Target Name="DetermineSymbolsTargetsInputsAndOutputs"
          AfterTargets="Build"
          DependsOnTargets="DetermineSourceBuiltSdkVersion">
    <PropertyGroup>
      <UnifiedSymbolsTarball>$(ArtifactsAssetsDir)dotnet-symbols-all-$(SourceBuiltSdkVersion)-$(TargetRid)$(ArchiveExtension)</UnifiedSymbolsTarball>
      <SdkSymbolsTarball>$(ArtifactsAssetsDir)dotnet-symbols-sdk-$(SourceBuiltSdkVersion)-$(TargetRid)$(ArchiveExtension)</SdkSymbolsTarball>
    </PropertyGroup>
    <ItemGroup>
      <IntermediateSymbol Include="$(IntermediateSymbolsRootDir)**/*" />
    </ItemGroup>
  </Target>
 
  <!-- After building, repackage symbols into a single tarball. -->
  <Target Name="RepackageSymbols"
          AfterTargets="Build"
          DependsOnTargets="DetermineSymbolsTargetsInputsAndOutputs"
          Inputs="@(IntermediateSymbol)"
          Outputs="$(UnifiedSymbolsTarball)">

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('$(UnifiedSymbolsTarball)'))" />
    <Exec Command="tar --numeric-owner -czf $(UnifiedSymbolsTarball) *"
          WorkingDirectory="$(IntermediateSymbolsRootDir)" />

    <Message Importance="High" Text="Packaged all symbols in '$(UnifiedSymbolsTarball)'" />
  </Target>

  <!-- After building, create the sdk symbols tarball. -->
  <UsingTask TaskName="Microsoft.DotNet.UnifiedBuild.Tasks.CreateSdkSymbolsLayout" AssemblyFile="$(MicrosoftDotNetUnifiedBuildTasksAssembly)" TaskFactory="TaskHostFactory" />
  <Target Name="CreateSdkSymbolsTarball"
          AfterTargets="Build"
          DependsOnTargets="RepackageSymbols"
          Inputs="@(IntermediateSymbol);$(SdkTarballPath)"
          Outputs="$(SdkSymbolsTarball)">
    <PropertyGroup>
      <IntermediateSdkSymbolsLayout>$(BaseIntermediateOutputPath)SdkSymbols</IntermediateSdkSymbolsLayout>
      <IntermediateSdkLayout>$(BaseIntermediateOutputPath)Sdk</IntermediateSdkLayout>
    </PropertyGroup>

    <MakeDir Directories="$(IntermediateSdkLayout)" />
    <Exec Command="tar -xzf $(SdkTarballPath) -C $(IntermediateSdkLayout)" />

    <CreateSdkSymbolsLayout SdkLayoutPath="$(IntermediateSdkLayout)"
                            AllSymbolsPath="$(IntermediateSymbolsRootDir)"
                            SdkSymbolsLayoutPath="$(IntermediateSdkSymbolsLayout)"
                            FailOnMissingPDBs="false" />

    <Exec Command="tar --numeric-owner -czf $(SdkSymbolsTarball) *"
          WorkingDirectory="$(IntermediateSdkSymbolsLayout)" />

    <Message Importance="High" Text="Packaged sdk symbols in '$(SdkSymbolsTarball)'" />

    <RemoveDir Directories="$(IntermediateSdkSymbolsLayout)" />
    <RemoveDir Directories="$(IntermediateSdkLayout)" />
  </Target>

  <!--
    Dev scenario: rewrite a prebuilt-report. This makes it easy to add data to an existing
    prebuilt report without performing another full build. This doesn't reevalutate which packages
    are prebuilts or search the projects: it uses the existing usage.xml file to generate report
    XMLs based on the info put in artifacts/.
  -->
  <Target Name="RewritePrebuiltUsageReport">
    <MSBuild Projects="$(RepoProjectsDir)$(RootRepo).proj"
             Targets="ReportPrebuiltUsage" />
  </Target>

  <UsingTask TaskName="Microsoft.DotNet.SourceBuild.Tasks.LeakDetection.CheckForPoison" AssemblyFile="$(MicrosoftDotNetSourceBuildTasksLeakDetectionAssembly)" TaskFactory="TaskHostFactory" Condition="'$(EnablePoison)' == 'true'" />
  <Target Name="ReportPoisonUsage"
          AfterTargets="Build"
          Condition="'$(EnablePoison)' == 'true'"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(BaseIntermediateOutputPath)ReportPoisonUsage.complete" >
    <ItemGroup>
      <!-- Exclude the Private.SourceBuilt.Artifacts archive from poison usage scan. -->
      <PoisonFileToCheck Include="$(ArtifactsAssetsDir)*$(ArchiveExtension)" />
      <PoisonFileToCheck Remove="$(ArtifactsAssetsDir)$(SourceBuiltArtifactsTarballName)*" />
      <!-- Include shipping nuget packages. -->
      <PoisonFileToCheck Include="$(ArtifactsShippingPackagesDir)*.nupkg" />
      <!-- Add and mark SBRP packages to validate that they have the correct poison attribute. -->
      <PoisonFileToCheck Include="$(ReferencePackagesDir)**\*.nupkg" IsSourceBuildReferencePackage="true" />
    </ItemGroup>

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Checking @(PoisonFileToCheck) for poisoned files." />

    <CheckForPoison FilesToCheck="@(PoisonFileToCheck)"
                    ProjectDirPath="$(RepoRoot)"
                    HashCatalogFilePath="$(PoisonReportDataFile)"
                    MarkerFileName="$(PoisonMarkerFile)"
                    PoisonReportOutputFilePath="$(PoisonUsageReportFile)" />

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Done checking for poison." />

    <MakeDir Directories="$(BaseIntermediateOutputPath)" />
    <Touch Files="$(BaseIntermediateOutputPath)ReportPoisonUsage.complete" AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
  </Target>

  <UsingTask TaskName="Microsoft.DotNet.UnifiedBuild.Tasks.UsageReport.WriteUsageBurndownData" AssemblyFile="$(MicrosoftDotNetUnifiedBuildTasksAssembly)" TaskFactory="TaskHostFactory" />
  <Target Name="GeneratePrebuiltBurndownData"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(BaseIntermediateOutputPath)GeneratePrebuiltBurndownData.complete" >
    <PropertyGroup>
      <PrebuiltBurndownDataFile>$(PackageReportDir)PrebuiltBurndownData.csv</PrebuiltBurndownDataFile>
    </PropertyGroup>

    <WriteUsageBurndownData RootDirectory="$(RepoRoot)"
                            PrebuiltBaselineFile="$(BaselineDataFile)"
                            OutputFilePath="$(PrebuiltBurndownDataFile)" />

    <MakeDir Directories="$(BaseIntermediateOutputPath)" />
    <Touch Files="$(BaseIntermediateOutputPath)GeneratePrebuiltBurndownData.complete" AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
  </Target>

  <Target Name="CreatePrebuiltsTarball"
          AfterTargets="Build"
          DependsOnTargets="
            CheckIfPrebuiltsExistToPack;
            CreatePrebuiltsTarballIfPrebuiltsExist;
            ErrorOnPrebuilts"/>

  <Target Name="CheckIfPrebuiltsExistToPack">
    <!-- Directory existence doesn't mean there are files inside. Use a pattern to find files. -->
    <ItemGroup>
      <PrebuiltFile Include="$(ResultingPrebuiltPackagesDir)**" />
    </ItemGroup>

    <Message Text="Found @(PrebuiltFile->Count()) files in prebuilt packages dir." Importance="High" />
  </Target>

  <Target Name="CreatePrebuiltsTarballIfPrebuiltsExist"
          DependsOnTargets="DetermineSourceBuiltSdkVersion"
          Condition="'@(PrebuiltFile->Count())' != '0'">
    <PropertyGroup>
      <PrebuiltsTarball>$(ArtifactsAssetsDir)$(SourceBuiltPrebuiltsTarballName).$(SourceBuiltSdkVersion).$(TargetRid)$(ArchiveExtension)</PrebuiltsTarball>
      <PrebuiltsTarballWorkingDir>$(ResultingPrebuiltPackagesDir)</PrebuiltsTarballWorkingDir>
    </PropertyGroup>

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('$(PrebuiltsTarball)'))" />
    <Exec Command="tar --numeric-owner -zcf $(PrebuiltsTarball) -C $(PrebuiltsTarballWorkingDir) ." />

    <Message Text="Tarball '$(PrebuiltsTarball)' was successfully created from '$(PrebuiltsTarballWorkingDir)'" Importance="High" />
  </Target>

  <Target Name="ErrorOnPrebuilts"
          Condition="'@(PrebuiltFile->Count())' != '0' AND '$(SkipErrorOnPrebuilts)' != 'true'">
    <Error Text="@(PrebuiltFile->Count()) Prebuilts Exist" />
  </Target>

</Project>
