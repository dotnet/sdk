# This yml is used by these pipelines and triggers:
# NOTE: the triggers are defined in the Azure DevOps UI as they are too complex
#
# - dotnet-source-build (public)
#   https://dev.azure.com/dnceng-public/public/_build?definitionId=240
#   - PR: ultralite build
#   - CI: release/*, every batched commit, full build
#   - Schedule: main only, full build
#
# - dotnet-unified-build (public)
#   https://dev.azure.com/dnceng-public/public/_build?definitionId=278
#   - PR: lite build
#   - CI: release/* only, every batched commit, full build
#   - Schedule: main only, full build
#
# - dotnet-source-build (internal)
#   https://dev.azure.com/dnceng/internal/_build?definitionId=1219
#   - PR: ultralite build
#   - CI: release/* and internal/release/* only, every batched commit, full build
#   - Schedule: main only, full build
#
# - dotnet-source-build-lite (internal)
#   https://dev.azure.com/dnceng/internal/_build?definitionId=1299
#   - PR: release/* and main only, lite build, on-demand trigger
#   - CI: main only, every batched commit, lite build
#
# - dotnet-unified-build (internal)
#   https://dev.azure.com/dnceng/internal/_build?definitionId=1330
#   - PR: lite build
#   - CI: release/*, internal/release/* and main only, every batched commit, full build

variables:
# enable source-only build for pipelines that contain the -source-build string
- name: isSourceOnlyBuild
  value: ${{ contains(variables['Build.DefinitionName'], '-source-build') }}

- name: isSourceOnlyBuildLite
  value: ${{ contains(variables['Build.DefinitionName'], '-source-build-lite') }}

- name: isScheduleTrigger
  value: ${{ eq(variables['Build.Reason'], 'Schedule') }}

- name: isPRTrigger
  value: ${{ eq(variables['Build.Reason'], 'PullRequest') }}

- template: /eng/common/templates-official/variables/pool-providers.yml@self

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    featureFlags:
     EnableDefenderForLinux: true
    sdl:
      sourceAnalysisPool:
        name: $(DncEngInternalBuildPool)
        image: 1es-windows-2022
        os: windows

      # Spotbugs is failing the Windows builds: https://github.com/dotnet/dnceng/issues/2740
      spotBugs:
        enabled: false

      codeql:
        compiled:
          enabled: true
        # Runs analysis in the SDL stage and not every job
        # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/sdlanalysis/codeql#improving-codeql-performance
        runSourceLanguagesInSourceAnalysis: true

      baseline:
        baselineFile: $(Build.SourcesDirectory)\.config\guardian\.gdnbaselines

    containers:
      almaLinuxContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:almalinux-8-source-build
        options: --privileged
      alpineLatestContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.21-amd64
        options: --privileged
      alpinePreviousContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.20-withnode
        options: --privileged
      centOSStreamContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-stream9
        options: --privileged
      fedoraContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-41
        options: --privileged
      ubuntuContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04
        options: --privileged
      ubuntuArmContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04-arm64
        options: --privileged
      azurelinuxX64CrossContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net9.0-cross-amd64
        options: --privileged
      azurelinuxArmCrossContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net9.0-cross-arm
        options: --privileged
      azurelinuxArm64CrossContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net9.0-cross-arm64
        options: --privileged
      azurelinuxX64AlpineCrossContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net9.0-cross-amd64-alpine
        options: --privileged
      azurelinuxArmAlpineCrossContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net9.0-cross-arm-alpine
        options: --privileged
      azurelinuxArm64AlpineCrossContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net9.0-cross-arm64-alpine
        options: --privileged
      androidCrossContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net9.0-cross-android-amd64
        options: --privileged
      linuxBionicCrossContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net9.0-android-openssl
        options: --privileged
      browserCrossContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net9.0-webassembly-amd64
        options: --privileged
      wasiCrossContainer:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:azurelinux-3.0-net9.0-webassembly-amd64
        options: --privileged

    stages:
    - ${{ if and(ne(variables.isPRTrigger, 'true'), eq(variables['System.TeamProject'], 'internal')) }}:
      - template: /eng/pipelines/templates/stages/vmr-scan.yml@self

    - template: /src/sdk/eng/pipelines/templates/stages/vmr-build.yml@self
      parameters:
        isBuiltFromVmr: true
        isSourceOnlyBuild: ${{ variables.isSourceOnlyBuild }}
        ${{ if eq(variables.isScheduleTrigger, 'true') }}:
          scope: full
        ${{ elseif eq(variables.isSourceOnlyBuildLite, 'true') }}:
          scope: lite
        ${{ elseif and(eq(variables.isPRTrigger, 'true'), eq(variables.isSourceOnlyBuild, 'true')) }}:
          scope: ultralite
        ${{ elseif and(eq(variables.isPRTrigger, 'true'), ne(variables.isSourceOnlyBuild, 'true')) }}:
          scope: lite
        ${{ else }}:
          scope: full
