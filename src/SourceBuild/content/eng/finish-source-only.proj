
<Project Sdk="Microsoft.Build.NoTargets">

  <PropertyGroup>
    <!-- Need to set to false to calculate RepositoryCommit. -->
    <EnableSourceControlManagerQueries>false</EnableSourceControlManagerQueries>
    <TargetFramework>$(NetCurrent)</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="$(TasksDir)Microsoft.DotNet.UnifiedBuild.Tasks\Microsoft.DotNet.UnifiedBuild.Tasks.csproj" />
    <ProjectReference Include="$(TasksDir)Microsoft.DotNet.SourceBuild.Tasks.LeakDetection\Microsoft.DotNet.SourceBuild.Tasks.LeakDetection.csproj" />
    <ProjectReference Include="$(RepositoryEngineeringDir)extract-sdk-archive.proj" />
  </ItemGroup>

  <!-- After building, generate a prebuilt usage report. -->
  <Target Name="ReportPrebuiltUsage"
          BeforeTargets="Build"
          Condition="'$(SkipReportPrebuiltUsage)' != 'true'">
    <MSBuild Projects="$(RepoProjectsDir)$(RootRepo).proj" Targets="WritePrebuiltUsageData;ReportPrebuiltUsage" />
  </Target>

  <UsingTask TaskName="Microsoft.DotNet.UnifiedBuild.Tasks.WriteSBRPUsageReport" AssemblyFile="$(MicrosoftDotNetUnifiedBuildTasksAssembly)" TaskFactory="TaskHostFactory" />
  <Target Name="ReportSbrpUsage"
          BeforeTargets="Build"
          Condition="'$(ReportSbrpUsage)' == 'true'">
    <ItemGroup>
      <ProjectAssetsJsonFile Include="$(ArtifactsDir)**/project.assets.json" />
      <ProjectAssetsJsonFile Include="$(SrcDir)**/artifacts/**/project.assets.json" />
    </ItemGroup>

    <WriteSbrpUsageReport SbrpRepoSrcPath="$(SbrpRepoSrcDir)"
                          ProjectAssetsJsons="@(ProjectAssetsJsonFile)"
                          OutputPath="$(ArtifactsLogDir)" />
  </Target>


  <Target Name="DetermineSourceBuiltSdkNonStableVersion"
          DependsOnTargets="DetermineSourceBuiltSdkVersion">
    <ItemGroup>
      <SdkVersionFileItem Include="$(DotNetSdkExtractDir)/sdk/**/.version" />
    </ItemGroup>

    <PropertyGroup>
      <SourceBuiltSdkNonStableVersion>$([System.Text.RegularExpressions.Regex]::Split('$([System.IO.File]::ReadAllText('%(SdkVersionFileItem.Identity)'))', '\r\n|\r|\n')[3])</SourceBuiltSdkNonStableVersion>
    </PropertyGroup>
  </Target>

  <!-- Write out the .version file to be bundled into the source-build tarball -->
  <Target Name="WriteSourceBuiltSdkVersionFile"
          AfterTargets="Build"
          DependsOnTargets="DetermineSourceBuiltSdkNonStableVersion">
    <!-- Content of the .version file to include in the tarball -->
    <ItemGroup>
      <VersionFileContent Include="$(RepositoryCommit);$(SourceBuiltSdkNonStableVersion)" />
    </ItemGroup>

    <WriteLinesToFile File="$(ArtifactsAssetsDir).version"
                      Lines="@(VersionFileContent)" />
  </Target>

  <!--
    Determine symbols tarball names and discover all intermediate symbols,
    to be used as inputs and outputs of symbols repackaging targets.
  -->
  <Target Name="DetermineSymbolsTargetsInputsAndOutputs"
          AfterTargets="Build"
          DependsOnTargets="DetermineSourceBuiltSdkNonStableVersion">
    <PropertyGroup>
      <UnifiedSymbolsTarball>$(ArtifactsAssetsDir)dotnet-symbols-all-$(SourceBuiltSdkNonStableVersion)-$(TargetRid)$(ArchiveExtension)</UnifiedSymbolsTarball>
      <SdkSymbolsTarball>$(ArtifactsAssetsDir)dotnet-symbols-sdk-$(SourceBuiltSdkNonStableVersion)-$(TargetRid)$(ArchiveExtension)</SdkSymbolsTarball>
    </PropertyGroup>
    <ItemGroup>
      <IntermediateSymbol Include="$(IntermediateSymbolsRootDir)**/*" />
    </ItemGroup>
  </Target>

  <!-- After building, repackage symbols into a single tarball. -->
  <Target Name="RepackageSymbols"
          BeforeTargets="Build"
          DependsOnTargets="DetermineSymbolsTargetsInputsAndOutputs"
          Inputs="@(IntermediateSymbol)"
          Outputs="$(UnifiedSymbolsTarball)">

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('$(UnifiedSymbolsTarball)'))" />
    <Exec Command="tar --numeric-owner -czf $(UnifiedSymbolsTarball) *"
          WorkingDirectory="$(IntermediateSymbolsRootDir)" />

    <Message Importance="High" Text="Packaged all symbols in '$(UnifiedSymbolsTarball)'" />
  </Target>

  <!-- After building, create the sdk symbols tarball. -->
  <UsingTask TaskName="Microsoft.DotNet.UnifiedBuild.Tasks.CreateSdkSymbolsLayout" AssemblyFile="$(MicrosoftDotNetUnifiedBuildTasksAssembly)" TaskFactory="TaskHostFactory" />
  <Target Name="CreateSdkSymbolsTarball"
          BeforeTargets="Build"
          DependsOnTargets="RepackageSymbols"
          Inputs="@(IntermediateSymbol);$(SdkTarballPath)"
          Outputs="$(SdkSymbolsTarball)">
    <PropertyGroup>
      <IntermediateSdkSymbolsLayout>$(BaseIntermediateOutputPath)SdkSymbols</IntermediateSdkSymbolsLayout>
    </PropertyGroup>

    <CreateSdkSymbolsLayout SdkLayoutPath="$(DotNetSdkExtractDir)"
                            AllSymbolsPath="$(IntermediateSymbolsRootDir)"
                            SdkSymbolsLayoutPath="$(IntermediateSdkSymbolsLayout)"
                            FailOnMissingPDBs="false" />

    <Exec Command="tar --numeric-owner -czf $(SdkSymbolsTarball) *"
          WorkingDirectory="$(IntermediateSdkSymbolsLayout)" />

    <Message Importance="High" Text="Packaged sdk symbols in '$(SdkSymbolsTarball)'" />

    <RemoveDir Directories="$(IntermediateSdkSymbolsLayout)" />
  </Target>

  <!--
    Dev scenario: rewrite a prebuilt-report. This makes it easy to add data to an existing
    prebuilt report without performing another full build. This doesn't reevalutate which packages
    are prebuilts or search the projects: it uses the existing usage.xml file to generate report
    XMLs based on the info put in artifacts/.
  -->
  <Target Name="RewritePrebuiltUsageReport">
    <MSBuild Projects="$(RepoProjectsDir)$(RootRepo).proj"
             Targets="ReportPrebuiltUsage" />
  </Target>

  <UsingTask TaskName="Microsoft.DotNet.UnifiedBuild.Tasks.UsageReport.WriteUsageBurndownData" AssemblyFile="$(MicrosoftDotNetUnifiedBuildTasksAssembly)" TaskFactory="TaskHostFactory" />
  <Target Name="GeneratePrebuiltBurndownData"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(BaseIntermediateOutputPath)GeneratePrebuiltBurndownData.complete" >
    <PropertyGroup>
      <PrebuiltBurndownDataFile>$(PackageReportDir)PrebuiltBurndownData.csv</PrebuiltBurndownDataFile>
    </PropertyGroup>

    <WriteUsageBurndownData RootDirectory="$(RepoRoot)"
                            PrebuiltBaselineFile="$(BaselineDataFile)"
                            OutputFilePath="$(PrebuiltBurndownDataFile)" />

    <MakeDir Directories="$(BaseIntermediateOutputPath)" />
    <Touch Files="$(BaseIntermediateOutputPath)GeneratePrebuiltBurndownData.complete" AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
  </Target>

  <Target Name="CreatePrebuiltsTarball"
          BeforeTargets="Build"
          DependsOnTargets="
            CheckIfPrebuiltsExistToPack;
            CreatePrebuiltsTarballIfPrebuiltsExist"/>

  <Target Name="CheckIfPrebuiltsExistToPack">
    <!-- Directory existence doesn't mean there are files inside. Use a pattern to find files. -->
    <ItemGroup>
      <PrebuiltFile Include="$(ResultingPrebuiltPackagesDir)**" />
    </ItemGroup>

    <Message Text="Found @(PrebuiltFile->Count()) files in prebuilt packages dir." Importance="High" />
  </Target>

  <Target Name="CreatePrebuiltsTarballIfPrebuiltsExist"
          DependsOnTargets="DetermineSourceBuiltSdkNonStableVersion"
          Condition="'@(PrebuiltFile)' != ''">
    <PropertyGroup>
      <PrebuiltsTarball>$(ArtifactsAssetsDir)$(SourceBuiltPrebuiltsTarballName).$(SourceBuiltSdkNonStableVersion).$(TargetRid)$(ArchiveExtension)</PrebuiltsTarball>
      <PrebuiltsTarballWorkingDir>$(ResultingPrebuiltPackagesDir)</PrebuiltsTarballWorkingDir>
    </PropertyGroup>

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('$(PrebuiltsTarball)'))" />
    <Exec Command="tar --numeric-owner -zcf $(PrebuiltsTarball) -C $(PrebuiltsTarballWorkingDir) ." />

    <Message Text="Tarball '$(PrebuiltsTarball)' was successfully created from '$(PrebuiltsTarballWorkingDir)'" Importance="High" />

    <Error Text="@(PrebuiltFile->Count()) Prebuilts Exist" Condition="'$(SkipErrorOnPrebuilts)' != 'true'" />
  </Target>
</Project>
