<Project>
  <!-- Add targets here that run logic that depends on the merged asset manifest and published packages. -->
  <UsingTask TaskName="Microsoft.DotNet.SourceBuild.Tasks.LeakDetection.CheckForPoison" AssemblyFile="$(MicrosoftDotNetSourceBuildTasksLeakDetectionAssembly)" TaskFactory="TaskHostFactory" Condition="'$(EnablePoison)' == 'true'" />
  <Target Name="ReportPoisonUsage"
          AfterTargets="DiscoverArtifacts"
          Condition="'$(EnablePoison)' == 'true'"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(ArtifactsTmpDir)ReportPoisonUsage.complete">
    <ItemGroup>
      <!-- Exclude the Private.SourceBuilt.Artifacts archive from poison usage scan. -->
      <AssetToCheck Include="$(ArtifactsAssetsDir)*$(ArchiveExtension)" />
      <AssetToCheck Remove="$(ArtifactsAssetsDir)$(SourceBuiltArtifactsTarballName)*" />
      <!-- Include shipping nuget packages. -->
      <ShippingPackageToCheck Include="@(PackageToPublish->WithMetadataValue('IsShipping','true'))" />
      <!-- Add and mark SBRP packages to validate that they have the correct poison attribute. -->
      <SbrpPackageToCheck Include="@(ReferencePackage)" IsSourceBuildReferencePackage="true" />
    </ItemGroup>

    <Error Condition="'@(AssetToCheck)' == ''" Text="No assets will be poison checked - this is unexpected!" />
    <Error Condition="'@(ShippingPackageToCheck)' == ''" Text="No shipping packages will be poison checked - this is unexpected!" />
    <Error Condition="'@(SbrpPackageToCheck)' == ''" Text="No SBRP packages will be poison checked - this is unexpected!" />

    <ItemGroup>
      <PoisonFileToCheck Include="@(AssetToCheck)" />
      <PoisonFileToCheck Include="@(ShippingPackageToCheck)" />
      <PoisonFileToCheck Include="@(SbrpPackageToCheck)" />
    </ItemGroup>

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Checking @(PoisonFileToCheck) for poisoned files." />

    <CheckForPoison FilesToCheck="@(PoisonFileToCheck)"
                    ProjectDirPath="$(RepoRoot)"
                    HashCatalogFilePath="$(PoisonReportDataFile)"
                    MarkerFileName="$(PoisonMarkerFile)"
                    PoisonReportOutputFilePath="$(PoisonUsageReportFile)" />

    <Message Importance="High" Text="[$([System.DateTime]::Now.ToString('HH:mm:ss.ff'))] Done checking for poison." />

    <MakeDir Directories="$(BaseIntermediateOutputPath)" />
    <Touch Files="$(BaseIntermediateOutputPath)ReportPoisonUsage.complete" AlwaysCreate="true">
      <Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
    </Touch>
  </Target>

  <Target Name="DetermineSourceBuiltSdkNonStableVersion">
    <ItemGroup>
      <SdkVersionFileItem Include="$(DotNetSdkExtractDir)/sdk/**/.version" />
    </ItemGroup>

    <PropertyGroup>
      <SourceBuiltSdkNonStableVersion>$([System.Text.RegularExpressions.Regex]::Split('$([System.IO.File]::ReadAllText('%(SdkVersionFileItem.Identity)'))', '\r\n|\r|\n')[3])</SourceBuiltSdkNonStableVersion>
    </PropertyGroup>
  </Target>

  <PropertyGroup>
    <SourceBuiltVersionInputName>$(ArtifactsAssetsDir).version</SourceBuiltVersionInputName>
  </PropertyGroup>

  <Target Name="GetOutputsForCreatePrivateSourceBuiltArtifactsArchive"
          DependsOnTargets="DetermineSourceBuiltSdkNonStableVersion">
    <PropertyGroup>
      <!-- Create a layout directory for the files that are to be included in the artifacts tarball. -->
      <SourceBuiltLayoutDir>$([MSBuild]::NormalizeDirectory('$(BaseIntermediateOutputPath)', 'artifacts-layout'))</SourceBuiltLayoutDir>

      <!-- Outputs -->
      <SourceBuiltTarballName>$(SourceBuiltAssetsDir)/$(SourceBuiltArtifactsTarballName).$(SourceBuiltSdkNonStableVersion).$(TargetRid)$(ArchiveExtension)</SourceBuiltTarballName>
      <SourceBuiltVersionName>$(SourceBuiltLayoutDir).version</SourceBuiltVersionName>
      <AllPackageVersionsPropsName>$(SourceBuiltLayoutDir)PackageVersions.props</AllPackageVersionsPropsName>
      <SourceBuiltMergedAssetManifestName>$(SourceBuiltLayoutDir)%(MergedAssetManifest.Filename)%(MergedAssetManifest.Extension)</SourceBuiltMergedAssetManifestName>
    </PropertyGroup>
  </Target>

  <!-- Create the SourceBuilt.Private.Artifacts archive when building source-only. -->
  <UsingTask TaskName="Microsoft.DotNet.UnifiedBuild.Tasks.WritePackageVersionsProps" AssemblyFile="$(MicrosoftDotNetUnifiedBuildTasksAssembly)" TaskFactory="TaskHostFactory" />
  <Target Name="CreatePrivateSourceBuiltArtifactsArchive"
          AfterTargets="Publish"
          DependsOnTargets="DiscoverArtifacts;GetOutputsForCreatePrivateSourceBuiltArtifactsArchive"
          Inputs="@(PackageToPublish);@(ReferencePackage);$(SourceBuiltVersionInputName);$(AssetManifestFilePath)"
          Outputs="$(SourceBuiltTarballName);$(SourceBuiltVersionName);$(AllPackageVersionsPropsName);$(SourceBuiltMergedAssetManifestName)">
    <!-- Copy packages to layout directory. Since there are a large number of files,
          this will use symlinks instead of copying files to make this execute quickly. -->
    <Copy SourceFiles="@(PackageToPublish)"
          DestinationFolder="$(SourceBuiltLayoutDir)"
          UseSymbolicLinksIfPossible="true" />
    <Copy SourceFiles="@(ReferencePackage)"
          DestinationFolder="$(SourceBuiltLayoutDir)$(PreviouslySourceBuiltReferencePackagesDirName)"
          UseSymbolicLinksIfPossible="true" />

    <!-- Copy the version file in to the tarball -->
    <Copy SourceFiles="$(SourceBuiltVersionInputName)"
          DestinationFiles="$(SourceBuiltVersionName)"
          UseSymbolicLinksIfPossible="true" />

    <!-- Copy the merged asset manifest into the tarball -->
    <Copy SourceFiles="$(AssetManifestFilePath)"
          DestinationFolder="$(SourceBuiltLayoutDir)"
          UseSymbolicLinksIfPossible="true" />

    <!-- Create a PackageVersions.props file that includes entries for all packages. -->
    <WritePackageVersionsProps KnownPackages="@(ProducedPackage->Metadata('PackageId'))"
                               ExtraProperties="@(ExtraPackageVersionPropsPackageInfo)"
                               VersionPropsFlowType="AllPackages"
                               OutputPath="$(AllPackageVersionsPropsName)" />

    <Exec Command="tar --numeric-owner -czhf $(SourceBuiltTarballName) $([System.IO.Path]::GetFileName('$(SourceBuiltVersionName)')) *"
          WorkingDirectory="$(SourceBuiltLayoutDir)" />

    <Message Importance="High" Text="Packaged source-built artifacts to $(SourceBuiltTarballName)" />

    <!-- Tests expect this file to be in ArtifactsAssetsDir. -->
    <Copy SourceFiles="$(SourceBuiltTarballName)"
          DestinationFolder="$(ArtifactsAssetsDir)"
          SkipUnchangedFiles="true" />
  </Target>

</Project>
