<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssemblyNameDoesNotExist" xml:space="preserve">
    <value>Assembly with name '{0}' does not exist at {1}.</value>
  </data>
  <data name="AssemblyNameDoesNotMatch" xml:space="preserve">
    <value>{2} assembly name '{0}' does not match with {3} assembly name '{1}'.</value>
  </data>
  <data name="AssemblyPublicKeyTokenDoesNotMatch" xml:space="preserve">
    <value>{2} assembly public key token '{0}' does not match with {3} '{1}'.</value>
  </data>
  <data name="AssemblySearchDirectoryDoesNotExist" xml:space="preserve">
    <value>Provided assembly search directory '{0}' does not exist.</value>
  </data>
  <data name="CannotAddAbstractMember" xml:space="preserve">
    <value>Cannot add abstract member '{0}' to {1} because it does not exist on {2}</value>
  </data>
  <data name="AssembyCultureDoesNotMatch" xml:space="preserve">
    <value>{2} assembly culture '{0}' does not match with {3} assembly culture '{1}'.</value>
  </data>
  <data name="AssembyVersionDoesNotMatch" xml:space="preserve">
    <value>{3} assembly version '{1}' should be equal to {2} version '{0}'.</value>
  </data>
  <data name="AssembyVersionIsNotCompatible" xml:space="preserve">
    <value>{2} assembly version '{0}' should be equal to or higher than {3} version '{1}'.</value>
  </data>
  <data name="CouldNotResolveReference" xml:space="preserve">
    <value>Could not resolve reference '{0}' in any of the provided search directories.</value>
  </data>
  <data name="ElementShouldNotBeNullAtIndex" xml:space="preserve">
    <value>Element should not be null. Found null at index: {0}.</value>
  </data>
  <data name="FileDoesNotExist" xml:space="preserve">
    <value>File '{0}' does not exist.</value>
  </data>
  <data name="IndexShouldBeWithinSetSizeRange" xml:space="preserve">
    <value>The index should be within the right set size range.</value>
  </data>
  <data name="MatchingAssemblyNotFound" xml:space="preserve">
    <value>Could not find matching assembly: '{0}' in any of the search directories.</value>
  </data>
  <data name="MemberExistsOnLeft" xml:space="preserve">
    <value>Member '{0}' exists on {1} but not on {2}</value>
  </data>
  <data name="MemberExistsOnRight" xml:space="preserve">
    <value>Member '{0}' exists on {2} but not on {1}</value>
  </data>
  <data name="ProvidedPathToLoadBinariesFromNotFound" xml:space="preserve">
    <value>Could not find the provided path '{0}' to load binaries from.</value>
  </data>
  <data name="ProvidedStreamDoesNotHaveMetadata" xml:space="preserve">
    <value>Provided stream for assembly '{0}' doesn't have any metadata to read. from.</value>
  </data>
  <data name="RightNamesAtLeastOne" xml:space="preserve">
    <value>Should at least contain one right name.</value>
  </data>
  <data name="ShouldBeGreaterThanZero" xml:space="preserve">
    <value>Value should be greater than 0.</value>
  </data>
  <data name="ShouldNotBeNullAndContainAtLeastOneElement" xml:space="preserve">
    <value>Should not be null and contain at least one element.</value>
  </data>
  <data name="ShouldProvideValidAssemblyName" xml:space="preserve">
    <value>Should provide a valid assembly name.</value>
  </data>
  <data name="StreamPositionGreaterThanLength" xml:space="preserve">
    <value>Stream position is greater than it's length, so there are no contents available to read.</value>
  </data>
  <data name="TypeExistsOnLeft" xml:space="preserve">
    <value>Type '{0}' exists on {1} but not on {2}</value>
  </data>
  <data name="TypeExistsOnRight" xml:space="preserve">
    <value>Type '{0}' exists on {2} but not on {1}</value>
  </data>
  <data name="VisitorRightCountShouldMatchMappersSetSize" xml:space="preserve">
    <value>The provided right count when creating the visitor should match the right set size specified for the mappers.</value>
  </data>
  <data name="CannotAddMemberToInterface" xml:space="preserve">
    <value>Cannot add interface member '{0}' to {1} because it does not exist on {2}</value>
  </data>
</root>