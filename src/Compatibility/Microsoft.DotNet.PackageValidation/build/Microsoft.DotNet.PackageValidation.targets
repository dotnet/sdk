<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Project>
  <UsingTask TaskName="Microsoft.DotNet.PackageValidation.ValidatePackage" AssemblyFile="$(DotNetPackageValidationAssembly)" />
  <UsingTask TaskName="Microsoft.DotNet.PackageValidation.GetLastStablePackage" AssemblyFile="$(DotNetPackageValidationAssembly)" />
  
  <PropertyGroup>
    <!-- On static graph build, the CollectPackageDownloads target is invoked per target and there is no other way to run logic only once for all tfms.
         Hence the GetLastStablePackage feature should not be used when using static graph build as it results in a remote call per tfm. -->
    <AddPackageValidationBaselinePackageAsPackageDownloadBeforeTargets Condition="'$(RestoreUseStaticGraphEvaluation)' == 'true'">CollectPackageDownloads</AddPackageValidationBaselinePackageAsPackageDownloadBeforeTargets>
    <!-- For a non static graph restore with a single tfm, hook onto CollectPackageDownloads which will then be invoked just once. -->
    <AddPackageValidationBaselinePackageAsPackageDownloadBeforeTargets Condition="'$(AddPackageValidationBaselinePackageAsPackageDownloadBeforeTargets)' == '' and '$(TargetFrameworks)' == '' and '$(TargetFramework)' != ''">CollectPackageDownloads</AddPackageValidationBaselinePackageAsPackageDownloadBeforeTargets>
    <!-- For a non static graph restore with multiple tfms, hook onto the target that fans out to the individual tfm restore graph walk operations. -->
    <AddPackageValidationBaselinePackageAsPackageDownloadBeforeTargets Condition="'$(AddPackageValidationBaselinePackageAsPackageDownloadBeforeTargets)' == ''">_GenerateProjectRestoreGraphAllFrameworks</AddPackageValidationBaselinePackageAsPackageDownloadBeforeTargets>
  </PropertyGroup>

  <Target Name="RunPackageValidation"
          AfterTargets="Pack"
          Condition="$(IsPackable) == 'true'">
    <PropertyGroup Condition="'$(EnablePackageBaselineValidation)' == 'true' and
                              '$(PackageValidationBaselinePath)' == ''">
      <PackageValidationBaselineName Condition="'$(PackageValidationBaselineName)' == ''">$(_PackageValidationBaselineName)</PackageValidationBaselineName>
      <PackageValidationBaselineVersion Condition="'$(PackageValidationBaselineVersion)' == ''">$(_PackageValidationBaselineVersion)</PackageValidationBaselineVersion>
      <PackageValidationBaselinePath>$([MSBuild]::NormalizePath('$(NuGetPackageRoot)', '$(PackageValidationBaselineName.ToLower())', '$(PackageValidationBaselineVersion)', '$(PackageValidationBaselineName.ToLower()).$(PackageValidationBaselineVersion).nupkg'))</PackageValidationBaselinePath>
    </PropertyGroup>

    <!-- PackageTargetPath isn't exposed by NuGet: https://github.com/NuGet/Home/issues/6671. -->
    <Microsoft.DotNet.PackageValidation.ValidatePackage
      PackageTargetPath="$([MSBuild]::ValueOrDefault('$(PackageTargetPath)', '$(PackageOutputPath)$(PackageId).$(PackageVersion).nupkg'))"
      RuntimeGraph="$(RuntimeIdentifierGraphPath)"
      NoWarn="$(NoWarn)"
      RunApiCompat="$([MSBuild]::ValueOrDefault('$(RunApiCompat)', 'true'))"
      BaselineValidation="$(EnablePackageBaselineValidation)"
      BaselinePackageTargetPath="$(PackageValidationBaselinePath)" />
  </Target>

  <!-- If package validation against a baseline is enabled and a local path to a baseline package
       isn't specified, try to find the baseline package on the feeds. Achieving this by hooking
       onto the CollectPackageDownloads extension point in cross-targeting builds.
       
       Static graph restore invokes CollectPackageDownloads from an outer build, non static graph restore doesn't.
       To avoid multiple target invocations, hook onto an outer build extension point for non static graph restore.
       
       Using the private _GetRestoreSettings target which makes the restore settings (i.e. the feeds) available for
       consumption. -->
  <Target Name="AddPackageValidationBaselinePackageAsPackageDownload"
          BeforeTargets="$(AddPackageValidationBaselinePackageAsPackageDownloadBeforeTargets)"
          DependsOnTargets="_GetRestoreSettings"
          Condition="'$(EnablePackageBaselineValidation)' == 'true' and
                     '$(PackageValidationBaselinePath)' == ''">
    <PropertyGroup>
      <PackageValidationBaselineName Condition="'$(PackageValidationBaselineName)' == ''">$(PackageId)</PackageValidationBaselineName>
    </PropertyGroup>

    <!-- Relying on the private _OutputSources property to pass in the current feeds. -->
    <Microsoft.DotNet.PackageValidation.GetLastStablePackage
      PackageId="$(PackageValidationBaselineName)"
      PackageVersion="$(PackageVersion)"
      NugetFeeds="$(_OutputSources)"
      Condition="'$(PackageValidationBaselineVersion)' == ''">
      <Output TaskParameter="LastStableVersion" PropertyName="PackageValidationBaselineVersion" />
    </Microsoft.DotNet.PackageValidation.GetLastStablePackage>

    <ItemGroup>
      <PackageDownload Include="$(PackageValidationBaselineName)"
                       Version="[$(PackageValidationBaselineVersion)]" />
    </ItemGroup>

    <PropertyGroup>
      <_PackageValidationIntermediateBaselineFile>$(MSBuildProjectExtensionsPath)$(MSBuildProjectFile).packagevalidation.g.props</_PackageValidationIntermediateBaselineFile>
      <_PackageValidationIntermediateBaselineFileContent>
<![CDATA[<Project>
  <PropertyGroup>
    <_PackageValidationBaselineName>$(PackageValidationBaselineName)</_PackageValidationBaselineName>
    <_PackageValidationBaselineVersion>$(PackageValidationBaselineVersion)</_PackageValidationBaselineVersion>
  </PropertyGroup>
</Project>]]>
      </_PackageValidationIntermediateBaselineFileContent>
    </PropertyGroup>

    <!-- Write the baseline path to disk for it to be accessible during Pack which
         usually doesn't share evaluation (nodes) with restore.
         PackageDownload doesn't support GeneratePathProperty which is why the path needs
         to be written into a separate file than the NuGet generated props file:
         https://github.com/NuGet/Home/issues/8476.
         On static graph restore, write the baseline file only once for all tfms (either in the cross targeting build or when only targeting a single tfm). -->
    <WriteLinesToFile File="$(_PackageValidationIntermediateBaselineFile)"
                      Lines="$(_PackageValidationIntermediateBaselineFileContent)"
                      Overwrite="true"
                      Encoding="Unicode"
                      Condition="'$(RestoreUseStaticGraphEvaluation)' != 'true' or '$(IsCrossTargetingBuild)' == 'true' or '$(TargetFrameworks)' == ''" />

    <ItemGroup>
      <FileWrites Include="$(PackageValidationIntermediateBaselineFile)" />
    </ItemGroup>
  </Target>
</Project>
