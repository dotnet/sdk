<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Project>
  <UsingTask TaskName="Microsoft.DotNet.PackageValidation.ValidatePackage" AssemblyFile="$(DotNetPackageValidationAssembly)" />
  <UsingTask TaskName="Microsoft.DotNet.PackageValidation.GetLastStablePackage" AssemblyFile="$(DotNetPackageValidationAssembly)" />

  <PropertyGroup Condition="'$(EnablePackageBaselineValidation)' == 'true' and '$(IsCrossTargetingBuild)' == 'true'">
    <PackageValidationIntermediateBaselineFile>$(BaseIntermediateOutputPath)PackageValidationBaselinePath.txt</PackageValidationIntermediateBaselineFile>
    <!-- Static graph restore invokes CollectPackageDownloads from an outer build, non static graph restore doesn't.
         To avoid multiple target invocations, hook onto an outer build extension point for non static graph restore. -->
    <AddPackageValidationBaselinePackageAsPackageDownloadBeforeTargets Condition="'$(IsGraphBuild)' == 'true'">CollectPackageDownloads</AddPackageValidationBaselinePackageAsPackageDownloadBeforeTargets>
    <AddPackageValidationBaselinePackageAsPackageDownloadBeforeTargets Condition="'$(IsGraphBuild)' != 'true'">_GenerateRestoreDependencies</AddPackageValidationBaselinePackageAsPackageDownloadBeforeTargets>
  </PropertyGroup>

  <Target Name="RunPackageValidation"
          AfterTargets="Pack">
    <PropertyGroup Condition="'$(EnablePackageBaselineValidation)' == 'true' and
                              '$(PackageValidationBaselinePath)' == ''">
      <PackageValidationBaselineVersion>$([System.IO.File]::ReadAllText('$(PackageValidationIntermediateBaselineFile)').Trim())</PackageValidationBaselineVersion>
      <PackageValidationBaselinePath>$([MSBuild]::NormalizePath('$(NuGetPackageRoot)', '$(PackageValidationBaselineName)', '$(PackageValidationBaselineVersion)', '$(PackageValidationBaselineName).$(PackageValidationBaselineVersion).nupkg'))</PackageValidationBaselinePath>
    </PropertyGroup>

    <!-- PackageTargetPath isn't exposed by NuGet: https://github.com/NuGet/Home/issues/6671. -->
    <ValidatePackage PackageTargetPath="$([MSBuild]::ValueOrDefault('$(PackageTargetPath)', '$(PackageOutputAbsolutePath)$(PackageId).$(PackageVersion).nupkg'))"
                     RuntimeGraph="$(RuntimeGraph)"
                     NoWarn="$(NoWarn)"
                     RunApiCompat="$([MSBuild]::ValueOrDefault('$(RunApiCompat)', 'true'))"
                     BaselineValidation="$(EnablePackageBaselineValidation)"
                     BaselinePackageTargetPath="$(PackageValidationBaselinePath)" />
  </Target>

  <!-- If package validation against a baseline is enabled and a local path to a baseline package
       isn't specified, try to find the baseline package on the feeds. Achieving this by hooking
       onto the CollectPackageDownloads extension point in cross-targeting builds. -->
  <Target Name="AddPackageValidationBaselinePackageAsPackageDownload"
          BeforeTargets="$(AddPackageValidationBaselinePackageAsPackageDownloadBeforeTargets)"
          DependsOnTargets="_GetRestoreSettings"
          Condition="'$(EnablePackageBaselineValidation)' == 'true' and
                     '$(PackageValidationBaselinePath)' == '' and
                     '$(IsCrossTargetingBuild)' == 'true'">
    <!-- TODO: Why not use PackageId instead of AssemblyName? -->
    <PropertyGroup>
      <PackageValidationBaselineName>$([MSBuild]::ValueOrDefault('$(PackageValidationBaselineName)', '$(AssemblyName)'))</PackageValidationBaselineName>
    </PropertyGroup>

    <GetLastStablePackage PackageId="$(PackageValidationBaselineName)"
                          PackageVersion="$(Version)"
                          NugetFeeds="$(_OutputSources)"
                          Condition="'$(PackageValidationBaselineVersion)' == ''">
      <Output TaskParameter="LastStableVersion" PropertyName="PackageValidationBaselineVersion" />
    </GetLastStablePackage>

    <ItemGroup>
      <PackageDownload Include="$(PackageValidationBaselineName)"
                       Version="[$(PackageValidationBaselineVersion)]" />
    </ItemGroup>

    <!-- Write the baseline path to disk for it to be accessible during Pack which
         usually doesn't share evaluation (nodes) with restore.
         PackageDownload doesn't support GeneratePathProperty which is why the path needs
         to be written into a separate file than the NuGet generated props file:
         https://github.com/NuGet/Home/issues/8476. -->
    <WriteLinesToFile File="$(PackageValidationIntermediateBaselineFile)"
                      Lines="$(PackageValidationBaselineVersion)"
                      Overwrite="true"
                      Encoding="Unicode" />

    <ItemGroup>
      <FileWrites Include="$(PackageValidationIntermediateBaselineFile)" />
    </ItemGroup>
  </Target>
</Project>
