<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="ko" original="../LocalizableStrings.resx">
    <body>
      <trans-unit id="AppFullName">
        <source>.NET Test Driver</source>
        <target state="translated">.NET 테스트 드라이버</target>
        <note />
      </trans-unit>
      <trans-unit id="AppDescription">
        <source>Test Driver for the .NET Platform</source>
        <target state="translated">.NET 플랫폼용 테스트 드라이버입니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameCrashCollectAlwaysDescription">
        <source>Enables collecting crash dump on expected as well as unexpected testhost exit.</source>
        <target state="translated">예상된 테스트 호스트 종료와 예기치 않은 테스트 호스트 종료 시 크래시 덤프 수집을 사용하도록 설정합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameCrashDescription">
        <source>Runs the tests in blame mode and collects a crash dump when the test host exits unexpectedly. This option depends on the version of .NET used, the type of error, and the operating system.
  
For exceptions in managed code, a dump will be automatically collected on .NET 5.0 and later versions. It will generate a dump for testhost or any child process that also ran on .NET 5.0 and crashed. Crashes in native code will not generate a dump. This option works on Windows, macOS, and Linux.

Crash dumps in native code, or when targetting .NET Framework, or .NET Core 3.1 and earlier versions, can only be collected on Windows, by using Procdump. A directory that contains procdump.exe and procdump64.exe must be in the PATH or PROCDUMP_PATH environment variable.

The tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump
  
To collect a crash dump from a native application running on .NET 5.0 or later, the usage of Procdump can be forced by setting the VSTEST_DUMP_FORCEPROCDUMP environment variable to 1.

Implies --blame.</source>
        <target state="needs-review-translation">테스트를 원인 모드로 실행하고 테스트 호스트가 예기치 않게 종료될 때 크래시 덤프 수집을 사용하도록 설정합니다. 
이 옵션은 현재 Windows에서만 지원되며, PATH에 procdump.exe 및 procdump64.exe를 사용할 수 있어야 합니다.
또는 PROCDUMP_PATH 환경 변수를 설정하고 procdump.exe 및 procdump64.exe를 포함하는 디렉터리를 가리킵니다. 
이 도구는 https://docs.microsoft.com/sysinternals/downloads/procdump에서 다운로드할 수 있습니다. 
--blame을 의미합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameCrashDumpTypeDescription">
        <source>The type of crash dump to be collected. Supported values are full (default) and mini. Implies --blame-crash.</source>
        <target state="needs-review-translation">수집할 크래시 덤프의 유형입니다. --blame-crash를 의미합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameHangDescription">
        <source>Run the tests in blame mode and enables collecting hang dump when test exceeds the given timeout. Implies --blame-hang.</source>
        <target state="translated">테스트를 원인 모드로 실행하고 테스트가 지정된 시간 제한을 초과하는 경우 중단 덤프 수집을 사용하도록 설정합니다. --blame-hang을 의미합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameHangDumpTypeDescription">
        <source>The type of crash dump to be collected. The supported values are full (default), mini, and none. When 'none' is used then test host is terminated on timeout, but no dump is collected. Implies --blame-hang.</source>
        <target state="needs-review-translation">수집할 크래시 덤프의 유형입니다. 없음이 사용된 경우 테스트 호스트가 시간 초과될 때 종료되지만, 덤프가 수집되지 않습니다. --blame-hang을 의미합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameHangTimeoutDescription">
        <source>Per-test timeout, after which hang dump is triggered and the testhost process is terminated. Default is 1h.
The timeout value is specified in the following format: 1.5h / 90m / 5400s / 5400000ms. When no unit is used (e.g. 5400000), the value is assumed to be in milliseconds.
When used together with data driven tests, the timeout behavior depends on the test adapter used. For xUnit, NUnit and MSTest 2.2.4+ the timeout is renewed after every test case,
For MSTest before 2.2.4, the timeout is used for all testcases.</source>
        <target state="needs-review-translation">중단 덤프가 트리거되고 테스트 호스트 프로세스가 종료되는 테스트별 시간 제한입니다. 
이 시간 제한 값은 1.5h/90m/5400s/5400000ms 형식으로 지정됩니다. 단위가 사용되지 않으면(예: 5400000), 값은 밀리초 단위로 간주됩니다.
데이터 기반 테스트와 함께 사용되는 경우 시간 제한 동작은 사용되는 테스트 어댑터에 따라 다릅니다. xUnit 및 NUnit의 경우 모든 테스트 사례 후에 시간 제한이 갱신됩니다.
MSTest의 경우 모든 테스트 사례에 시간 제한이 사용됩니다.
이 옵션은 현재 netcoreapp2.1 이상이 사용되는 Windows에서만 지원됩니다. 그리고 netcoreapp3.1 이상이 사용되는 Linux에서 지원됩니다. OSX 및 UWP는 지원되지 않습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdEnvironmentVariableDescription">
        <source>Sets the value of an environment variable. 
Creates the variable if it does not exist, overrides if it does. 
This will force the tests to be run in an isolated process. 
This argument can be specified multiple times to provide multiple variables.

Examples:
-e VARIABLE=abc
-e VARIABLE="value with spaces"
-e VARIABLE="value;seperated with;semicolons"
-e VAR1=abc -e VAR2=def -e VAR3=ghi
</source>
        <target state="translated">환경 변수의 값을 설정합니다. 
변수가 없는 경우 변수를 만들고, 변수가 있으면 재정의합니다. 
이는 테스트가 격리된 프로세스에서 강제로 실행되도록 합니다. 
이 인수를 여러 번 지정하여 여러 변수를 제공할 수 있습니다.

예:
-e VARIABLE=abc
-e VARIABLE="value with spaces"
-e VARIABLE="value;seperated with;semicolons"
-e VAR1=abc -e VAR2=def -e VAR3=ghi
</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdEnvironmentVariableExpression">
        <source>NAME="VALUE"</source>
        <target state="translated">NAME="VALUE"</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdNoLogo">
        <source>Run test(s), without displaying Microsoft Testplatform banner</source>
        <target state="translated">Microsoft Testplatform 배너를 표시하지 않고 테스트 실행</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdSettingsFile">
        <source>SETTINGS_FILE</source>
        <target state="translated">SETTINGS_FILE</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdSettingsDescription">
        <source>The settings file to use when running tests.</source>
        <target state="translated">테스트를 실행할 때 사용할 설정 파일입니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdListTestsDescription">
        <source>List the discovered tests instead of running the tests.</source>
        <target state="translated">테스트 실행 대신 검색한 테스트를 나열합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdTestCaseFilterExpression">
        <source>EXPRESSION</source>
        <target state="translated">EXPRESSION</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdTestCaseFilterDescription">
        <source>Run tests that match the given expression.
                                        Examples:
                                        Run tests with priority set to 1: --filter "Priority = 1"
                                        Run a test with the specified full name: --filter "FullyQualifiedName=Namespace.ClassName.MethodName"
                                        Run tests that contain the specified name: --filter "FullyQualifiedName~Namespace.Class"
                                        See https://aka.ms/vstest-filtering for more information on filtering support.
                                        </source>
        <target state="translated">지정된 식과 일치하는 테스트를 실행합니다.
                                        예:
                                        우선 순위가 1로 설정된 테스트 실행: --filter "Priority = 1"
                                        지정된 전체 이름이 있는 테스트 실행: --filter "FullyQualifiedName=Namespace.ClassName.MethodName"
                                        지정된 이름을 포함하는 테스트 실행: --filter "FullyQualifiedName~Namespace.Class"
                                        필터링 지원에 대한 자세한 내용은 https://aka.ms/vstest-filtering을 참조하세요.
                                        </target>
        <note />
      </trans-unit>
      <trans-unit id="CmdTestAdapterPathDescription">
        <source>The path to the custom adapters to use for the test run.</source>
        <target state="translated">테스트 실행에 사용할 사용자 지정 어댑터의 경로입니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdLoggerOption">
        <source>LOGGER</source>
        <target state="translated">LOGGER</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdLoggerDescription">
        <source>The logger to use for test results.
                                        Examples:
                                        Log in trx format using a unique file name: --logger trx
                                        Log in trx format using the specified file name: --logger "trx;LogFileName=&lt;TestResults.trx&gt;"
                                        See https://aka.ms/vstest-report for more information on logger arguments.</source>
        <target state="translated">테스트 결과에 사용할 로거입니다.
                                        예:
                                        고유한 파일 이름을 사용하여 trx 형식으로 기록합니다. --logger trx
                                        지정된 파일 이름을 사용하여 trx 형식으로 기록합니다. --logger "trx;LogFileName=&lt;TestResults.trx&gt;"
                                        로거 인수에 대한 자세한 내용은 https://aka.ms/vstest-report를 참조하세요.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdOutputDir">
        <source>OUTPUT_DIR</source>
        <target state="translated">OUTPUT_DIR</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdOutputDescription">
        <source>The output directory to place built artifacts in.</source>
        <target state="translated">빌드된 아티팩트를 배치할 출력 디렉터리입니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdPathToLogFile">
        <source>LOG_FILE</source>
        <target state="translated">LOG_FILE</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdPathTologFileDescription">
        <source>Enable verbose logging to the specified file.</source>
        <target state="translated">지정한 파일에 대해 자세한 정보 로깅을 사용합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdNoBuildDescription">
        <source>Do not build the project before testing. Implies --no-restore.</source>
        <target state="translated">테스트하기 전에 프로젝트를 빌드하지 않습니다. 복원 없음을 의미합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdTestAdapterPath">
        <source>ADAPTER_PATH</source>
        <target state="translated">ADAPTER_PATH</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdResultsDirectoryDescription">
        <source>The directory where the test results will be placed.
The specified directory will be created if it does not exist.</source>
        <target state="translated">테스트 결과를 배치할 디렉터리입니다.
지정한 디렉터리가 존재하지 않는 경우 생성됩니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdPathToResultsDirectory">
        <source>RESULTS_DIR</source>
        <target state="translated">RESULTS_DIR</target>
        <note />
      </trans-unit>
      <trans-unit id="CrashDumpTypeArgumentName">
        <source>DUMP_TYPE</source>
        <target state="translated">DUMP_TYPE</target>
        <note />
      </trans-unit>
      <trans-unit id="HangDumpTypeArgumentName">
        <source>DUMP_TYPE</source>
        <target state="translated">DUMP_TYPE</target>
        <note />
      </trans-unit>
      <trans-unit id="HangTimeoutArgumentName">
        <source>TIMESPAN</source>
        <target state="translated">TIMESPAN</target>
        <note />
      </trans-unit>
      <trans-unit id="IgnoredArgumentsMessage">
        <source>The following arguments have been ignored : "{0}"</source>
        <target state="translated">"{0}" 인수가 무시되었습니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="RunSettingsArgumentsDescription">
        <source>

RunSettings arguments:
  Arguments to pass as RunSettings configurations. Arguments are specified as '[name]=[value]' pairs after "-- " (note the space after --). 
  Use a space to separate multiple '[name]=[value]' pairs.
  See https://aka.ms/vstest-runsettings-arguments for more information on RunSettings arguments.
  Example: dotnet test -- MSTest.DeploymentEnabled=false MSTest.MapInconclusiveToFailed=True</source>
        <target state="translated">

RunSettings 인수:
  RunSettings 구성으로 전달하기 위한 인수입니다. 인수는 "-- " 뒤에 '[name]=[value]' 쌍으로 지정될 수 있습니다. -- 뒤의 공백에 주의하세요. 
  여러 '[name] =[value]' 쌍을 구분하려면 공백을 사용합니다.
  RunSettings 인수에 대한 자세한 내용은 https://aka.ms/vstest-runsettings-arguments를 참조하세요.
  예: dotnet test -- MSTest.DeploymentEnabled=false MSTest.MapInconclusiveToFailed=True</target>
        <note />
      </trans-unit>
      <trans-unit id="cmdCollectFriendlyName">
        <source>DATA_COLLECTOR_NAME</source>
        <target state="translated">DATA_COLLECTOR_NAME</target>
        <note />
      </trans-unit>
      <trans-unit id="cmdCollectDescription">
        <source>The friendly name of the data collector to use for the test run.
                                        More info here: https://aka.ms/vstest-collect</source>
        <target state="translated">테스트 실행에 사용할 데이터 수집기의 이름입니다.
                                        자세한 정보: https://aka.ms/vstest-collect</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameDescription">
        <source>Runs the tests in blame mode. This option is helpful in isolating problematic tests that cause the test host to crash or hang, but it does not create a memory dump by default. 

When a crash is detected, it creates an sequence file in TestResults/guid/guid_Sequence.xml that captures the order of tests that were run before the crash.

Based on the additional settings, hang dump or crash dump can also be collected.

Example: 
  Timeout the test run when test takes more than the default timeout of 1 hour, and collect crash dump when the test host exits unexpectedly. 
  (Crash dumps require additional setup, see below.)
  dotnet test --blame-hang --blame-crash
Example: 
  Timeout the test run when a test takes more than 20 minutes and collect hang dump. 
  dotnet test --blame-hang-timeout 20min
</source>
        <target state="needs-review-translation">테스트를 원인 모드로 실행합니다. 이 옵션은 테스트 호스트 크래시 또는 중단을 유발하는 문제 있는 테스트를 격리하는 데 유용합니다. 
크래시가 탐지되면 크래시 전에 실행된 테스트의 순서를 캡처하는 시퀀스 파일이 TestResults/guid/guid_Sequence.xml에 생성됩니다.
추가 설정에 따라 중단 덤프 또는 크래시 덤프가 수집될 수도 있습니다.
예: 
  테스트에 걸리는 시간이 기본 시간 제한인 1시간보다 길면 테스트 실행이 시간 초과되고, 테스트 호스트가 예기치 않게 종료되면 크래시 덤프를 수집합니다. 
  (크래시 덤프에는 추가 설정이 필요합니다. 아래를 참조하세요.)
  dotnet test --blame-hang --blame-crash
예: 
  테스트에 걸리는 시간이 20분보다 길면 테스트 실행이 시간 초과되고 중단 덤프를 수집합니다. 
  dotnet test --blame-hang-timeout 20min
</target>
        <note />
      </trans-unit>
      <trans-unit id="FrameworkOptionDescription">
        <source>The target framework to run tests for. The target framework must also be specified in the project file.</source>
        <target state="translated">테스트를 실행할 대상 프레임워크입니다. 대상 프레임워크는 프로젝트 파일에도 지정되어야 합니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConfigurationOptionDescription">
        <source>The configuration to use for running tests. The default for most projects is 'Debug'.</source>
        <target state="translated">테스트 실행에 사용할 구성입니다. 대부분의 프로젝트에서 기본값은 'Debug'입니다.</target>
        <note />
      </trans-unit>
      <trans-unit id="RuntimeOptionDescription">
        <source>The target runtime to test for.</source>
        <target state="translated">테스트할 대상 런타임입니다.</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>