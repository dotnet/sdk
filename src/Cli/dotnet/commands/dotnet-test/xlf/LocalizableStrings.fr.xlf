<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="fr" original="../LocalizableStrings.resx">
    <body>
      <trans-unit id="AppFullName">
        <source>.NET Test Driver</source>
        <target state="translated">Pilote de test .NET</target>
        <note />
      </trans-unit>
      <trans-unit id="AppDescription">
        <source>Test Driver for the .NET Platform</source>
        <target state="translated">Pilote de test pour la plateforme .NET</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameCrashCollectAlwaysDescription">
        <source>Enables collecting crash dump on expected as well as unexpected testhost exit.</source>
        <target state="translated">Active la collecte des données de vidage sur plantage en cas de sortie attendue et inattendue de testhost.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameCrashDescription">
        <source>Runs the tests in blame mode and collects a crash dump when the test host exits unexpectedly. This option depends on the version of .NET used, the type of error, and the operating system.
  
For exceptions in managed code, a dump will be automatically collected on .NET 5.0 and later versions. It will generate a dump for testhost or any child process that also ran on .NET 5.0 and crashed. Crashes in native code will not generate a dump. This option works on Windows, macOS, and Linux.

Crash dumps in native code, or when targetting .NET Framework, or .NET Core 3.1 and earlier versions, can only be collected on Windows, by using Procdump. A directory that contains procdump.exe and procdump64.exe must be in the PATH or PROCDUMP_PATH environment variable.

The tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump
  
To collect a crash dump from a native application running on .NET 5.0 or later, the usage of Procdump can be forced by setting the VSTEST_DUMP_FORCEPROCDUMP environment variable to 1.

Implies --blame.</source>
        <target state="needs-review-translation">Exécute les tests en mode blame (responsabilité) et active la collecte des données de vidage sur plantage en cas de sortie inattendue de testhost. 
Cette option est uniquement prise en charge sur Windows. Elle nécessite la présence de procdump.exe et procdump64.exe dans PATH.
Sinon, la variable d'environnement PROCDUMP_PATH doit être définie et pointer vers un répertoire qui contient procdump.exe et procdump64.exe. 
Vous pouvez télécharger les outils ici : https://docs.microsoft.com/sysinternals/downloads/procdump 
Implies --blame.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameCrashDumpTypeDescription">
        <source>The type of crash dump to be collected. Supported values are full (default) and mini. Implies --blame-crash.</source>
        <target state="needs-review-translation">Type de données de vidage sur plantage à collecter. Implique --blame-crash.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameHangDescription">
        <source>Run the tests in blame mode and enables collecting hang dump when test exceeds the given timeout. Implies --blame-hang.</source>
        <target state="translated">Exécutez les tests en mode blame (responsabilité) et activez la collecte des données de vidage sur blocage quand le test dépasse le délai d'expiration spécifié. Implique --blame-hang.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameHangDumpTypeDescription">
        <source>The type of crash dump to be collected. The supported values are full (default), mini, and none. When 'none' is used then test host is terminated on timeout, but no dump is collected. Implies --blame-hang.</source>
        <target state="needs-review-translation">Type de données de vidage sur plantage à collecter. En l'absence de spécification du type de vidage, l'exécution de l'hôte de test prend fin à l'issue du délai d'expiration mais aucune donnée de vidage n'est collectée. Implique --blame-hang.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameHangTimeoutDescription">
        <source>Per-test timeout, after which hang dump is triggered and the testhost process is terminated. Default is 1h.
The timeout value is specified in the following format: 1.5h / 90m / 5400s / 5400000ms. When no unit is used (e.g. 5400000), the value is assumed to be in milliseconds.
When used together with data driven tests, the timeout behavior depends on the test adapter used. For xUnit, NUnit and MSTest 2.2.4+ the timeout is renewed after every test case,
For MSTest before 2.2.4, the timeout is used for all testcases.</source>
        <target state="needs-review-translation">Définissez un délai d'expiration spécifique à chaque test. À l'issue de ce délai, un vidage sur blocage se déclenche et l'exécution du processus testhost prend fin. 
La valeur du délai d'expiration est spécifiée au format suivant : 1.5h / 90m / 5400s / 5400000ms. Quand aucune unité n'est utilisée (par exemple 5400000), la valeur est supposée être en millisecondes.
En cas d'utilisation avec des tests pilotés par les données, le comportement du délai d'expiration dépend de l'adaptateur de test utilisé. Pour xUnit et NUnit, le délai d'expiration est renouvelé après chaque cas de test.
Avec MSTest, le délai d'expiration est utilisé pour tous les cas de test.
Cette option est prise en charge uniquement sur Windows avec netcoreapp2.1 et les versions ultérieures. Elle est également prise en charge sur Linux avec netcoreapp3.1 et les versions ultérieures. OSX et UWP ne sont pas pris en charge.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdEnvironmentVariableDescription">
        <source>Sets the value of an environment variable. 
Creates the variable if it does not exist, overrides if it does. 
This will force the tests to be run in an isolated process. 
This argument can be specified multiple times to provide multiple variables.

Examples:
-e VARIABLE=abc
-e VARIABLE="value with spaces"
-e VARIABLE="value;seperated with;semicolons"
-e VAR1=abc -e VAR2=def -e VAR3=ghi
</source>
        <target state="translated">Définit la valeur d'une variable d'environnement. 
Crée la variable si elle n'existe pas, et la remplace si elle existe. 
Cela entraîne l'exécution forcée des tests dans un processus isolé. 
Vous pouvez spécifier cet argument plusieurs fois pour fournir plusieurs variables.

Exemples :
-e VARIABLE=abc
-e VARIABLE="valeur avec des espaces"
-e VARIABLE="valeur;séparée;par;des;points;virgules"
-e VAR1=abc -e VAR2=def -e VAR3=ghi
</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdEnvironmentVariableExpression">
        <source>NAME="VALUE"</source>
        <target state="translated">NAME="VALUE"</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdNoLogo">
        <source>Run test(s), without displaying Microsoft Testplatform banner</source>
        <target state="translated">Exécute le ou les tests, sans afficher la bannière Microsoft Testplatform</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdSettingsFile">
        <source>SETTINGS_FILE</source>
        <target state="translated">SETTINGS_FILE</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdSettingsDescription">
        <source>The settings file to use when running tests.</source>
        <target state="translated">Fichier de paramètres à utiliser durant l'exécution des tests.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdListTestsDescription">
        <source>List the discovered tests instead of running the tests.</source>
        <target state="translated">Listez les tests découverts au lieu d'exécuter les tests.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdTestCaseFilterExpression">
        <source>EXPRESSION</source>
        <target state="translated">EXPRESSION</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdTestCaseFilterDescription">
        <source>Run tests that match the given expression.
                                        Examples:
                                        Run tests with priority set to 1: --filter "Priority = 1"
                                        Run a test with the specified full name: --filter "FullyQualifiedName=Namespace.ClassName.MethodName"
                                        Run tests that contain the specified name: --filter "FullyQualifiedName~Namespace.Class"
                                        See https://aka.ms/vstest-filtering for more information on filtering support.
                                        </source>
        <target state="translated">Permet d'exécuter les tests qui correspondent à l'expression indiquée.
                                        Exemples :
                                        Exécuter les tests de priorité 1 : --filter "Priority = 1"
                                        Exécuter un test avec le nom complet spécifié : --filter "FullyQualifiedName=Namespace.ClassName.MethodName"
                                        Exécuter les tests qui contiennent le nom spécifié : --filter "FullyQualifiedName~Namespace.Class"
                                        Pour plus d'informations sur la prise en charge du filtrage, consultez https://aka.ms/vstest-filtering.
                                        </target>
        <note />
      </trans-unit>
      <trans-unit id="CmdTestAdapterPathDescription">
        <source>The path to the custom adapters to use for the test run.</source>
        <target state="translated">Chemin des adaptateurs personnalisés à utiliser pour la série de tests.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdLoggerOption">
        <source>LOGGER</source>
        <target state="translated">LOGGER</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdLoggerDescription">
        <source>The logger to use for test results.
                                        Examples:
                                        Log in trx format using a unique file name: --logger trx
                                        Log in trx format using the specified file name: --logger "trx;LogFileName=&lt;TestResults.trx&gt;"
                                        See https://aka.ms/vstest-report for more information on logger arguments.</source>
        <target state="translated">Journaliseur à utiliser pour les résultats des tests.
                                        Exemples :
                                        Journal au format trx avec un nom de fichier unique : --logger trx
                                        Journal au format trx avec le nom de fichier spécifié : --logger "trx;LogFileName=&lt;TestResults.trx&gt;"
                                        Pour plus d'informations sur les arguments du journaliseur, consultez https://aka.ms/vstest-report.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdOutputDir">
        <source>OUTPUT_DIR</source>
        <target state="translated">OUTPUT_DIR</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdOutputDescription">
        <source>The output directory to place built artifacts in.</source>
        <target state="translated">Répertoire de sortie dans lequel placer les artefacts générés.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdPathToLogFile">
        <source>LOG_FILE</source>
        <target state="translated">LOG_FILE</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdPathTologFileDescription">
        <source>Enable verbose logging to the specified file.</source>
        <target state="translated">Activez la journalisation détaillée dans le fichier spécifié.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdNoBuildDescription">
        <source>Do not build the project before testing. Implies --no-restore.</source>
        <target state="translated">Ne pas générer le projet avant les tests. Implique --no-restore.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdTestAdapterPath">
        <source>ADAPTER_PATH</source>
        <target state="translated">ADAPTER_PATH</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdResultsDirectoryDescription">
        <source>The directory where the test results will be placed.
The specified directory will be created if it does not exist.</source>
        <target state="translated">Répertoire où les résultats des tests vont être placés.
Le répertoire spécifié est créé, s'il n'existe pas déjà.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdPathToResultsDirectory">
        <source>RESULTS_DIR</source>
        <target state="translated">RESULTS_DIR</target>
        <note />
      </trans-unit>
      <trans-unit id="CrashDumpTypeArgumentName">
        <source>DUMP_TYPE</source>
        <target state="translated">DUMP_TYPE</target>
        <note />
      </trans-unit>
      <trans-unit id="HangDumpTypeArgumentName">
        <source>DUMP_TYPE</source>
        <target state="translated">DUMP_TYPE</target>
        <note />
      </trans-unit>
      <trans-unit id="HangTimeoutArgumentName">
        <source>TIMESPAN</source>
        <target state="translated">TIMESPAN</target>
        <note />
      </trans-unit>
      <trans-unit id="IgnoredArgumentsMessage">
        <source>The following arguments have been ignored : "{0}"</source>
        <target state="translated">Les arguments suivants ont été ignorés : "{0}"</target>
        <note />
      </trans-unit>
      <trans-unit id="RunSettingsArgumentsDescription">
        <source>

RunSettings arguments:
  Arguments to pass as RunSettings configurations. Arguments are specified as '[name]=[value]' pairs after "-- " (note the space after --). 
  Use a space to separate multiple '[name]=[value]' pairs.
  See https://aka.ms/vstest-runsettings-arguments for more information on RunSettings arguments.
  Example: dotnet test -- MSTest.DeploymentEnabled=false MSTest.MapInconclusiveToFailed=True</source>
        <target state="translated">

Arguments de RunSettings :
  Arguments à passer en tant que configurations RunSettings. Spécifiez les arguments en tant que paires '[name]=[value]' après "-- " (notez l'espace après --). 
  Utilisez un espace pour séparer plusieurs paires '[name]=[value]'.
  Pour plus d'informations sur les arguments de RunSettings, consultez https://aka.ms/vstest-runsettings-arguments.
  Exemple : dotnet test -- MSTest.DeploymentEnabled=false MSTest.MapInconclusiveToFailed=True</target>
        <note />
      </trans-unit>
      <trans-unit id="cmdCollectFriendlyName">
        <source>DATA_COLLECTOR_NAME</source>
        <target state="translated">DATA_COLLECTOR_NAME</target>
        <note />
      </trans-unit>
      <trans-unit id="cmdCollectDescription">
        <source>The friendly name of the data collector to use for the test run.
                                        More info here: https://aka.ms/vstest-collect</source>
        <target state="translated">Nom convivial du collecteur de données à utiliser pour la série de tests.
                                        Plus d'informations ici : https://aka.ms/vstest-collect</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameDescription">
        <source>Runs the tests in blame mode. This option is helpful in isolating problematic tests that cause the test host to crash or hang, but it does not create a memory dump by default. 

When a crash is detected, it creates an sequence file in TestResults/guid/guid_Sequence.xml that captures the order of tests that were run before the crash.

Based on the additional settings, hang dump or crash dump can also be collected.

Example: 
  Timeout the test run when test takes more than the default timeout of 1 hour, and collect crash dump when the test host exits unexpectedly. 
  (Crash dumps require additional setup, see below.)
  dotnet test --blame-hang --blame-crash
Example: 
  Timeout the test run when a test takes more than 20 minutes and collect hang dump. 
  dotnet test --blame-hang-timeout 20min
</source>
        <target state="needs-review-translation">Exécute les tests en mode blame (responsabilité). Cette option permet d'isoler les tests problématiques à l'origine d'un plantage ou d'un blocage sur l'hôte de test. 
Quand un plantage est détecté, un fichier de séquence est créé dans TestResults/guid/guid_Sequence.xml pour capturer l'ordre des tests exécutés avant le plantage.
En fonction de paramètres supplémentaires, des données de vidage sur blocage ou de vidage sur plantage peuvent également être collectées.
Exemple : 
  Définissez le délai d'expiration de la série de tests quand les tests prennent plus de temps que le délai par défaut (1 heure), et collectez les données de vidage sur plantage quand l'hôte de test se ferme de manière inattendue. 
  (Les vidages sur plantage nécessitent une configuration supplémentaire, comme vous pouvez le voir ci-dessous.)
  dotnet test --blame-hang --blame-crash
Exemple : 
  Définissez le délai d'expiration de la série de tests quand un test prend plus de 20 minutes, et collectez les données de vidage sur blocage. 
  dotnet test --blame-hang-timeout 20min
</target>
        <note />
      </trans-unit>
      <trans-unit id="FrameworkOptionDescription">
        <source>The target framework to run tests for. The target framework must also be specified in the project file.</source>
        <target state="translated">Framework cible pour lequel les tests sont exécutés. Le framework cible doit également être spécifié dans le fichier projet.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConfigurationOptionDescription">
        <source>The configuration to use for running tests. The default for most projects is 'Debug'.</source>
        <target state="translated">Configuration à utiliser pour l'exécution des tests. La valeur par défaut pour la plupart des projets est 'Debug'.</target>
        <note />
      </trans-unit>
      <trans-unit id="RuntimeOptionDescription">
        <source>The target runtime to test for.</source>
        <target state="translated">Runtime cible à tester.</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>