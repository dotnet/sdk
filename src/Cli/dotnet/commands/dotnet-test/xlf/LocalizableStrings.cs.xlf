<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="cs" original="../LocalizableStrings.resx">
    <body>
      <trans-unit id="AppFullName">
        <source>.NET Test Driver</source>
        <target state="translated">Testovací ovladač .NET</target>
        <note />
      </trans-unit>
      <trans-unit id="AppDescription">
        <source>Test Driver for the .NET Platform</source>
        <target state="translated">Testovací ovladač pro platformu .NET</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameCrashCollectAlwaysDescription">
        <source>Enables collecting crash dump on expected as well as unexpected testhost exit.</source>
        <target state="translated">Umožní shromažďovat výpisy stavu systému při očekávaných i neočekávaných ukončeních hostitele testů.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameCrashDescription">
        <source>Runs the tests in blame mode and collects a crash dump when the test host exits unexpectedly. This option depends on the version of .NET used, the type of error, and the operating system.
  
For exceptions in managed code, a dump will be automatically collected on .NET 5.0 and later versions. It will generate a dump for testhost or any child process that also ran on .NET 5.0 and crashed. Crashes in native code will not generate a dump. This option works on Windows, macOS, and Linux.

Crash dumps in native code, or when targetting .NET Framework, or .NET Core 3.1 and earlier versions, can only be collected on Windows, by using Procdump. A directory that contains procdump.exe and procdump64.exe must be in the PATH or PROCDUMP_PATH environment variable.

The tools can be downloaded here: https://docs.microsoft.com/sysinternals/downloads/procdump
  
To collect a crash dump from a native application running on .NET 5.0 or later, the usage of Procdump can be forced by setting the VSTEST_DUMP_FORCEPROCDUMP environment variable to 1.

Implies --blame.</source>
        <target state="needs-review-translation">Spustí testy v režimu blame a umožní shromažďování výpisů stavu systému, když se hostitel testů neočekávaně ukončí. 
V současné době se tato možnost podporuje jen ve Windows a vyžaduje, aby v proměnné PATH byly k dispozici nástroje procdump.exe a procdump64.exe.
Případně může být nastavená proměnná prostředí PROCDUMP_PATH, která vede na adresář s nástroji procdump.exe a procdump64.exe.
Tyto nástroje se dají stáhnout tady: https://docs.microsoft.com/sysinternals/downloads/procdump.
Tato možnost představuje přepínač --blame.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameCrashDumpTypeDescription">
        <source>The type of crash dump to be collected. Supported values are full (default) and mini. Implies --blame-crash.</source>
        <target state="needs-review-translation">Typ výpisu stavu systému, který se má shromáždit. Tato možnost představuje přepínač --blame-crash.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameHangDescription">
        <source>Run the tests in blame mode and enables collecting hang dump when test exceeds the given timeout. Implies --blame-hang.</source>
        <target state="translated">Spustí testy v režimu blame a umožní shromažďování výpisů stavu systému při zablokování, když test překročí stanovený časový limit. Tato možnost představuje přepínač --blame-hang.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameHangDumpTypeDescription">
        <source>The type of crash dump to be collected. The supported values are full (default), mini, and none. When 'none' is used then test host is terminated on timeout, but no dump is collected. Implies --blame-hang.</source>
        <target state="needs-review-translation">Typ výpisu stavu systému, který se má shromáždit. Když se použije možnost Žádný, hostitel testů se po vypršení časového limitu ukončí, ale neshromáždí se žádný výpis. Tato možnost představuje přepínač --blame-hang.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameHangTimeoutDescription">
        <source>Per-test timeout, after which hang dump is triggered and the testhost process is terminated. Default is 1h.
The timeout value is specified in the following format: 1.5h / 90m / 5400s / 5400000ms. When no unit is used (e.g. 5400000), the value is assumed to be in milliseconds.
When used together with data driven tests, the timeout behavior depends on the test adapter used. For xUnit, NUnit and MSTest 2.2.4+ the timeout is renewed after every test case,
For MSTest before 2.2.4, the timeout is used for all testcases.</source>
        <target state="needs-review-translation">Časový limit pro jednotlivé testy, po kterém se aktivuje výpis stavu systému při zablokování a ukončí se proces hostitele testů. 
Hodnota časového limitu se zadává v následujícím formátu: 1.5h / 90m / 5400s / 5400000ms. Když se nepoužije žádná jednotka (např. 5400000), předpokládá se, že hodnota představuje milisekundy.
Když se časový limit použije spolu s testy řízenými daty, jeho chování závisí na použitém adaptéru testu. Pro xUnit a NUnit se časový limit obnovuje po každém testovacím případu.
Pro MSTest se časový limit používá pro všechny testovací případy.
V současné době se tato možnost podporuje jen ve Windows spolu s netcoreapp2.1 a novějšími a Linuxu s netcoreapp3.1 a novějšími. OSX a UPW se nepodporují.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdEnvironmentVariableDescription">
        <source>Sets the value of an environment variable. 
Creates the variable if it does not exist, overrides if it does. 
This will force the tests to be run in an isolated process. 
This argument can be specified multiple times to provide multiple variables.

Examples:
-e VARIABLE=abc
-e VARIABLE="value with spaces"
-e VARIABLE="value;seperated with;semicolons"
-e VAR1=abc -e VAR2=def -e VAR3=ghi
</source>
        <target state="translated">Nastaví hodnotu proměnné prostředí.
Pokud proměnná neexistuje, vytvoří ji, a pokud existuje, přepíše ji.
Tímto se vynutí spuštění testů v izolovaném procesu.
Tento argument je možné zadat vícekrát a určit tak více proměnných.

Příklady:
-e PROMĚNNÁ=abc
-e PROMĚNNÁ="hodnota s mezerami"
-e PROMĚNNÁ="hodnota;oddělená;pomocí;středníků"
-e PROM1=abc -e PROM2=def -e PROM3=ghi
</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdEnvironmentVariableExpression">
        <source>NAME="VALUE"</source>
        <target state="translated">NÁZEV="HODNOTA"</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdNoLogo">
        <source>Run test(s), without displaying Microsoft Testplatform banner</source>
        <target state="translated">Spustit testy bez zobrazení nápisu Microsoft Testplatform</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdSettingsFile">
        <source>SETTINGS_FILE</source>
        <target state="translated">SETTINGS_FILE</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdSettingsDescription">
        <source>The settings file to use when running tests.</source>
        <target state="translated">Soubor nastavení, který se má použít při spouštění testů</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdListTestsDescription">
        <source>List the discovered tests instead of running the tests.</source>
        <target state="translated">Místo spuštění testů vypíše seznam zjištěných testů.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdTestCaseFilterExpression">
        <source>EXPRESSION</source>
        <target state="translated">EXPRESSION</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdTestCaseFilterDescription">
        <source>Run tests that match the given expression.
                                        Examples:
                                        Run tests with priority set to 1: --filter "Priority = 1"
                                        Run a test with the specified full name: --filter "FullyQualifiedName=Namespace.ClassName.MethodName"
                                        Run tests that contain the specified name: --filter "FullyQualifiedName~Namespace.Class"
                                        See https://aka.ms/vstest-filtering for more information on filtering support.
                                        </source>
        <target state="translated">Spustí testy, které odpovídají danému výrazu.
                                        Příklady:
                                        Spustí testy s prioritou nastavenou na 1: --filter "Priority = 1"
                                        Spustí test se zadaným úplným názvem: --filter "FullyQualifiedName=Namespace.ClassName.MethodName"
                                        Spustí testy, které obsahují zadaný název: --filter "FullyQualifiedName~Namespace.Class"
                                        Další informace o podpoře filtrování: https://aka.ms/vstest-filtering
                                        </target>
        <note />
      </trans-unit>
      <trans-unit id="CmdTestAdapterPathDescription">
        <source>The path to the custom adapters to use for the test run.</source>
        <target state="translated">Cesta k vlastním adaptérům, které se mají použít pro testovací běh</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdLoggerOption">
        <source>LOGGER</source>
        <target state="translated">LOGGER</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdLoggerDescription">
        <source>The logger to use for test results.
                                        Examples:
                                        Log in trx format using a unique file name: --logger trx
                                        Log in trx format using the specified file name: --logger "trx;LogFileName=&lt;TestResults.trx&gt;"
                                        See https://aka.ms/vstest-report for more information on logger arguments.</source>
        <target state="translated">Protokolovací nástroj, který se má použít pro výsledky testování.
                                        Příklady:
                                        Protokolování ve formátu trx s jedinečným názvem souboru: --logger trx
                                        Protokolování ve formátu trx se zadaným názvem souboru: --logger "trx;LogFileName=&lt;TestResults.trx&gt;"
                                        Další informace o argumentech protokolovacího nástroje najdete na adrese https://aka.ms/vstest-report.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdOutputDir">
        <source>OUTPUT_DIR</source>
        <target state="translated">OUTPUT_DIR</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdOutputDescription">
        <source>The output directory to place built artifacts in.</source>
        <target state="translated">Výstupní adresář, do kterého se mají umístit sestavené artefakty</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdPathToLogFile">
        <source>LOG_FILE</source>
        <target state="translated">LOG_FILE</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdPathTologFileDescription">
        <source>Enable verbose logging to the specified file.</source>
        <target state="translated">Povolí podrobné protokolování do zadaného souboru.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdNoBuildDescription">
        <source>Do not build the project before testing. Implies --no-restore.</source>
        <target state="translated">Nesestavujte projekt, dokud ho neotestujete. Implikuje možnost --no-restore.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdTestAdapterPath">
        <source>ADAPTER_PATH</source>
        <target state="translated">ADAPTER_PATH</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdResultsDirectoryDescription">
        <source>The directory where the test results will be placed.
The specified directory will be created if it does not exist.</source>
        <target state="translated">Adresář, do kterého se umístí výsledky testu.
Pokud zadaný adresář neexistuje, bude vytvořen.</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdPathToResultsDirectory">
        <source>RESULTS_DIR</source>
        <target state="translated">RESULTS_DIR</target>
        <note />
      </trans-unit>
      <trans-unit id="CrashDumpTypeArgumentName">
        <source>DUMP_TYPE</source>
        <target state="translated">DUMP_TYPE</target>
        <note />
      </trans-unit>
      <trans-unit id="HangDumpTypeArgumentName">
        <source>DUMP_TYPE</source>
        <target state="translated">DUMP_TYPE</target>
        <note />
      </trans-unit>
      <trans-unit id="HangTimeoutArgumentName">
        <source>TIMESPAN</source>
        <target state="translated">TIMESPAN</target>
        <note />
      </trans-unit>
      <trans-unit id="IgnoredArgumentsMessage">
        <source>The following arguments have been ignored : "{0}"</source>
        <target state="translated">Následující argumenty se ignorovaly: {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="RunSettingsArgumentsDescription">
        <source>

RunSettings arguments:
  Arguments to pass as RunSettings configurations. Arguments are specified as '[name]=[value]' pairs after "-- " (note the space after --). 
  Use a space to separate multiple '[name]=[value]' pairs.
  See https://aka.ms/vstest-runsettings-arguments for more information on RunSettings arguments.
  Example: dotnet test -- MSTest.DeploymentEnabled=false MSTest.MapInconclusiveToFailed=True</source>
        <target state="translated">

Argumenty RunSettings:
 Argumenty, které se mají předat jako konfigurace RunSettings. Jsou zadané jako dvojice [název]=[hodnota] za „-- “ (pozor na mezeru za --). 
 K oddělení více dvojic [název]=[hodnota] použijte mezeru.
 Další informace o argumentech RunSettings: https://aka.ms/vstest-runsettings-arguments.
 Příklad: dotnet test -- MSTest.DeploymentEnabled=false MSTest.MapInconclusiveToFailed=True</target>
        <note />
      </trans-unit>
      <trans-unit id="cmdCollectFriendlyName">
        <source>DATA_COLLECTOR_NAME</source>
        <target state="translated">DATA_COLLECTOR_NAME</target>
        <note />
      </trans-unit>
      <trans-unit id="cmdCollectDescription">
        <source>The friendly name of the data collector to use for the test run.
                                        More info here: https://aka.ms/vstest-collect</source>
        <target state="translated">Popisný název kolekce dat, která se má použít pro testovací běh.
                                        Další informace: https://aka.ms/vstest-collect</target>
        <note />
      </trans-unit>
      <trans-unit id="CmdBlameDescription">
        <source>Runs the tests in blame mode. This option is helpful in isolating problematic tests that cause the test host to crash or hang, but it does not create a memory dump by default. 

When a crash is detected, it creates an sequence file in TestResults/guid/guid_Sequence.xml that captures the order of tests that were run before the crash.

Based on the additional settings, hang dump or crash dump can also be collected.

Example: 
  Timeout the test run when test takes more than the default timeout of 1 hour, and collect crash dump when the test host exits unexpectedly. 
  (Crash dumps require additional setup, see below.)
  dotnet test --blame-hang --blame-crash
Example: 
  Timeout the test run when a test takes more than 20 minutes and collect hang dump. 
  dotnet test --blame-hang-timeout 20min
</source>
        <target state="needs-review-translation">Spustí testy v režimu blame. Tato možnost je užitečná při izolaci problémových testů, které způsobují chybové ukončení nebo zablokování hostitele testů. 
Když se zjistí chybové ukončení, vytvoří se v TestResults/guid/guid_Sequence.xml soubor sekvence, která zachycuje pořadí testů spuštěných před chybovým ukončením.
Na základě dalších nastavení je možné shromažďovat výpisy stavu paměti i při zablokování nebo chybovém ukončení.
Příklad: 
  Vypršení časového limitu, když testovací běh trvá déle než výchozí limit, který je 1 hodina, a shromáždění výpisu stavu systému, když se hostitel testů neočekávaně ukončí 
  (Výpisy stavu paměti vyžadují další nastavování. Informace najdete níže.)
  dotnet test --blame-hang --blame-crash
Příklad: 
  Vypršení časového limitu pro testovací běh, když test trvá déle než 20 minut, a shromáždění výpisu stavu systému při zablokování 
  dotnet test --blame-hang-timeout 20min
</target>
        <note />
      </trans-unit>
      <trans-unit id="FrameworkOptionDescription">
        <source>The target framework to run tests for. The target framework must also be specified in the project file.</source>
        <target state="translated">Cílová architektura pro spuštění testů. Cílová architektura musí být určená také v souboru projektu.</target>
        <note />
      </trans-unit>
      <trans-unit id="ConfigurationOptionDescription">
        <source>The configuration to use for running tests. The default for most projects is 'Debug'.</source>
        <target state="translated">Konfigurace, která se má použít pro spuštění testů. Výchozí možností pro většinu projektů je Debug.</target>
        <note />
      </trans-unit>
      <trans-unit id="RuntimeOptionDescription">
        <source>The target runtime to test for.</source>
        <target state="translated">Cílový modul runtime pro testování.</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>