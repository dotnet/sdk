const Microsoft.NET.Build.Containers.KnownLocalRegistryTypes.Docker = "Docker" -> string!
const Microsoft.NET.Build.Containers.KnownLocalRegistryTypes.Podman = "Podman" -> string!
Microsoft.NET.Build.Containers.BaseImageNotFoundException
Microsoft.NET.Build.Containers.Constants
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.ComputedContainerBaseImage.get -> string?
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.ContainerFamily.get -> string?
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.FrameworkReferences.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.FrameworkReferences.set -> void
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.IsAotPublished.get -> bool
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.IsAotPublished.set -> void
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.IsTrimmed.get -> bool
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.IsTrimmed.set -> void
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.IsSelfContained.get -> bool
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.IsSelfContained.set -> void
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.TargetRuntimeIdentifiers.get -> string![]!
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.TargetRuntimeIdentifiers.set -> void
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.UserBaseImage.get -> string?
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.UserBaseImage.set -> void
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.UsesInvariantGlobalization.get -> bool
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.UsesInvariantGlobalization.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.BaseRegistry.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.BaseRegistry.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.BaseImageName.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.BaseImageName.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.BaseImageTag.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.BaseImageTag.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.BaseImageDigest.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.BaseImageDigest.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.ArchiveOutputPath.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.ArchiveOutputPath.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.GeneratedManifestPath.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.GeneratedManifestPath.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.LocalRegistry.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.LocalRegistry.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.GeneratedArchiveOutputPath.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.GeneratedArchiveOutputPath.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.Cancel() -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.CreateImageIndex() -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.Dispose() -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.GeneratedImageIndex.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.GeneratedImageIndex.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.ImageTags.get -> string![]!
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.ImageTags.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.GeneratedContainers.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.GeneratedContainers.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.OutputRegistry.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.OutputRegistry.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.Repository.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.Repository.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedAppContainerConfig.get -> Microsoft.Build.Framework.ITaskItem!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedAppContainerConfig.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedAppContainerManifest.get -> Microsoft.Build.Framework.ITaskItem!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedAppContainerManifest.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedConfigurationPath.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedConfigurationPath.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedManifestPath.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedManifestPath.set -> void
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.ArchivePath.get -> string!
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.ArchivePath.set -> void
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.Cancel() -> void
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.Configuration.get -> Microsoft.Build.Framework.ITaskItem!
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.Configuration.set -> void
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.ExecuteAsync() -> System.Threading.Tasks.Task<bool>!
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.GeneratedArchiveFilePath.get -> string!
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.GeneratedArchiveFilePath.set -> void
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.Layers.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.Layers.set -> void
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.MakeContainerTarball() -> void
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.Manifest.get -> Microsoft.Build.Framework.ITaskItem!
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.Manifest.set -> void
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.Repository.get -> string!
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.Repository.set -> void
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.Tags.get -> string![]!
Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.Tags.set -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.Cancel() -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.Configuration.get -> Microsoft.Build.Framework.ITaskItem!
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.Configuration.set -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.ExecuteAsync() -> System.Threading.Tasks.Task<bool>!
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.Layers.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.Layers.set -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.LocalRegistry.get -> string?
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.LocalRegistry.set -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.Manifest.get -> Microsoft.Build.Framework.ITaskItem!
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.Manifest.set -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.PushContainerToLocal() -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.Repository.get -> string!
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.Repository.set -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.Tags.get -> string![]!
Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.Tags.set -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.Cancel() -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.Configuration.get -> Microsoft.Build.Framework.ITaskItem!
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.Configuration.set -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.ExecuteAsync() -> System.Threading.Tasks.Task<bool>!
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.Layers.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.Layers.set -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.Manifest.get -> Microsoft.Build.Framework.ITaskItem!
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.Manifest.set -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.PushContainerToRemoteRegistry() -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.Registry.get -> string!
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.Registry.set -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.Repository.get -> string!
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.Repository.set -> void
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.Tags.get -> string![]!
Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.Tags.set -> void
override Microsoft.NET.Build.Containers.Tasks.CreateImageIndex.Execute() -> bool
override Microsoft.NET.Build.Containers.Tasks.MakeContainerTarball.Execute() -> bool
override Microsoft.NET.Build.Containers.Tasks.PushContainerToLocal.Execute() -> bool
override Microsoft.NET.Build.Containers.Tasks.PushContainerToRemoteRegistry.Execute() -> bool
static readonly Microsoft.NET.Build.Containers.Constants.Version -> string!
Microsoft.NET.Build.Containers.ContainerHelpers
Microsoft.NET.Build.Containers.ContainerHelpers.ParsePortError
Microsoft.NET.Build.Containers.ContainerHelpers.ParsePortError.InvalidPortNumber = 2 -> Microsoft.NET.Build.Containers.ContainerHelpers.ParsePortError
Microsoft.NET.Build.Containers.ContainerHelpers.ParsePortError.InvalidPortType = 4 -> Microsoft.NET.Build.Containers.ContainerHelpers.ParsePortError
Microsoft.NET.Build.Containers.ContainerHelpers.ParsePortError.MissingPortNumber = 1 -> Microsoft.NET.Build.Containers.ContainerHelpers.ParsePortError
Microsoft.NET.Build.Containers.ContainerHelpers.ParsePortError.UnknownPortFormat = 8 -> Microsoft.NET.Build.Containers.ContainerHelpers.ParsePortError
Microsoft.NET.Build.Containers.Descriptor
Microsoft.NET.Build.Containers.Descriptor.Annotations.get -> System.Collections.Generic.Dictionary<string!, string?>?
Microsoft.NET.Build.Containers.Descriptor.Annotations.init -> void
Microsoft.NET.Build.Containers.Descriptor.Data.get -> string?
Microsoft.NET.Build.Containers.Descriptor.Data.init -> void
Microsoft.NET.Build.Containers.Descriptor.Descriptor() -> void
Microsoft.NET.Build.Containers.Descriptor.Digest.init -> void
Microsoft.NET.Build.Containers.Descriptor.MediaType.get -> string!
Microsoft.NET.Build.Containers.Descriptor.MediaType.init -> void
Microsoft.NET.Build.Containers.Descriptor.Size.get -> long
Microsoft.NET.Build.Containers.Descriptor.Size.init -> void
Microsoft.NET.Build.Containers.Descriptor.Urls.get -> string![]?
Microsoft.NET.Build.Containers.Descriptor.Urls.init -> void
Microsoft.NET.Build.Containers.KnownLocalRegistryTypes
Microsoft.NET.Build.Containers.ManifestListV2
Microsoft.NET.Build.Containers.ManifestListV2.ManifestListV2() -> void
Microsoft.NET.Build.Containers.ManifestListV2.ManifestListV2(int schemaVersion, string! mediaType, Microsoft.NET.Build.Containers.PlatformSpecificManifest[]! manifests) -> void
Microsoft.NET.Build.Containers.ManifestListV2.manifests.get -> Microsoft.NET.Build.Containers.PlatformSpecificManifest[]!
Microsoft.NET.Build.Containers.ManifestListV2.manifests.set -> void
Microsoft.NET.Build.Containers.ManifestListV2.mediaType.get -> string!
Microsoft.NET.Build.Containers.ManifestListV2.mediaType.set -> void
Microsoft.NET.Build.Containers.ManifestListV2.schemaVersion.get -> int
Microsoft.NET.Build.Containers.ManifestListV2.schemaVersion.set -> void
Microsoft.NET.Build.Containers.ImageIndexV1
Microsoft.NET.Build.Containers.ImageIndexV1.ImageIndexV1() -> void
Microsoft.NET.Build.Containers.ImageIndexV1.manifests.get -> Microsoft.NET.Build.Containers.PlatformSpecificOciManifest[]!
Microsoft.NET.Build.Containers.ImageIndexV1.manifests.set -> void
Microsoft.NET.Build.Containers.ImageIndexV1.mediaType.get -> string!
Microsoft.NET.Build.Containers.ImageIndexV1.mediaType.set -> void
Microsoft.NET.Build.Containers.ImageIndexV1.schemaVersion.get -> int
Microsoft.NET.Build.Containers.ImageIndexV1.schemaVersion.set -> void
Microsoft.NET.Build.Containers.ManifestV2
Microsoft.NET.Build.Containers.ManifestV2.Config.get -> Microsoft.NET.Build.Containers.Descriptor
Microsoft.NET.Build.Containers.ManifestV2.Config.set -> void
Microsoft.NET.Build.Containers.ManifestV2.KnownDigest.get -> Microsoft.NET.Build.Containers.Digest?
Microsoft.NET.Build.Containers.ManifestV2.KnownDigest.set -> void
Microsoft.NET.Build.Containers.ManifestV2.Layers.get -> System.Collections.Generic.List<Microsoft.NET.Build.Containers.Descriptor>!
Microsoft.NET.Build.Containers.ManifestV2.Layers.init -> void
Microsoft.NET.Build.Containers.ManifestV2.ManifestV2() -> void
Microsoft.NET.Build.Containers.ManifestV2.MediaType.get -> string?
Microsoft.NET.Build.Containers.ManifestV2.MediaType.set -> void
Microsoft.NET.Build.Containers.ManifestV2.SchemaVersion.get -> int
Microsoft.NET.Build.Containers.ManifestV2.SchemaVersion.init -> void
Microsoft.NET.Build.Containers.PlatformInformation
Microsoft.NET.Build.Containers.PlatformInformation.architecture.get -> string!
Microsoft.NET.Build.Containers.PlatformInformation.architecture.set -> void
Microsoft.NET.Build.Containers.PlatformInformation.features.set -> void
Microsoft.NET.Build.Containers.PlatformInformation.os.get -> string!
Microsoft.NET.Build.Containers.PlatformInformation.os.set -> void
Microsoft.NET.Build.Containers.PlatformInformation.PlatformInformation() -> void
Microsoft.NET.Build.Containers.PlatformInformation.variant.get -> string?
Microsoft.NET.Build.Containers.PlatformInformation.variant.set -> void
Microsoft.NET.Build.Containers.PlatformSpecificManifest
Microsoft.NET.Build.Containers.PlatformSpecificManifest.digest.set -> void
Microsoft.NET.Build.Containers.PlatformSpecificManifest.mediaType.get -> string!
Microsoft.NET.Build.Containers.PlatformSpecificManifest.mediaType.set -> void
Microsoft.NET.Build.Containers.PlatformSpecificManifest.platform.set -> void
Microsoft.NET.Build.Containers.PlatformSpecificManifest.PlatformSpecificManifest() -> void
Microsoft.NET.Build.Containers.PlatformSpecificManifest.size.get -> long
Microsoft.NET.Build.Containers.PlatformSpecificManifest.size.set -> void
Microsoft.NET.Build.Containers.PlatformSpecificOciManifest
Microsoft.NET.Build.Containers.PlatformSpecificOciManifest.digest.set -> void
Microsoft.NET.Build.Containers.PlatformSpecificOciManifest.mediaType.get -> string!
Microsoft.NET.Build.Containers.PlatformSpecificOciManifest.mediaType.set -> void
Microsoft.NET.Build.Containers.PlatformSpecificOciManifest.platform.set -> void
Microsoft.NET.Build.Containers.PlatformSpecificOciManifest.size.get -> long
Microsoft.NET.Build.Containers.PlatformSpecificOciManifest.size.set -> void
Microsoft.NET.Build.Containers.PlatformSpecificOciManifest.PlatformSpecificOciManifest() -> void
Microsoft.NET.Build.Containers.PlatformSpecificOciManifest.annotations.set -> void
Microsoft.NET.Build.Containers.Port
Microsoft.NET.Build.Containers.Port.Deconstruct(out int Number, out Microsoft.NET.Build.Containers.PortType Type) -> void
Microsoft.NET.Build.Containers.Port.Equals(Microsoft.NET.Build.Containers.Port other) -> bool
Microsoft.NET.Build.Containers.Port.Number.get -> int
Microsoft.NET.Build.Containers.Port.Number.set -> void
Microsoft.NET.Build.Containers.Port.Port() -> void
Microsoft.NET.Build.Containers.Port.Port(int Number, Microsoft.NET.Build.Containers.PortType Type) -> void
Microsoft.NET.Build.Containers.Port.Type.get -> Microsoft.NET.Build.Containers.PortType
Microsoft.NET.Build.Containers.Port.Type.set -> void
~override Microsoft.NET.Build.Containers.Port.ToString() -> string
static Microsoft.NET.Build.Containers.Port.operator !=(Microsoft.NET.Build.Containers.Port left, Microsoft.NET.Build.Containers.Port right) -> bool
static Microsoft.NET.Build.Containers.Port.operator ==(Microsoft.NET.Build.Containers.Port left, Microsoft.NET.Build.Containers.Port right) -> bool
override Microsoft.NET.Build.Containers.Port.GetHashCode() -> int
~override Microsoft.NET.Build.Containers.Port.Equals(object obj) -> bool
Microsoft.NET.Build.Containers.PortType
Microsoft.NET.Build.Containers.PortType.tcp = 0 -> Microsoft.NET.Build.Containers.PortType
Microsoft.NET.Build.Containers.PortType.udp = 1 -> Microsoft.NET.Build.Containers.PortType
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.ComputeDotnetBaseImageAndTag() -> void
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.ContainerFamily.set -> void
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.SdkVersion.get -> string!
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.SdkVersion.set -> void
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.TargetFrameworkVersion.get -> string!
Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.TargetFrameworkVersion.set -> void
override Microsoft.NET.Build.Containers.Tasks.ComputeDotnetBaseImageAndTag.Execute() -> bool
Microsoft.NET.Build.Containers.Tasks.CreateNewImage
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.BaseImageName.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.BaseImageName.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.BaseImageTag.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.BaseImageTag.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.BaseImageDigest.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.BaseImageDigest.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.BaseRegistry.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.BaseRegistry.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.BaseImageConfigurationPath.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.BaseImageConfigurationPath.get -> Microsoft.Build.Framework.ITaskItem!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.BaseImageManifestPath.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.BaseImageManifestPath.get -> Microsoft.Build.Framework.ITaskItem!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.Cancel() -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.ContainerEnvironmentVariables.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.ContainerEnvironmentVariables.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.ContainerUser.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.ContainerUser.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.ContentStoreRoot.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.ContentStoreRoot.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.CreateNewImage() -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.Dispose() -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.Entrypoint.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.Entrypoint.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.EntrypointArgs.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.EntrypointArgs.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.DefaultArgs.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.DefaultArgs.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.AppCommand.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.AppCommand.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.AppCommandArgs.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.AppCommandArgs.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.AppCommandInstruction.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.AppCommandInstruction.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.ExposedPorts.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.ExposedPorts.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedContainerConfiguration.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedContainerConfiguration.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedContainerManifest.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedContainerManifest.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedContainerDigest.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedContainerDigest.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedArchiveOutputPath.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedArchiveOutputPath.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedContainerMediaType.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedContainerMediaType.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.Repository.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.Repository.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.ImageTags.get -> string![]!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.ImageTags.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.Labels.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.Labels.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.LocalRegistry.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.LocalRegistry.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.OutputRegistry.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.OutputRegistry.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.ArchiveOutputPath.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.ArchiveOutputPath.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.WorkingDirectory.get -> string!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.WorkingDirectory.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GenerateLabels.get -> bool
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GenerateLabels.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GenerateDigestLabel.get -> bool
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GenerateDigestLabel.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedContainerNames.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedContainerNames.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.ImageFormat.get -> string?
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.ImageFormat.set -> void
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedDigestLabel.get -> Microsoft.Build.Framework.ITaskItem?
Microsoft.NET.Build.Containers.Tasks.CreateNewImage.GeneratedDigestLabel.set -> void
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.ContainerEnvironmentVariables.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.ContainerEnvironmentVariables.set -> void
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.ContainerRepository.get -> string!
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.ContainerRepository.set -> void
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.ContainerImageTag.get -> string!
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.ContainerImageTag.set -> void
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.ContainerImageTags.get -> string![]!
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.ContainerImageTags.set -> void
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.ContainerRegistry.get -> string!
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.ContainerRegistry.set -> void
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.FullyQualifiedBaseImageName.get -> string!
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.FullyQualifiedBaseImageName.set -> void
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.NewContainerEnvironmentVariables.get -> Microsoft.Build.Framework.ITaskItem![]!
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.NewContainerRepository.get -> string!
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.NewContainerRegistry.get -> string!
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.NewContainerTags.get -> string![]!
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.ParseContainerProperties() -> void
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.ParsedContainerImage.get -> string!
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.ParsedContainerRegistry.get -> string!
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.ParsedContainerTag.get -> string!
Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.ParsedContainerDigest.get -> string!
override Microsoft.NET.Build.Containers.Tasks.CreateNewImage.Execute() -> bool
override Microsoft.NET.Build.Containers.Tasks.ParseContainerProperties.Execute() -> bool
static Microsoft.NET.Build.Containers.ContainerHelpers.TryParsePort(string! input, out Microsoft.NET.Build.Containers.Port? port, out Microsoft.NET.Build.Containers.ContainerHelpers.ParsePortError? error) -> bool
static Microsoft.NET.Build.Containers.ContainerHelpers.TryParsePort(string? portNumber, string? portType, out Microsoft.NET.Build.Containers.Port? port, out Microsoft.NET.Build.Containers.ContainerHelpers.ParsePortError? error) -> bool
static readonly Microsoft.NET.Build.Containers.KnownLocalRegistryTypes.SupportedLocalRegistryTypes -> string![]!
~override Microsoft.NET.Build.Containers.PlatformInformation.ToString() -> string
~override Microsoft.NET.Build.Containers.PlatformSpecificManifest.ToString() -> string
~override Microsoft.NET.Build.Containers.PlatformSpecificOciManifest.ToString() -> string
static Microsoft.NET.Build.Containers.PlatformInformation.operator !=(Microsoft.NET.Build.Containers.PlatformInformation left, Microsoft.NET.Build.Containers.PlatformInformation right) -> bool
static Microsoft.NET.Build.Containers.PlatformSpecificManifest.operator !=(Microsoft.NET.Build.Containers.PlatformSpecificManifest left, Microsoft.NET.Build.Containers.PlatformSpecificManifest right) -> bool
static Microsoft.NET.Build.Containers.PlatformSpecificOciManifest.operator !=(Microsoft.NET.Build.Containers.PlatformSpecificOciManifest left, Microsoft.NET.Build.Containers.PlatformSpecificOciManifest right) -> bool
static Microsoft.NET.Build.Containers.PlatformInformation.operator ==(Microsoft.NET.Build.Containers.PlatformInformation left, Microsoft.NET.Build.Containers.PlatformInformation right) -> bool
static Microsoft.NET.Build.Containers.PlatformSpecificManifest.operator ==(Microsoft.NET.Build.Containers.PlatformSpecificManifest left, Microsoft.NET.Build.Containers.PlatformSpecificManifest right) -> bool
static Microsoft.NET.Build.Containers.PlatformSpecificOciManifest.operator ==(Microsoft.NET.Build.Containers.PlatformSpecificOciManifest left, Microsoft.NET.Build.Containers.PlatformSpecificOciManifest right) -> bool
override Microsoft.NET.Build.Containers.PlatformInformation.GetHashCode() -> int
override Microsoft.NET.Build.Containers.PlatformSpecificManifest.GetHashCode() -> int
override Microsoft.NET.Build.Containers.PlatformSpecificOciManifest.GetHashCode() -> int
~override Microsoft.NET.Build.Containers.PlatformInformation.Equals(object obj) -> bool
~override Microsoft.NET.Build.Containers.Descriptor.ToString() -> string
~override Microsoft.NET.Build.Containers.PlatformSpecificManifest.Equals(object obj) -> bool
~override Microsoft.NET.Build.Containers.PlatformSpecificOciManifest.Equals(object obj) -> bool
Microsoft.NET.Build.Containers.PlatformInformation.Equals(Microsoft.NET.Build.Containers.PlatformInformation other) -> bool
Microsoft.NET.Build.Containers.PlatformSpecificManifest.Equals(Microsoft.NET.Build.Containers.PlatformSpecificManifest other) -> bool
Microsoft.NET.Build.Containers.PlatformSpecificOciManifest.Equals(Microsoft.NET.Build.Containers.PlatformSpecificOciManifest other) -> bool
static Microsoft.NET.Build.Containers.Descriptor.operator !=(Microsoft.NET.Build.Containers.Descriptor left, Microsoft.NET.Build.Containers.Descriptor right) -> bool
static Microsoft.NET.Build.Containers.Descriptor.operator ==(Microsoft.NET.Build.Containers.Descriptor left, Microsoft.NET.Build.Containers.Descriptor right) -> bool
override Microsoft.NET.Build.Containers.Descriptor.GetHashCode() -> int
~override Microsoft.NET.Build.Containers.Descriptor.Equals(object obj) -> bool
Microsoft.NET.Build.Containers.Descriptor.Equals(Microsoft.NET.Build.Containers.Descriptor other) -> bool
~override Microsoft.NET.Build.Containers.ManifestListV2.ToString() -> string
static Microsoft.NET.Build.Containers.ManifestListV2.operator !=(Microsoft.NET.Build.Containers.ManifestListV2 left, Microsoft.NET.Build.Containers.ManifestListV2 right) -> bool
static Microsoft.NET.Build.Containers.ManifestListV2.operator ==(Microsoft.NET.Build.Containers.ManifestListV2 left, Microsoft.NET.Build.Containers.ManifestListV2 right) -> bool
override Microsoft.NET.Build.Containers.ManifestListV2.GetHashCode() -> int
~override Microsoft.NET.Build.Containers.ManifestListV2.Equals(object obj) -> bool
Microsoft.NET.Build.Containers.ManifestListV2.Equals(Microsoft.NET.Build.Containers.ManifestListV2 other) -> bool
Microsoft.NET.Build.Containers.ManifestListV2.Deconstruct(out int schemaVersion, out string! mediaType, out Microsoft.NET.Build.Containers.PlatformSpecificManifest[]! manifests) -> void
~override Microsoft.NET.Build.Containers.ImageIndexV1.ToString() -> string
static Microsoft.NET.Build.Containers.ImageIndexV1.operator !=(Microsoft.NET.Build.Containers.ImageIndexV1 left, Microsoft.NET.Build.Containers.ImageIndexV1 right) -> bool
static Microsoft.NET.Build.Containers.ImageIndexV1.operator ==(Microsoft.NET.Build.Containers.ImageIndexV1 left, Microsoft.NET.Build.Containers.ImageIndexV1 right) -> bool
override Microsoft.NET.Build.Containers.ImageIndexV1.GetHashCode() -> int
~override Microsoft.NET.Build.Containers.ImageIndexV1.Equals(object obj) -> bool
Microsoft.NET.Build.Containers.ImageIndexV1.Equals(Microsoft.NET.Build.Containers.ImageIndexV1 other) -> bool