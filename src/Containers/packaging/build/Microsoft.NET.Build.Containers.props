<Project>
    <PropertyGroup>
         <!-- A flag representing this package existing in a project.  -->
        <SDKContainerSupportEnabled>true</SDKContainerSupportEnabled>
        <ContainerTaskFolderName>tasks</ContainerTaskFolderName>
        <ContainerizeFolderName>containerize</ContainerizeFolderName>
        <!--The folder where the custom task will be present. It points to inside the nuget package. -->
        <ContainerCustomTasksFolder>$(MSBuildThisFileDirectory)..\$(ContainerTaskFolderName)\</ContainerCustomTasksFolder>
        <ContainerizeFolder>$(MSBuildThisFileDirectory)..\$(ContainerizeFolderName)\</ContainerizeFolder>
        <!--Reference to the assembly which contains the MSBuild Task-->
        <ContainerCustomTasksAssemblyFramework Condition="'$(ContainerCustomTasksAssembly)' == ''">$(ContainerCustomTasksFolder)net472\$(MSBuildThisFileName).dll</ContainerCustomTasksAssemblyFramework>
        <ContainerCustomTasksAssemblyNet Condition="'$(ContainerCustomTasksAssembly)' == ''">$(ContainerCustomTasksFolder)net10.0\$(MSBuildThisFileName).dll</ContainerCustomTasksAssemblyNet>
    </PropertyGroup>

    <!--Register our custom task-->
    <UsingTask TaskName="$(MSBuildThisFileName).Tasks.CreateNewImage" AssemblyFile="$(ContainerCustomTasksAssemblyNet)" Runtime="NET" TaskFactory="TaskHostFactory" />
    <UsingTask TaskName="$(MSBuildThisFileName).Tasks.CreateImageIndex" AssemblyFile="$(ContainerCustomTasksAssemblyNet)" Runtime="NET" TaskFactory="TaskHostFactory" />
    <UsingTask TaskName="$(MSBuildThisFileName).Tasks.ParseContainerProperties" AssemblyFile="$(ContainerCustomTasksAssemblyNet)" Runtime="NET" TaskFactory="TaskHostFactory" />
    <UsingTask TaskName="$(MSBuildThisFileName).Tasks.ComputeDotnetBaseImageAndTag" AssemblyFile="$(ContainerCustomTasksAssemblyNet)" Runtime="NET" TaskFactory="TaskHostFactory" />
</Project>
