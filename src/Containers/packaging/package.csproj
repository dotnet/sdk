<Project Sdk="Microsoft.Build.NoTargets">
    <PropertyGroup>
        <TargetFramework>$(SdkTargetFramework)</TargetFramework>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <IsPackable>true</IsPackable>
        <IsShipping>true</IsShipping>
        <IsShippingPackage>true</IsShippingPackage>
        <NoWarn>NU5100;NU5128</NoWarn>
        <VSCompatTargetFramework>net472</VSCompatTargetFramework>

        <!-- MSBuild tasks shouldn't be referenced. This is by design. -->
        <NoWarn>NU5100;NU5128;NU1507</NoWarn>
        <Authors>Microsoft</Authors>
        <Company>Microsoft</Company>
        <PackageId>Microsoft.NET.Build.Containers</PackageId>
        <Description>Tasks and targets to natively publish .NET applications as containers.</Description>
        <Copyright>&#169; Microsoft Corporation. All rights reserved.</Copyright>
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <PackageProjectUrl>https://github.com/dotnet/sdk-container-builds</PackageProjectUrl>
        <RepositoryUrl>https://github.com/dotnet/sdk-container-builds</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
        <PackageTags>containers;docker;Microsoft.NET.Build.Containers</PackageTags>
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);PreparePackageReleaseNotesFromFile;AddItemsForPackaging;$(GenerateNuspecDependsOn);</TargetsForTfmSpecificContentInPackage>
    </PropertyGroup>

    <ItemGroup>
        <ProjectReference Include="../Microsoft.NET.Build.Containers/Microsoft.NET.Build.Containers.csproj"
                          SetTargetFramework="TargetFramework=$(SdkTargetFramework)"
                          OutputItemType="ContainerLibraryOutput"/>

        <ProjectReference Include="../../Cli/Microsoft.DotNet.Cli.Utils/Microsoft.DotNet.Cli.Utils.csproj"
                          SetTargetFramework="TargetFramework=$(ResolverTargetFramework)"
                          OutputItemType="DotNetCliUtilsLibraryOutput"/>

        <ProjectReference Include="../Microsoft.NET.Build.Containers/Microsoft.NET.Build.Containers.csproj"
                          SetTargetFramework="TargetFramework=$(VSCompatTargetFramework)"
                          OutputItemType="ContainerLibraryOutputNet472"
                          Condition="'$(DotNetBuildSourceOnly)' != 'true'" />

        <ProjectReference Include="../containerize/containerize.csproj"
                          PrivateAssets="all"
                          IncludeAssets="runtime"
                          ReferenceOutputAssembly="true"
                          OutputItemType="ContainerizeBinaryOutput"
                          Condition="'$(DotNetBuildSourceOnly)' != 'true'" />
    </ItemGroup>

    <ItemGroup>
      <!-- These things are static, just always include them-->
      <Content Include="README.md" Pack="true" PackagePath="" />
      <Content Include="build/**" Pack="true" PackagePath="build/" />
    </ItemGroup>

    <Target Name="PreparePackageReleaseNotesFromFile">
      <PropertyGroup>
        <PackageReleaseNotesFile>../docs/ReleaseNotes/v8.0.300.md</PackageReleaseNotesFile>
        <PackageReleaseNotes>$([System.IO.File]::ReadAllText($(PackageReleaseNotesFile)))</PackageReleaseNotes>
      </PropertyGroup>
    </Target>

    <!-- We need to depend on ResolveProjectReferences so that the 'OutputItemTypes' from the ProjectReferences above are populated.
         `dotnet build` + GeneratePackageOnBuild does that automatically, but
         `dotnet pack` + GeneratePackageOnBuild does not (because that would be an inifite loop) -->
    <Target Name="AddItemsForPackaging" DependsOnTargets="ResolveProjectReferences">
      <!-- build the containerize folder with the containerize binary and its dependencies -->
      <MSBuild Projects="../containerize/containerize.csproj" Targets="ResolveAssemblyReferences" Condition="'$(DotNetBuildSourceOnly)' != 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_AllContainerExeDependencies" />
      </MSBuild>
      <MSBuild Projects="../containerize/containerize.csproj" Targets="GetCopyToOutputDirectoryItems" Condition="'$(DotNetBuildSourceOnly)' != 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="ContainerizeBinaryOutput" />
      </MSBuild>
      <ItemGroup Condition="'$(DotNetBuildSourceOnly)' != 'true'">
        <NecessaryContainerizeBinaryDependencies Include="@(_AllContainerExeDependencies)"
                                                 Condition="'%(_AllContainerExeDependencies.FrameworkReferenceName)' == ''" />
        <_ContainerizeBinaryDependency Include="@(NecessaryContainerizeBinaryDependencies)" />
        <_ContainerizeBinaryDependency Include="@(ContainerizeBinaryOutput)" />
        <TfmSpecificPackageFile Include="@(_ContainerizeBinaryDependency)" PackagePath="containerize/" />
      </ItemGroup>

      <!-- build the VS Task directory from the Tasks project built for net472 -->
      <MSBuild Projects="../Microsoft.NET.Build.Containers/Microsoft.NET.Build.Containers.csproj" Properties="TargetFramework=$(VSCompatTargetFramework)" Targets="ResolveAssemblyReferences" Condition="'$(DotNetBuildSourceOnly)' != 'true'">
            <Output TaskParameter="TargetOutputs" ItemName="_AllNet472ContainerTaskDependencies" />
      </MSBuild>
      <ItemGroup Condition="'$(DotNetBuildSourceOnly)' != 'true'">
          <NecessaryNet472ContainerTaskDependencies Include="@(_AllNet472ContainerTaskDependencies)" Condition="(
                              $([MSBuild]::ValueOrDefault('%(_AllNet472ContainerTaskDependencies.NuGetPackageId)', '').Contains('NuGet')) or
                              $([MSBuild]::ValueOrDefault('%(_AllNet472ContainerTaskDependencies.NuGetPackageId)', '').Contains('Newtonsoft')) or
                              $([MSBuild]::ValueOrDefault('%(_AllNet472ContainerTaskDependencies.NuGetPackageId)', '').Contains('Microsoft.Extensions'))
                          ) and
                          %(_AllNet472ContainerTaskDependencies.NuGetIsFrameworkReference) != true" />
          <_ContainerTaskFrameworkDependency Include="@(NecessaryNet472ContainerTaskDependencies)" PackagePath="tasks/$(VSCompatTargetFramework)/" />
          <_ContainerTaskFrameworkDependency Include="@(ContainerLibraryOutputNet472)" PackagePath="tasks/$(VSCompatTargetFramework)/" />
          <TfmSpecificPackageFile Include="@(_ContainerTaskFrameworkDependency)" PackagePath="tasks/$(VSCompatTargetFramework)/" />
      </ItemGroup>

      <!-- build the CLI Task directory from the Tasks project build for the netcore TFM -->
      <MSBuild Projects="../Microsoft.NET.Build.Containers/Microsoft.NET.Build.Containers.csproj" Properties="TargetFramework=$(SdkTargetFramework)" Targets="ResolveAssemblyReferences">
          <Output TaskParameter="TargetOutputs" ItemName="_AllNetContainerTaskDependencies" />
      </MSBuild>
      <ItemGroup>
            <NecessaryNetContainerTaskDependencies Include="@(_AllNetContainerTaskDependencies)" Condition="(
                              $([MSBuild]::ValueOrDefault('%(_AllNetContainerTaskDependencies.NuGetPackageId)', '').Contains('NuGet')) or
                              $([MSBuild]::ValueOrDefault('%(_AllNetContainerTaskDependencies.NuGetPackageId)', '').Contains('Newtonsoft')) or
                              $([MSBuild]::ValueOrDefault('%(_AllNetContainerTaskDependencies.NuGetPackageId)', '').Contains('Valleysoft')) or
                              $([MSBuild]::ValueOrDefault('%(_AllNetContainerTaskDependencies.NuGetPackageId)', '').Contains('Microsoft.Extensions'))
                          ) and
                          %(_AllNetContainerTaskDependencies.NuGetIsFrameworkReference) != true" />

          <_ContainerTaskCoreDependency Include="@(NecessaryNetContainerTaskDependencies)" />
          <_ContainerTaskCoreDependency Include="@(DotNetCliUtilsLibraryOutput)" />
          <_ContainerTaskCoreDependency Include="$(ArtifactsDir)bin/Microsoft.NET.Build.Containers/$(Configuration)/$(SdkTargetFramework)/Microsoft.NET.Build.Containers.deps.json" />
          <_ContainerTaskCoreDependency Include="@(ContainerLibraryOutput)" />
          <TfmSpecificPackageFile Include="@(_ContainerTaskCoreDependency)" PackagePath="tasks/$(SdkTargetFramework)/" />
      </ItemGroup>
    </Target>

    <!-- Hacky workaround for the fact that we don't publish the package yet. -->
    <Target Name="CopyNupkgToCustomFolder" AfterTargets="Pack">
        <Copy SourceFiles="$(ArtifactsDir)packages/$(Configuration)/Shipping/Microsoft.NET.Build.Containers.$(Version).nupkg"
            DestinationFiles="$(ArtifactsTmpDir)Container/package/Microsoft.NET.Build.Containers.$(Version).nupkg" />
    </Target>

    <!-- Copy files that are needed by Integration tests. -->
    <Target Name="CopyPropsAndTargets" AfterTargets="Pack">
      <Copy SourceFiles="./build/Microsoft.NET.Build.Containers.props"
          DestinationFiles="$(ArtifactsTmpDir)Container/packaging/Microsoft.NET.Build.Containers.props" />
      <Copy SourceFiles="./build/Microsoft.NET.Build.Containers.targets"
          DestinationFiles="$(ArtifactsTmpDir)Container/packaging/Microsoft.NET.Build.Containers.targets" />
    </Target>
</Project>
