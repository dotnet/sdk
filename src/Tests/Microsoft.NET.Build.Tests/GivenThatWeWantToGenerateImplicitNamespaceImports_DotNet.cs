// Copyright (c) .NET Foundation and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System.IO;
using System.Linq;
using System.Xml.Linq;
using FluentAssertions;
using Microsoft.NET.TestFramework;
using Microsoft.NET.TestFramework.Assertions;
using Microsoft.NET.TestFramework.Commands;
using Xunit;
using Xunit.Abstractions;

namespace Microsoft.NET.Build.Tests
{
    public class GivenThatWeWantToGenerateImplicitNamespaceImports_DotNet : SdkTest
    {
        private const string _testProjectName = "TestConsoleApp";
        private const string _importFileName = "ConsoleApp.ImplicitNamespaceImports.cs";

        public GivenThatWeWantToGenerateImplicitNamespaceImports_DotNet(ITestOutputHelper log) : base(log) { }

        [Fact]
        public void It_generates_imports_and_builds_successfully()
        {
            var tfm = "net6.0";
            var testAsset = _testAssetsManager
                .CopyTestAsset(_testProjectName)
                .WithSource()
                .WithTargetFramework(tfm);

            var buildCommand = new BuildCommand(testAsset);
            buildCommand
                .Execute()
                .Should()
                .Pass();

            var outputDirectory = buildCommand.GetIntermediateDirectory(tfm);

            outputDirectory.Should().HaveFile(_importFileName);

            File.ReadAllText(Path.Combine(outputDirectory.FullName, _importFileName)).Should().Be(
@"// <autogenerated />
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading.Tasks;
");
        }

        [Fact]
        public void It_can_disable_dotnet_imports()
        {
            var tfm = "net6.0";
            var testAsset = _testAssetsManager
                .CopyTestAsset(_testProjectName)
                .WithSource()
                .WithTargetFramework(tfm)
                .WithProjectChanges(p =>
                {
                    var ns = p.Root.Name.Namespace;
                    var propertyGroup = p.Root.Elements(ns + "PropertyGroup").First();
                    propertyGroup.Add(new XElement(ns + "DisableImplicitNamespaceImports_DotNet", "true"));
                });

            var buildCommand = new BuildCommand(testAsset);
            buildCommand
                .Execute()
                .Should()
                .Fail();

            var outputDirectory = buildCommand.GetIntermediateDirectory(tfm);

            outputDirectory.Should().NotHaveFile(_importFileName);
        }

        [Fact]
        public void It_can_generate_custom_imports()
        {
            var tfm = "net6.0";
            var testAsset = _testAssetsManager
                .CopyTestAsset(_testProjectName)
                .WithSource()
                .WithTargetFramework(tfm)
                .WithProjectChanges(p =>
                {
                    var ns = p.Root.Name.Namespace;
                    var propertyGroup = p.Root.Elements(ns + "PropertyGroup").First();
                    propertyGroup.Add(new XElement(ns + "DisableImplicitNamespaceImports_DotNet", "true"));
                    var importElement = new XElement("Import");
                    importElement.SetAttributeValue("Include", "CustomNamespace");
                    p.Root.Add(new XElement("ItemGroup", importElement));
                });

            var buildCommand = new BuildCommand(testAsset);
            buildCommand
                .Execute()
                .Should()
                .Fail();

            var outputDirectory = buildCommand.GetIntermediateDirectory(tfm);

            outputDirectory.Should().HaveFile(_importFileName);

            File.ReadAllText(Path.Combine(outputDirectory.FullName, _importFileName)).Should().Be(
@"// <autogenerated />
global using global::CustomNamespace;
");
        }

        [Fact]
        public void It_ignores_duplicate_imports()
        {
            var tfm = "net6.0";
            var testAsset = _testAssetsManager
                .CopyTestAsset(_testProjectName)
                .WithSource()
                .WithTargetFramework(tfm)
                .WithProjectChanges(p =>
                {
                    var ns = p.Root.Name.Namespace;
                    var propertyGroup = p.Root.Elements(ns + "PropertyGroup").First();
                    propertyGroup.Add(new XElement(ns + "DisableImplicitNamespaceImports_DotNet", "true"));
                    var importElement = new XElement("Import");
                    importElement.SetAttributeValue("Include", "CustomNamespace");
                    var itemGroup = new XElement("ItemGroup");
                    itemGroup.Add(importElement);
                    itemGroup.Add(importElement);
                    p.Root.Add(itemGroup);
                });

            var buildCommand = new BuildCommand(testAsset);
            buildCommand
                .Execute()
                .Should()
                .Fail();

            var outputDirectory = buildCommand.GetIntermediateDirectory(tfm);

            outputDirectory.Should().HaveFile(_importFileName);

            File.ReadAllText(Path.Combine(outputDirectory.FullName, _importFileName)).Should().Be(
@"// <autogenerated />
global using global::CustomNamespace;
");
        }

        [Fact]
        public void It_can_disable_import_generation()
        {
            var tfm = "net6.0";
            var testAsset = _testAssetsManager
                .CopyTestAsset(_testProjectName)
                .WithSource()
                .WithTargetFramework(tfm)
                .WithProjectChanges(p =>
                {
                    var ns = p.Root.Name.Namespace;
                    var propertyGroup = p.Root.Elements(ns + "PropertyGroup").First();
                    propertyGroup.Add(new XElement(ns + "DisableImplicitNamespaceImports", "true"));
                });

            var buildCommand = new BuildCommand(testAsset);
            buildCommand
                .Execute()
                .Should()
                .Fail();

            var outputDirectory = buildCommand.GetIntermediateDirectory(tfm);

            outputDirectory.Should().NotHaveFile(_importFileName);
        }

        [Fact]
        public void It_ignores_invalid_tfms()
        {
            var tfm = "net5.0";
            var testAsset = _testAssetsManager
                .CopyTestAsset(_testProjectName)
                .WithSource()
                .WithTargetFramework(tfm);

            var buildCommand = new BuildCommand(testAsset);
            buildCommand
                .Execute()
                .Should()
                .Fail();

            var outputDirectory = buildCommand.GetIntermediateDirectory(tfm);

            outputDirectory.Should().NotHaveFile(_importFileName);
        }
    }
}
