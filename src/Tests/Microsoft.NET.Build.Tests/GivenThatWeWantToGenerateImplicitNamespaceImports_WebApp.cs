// Copyright (c) .NET Foundation and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System.IO;
using System.Linq;
using System.Xml.Linq;
using FluentAssertions;
using Microsoft.NET.TestFramework;
using Microsoft.NET.TestFramework.Assertions;
using Microsoft.NET.TestFramework.Commands;
using Xunit;
using Xunit.Abstractions;

namespace Microsoft.NET.Build.Tests
{
    public class GivenThatWeWantToGenerateImplicitNamespaceImports_WebApp : SdkTest
    {
        private const string _testProjectName = "TestEmptyWebApp";
        private const string _importFileName = "EmptyWebApp.ImplicitNamespaceImports.cs";

        public GivenThatWeWantToGenerateImplicitNamespaceImports_WebApp(ITestOutputHelper log) : base(log) { }

        [Fact]
        public void It_generates_imports_and_builds_successfully()
        {
            var tfm = "net6.0";
            var testAsset = _testAssetsManager
                .CopyTestAsset(_testProjectName)
                .WithSource()
                .WithTargetFramework(tfm);

            var buildCommand = new BuildCommand(testAsset);
            buildCommand
                .Execute()
                .Should()
                .Pass();

            var outputDirectory = buildCommand.GetIntermediateDirectory(tfm);

            outputDirectory.Should().HaveFile(_importFileName);

            File.ReadAllText(Path.Combine(outputDirectory.FullName, _importFileName)).Should().Be(
@"// <autogenerated />
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::System.Net.Http.Json;
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
");
        }

        [Fact]
        public void It_can_disable_web_imports()
        {
            var tfm = "net6.0";
            var testAsset = _testAssetsManager
                .CopyTestAsset(_testProjectName)
                .WithSource()
                .WithTargetFramework(tfm)
                .WithProjectChanges(p =>
                {
                    var ns = p.Root.Name.Namespace;
                    var propertyGroup = p.Root.Elements(ns + "PropertyGroup").First();
                    propertyGroup.Add(new XElement(ns + "DisableImplicitNamespaceImports_Web", "true"));
                });

            var buildCommand = new BuildCommand(testAsset);
            buildCommand
                .Execute()
                .Should()
                .Fail();

            var outputDirectory = buildCommand.GetIntermediateDirectory(tfm);

            outputDirectory.Should().HaveFile(_importFileName);

            File.ReadAllText(Path.Combine(outputDirectory.FullName, _importFileName)).Should().Be(
@"// <autogenerated />
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
");
        }
    }
}
