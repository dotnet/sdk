<Project Sdk="Microsoft.NET.Sdk" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFramework>$(ToolsetTargetFramework)</TargetFramework>
    <GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>
    <StrongNameKeyId>MicrosoftAspNetCore</StrongNameKeyId>
    <CanRunTestAsTool>false</CanRunTestAsTool>
    
    <!-- Use layout folder for the output folder, to support in-process tests which expect to be running
         on a valid layout. -->
    <OutputPath>$(ArtifactsBinDir)redist\$(Configuration)</OutputPath>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
  </PropertyGroup>

  <ItemGroup>
    
    <Compile Include="..\dotnet-list-package.Tests\**\*.cs" LinkBase="dotnet-list-package" />


    <None Include="..\Microsoft.DotNet.ShellShim.Tests\WpfBinaryTestAsssets\testwpf.dll" LinkBase="WpfBinaryTestAsssets">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>

    <None Update="CollectCodeCoverage.runsettings">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>

    <None Update="queryResultSample.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <ItemGroup>
    <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
      <_Parameter1>MSTestVersion</_Parameter1>
      <_Parameter2>$(MSTestVersion)</_Parameter2>
    </AssemblyAttribute>
    <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
      <_Parameter1>MicrosoftNETTestSdkPackageVersion</_Parameter1>
      <_Parameter2>$(MicrosoftNETTestSdkPackageVersion)</_Parameter2>
    </AssemblyAttribute>
    <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
      <_Parameter1>XUnitVersion</_Parameter1>
      <_Parameter2>$(XUnitVersion)</_Parameter2>
    </AssemblyAttribute>
    <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
      <_Parameter1>SdkVersion</_Parameter1>
      <_Parameter2>$(Version)</_Parameter2>
    </AssemblyAttribute>
  </ItemGroup>

  <!--<ItemGroup>
    <Content Include="..\..\TestAssets\TestProjects\AppWithToolDependency\**\*">
      <Link>TestAssets/TestProjects/AppWithToolDependency/%(RecursiveDir)%(Filename)%(Extension)</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
    </Content>
    <Content Include="..\..\TestAssets\TestProjects\DependencyContextFromTool\**\*">
      <Link>TestAssets/TestProjects/DependencyContextFromTool/%(RecursiveDir)%(Filename)%(Extension)</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
    </Content>
  </ItemGroup>-->
  
  <!--<Target Name="WriteExpectedVersion"
          BeforeTargets="BeforeBuild"
          DependsOnTargets="PrepareForBuild">

    <PropertyGroup>
      <ExpectedVersionFileInIntermediateFolder>$(IntermediateOutputPath)ExpectedSdkVersion.txt</ExpectedVersionFileInIntermediateFolder>
      
      <VersionFileContent>$(DotNetCoreSdkLKGVersion)</VersionFileContent>
      <ExistingVersionFileContent Condition=" Exists('$(ExpectedVersionFileInIntermediateFolder)') ">
        $([System.IO.File]::ReadAllText($(ExpectedVersionFileInIntermediateFolder)))
      </ExistingVersionFileContent>

      <ShouldOverwriteVersionFile>false</ShouldOverwriteVersionFile>
      <ShouldOverwriteVersionFile
        Condition=" '$(ExistingVersionFileContent.Trim())' != '$(VersionFileContent.Trim())' ">true</ShouldOverwriteVersionFile>
    </PropertyGroup>
    
    <WriteLinesToFile File="$(ExpectedVersionFileInIntermediateFolder)"
                      Lines="$(VersionFileContent)"
                      Condition=" '$(ShouldOverwriteVersionFile)' == 'true' "
                      Overwrite="true" />

    <ItemGroup>
      <Content Include="$(ExpectedVersionFileInIntermediateFolder)" CopyToOutputDirectory="PreserveNewest" />
      <FileWrites Include="$(ExpectedVersionFileInIntermediateFolder)" />
    </ItemGroup>
  </Target>-->

  <Target Name="WriteExpectedTargetFrameworkMoniker" BeforeTargets="BeforeBuild" DependsOnTargets="PrepareForBuild">
    <PropertyGroup>
      <ExpectedTargetFrameworkMonikerFileInIntermediateFolder>$(IntermediateOutputPath)ExpectedTargetFrameworkMoniker.txt</ExpectedTargetFrameworkMonikerFileInIntermediateFolder>
      <VersionFileContent>$(TargetFrameworkMoniker)</VersionFileContent>
      <ExistingVersionFileContent Condition=" Exists('$(ExpectedTargetFrameworkMonikerFileInIntermediateFolder)') ">
        $([System.IO.File]::ReadAllText($(ExpectedTargetFrameworkMonikerFileInIntermediateFolder)))
      </ExistingVersionFileContent>
      <ShouldOverwriteVersionFile>false</ShouldOverwriteVersionFile>
      <ShouldOverwriteVersionFile Condition=" '$(ExistingVersionFileContent.Trim())' != '$(VersionFileContent.Trim())' ">true</ShouldOverwriteVersionFile>
    </PropertyGroup>
    <WriteLinesToFile File="$(ExpectedTargetFrameworkMonikerFileInIntermediateFolder)" Lines="$(VersionFileContent)" Condition=" '$(ShouldOverwriteVersionFile)' == 'true' " Overwrite="true" />
    <ItemGroup>
      <Content Include="$(ExpectedTargetFrameworkMonikerFileInIntermediateFolder)" CopyToOutputDirectory="PreserveNewest" />
      <FileWrites Include="$(ExpectedTargetFrameworkMonikerFileInIntermediateFolder)" />
    </ItemGroup>
  </Target>

  <ItemGroup>
    <ProjectReference Include="..\Microsoft.NET.TestFramework\Microsoft.NET.TestFramework.csproj" />
    <ProjectReference Include="..\..\Cli\dotnet\dotnet.csproj" />
    <ProjectReference Include="..\..\Cli\Microsoft.DotNet.Cli.Sln.Internal\Microsoft.DotNet.Cli.Sln.Internal.csproj" />
    <ProjectReference Include="..\..\Cli\Microsoft.DotNet.Cli.Utils\Microsoft.DotNet.Cli.Utils.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Moq" Version="4.7.25" />
    <PackageReference Include="Microsoft.DotNet.Cli.CommandLine" Version="$(MicrosoftDotNetCliCommandLinePackageVersion)" />
    <PackageReference Include="System.ComponentModel.TypeConverter" Version="4.3.0" />
  </ItemGroup>
</Project>
