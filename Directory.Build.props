<!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->
<!-- Platform needs to be set with TreatAsLocalProperty since it is a global property and cannot be overridden otherwise. -->
<Project TreatAsLocalProperty="Platform">

  <PropertyGroup>
    <BuildArchitecture Condition="'$(BuildArchitecture)' == ''">$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString().ToLowerInvariant())</BuildArchitecture>
    <Architecture Condition="'$(Architecture)' == '' AND ('$(BuildArchitecture)' == 'arm64')">$(BuildArchitecture)</Architecture>
    <Architecture Condition="'$(Architecture)' == '' AND '$(BuildArchitecture)' == 's390x'">$(BuildArchitecture)</Architecture>
    <Architecture Condition="'$(Architecture)' == '' AND '$(BuildArchitecture)' == 'ppc64le'">$(BuildArchitecture)</Architecture>
    <Architecture Condition="'$(Architecture)' == '' AND '$(BuildArchitecture)' == 'loongarch64'">$(BuildArchitecture)</Architecture>
    <Architecture Condition="'$(Architecture)' == ''">x64</Architecture>

    <!--
      The finalizer.nativeproject needs to have Platform set to build for the correct architecture, but this value being set below isn't used by the project because of the build hierarchy when using the CMake SDK.
      Instead, the Platform being set here is prior to calling the Arcade SDK, which sets PlatformName in RepoDefaults.props and modifies the OutputPath in ProjectLayout.props to include a PlatformName folder in the path.
      Note: The redist-installer project does use Architecture. The Arcade SDK does not use either BuildArchitecture or Architecture.
    -->
    <Platform Condition="'$(SetPlatformFromArchitecture)' == 'true' And ('$(Platform)' == '' Or '$(Platform)' == 'AnyCPU')">$(Architecture)</Platform>
  </PropertyGroup>

  <Import Project="Sdk.props" Sdk="Microsoft.DotNet.Arcade.Sdk" />
  <Import Project="$(RepositoryEngineeringDir)Analyzers.props" />

  <PropertyGroup Condition="'$(PgoInstrument)' == 'true'">
    <SkipBuildingInstallers>true</SkipBuildingInstallers>
    <PgoTerm>-pgo</PgoTerm>
  </PropertyGroup>

  <PropertyGroup>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <LangVersion>Latest</LangVersion>
    <TreatWarningsAsErrors>True</TreatWarningsAsErrors>
    <DebugSymbols>true</DebugSymbols>
    <!-- Default to all packages generating a corresponding symbol package -->
    <IncludeSymbols>true</IncludeSymbols>
    <IsShippingPackage>false</IsShippingPackage>
    <SdkTargetFramework>net10.0</SdkTargetFramework>
    <!-- TODO: Remove when Arcade updated NetCurrent to net10.0. -->
    <NetCurrent>net10.0</NetCurrent>
    <ToolsetTargetFramework>$(SdkTargetFramework)</ToolsetTargetFramework>
    <VisualStudioServiceTargetFramework>net8.0</VisualStudioServiceTargetFramework>

    <!-- We used to have scenarios where the MSBuild host (VSMac) had an older .NET, but don't any more. -->
    <ResolverTargetFramework>$(SdkTargetFramework)</ResolverTargetFramework>

    <!-- NU1701 Disable implicit package target fallback, and disable warning for when we explicitly add it (currently needed for
         Microsoft.ApplicationInsights) -->
    <!-- NU1507 Disable multi-feed check as .NET uses multiple internal feeds intentionally -->
    <NoWarn>$(NoWarn);NU1701;NU1507;NU1202</NoWarn>
    <!-- do not enable analyzers on source build-->
    <EnforceCodeStyleInBuild Condition="'$(DotNetBuildSourceOnly)' != 'true'">true</EnforceCodeStyleInBuild>
    <DisableImplicitPackageTargetFallback>true</DisableImplicitPackageTargetFallback>

    <!-- <ArtifactsShippingSymbolsDir>$(ArtifactsDir)symbols\$(Configuration)\Shipping</ArtifactsShippingSymbolsDir> -->

    <DefineConstants Condition="'$(ContinuousIntegrationBuild)' == 'true'">$(DefineConstants);CI_BUILD</DefineConstants>
    <DefineConstants Condition="'$(OfficialBuilder)' == 'Microsoft'">$(DefineConstants);MICROSOFT_ENABLE_TELEMETRY</DefineConstants>
    <DefineConstants Condition="'$(DotNetBuildSourceOnly)' == 'true'">$(DefineConstants);DOT_NET_BUILD_FROM_SOURCE</DefineConstants>

    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>
    <CentralPackageTransitivePinningEnabled>true</CentralPackageTransitivePinningEnabled>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsTestProject)' == 'true'">
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <GenerateProgramFile>false</GenerateProgramFile>
    <!-- <TestRunnerAdditionalArguments>-parallel none</TestRunnerAdditionalArguments> -->
  </PropertyGroup>

  <PropertyGroup>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <!-- Global usings -->
  <!-- See: https://learn.microsoft.com/dotnet/core/project-sdk/msbuild-props#using -->
  <ItemGroup>
    <Using Include="System.Runtime.InteropServices" />
    <Using Include="System.Text" />
    <Using Include="System.Xml.Linq" />
  </ItemGroup>

  <!-- These aliases need to live outside of Versions.props as VMR / source-build overwrites some of the version properties for live builds. -->
  <PropertyGroup>
    <!-- Runtime and Apphost pack versions are the same for all RIDs. We flow the x64 version above and create aliases without the winx64 here for clarity elsewhere. -->
    <MicrosoftNETCoreAppHostPackageVersion>$(MicrosoftNETCoreAppHostwinx64PackageVersion)</MicrosoftNETCoreAppHostPackageVersion>
    <MicrosoftNETCoreAppRuntimePackageVersion>$(MicrosoftNETCoreAppRuntimewinx64PackageVersion)</MicrosoftNETCoreAppRuntimePackageVersion>
    <MicrosoftAspNetCoreAppRuntimePackageVersion>$(MicrosoftAspNetCoreAppRuntimewinx64PackageVersion)</MicrosoftAspNetCoreAppRuntimePackageVersion>
    <MicrosoftWindowsDesktopAppRuntimePackageVersion>$(MicrosoftWindowsDesktopAppRuntimewinx64PackageVersion)</MicrosoftWindowsDesktopAppRuntimePackageVersion>

    <HostFxrVersion>$(MicrosoftNETCoreAppRuntimePackageVersion)</HostFxrVersion>
    <SharedHostVersion>$(MicrosoftNETCoreAppRuntimePackageVersion)</SharedHostVersion>
  </PropertyGroup>

  <Import Project="build/GenerateResxSource.targets" />

</Project>
