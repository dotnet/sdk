<!-- Platform needs to be set with TreatAsLocalProperty since it is a global property and cannot be overridden otherwise. -->
<Project TreatAsLocalProperty="Platform">

  <!-- See https://github.com/dotnet/arcade/blob/main/Documentation/UnifiedBuild/Unified-Build-Controls.md#output-controls for control set definition. -->
  <PropertyGroup Label="CalculateTargetOS">
    <BuildOS>linux</BuildOS>
    <BuildOS Condition="$([MSBuild]::IsOSPlatform('OSX'))">osx</BuildOS>
    <BuildOS Condition="$([MSBuild]::IsOSPlatform('FREEBSD'))">freebsd</BuildOS>
    <BuildOS Condition="$([MSBuild]::IsOSPlatform('NETBSD'))">netbsd</BuildOS>
    <BuildOS Condition="$([MSBuild]::IsOSPlatform('ILLUMOS'))">illumos</BuildOS>
    <BuildOS Condition="$([MSBuild]::IsOSPlatform('SOLARIS'))">solaris</BuildOS>
    <BuildOS Condition="$([MSBuild]::IsOSPlatform('HAIKU'))">haiku</BuildOS>
    <BuildOS Condition="$([MSBuild]::IsOSPlatform('WINDOWS'))">windows</BuildOS>
    <TargetOS Condition="'$(TargetOS)' == ''">$(BuildOS)</TargetOS>
    <HostOS Condition="'$(HostOS)' == ''">$(TargetOS)</HostOS>
  </PropertyGroup>

  <PropertyGroup Label="CalculateArch">
    <!-- Build architecture is what we are building on. -->
    <BuildArchitecture>$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture.ToString().ToLowerInvariant)</BuildArchitecture>
    <!-- The target architecture is the what the customer is targeting their outputs to run on. -->
    <TargetArchitecture Condition="'$(TargetArchitecture)' == ''">$(BuildArchitecture)</TargetArchitecture>
    <!-- The host architecture is the what the customer will build on. Much of the time, Host==Target. -->
    <HostArchitecture Condition="'$(HostArchitecture)' == ''">$(TargetArchitecture)</HostArchitecture>
  </PropertyGroup>

  <PropertyGroup Label="CalculateRID">
    <!-- Use current machine distro RID if set. Otherwise, fall back to RuntimeInformation.RuntimeIdentifier -->
    <BuildRid>$(__DistroRid)</BuildRid>
    <BuildRid Condition="'$(BuildRid)' == '' and '$(MSBuildRuntimeType)' == 'core'">$([System.Runtime.InteropServices.RuntimeInformation]::RuntimeIdentifier)</BuildRid>
    <BuildRid Condition="'$(BuildRid)' == '' and '$(MSBuildRuntimeType)' != 'core'">win-$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture.ToString().ToLowerInvariant)</BuildRid>

    <TargetRid Condition="'$(TargetRid)' == ''">$(BuildRid.Substring(0, $(BuildRid.LastIndexOf('-'))))-$(TargetArchitecture)</TargetRid>
    <HostRid Condition="'$(HostRid)' == ''">$(TargetRid)</HostRid>
    <!-- Source-only builds are non portable, except for cross-builds.
         Source-only cross-builds default to the portable configuration so the resulting SDK works on a wider range of distros. -->
    <PortableBuild Condition="'$(PortableBuild)' == '' and '$(DotNetBuildSourceOnly)' == 'true' and '$(BuildArchitecture)' == '$(TargetArchitecture)'">false</PortableBuild>
    <PortableBuild Condition="'$(PortableBuild)' == ''">true</PortableBuild>

    <PortableRid Condition="'$(__PortableTargetOS)' != ''">$(__PortableTargetOS)-$(TargetArchitecture)</PortableRid>
    <PortableRid Condition="'$(PortableRid)' == '' and '$(TargetOS)' == 'freebsd'">freebsd-$(TargetArchitecture)</PortableRid>
    <PortableRid Condition="'$(PortableRid)' == '' and '$(TargetOS)' == 'osx'">osx-$(TargetArchitecture)</PortableRid>
    <PortableRid Condition="'$(PortableRid)' == '' and '$(TargetOS)' == 'linux'">linux-$(TargetArchitecture)</PortableRid>
    <PortableRid Condition="$(TargetRid.StartsWith('linux-musl')) or $(TargetRid.StartsWith('alpine'))">linux-musl-$(TargetArchitecture)</PortableRid>
    <PortableRid Condition="'$(PortableRid)' == '' and '$(TargetOS)' == 'windows'">win-$(TargetArchitecture)</PortableRid>

    <TargetRid Condition="'$(PortableRid)' != ''">$(PortableRid)</TargetRid>
  </PropertyGroup>

  <Import Project="Sdk.props" Sdk="Microsoft.DotNet.Arcade.Sdk" />
  <Import Project="$(RepositoryEngineeringDir)Analyzers.props" />

  <PropertyGroup>
    <SdkSrcRoot>$([MSBuild]::NormalizeDirectory('$(MSBuildThisFileDirectory)', 'src'))</SdkSrcRoot>
    <PackageProjectUrl>https://github.com/dotnet/sdk</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <LangVersion>Preview</LangVersion>
    <TreatWarningsAsErrors>True</TreatWarningsAsErrors>
    <DebugSymbols>true</DebugSymbols>
    <!-- Default to all packages generating a corresponding symbol package -->
    <IncludeSymbols>true</IncludeSymbols>
    <IsShippingPackage>false</IsShippingPackage>
    <SdkTargetFramework>net10.0</SdkTargetFramework>
    <NetToolMinimum Condition="'$(DotNetBuildSourceOnly)' == 'true'">$(NetCurrent)</NetToolMinimum>
    <ToolsetTargetFramework>$(SdkTargetFramework)</ToolsetTargetFramework>
    <VisualStudioServiceTargetFramework>net8.0</VisualStudioServiceTargetFramework>

    <!-- We used to have scenarios where the MSBuild host (VSMac) had an older .NET, but don't any more. -->
    <ResolverTargetFramework>$(SdkTargetFramework)</ResolverTargetFramework>

    <!-- NU1701 Disable implicit package target fallback, and disable warning for when we explicitly add it (currently needed for
         Microsoft.ApplicationInsights) -->
    <!-- NU1507 Disable multi-feed check as .NET uses multiple internal feeds intentionally -->
    <NoWarn>$(NoWarn);NU1701;NU1507;NU1202</NoWarn>
    <!-- do not enable analyzers on source build-->
    <EnforceCodeStyleInBuild Condition="'$(DotNetBuildSourceOnly)' != 'true'">true</EnforceCodeStyleInBuild>
    <UseSharedCompilation Condition="'$(DotNetBuildSourceOnly)' == 'true'">false</UseSharedCompilation>
    <DisableImplicitPackageTargetFallback>true</DisableImplicitPackageTargetFallback>

    <DefineConstants Condition="'$(ContinuousIntegrationBuild)' == 'true'">$(DefineConstants);CI_BUILD</DefineConstants>
    <DefineConstants Condition="'$(OfficialBuilder)' == 'Microsoft'">$(DefineConstants);MICROSOFT_ENABLE_TELEMETRY</DefineConstants>
    <DefineConstants Condition="'$(DotNetBuildSourceOnly)' == 'true'">$(DefineConstants);DOT_NET_BUILD_FROM_SOURCE</DefineConstants>

    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>
    <CentralPackageTransitivePinningEnabled>true</CentralPackageTransitivePinningEnabled>

    <Nullable>enable</Nullable>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsTestProject)' == 'true'">
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <GenerateProgramFile>false</GenerateProgramFile>
    <!-- <TestRunnerAdditionalArguments>-parallel none</TestRunnerAdditionalArguments> -->
  </PropertyGroup>

  <PropertyGroup>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <!-- Global usings -->
  <!-- See: https://learn.microsoft.com/dotnet/core/project-sdk/msbuild-props#using -->
  <ItemGroup>
    <Using Include="System.Runtime.InteropServices" />
    <Using Include="System.Text" />
    <Using Include="System.Xml.Linq" />
  </ItemGroup>

  <!-- These aliases need to live outside of Versions.props as VMR / source-build overwrites some of the version properties for live builds. -->
  <PropertyGroup>
    <!-- Runtime and Apphost pack versions are the same for all RIDs. We flow the x64 version above and create aliases without the winx64 here for clarity elsewhere. -->
    <MicrosoftNETCoreAppHostPackageVersion>$(MicrosoftNETCoreAppHostwinx64PackageVersion)</MicrosoftNETCoreAppHostPackageVersion>
    <MicrosoftNETCoreAppRuntimePackageVersion>$(MicrosoftNETCoreAppRuntimewinx64PackageVersion)</MicrosoftNETCoreAppRuntimePackageVersion>
    <MicrosoftAspNetCoreAppRuntimePackageVersion>$(MicrosoftAspNetCoreAppRuntimewinx64PackageVersion)</MicrosoftAspNetCoreAppRuntimePackageVersion>
    <MicrosoftWindowsDesktopAppRuntimePackageVersion>$(MicrosoftWindowsDesktopAppRuntimewinx64PackageVersion)</MicrosoftWindowsDesktopAppRuntimePackageVersion>

    <HostFxrVersion>$(MicrosoftNETCoreAppRuntimePackageVersion)</HostFxrVersion>
    <SharedHostVersion>$(MicrosoftNETCoreAppRuntimePackageVersion)</SharedHostVersion>
  </PropertyGroup>

  <Import Project="build/GenerateResxSource.targets" />

</Project>
