parameters:
  # Agent OS identifier and used as job name
  agentOs: ''

  # Agent pool
  pool: {}

  # Additional variables
  variables: {}

  # Build strategy - matrix
  strategy: {}

  # Job timeout
  timeoutInMinutes: 180

  # Publish using pipelines
  enablePublishUsingPipelines: false

jobs:
- template: /eng/common/templates/job/job.yml
  parameters:
    name: ${{ parameters.agentOs }}
    ${{ if eq(parameters.agentOs, 'Windows_NT') }}:
      enableMicrobuild: true
    enablePublishBuildAssets: true
    enablePublishUsingPipelines: ${{parameters.enablePublishUsingPipelines}}
    enableTelemetry: true
    helixRepo: dotnet/toolset
    pool: ${{ parameters.pool }}
    ${{ if ne(parameters.strategy, '') }}:
      strategy: ${{ parameters.strategy }}
    variables: 
      - _AgentOSName: ${{ parameters.agentOs }}
      - ${{ insert }}: ${{ parameters.variables }}
      - _AgentOSName: ${{ parameters.agentOs }}
      - BuildConfig: $(_BuildConfig)
      - BuildArchitecture: $(_BuildArchitecture)
      - DockerParameter: $(_DockerParameter)
      - LinuxPortable: $(_LinuxPortable)
      - RuntimeId: $(_RuntimeIdentifier)
      - _OfficialBuildIdArgs: ''
      - _PublishArgs: ''
        
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        - group: DotNet-Symbol-Server-PATs
        - group: DotNet-HelixApi-Access
        - group: DotNet-Blob-Feed
        - _OfficialBuildIdArgs: /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
        - _PublishArgs: /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed)
                  /p:DotNetPublishBlobFeedUrl=$(PB_PublishBlobFeedUrl)
                  /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
                  /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
                  /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
                  /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
                  /p:PB_PublishType=$(_PublishType)

    steps:
    - ${{ if eq(parameters.agentOs, 'Windows_NT') }}:
      - script: build.cmd
                  -pack -publish -ci -test
                  -Configuration $(BuildConfig)
                  -Architecture $(BuildArchitecture)
                  $(_PublishArgs)
                  $(_OfficialBuildIdArgs)
        displayName: Build

    - ${{ if eq(parameters.agentOs, 'Linux') }}:
      - script: ./build.sh
                  --pack --publish --ci --test
                  --configuration $(BuildConfig)
                  $(DockerParameter)
                  --architecture $(BuildArchitecture)
                  $(LinuxPortable)
                  $(RuntimeId)
        displayName: Build

    - ${{ if eq(parameters.agentOs, 'Darwin') }}:
      - script: ./build.sh
                  --pack --publish --ci --test
                  --configuration $(BuildConfig)
        displayName: Build

    - ${{ if and(eq(parameters.enablePublishBuildAssets, true), ne(parameters.enablePublishUsingPipelines, 'true'), eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - task: CopyFiles@2
        displayName: Gather Asset Manifests
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/AssetManifest'
          TargetFolder: '$(Build.StagingDirectory)/AssetManifests'
        continueOnError: ${{ parameters.continueOnError }}
        condition: and(succeeded(), eq(variables['_DotNetPublishToBlobFeed'], 'true'), eq(variables['_PublishBuildAssetManifest'], 'true'))
      - task: PublishBuildArtifacts@1
        displayName: Push Asset Manifests
        inputs:
          PathtoPublish: '$(Build.StagingDirectory)/AssetManifests'
          PublishLocation: Container
          ArtifactName: AssetManifests
        continueOnError: ${{ parameters.continueOnError }}
        condition: and(succeeded(), eq(variables['_DotNetPublishToBlobFeed'], 'true'), eq(variables['_PublishBuildAssetManifest'], 'true'))

    - task: PublishTestResults@2
      displayName: Publish Test Results	
      inputs:	
        testResultsFormat: xUnit	
        testResultsFiles: 'artifacts/TestResults/$(_BuildConfig)/*.xml'	
        testRunTitle: '$(_AgentOSName)_$(Agent.JobName)'	
        buildPlatform: '$(BuildPlatform)'	
        buildConfiguration: '$(_BuildConfig)'	
      condition: always()

    - task: CopyFiles@2	
      displayName: Gather Logs	
      inputs:	
        SourceFolder: '$(Build.SourcesDirectory)/artifacts'	
        Contents: |	
         log/$(_BuildConfig)/**/*	
         TestResults/$(_BuildConfig)/**/*	
        TargetFolder: '$(Build.ArtifactStagingDirectory)'	
      continueOnError: true	
      condition: always()

    - task: PublishBuildArtifacts@1	
      displayName: Publish Logs to VSTS	
      inputs:	
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'	
        ArtifactName: '$(_AgentOSName)_$(Agent.JobName)_$(Build.BuildNumber)'	
        publishLocation: Container	
      continueOnError: true	
      condition: always()
