.\" Automatically generated by Pandoc 2.18
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "dotnet-build" "1" "2022-10-21" "" ".NET Documentation"
.hy
.SH dotnet build
.PP
\f[B]This article applies to:\f[R] \[u2714]\[uFE0F] .NET Core 3.1 SDK and later versions
.SH NAME
.PP
dotnet-build - Builds a project and all of its dependencies.
.SH SYNOPSIS
.IP
.nf
\f[C]
dotnet build [<PROJECT>|<SOLUTION>] [-a|--arch <ARCHITECTURE>]
    [-c|--configuration <CONFIGURATION>] [-f|--framework <FRAMEWORK>]
    [--force] [--interactive] [--no-dependencies] [--no-incremental]
    [--no-restore] [--nologo] [--no-self-contained] [--os <OS>]
    [-o|--output <OUTPUT_DIRECTORY>] [-r|--runtime <RUNTIME_IDENTIFIER>]
    [--self-contained [true|false]] [--source <SOURCE>] [--use-current-runtime, --ucr [true|false]]
    [-v|--verbosity <LEVEL>] [--version-suffix <VERSION_SUFFIX>]

dotnet build -h|--help
\f[R]
.fi
.SH DESCRIPTION
.PP
The \f[V]dotnet build\f[R] command builds the project and its dependencies into a set of binaries.
The binaries include the project\[cq]s code in Intermediate Language (IL) files with a \f[I].dll\f[R] extension.
Depending on the project type and settings, other files may be included, such as:
.IP \[bu] 2
An executable that can be used to run the application, if the project type is an executable targeting .NET Core 3.0 or later.
.IP \[bu] 2
Symbol files used for debugging with a \f[I].pdb\f[R] extension.
.IP \[bu] 2
A \f[I].deps.json\f[R] file, which lists the dependencies of the application or library.
.IP \[bu] 2
A \f[I].runtimeconfig.json\f[R] file, which specifies the shared runtime and its version for an application.
.IP \[bu] 2
Other libraries that the project depends on (via project references or NuGet package references).
.PP
For executable projects targeting versions earlier than .NET Core 3.0, library dependencies from NuGet are typically NOT copied to the output folder.
They\[cq]re resolved from the NuGet global packages folder at run time.
With that in mind, the product of \f[V]dotnet build\f[R] isn\[cq]t ready to be transferred to another machine to run.
To create a version of the application that can be deployed, you need to publish it (for example, with the dotnet publish command).
For more information, see .NET Application Deployment.
.PP
For executable projects targeting .NET Core 3.0 and later, library dependencies are copied to the output folder.
This means that if there isn\[cq]t any other publish-specific logic (such as Web projects have), the build output should be deployable.
.SS Implicit restore
.PP
Building requires the \f[I]project.assets.json\f[R] file, which lists the dependencies of your application.
The file is created when \f[V]dotnet restore\f[R] is executed.
Without the assets file in place, the tooling can\[cq]t resolve reference assemblies, which results in errors.
.PP
You don\[cq]t have to run \f[V]dotnet restore\f[R] because it\[cq]s run implicitly by all commands that require a restore to occur, such as \f[V]dotnet new\f[R], \f[V]dotnet build\f[R], \f[V]dotnet run\f[R], \f[V]dotnet test\f[R], \f[V]dotnet publish\f[R], and \f[V]dotnet pack\f[R].
To disable implicit restore, use the \f[V]--no-restore\f[R] option.
.PP
The \f[V]dotnet restore\f[R] command is still useful in certain scenarios where explicitly restoring makes sense, such as continuous integration builds in Azure DevOps Services or in build systems that need to explicitly control when the restore occurs.
.PP
For information about how to manage NuGet feeds, see the \f[V]dotnet restore\f[R] documentation.
.PP
This command supports the \f[V]dotnet restore\f[R] options when passed in the long form (for example, \f[V]--source\f[R]).
Short form options, such as \f[V]-s\f[R], are not supported.
.SS Executable or library output
.PP
Whether the project is executable or not is determined by the \f[V]<OutputType>\f[R] property in the project file.
The following example shows a project that produces executable code:
.IP
.nf
\f[C]
<PropertyGroup>
  <OutputType>Exe</OutputType>
</PropertyGroup>
\f[R]
.fi
.PP
To produce a library, omit the \f[V]<OutputType>\f[R] property or change its value to \f[V]Library\f[R].
The IL DLL for a library doesn\[cq]t contain entry points and can\[cq]t be executed.
.SS MSBuild
.PP
\f[V]dotnet build\f[R] uses MSBuild to build the project, so it supports both parallel and incremental builds.
For more information, see Incremental Builds.
.PP
In addition to its options, the \f[V]dotnet build\f[R] command accepts MSBuild options, such as \f[V]-p\f[R] for setting properties or \f[V]-l\f[R] to define a logger.
For more information about these options, see the MSBuild Command-Line Reference.
Or you can also use the dotnet msbuild command.
.RS
.PP
When \f[V]dotnet build\f[R] is run automatically by \f[V]dotnet run\f[R], arguments like \f[V]-property:property=value\f[R] aren\[cq]t respected.
.RE
.PP
Running \f[V]dotnet build\f[R] is equivalent to running \f[V]dotnet msbuild -restore\f[R]; however, the default verbosity of the output is different.
.SS Workload manifest downloads
.PP
When you run this command, it initiates an asynchronous background download of advertising manifests for workloads.
If the download is still running when this command finishes, the download is stopped.
For more information, see Advertising manifests.
.SH ARGUMENTS
.PP
\f[V]PROJECT | SOLUTION\f[R]
.PP
The project or solution file to build.
If a project or solution file isn\[cq]t specified, MSBuild searches the current working directory for a file that has a file extension that ends in either \f[I]proj\f[R] or \f[I]sln\f[R] and uses that file.
.SH OPTIONS
.IP \[bu] 2
\f[B]\f[VB]-a|--arch <ARCHITECTURE>\f[B]\f[R]
.RS 2
.PP
Specifies the target architecture.
This is a shorthand syntax for setting the Runtime Identifier (RID), where the provided value is combined with the default RID.
For example, on a \f[V]win-x64\f[R] machine, specifying \f[V]--arch x86\f[R] sets the RID to \f[V]win-x86\f[R].
If you use this option, don\[cq]t use the \f[V]-r|--runtime\f[R] option.
Available since .NET 6 Preview 7.
.RE
.IP \[bu] 2
\f[B]\f[VB]-c|--configuration <CONFIGURATION>\f[B]\f[R]
.RS 2
.PP
Defines the build configuration.
The default for most projects is \f[V]Debug\f[R], but you can override the build configuration settings in your project.
.RE
.IP \[bu] 2
\f[B]\f[VB]-f|--framework <FRAMEWORK>\f[B]\f[R]
.RS 2
.PP
Compiles for a specific framework.
The framework must be defined in the project file.
Examples: \f[V]net7.0\f[R], \f[V]net462\f[R].
.RE
.IP \[bu] 2
\f[B]\f[VB]--force\f[B]\f[R]
.RS 2
.PP
Forces all dependencies to be resolved even if the last restore was successful.
Specifying this flag is the same as deleting the \f[I]project.assets.json\f[R] file.
.RE
.IP \[bu] 2
\f[B]\f[VB]-?|-h|--help\f[B]\f[R]
.RS 2
.PP
Prints out a description of how to use the command.
.RE
.IP \[bu] 2
\f[B]\f[VB]--interactive\f[B]\f[R]
.RS 2
.PP
Allows the command to stop and wait for user input or action.
For example, to complete authentication.
Available since .NET Core 3.0 SDK.
.RE
.IP \[bu] 2
\f[B]\f[VB]--no-dependencies\f[B]\f[R]
.RS 2
.PP
Ignores project-to-project (P2P) references and only builds the specified root project.
.RE
.IP \[bu] 2
\f[B]\f[VB]--no-incremental\f[B]\f[R]
.RS 2
.PP
Marks the build as unsafe for incremental build.
This flag turns off incremental compilation and forces a clean rebuild of the project\[cq]s dependency graph.
.RE
.IP \[bu] 2
\f[B]\f[VB]--no-restore\f[B]\f[R]
.RS 2
.PP
Doesn\[cq]t execute an implicit restore during build.
.RE
.IP \[bu] 2
\f[B]\f[VB]--nologo\f[B]\f[R]
.RS 2
.PP
Doesn\[cq]t display the startup banner or the copyright message.
.RE
.IP \[bu] 2
\f[B]\f[VB]--no-self-contained\f[B]\f[R]
.RS 2
.PP
Publishes the application as a framework dependent application.
A compatible .NET runtime must be installed on the target machine to run the application.
Available since .NET 6 SDK.
.RE
.IP \[bu] 2
\f[B]\f[VB]-o|--output <OUTPUT_DIRECTORY>\f[B]\f[R]
.RS 2
.PP
Directory in which to place the built binaries.
If not specified, the default path is \f[V]./bin/<configuration>/<framework>/\f[R].
For projects with multiple target frameworks (via the \f[V]TargetFrameworks\f[R] property), you also need to define \f[V]--framework\f[R] when you specify this option.
.RE
.IP \[bu] 2
\f[B]\f[VB]--os <OS>\f[B]\f[R]
.RS 2
.PP
Specifies the target operating system (OS).
This is a shorthand syntax for setting the Runtime Identifier (RID), where the provided value is combined with the default RID.
For example, on a \f[V]win-x64\f[R] machine, specifying \f[V]--os linux\f[R] sets the RID to \f[V]linux-x64\f[R].
If you use this option, don\[cq]t use the \f[V]-r|--runtime\f[R] option.
Available since .NET 6.
.RE
.IP \[bu] 2
\f[B]\f[VB]-r|--runtime <RUNTIME_IDENTIFIER>\f[B]\f[R]
.RS 2
.PP
Specifies the target runtime.
For a list of Runtime Identifiers (RIDs), see the RID catalog.
If you use this option with .NET 6 SDK, use \f[V]--self-contained\f[R] or \f[V]--no-self-contained\f[R] also.
If not specified, the default is to build for the current OS and architecture.
.RE
.IP \[bu] 2
\f[B]\f[VB]--self-contained [true|false]\f[B]\f[R]
.RS 2
.PP
Publishes the .NET runtime with the application so the runtime doesn\[cq]t need to be installed on the target machine.
The default is \f[V]true\f[R] if a runtime identifier is specified.
Available since .NET 6 SDK.
.RE
.IP \[bu] 2
\f[B]\f[VB]--source <SOURCE>\f[B]\f[R]
.RS 2
.PP
The URI of the NuGet package source to use during the restore operation.
.RE
.IP \[bu] 2
\f[B]\f[VB]-v|--verbosity <LEVEL>\f[B]\f[R]
.RS 2
.PP
Sets the verbosity level of the command.
Allowed values are \f[V]q[uiet]\f[R], \f[V]m[inimal]\f[R], \f[V]n[ormal]\f[R], \f[V]d[etailed]\f[R], and \f[V]diag[nostic]\f[R].
The default is \f[V]minimal\f[R].
For more information, see <xref:Microsoft.Build.Framework.LoggerVerbosity>.
.RE
.IP \[bu] 2
\f[B]\f[VB]--use-current-runtime, --ucr [true|false]\f[B]\f[R]
.RS 2
.PP
Sets the \f[V]RuntimeIdentifier\f[R] to a platform portable \f[V]RuntimeIdentifier\f[R] based on the one of your machine.
This happens implicitly with properties that require a \f[V]RuntimeIdentifier\f[R], such as \f[V]SelfContained\f[R], \f[V]PublishAot\f[R], \f[V]PublishSelfContained\f[R], \f[V]PublishSingleFile\f[R], and \f[V]PublishReadyToRun\f[R].
If the property is set to false, that implicit resolution will no longer occur.
.RE
.IP \[bu] 2
\f[B]\f[VB]--version-suffix <VERSION_SUFFIX>\f[B]\f[R]
.RS 2
.PP
Sets the value of the \f[V]$(VersionSuffix)\f[R] property to use when building the project.
This only works if the \f[V]$(Version)\f[R] property isn\[cq]t set.
Then, \f[V]$(Version)\f[R] is set to the \f[V]$(VersionPrefix)\f[R] combined with the \f[V]$(VersionSuffix)\f[R], separated by a dash.
.RE
.SH EXAMPLES
.IP \[bu] 2
Build a project and its dependencies:
.RS 2
.IP
.nf
\f[C]
dotnet build
\f[R]
.fi
.RE
.IP \[bu] 2
Build a project and its dependencies using Release configuration:
.RS 2
.IP
.nf
\f[C]
dotnet build --configuration Release
\f[R]
.fi
.RE
.IP \[bu] 2
Build a project and its dependencies for a specific runtime (in this example, Ubuntu 18.04):
.RS 2
.IP
.nf
\f[C]
dotnet build --runtime ubuntu.18.04-x64
\f[R]
.fi
.RE
.IP \[bu] 2
Build the project and use the specified NuGet package source during the restore operation:
.RS 2
.IP
.nf
\f[C]
dotnet build --source c:\[rs]packages\[rs]mypackages
\f[R]
.fi
.RE
.IP \[bu] 2
Build the project and set version 1.2.3.4 as a build parameter using the \f[V]-p\f[R] MSBuild option:
.RS 2
.IP
.nf
\f[C]
dotnet build -p:Version=1.2.3.4
\f[R]
.fi
.RE
