.\"t
.\" Automatically generated by Pandoc 2.7.2
.\"
.TH "dotnet command" "1" "" "" ".NET Core"
.hy
.SH dotnet command
.PP
.SH NAME
.PP
\f[C]dotnet\f[R] - A tool for managing .NET source code and binaries.
.SH SYNOPSIS
.SS .NET Core 2.1
.IP
.nf
\f[C]
dotnet [command] [arguments] [--additional-deps] [--additionalprobingpath] [--depsfile]
    [-d|--diagnostics] [--fx-version] [-h|--help] [--info] [--list-runtimes] [--list-sdks] [--roll-forward-on-no-candidate-fx] [--runtimeconfig] [-v|--verbosity] [--version]
\f[R]
.fi
.SS .NET Core 2.0
.IP
.nf
\f[C]
dotnet [command] [arguments] [--additional-deps] [--additionalprobingpath] [--depsfile]
    [-d|--diagnostics] [--fx-version] [-h|--help] [--info] [--roll-forward-on-no-candidate-fx]
    [--runtimeconfig] [-v|--verbosity] [--version]
\f[R]
.fi
.SS .NET Core 1.x
.IP
.nf
\f[C]
dotnet [command] [arguments] [--additionalprobingpath] [--depsfile] [-d|--diagnostics]
    [--fx-version] [-h|--help] [--info] [--runtimeconfig] [-v|--verbosity] [--version]
\f[R]
.fi
.PP
   *   *   *   *   *
.SH DESCRIPTION
.PP
\f[C]dotnet\f[R] is a tool for managing .NET source code and binaries.
It exposes commands that perform specific tasks, such as \f[C]dotnet build\f[R] and \f[C]dotnet run\f[R].
Each command defines its own arguments.
Type \f[C]--help\f[R] after each command to access brief help documentation.
.PP
\f[C]dotnet\f[R] can be used to run applications, by specifying an application DLL, such as \f[C]dotnet myapp.dll\f[R].
See .NET Core application deployment for to learn about deployment options.
.SH OPTIONS
.SS .NET Core 2.1
.PP
\f[C]--additional-deps <PATH>\f[R]
.PP
Path to an additional \f[I].deps.json\f[R] file.
.PP
\f[C]--additionalprobingpath <PATH>\f[R]
.PP
Path containing probing policy and assemblies to probe.
.PP
\f[C]--depsfile\f[R]
.PP
Path to a \f[I]deps.json\f[R] file.
.PP
A \f[I]deps.json\f[R] file contains a list of dependencies, compilation dependencies and version information used to address assembly conflicts.
For more information about this file, see Runtime Configuration Files on GitHub.
.PP
\f[C]-d|--diagnostics\f[R]
.PP
Enables diagnostic output.
.PP
\f[C]--fx-version <VERSION>\f[R]
.PP
Version of the .NET Core runtime to use to run the application.
.PP
\f[C]-h|--help\f[R]
.PP
Prints out documentation for a given command, such as \f[C]dotnet build --help\f[R].
\f[C]dotnet --help\f[R] prints a list of available commands.
.PP
\f[C]--info\f[R]
.PP
Prints out detailed information about a .NET Core installation and the machine environment, such as the current operating system, and commit SHA of the .NET Core version.
.PP
\f[C]--list-runtimes\f[R]
.PP
Displays the installed .NET Core runtimes.
.PP
\f[C]--list-sdks\f[R]
.PP
Displays the installed .NET Core SDKs.
.PP
\f[C]--roll-forward-on-no-candidate-fx <N>\f[R]
.PP
Defines behavior when the required shared framework is not available.
\f[C]N\f[R] can be:
.IP \[bu] 2
\f[C]0\f[R] - Disable even minor version roll forward.
.IP \[bu] 2
\f[C]1\f[R] - Roll forward on minor version, but not on major version.
This is the default behavior.
.IP \[bu] 2
\f[C]2\f[R] - Roll forward on minor and major versions.
.PP
For more information, see Roll forward.
.PP
\f[C]--runtimeconfig\f[R]
.PP
Path to a \f[I]runtimeconfig.json\f[R] file.
.PP
A \f[I]runtimeconfig.json\f[R] file is a configuration file containing runtime configuration settings.
For more information, see Runtime Configuration Files on GitHub.
.PP
\f[C]-v|--verbosity <LEVEL>\f[R]
.PP
Sets the verbosity level of the command.
Allowed values are \f[C]q[uiet]\f[R], \f[C]m[inimal]\f[R], \f[C]n[ormal]\f[R], \f[C]d[etailed]\f[R], and \f[C]diag[nostic]\f[R].
Not supported in every command; see specific command page to determine if this option is available.
.PP
\f[C]--version\f[R]
.PP
Prints out the version of the .NET Core SDK in use.
.SS .NET Core 2.0
.PP
\f[C]--additional-deps <PATH>\f[R]
.PP
Path to an additional \f[I].deps.json\f[R] file.
.PP
\f[C]--additionalprobingpath <PATH>\f[R]
.PP
Path containing probing policy and assemblies to probe.
.PP
\f[C]--depsfile\f[R]
.PP
Path to a \f[I]deps.json\f[R] file.
.PP
A \f[I]deps.json\f[R] file contains a list of dependencies, compilation dependencies and version information used to address assembly conflicts.
For more details on this file, see Runtime Configuration Files on GitHub.
.PP
\f[C]-d|--diagnostics\f[R]
.PP
Enables diagnostic output.
.PP
\f[C]--fx-version <VERSION>\f[R]
.PP
Version of the .NET Core runtime to use to run the application.
.PP
\f[C]-h|--help\f[R]
.PP
Prints out documentation for a given command, such as \f[C]dotnet build --help\f[R].
\f[C]dotnet --help\f[R] prints a list of available commands.
.PP
\f[C]--info\f[R]
.PP
Prints out detailed information about a .NET Core installation and the machine environment, such as the current operating system, and commit SHA of the .NET Core version.
.PP
\f[C]--roll-forward-on-no-candidate-fx\f[R]
.PP
Disables minor version roll forward, if set to \f[C]0\f[R].
For more information, see Roll forward.
.PP
\f[C]--runtimeconfig\f[R]
.PP
Path to a \f[I]runtimeconfig.json\f[R] file.
.PP
A \f[I]runtimeconfig.json\f[R] file is a configuration file containing runtime configuration settings.
For more details, see Runtime Configuration Files on GitHub.
.PP
\f[C]-v|--verbosity <LEVEL>\f[R]
.PP
Sets the verbosity level of the command.
Allowed values are \f[C]q[uiet]\f[R], \f[C]m[inimal]\f[R], \f[C]n[ormal]\f[R], \f[C]d[etailed]\f[R], and \f[C]diag[nostic]\f[R].
Not supported in every command; see specific command page to determine if this option is available.
.PP
\f[C]--version\f[R]
.PP
Prints out the version of the .NET Core SDK in use.
.SS .NET Core 1.x
.PP
\f[C]--additionalprobingpath <PATH>\f[R]
.PP
Path containing probing policy and assemblies to probe.
.PP
\f[C]--depsfile\f[R]
.PP
Path to a \f[I]deps.json\f[R] file.
.PP
A \f[I]deps.json\f[R] file contains a list of dependencies, compilation dependencies and version information used to address assembly conflicts.
For more details on this file, see Runtime Configuration Files on GitHub.
.PP
\f[C]-d|--diagnostics\f[R]
.PP
Enables diagnostic output.
.PP
\f[C]--fx-version <VERSION>\f[R]
.PP
Version of the .NET Core runtime to use to run the application.
.PP
\f[C]-h|--help\f[R]
.PP
Prints out documentation for a given command, such as \f[C]dotnet build --help\f[R].
\f[C]dotnet --help\f[R] prints a list of available commands.
.PP
\f[C]--info\f[R]
.PP
Prints out detailed information about a .NET Core installation and the machine environment, such as the current operating system, and commit SHA of the .NET Core version.
.PP
\f[C]--runtimeconfig\f[R]
.PP
Path to a \f[I]runtimeconfig.json\f[R] file.
.PP
A \f[I]runtimeconfig.json\f[R] file is a configuration file containing runtime configuration settings.
For more details, see Runtime Configuration Files on GitHub.
.PP
\f[C]-v|--verbosity <LEVEL>\f[R]
.PP
Sets the verbosity level of the command.
Allowed values are \f[C]q[uiet]\f[R], \f[C]m[inimal]\f[R], \f[C]n[ormal]\f[R], \f[C]d[etailed]\f[R], and \f[C]diag[nostic]\f[R].
Not supported in every command; see specific command page to determine if this option is available.
.PP
\f[C]--version\f[R]
.PP
Prints out the version of the .NET Core SDK in use.
.PP
   *   *   *   *   *
.SS dotnet commands
.SS General
.SS .NET Core 2.1
.PP
.TS
tab(@);
l l.
T{
Command
T}@T{
Function
T}
_
T{
dotnet build
T}@T{
Builds a .NET Core application.
T}
T{
dotnet build-server
T}@T{
Interacts with servers started by a build.
T}
T{
dotnet clean
T}@T{
Clean build outputs.
T}
T{
dotnet help
T}@T{
Shows more detailed documentation online for the command.
T}
T{
dotnet migrate
T}@T{
Migrates a valid Preview 2 project to a .NET Core SDK 1.0 project.
T}
T{
dotnet msbuild
T}@T{
Provides access to the MSBuild command line.
T}
T{
dotnet new
T}@T{
Initializes a C# or F# project for a given template.
T}
T{
dotnet pack
T}@T{
Creates a NuGet package of your code.
T}
T{
dotnet publish
T}@T{
Publishes a .NET framework-dependent or self-contained application.
T}
T{
dotnet restore
T}@T{
Restores the dependencies for a given application.
T}
T{
dotnet run
T}@T{
Runs the application from source.
T}
T{
dotnet sln
T}@T{
Options to add, remove, and list projects in a solution file.
T}
T{
dotnet store
T}@T{
Stores assemblies in the runtime package store.
T}
T{
dotnet test
T}@T{
Runs tests using a test runner.
T}
.TE
.SS .NET Core 2.0
.PP
.TS
tab(@);
l l.
T{
Command
T}@T{
Function
T}
_
T{
dotnet build
T}@T{
Builds a .NET Core application.
T}
T{
dotnet clean
T}@T{
Clean build outputs.
T}
T{
dotnet help
T}@T{
Shows more detailed documentation online for the command.
T}
T{
dotnet migrate
T}@T{
Migrates a valid Preview 2 project to a .NET Core SDK 1.0 project.
T}
T{
dotnet msbuild
T}@T{
Provides access to the MSBuild command line.
T}
T{
dotnet new
T}@T{
Initializes a C# or F# project for a given template.
T}
T{
dotnet pack
T}@T{
Creates a NuGet package of your code.
T}
T{
dotnet publish
T}@T{
Publishes a .NET framework-dependent or self-contained application.
T}
T{
dotnet restore
T}@T{
Restores the dependencies for a given application.
T}
T{
dotnet run
T}@T{
Runs the application from source.
T}
T{
dotnet sln
T}@T{
Options to add, remove, and list projects in a solution file.
T}
T{
dotnet store
T}@T{
Stores assemblies in the runtime package store.
T}
T{
dotnet test
T}@T{
Runs tests using a test runner.
T}
.TE
.SS .NET Core 1.x
.PP
.TS
tab(@);
l l.
T{
Command
T}@T{
Function
T}
_
T{
dotnet build
T}@T{
Builds a .NET Core application.
T}
T{
dotnet clean
T}@T{
Clean build outputs.
T}
T{
dotnet migrate
T}@T{
Migrates a valid Preview 2 project to a .NET Core SDK 1.0 project.
T}
T{
dotnet msbuild
T}@T{
Provides access to the MSBuild command line.
T}
T{
dotnet new
T}@T{
Initializes a C# or F# project for a given template.
T}
T{
dotnet pack
T}@T{
Creates a NuGet package of your code.
T}
T{
dotnet publish
T}@T{
Publishes a .NET framework-dependent or self-contained application.
T}
T{
dotnet restore
T}@T{
Restores the dependencies for a given application.
T}
T{
dotnet run
T}@T{
Runs the application from source.
T}
T{
dotnet sln
T}@T{
Options to add, remove, and list projects in a solution file.
T}
T{
dotnet test
T}@T{
Runs tests using a test runner.
T}
.TE
.PP
   *   *   *   *   *
.SS Project references
.PP
.TS
tab(@);
l l.
T{
Command
T}@T{
Function
T}
_
T{
dotnet add reference
T}@T{
Adds a project reference.
T}
T{
dotnet list reference
T}@T{
Lists project references.
T}
T{
dotnet remove reference
T}@T{
Removes a project reference.
T}
.TE
.SS NuGet packages
.PP
.TS
tab(@);
l l.
T{
Command
T}@T{
Function
T}
_
T{
dotnet add package
T}@T{
Adds a NuGet package.
T}
T{
dotnet remove package
T}@T{
Removes a NuGet package.
T}
.TE
.SS NuGet commands
.PP
.TS
tab(@);
l l.
T{
Command
T}@T{
Function
T}
_
T{
dotnet nuget delete
T}@T{
Deletes or unlists a package from the server.
T}
T{
dotnet nuget locals
T}@T{
Clears or lists local NuGet resources such as http-request cache, temporary cache, or machine-wide global packages folder.
T}
T{
dotnet nuget push
T}@T{
Pushes a package to the server and publishes it.
T}
.TE
.SS Global Tools commands
.PP
\&.NET Core Global Tools are available starting with .NET Core SDK 2.1.300:
.PP
.TS
tab(@);
l l.
T{
Command
T}@T{
Function
T}
_
T{
dotnet tool install
T}@T{
Installs a Global Tool on your machine.
T}
T{
dotnet tool list
T}@T{
Lists all Global Tools currently installed in the default directory on your machine or in the specified path.
T}
T{
dotnet tool uninstall
T}@T{
Uninstalls a Global Tool from your machine.
T}
T{
dotnet tool update
T}@T{
Updates a Global Tool on your machine.
T}
.TE
.SS Additional tools
.PP
Starting with .NET Core SDK 2.1.300, a number of tools that were available only on a per project basis using \f[C]DotnetCliToolReference\f[R] are now available as part of the .NET Core SDK.
These tools are listed in the following table:
.PP
.TS
tab(@);
l l.
T{
Tool
T}@T{
Function
T}
_
T{
dev-certs
T}@T{
Creates and manages development certificates.
T}
T{
ef
T}@T{
Entity Framework Core command-line tools.
T}
T{
sql-cache
T}@T{
SQL Server cache command-line tools.
T}
T{
user-secrets
T}@T{
Manages development user secrets.
T}
T{
watch
T}@T{
Starts a file watcher that runs a command when files change.
T}
.TE
.PP
For more information about each tool, type \f[C]dotnet <tool-name> --help\f[R].
.SH EXAMPLES
.PP
Creates a new .NET Core console application:
.PP
\f[C]dotnet new console\f[R]
.PP
Restore dependencies for a given application:
.PP
\f[C]dotnet restore\f[R]
.PP
.PP
Build a project and its dependencies in a given directory:
.PP
\f[C]dotnet build\f[R]
.PP
Run an application DLL, such as \f[C]myapp.dll\f[R]:
.PP
\f[C]dotnet myapp.dll\f[R]
.SH ENVIRONMENT VARIABLES
.SS .NET Core 2.1
.PP
\f[C]DOTNET_PACKAGES\f[R]
.PP
The global packages folder.
If not set, it defaults to \f[C]\[ti]/.nuget/packages\f[R] on Unix or \f[C]%userprofile%\[rs].nuget\[rs]packages\f[R] on Windows.
.PP
\f[C]DOTNET_SERVICING\f[R]
.PP
Specifies the location of the servicing index to use by the shared host when loading the runtime.
.PP
\f[C]DOTNET_CLI_TELEMETRY_OPTOUT\f[R]
.PP
Specifies whether data about the .NET Core tools usage is collected and sent to Microsoft.
Set to \f[C]true\f[R] to opt-out of the telemetry feature (values \f[C]true\f[R], \f[C]1\f[R], or \f[C]yes\f[R] accepted).
Otherwise, set to \f[C]false\f[R] to opt into the telemetry features (values \f[C]false\f[R], \f[C]0\f[R], or \f[C]no\f[R] accepted).
If not set, the default is \f[C]false\f[R] and the telemetry feature is active.
.PP
\f[C]DOTNET_MULTILEVEL_LOOKUP\f[R]
.PP
Specifies whether .NET Core runtime, shared framework, or SDK are resolved from the global location.
If not set, it defaults to \f[C]true\f[R].
Set to \f[C]false\f[R] to not resolve from the global location and have isolated .NET Core installations (values \f[C]0\f[R] or \f[C]false\f[R] are accepted).
For more information about multi-level lookup, see Multi-level SharedFX Lookup.
.PP
\f[C]DOTNET_ROLL_FORWARD_ON_NO_CANDIDATE_FX\f[R]
.PP
Disables minor version roll forward, if set to \f[C]0\f[R].
For more information, see Roll forward.
.SS .NET Core 2.0
.PP
\f[C]DOTNET_PACKAGES\f[R]
.PP
The primary package cache.
If not set, it defaults to \f[C]$HOME/.nuget/packages\f[R] on Unix or \f[C]%userprofile%\[rs].nuget\[rs]packages\f[R] on Windows.
.PP
\f[C]DOTNET_SERVICING\f[R]
.PP
Specifies the location of the servicing index to use by the shared host when loading the runtime.
.PP
\f[C]DOTNET_CLI_TELEMETRY_OPTOUT\f[R]
.PP
Specifies whether data about the .NET Core tools usage is collected and sent to Microsoft.
Set to \f[C]true\f[R] to opt-out of the telemetry feature (values \f[C]true\f[R], \f[C]1\f[R], or \f[C]yes\f[R] accepted).
Otherwise, set to \f[C]false\f[R] to opt into the telemetry features (values \f[C]false\f[R], \f[C]0\f[R], or \f[C]no\f[R] accepted).
If not set, the default is \f[C]false\f[R] and the telemetry feature is active.
.PP
\f[C]DOTNET_MULTILEVEL_LOOKUP\f[R]
.PP
Specifies whether .NET Core runtime, shared framework, or SDK are resolved from the global location.
If not set, it defaults to \f[C]true\f[R].
Set to \f[C]false\f[R] to not resolve from the global location and have isolated .NET Core installations (values \f[C]0\f[R] or \f[C]false\f[R] are accepted).
For more information about multi-level lookup, see Multi-level SharedFX Lookup.
.SS .NET Core 1.x
.PP
\f[C]DOTNET_PACKAGES\f[R]
.PP
The primary package cache.
If not set, it defaults to \f[C]$HOME/.nuget/packages\f[R] on Unix or \f[C]%userprofile%\[rs].nuget\[rs]packages\f[R] on Windows.
.PP
\f[C]DOTNET_SERVICING\f[R]
.PP
Specifies the location of the servicing index to use by the shared host when loading the runtime.
.PP
\f[C]DOTNET_CLI_TELEMETRY_OPTOUT\f[R]
.PP
Specifies whether data about the .NET Core tools usage is collected and sent to Microsoft.
Set to \f[C]true\f[R] to opt-out of the telemetry feature (values \f[C]true\f[R], \f[C]1\f[R], or \f[C]yes\f[R] accepted).
Otherwise, set to \f[C]false\f[R] to opt into the telemetry features (values \f[C]false\f[R], \f[C]0\f[R], or \f[C]no\f[R] accepted).
If not set, the default is \f[C]false\f[R] and the telemetry feature is active.
.PP
   *   *   *   *   *
.SS See also
.IP \[bu] 2
Runtime Configuration Files
