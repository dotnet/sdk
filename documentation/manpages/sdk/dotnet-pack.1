'\" t
.\" Automatically generated by Pandoc 2.18
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "dotnet-pack" "1" "2022-10-10" "" ".NET Documentation"
.hy
.SH dotnet pack
.PP
\f[B]This article applies to:\f[R] \[u2714]\[uFE0F] .NET Core 3.1 SDK and later versions
.SH NAME
.PP
dotnet-pack - Packs the code into a NuGet package.
.SH SYNOPSIS
.IP
.nf
\f[C]
dotnet pack [<PROJECT>|<SOLUTION>] [-c|--configuration <CONFIGURATION>]
    [--force] [--include-source] [--include-symbols] [--interactive]
    [--no-build] [--no-dependencies] [--no-restore] [--nologo]
    [-o|--output <OUTPUT_DIRECTORY>] [--runtime <RUNTIME_IDENTIFIER>]
    [-s|--serviceable] [-v|--verbosity <LEVEL>]
    [--version-suffix <VERSION_SUFFIX>]

dotnet pack -h|--help
\f[R]
.fi
.SH DESCRIPTION
.PP
The \f[V]dotnet pack\f[R] command builds the project and creates NuGet packages.
The result of this command is a NuGet package (that is, a \f[I].nupkg\f[R] file).
.PP
If you want to generate a package that contains the debug symbols, you have two options available:
.IP \[bu] 2
\f[V]--include-symbols\f[R] - it creates the symbols package.
.IP \[bu] 2
\f[V]--include-source\f[R] - it creates the symbols package with a \f[V]src\f[R] folder inside containing the source files.
.PP
NuGet dependencies of the packed project are added to the \f[I].nuspec\f[R] file, so they\[cq]re properly resolved when the package is installed.
If the packed project has references to other projects, the other projects are not included in the package.
Currently, you must have a package per project if you have project-to-project dependencies.
.PP
By default, \f[V]dotnet pack\f[R] builds the project first.
If you wish to avoid this behavior, pass the \f[V]--no-build\f[R] option.
This option is often useful in Continuous Integration (CI) build scenarios where you know the code was previously built.
.RS
.PP
In some cases, the implicit build cannot be performed.
This can occur when \f[V]GeneratePackageOnBuild\f[R] is set, to avoid a cyclic dependency between build and pack targets.
The build can also fail if there is a locked file or other issue.
.RE
.PP
You can provide MSBuild properties to the \f[V]dotnet pack\f[R] command for the packing process.
For more information, see NuGet pack target properties and the MSBuild Command-Line Reference.
The Examples section shows how to use the MSBuild \f[V]-p\f[R] switch for a couple of different scenarios.
.RS
.PP
Web projects aren\[cq]t packable.
.RE
.SS Implicit restore
.PP
You don\[cq]t have to run \f[V]dotnet restore\f[R] because it\[cq]s run implicitly by all commands that require a restore to occur, such as \f[V]dotnet new\f[R], \f[V]dotnet build\f[R], \f[V]dotnet run\f[R], \f[V]dotnet test\f[R], \f[V]dotnet publish\f[R], and \f[V]dotnet pack\f[R].
To disable implicit restore, use the \f[V]--no-restore\f[R] option.
.PP
The \f[V]dotnet restore\f[R] command is still useful in certain scenarios where explicitly restoring makes sense, such as continuous integration builds in Azure DevOps Services or in build systems that need to explicitly control when the restore occurs.
.PP
For information about how to manage NuGet feeds, see the \f[V]dotnet restore\f[R] documentation.
.PP
This command supports the \f[V]dotnet restore\f[R] options when passed in the long form (for example, \f[V]--source\f[R]).
Short form options, such as \f[V]-s\f[R], are not supported.
.SS Workload manifest downloads
.PP
When you run this command, it initiates an asynchronous background download of advertising manifests for workloads.
If the download is still running when this command finishes, the download is stopped.
For more information, see Advertising manifests.
.SH ARGUMENTS
.PP
\f[V]PROJECT | SOLUTION\f[R]
.PP
The project or solution to pack.
It\[cq]s either a path to a csproj, vbproj, or fsproj file, or to a solution file or directory.
If not specified, the command searches the current directory for a project or solution file.
.SH OPTIONS
.IP \[bu] 2
\f[B]\f[VB]-c|--configuration <CONFIGURATION>\f[B]\f[R]
.RS 2
.PP
Defines the build configuration.
The default for most projects is \f[V]Debug\f[R], but you can override the build configuration settings in your project.
.RE
.IP \[bu] 2
\f[B]\f[VB]--force\f[B]\f[R]
.RS 2
.PP
Forces all dependencies to be resolved even if the last restore was successful.
Specifying this flag is the same as deleting the \f[I]project.assets.json\f[R] file.
.RE
.IP \[bu] 2
\f[B]\f[VB]-?|-h|--help\f[B]\f[R]
.RS 2
.PP
Prints out a description of how to use the command.
.RE
.IP \[bu] 2
\f[B]\f[VB]--include-source\f[B]\f[R]
.RS 2
.PP
Includes the debug symbols NuGet packages in addition to the regular NuGet packages in the output directory.
The sources files are included in the \f[V]src\f[R] folder within the symbols package.
.RE
.IP \[bu] 2
\f[B]\f[VB]--include-symbols\f[B]\f[R]
.RS 2
.PP
Includes the debug symbols NuGet packages in addition to the regular NuGet packages in the output directory.
.RE
.IP \[bu] 2
\f[B]\f[VB]--interactive\f[B]\f[R]
.RS 2
.PP
Allows the command to stop and wait for user input or action.
For example, to complete authentication.
Available since .NET Core 3.0 SDK.
.RE
.IP \[bu] 2
\f[B]\f[VB]--no-build\f[B]\f[R]
.RS 2
.PP
Doesn\[cq]t build the project before packing.
It also implicitly sets the \f[V]--no-restore\f[R] flag.
.RE
.IP \[bu] 2
\f[B]\f[VB]--no-dependencies\f[B]\f[R]
.RS 2
.PP
Ignores project-to-project references and only restores the root project.
.RE
.IP \[bu] 2
\f[B]\f[VB]--no-restore\f[B]\f[R]
.RS 2
.PP
Doesn\[cq]t execute an implicit restore when running the command.
.RE
.IP \[bu] 2
\f[B]\f[VB]--nologo\f[B]\f[R]
.RS 2
.PP
Doesn\[cq]t display the startup banner or the copyright message.
.RE
.IP \[bu] 2
\f[B]\f[VB]-o|--output <OUTPUT_DIRECTORY>\f[B]\f[R]
.RS 2
.PP
Places the built packages in the directory specified.
.RE
.IP \[bu] 2
\f[B]\f[VB]--runtime <RUNTIME_IDENTIFIER>\f[B]\f[R]
.RS 2
.PP
Specifies the target runtime to restore packages for.
For a list of Runtime Identifiers (RIDs), see the RID catalog.
.RE
.IP \[bu] 2
\f[B]\f[VB]-s|--serviceable\f[B]\f[R]
.RS 2
.PP
Sets the serviceable flag in the package.
For more information, see .NET Blog: .NET Framework 4.5.1 Supports Microsoft Security Updates for .NET NuGet Libraries (https://aka.ms/nupkgservicing).
.RE
.IP \[bu] 2
\f[B]\f[VB]-v|--verbosity <LEVEL>\f[B]\f[R]
.RS 2
.PP
Sets the verbosity level of the command.
Allowed values are \f[V]q[uiet]\f[R], \f[V]m[inimal]\f[R], \f[V]n[ormal]\f[R], \f[V]d[etailed]\f[R], and \f[V]diag[nostic]\f[R].
For more information, see <xref:Microsoft.Build.Framework.LoggerVerbosity>.
.RE
.IP \[bu] 2
\f[B]\f[VB]--version-suffix <VERSION_SUFFIX>\f[B]\f[R]
.RS 2
.PP
Defines the value for the \f[V]VersionSuffix\f[R] MSBuild property.
The effect of this property on the package version depends on the values of the \f[V]Version\f[R] and \f[V]VersionPrefix\f[R] properties, as shown in the following table:
.PP
.TS
tab(@);
l l.
T{
Properties with values
T}@T{
Package version
T}
_
T{
None
T}@T{
\f[V]1.0.0\f[R]
T}
T{
\f[V]Version\f[R]
T}@T{
\f[V]$(Version)\f[R]
T}
T{
\f[V]VersionPrefix\f[R] only
T}@T{
\f[V]$(VersionPrefix)\f[R]
T}
T{
\f[V]VersionSuffix\f[R] only
T}@T{
\f[V]1.0.0-$(VersionSuffix)\f[R]
T}
T{
\f[V]VersionPrefix\f[R] and \f[V]VersionSuffix\f[R]
T}@T{
\f[V]$(VersionPrefix)-$(VersionSuffix)\f[R]
T}
.TE
.PP
If you want to use \f[V]--version-suffix\f[R], specify \f[V]VersionPrefix\f[R] and not \f[V]Version\f[R] in the project file.
For example, if \f[V]VersionPrefix\f[R] is \f[V]0.1.2\f[R] and you pass \f[V]--version-suffix rc.1\f[R] to \f[V]dotnet pack\f[R], the package version will be \f[V]0.1.2-rc.1\f[R].
.PP
If \f[V]Version\f[R] has a value and you pass \f[V]--version-suffix\f[R] to \f[V]dotnet pack\f[R], the value specified for \f[V]--version-suffix\f[R] is ignored.
.RE
.SH EXAMPLES
.IP \[bu] 2
Pack the project in the current directory:
.RS 2
.IP
.nf
\f[C]
dotnet pack
\f[R]
.fi
.RE
.IP \[bu] 2
Pack the \f[V]app1\f[R] project:
.RS 2
.IP
.nf
\f[C]
dotnet pack \[ti]/projects/app1/project.csproj
\f[R]
.fi
.RE
.IP \[bu] 2
Pack the project in the current directory and place the resulting packages into the \f[V]nupkgs\f[R] folder:
.RS 2
.IP
.nf
\f[C]
dotnet pack --output nupkgs
\f[R]
.fi
.RE
.IP \[bu] 2
Pack the project in the current directory into the \f[V]nupkgs\f[R] folder and skip the build step:
.RS 2
.IP
.nf
\f[C]
dotnet pack --no-build --output nupkgs
\f[R]
.fi
.RE
.IP \[bu] 2
With the project\[cq]s version suffix configured as \f[V]<VersionSuffix>$(VersionSuffix)</VersionSuffix>\f[R] in the \f[I].csproj\f[R] file, pack the current project and update the resulting package version with the given suffix:
.RS 2
.IP
.nf
\f[C]
dotnet pack --version-suffix \[dq]ci-1234\[dq]
\f[R]
.fi
.RE
.IP \[bu] 2
Set the package version to \f[V]2.1.0\f[R] with the \f[V]PackageVersion\f[R] MSBuild property:
.RS 2
.IP
.nf
\f[C]
dotnet pack -p:PackageVersion=2.1.0
\f[R]
.fi
.RE
.IP \[bu] 2
Pack the project for a specific target framework:
.RS 2
.IP
.nf
\f[C]
dotnet pack -p:TargetFrameworks=net45
\f[R]
.fi
.RE
.IP \[bu] 2
Pack the project and use a specific runtime (Windows 10) for the restore operation:
.RS 2
.IP
.nf
\f[C]
dotnet pack --runtime win10-x64
\f[R]
.fi
.RE
.IP \[bu] 2
Pack the project using a \f[I].nuspec\f[R] file:
.RS 2
.IP
.nf
\f[C]
dotnet pack \[ti]/projects/app1/project.csproj -p:NuspecFile=\[ti]/projects/app1/project.nuspec -p:NuspecBasePath=\[ti]/projects/app1/nuget
\f[R]
.fi
.PP
For information about how to use \f[V]NuspecFile\f[R], \f[V]NuspecBasePath\f[R], and \f[V]NuspecProperties\f[R], see the following resources:
.IP \[bu] 2
Packing using a .nuspec
.IP \[bu] 2
Advanced extension points to create customized package
.IP \[bu] 2
Global properties
.RE
