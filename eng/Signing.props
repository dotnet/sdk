<Project>
  <ItemGroup>
    <!-- Dlls from packages created for tests to consume -->
    <FileSignInfo Include="dotnet-dependency-context-test.dll" CertificateName="None" />
    <FileSignInfo Include="dotnet-fallbackfoldertool.dll" CertificateName="None" />
    <FileSignInfo Include="dotnet-hello.dll" CertificateName="None" />
    <FileSignInfo Include="dotnet-outputsframeworkversion-netcoreapp1.0.dll" CertificateName="None" />
    <FileSignInfo Include="dotnet-portable-v1-prefercli.dll" CertificateName="None" />
    <FileSignInfo Include="dotnet-portable-v1.dll" CertificateName="None" />
    <FileSignInfo Include="dotnet-portable.dll" CertificateName="None" />
    <FileSignInfo Include="dotnet-prefercliruntime.dll" CertificateName="None" />
    <FileSignInfo Include="PackageWithFakeNativeDep.dll" CertificateName="None" />
    <FileSignInfo Include="dotnet-tool-with-output-name.dll" CertificateName="None" />

    <!-- Third party DLLs used by tests -->
    <FileSignInfo Include="Castle.Core.dll" CertificateName="None" />
    <FileSignInfo Include="Moq.dll" CertificateName="None" />
    
    <!-- Binary test asset -->
    <FileSignInfo Include="testwpf.dll" CertificateName="None" />

    <!-- Files in the layout that should not be signed -->
    <FileSignInfo Include="apphost.exe" CertificateName="None" />

    <!-- .ttf and .js files come in from some older aspnetcore packages (e.g. 2.1).
          These files in the 5.0 packages are NOT signed. When doing postbuild signing,
          SignTool will recognize that the files in the installer zips came from the 5.0 packages
          pulled in from aspnetcore, and aspnetcore said not to sign them. This info is not
          available for the 2.1 packages, so we need to avoid signing these in this repo. -->
    <FileExtensionSignInfo Include=".ttf" CertificateName="None" />
    <FileExtensionSignInfo Remove=".js" />
    <FileExtensionSignInfo Include=".js" CertificateName="None" />
  </ItemGroup>

  <!--
    These are third party libraries that we use in Arcade. We need to sign them even if they
    are already signed. However, they must be signed with a 3rd party certificate.
  -->
  <ItemGroup>
    <FileSignInfo Include="MessagePack.Annotations.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="MessagePack.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="Nerdbank.Streams.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="StreamJsonRpc.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="Newtonsoft.Json.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="CommandLine.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="FluentAssertions.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="FluentAssertions.Core.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="FluentAssertions.Json.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="Microsoft.3rdpartytools.MarkdownLog.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="xunit.performance.api.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="xunit.performance.core.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="xunit.performance.execution.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="xunit.performance.metrics.dll" CertificateName="3PartySHA2" />
    <FileSignInfo Include="Valleysoft.DockerCredsProvider.dll" CertificateName="3PartySHA2" />
  </ItemGroup>

  <!-- Filter out any test packages from ItemsToSign -->
  <ItemGroup>
    <ItemsToSignPostBuild Remove="*tests*.nupkg" />
    <ItemsToSign Remove="$(ArtifactsPackagesDir)**\*tests*.nupkg" />
  </ItemGroup>

  <PropertyGroup>
    <UseDotNetCertificate>true</UseDotNetCertificate>
  </PropertyGroup>
</Project>
