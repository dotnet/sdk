parameters:
  # Agent OS identifier and used as job name
  agentOs: ''

  # Agent pool
  pool: {}

  # Additional variables
  variables: {}

  # Build strategy - matrix
  strategy: ''

  # Job timeout
  timeoutInMinutes: 180

jobs:
- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/release/6.0.4xx')) }}:
  - template: /eng/common/templates/job/onelocbuild.yml
    parameters:
      CreatePr: true
      LclSource: lclFilesfromPackage
      LclPackageId: 'LCL-JUNO-PROD-DOTNETSDK'
      MirrorBranch: release/6.0.4xx
      MirrorRepo: sdk
- template: /eng/common/templates/job/job.yml
  parameters:
    name: ${{ parameters.agentOs }}
    enableMicrobuild: true
    enablePublishBuildAssets: true
    enableTelemetry: true
    enablePublishUsingPipelines: true
    helixRepo: dotnet/sdk
    pool: ${{ parameters.pool }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    ${{ if ne(parameters.strategy, '') }}:
      strategy: ${{ parameters.strategy }}
    workspace:
      clean: all
    variables:
      - ${{ insert }}: ${{ parameters.variables }}
      - _AgentOSName: ${{ parameters.agentOs }}
      - _TeamName: DotNetCore
      - _OfficialBuildIdArgs: ''
      - _PublishArgs: ''
      - _SignArgs: ''
      - _HelixApiToken: ''
      # Helix Testing requires a token when internally run
      - ${{ if ne(variables['System.TeamProject'], 'public') }}:
        - group: DotNet-HelixApi-Access
        - _HelixApiToken: $(HelixApiAccessToken)
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        - group: dotnet-benchview
        - _OfficialBuildIdArgs: /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
        - _SignArgs: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
        - _PerfIterations: 25

    steps:
    - ${{ if ne(variables['System.TeamProject'], 'public') }}:
      - task: PowerShell@2
        displayName: Setup Private Feeds Credentials
        inputs:
          filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
          arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
        env:
          Token: $(dn-bot-dnceng-artifact-feeds-rw)
    - ${{ if eq(parameters.agentOs, 'Windows_NT') }}:
      - powershell: eng\common\build.ps1
                  $(_CIBuild)
                  -configuration $(_BuildConfig)
                  $(_PublishArgs)
                  $(_SignArgs)
                  $(_OfficialBuildIdArgs)
                  /p:Test=false
                  $(_InternalRuntimeDownloadArgs)
        displayName: Build
        env:
          BuildConfig: $(_BuildConfig)
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          HelixAccessToken: ${{ parameters.HelixAccessToken }}
      - powershell: eng\runHelixAndNonHelixInParallel.ps1
              -configuration $(_BuildConfig)
              -buildSourcesDirectory $(Build.SourcesDirectory)
              -customHelixTargetQueue ${{ parameters.helixTargetQueue }}
              $(_Test)
              -additionalMSBuildParameters "$(_InternalRuntimeDownloadArgs)"
        displayName: Run Tests in Helix and non Helix in parallel
        condition: succeededOrFailed()
        env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            HelixAccessToken: $(_HelixApiToken)

    - ${{ if eq(parameters.agentOs, 'Windows_NT_FullFramework') }}:
      - powershell: eng\common\build.ps1
                  $(_CIBuild)
                  -configuration $(_BuildConfig)
                  $(_SignArgs)
                  $(_OfficialBuildIdArgs)
                  $(_InternalRuntimeDownloadArgs)
                  /p:Test=false
        displayName: Build
        env:
          BuildConfig: $(_BuildConfig)
          TestFullMSBuild: 'true'
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          HelixAccessToken: ${{ parameters.HelixAccessToken }}
      - powershell: eng\runHelixAndNonHelixInParallel.ps1
              -configuration $(_BuildConfig)
              -buildSourcesDirectory $(Build.SourcesDirectory)
              -customHelixTargetQueue ${{ parameters.helixTargetQueue }}
              $(_Test)
              -additionalMSBuildParameters "$(_InternalRuntimeDownloadArgs)"
        displayName: Run Tests in Helix and non Helix in parallel
        condition: succeededOrFailed()
        env:
            TestFullMSBuild: 'true'
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            HelixAccessToken: $(_HelixApiToken)

    - ${{ if eq(parameters.agentOs, 'Windows_NT_TestAsTools') }}:
      - powershell: eng\common\build.ps1
                  $(_CIBuild)
                  -configuration $(_BuildConfig)
                  $(_SignArgs)
                  $(_OfficialBuildIdArgs)
                  $(_InternalRuntimeDownloadArgs)
                  /p:RunTestsAsTool=true
        displayName: Build
        env:
          BuildConfig: $(_BuildConfig)

    - ${{ if notIn(parameters.agentOs, 'Windows_NT', 'Windows_NT_FullFramework', 'Windows_NT_TestAsTools') }}:
      - script: eng/common/build.sh
                  $(_CIBuild)
                  --configuration $(_BuildConfig)
                  $(_SignArgs)
                  $(_OfficialBuildIdArgs)
                  $(_InternalRuntimeDownloadArgs)
                  -p:Test=false
        displayName: Build
        env:
          BuildConfig: $(_BuildConfig)
      - powershell: eng/runHelixAndNonHelixInParallelNonWindows.ps1
                -configuration $(_BuildConfig)
                -buildSourcesDirectory $(Build.SourcesDirectory)
                -customHelixTargetQueue ${{ parameters.helixTargetQueue }}
                -officialBuildIdArgs "$(_OfficialBuildIdArgs)"
                $(_Test)
                -additionalMSBuildParameters "$(_InternalRuntimeDownloadArgs)"
        displayName: Run Tests in Helix and non Helix in parallel
        condition: succeededOrFailed()
        env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            HelixAccessToken: $(_HelixApiToken)

    - task: PublishTestResults@2
      displayName: Publish Test Results	
      inputs:	
        testResultsFormat: xUnit	
        testResultsFiles: 'artifacts/TestResults/$(_BuildConfig)/*.xml'	
        testRunTitle: '$(_AgentOSName)_$(Agent.JobName)'	
        buildPlatform: '$(BuildPlatform)'	
        buildConfiguration: '$(_BuildConfig)'	
      condition: always()

    - task: CopyFiles@2	
      displayName: Gather Logs	
      inputs:	
        SourceFolder: '$(Build.SourcesDirectory)/artifacts'	
        Contents: |	
         log/$(_BuildConfig)/**/*	
         TestResults/$(_BuildConfig)/**/*	
         SymStore/$(_BuildConfig)/**/*
        TargetFolder: '$(Build.ArtifactStagingDirectory)'	
      continueOnError: true	
      condition: always()

    - task: PublishBuildArtifacts@1	
      displayName: Publish Logs to VSTS	
      inputs:	
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'	
        ArtifactName: '$(_AgentOSName)_$(Agent.JobName)_$(Build.BuildNumber)'	
        publishLocation: Container	
      continueOnError: true	
      condition: always()
