<Project>

  <PropertyGroup>
    <!-- This repo does its own symbol package generation to avoid generating symbols for a bunch of unrelated test packages. -->
    <AutoGenerateSymbolPackages>false</AutoGenerateSymbolPackages>
    <ProducesDotNetReleaseShippingAssets>true</ProducesDotNetReleaseShippingAssets>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(EnableDefaultArtifacts)' == 'true'">
      <PropertyGroup>
        <!-- FSharp needs to push different packages to nuget.org depending on whether the SDK is preview or not,
            To achieve this, we find the FSharp compiler package, then the stable or non-stable FSharp.Core and Compiler service
            package contained within, depending on the stability switch of the SDK. The SDK then treats these packages as its own outputs,
            which means they get automatically pushed on release day. -->
        <FSharpCorePath Condition="'$(DotNetFinalVersionKind)' != 'release'">Shipping</FSharpCorePath>
        <FSharpCorePath Condition="'$(DotNetFinalVersionKind)' == 'release'">Release</FSharpCorePath>
      </PropertyGroup>
      <ItemGroup>
        <Artifact Include="$(NuGetPackageRoot)\Microsoft.FSharp.Compiler\$(MicrosoftFSharpCompilerPackageVersion)\contentFiles\$(FSharpCorePath)\FSharp.Core.*.nupkg
                           $(NuGetPackageRoot)\Microsoft.FSharp.Compiler\$(MicrosoftFSharpCompilerPackageVersion)\contentFiles\$(FSharpCorePath)\FSharp.Compiler.Service.*.nupkg"
                  PublishFlatContainer="false" />
      </ItemGroup>
    </When>
    <Otherwise>
      <ItemGroup>
        <Artifact Include="$(ArtifactsPackagesDir)**\VS.Tools.*.nupkg;
                          $(ArtifactsPackagesDir)**\VS.Redist.*.nupkg"
                  IsShipping="$([System.String]::Copy('%(RecursiveDir)').StartsWith('Shipping'))"
                  PublishFlatContainer="false" />
      </ItemGroup>
    </Otherwise>
  </Choose>
</Project>
