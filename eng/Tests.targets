<Project>
    <PropertyGroup>
        <_ErrorOnTestFailure>false</_ErrorOnTestFailure>
    </PropertyGroup>
  
    <Target Name="RerunFailedTests"
            DependsOnTargets="LogTestFailures;
                              RerunTests"
            AfterTargets="GetTestFailures"
            Condition="'$(_TestErrorCode)' != '0' and '$(_TestFailureCount)' &gt; '0' and '$(_TestFailureCount)' &lt; '3'">
    </Target>

    <Target Name="GetTestFailures"
            AfterTargets="RunTests" >
        <XmlPeek XmlInputPath="%(TestToRun.ResultsXmlPath)" Query="assemblies/assembly/@failed" >
            <Output TaskParameter="Result" PropertyName="_TestFailureCount" />
        </XmlPeek>
        <XmlPeek XmlInputPath="%(TestToRun.ResultsXmlPath)" Query="assemblies/assembly/collection/test[@result='Fail']/@name" >
            <Output TaskParameter="Result" ItemName="_FailingTests" />
        </XmlPeek>
        <XmlPeek XmlInputPath="%(TestToRun.ResultsXmlPath)" Query="assemblies/assembly/collection/test[@result='Fail']/." >
            <Output TaskParameter="Result" ItemName="_FailingTestsDebuggingInfo" />
        </XmlPeek>

        <Error Text="Could not determine failing tests" Condition="'@(_FailingTests->Count())' !=  '$(_TestFailureCount)'" />
    </Target>

    <Target Name="LogTestFailures" >
        <Message Text="Logging test failures" />
        <PropertyGroup>
            <_RerunTestFailuresPath>$(ArtifactsTestResultsDir)RerunTestFailures.xml</_RerunTestFailuresPath>
        </PropertyGroup>

        <WriteLinesToFile File="$(_RerunTestFailuresPath)"
                          Lines="@(_FailingTestsDebuggingInfo)"
                          Overwrite="false" />
    </Target>

    <Target Name="RerunTests">
        <Message Text="Rerunning $(_TestFailureCount) tests: $(_TestAssembly) [$(_TestEnvironment)]" Importance="high" />

        <!-- Ensure that we only run failing tests -->
        <PropertyGroup>
            <_MethodFilteringArgs>-method @(_FailingTests, ' -method ')</_MethodFilteringArgs>
            <_TestRunnerCommand>"$(_TestRunner)" $(_TestRunnerArgs) $(_MethodFilteringArgs)</_TestRunnerCommand>
            <_TestRunnerCommand Condition="'$(TestCaptureOutput)' != 'false'">$(_TestRunnerCommand) > "%(TestToRun.ResultsStdOutPath)" 2>&amp;1</_TestRunnerCommand>
        </PropertyGroup>

        <!-- Rerun failed tests -->
        <Exec Command='$(_TestRunnerCommand)'
            LogStandardErrorAsError="false"
            WorkingDirectory="$(_TargetDir)"
            IgnoreExitCode="true"
            Timeout="$(_TestTimeout)"
            ContinueOnError="WarnAndContinue">
            <Output TaskParameter="ExitCode" PropertyName="_TestErrorCode" />
        </Exec>

        <!-- Ensure that tests were successfully rerun -->
        <XmlPeek XmlInputPath="%(TestToRun.ResultsXmlPath)" Query="assemblies/assembly/@failed" >
            <Output TaskParameter="Result" PropertyName="_RerunCount" />
        </XmlPeek>
        <Error Text="Failed to rerun tests" Condition="'$(_RerunCount)' !=  '$(_TestFailureCount)'" />

        <!-- Add command line to the log. -->
        <WriteLinesToFile File="%(TestToRun.ResultsStdOutPath)" 
                          Overwrite="false" 
                          Lines=";=== COMMAND LINE ===;$(_TestRunnerCommand)"
                          Condition="'$(TestCaptureOutput)' != 'false'" />

        <!-- Report test status. -->
        <Message Text="Tests succeeded on rerun: $(_TestAssembly) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' == '0'" Importance="high" />
        <Error Text="Tests failed on rerun: $(_ResultsFileToDisplay) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' != '0'" File="XUnit" />
    </Target>
</Project>