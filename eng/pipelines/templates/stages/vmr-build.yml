### This stage builds https://github.com/dotnet/dotnet with varying parameters
### If run in a PR, new changes are applied to a local copy of the VMR, then it is built and tested

parameters:
# Branch of the VMR to use (to push to for internal builds)
- name: vmrBranch
  type: string
  default: $(Build.SourceBranch)

# Scope of jobs which are executed
- name: scope
  type: string
  values:
  # run 1 leg for smoke tests
  - ultralite
  # run several legs e.g. win/linux/mac for basic testing
  - lite
  # run everything
  - full

# True when build is running from dotnet/dotnet directly
- name: isBuiltFromVmr
  type: boolean
  default: false

# True when building the VMR in source-only mode
- name: isSourceOnlyBuild
  type: boolean
  default: false

# These are not expected to be passed it but rather just object variables reused below
- name: pool_Linux
  type: object
  default:
    name: $(defaultPoolName)
    image: $(poolImage_Linux)
    demands: ImageOverride -equals $(poolImage_Linux)
    os: linux

- name: pool_Windows
  type: object
  default:
    name: $(defaultPoolName)
    image: $(poolImage_Windows)
    demands: ImageOverride -equals $(poolImage_Windows)
    os: windows

- name: pool_LinuxArm64
  type: object
  default:
    name: $(poolName_LinuxArm64)
    image: $(poolImage_LinuxArm64)
    demands: ImageOverride -equals $(poolImage_LinuxArm64)
    hostArchitecture: Arm64
    os: linux

- name: pool_Mac
  type: object
  default:
    name: Azure Pipelines
    vmImage: $(poolImage_Mac)
    os: macOS


- name: pool_Linux_Shortstack
  type: object
  default:
    name: $(shortStackPoolName)
    image: $(poolImage_Linux)
    demands: ImageOverride -equals $(poolImage_Linux)
    os: linux

#### SOURCE-ONLY BUILD ####
stages:
- ${{ if parameters.isSourceOnlyBuild }}:
  - stage: VMR_SourceOnly_Build
    displayName: VMR Source-Only Build
    dependsOn: []
    variables:
    - template: ../variables/vmr-build.yml
      parameters:
        vmrBranch: ${{ parameters.vmrBranch }}

    jobs:

    ### Jobs for ultralite builds ###
    - template: ../jobs/vmr-build.yml
      parameters:
        # Changing the build name requires updating the referenced name in the source-build-sdk-diff-tests.yml pipeline
        buildName: ${{ format('{0}_Online_MsftSdk', variables.centOSStreamName) }}
        isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
        vmrBranch: ${{ variables.VmrBranch }}
        targetArchitecture: x64
        pool: ${{ parameters.pool_Linux }}
        container:
          name: ${{ variables.centOSStreamContainerName }}
          image: ${{ variables.centOSStreamContainerImage }}
        buildFromArchive: false            # ðŸš«
        buildSourceOnly: true              # âœ…
        enablePoison: false                # ðŸš«
        excludeOmniSharpTests: true        # âœ…
        runOnline: true                    # âœ…
        useMonoRuntime: false              # ðŸš«
        withPreviousSDK: false             # ðŸš«

    - template: ../jobs/vmr-build.yml
      parameters:
        buildName: ${{ format('{0}_Offline_CurrentSourceBuiltSdk', variables.centOSStreamName) }}
        isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
        vmrBranch: ${{ variables.VmrBranch }}
        targetArchitecture: x64
        pool: ${{ parameters.pool_Linux }}
        container:
          name: ${{ variables.centOSStreamContainerName }}
          image: ${{ variables.centOSStreamContainerImage }}
        buildFromArchive: false            # ðŸš«
        buildSourceOnly: true              # âœ…
        enablePoison: false                # ðŸš«
        excludeOmniSharpTests: true        # âœ…
        runOnline: false                   # ðŸš«
        useMonoRuntime: false              # ðŸš«
        withPreviousSDK: false             # ðŸš«
        reuseBuildArtifactsFrom:
        - ${{ format('{0}_Online_MsftSdk_x64', variables.centOSStreamName) }}

    ### Additional jobs for lite/full builds ###
    - ${{ if in(parameters.scope, 'lite', 'full') }}:

      - template: ../jobs/vmr-build.yml
        parameters:
          # Changing the build name requires updating the referenced name in the source-build-sdk-diff-tests.yml pipeline
          buildName: ${{ format('{0}_Offline_MsftSdk', variables.ubuntuName) }}
          isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
          vmrBranch: ${{ variables.VmrBranch }}
          targetArchitecture: x64
          pool: ${{ parameters.pool_Linux }}
          container:
            name: ${{ variables.ubuntuContainerName }}
            image: ${{ variables.ubuntuContainerImage }}
          buildFromArchive: false            # ðŸš«
          buildSourceOnly: true              # âœ…
          enablePoison: false                # ðŸš«
          excludeOmniSharpTests: false       # ðŸš«
          runOnline: false                   # ðŸš«
          useMonoRuntime: false              # ðŸš«
          withPreviousSDK: false             # ðŸš«

      - template: ../jobs/vmr-build.yml
        parameters:
          # Changing the build name requires updating the referenced name in the source-build-sdk-diff-tests.yml pipeline
          buildName: ${{ format('{0}_Offline_PreviousSourceBuiltSdk', variables.centOSStreamName) }}
          isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
          vmrBranch: ${{ variables.VmrBranch }}
          targetArchitecture: x64
          artifactsRid: ${{ variables.centOSStreamX64Rid }}
          pool: ${{ parameters.pool_Linux }}
          container:
            name: ${{ variables.centOSStreamContainerName }}
            image: ${{ variables.centOSStreamContainerImage }}
          buildFromArchive: false            # ðŸš«
          buildSourceOnly: true              # âœ…
          enablePoison: true                 # âœ…
          excludeOmniSharpTests: true        # âœ…
          runOnline: false                   # ðŸš«
          useMonoRuntime: false              # ðŸš«
          withPreviousSDK: true              # âœ…

      ### Additional jobs for full build ###
      - ${{ if in(parameters.scope, 'full') }}:

        # This AlmaLinux leg is intended to build with the min supported glibc version
        - template: ../jobs/vmr-build.yml
          parameters:
            # Changing the build name requires updating the referenced name in the source-build-sdk-diff-tests.yml pipeline
            buildName: ${{ format('{0}_Offline_MsftSdk', variables.almaLinuxName) }}
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            targetArchitecture: x64
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.almaLinuxContainerName }}
              image: ${{ variables.almaLinuxContainerImage }}
            targetRid: ${{ variables.almaLinuxX64Rid }}
            buildFromArchive: false            # ðŸš«
            buildSourceOnly: true              # âœ…
            enablePoison: false                # ðŸš«
            excludeOmniSharpTests: true        # âœ…
            runOnline: false                   # ðŸš«
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: false             # ðŸš«

        - template: ../jobs/vmr-build.yml
          parameters:
            # Changing the build name requires updating the referenced name in the source-build-sdk-diff-tests.yml pipeline
            buildName: ${{ format('{0}_Offline_MsftSdk', variables.alpineName) }}
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            targetArchitecture: x64
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.alpineContainerName }}
              image: ${{ variables.alpineContainerImage }}
            targetRid: ${{ variables.alpineX64Rid }}
            buildFromArchive: false            # ðŸš«
            buildSourceOnly: true              # âœ…
            enablePoison: false                # ðŸš«
            excludeOmniSharpTests: true        # âœ…
            runOnline: false                   # ðŸš«
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: false             # ðŸš«

        - template: ../jobs/vmr-build.yml
          parameters:
            # Changing the build name requires updating the referenced name in the source-build-sdk-diff-tests.yml pipeline
            buildName: ${{ format('{0}_Offline_MsftSdk', variables.centOSStreamName) }}
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            targetArchitecture: x64
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.centOSStreamContainerName }}
              image: ${{ variables.centOSStreamContainerImage }}
            buildFromArchive: true             # âœ…
            buildSourceOnly: true              # âœ…
            enablePoison: false                # ðŸš«
            excludeOmniSharpTests: false       # ðŸš«
            runOnline: false                   # ðŸš«
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: false             # ðŸš«

        - template: ../jobs/vmr-build.yml
          parameters:
            # Changing the build name requires updating the referenced name in the source-build-sdk-diff-tests.yml pipeline
            buildName: ${{ format('{0}_Online_PreviousSourceBuiltSdk', variables.centOSStreamName) }}
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            targetArchitecture: x64
            artifactsRid: ${{ variables.centOSStreamX64Rid }}
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.centOSStreamContainerName }}
              image: ${{ variables.centOSStreamContainerImage }}
            buildFromArchive: false            # ðŸš«
            buildSourceOnly: true              # âœ…
            enablePoison: false                # ðŸš«
            excludeOmniSharpTests: false       # ðŸš«
            runOnline: true                    # âœ…
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: true              # âœ…

        - template: ../jobs/vmr-build.yml
          parameters:
            # Changing the build name requires updating the referenced name in the source-build-sdk-diff-tests.yml pipeline
            buildName: ${{ format('{0}_Mono_Offline_MsftSdk', variables.centOSStreamName) }}
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            targetArchitecture: x64
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.centOSStreamContainerName }}
              image: ${{ variables.centOSStreamContainerImage }}
            buildFromArchive: true             # âœ…
            buildSourceOnly: true              # âœ…
            enablePoison: false                # ðŸš«
            excludeOmniSharpTests: true        # âœ…
            runOnline: false                   # ðŸš«
            useMonoRuntime: true               # âœ…
            withPreviousSDK: false             # ðŸš«

        - template: ../jobs/vmr-build.yml
          parameters:
            # Changing the build name requires updating the referenced name in the source-build-sdk-diff-tests.yml pipeline
            buildName: ${{ format('{0}_Offline_MsftSdk', variables.fedoraName) }}
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            targetArchitecture: x64
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.fedoraContainerName }}
              image: ${{ variables.fedoraContainerImage }}
            buildFromArchive: true             # âœ…
            buildSourceOnly: true              # âœ…
            enablePoison: false                # ðŸš«
            excludeOmniSharpTests: false       # ðŸš«
            runOnline: false                   # ðŸš«
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: false             # ðŸš«

        - template: ../jobs/vmr-build.yml
          parameters:
            # Changing the build name requires updating the referenced name in the source-build-sdk-diff-tests.yml pipeline
            buildName: ${{ format('{0}Arm64_Offline_MsftSdk', variables.ubuntuName) }}
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            targetArchitecture: arm64
            pool: ${{ parameters.pool_LinuxArm64 }}
            container:
              name: ${{ variables.ubuntuArmContainerName }}
              image: ${{ variables.ubuntuArmContainerImage }}
            buildFromArchive: false            # ðŸš«
            buildSourceOnly: true              # âœ…
            enablePoison: false                # ðŸš«
            excludeOmniSharpTests: false       # ðŸš«
            runOnline: false                   # ðŸš«
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: false             # ðŸš«

        - template: ../jobs/vmr-build.yml
          parameters:
            # Changing the build name requires updating the referenced name in the source-build-sdk-diff-tests.yml pipeline
            buildName: ${{ format('{0}_Offline_CurrentSourceBuiltSdk', variables.fedoraName) }}
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            targetArchitecture: x64
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.fedoraContainerName }}
              image: ${{ variables.fedoraContainerImage }}
            buildFromArchive: false            # ðŸš«
            buildSourceOnly: true              # âœ…
            enablePoison: false                # ðŸš«
            excludeOmniSharpTests: false       # ðŸš«
            runOnline: false                   # ðŸš«
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: false             # ðŸš«
            reuseBuildArtifactsFrom:
            - ${{ format('{0}_Offline_MsftSdk_x64', variables.fedoraName) }}

        - template: ../jobs/vmr-build.yml
          parameters:
            # Changing the build name requires updating the referenced name in the source-build-sdk-diff-tests.yml pipeline
            buildName: ${{ format('{0}_Mono_Offline_CurrentSourceBuiltSdk', variables.centOSStreamName) }}
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            targetArchitecture: x64
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.centOSStreamContainerName }}
              image: ${{ variables.centOSStreamContainerImage }}
            buildFromArchive: true             # âœ…
            buildSourceOnly: true              # âœ…
            enablePoison: false                # ðŸš«
            excludeOmniSharpTests: true        # âœ…
            runOnline: false                   # ðŸš«
            useMonoRuntime: true               # âœ…
            withPreviousSDK: false             # ðŸš«
            reuseBuildArtifactsFrom:
            - ${{ format('{0}_Mono_Offline_MsftSdk_x64', variables.centOSStreamName) }}

#### VERTICAL BUILD (Validation) ####
- ${{ if and(not(parameters.isSourceOnlyBuild), or(eq(variables['Build.Reason'], 'PullRequest'), ne(variables['System.TeamProject'], 'internal'))) }}:
  - stage: VMR_Vertical_Build_Validation
    displayName: VMR Vertical Build Validation
    dependsOn: []
    variables:
    - template: ../variables/vmr-build.yml
      parameters:
        vmrBranch: ${{ parameters.vmrBranch }}
    jobs:

    - template: ../jobs/vmr-build.yml
      parameters:
        buildName: ${{ format('{0}_DevVersions', variables.ubuntuName) }}
        isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
        vmrBranch: ${{ variables.VmrBranch }}
        pool: ${{ parameters.pool_Linux }}
        container:
          name: ${{ variables.ubuntuContainerName }}
          image: ${{ variables.ubuntuContainerImage }}
        targetOS: linux
        targetArchitecture: x64
        useDevVersions: true # Use dev versions for CI validation of the experience.

    - template: ../jobs/vmr-build.yml
      parameters:
        buildName: Windows_DevVersions
        isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
        vmrBranch: ${{ variables.VmrBranch }}
        pool: ${{ parameters.pool_Windows }}
        targetOS: windows
        targetArchitecture: x86
        useDevVersions: true # Use dev versions for CI validation of the experience.

#### VERTICAL BUILD (Official) ####
- ${{ if not(parameters.isSourceOnlyBuild) }}:
  - stage: VMR_Vertical_Build
    displayName: VMR Vertical Build
    dependsOn: []
    variables:
    - template: ../variables/vmr-build.yml
      parameters:
        vmrBranch: ${{ parameters.vmrBranch }}
    jobs:

    - template: ../jobs/vmr-build.yml
      parameters:
        buildName: Windows
        isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
        vmrBranch: ${{ variables.VmrBranch }}
        pool: ${{ parameters.pool_Windows }}
        targetOS: windows
        targetArchitecture: x64

    - template: ../jobs/vmr-build.yml
      parameters:
        buildName: Android_Shortstack
        isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
        vmrBranch: ${{ variables.VmrBranch }}
        pool: ${{ parameters.pool_Linux_Shortstack }}
        container:
          name: ${{ variables.androidCrossContainerName }}
          image: ${{ variables.androidCrossContainerImage }}
        targetOS: android
        targetArchitecture: arm64

    - template: ../jobs/vmr-build.yml
      parameters:
        buildName: Browser_Shortstack
        isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
        vmrBranch: ${{ variables.VmrBranch }}
        pool: ${{ parameters.pool_Linux_Shortstack }}
        container:
          name: ${{ variables.browserCrossContainerName }}
          image: ${{ variables.browserCrossContainerImage }}
        crossRootFs: '/crossrootfs/x64'
        targetOS: browser
        targetArchitecture: wasm

    - template: ../jobs/vmr-build.yml
      parameters:
        buildName: iOSSimulator_Shortstack
        isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
        vmrBranch: ${{ variables.VmrBranch }}
        pool: ${{ parameters.pool_Mac }}
        targetOS: iossimulator
        targetArchitecture: arm64

    ### Additional jobs for full build ###
    - ${{ if in(parameters.scope, 'full') }}:

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: Android_Shortstack
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux_Shortstack }}
            container:
              name: ${{ variables.androidCrossContainerName }}
              image: ${{ variables.androidCrossContainerImage }}
            targetOS: android
            targetArchitecture: arm

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: Android_Shortstack
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux_Shortstack }}
            container:
              name: ${{ variables.androidCrossContainerName }}
              image: ${{ variables.androidCrossContainerImage }}
            targetOS: android
            targetArchitecture: x64

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: Android_Shortstack
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux_Shortstack }}
            container:
              name: ${{ variables.androidCrossContainerName }}
              image: ${{ variables.androidCrossContainerImage }}
            targetOS: android
            targetArchitecture: x86

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: Browser_Multithreaded_Shortstack
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux_Shortstack }}
            container:
              name: ${{ variables.browserCrossContainerName }}
              image: ${{ variables.browserCrossContainerImage }}
            crossRootFs: '/crossrootfs/x64'
            targetOS: browser
            targetArchitecture: wasm
            extraProperties: /p:DotNetBuildRuntimeWasmEnableThreads=true

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: LinuxBionic_Shortstack
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux_Shortstack }}
            container:
              name: ${{ variables.linuxBionicCrossContainerName }}
              image: ${{ variables.linuxBionicCrossContainerImage }}
            crossRootFs: '/crossrootfs/x64'
            targetOS: linux-bionic
            targetArchitecture: arm64

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: LinuxBionic_Shortstack
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux_Shortstack }}
            container:
              name: ${{ variables.linuxBionicCrossContainerName }}
              image: ${{ variables.linuxBionicCrossContainerImage }}
            crossRootFs: '/crossrootfs/x64'
            targetOS: linux-bionic
            targetArchitecture: arm

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: LinuxBionic_Shortstack
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux_Shortstack }}
            container:
              name: ${{ variables.linuxBionicCrossContainerName }}
              image: ${{ variables.linuxBionicCrossContainerImage }}
            crossRootFs: '/crossrootfs/x64'
            targetOS: linux-bionic
            targetArchitecture: x64

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: iOS_Shortstack
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Mac }}
            targetOS: ios
            targetArchitecture: arm64

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: iOSSimulator_Shortstack
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Mac }}
            targetOS: iossimulator
            targetArchitecture: x64

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: MacCatalyst_Shortstack
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Mac }}
            targetOS: maccatalyst
            targetArchitecture: arm64

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: MacCatalyst_Shortstack
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Mac }}
            targetOS: maccatalyst
            targetArchitecture: x64

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: tvOS_Shortstack
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Mac }}
            targetOS: tvos
            targetArchitecture: arm64

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: tvOSSimulator_Shortstack
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Mac }}
            targetOS: tvossimulator
            targetArchitecture: arm64

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: tvOSSimulator_Shortstack
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Mac }}
            targetOS: tvossimulator
            targetArchitecture: x64

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: Wasi_Shortstack
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux_Shortstack }}
            container:
              name: ${{ variables.wasiCrossContainerName }}
              image: ${{ variables.wasiCrossContainerImage }}
            crossRootFs: '/crossrootfs/x64'
            targetOS: wasi
            targetArchitecture: wasm

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: OSX
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Mac }}
            targetOS: osx
            targetArchitecture: x64

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: AzureLinux_x64_Cross
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.azurelinuxX64CrossContainerName }}
              image: ${{ variables.azurelinuxX64CrossContainerImage }}
            crossRootFs: '/crossrootfs/x64'
            targetOS: linux
            targetArchitecture: x64

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: AzureLinux_x64_Cross_Pgo
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.azurelinuxX64CrossContainerName }}
              image: ${{ variables.azurelinuxX64CrossContainerImage }}
            crossRootFs: '/crossrootfs/x64'
            targetOS: linux
            targetArchitecture: x64
            extraProperties: /p:PgoInstrument=true
            sign: false

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: AzureLinux_x64_Cross_Shortstack_Mono_LLVMAOT
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux_Shortstack }}
            container:
              name: ${{ variables.azurelinuxX64CrossContainerName }}
              image: ${{ variables.azurelinuxX64CrossContainerImage }}
            crossRootFs: '/crossrootfs/x64'
            useMonoRuntime: true
            targetOS: linux
            targetArchitecture: x64
            extraProperties: /p:DotNetBuildMonoEnableLLVM=true /p:DotNetBuildMonoAOTEnableLLVM=true /p:DotNetBuildMonoBundleLLVMOptimizer=true

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: AzureLinux_x64_Cross
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.azurelinuxArmCrossContainerName }}
              image: ${{ variables.azurelinuxArmCrossContainerImage }}
            crossRootFs: '/crossrootfs/arm'
            targetOS: linux
            targetArchitecture: arm

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: AzureLinux_x64_Cross
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.azurelinuxArm64CrossContainerName }}
              image: ${{ variables.azurelinuxArm64CrossContainerImage }}
            crossRootFs: '/crossrootfs/arm64'
            targetOS: linux
            targetArchitecture: arm64

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: AzureLinux_x64_Cross_Pgo
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.azurelinuxArm64CrossContainerName }}
              image: ${{ variables.azurelinuxArm64CrossContainerImage }}
            crossRootFs: '/crossrootfs/arm64'
            targetOS: linux
            targetArchitecture: arm64
            extraProperties: /p:PgoInstrument=true
            sign: false

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: AzureLinux_x64_Cross_Alpine
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.azurelinuxX64AlpineCrossContainerName }}
              image: ${{ variables.azurelinuxX64AlpineCrossContainerImage }}
            crossRootFs: '/crossrootfs/x64'
            targetOS: linux-musl
            targetArchitecture: x64
            targetRid: ${{ variables.linuxMuslX64Rid }}

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: AzureLinux_x64_Cross_Alpine
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.azurelinuxArmAlpineCrossContainerName }}
              image: ${{ variables.azurelinuxArmAlpineCrossContainerImage }}
            crossRootFs: '/crossrootfs/arm'
            targetOS: linux-musl
            targetArchitecture: arm
            targetRid: ${{ variables.linuxMuslArmRid }}

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: AzureLinux_x64_Cross_Alpine
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux }}
            container:
              name: ${{ variables.azurelinuxArm64AlpineCrossContainerName }}
              image: ${{ variables.azurelinuxArm64AlpineCrossContainerImage }}
            crossRootFs: '/crossrootfs/arm64'
            targetOS: linux-musl
            targetArchitecture: arm64
            targetRid: ${{ variables.linuxMuslArm64Rid }}

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: AzureLinux_x64_Cross_Shortstack_Mono_LLVMAOT
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Linux_Shortstack }}
            container:
              name: ${{ variables.azurelinuxArm64CrossContainerName }}
              image: ${{ variables.azurelinuxArm64CrossContainerImage }}
            crossRootFs: '/crossrootfs/arm64'
            useMonoRuntime: true
            targetOS: linux
            targetArchitecture: arm64
            extraProperties: /p:DotNetBuildMonoEnableLLVM=true /p:DotNetBuildMonoAOTEnableLLVM=true /p:DotNetBuildMonoBundleLLVMOptimizer=true

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: OSX
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Mac }}
            targetOS: osx
            targetArchitecture: arm64

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: Windows
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Windows }}
            targetOS: windows
            targetArchitecture: arm64

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: Windows
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Windows }}
            targetOS: windows
            targetArchitecture: x86

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: Windows_Pgo
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Windows }}
            targetOS: windows
            targetArchitecture: x64
            extraProperties: /p:PgoInstrument=true
            sign: false

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: Windows_Pgo
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Windows }}
            targetOS: windows
            targetArchitecture: x86
            extraProperties: /p:PgoInstrument=true
            sign: false

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: Windows_Pgo
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Windows }}
            targetOS: windows
            targetArchitecture: arm64
            extraProperties: /p:PgoInstrument=true
            sign: false

        # Build Pass 2 verticals

        - template: ../jobs/vmr-build.yml
          parameters:
            buildName: Windows
            isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
            vmrBranch: ${{ variables.VmrBranch }}
            pool: ${{ parameters.pool_Windows }}
            targetOS: windows
            targetArchitecture: x64
            runTests: false
            buildPass: 2
            reuseBuildArtifactsFrom:
            - Windows_x64
            - Windows_x86
            - Windows_arm64

### FINAL JOIN ###
- ${{ if and(parameters.isBuiltFromVmr, not(parameters.isSourceOnlyBuild), ne(variables['Build.Reason'], 'PullRequest')) }}:
  - stage: VMR_Final_Join
    displayName: VMR Final Join
    dependsOn: VMR_Vertical_Build
    variables:
    - template: ../variables/vmr-build.yml
      parameters:
        vmrBranch: ${{ parameters.vmrBranch }}
    jobs:
    - job: FinalJoin
      displayName: Final Build Pass
      pool: ${{ parameters.pool_Windows }}
      timeoutInMinutes: 240
      templateContext:
        outputParentDirectory: $(Build.ArtifactStagingDirectory)/artifacts
        outputs:
        - output: buildArtifacts
          PathtoPublish: $(Build.ArtifactStagingDirectory)/artifacts/MergedManifest.xml
          ArtifactName: AssetManifests
          displayName: Publish Merged Manifest
          sbomEnabled: false
        - output: buildArtifacts
          PathtoPublish: $(Build.ArtifactStagingDirectory)/artifacts/assets
          ArtifactName: BlobArtifacts
          displayName: Publish Blob Artifacts
          sbomEnabled: false
        - output: buildArtifacts
          PathtoPublish: $(Build.ArtifactStagingDirectory)/artifacts/packages
          ArtifactName: PackageArtifacts
          displayName: Publish Package Artifacts
          sbomEnabled: false
      steps:
      - template: ../steps/vmr-join-verticals.yml
        parameters:
          dotNetBuildPass: final
          primaryDependentJob: Windows_x64
          outputFolder: $(Build.ArtifactStagingDirectory)/artifacts
  
### VALIDATION ###
- ${{ if and(parameters.isBuiltFromVmr, not(parameters.isSourceOnlyBuild), eq(variables['System.TeamProject'], 'internal')) }}:
  - stage: VMR_Validation
    displayName: VMR Validation
    dependsOn: VMR_Final_Join
    jobs:
    - job: ValidateSigning
      displayName: Validate Signing
      pool: ${{ parameters.pool_Windows }}
      timeoutInMinutes: 240
      steps:
      - template: ../steps/vmr-validate-signing.yml
        parameters:
          continueOnError: true
