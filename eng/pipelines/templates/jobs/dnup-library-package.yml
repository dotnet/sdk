parameters:
  ### GENERAL ###
  variables: {}
  dependsOn: ''
  helixTargetQueue: ''
  oneESCompat:
    templateFolderName: templates
    publishTaskPrefix: ''
  container: ''
  helixTargetContainer: ''
  categoryName: dnup
  runTests: true
  publishRetryConfig: false
  publishXunitResults: false
  enableSbom: true
  timeoutInMinutes: 150

jobs:
- template: /eng/common/${{ parameters.oneESCompat.templateFolderName }}/job/job.yml
  parameters:
    displayName: '${{ parameters.pool.emoji }} dnup package: ${{ parameters.pool.os }} (${{ parameters.helixTargetQueue }})'
    pool: ${{ parameters.pool }}
    container: ${{ parameters.container }}
    strategy: ${{ parameters.strategy }}
    helixRepo: dotnet/sdk
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    enableMicrobuild: true
    enablePublishBuildAssets: true
    enableTelemetry: true
    enablePublishUsingPipelines: true
    enableSbom: ${{ parameters.enableSbom }}
    variables:
    - ${{ insert }}: ${{ parameters.variables }}
    dependsOn: ${{ parameters.dependsOn }}
    preSteps: ${{ parameters.preSteps }}
    templateContext:
      sdl:
        binskim:
          analyzeTargetGlob: +:f|eng\**\*.props;+:f|artifacts\bin\**\*.dll;+:f|artifacts\bin\**\*.exe;-:f|artifacts\bin\**\msdia140.dll;-:f|artifacts\bin\**\pgort140.dll;-:f|artifacts\bin\*Tests\**;-:f|**\Microsoft.NET.Runtime.Emscripten**\tools\**;-:f|**\CodeCoverage\**;-:f|artifacts\bin\**\capstone.dll;
      outputs:
      - output: pipelineArtifact
        displayName: '🌐 Publish dnup library package from standard ci'
        condition: always()
        targetPath: '$(Build.SourcesDirectory)/artifacts/packages/Release/NonShipping/'
        artifactName: 'Microsoft.Dotnet.Installation.1.0.0-alpha.nupkg' # TODO: Replace hard-coded with * or version
        publishLocation: Container
      - output: pipelineArtifact
        displayName: '🌏 Publish dnup library package from Arcade'
        condition: always()
        targetPath: ' $(System.DefaultWorkingDirectory)/artifacts/packages/Release/Shipping/'
        artifactName: 'Microsoft.Dotnet.Installation.1.0.0-alpha.nupkg' # TODO: Replace hard-coded with * or version
        publishLocation: Container

    steps:
    - ${{ if eq(parameters.pool.os, 'windows') }}:
      - powershell: |
          & .\restore.cmd
        displayName: 🍱 Bootstrap toolset (Windows)
      - powershell: |
          & .\.dotnet\dotnet restore test\dnup.Tests\dnup.Tests.csproj
        displayName: ♻️ Restore dnup tests (Windows)
      - powershell: |
          & .\.dotnet\dotnet build test\dnup.Tests\dnup.Tests.csproj -c Release --no-restore
        displayName: 💻 Build Windows
      - powershell: |
           & .\.dotnet\dotnet pack .\src\Installer\Microsoft.Dotnet.Installation\Microsoft.Dotnet.Installation.csproj
        displayName: 📦 Package dnup library
      - powershell: >-
          eng/common/build.ps1
          -restore -build -sign -pack -publish -ci
          -verbosity detailed
          -binaryLog
          -configuration $(_BuildConfig)
          -projects src\Installer\Microsoft.Dotnet.Installation\Microsoft.Dotnet.Installation.csproj;src\Installer\dnup\dnup.csproj
          /p:DotNetSignType=$(_SignType)
          /p:TeamName=$(_TeamName)
          /p:DotNetPublishUsingPipelines=true
          /p:OfficialBuildId=$(OfficialBuildId)
          /p:StabilizePackageVersion=${{ parameters.stabilizePackageVersion }}
        displayName: 📦 Package dnup library (arcade)
