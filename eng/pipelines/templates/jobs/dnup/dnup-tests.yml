parameters:
  ### GENERAL ###
  variables: {}
  dependsOn: ''
  helixTargetQueue: ''
  oneESCompat:
    templateFolderName: templates
    publishTaskPrefix: ''
  container: ''
  helixTargetContainer: ''
  categoryName: dnup
  runTests: true
  publishRetryConfig: false
  publishXunitResults: false
  enableSbom: true
  timeoutInMinutes: 150

jobs:
- template: /eng/common/${{ parameters.oneESCompat.templateFolderName }}/job/job.yml
  parameters:
    displayName: '${{ parameters.pool.emoji }} dnup tests: ${{ parameters.pool.os }} (${{ parameters.helixTargetQueue }})'
    pool: ${{ parameters.pool }}
    container: ${{ parameters.container }}
    strategy: ${{ parameters.strategy }}
    helixRepo: dotnet/sdk
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    enableMicrobuild: true
    enablePublishBuildAssets: true
    enableTelemetry: true
    enablePublishUsingPipelines: true
    enableSbom: ${{ parameters.enableSbom }}
    variables:
    - ${{ insert }}: ${{ parameters.variables }}
    dependsOn: ${{ parameters.dependsOn }}
    preSteps: ${{ parameters.preSteps }}
    templateContext:
      sdl:
        binskim:
          analyzeTargetGlob: +:f|eng\**\*.props;+:f|artifacts\bin\**\*.dll;+:f|artifacts\bin\**\*.exe;-:f|artifacts\bin\**\msdia140.dll;-:f|artifacts\bin\**\pgort140.dll;-:f|artifacts\bin\*Tests\**;-:f|**\Microsoft.NET.Runtime.Emscripten**\tools\**;-:f|**\CodeCoverage\**;-:f|artifacts\bin\**\capstone.dll;
      outputs:
      - output: pipelineArtifact
        displayName: '🌐 Publish Test Artifacts'
        condition: always()
        targetPath: '$(Build.SourcesDirectory)/artifacts/dnupTestResults'
        artifactName: 'dnupTestResults_${{ parameters.pool.os }}'
        publishLocation: Container

    steps:
    - ${{ if eq(parameters.pool.os, 'windows') }}:
      - powershell: |
          & .\restore.cmd
        displayName: 🍱 Bootstrap toolset (Windows)
      - powershell: |
          & .\.dotnet\dotnet restore test\dnup.Tests\dnup.Tests.csproj
        displayName: ♻️ Restore dnup tests (Windows)
      - powershell: |
          & .\.dotnet\dotnet build test\dnup.Tests\dnup.Tests.csproj -c Release --no-restore
        displayName: 💻 Build Windows
      - powershell: |
          New-Item -Path "$(Build.SourcesDirectory)/artifacts/dnupTestResults" -ItemType Directory -Force
        displayName: 📁 Create test results directory (Windows)
      - powershell: |
          & .\.dotnet\dotnet test test\dnup.Tests\dnup.Tests.csproj -c Release --no-build --logger "trx;LogFileName=dnup-tests.trx" --results-directory $(Build.SourcesDirectory)/artifacts/dnupTestResults
        displayName: 🔍 Test Windows
    - ${{ if ne(parameters.pool.os, 'windows') }}:
      - script: |
          ./restore.sh
        displayName: 🍱 Bootstrap toolset (Unix)
      - script: |
          ./.dotnet/dotnet restore test/dnup.Tests/dnup.Tests.csproj
        displayName: ♻️ Restore dnup tests (Unix)
      - script: |
          ./.dotnet/dotnet build test/dnup.Tests/dnup.Tests.csproj -c Release --no-restore
        displayName: 🐧 Build (Unix)
      - script: |
          mkdir -p "$(Build.SourcesDirectory)/artifacts/dnupTestResults"
        displayName: 📁 Create test results directory (Unix)
      - script: |
          ./.dotnet/dotnet test test/dnup.Tests/dnup.Tests.csproj -c Release --no-build --logger "trx;LogFileName=dnup-tests.trx" --results-directory $(Build.SourcesDirectory)/artifacts/dnupTestResults
        displayName: 🔎 Test (Unix)
    - task: PublishTestResults@2
      displayName: 🚀 Publish test results
      condition: always()
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: '**/dnup-tests.trx'
        searchFolder: $(Build.SourcesDirectory)/artifacts/dnupTestResults
        testRunTitle: 'dnup ${{ parameters.pool.os }}'
