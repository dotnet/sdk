### This job builds https://github.com/dotnet/dotnet with given parameters
### If run in an sdk PR, new changes are applied to a local copy of the VMR, then it is built and tested

parameters:
- name: artifactsRid
  type: string
  default: ''

- name: buildName
  type: string

- name: buildPass
  type: string
  default: ''

- name: configuration
  type: string
  default: 'Release'

- name: container
  type: object
  default:
    image: ''
    name: ''

- name: crossRootFs
  type: string
  default: ''

- name: pool
  type: object

- name: targetOS
  type: string
  default: ''

- name: targetArchitecture
  type: string
  default: ''

- name: useMonoRuntime
  displayName: True when build output uses the mono runtime
  type: boolean
  default: false

- name: useDevVersions
  displayName: True when build output uses dev/CI versioning instead of official build versioning
  type: boolean
  default: false

- name: sign
  displayName: True when build output should be signed (includes dry runs)
  type: boolean
  default: true

# Overrides the rid that is produced by the build.
- name: targetRid
  type: string
  default: ''

#### SOURCE-ONLY parameters ####

# Instead of building the VMR directly, exports the sources into a tarball and builds from that
- name: buildFromArchive
  type: boolean
  default: false

# Enable for source-building the VMR
- name: buildSourceOnly
  type: boolean
  default: false

- name: enablePoison
  type: boolean
  default: false

- name: excludeOmniSharpTests
  type: boolean
  default: false

# Name of previous job(s) (from the same template as this) whose output will be used to build this job
# The SDK from its artifacts is copied to $(sourcesPath)/.dotnet
- name: reuseBuildArtifactsFrom
  type: object
  default: ''

# Allow downloading artifacts from the internet during the build
- name: runOnline
  type: boolean
  default: true

- name: runTests
  type: boolean
  default: true

# Freeform field for extra values to pass to build.sh for special build modes
- name: extraProperties
  type: string
  default: ''

# Use the previous version's SDK to build the current one
- name: withPreviousSDK
  type: boolean
  default: false

#### sdk parameters ####

- name: isBuiltFromVmr
  displayName: True when build is running from dotnet/dotnet directly
  type: boolean

- name: vmrBranch
  displayName: dotnet/dotnet branch to use
  type: string

jobs:
- job: ${{ parameters.buildName }}_${{ parameters.targetArchitecture }}${{ replace(format('_BuildPass{0}', coalesce(parameters.buildPass, '1')), '_BuildPass1', '') }}
  pool: ${{ parameters.pool }}

  # 1ES pipeline template requires that the container is specified in the job level.
  # If we are using a container image, we set the container to correct name.
  # Otherwise, we set the container to host so that the job runs on the host agent.
  ${{ if eq(variables['System.TeamProject'], 'internal') }}:
    ${{ if ne(parameters.container.name, '') }}:
      container: ${{ parameters.container.name }}
    ${{ else }}:
      container: host

  # For public projects, we always use the container image if it is specified.
  ${{ else }}:
    ${{ if ne(parameters.container.image, '') }}:
      container:
        image: ${{ parameters.container.image }}
        options: $(defaultContainerOptions)

  # Currently, CodeQL slows the build down too much
  # https://github.com/dotnet/source-build/issues/4276
  ${{ if and(parameters.isBuiltFromVmr, startswith(parameters.buildName, 'Windows'), eq(variables['System.TeamProject'], 'internal'), ne(variables['Build.Reason'], 'PullRequest')) }}:
    timeoutInMinutes: 720
  ${{ else }}:
    timeoutInMinutes: 240

  ${{ if ne(parameters.reuseBuildArtifactsFrom, '') }}:
    ${{ if eq(parameters.buildPass, '') }}:
      # For PR builds, skip the stage 2 build if the stage 1 build fails.
      # Otherwise, run the stage 2 build even if the stage 1 build fails so that we can get a complete assessment of the build status.
      # The build shortcuts when stage 1 build fails and doesn't produce the SDK.
      ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        condition: succeeded()
      ${{ else }}:
        condition: succeededOrFailed()
    ${{ else }}:
      condition: succeeded()
    dependsOn: ${{ parameters.reuseBuildArtifactsFrom }}
  variables:
  - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
    - group: AzureDevOps-Artifact-Feeds-Pats
  - ${{ if and(not(parameters.isBuiltFromVmr), eq(variables['System.TeamProject'], 'internal'), not(startswith(parameters.vmrBranch, 'internal/release/')), ne(variables['Build.Reason'], 'PullRequest')) }}:
    - group: DotNetBot-GitHub
  - ${{ else }}:
    - name: BotAccount-dotnet-bot-repo-PAT
      value: N/A
  - name: additionalBuildArgs
    value: ''
  - name: runTestsTimeout
    value: 30

  - ${{ if parameters.isBuiltFromVmr }}:
    - name: vmrPath
      value: $(Build.SourcesDirectory)
  - ${{ else }}:
    - name: vmrPath
      value: $(Agent.BuildDirectory)/vmr

  # Location of the VMR sources
  # We either build the repo directly, or we extract them outside (which is what partners do)
  - ${{ if parameters.buildFromArchive }}:
    - name: sourcesPath
      value: $(Agent.TempDirectory)/dotnet-sources/
  - ${{ else }}:
    - name: sourcesPath
      value: $(vmrPath)

  - name: artifactsStagingDir
    value: $(Build.ArtifactStagingDirectory)/artifacts

  - name: successfulJobArtifactName
    value: $(Agent.JobName)_Artifacts

  - name: failedJobArtifactName
    value: $(successfulJobArtifactName)_Attempt$(System.JobAttempt)

  # manually disable CodeQL until https://dev.azure.com/mseng/1ES/_workitems/edit/2211548 is implemented
  # CodeQL doesn't work on arm64 macOS, see https://portal.microsofticm.com/imp/v5/incidents/details/532165079/summary
  - ${{ if eq(parameters.pool.os, 'macOS') }}:
    - name: ONEES_ENFORCED_CODEQL_ENABLED
      value: false

  # Build up the command line variables. We avoid doing this in the script sections below
  # because AzDO will not echo command lines if they are more than a single line.

  ## Build command line - Windows
  - ${{ if eq(parameters.targetOS, 'windows') }}:
    ## Basic arguments
    - name: baseArguments
      value:  -ci -cleanWhileBuilding -prepareMachine -c ${{ parameters.configuration }} /p:VerticalName=$(Agent.JobName) /p:ArtifactsStagingDir=$(artifactsStagingDir)

    - name: targetArguments
      value: /p:TargetOS=${{ parameters.targetOS }} /p:TargetArchitecture=${{ parameters.targetArchitecture }}

    ### Dev versions variables
    - ${{ if eq(parameters.useDevVersions, 'True') }}:
      - name: devArguments
        value: -dev
    - ${{ else }}:
      - name: devArguments
        value: ''

    ### Signing variables
    - ${{ if eq(parameters.sign, 'True') }}:
      - ${{ if or(eq(parameters.useDevVersions, 'True'), eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
        # The _SignType variable is used by microbuild installation
        - name: _SignType
          value: ''
        - name: signArguments
          value: -sign /p:ForceDryRunSigning=true
      - ${{ else }}:
        - name: _SignType
          value: real
        - name: signArguments
          value: -sign /p:DotNetSignType=real /p:TeamName=$(_TeamName)
    - ${{ else }}:
      - name: signArguments
        value: ''

    ### Build Pass
    - ${{ if ne(parameters.buildPass, '') }}:
      - name: buildPassArguments
        value: /p:DotNetBuildPass=${{ parameters.buildPass }}
    - ${{ else }}:
      - name: buildPassArguments
        value: ''

  templateContext:
    outputParentDirectory: $(Build.ArtifactStagingDirectory)
    outputs:
    - output: pipelineArtifact
      displayName: Publish BuildLogs
      condition: succeededOrFailed()
      targetPath: $(Build.ArtifactStagingDirectory)/BuildLogs
      artifactName: $(Agent.JobName)_BuildLogs_Attempt$(System.JobAttempt)
      sbomEnabled: false

    # Both publishing steps are necessary to ensure artifacts are published on both success and failure.
    # This prevents overwrite conflicts in the event of a failed build followed by a rerun.
    # Additionally, the 'Download Previous Build *' steps depend on a fixed name to acquire specific assets in multi-stage builds.
    - output: pipelineArtifact
      path: $(artifactsStagingDir)
      artifact: $(successfulJobArtifactName)
      displayName: Publish Artifacts (On Success)
      condition: succeeded()
      sbomEnabled: true

    - output: pipelineArtifact
      path: $(artifactsStagingDir)
      artifact: $(failedJobArtifactName)
      displayName: Publish Artifacts (On Failure)
      condition: failed()
      sbomEnabled: true

    # Using build artifacts to enable publishing the vertical manifests to a single artifact from different jobs
    - ${{ if ne(parameters.buildSourceOnly, true) }}:
      - output: buildArtifacts
        PathtoPublish: $(artifactsStagingDir)/manifests/${{ parameters.configuration }}/$(Agent.JobName).xml
        ArtifactName: VerticalManifests
        displayName: Publish Vertical Manifest
        sbomEnabled: false

  steps:
  - ${{ if not(parameters.isBuiltFromVmr) }}:
    - template: ../steps/vmr-prepare.yml@self
      parameters:
        ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
          vmrBranch: $(System.PullRequest.TargetBranch)
        ${{ else }}:
          vmrBranch: ${{ parameters.vmrBranch }}

    # Synchronize new content in the VMR during PRs (we expect this to come
    - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      - template: ../steps/vmr-pull-updates.yml@self
        parameters:
          vmrPath: $(vmrPath)
          vmrBranch: ${{ parameters.vmrBranch }}
          targetRef: $(Build.SourceVersion) # Synchronize the current sdk commit

  - ${{ if parameters.buildFromArchive }}:
    - script: |
        set -ex
        cp -r "$(vmrPath)" "$(sourcesPath)"
        rm -rf "$(sourcesPath)/.git"
      displayName: Export VMR sources
      workingDirectory: $(Build.ArtifactStagingDirectory)

  - ${{ if ne(parameters.reuseBuildArtifactsFrom,'') }}:
    - ${{ each reuseBuildArtifacts in parameters.reuseBuildArtifactsFrom }}:
      - ${{ if eq(parameters.buildSourceOnly, true) }}:
        - download: current
          artifact: ${{ reuseBuildArtifacts }}_Artifacts
          patterns: |
            **/Private.SourceBuilt.Artifacts.*.tar.gz
            **/dotnet-sdk-*.tar.gz
            **/*.nupkg
          displayName: Download Previous Build (${{ reuseBuildArtifacts }})

        - task: CopyFiles@2
          displayName: Copy Previous Build (${{ reuseBuildArtifacts }} - Source Build artifacts)
          inputs:
            SourceFolder: $(Pipeline.Workspace)/${{ reuseBuildArtifacts }}_Artifacts/assets/Release
            Contents: '*.tar.gz'
            TargetFolder: $(sourcesPath)/prereqs/packages/archive/

      - ${{ else }}:
        - download: current
          artifact: ${{ reuseBuildArtifacts }}_Artifacts
          displayName: Download Previous Build (${{ reuseBuildArtifacts }})

        - task: CopyFiles@2
          displayName: Copy Previous Build (${{ reuseBuildArtifacts }})
          inputs:
            SourceFolder: $(Pipeline.Workspace)/${{ reuseBuildArtifacts }}_Artifacts/
            OverWrite: false
            TargetFolder: $(sourcesPath)/artifacts/

  - ${{ if eq(parameters.withPreviousSDK, 'true') }}:
    - script: |
        set -euo pipefail

        if [[ '${{ parameters.artifactsRid }}' == '' ]]; then
           echo "'artifactsRid' is not specified. Cannot download source-built SDK."
           exit 1
        fi

        packageVersionsPath="$(sourcesPath)/eng/Versions.props"
        notFoundMessage="No source-built SDK found to download..."

        echo "Looking for source-built SDK to download..."
        archiveVersionLine=$(grep -m 1 "<PrivateSourceBuiltSdkVersion>" "$packageVersionsPath" || :)
        versionPattern="<PrivateSourceBuiltSdkVersion>(.*)</PrivateSourceBuiltSdkVersion>"

        if [[ $archiveVersionLine =~ $versionPattern ]]; then
          archiveVersion="${BASH_REMATCH[1]}"
          archiveUrl="https://builds.dotnet.microsoft.com/source-built-artifacts/sdks/dotnet-sdk-$archiveVersion-${{ parameters.artifactsRid }}.tar.gz"
          downloadDir="$(sourcesPath)/prereqs/packages/archive/"

          echo "Downloading source-built SDK from $archiveUrl..."
          (cd "$downloadDir" && curl --retry 5 -O "$archiveUrl")
        else
          echo "$notFoundMessage"
          exit 1
        fi
      displayName: Setup Previously Source-Built SDK

  - ${{ if and(eq(parameters.sign, 'True'), ne(parameters.buildSourceOnly, 'True'), eq(variables['System.TeamProject'], 'internal')) }}:
    - template: ${{ variables['Build.SourcesDirectory'] }}/eng/common/core-templates/steps/install-microbuild.yml
      parameters:
        enableMicrobuild: true
        enableMicrobuildForMacAndLinux: true

  - ${{ if eq(parameters.targetOS, 'windows') }}:
    # Node 20.x is a toolset dependency to build aspnetcore
    # Keep in sync with aspnetcore: https://github.com/dotnet/aspnetcore/blob/7d5309210d8f7bae8fa074da495e9d009d67f1b4/.azure/pipelines/ci.yml#L719-L722
    - task: NodeTool@0
      displayName: Install Node 20.x
      inputs:
        versionSpec: 20.x

    - script: build.cmd
        $(baseArguments)
        $(targetArguments)
        $(devArguments)
        $(signArguments)
        $(buildPassArguments)
        ${{ parameters.extraProperties }}
      displayName: Build
      workingDirectory: ${{ variables.sourcesPath }}

    - ${{ if eq(parameters.runTests, 'True') }}:
      - script: build.cmd
          $(baseArguments)
          $(targetArguments)
          $(devArguments)
          $(buildPassArguments)
          ${{ parameters.extraProperties }}
          -test
          -excludeCIBinarylog
          /bl:artifacts/log/Release/Test.binlog
        displayName: Run Tests
        workingDirectory: ${{ variables.sourcesPath }}
        timeoutInMinutes: ${{ variables.runTestsTimeout }}

  - ${{ else }}:
    - ${{ if eq(parameters.targetOS, 'osx') }}:
      - script: |
          $(sourcesPath)/eng/common/native/install-dependencies.sh osx
        displayName: Install dependencies
    - ${{ if eq(parameters.buildSourceOnly, 'true') }}:
      - script: |
          set -ex

          customPrepArgs=""
          prepSdk=true

          if [[ -n '${{ parameters.artifactsRid }}' ]]; then
            customPrepArgs="${customPrepArgs} --artifacts-rid ${{ parameters.artifactsRid }}"
          fi

          if [[ '${{ parameters.withPreviousSDK }}' == 'True' ]]; then
            # Source-built artifacts are from CentOS 9 Stream. We want to download them without
            # downloading portable versions from the internet.
            customPrepArgs="${customPrepArgs} --no-sdk --no-bootstrap"
            prepSdk=false
          elif [[ '${{ length(parameters.reuseBuildArtifactsFrom) }}' -gt '0' ]]; then
            customPrepArgs="${customPrepArgs} --no-sdk --no-artifacts"
            prepSdk=false
          fi

          if [[ "$prepSdk" == "false" ]]; then
            mkdir $(sourcesPath)/.dotnet
            previousSdkPath="$(sourcesPath)/prereqs/packages/archive/dotnet-sdk-*.tar.gz"
            eval tar -ozxf "$previousSdkPath" -C "$(sourcesPath)/.dotnet"
            eval rm -f "$previousSdkPath"

            echo "##vso[task.setvariable variable=additionalBuildArgs]--with-sdk $(sourcesPath)/.dotnet"
          fi

          ./prep-source-build.sh $customPrepArgs
        displayName: Prep the Build
        workingDirectory: $(sourcesPath)

    - script: |
        set -ex
        df -h

        customEnvVars=""
        customPreBuildArgs=""
        customBuildArgs="--ci --clean-while-building --prepareMachine -c ${{ parameters.configuration }}"

        if [[ '${{ parameters.runOnline }}' == 'True' ]]; then
          customBuildArgs="$customBuildArgs --online"
        else
          customPreBuildArgs="$customPreBuildArgs sudo unshare -n"
        fi

        if [[ '${{ parameters.enablePoison }}' == 'True' ]]; then
          customBuildArgs="$customBuildArgs --poison"
        fi

        if [[ '${{ parameters.buildFromArchive }}' == 'True' ]]; then
          customBuildArgs="$customBuildArgs --source-repository https://github.com/dotnet/dotnet"
          customBuildArgs="$customBuildArgs --source-version $(git -C "$(vmrPath)" rev-parse HEAD)"
        fi

        if [[ '${{ parameters.buildSourceOnly }}' == 'True' ]]; then
          customBuildArgs="$customBuildArgs --source-only"
          extraBuildProperties="$extraBuildProperties /p:ReportSbrpUsage=true"
        fi

        if [[ '${{ parameters.useMonoRuntime }}' == 'True' ]]; then
          customBuildArgs="$customBuildArgs --use-mono-runtime"
        fi

        if [[ '${{ parameters.useDevVersions }}' == 'True' ]]; then
          customBuildArgs="$customBuildArgs --dev"
        fi

        if [[ '${{ parameters.sign }}' == 'True' ]] && [[ '${{ parameters.buildSourceOnly }}' != 'True' ]]; then
          customBuildArgs="$customBuildArgs --sign"
          if [[ '$(_SignType)' == 'real' ]] || [[ '$(_SignType)' == 'test' ]]; then
            # Force dry run signing until https://github.com/dotnet/source-build/issues/4793 is resolved - https://github.com/dotnet/source-build/issues/4678
            extraBuildProperties="$extraBuildProperties /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName) /p:ForceDryRunSigning=true"
          else
            extraBuildProperties="$extraBuildProperties /p:ForceDryRunSigning=true"
          fi
        fi

        if [[ -n "${{ parameters.targetRid }}" ]]; then
          customBuildArgs="$customBuildArgs --target-rid ${{ parameters.targetRid }}"
        fi

        if [[ -n "${{ parameters.crossRootFs }}" ]]; then
          customEnvVars="$customEnvVars ROOTFS_DIR=${{ parameters.crossRootFs}}"
          if [[ '${{ parameters.targetArchitecture }}' != 'wasm' ]]; then
            extraBuildProperties="$extraBuildProperties /p:CrossBuild=true"
          fi
        fi

        if [[ ! -z '${{ parameters.targetOS }}' ]]; then
          extraBuildProperties="$extraBuildProperties /p:TargetOS=${{ parameters.targetOS }}"
        fi

        if [[ ! -z '${{ parameters.targetArchitecture }}' ]]; then
          extraBuildProperties="$extraBuildProperties /p:TargetArchitecture=${{ parameters.targetArchitecture }}"
        fi

        if [[ -n "${{ parameters.buildPass }}" ]]; then
          extraBuildProperties="$extraBuildProperties /p:DotNetBuildPass=${{ parameters.buildPass }}"
        fi

        if [[ -n "${{ parameters.extraProperties }}" ]]; then
          extraBuildProperties="$extraBuildProperties ${{ parameters.extraProperties }}"
        fi

        extraBuildProperties="$extraBuildProperties /p:VerticalName=$(Agent.JobName)"
        extraBuildProperties="$extraBuildProperties /p:ArtifactsStagingDir=$(artifactsStagingDir)"

        buildArgs="$(additionalBuildArgs) $customBuildArgs $extraBuildProperties"

        for envVar in $customEnvVars; do
          customEnvVarsWithBashSyntax="$customEnvVarsWithBashSyntax export $envVar;"
        done

        eval $customEnvVarsWithBashSyntax
        $customPreBuildArgs ./build.sh $buildArgs
      displayName: Build
      workingDirectory: $(sourcesPath)

    - ${{ if ne(parameters.runOnline, 'True' )}}:
      - script: |
          set -ex
          # Update the owner of the staging directory to the current user
          sudo chown -R $(whoami) $(artifactsStagingDir)
        displayName: Update owner of artifacts staging directory

    # Only run tests if enabled
    - ${{ if eq(parameters.runTests, 'True') }}:
      # Setup the NuGet sources used by the tests to use private feeds. This is necessary when testing internal-only product
      # builds where the packages are only available in the private feeds. This allows the tests to restore from those feeds.
      - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
        - task: Bash@3
          displayName: Setup Private Feeds Credentials
          inputs:
            filePath: $(sourcesPath)/src/sdk/eng/common/SetupNugetSources.sh
            arguments: $(sourcesPath)/src/sdk/NuGet.config $Token
          env:
            Token: $(dn-bot-dnceng-artifact-feeds-rw)

        - script: cp "$(sourcesPath)/src/sdk/NuGet.config" "$(sourcesPath)/test/Microsoft.DotNet.SourceBuild.Tests/assets/online.NuGet.Config"
          displayName: Copy Test NuGet Config for Smoke Tests

      - script: |
          set -ex

          customPreBuildArgs=''
          customBuildArgs=''
          extraBuildProperties=''
          customBuildArgs="--ci --prepareMachine -c ${{ parameters.configuration }}"

          if [[ '${{ parameters.runOnline }}' == 'False' ]]; then
            customPreBuildArgs="$customPreBuildArgs sudo"
          fi

          if [[ ! -z '${{ parameters.targetOS }}' ]]; then
            extraBuildProperties="$extraBuildProperties /p:TargetOS=${{ parameters.targetOS }}"
          fi

          if [[ ! -z '${{ parameters.targetArchitecture }}' ]]; then
            extraBuildProperties="$extraBuildProperties /p:TargetArchitecture=${{ parameters.targetArchitecture }}"
          fi

          if [[ '${{ parameters.useDevVersions }}' == 'True' ]]; then
            customBuildArgs="$customBuildArgs --dev"
          fi

          if [[ '${{ parameters.buildSourceOnly }}' == 'True' ]]; then
            if [[ '${{ parameters.enablePoison }}' == 'True' ]]; then
              customBuildArgs="$customBuildArgs --poison"
            fi
            customBuildArgs="$customBuildArgs --source-only /p:SourceBuildTestsExcludeOmniSharpTests=${{ parameters.excludeOmniSharpTests }}"
          fi

          if [[ -n "${{ parameters.targetRid }}" ]]; then
            customBuildArgs="$customBuildArgs --target-rid ${{ parameters.targetRid }}"
          fi

          extraBuildProperties="$extraBuildProperties /p:VerticalName=$(Agent.JobName)"
          extraBuildProperties="$extraBuildProperties /p:ArtifactsStagingDir=$(artifactsStagingDir)"

          if [[ -n "${{ parameters.extraProperties }}" ]]; then
            extraBuildProperties="$extraBuildProperties ${{ parameters.extraProperties }}"
          fi

          cd $(sourcesPath)
          $customPreBuildArgs ./build.sh --test --excludeCIBinarylog /bl:artifacts/log/Release/Test.binlog $customBuildArgs $extraBuildProperties $(additionalBuildArgs)

        displayName: Run Tests
        timeoutInMinutes: ${{ variables.runTestsTimeout }}

  - ${{ if and(eq(parameters.sign, 'True'), ne(parameters.buildSourceOnly, 'True'), eq(variables['System.TeamProject'], 'internal')) }}:
    - template: ${{ variables['Build.SourcesDirectory'] }}/eng/common/core-templates/steps/cleanup-microbuild.yml
      parameters:
        enableMicrobuild: true
        enableMicrobuildForMacAndLinux: true

  - task: CopyFiles@2
    displayName: Prepare BuildLogs staging directory
    inputs:
      SourceFolder: '$(sourcesPath)'
      Contents: |
        artifacts/log/**
        artifacts/TestResults/**/*.binlog
        artifacts/TestResults/**/*.diff
        artifacts/TestResults/**/Updated*.txt
        artifacts/TestResults/**/*.trx
        artifacts/TestResults/**/*.xml
      TargetFolder: '$(Build.ArtifactStagingDirectory)/BuildLogs'
      CleanTargetFolder: true
    continueOnError: true
    condition: succeededOrFailed()

  - ${{ if eq(parameters.buildSourceOnly, 'True') }}:
    - task: CopyFiles@2
      displayName: Copy prebuilt-report to BuildLogs
      inputs:
        SourceFolder: '$(sourcesPath)'
        Contents: artifacts/prebuilt-report/**
        TargetFolder: '$(Build.ArtifactStagingDirectory)/BuildLogs'
      continueOnError: true
      condition: succeededOrFailed()

  - ${{ if or(ne(variables['System.TeamProject'], 'internal'), eq(variables['Build.Reason'], 'PullRequest')) }}:
    - publish: $(Build.ArtifactStagingDirectory)/BuildLogs
      artifact: $(Agent.JobName)_BuildLogs_Attempt$(System.JobAttempt)
      displayName: Publish BuildLogs
      continueOnError: true
      condition: always()

  # Only upload test results if enabled
  - ${{ if eq(parameters.runTests, 'True') }}:
    - task: PublishTestResults@2
      displayName: Publish Test Results
      condition: succeededOrFailed()
      continueOnError: true
      inputs:
        testRunner: VSTest
        testResultsFiles: 'artifacts/TestResults/Release/*.trx'
        searchFolder: $(sourcesPath)
        mergeTestResults: true
        publishRunAttachments: true
        testRunTitle: Tests_$(Agent.JobName)

    - task: PublishTestResults@2
      displayName: Publish Scenario Test Results
      condition: and(eq(variables['hasScenarioTestResults'], 'true'), succeededOrFailed())
      continueOnError: true
      inputs:
        testRunner: xUnit
        testResultsFiles: 'artifacts/TestResults/**/scenario-tests/*.xml'
        searchFolder: $(sourcesPath)
        mergeTestResults: true
        publishRunAttachments: true
        testRunTitle: ScenarioTests_$(Agent.JobName)

  - ${{ if or(ne(variables['System.TeamProject'], 'internal'), eq(variables['Build.Reason'], 'PullRequest')) }}:
    # Both publishing steps are necessary to ensure artifacts are published on both success and failure.
    # This prevents overwrite conflicts in the event of a failed build followed by a rerun.
    # Additionally, the 'Download Previous Build *' steps depend on a fixed name to acquire specific assets in multi-stage builds.
    - publish: $(artifactsStagingDir)
      artifact: $(successfulJobArtifactName)
      displayName: Publish Artifacts (On Success)
      condition: succeeded()
      continueOnError: true

    - publish: $(artifactsStagingDir)
      artifact: $(failedJobArtifactName)
      displayName: Publish Artifacts (On Failure)
      condition: failed()
      continueOnError: true

    # Using build artifacts to enable publishing the vertical manifests to a single artifact from different jobs
    - ${{ if ne(parameters.buildSourceOnly, true) }}:
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: $(artifactsStagingDir)/manifests/${{ parameters.configuration }}/$(Agent.JobName).xml
          ArtifactName: VerticalManifests
        displayName: Publish Vertical Manifest
