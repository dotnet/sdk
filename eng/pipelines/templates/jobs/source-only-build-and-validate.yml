parameters:
- name: buildNamePrefix
  type: string

- name: container
  type: object
  default:
    image: ''
    name: ''

# Allow downloading artifacts from the internet during the build
- name: runOnline
  type: boolean
  default: true

- name: targetArchitecture
  type: string
  default: ''

- name: pool_Linux
  type: object
  default:
    name: $(defaultPoolName)
    image: $(poolImage_Linux)
    demands: ImageOverride -equals $(poolImage_Linux)
    os: linux

jobs:
# Source Build Leg
- template: ../jobs/vmr-build.yml
  parameters:
    buildName: ${{ format('{0}_SourceBuild_Online_MsftSdk', parameters.buildNamePrefix) }}
    isBuiltFromVmr: true
    vmrBranch: ${{ variables.VmrBranch }}
    targetArchitecture: x64
    pool: ${{ parameters.pool_Linux }}
    container: ${{ parameters.container }}
    buildSourceOnly: true
    runOnline: ${{ parameters.runOnline }}
    runTests: false
    extraProperties: "/p:EnableDevBuildAsDefaultForSourceOnly=true"

# Source Build Validation
- template: ../jobs/vmr-build.yml
  parameters:
    buildName: ${{ format('{0}_SourceBuild_Online_MsftSdk', parameters.buildNamePrefix) }}_Validation
    isBuiltFromVmr: true
    vmrBranch: ${{ variables.VmrBranch }}
    targetArchitecture: ${{ parameters.targetArchitecture }}
    pool: ${{ parameters.pool_Linux }}
    container: ${{ parameters.container }}
    buildSourceOnly: true
    runOnline: ${{ parameters.runOnline }}
    runTests: true
    skipBuild: true
    extraProperties: >
      /p:DotNetSourceOnlyTestOnly=true
      /p:ExtraRestoreSourcePath=$(Pipeline.Workspace)/msft-pkgs
      /p:RestoreAdditionalProjectSources=$(Pipeline.Workspace)/msft-pkgs
    dependsOn:
    - AzureLinux_x64_Cross_x64
    - Browser_Shortstack_wasm
    - Windows_x64
    - ${{ format('{0}_SourceBuild_Online_MsftSdk_x64', parameters.buildNamePrefix) }}
    testInitSteps:
    # Ensure the artifacts staging directory exists so that even if no files get placed there, it won't fail
    # when publishing the artifacts.
    - script: mkdir -p $(artifactsStagingDir)
      displayName: Create Artifacts Staging Directory
    - template: ../steps/download-artifacts.yml
      parameters:
        artifactDescription: Microsoft Linux Packages
        artifactName: AzureLinux_x64_Cross_x64_Artifacts
        downloadFilePatterns: packages/Release/Shipping/**
        copyDestination: $(Pipeline.Workspace)/msft-pkgs
        flattenDirs: true
    - template: ../steps/download-artifacts.yml
      parameters:
        artifactDescription: Microsoft WASM Packages
        artifactName: Browser_Shortstack_wasm_Artifacts
        downloadFilePatterns: packages/Release/Shipping/**
        copyDestination: $(Pipeline.Workspace)/msft-pkgs
        flattenDirs: true
    - template: ../steps/download-artifacts.yml
      parameters:
        artifactDescription: Microsoft Windows Packages
        artifactName: Windows_x64_Artifacts
        downloadFilePatterns: packages/Release/Shipping/**
        copyDestination: $(Pipeline.Workspace)/msft-pkgs
        flattenDirs: true
    - template: ../steps/download-artifacts.yml
      parameters:
        artifactDescription: Source Build Assets
        artifactName: ${{ format('{0}_SourceBuild_Online_MsftSdk_x64', parameters.buildNamePrefix) }}_Artifacts
        downloadFilePatterns: assets/Release/**/*.tar.gz
        copyDestination: $(Build.SourcesDirectory)/artifacts
