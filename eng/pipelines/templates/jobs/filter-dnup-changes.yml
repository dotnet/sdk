# Filter job to check if changes are dnup-only
parameters:
  pool: {}

jobs:
- job: FilterDnupChanges
  displayName: Filter dnup-only Changes
  pool: ${{ parameters.pool }}

  steps:
  - checkout: self
    fetchDepth: 0

  - powershell: |
      # Initialize the variable to false
      $isDnupOnly = $true

      # If PR, get the changed files
      if ($env:BUILD_REASON -eq 'PullRequest') {
        Write-Host "This is a PR build, checking changed files..."
        $targetBranch = "$env:SYSTEM_PULLREQUEST_TARGETBRANCH"
        Write-Host "Target branch: $targetBranch"

        # Get changed files in the PR
        $changedFiles = git diff --name-only origin/$targetBranch..HEAD

        Write-Host "Changed files:"
        $changedFiles | ForEach-Object { Write-Host "  $_" }

        # Check if any changed files are outside dnup paths
        foreach ($file in $changedFiles) {
          if (-not ($file.StartsWith("src/Installer/") -or $file.StartsWith("test/dnup.Tests/"))) {
            Write-Host "Found change outside dnup paths: $file"
            $isDnupOnly = $false
            break
          }
        }
      } else {
        # If not a PR, we assume it's not dnup-only
        Write-Host "This is not a PR build, setting isDnupOnly to false"
        $isDnupOnly = $false
      }

      # Set the variable for later stages
      Write-Host "##vso[task.setvariable variable=isDnupOnlyChanges;isOutput=true]$isDnupOnly"
      Write-Host "isDnupOnlyChanges = $isDnupOnly"
    displayName: Check if changes are dnup-only
    name: SetDnupFlag
