<Project DefaultTargets="Build" xmln="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Import MicroBuild for projects that need to be signed -->
  <Import Condition="''$(NeedsSigningToRelease)' == 'true'" Project="$(NuGetPackageRoot)\MicroBuild.Core\0.2.0\build\MicroBuild.Core.props" />
  <Import Condition="''$(NeedsSigningToRelease)' == 'true'" Project="$(NuGetPackageRoot)\MicroBuild.Core\0.2.0\build\MicroBuild.Core.targets" />
  <VSLToolsPath Condition="'$(VSLToolsPath)' == ''">$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)\..'))</VSLToolsPath>


  <!-- settings for strong name signing -->
  <PropertyGroup>
    <MicroBuildSigningLibraryV2>$(BUILD_ARTIFACTSTAGINGDIRECTORY)\MicroBuild\Plugins\MicroBuild.Plugins.Signing.1.0.227\build\MicroBuild.Signing.dll</MicroBuildSigningLibraryV2>
    <MicroBuildSigningLibrary Condition="Exists('$(MicroBuildSigningLibraryV2)')">$(MicroBuildSigningLibraryV2)</MicroBuildSigningLibrary>
    <ShouldSignBuild Condition="'$(RunningInMicroBuild)' == 'true' AND '$(SignType)' == 'real'">true</ShouldSignBuild>
    <StrongNameCertificate Condition="'$(StrongNameCertificate)' == ''">MicrosoftShared</StrongNameCertificate>
    <RoslynInternalKey>002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2</RoslynInternalKey>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(SignAssembly)' == 'true'">
      <Choose>
        <!-- Shipping binaries in an "official" build are delay-signed with the MS key; later, the signing
             system will finish the strong-name signing. -->
        <When Condition="'$(NonShipping)' != 'true'">

          <Choose>
            <!-- DelaySign if we're real signing, otherwise public sign -->
            <When Condition="'$(ShouldSignBuild)' == 'true'">
              <PropertyGroup>
                <DelaySign>true</DelaySign>
              </PropertyGroup>
            </When>
            <Otherwise>
              <PropertyGroup>
                <PublicSign>true</PublicSign>
              </PropertyGroup>
            </Otherwise>
          </Choose>

          <Choose>
            <When Condition="'$(StrongNameCertificate)' == 'Microsoft'">
              <PropertyGroup>
                <AssemblyOriginatorKeyFile>$(VSLToolsPath)\Strong Name Keys\MSFT.snk</AssemblyOriginatorKeyFile>
                <PublicKey>002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293</PublicKey>
                <PublicKeyToken>b03f5f7f11d50a3a</PublicKeyToken>
                <StrongNameCertificateFriendlyId>67</StrongNameCertificateFriendlyId>
              </PropertyGroup>
            </When>

            <When Condition="'$(StrongNameCertificate)' == 'MicrosoftShared'">
              <PropertyGroup>
                <AssemblyOriginatorKeyFile>$(VSLToolsPath)\Strong Name Keys\35MSSharedLib1024.snk</AssemblyOriginatorKeyFile>
                <PublicKey>0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9</PublicKey>
                <PublicKeyToken>31BF3856AD364E35</PublicKeyToken>
                <StrongNameCertificateFriendlyId>72</StrongNameCertificateFriendlyId>
              </PropertyGroup>
            </When>

          </Choose>

        </When>

        <!-- Non-shipping binaries are simply signed with the Roslyn internal key. -->
        <Otherwise>
          <PropertyGroup>
            <AssemblyOriginatorKeyFile>$(VSLToolsPath)\Strong Name Keys\RoslynInternalKey.Private.snk</AssemblyOriginatorKeyFile>
            <DelaySign>false</DelaySign>
            <PublicKey>$(RoslynInternalKey)</PublicKey>
            <PublicKeyToken>fc793a00266884fb</PublicKeyToken>
          </PropertyGroup>
        </Otherwise>
      </Choose>
    </When>
  </Choose>

  <!-- Because https://github.com/dotnet/roslyn/issues/7812 is not yet fixed, the IDE doesn't know if we set the PublicSign
       flag. As a result, all design-time builds will thing we're real-signing, which causes semantics to get all screwed up.
       The workaround for now is, for design-time builds only, to pass the DelaySign flag since that's "good enough". This
       must be done in a target versus conditioning on BuildingProject, since BuildingProject itself is correctly set in a
       target. -->
  <Target Name="FixPublicSignFlagForDesignTimeBuilds" BeforeTargets="CoreCompile" Condition="'$(PublicSign)' == 'true'">
    <PropertyGroup Condition="'$(BuildingProject)' == 'false'">
      <!-- Turn off PublicSign, because leaving both to true will make the Csc task unhappy -->
      <PublicSign>false</PublicSign>
      <DelaySign>true</DelaySign>
    </PropertyGroup>
  </Target>

  <ItemGroup>
    <FilesToSign Condition="'$(ShouldSignBuild)' == 'true' AND '$(NonShipping)' != 'true'" Include="$(OutDir)\$(AssemblyName).dll">
        <Authenticode>Microsoft</Authenticode>
        <StrongName>$(StrongNameCertificateFriendlyId)</StrongName>
    </FilesToSign>
  </ItemGroup>

</Project>