<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" TreatAsLocalProperty="OutDir;Configuration">
  <!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
  <!-- This file is imported by all projects at the beginning of the project files -->

  <!-- Project language -->
  <PropertyGroup Condition="'$(ProjectLanguage)' == ''">
    <ProjectLanguage Condition="'$(MSBuildProjectExtension)' == '.csproj' OR '$(Language)' == 'C#'">CSharp</ProjectLanguage>
  </PropertyGroup>

  <PropertyGroup>
    <RepositoryRootDirectory>$(MSBuildThisFileDirectory)</RepositoryRootDirectory>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>

    <OutputPath>$([System.IO.Path]::GetFullPath('$(RepositoryRootDirectory)bin\$(Configuration)'))\</OutputPath>
    <OutDir>$(OutputPath)</OutDir>
    <BaseIntermediateOutputPath Condition="'$(BaseIntermediateOutputPath)' == ''">$([System.IO.Path]::GetFullPath('$(RepositoryRootDirectory)bin\obj\$(MSBuildProjectName)'))\</BaseIntermediateOutputPath>
    <PackagesLayoutDir>$(OutDir)PackagesLayout\</PackagesLayoutDir>
    <PackagesLayoutToolsDir>$(PackagesLayoutDir)tools\</PackagesLayoutToolsDir>
    <PackagesLayoutToolsNet46Dir>$(PackagesLayoutToolsDir)net46\</PackagesLayoutToolsNet46Dir>
    <PackagesLayoutToolsNetCoreAppDir>$(PackagesLayoutToolsDir)netcoreapp1.0\</PackagesLayoutToolsNetCoreAppDir>
    
    <!-- When running on VSO (for official builds) use a real number. -->
    <BuildNumber Condition="'$(BuildNumber)' == ''">$(BUILD_BUILDNUMBER)</BuildNumber>
    <!-- Split the build parts out from the BuildNumber which is given to us by MicroBuild in the format of yyyymmdd.nn
         where BuildNumberFiveDigitDateStamp is mmmdd (such as 60615) and BuildNumberBuildOfTheDay is nn (which represents the nth build
         started that day). So the first build of the day, 20160615.1, will produce something similar to BuildNumberFiveDigitDateStamp: 60615,
         BuildNumberBuildOfTheDayPadded: 01;and the 12th build of the day, 20160615.12, will produce BuildNumberFiveDigitDateStamp: 60615, BuildNumberBuildOfTheDay: 12

         Additionally, in order ensure the value fits in the 16-bit PE header fields, we will only take the last five digits of the BuildNumber, so
         in the case of 20160615, we will set BuildNumberFiveDigitDateStamp to 60615. Unfortunately for releases in 2017 we can't go any higher, so
         we will continue the month counting instead: the build after 61231 is 61301. -->
    <BuildNumberPart1 Condition="'$(BuildNumber)' != ''">$(BuildNumber.Split('.')[0].Substring(3).Trim())</BuildNumberPart1>
    <BuildNumberFiveDigitDateStamp Condition="'$(BuildNumber)' != ''">$([MSBuild]::Subtract($(BuildNumberPart1), 8800))</BuildNumberFiveDigitDateStamp>
    <BuildNumberBuildOfTheDayPadded Condition="('$(BuildNumber)' != '') AND ($(BuildNumber.Split('.').Length) == 2)">$(BuildNumber.Split('.')[1].PadLeft(2,'0'))</BuildNumberBuildOfTheDayPadded>

    <VersionPrefix Condition="'$(VersionPrefix)' == ''">1.0.0</VersionPrefix>
    <VersionSuffix Condition="'$(VersionSuffix)' == ''">alpha</VersionSuffix>
    <Version Condition="'$(Version)' == ''">$(VersionPrefix)-$(VersionSuffix)</Version>
    <Version Condition="'$(BuildNumberFiveDigitDateStamp)' != '' AND '$(BuildNumberBuildOfTheDayPadded)' != ''">$(Version)-$(BuildNumberFiveDigitDateStamp.Trim())-$(BuildNumberBuildOfTheDayPadded.Trim())</Version>
  </PropertyGroup>
  
  <!-- Prepare Version number used in template builds -->
  <Choose>
    <When Condition="'$(BuildVersion)' != ''">
      <!-- The user specified a build version number. In that case, we'll use their version number
        for the file version, and force the assembly version to $(VersionPrefix).0.  That way
        day-to-day upgrades don't break assembly references to other installed apps. -->
      <PropertyGroup>
        <AssemblyVersion>$(VersionPrefix).0</AssemblyVersion>
        <VsixVersion>$(BuildVersion)</VsixVersion>
      </PropertyGroup>
    </When>

    <When Condition="('$(BuildNumber)' != '') AND ('$(BuildNumberFiveDigitDateStamp)' != '') AND ('$(BuildNumberBuildOfTheDayPadded)' != '')">
      <!-- The user specified a build number, so we should use that. -->
      <PropertyGroup>
        <AssemblyVersion>$(VersionPrefix).0</AssemblyVersion>
        <BuildVersion>$(VersionPrefix).$(BuildNumberFiveDigitDateStamp)</BuildVersion>
        <VsixVersion>$(VersionPrefix).$(BuildNumberFiveDigitDateStamp)$(BuildNumberBuildOfTheDayPadded)</VsixVersion>
      </PropertyGroup>
    </When>

    <When Condition="'$(OfficialBuild)' == 'true' OR '$(RealSignBuild)' == 'true' OR '$(SignType)' == 'real'">
      <!-- We're creating an official or real-signed build, but don't have a build number. Just use the VersionPrefix.
        This happens if the build template does not pass BuildNumber down to MSBuild. -->
      <PropertyGroup>
        <AssemblyVersion>$(VersionPrefix).0</AssemblyVersion>
        <BuildVersion>$(VersionPrefix).$(BuildNumberFiveDigitDateStamp)</BuildVersion>
        <VsixVersion>$(VersionPrefix).$(BuildNumberFiveDigitDateStamp)$(BuildNumberBuildOfTheDayPadded)</VsixVersion>
      </PropertyGroup>
    </When>

    <Otherwise>
      <!-- No build version was supplied.  We'll use a special version, higher than anything
        installed, so that the assembly identity is different.  This will allows us to
        have a build with an actual number installed, but then build and F5 a build with
        this number.  -->
      <PropertyGroup>
        <AssemblyVersion>42.42.42.42</AssemblyVersion>
        <BuildVersion>42.42.42.42</BuildVersion>
        <VsixVersion>42.42.42.42</VsixVersion>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup>
    <!-- Unfortunately we have already shipped template manifests with version 2.0.0.0 (matching
         the version for the NETCore Project System.) Changing this version to match $(VsixVersion) 
         which is 1.0.0.xxx may create upgrade problems for users doing B2B or Preview 5 upgrades. 
         Introducing a version variable that continues the 2.0.0.xxx scheme but uses the right build 
         number. This conforms to the dependencies specified in the ManagedDesktop workload [2.0.0.0,3.0.0.0).
         We can get rid of this, and references to it, when we bump Microsoft.NET.Sdk version to 2.0.0.
      -->
    <ProjectSystemVsixVersion Condition="'$(ProjectSystemVsixVersion)' == ''">2.0.0.$(BuildNumberFiveDigitDateStamp)$(BuildNumberBuildOfTheDayPadded)</ProjectSystemVsixVersion>

    <DotNet_Install_Dir Condition=" '$(DotNet_Install_Dir)' == ''">$(RepositoryRootDirectory).dotnet_cli\</DotNet_Install_Dir>
    <DotNetTool>$(DotNet_Install_Dir)\dotnet</DotNetTool>

    <NuGet_Packages Condition=" '$(NuGet_Packages)' == ''">$(RepositoryRootDirectory)packages\</NuGet_Packages>
    <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == ''">$(NuGet_Packages)</NuGetPackageRoot>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Assembly signing isn't supported by non-Windows MSBuild. Disable until supported. See #55 (https://github.com/dotnet/sdk/issues/55) -->
    <SignAssembly Condition="'$(SignAssembly)'=='' AND '$(OS)'=='Windows_NT'">true</SignAssembly>
  </PropertyGroup>

  <Import Project="build\DependencyVersions.props" />
</Project>
